apply from: 'dependencies.gradle'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
    }
}

subprojects {
    apply plugin: 'java'

    sourceCompatibility = 11
    targetCompatibility = 11

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url "https://teavm.org/maven/repository/" }
    }

    configurations.configureEach {
        // Check for updates every build
        resolutionStrategy.cacheChangingModulesFor(0, 'seconds')
    }
}

var libProjects = [
        project(":imgui:core"),
        project(":imgui:desktop"),
        project(":imgui:teavm"),
        project(":extensions:gdx"),
        project(":extensions:lwjgl3"),
        project(":extensions:gdx-frame-viewport"),
        project(":extensions:imlayout:imlayout-core"),
        project(":extensions:imlayout:imlayout-desktop")
]

configure(libProjects) {
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    group = project.groupId

    publishing {
        repositories {
            maven {
                url {
                    def ver = project.version.toString()
                    def isSnapshot = ver.toUpperCase().contains("SNAPSHOT")
                    def repoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                    def repoUrlSnapshot = "https://oss.sonatype.org/content/repositories/snapshots/"
                    isSnapshot ? repoUrlSnapshot : repoUrl
                }
                credentials {
                    username = System.getenv('USER')
                    password = System.getenv('PASSWORD')
                }
            }
        }
    }

    javadoc {
        options.encoding = 'UTF-8'
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    publishing.publications.configureEach { mav ->
        pom {
            name = "gdx-imgui"
            description = "Java JNI based binding for imgui"
            url = "https://github.com/xpenatan/gdx-imgui"
            developers {
                developer {
                    id = "Xpe"
                    name = "Natan"
                }
            }
            scm {
                connection = "scm:git:git://https://github.com/xpenatan/gdx-imgui.git"
                developerConnection = "scm:git:ssh://https://github.com/xpenatan/gdx-imgui.git"
                url = "http://https://github.com/xpenatan/gdx-imgui/tree/master"
            }
            licenses {
                license {
                    name = "The Apache License, Version 2.0"
                    url = "https://www.apache.org/licenses/LICENSE-2.0.txt"
                }
            }
        }
    }

    def signingKey = System.getenv("SIGNING_KEY")
    def signingPassword = System.getenv("SIGNING_PASSWORD")
    if(signingKey != null && signingPassword != null) {
        signing {
            useInMemoryPgpKeys(signingKey, signingPassword)
            publishing.publications.configureEach { pub ->
                sign pub
            }
        }
    }
}

tasks.register('buildCore') {
    dependsOn ":imgui:core:core-build:generateNatives"
}

tasks.register('buildCpp') {
    dependsOn ":imgui:cpp:generateNatives"
}

tasks.register('buildImLayout') {
    dependsOn ":imgui:extensions:imlayout:imlayout-build:generateNatives"
}

tasks.register('buildImGuiNatives') {
    group = 'imgui'
    dependsOn buildCpp, buildCore, buildImLayout

    tasks.findByName("buildCore").mustRunAfter "buildCpp"
    tasks.findByName("buildImLayout").mustRunAfter "buildCore"
}