apply from: 'dependencies.gradle'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
    }
}


allprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    sourceCompatibility = 11
    targetCompatibility = 11

    ext {
        repoUser = System.getenv('IMGUI_USER')
        repoPass = System.getenv('IMGUI_PASSWORD')
        repoUrl = ''
        repoUrlSnapshot = 'https://oss.sonatype.org/content/repositories/snapshots/'

        def localFile = project.rootProject.file("local.properties")
        if (localFile.exists()) {
            Properties properties = new Properties()
            properties.load(project.rootProject.file("local.properties").newDataInputStream())
            repoUser = properties.getProperty("xUser")
            repoPass = properties.getProperty("xPass")
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url "https://teavm.org/maven/repository/" }
    }

    publishing {
        repositories {
            maven {
                url {
                    def ver = project.version.toString()
                    def isSnapshot = ver.toUpperCase().contains("SNAPSHOT")
                    isSnapshot ? repoUrlSnapshot : repoUrl
                }
                credentials {
                    username repoUser
                    password repoPass
                }
            }
        }
    }

    configurations.all {
        // Check for updates every build
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
}

// Disable building example from root parent
//gradle.taskGraph.whenReady { graph ->
//    def hasRootRunTask = containsTask(graph, ":imgui:") && containsTask(graph, ":examples:") && containsTask(graph, ":extensions:")
//    if (hasRootRunTask) {
//        graph.getAllTasks().each { task ->
//            // disable all task from examples if the parent is executing
//            def isExample = task.path.contains(":examples")
//            task.enabled = !isExample
//        }
//    }
//}

tasks.register('buildCore') {
    dependsOn ":imgui:imgui-core:imgui-core-build:generateNatives"
}

tasks.register('buildCpp') {
    dependsOn ":imgui:imgui-cpp:imgui-cpp:generateNatives"
}

tasks.register('buildImLayout') {
    dependsOn ":imgui:imgui-extensions:imgui-imlayout:imgui-imlayout-build:generateNatives"
}

tasks.register('buildImGuiNatives') {
    group = 'imgui'
    dependsOn buildCore, buildCpp, buildImLayout
}

buildCore.shouldRunAfter buildCpp

buildImLayout.shouldRunAfter buildCore