apply from: 'dependencies.gradle'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
    }
}

subprojects {
    apply plugin: 'java'

    sourceCompatibility = 11
    targetCompatibility = 11

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url "https://teavm.org/maven/repository/" }
    }

    configurations.configureEach {
        // Check for updates every build
        resolutionStrategy.cacheChangingModulesFor(0, 'seconds')
    }
}

var libProjects = [
        project(":imgui:imgui-core:imgui-core"),
        project(":imgui:imgui-core:imgui-core-teavm"),
        project(":imgui:imgui-extensions:imgui-gdx"),
        project(":imgui:imgui-extensions:imgui-gdx-lwjgl3"),
        project(":imgui:imgui-extensions:imgui-gdx-frame-viewport"),
        project(":imgui:imgui-extensions:imgui-imlayout:imgui-imlayout")
]

configure(libProjects) {
    apply plugin: 'maven-publish'

    ext {
        repoUser = System.getenv('IMGUI_USER')
        repoPass = System.getenv('IMGUI_PASSWORD')
        repoUrl = ''
        repoUrlSnapshot = 'https://oss.sonatype.org/content/repositories/snapshots/'

        def localFile = project.rootProject.file("local.properties")
        if (localFile.exists()) {
            Properties properties = new Properties()
            properties.load(project.rootProject.file("local.properties").newDataInputStream())
            repoUser = properties.getProperty("xUser")
            repoPass = properties.getProperty("xPass")
        }
    }

    publishing {
        repositories {
            maven {
                url {
                    def ver = project.version.toString()
                    def isSnapshot = ver.toUpperCase().contains("SNAPSHOT")
                    isSnapshot ? repoUrlSnapshot : repoUrl
                }
                credentials {
                    username repoUser
                    password repoPass
                }
            }
        }
    }

    javadoc {
        options.encoding = 'UTF-8'
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }
}

tasks.register('buildCore') {
    dependsOn ":imgui:imgui-core:imgui-core-build:generateNatives"
}

tasks.register('buildCpp') {
    dependsOn ":imgui:imgui-cpp:imgui-cpp:generateNatives"
}

tasks.register('buildImLayout') {
    dependsOn ":imgui:imgui-extensions:imgui-imlayout:imgui-imlayout-build:generateNatives"
}

tasks.register('buildImGuiNatives') {
    group = 'imgui'
    dependsOn buildCore, buildCpp, buildImLayout
}

buildCore.shouldRunAfter buildCpp

buildImLayout.shouldRunAfter buildCore