[NoDelete]
interface Im {
    //Note: overloading don't work with webidl

    ImGuiContext            CreateContext();
    void                    DestroyContext(optional ImGuiContext ctx);
    ImGuiContext            GetCurrentContext();
    void                    SetCurrentContext(ImGuiContext ctx);

    [Ref]ImGuiIO            GetIO();
    [Ref]ImGuiStyle         GetStyle();
    void                    NewFrame();
    void                    EndFrame();
    void                    Render();
    ImDrawData              GetDrawData();

    void                    ShowDemoWindow(optional boolean[] p_open);
    void                    ShowMetricsWindow(optional boolean[] p_open);
    void                    ShowDebugLogWindow(optional boolean[] p_open);
    void                    ShowStackToolWindow(optional boolean[] p_open);
    void                    ShowAboutWindow(optional boolean[] p_open);
    void                    ShowStyleEditor(optional ImGuiStyle ref);
    void                    ShowStyleSelector([Const]DOMString label);
    void                    ShowFontSelector([Const]DOMString label);
    void                    ShowUserGuide();
    [Const]DOMString        GetVersion();

    void                    StyleColorsDark(optional ImGuiStyle dst);
    void                    StyleColorsLight(optional ImGuiStyle dst);
    void                    StyleColorsClassic(optional ImGuiStyle dst);

    boolean                 Begin([Const] DOMString name);
    void                    End();

    boolean                 BeginChild([Const] DOMString str_id, [Const,Ref]optional ImVec2 size, optional boolean border, optional long flags);
    boolean                 BeginChild2(long id, [Const,Ref] optional ImVec2 size, optional boolean border, optional long flags);
    void                    EndChild();

    boolean                 IsWindowAppearing();
    boolean                 IsWindowCollapsed();
    boolean                 IsWindowFocused(optional long flags);
    boolean                 IsWindowHovered(optional long flags);
    ImDrawList              GetWindowDrawList();
    float                   GetWindowDpiScale();
    [Value]ImVec2           GetWindowPos();
    [Value]ImVec2           GetWindowSize();
    float                   GetWindowWidth();
    float                   GetWindowHeight();
    ImGuiViewport           GetWindowViewport();

    void                    SetNextWindowPos([Const, Ref]ImVec2 pos, optional long cond, [Const, Ref]optional ImVec2 pivot);
    void                    SetNextWindowSize([Const, Ref]ImVec2 size, optional long cond);
    void                    SetNextWindowSizeConstraints([Const, Ref]ImVec2 size_min, [Const, Ref]ImVec2 size_max); //, optional CustomImGuiSizeCallback custom_callback, any custom_callback_data);
    void                    SetNextWindowContentSize([Const, Ref]ImVec2 size);
    void                    SetNextWindowCollapsed(boolean collapsed, optional long cond);
    void                    SetNextWindowFocus();
    void                    SetNextWindowScroll([Const, Ref]ImVec2 scroll);
    void                    SetNextWindowBgAlpha(float alpha);
    void                    SetNextWindowViewport(long viewport_id);
    void                    SetWindowPos([Const, Ref]ImVec2 pos, optional long cond);
    void                    SetWindowSize([Const, Ref]ImVec2 size, optional long cond);
    void                    SetWindowCollapsed(boolean collapsed, optional long cond);
    void                    SetWindowFocus();
    void                    SetWindowFontScale(float scale);
    void                    SetWindowPos2([Const] DOMString name, [Const, Ref]ImVec2 pos, optional long cond);
    void                    SetWindowSize2([Const] DOMString name, [Const, Ref]ImVec2 size, optional long cond);
    void                    SetWindowCollapsed2([Const] DOMString name, boolean collapsed, optional long cond);
    void                    SetWindowFocus2([Const] DOMString name);

    [Value]ImVec2           GetContentRegionAvail();
    [Value]ImVec2           GetContentRegionMax();
    [Value]ImVec2           GetWindowContentRegionMin();
    [Value]ImVec2           GetWindowContentRegionMax();

    float                   GetScrollX();
    float                   GetScrollY();
    void                    SetScrollX(float scroll_x);
    void                    SetScrollY(float scroll_y);
    float                   GetScrollMaxX();
    float                   GetScrollMaxY();
    void                    SetScrollHereX(optional float center_x_ratio);
    void                    SetScrollHereY(optional float center_y_ratio);
    void                    SetScrollFromPosX(float local_x, optional float center_x_ratio);
    void                    SetScrollFromPosY(float local_y, optional float center_y_ratio);

    void                    PushFont(ImFont font);
    void                    PopFont();
    void                    PushStyleColor(long idx, unsigned long col);
    void                    PushStyleColor2(long idx, [Const, Ref] ImVec4 col);
    void                    PopStyleColor(optional long count);
    void                    PushStyleVar(long idx, float val);
    void                    PushStyleVar2(long idx, [Const, Ref]ImVec2 val);
    void                    PopStyleVar(optional long count);
    void                    PushAllowKeyboardFocus(boolean allow_keyboard_focus);
    void                    PopAllowKeyboardFocus();
    void                    PushButtonRepeat(boolean repeat);
    void                    PopButtonRepeat();

    void                    PushItemWidth(float item_width);
    void                    PopItemWidth();
    void                    SetNextItemWidth(float item_width);
    float                   CalcItemWidth();
    void                    PushTextWrapPos(optional float wrap_local_pos_x);
    void                    PopTextWrapPos();

    ImFont                  GetFont();
    float                   GetFontSize();
    [Value]ImVec2           GetFontTexUvWhitePixel();
    unsigned long           GetColorU32(long idx, optional float alpha_mul);
    unsigned long           GetColorU322([Const, Ref]ImVec4 col);
    unsigned long           GetColorU323(unsigned long col);
    [Const, Ref] ImVec4     GetStyleColorVec4(long idx);

    void                    Separator();
    void                    SameLine(optional float offset_from_start_x, optional float spacing);
    void                    NewLine();
    void                    Spacing();
    void                    Dummy([Const, Ref]ImVec2 size);
    void                    Indent(optional float indent_w);
    void                    Unindent(optional float indent_w);
    void                    BeginGroup();
    void                    EndGroup();
    [Value]ImVec2           GetCursorPos();
    float                   GetCursorPosX();
    float                   GetCursorPosY();
    void                    SetCursorPos([Const, Ref] ImVec2 local_pos);
    void                    SetCursorPosX(float local_x);
    void                    SetCursorPosY(float local_y);
    [Value]ImVec2           GetCursorStartPos();
    [Value]ImVec2           GetCursorScreenPos();
    void                    SetCursorScreenPos([Const, Ref] ImVec2 pos);
    void                    AlignTextToFramePadding();
    float                   GetTextLineHeight();
    float                   GetTextLineHeightWithSpacing();
    float                   GetFrameHeight();
    float                   GetFrameHeightWithSpacing();

    void                    PushID([Const] DOMString str_id);
    void                    PushID2([Const] DOMString str_id_begin, [Const] DOMString str_id_end);
    void                    PushID3([Const] any ptr_id);
    void                    PushID4(long int_id);
    void                    PopID();
    long                    GetID([Const] DOMString str_id);
    long                    GetID2([Const] DOMString str_id_begin, [Const] DOMString str_id_end);
    long                    GetID3([Const] any ptr_id);

    void                    TextUnformatted([Const] DOMString text, [Const]optional DOMString text_end);
    void                    Text([Const] DOMString fmt);
    void                    TextV([Const] DOMString fmt, DOMString args);
    void                    TextColored([Const, Ref] ImVec4 col, [Const] DOMString fmt);
    void                    TextColoredV([Const, Ref] ImVec4 col, [Const] DOMString fmt, DOMString args);
    void                    TextDisabled([Const] DOMString fmt);
    void                    TextDisabledV([Const] DOMString fmt, DOMString args);
    void                    TextWrapped([Const] DOMString fmt);
    void                    TextWrappedV([Const] DOMString fmt, DOMString args);
    void                    LabelText([Const] DOMString label, [Const] DOMString fmt);
    void                    LabelTextV([Const] DOMString label, [Const] DOMString fmt, DOMString args);
    void                    BulletText([Const] DOMString fmt);
    void                    BulletTextV([Const] DOMString fmt, DOMString args);

    boolean                 Button([Const] DOMString label, [Const, Ref]optional ImVec2 size);
    boolean                 SmallButton([Const] DOMString label);
    boolean                 InvisibleButton([Const] DOMString str_id, [Const, Ref] ImVec2 size, optional long flags);
    boolean                 ArrowButton([Const] DOMString str_id, long dir);
    boolean                 Checkbox([Const] DOMString label, boolean[] v);
    boolean                 CheckboxFlags([Const] DOMString label, long[] flags, long flags_value);
    boolean                 CheckboxFlags2([Const] DOMString label, unsigned long[] flags, unsigned long flags_value);
    boolean                 RadioButton([Const] DOMString label, boolean active);
    boolean                 RadioButton2([Const] DOMString label, long[] v, long v_button);
    void                    ProgressBar(float fraction, [Const, Ref]optional ImVec2 size_arg, [Const]optional DOMString overlay);
    void                    Bullet();

    void                    Image(any user_texture_id, [Const, Ref] ImVec2 size, [Const, Ref]optional ImVec2 uv0, [Const, Ref]optional ImVec2 uv1, [Const, Ref]optional ImVec4 tint_col, [Const, Ref] ImVec4 border_col);
    boolean                 ImageButton([Const] DOMString str_id, any user_texture_id, [Const, Ref] ImVec2 size, [Const, Ref]optional ImVec2 uv0, [Const, Ref]optional ImVec2 uv1, [Const, Ref]optional ImVec4 bg_col, [Const, Ref]optional ImVec4 tint_col);

    boolean                 BeginCombo([Const] DOMString label, [Const] DOMString preview_value, optional long flags);
    void                    EndCombo();
//    boolean                 Combo([Const] DOMString label, long[] current_item, [Const] DOMString [Const]items[], long items_count, optional long popup_max_height_in_items);  // items with multiple [Const]???
    boolean                 Combo([Const] DOMString label, long[] current_item, [Const] DOMString items_separated_by_zeros, optional long popup_max_height_in_items);
//    boolean                 Combo([Const] DOMString label, long[] current_item, boolean(*items_getter)(any data, long idx, [Const] DOMString* out_text), any data, long items_count, optional long popup_max_height_in_items); // crazy boolean with param

    boolean                 DragFloat([Const] DOMString label, float[] v, optional float v_speed, optional float v_min, optional float v_max, [Const]optional DOMString format, optional long flags);
    boolean                 DragFloat2([Const] DOMString label, float[] v, optional float v_speed, optional float v_min, optional float v_max, [Const]optional DOMString format, optional long flags);
    boolean                 DragFloat3([Const] DOMString label, float[] v, optional float v_speed, optional float v_min, optional float v_max, [Const]optional DOMString format, optional long flags);
    boolean                 DragFloat4([Const] DOMString label, float[] v, optional float v_speed, optional float v_min, optional float v_max, [Const]optional DOMString format, optional long flags);
    boolean                 DragFloatRange2([Const] DOMString label, float[] v_current_min, float[] v_current_max, optional float v_speed, optional float v_min, optional float v_max, [Const]optional DOMString format, [Const]optional DOMString format_max, optional long flags);
    boolean                 DragInt([Const] DOMString label, long[] v, optional float v_speed, optional long v_min, optional long v_max, [Const]optional DOMString format, optional long flags);
    boolean                 DragInt2([Const] DOMString label, long[] v, optional float v_speed, optional long v_min, optional long v_max, [Const]optional DOMString format, optional long flags);
    boolean                 DragInt3([Const] DOMString label, long[] v, optional float v_speed, optional long v_min, optional long v_max, [Const]optional DOMString format, optional long flags);
    boolean                 DragInt4([Const] DOMString label, long[] v, optional float v_speed, optional long v_min, optional long v_max, [Const]optional DOMString format, optional long flags);
    boolean                 DragIntRange2([Const] DOMString label, long[] v_current_min, long[] v_current_max, optional float v_speed, optional long v_min, optional long v_max, [Const]optional DOMString format, [Const]optional DOMString format_max, optional long flags);
    boolean                 DragScalar([Const] DOMString label, long data_type, any p_data, optional float v_speed, [Const]optional any p_min, [Const]optional any p_max, [Const]optional DOMString format, optional long flags);
    boolean                 DragScalarN([Const] DOMString label, long data_type, any p_data, long components, optional float v_speed, [Const]optional any p_min, [Const]optional any p_max, [Const]optional DOMString format, optional long flags);

    boolean                 SliderFloat([Const] DOMString label, float[] v, float v_min, float v_max, [Const]optional DOMString format, optional long flags);
    boolean                 SliderFloat2([Const] DOMString label, float[] v, float v_min, float v_max, [Const]optional DOMString format, optional long flags);
    boolean                 SliderFloat3([Const] DOMString label, float[] v, float v_min, float v_max, [Const]optional DOMString format, optional long flags);
    boolean                 SliderFloat4([Const] DOMString label, float[] v, float v_min, float v_max, [Const]optional DOMString format, optional long flags);
    boolean                 SliderAngle([Const] DOMString label, float[] v_rad, optional float v_degrees_min, optional float v_degrees_max, [Const]optional DOMString format, optional long flags);
    boolean                 SliderInt([Const] DOMString label, long[] v, long v_min, long v_max, [Const]optional DOMString format, optional long flags);
    boolean                 SliderInt2([Const] DOMString label, long[] v, long v_min, long v_max, [Const]optional DOMString format, optional long flags);
    boolean                 SliderInt3([Const] DOMString label, long[] v, long v_min, long v_max, [Const]optional DOMString format, optional long flags);
    boolean                 SliderInt4([Const] DOMString label, long[] v, long v_min, long v_max, [Const]optional DOMString format, optional long flags);
    boolean                 SliderScalar([Const] DOMString label, long data_type, any p_data, [Const] any p_min, [Const] any p_max, [Const]optional DOMString format, optional long flags);
    boolean                 SliderScalarN([Const] DOMString label, long data_type, any p_data, long components, [Const] any p_min, [Const] any p_max, [Const]optional DOMString format, optional long flags);
    boolean                 VSliderFloat([Const] DOMString label, [Const, Ref] ImVec2 size, float[] v, float v_min, float v_max, [Const]optional DOMString format, optional long flags);
    boolean                 VSliderInt([Const] DOMString label, [Const, Ref] ImVec2 size, long[] v, long v_min, long v_max, [Const]optional DOMString format, optional long flags);
    boolean                 VSliderScalar([Const] DOMString label, [Const, Ref] ImVec2 size, long data_type, any p_data, [Const] any p_min, [Const] any p_max, [Const]optional DOMString format, optional long flags);

    boolean                 InputText([Const] DOMString label, byte[] buf, long long buf_size, optional long flags); //, optional ImGuiInputTextCallback callback, optional any user_data);
    boolean                 InputTextMultiline([Const] DOMString label, byte[] buf, long long buf_size, [Const, Ref]optional ImVec2 size, optional long flags); //, optional ImGuiInputTextCallback callback, optional any user_data);
    boolean                 InputTextWithHint([Const] DOMString label, [Const] DOMString hint, byte[] buf, long long buf_size, optional long flags); //, optional ImGuiInputTextCallback callback, optional any user_data);
    boolean                 InputFloat([Const] DOMString label, float[] v, optional float step, optional float step_fast, [Const]optional DOMString format, optional long flags);
    boolean                 InputFloat2([Const] DOMString label, float[] v, [Const]optional DOMString format, optional long flags);
    boolean                 InputFloat3([Const] DOMString label, float[] v, [Const]optional DOMString format, optional long flags);
    boolean                 InputFloat4([Const] DOMString label, float[] v, [Const]optional DOMString format, optional long flags);
    boolean                 InputInt([Const] DOMString label, long[] v, optional long step, optional long step_fast, optional long flags);
    boolean                 InputInt2([Const] DOMString label, long[] v, optional long flags);
    boolean                 InputInt3([Const] DOMString label, long[] v, optional long flags);
    boolean                 InputInt4([Const] DOMString label, long[] v, optional long flags);
    boolean                 InputDouble([Const] DOMString label, double[] v, optional double step, optional double step_fast, [Const]optional DOMString format, optional long flags);
    boolean                 InputScalar([Const] DOMString label, long data_type, any p_data, [Const]optional any p_step, [Const]optional any p_step_fast, [Const]optional DOMString format, optional long flags);
    boolean                 InputScalarN([Const] DOMString label, long data_type, any p_data, long components, [Const]optional any p_step, [Const]optional any p_step_fast, [Const]optional DOMString format, optional long flags);

    boolean                 ColorEdit3([Const] DOMString label, float[] col, optional long flags);
    boolean                 ColorEdit4([Const] DOMString label, float[] col, optional long flags);
    boolean                 ColorPicker3([Const] DOMString label, float[] col, optional long flags);
    boolean                 ColorPicker4([Const] DOMString label, float[] col, optional long flags, [Const]optional float[] ref_col);
    boolean                 ColorButton([Const] DOMString desc_id, [Const, Ref] ImVec4 col, optional long flags, [Const, Ref]optional ImVec2 size);
    void                    SetColorEditOptions(long flags);

    boolean                 TreeNode([Const] DOMString label);
    boolean                 TreeNode2([Const] DOMString str_id, [Const] DOMString fmt);
    boolean                 TreeNode3([Const] any ptr_id, [Const] DOMString fmt);
    boolean                 TreeNodeV([Const] DOMString str_id, [Const] DOMString fmt, DOMString args);
    boolean                 TreeNodeV2([Const] any ptr_id, [Const] DOMString fmt, DOMString args);
    boolean                 TreeNodeEx([Const] DOMString label, optional long flags);
    boolean                 TreeNodeEx2([Const] DOMString str_id, long flags, [Const] DOMString fmt);
    boolean                 TreeNodeEx3([Const] any ptr_id, long flags, [Const] DOMString fmt);
    boolean                 TreeNodeExV([Const] DOMString str_id, long flags, [Const] DOMString fmt, DOMString args);
    boolean                 TreeNodeExV2([Const] any ptr_id, long flags, [Const] DOMString fmt, DOMString args);
    void                    TreePush([Const] DOMString str_id);
    void                    TreePush2([Const] any ptr_id);
    void                    TreePop();
    float                   GetTreeNodeToLabelSpacing();
    boolean                 CollapsingHeader([Const] DOMString label, optional long flags);
    boolean                 CollapsingHeader2([Const] DOMString label, boolean[] p_visible, optional long flags);
    void                    SetNextItemOpen(boolean is_open, optional long cond);


    boolean                 Selectable([Const]DOMString label, optional boolean selected, optional long flags, [Const, Ref]optional ImVec2 size);
    boolean                 Selectable2([Const]DOMString label, boolean[] p_selected, optional long flags, [Const, Ref]optional ImVec2 size);

    boolean                 BeginListBox([Const]DOMString label, [Const, Ref]optional ImVec2 size);
    void                    EndListBox();
    boolean                 ListBox([Const]DOMString label, long[] current_item, [Const]DOMString[] items, long items_count, optional long height_in_items);
//    boolean                 ListBox([Const]DOMString label, long[] current_item, boolean (*items_getter)(any data, long idx, [Const]DOMString[] out_text), any data, long items_count, optional long height_in_items);

    void                    PlotLines([Const]DOMString label, [Const]float[] values, long values_count, optional long values_offset, [Const]optional DOMString overlay_text, optional float scale_min, optional float scale_max); //, [Value] optional ImVec2 graph_size, optional long stride); //ERROR graph size
//    void                    PlotLines([Const]DOMString label, float(*values_getter)(any data, long idx), any data, long values_count, optional long values_offset, [Const]optional DOMString overlay_text, optional float scale_min, optional float scale_max, [Value]optionalImVec2 graph_size);
    void                    PlotHistogram([Const]DOMString label, [Const]float[] values, long values_count, optional long values_offset, [Const]optional DOMString overlay_text, optional float scale_min, optional float scale_max);//, [Value]optional ImVec2 graph_size, optional long stride); //ERROR graph size
//    void                    PlotHistogram([Const]DOMString label, float(*values_getter)(any data, long idx), any data, long values_count, optional long values_offset, [Const]optional DOMString overlay_text, optional float scale_min, optional float scale_max, [Value]optional ImVec2 graph_size);

    void                    Value([Const]DOMString prefix, boolean b);
    void                    Value2([Const]DOMString prefix, long v);
    void                    Value3([Const]DOMString prefix, unsigned long v);
    void                    Value4([Const]DOMString prefix, float v, [Const]optional DOMString float_format);

    boolean                 BeginMenuBar();
    void                    EndMenuBar();
    boolean                 BeginMainMenuBar();
    void                    EndMainMenuBar();
    boolean                 BeginMenu([Const]DOMString label, optional boolean enabled);
    void                    EndMenu();
    boolean                 MenuItem([Const]DOMString label, [Const]optional DOMString shortcut, optional boolean selected, optional boolean enabled);
    boolean                 MenuItem2([Const]DOMString label, [Const]DOMString shortcut, boolean[] p_selected, optional boolean enabled);

    void                    BeginTooltip();
    void                    EndTooltip();
    void                    SetTooltip([Const]DOMString fmt);
    void                    SetTooltipV([Const]DOMString fmt, DOMString args);

    boolean                 BeginPopup([Const]DOMString str_id, optional long flags);
    boolean                 BeginPopupModal([Const]DOMString name, optional boolean[] p_open, optional long flags);
    void                    EndPopup();

    void                    OpenPopup([Const]DOMString str_id, optional long popup_flags);
    void                    OpenPopup2(long id, optional long popup_flags);
    void                    OpenPopupOnItemClick([Const]optional DOMString str_id, optional long popup_flags);
    void                    CloseCurrentPopup();

    boolean                 BeginPopupContextItem([Const]optional DOMString str_id, optional long popup_flags);
    boolean                 BeginPopupContextWindow([Const]optional DOMString str_id, optional long popup_flags);
    boolean                 BeginPopupContextVoid([Const]optional DOMString str_id, optional long popup_flags);

    boolean                 IsPopupOpen([Const]DOMString str_id, optional long flags);

    boolean                 BeginTable([Const]DOMString str_id, long column, optional long flags, [Const, Ref]optional ImVec2 outer_size, optional float inner_width);
    void                    EndTable();
    void                    TableNextRow(optional long row_flags, optional float min_row_height);
    boolean                 TableNextColumn();
    boolean                 TableSetColumnIndex(long column_n);

    void                    TableSetupColumn([Const]DOMString label, optional long flags, optional float init_width_or_weight, optional long user_id);
    void                    TableSetupScrollFreeze(long cols, long rows);
    void                    TableHeadersRow();
    void                    TableHeader([Const]DOMString label);

    ImGuiTableSortSpecs     TableGetSortSpecs();
    long                    TableGetColumnCount();
    long                    TableGetColumnIndex();
    long                    TableGetRowIndex();
    [Const]DOMString        TableGetColumnName(optional long column_n);
    long                    TableGetColumnFlags(optional long column_n);
    void                    TableSetColumnEnabled(long column_n, boolean v);
    void                    TableSetBgColor(long target, unsigned long color, optional long column_n);

    void                    Columns(optional long count, [Const]optional DOMString id, optional boolean border);
    void                    NextColumn();
    long                    GetColumnIndex();
    float                   GetColumnWidth(optional long column_index);
    void                    SetColumnWidth(long column_index, float width);
    float                   GetColumnOffset(optional long column_index);
    void                    SetColumnOffset(long column_index, float offset_x);
    long                    GetColumnsCount();

    boolean                 BeginTabBar([Const]DOMString str_id, optional long flags);
    void                    EndTabBar();
    boolean                 BeginTabItem([Const]DOMString label, optional boolean[] p_open, optional long flags);
    void                    EndTabItem();
    boolean                 TabItemButton([Const]DOMString label, optional long flags);
    void                    SetTabItemClosed([Const]DOMString tab_or_docked_window_label);

    long                    DockSpace(long id, [Const, Ref]optional ImVec2 size, optional long flags, [Const]optional ImGuiWindowClass window_class);
    long                    DockSpaceOverViewport([Const]optional ImGuiViewport viewport, optional long flags, [Const]optional ImGuiWindowClass window_class);
    void                    SetNextWindowDockID(long dock_id, optional long cond);
    void                    SetNextWindowClass([Const]ImGuiWindowClass window_class);
    long                    GetWindowDockID();
    boolean                 IsWindowDocked();

    void                    LogToTTY(optional long auto_open_depth);
    void                    LogToFile(optional long auto_open_depth, [Const]optional DOMString filename);
    void                    LogToClipboard(optional long auto_open_depth);
    void                    LogFinish();
    void                    LogButtons();
    void                    LogText([Const]DOMString fmt);
    void                    LogTextV([Const]DOMString fmt, DOMString args);

    boolean                 BeginDragDropSource(optional long flags);
    boolean                 SetDragDropPayload([Const]DOMString type, [Const]any data, long long sz, optional long cond);
    void                    EndDragDropSource();
    boolean                 BeginDragDropTarget();
    [Const]ImGuiPayload     AcceptDragDropPayload([Const]DOMString type, optional long flags);
    void                    EndDragDropTarget();
    [Const]ImGuiPayload     GetDragDropPayload();

    void                    BeginDisabled(optional boolean disabled);
    void                    EndDisabled();

    void                    PushClipRect([Const, Ref]ImVec2 clip_rect_min, [Const, Ref]ImVec2 clip_rect_max, boolean intersect_with_current_clip_rect);
    void                    PopClipRect();

    void                    SetItemDefaultFocus();
    void                    SetKeyboardFocusHere(optional long offset);

    boolean                 IsItemHovered(optional long flags);
    boolean                 IsItemActive();
    boolean                 IsItemFocused();
    boolean                 IsItemClicked(optional long mouse_button);
    boolean                 IsItemVisible();
    boolean                 IsItemEdited();
    boolean                 IsItemActivated();
    boolean                 IsItemDeactivated();
    boolean                 IsItemDeactivatedAfterEdit();
    boolean                 IsItemToggledOpen();
    boolean                 IsAnyItemHovered();
    boolean                 IsAnyItemActive();
    boolean                 IsAnyItemFocused();
    long                    GetItemID();
    [Value]ImVec2           GetItemRectMin();
    [Value]ImVec2           GetItemRectMax();
    [Value]ImVec2           GetItemRectSize();
    void                    SetItemAllowOverlap();

    ImGuiViewport           GetMainViewport();

    ImDrawList              GetBackgroundDrawList();
    ImDrawList              GetForegroundDrawList();
    ImDrawList              GetBackgroundDrawList2(ImGuiViewport viewport);
    ImDrawList              GetForegroundDrawList2(ImGuiViewport viewport);

    boolean                 IsRectVisible([Const, Ref]ImVec2 size);
    boolean                 IsRectVisible2([Const, Ref]ImVec2 rect_min, [Const, Ref]ImVec2 rect_max);
    double                  GetTime();
    long                    GetFrameCount();
    ImDrawListSharedData    GetDrawListSharedData();
    [Const]DOMString        GetStyleColorName(long idx);
    void                    SetStateStorage(ImGuiStorage storage);
    ImGuiStorage            GetStateStorage();
    boolean                 BeginChildFrame(long id, [Const, Ref]ImVec2 size, optional long flags);
    void                    EndChildFrame();

    [Value]ImVec2           CalcTextSize([Const]DOMString text, [Const]optional DOMString text_end, optional boolean hide_text_after_double_hash, optional float wrap_width);

    [Value]ImVec4           ColorConvertU32ToFloat4(unsigned long col);
    unsigned long           ColorConvertFloat4ToU32([Const, Ref]ImVec4 col);
    void                    ColorConvertRGBtoHSV(float r, float g, float b, float[] out_h, float[] out_s, float[] out_v); // fix by changing to pointer
    void                    ColorConvertHSVtoRGB(float h, float s, float v, float[] out_r, float[] out_g, float[] out_b); // fix by changing to pointer

    boolean                 IsKeyDown(ImGuiKey key);
    boolean                 IsKeyPressed(ImGuiKey key, optional boolean repeat);
    boolean                 IsKeyReleased(ImGuiKey key);
    long                    GetKeyPressedAmount(ImGuiKey key, float repeat_delay, float rate);
    [Const]DOMString        GetKeyName(ImGuiKey key);
    void                    SetNextFrameWantCaptureKeyboard(boolean want_capture_keyboard);

    boolean                 IsMouseDown(long button);
    boolean                 IsMouseClicked(long button, optional boolean repeat);
    boolean                 IsMouseReleased(long button);
    boolean                 IsMouseDoubleClicked(long button);
    long                    GetMouseClickedCount(long button);
    boolean                 IsMouseHoveringRect([Const, Ref]ImVec2 r_min, [Const, Ref]ImVec2 r_max, optional boolean clip);
    boolean                 IsMousePosValid([Const]optional ImVec2 mouse_pos);
    boolean                 IsAnyMouseDown();
    [Value]ImVec2           GetMousePos();
    [Value]ImVec2           GetMousePosOnOpeningCurrentPopup();
    boolean                 IsMouseDragging(long button, optional float lock_threshold);
    [Value]ImVec2           GetMouseDragDelta(optional long button, optional float lock_threshold);
    void                    ResetMouseDragDelta(optional long button);
    long                    GetMouseCursor();
    void                    SetMouseCursor(long cursor_type);
    void                    SetNextFrameWantCaptureMouse(boolean want_capture_mouse);

    [Const]DOMString        GetClipboardText();
    void                    SetClipboardText([Const]DOMString text);

    void                    LoadIniSettingsFromDisk([Const]DOMString ini_filename);
    void                    LoadIniSettingsFromMemory([Const]DOMString ini_data, optional long long ini_size);
    void                    SaveIniSettingsToDisk([Const]DOMString ini_filename);
//    [Const]DOMString           SaveIniSettingsToMemory(optional long long[] out_ini_size); // ERROR
    [Const]DOMString           SaveIniSettingsToMemory();

    void                    DebugTextEncoding([Const]DOMString text);
    boolean                 DebugCheckVersionAndDataLayout([Const]DOMString version_str, long long sz_io, long long sz_style, long long sz_vec2, long long sz_vec4, long long sz_drawvert, long long sz_drawidx); // This is called by IMGUI_CHECKVERSION() macro.

//    void                    SetAllocatorFunctions(ImGuiMemAllocFunc alloc_func, ImGuiMemFreeFunc free_func, optional any user_data);
//    void                    GetAllocatorFunctions(ImGuiMemAllocFunc* p_alloc_func, ImGuiMemFreeFunc* p_free_func, any* p_user_data);
    any                     MemAlloc(long long size);
    void                    MemFree(any ptr);

    [Ref]ImGuiPlatformIO    GetPlatformIO();
    void                    UpdatePlatformWindows();
    void                    RenderPlatformWindowsDefault(optional any platform_render_arg, optional any renderer_render_arg);
    void                    DestroyPlatformWindows();
    ImGuiViewport           FindViewportByID(long id);
    ImGuiViewport           FindViewportByPlatformHandle(any platform_handle);
};

//interface ImGuiSizeCallback {
//
//};
//
//[JSImplementation="ImGuiSizeCallback"]
//interface CustomImGuiSizeCallback {
//    void CustomImGuiSizeCallback();
//};

interface BoolArray {
    attribute long size;

    void BoolArray(long size);
    void resize(long size);
    boolean getValue(long index);
    void setValue(long index, boolean value);
    any getPointer();
};

interface IntArray {
    attribute long size;

    void IntArray(long size);
    void resize(long size);
    long getValue(long index);
    void setValue(long index, long value);
    any getPointer();
};

interface FloatArray {
    attribute long size;

    void FloatArray(long size);
    void resize(long size);
    long getValue(long index);
    void setValue(long index, long value);
    any getPointer();
};

interface DoubleArray {
    attribute long size;

    void DoubleArray(long size);
    void resize(long size);
    double getValue(long index);
    void setValue(long index, double value);
    any getPointer();
};

interface CharArray {
    attribute long size;

    void CharArray(long size);
    void resize(long size);
    byte getValue(long index);
    void setValue(long index, byte value);
    any getPointer();
};

interface ImHelper {
    void memcpyIdx(any destination, ImDrawList drawList, long num);
    void memcpyVtx(any destination, ImDrawList drawList, long num);
    void memcpyFont(ImGuiIO io, any pixelBuffer, long[] widthData, long[] heightData, long[] bytesPerPixel);
    long getTextureId(ImDrawCmd imDrawCmd);
    void setIniFilename(ImGuiIO io, byte[] fileName);
    void removeIniFilename(ImGuiIO io);
};

interface ImVec2 {
    attribute float x;
    attribute float y;

    void ImVec2();
    void ImVec2(float x, float y);
};

interface ImVec4 {
    attribute float x;
    attribute float y;
    attribute float z;
    attribute float w;

    void ImVec4();
    void ImVec4(float x, float y, float z, float w);
};

interface VecCmdBuffer {
    [Operator="[]", Ref] ImDrawCmd getData(long index);
    long size();
};

interface VecIdxBuffer {
    long size();
};

interface VecVtxBuffer {
    long size();
};

interface ImDrawCmd {
    [Value]attribute ImVec4 ClipRect;
    attribute long VtxOffset;
    attribute long IdxOffset;
    attribute long ElemCount;
    attribute any TextureId;
};

interface ImDrawVert {
    [Value]attribute ImVec2 pos;
    [Value]attribute ImVec2 uv;
    attribute long col;
};

interface ImDrawData {
    attribute long CmdListsCount;
    attribute long TotalIdxCount;
    attribute long TotalVtxCount;
    attribute ImDrawList[] CmdLists;
    [Value]attribute ImVec2 DisplayPos;
    [Value]attribute ImVec2 DisplaySize;
    [Value]attribute ImVec2 FramebufferScale;
};

interface ImDrawList {
    [Value]attribute VecCmdBuffer CmdBuffer;
    [Value]attribute VecIdxBuffer IdxBuffer;
    [Value]attribute VecVtxBuffer VtxBuffer;
};

interface ImGuiIO {
    attribute boolean WantCaptureMouse;
    [Value]attribute ImVec2 DisplaySize;
    [Value]attribute ImVec2 DisplayFramebufferScale;
    attribute float DeltaTime;
    attribute ImFontAtlas Fonts;
    attribute float FontGlobalScale;
    attribute boolean ConfigDockingNoSplit;
    attribute boolean ConfigDockingWithShift;
    attribute boolean ConfigDockingAlwaysTabBar;
    attribute boolean ConfigDockingTransparentPayload;
    attribute long ConfigFlags;

    void AddMouseWheelEvent(float wheel_x, float wheel_y);
    void AddMouseButtonEvent(long button, boolean down);
    void AddMousePosEvent(float x, float y);
    void AddKeyEvent(ImGuiKey key, boolean down);
    void AddInputCharacter(unsigned long c);
};

enum ImGuiKey {
    "ImGuiKey_None"
};

interface ImFontAtlas {
    attribute any TexID;
};

interface ImFont {
};

interface ImGuiStyle {
};

interface ImGuiViewport {
};

interface ImGuiTableSortSpecs {
};

interface ImGuiWindowClass {
};

interface ImGuiPayload {
};

interface ImDrawListSharedData {
};

interface ImGuiStorage {
};

interface ImGuiPlatformIO {
};

[NoDelete]
interface ImGuiContext {
};