plugins {
    id 'java'
    id 'de.undercouch.download' version '4.0.2'
}

dependencies {
    implementation "com.badlogicgames.gdx:gdx-jnigen:$project.jniGenVersion"
    implementation "com.github.xpenatan.jParser:jParser-cpp:$project.jParserVersion"

    // Use JUnit test framework
    testImplementation "junit:junit:$project.jUnitVersion"
}

project.ext.mainClassName = "com.github.xpenatan.imgui.generate.BuildCPP"

clean.doFirst {
    def jniPath = projectDir.toString() + "/jni/"
    if(new File(jniPath).exists()) {
        project.delete(files(jniPath))
    }
}

task downloadZipFile(type: Download) {
//	src 'https://api.github.com/repos/ocornut/imgui/zipball/v1.74'
//	src 'https://github.com/ocornut/imgui/archive/master.zip'
    src 'https://github.com/ocornut/imgui/archive/docking.zip'
    dest new File(buildDir, '1.0.zip')
}

task downloadAndUnzipFile(dependsOn: downloadZipFile, type: Copy) {
    from zipTree(downloadZipFile.dest)

    eachFile { fcd ->
        include "ocornut-imgui*/"
        def paths = fcd.relativePath.segments.drop(1)
        fcd.relativePath = new RelativePath(true, paths)  // (2)
        def fullString = paths.toString()
        if (paths.length > 1 || !(fullString.contains(".h") || fullString.contains(".cpp")))
            fcd.exclude()
    }

    includeEmptyDirs = false

    into {
        projectDir.toString() + "/jni/src/"
    }
}

task generateNatives(dependsOn: [downloadAndUnzipFile, classes], type: JavaExec) {
    setDescription("Build jDear ImGui-cpp")
    mainClass.set(project.mainClassName)
    setClasspath(sourceSets.main.runtimeClasspath)
}

task fromClasses(type: Jar) {
    from(sourceSets.main.output) {
        exclude "com/github/xpenatan/imgui/generate/**"
    }
}
