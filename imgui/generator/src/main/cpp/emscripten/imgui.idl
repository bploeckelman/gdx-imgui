
[NoDelete, Prefix="ImGuiWrapper::"]
interface ImGui {
    //Note: method overloading don't work with webidl

    static ImGuiContext            CreateContext();
    static void                    DestroyContext(optional ImGuiContext ctx);
    static ImGuiContext            GetCurrentContext();
    static void                    SetCurrentContext(ImGuiContext ctx);

    [Ref] static ImGuiIO           GetIO();
    [Ref] static ImGuiStyle        GetStyle();
    static void                    NewFrame();
    static void                    EndFrame();
    static void                    Render();
    static ImDrawData              GetDrawData();

    static void                    ShowDemoWindow(optional boolean[] p_open);
    static void                    ShowMetricsWindow(optional boolean[] p_open);
    static void                    ShowDebugLogWindow(optional boolean[] p_open);
    static void                    ShowStackToolWindow(optional boolean[] p_open);
    static void                    ShowAboutWindow(optional boolean[] p_open);
    static void                    ShowStyleEditor(optional ImGuiStyle ref);
    static void                    ShowStyleSelector([Const]DOMString label);
    static void                    ShowFontSelector([Const]DOMString label);
    static void                    ShowUserGuide();
////    [Const]DOMString        GetVersion();

    static void                    StyleColorsDark(optional ImGuiStyle dst);
    static void                    StyleColorsLight(optional ImGuiStyle dst);
    static void                    StyleColorsClassic(optional ImGuiStyle dst);

    static boolean                 Begin([Const] DOMString name, optional boolean[] p_open, optional ImGuiWindowFlags flags);
    static void                    End();

    static boolean                 BeginChild([Const] DOMString str_id, [Const,Ref]optional ImVec2 size, optional boolean border, optional ImGuiWindowFlags flags);
    static boolean                 BeginChild_2(long id, [Const,Ref] optional ImVec2 size, optional boolean border, optional ImGuiWindowFlags flags);
    static void                    EndChild();

    static boolean                 IsWindowAppearing();
    static boolean                 IsWindowCollapsed();
    static boolean                 IsWindowFocused(optional ImGuiFocusedFlags flags);
    static boolean                 IsWindowHovered(optional ImGuiFocusedFlags flags);
    static ImDrawList              GetWindowDrawList();
    static float                   GetWindowDpiScale();
    [Value] static ImVec2          GetWindowPos();
    [Value] static ImVec2          GetWindowSize();
    static float                   GetWindowWidth();
    static float                   GetWindowHeight();
    static ImGuiViewport           GetWindowViewport();
//
    static void                    SetNextWindowPos([Const, Ref]ImVec2 pos, optional ImGuiCond cond, [Const, Ref]optional ImVec2 pivot);
    static void                    SetNextWindowSize([Const, Ref]ImVec2 size, optional ImGuiCond cond);
    static void                    SetNextWindowSizeConstraints([Const, Ref]ImVec2 size_min, [Const, Ref]ImVec2 size_max); //, optional CustomImGuiSizeCallback custom_callback, any custom_callback_data);
    static void                    SetNextWindowContentSize([Const, Ref]ImVec2 size);
    static void                    SetNextWindowCollapsed(boolean collapsed, optional ImGuiCond cond);
    static void                    SetNextWindowFocus();
    static void                    SetNextWindowScroll([Const, Ref]ImVec2 scroll);
    static void                    SetNextWindowBgAlpha(float alpha);
    static void                    SetNextWindowViewport(long viewport_id);
    static void                    SetWindowPos([Const, Ref]ImVec2 pos, optional ImGuiCond cond);
    static void                    SetWindowSize([Const, Ref]ImVec2 size, optional ImGuiCond cond);
    static void                    SetWindowCollapsed(boolean collapsed, optional ImGuiCond cond);
    static void                    SetWindowFocus();
    static void                    SetWindowFontScale(float scale);
    static void                    SetWindowPos_2([Const] DOMString name, [Const, Ref]ImVec2 pos, optional ImGuiCond cond);
    static void                    SetWindowSize_2([Const] DOMString name, [Const, Ref]ImVec2 size, optional ImGuiCond cond);
    static void                    SetWindowCollapsed_2([Const] DOMString name, boolean collapsed, optional ImGuiCond cond);
    static void                    SetWindowFocus([Const] DOMString name);
//
    [Value] static ImVec2          GetContentRegionAvail();
    [Value] static ImVec2          GetContentRegionMax();
    [Value] static ImVec2          GetWindowContentRegionMin();
    [Value] static ImVec2          GetWindowContentRegionMax();

    static float                   GetScrollX();
    static float                   GetScrollY();
    static void                    SetScrollX(float scroll_x);
    static void                    SetScrollY(float scroll_y);
    static float                   GetScrollMaxX();
    static float                   GetScrollMaxY();
    static void                    SetScrollHereX(optional float center_x_ratio);
    static void                    SetScrollHereY(optional float center_y_ratio);
    static void                    SetScrollFromPosX(float local_x, optional float center_x_ratio);
    static void                    SetScrollFromPosY(float local_y, optional float center_y_ratio);

    static void                    PushFont(ImFont font);
    static void                    PopFont();
    static void                    PushStyleColor(long idx, unsigned long col);
    static void                    PushStyleColor_2(long idx, [Const, Ref] ImVec4 col);
    static void                    PopStyleColor(optional long count);
    static void                    PushStyleVar(long idx, float val);
    static void                    PushStyleVar_2(long idx, [Const, Ref]ImVec2 val);
    static void                    PopStyleVar(optional long count);
    static void                    PushTabStop(boolean tab_stop);
    static void                    PopTabStop();
    static void                    PushButtonRepeat(boolean repeat);
    static void                    PopButtonRepeat();

    static void                    PushItemWidth(float item_width);
    static void                    PopItemWidth();
    static void                    SetNextItemWidth(float item_width);
    static float                   CalcItemWidth();
    static void                    PushTextWrapPos(optional float wrap_local_pos_x);
    static void                    PopTextWrapPos();

    static ImFont                  GetFont();
    static float                   GetFontSize();
    [Value] static ImVec2          GetFontTexUvWhitePixel();
    static unsigned long           GetColorU32(long idx, optional float alpha_mul);
    static unsigned long           GetColorU32_2([Const, Ref]ImVec4 col);
    static unsigned long           GetColorU32_3(unsigned long col);
    [Const, Ref] static ImVec4     GetStyleColorVec4(long idx);

    static void                    Separator();
    static void                    SameLine(optional float offset_from_start_x, optional float spacing);
    static void                    NewLine();
    static void                    Spacing();
    static void                    Dummy([Const, Ref]ImVec2 size);
    static void                    Indent(optional float indent_w);
    static void                    Unindent(optional float indent_w);
    static void                    BeginGroup();
    static void                    EndGroup();
    [Value] static ImVec2          GetCursorPos();
    static float                   GetCursorPosX();
    static float                   GetCursorPosY();
    static void                    SetCursorPos([Const, Ref] ImVec2 local_pos);
    static void                    SetCursorPosX(float local_x);
    static void                    SetCursorPosY(float local_y);
    [Value] static ImVec2          GetCursorStartPos();
    [Value] static ImVec2          GetCursorScreenPos();
    static void                    SetCursorScreenPos([Const, Ref] ImVec2 pos);
    static void                    AlignTextToFramePadding();
    static float                   GetTextLineHeight();
    static float                   GetTextLineHeightWithSpacing();
    static float                   GetFrameHeight();
    static float                   GetFrameHeightWithSpacing();

    static void                    PushID([Const] DOMString str_id);
    static void                    PushID_2([Const] DOMString str_id_begin, [Const] DOMString str_id_end);
    static void                    PushID_3([Const] any ptr_id);
    static void                    PushID_4(long int_id);
    static void                    PopID();
    static long                    GetID([Const] DOMString str_id);
    static long                    GetID_2([Const] DOMString str_id_begin, [Const] DOMString str_id_end);
    static long                    GetID_3([Const] any ptr_id);

    static void                    TextUnformatted([Const] DOMString text, [Const]optional DOMString text_end);
    static void                    Text([Const] DOMString fmt);
    static void                    TextV([Const] DOMString fmt, DOMString args);
    static void                    TextColored([Const, Ref] ImVec4 col, [Const] DOMString fmt);
    static void                    TextColoredV([Const, Ref] ImVec4 col, [Const] DOMString fmt, DOMString args);
    static void                    TextDisabled([Const] DOMString fmt);
    static void                    TextDisabledV([Const] DOMString fmt, DOMString args);
    static void                    TextWrapped([Const] DOMString fmt);
    static void                    TextWrappedV([Const] DOMString fmt, DOMString args);
    static void                    LabelText([Const] DOMString label, [Const] DOMString fmt);
    static void                    LabelTextV([Const] DOMString label, [Const] DOMString fmt, DOMString args);
    static void                    BulletText([Const] DOMString fmt);
    static void                    BulletTextV([Const] DOMString fmt, DOMString args);

    static boolean                 Button([Const] DOMString label, [Const, Ref]optional ImVec2 size);
    static boolean                 SmallButton([Const] DOMString label);
    static boolean                 InvisibleButton([Const] DOMString str_id, [Const, Ref] ImVec2 size, optional ImGuiButtonFlags flags);
    static boolean                 ArrowButton([Const] DOMString str_id, long dir);
    static boolean                 Checkbox([Const] DOMString label, boolean[] v);
    static boolean                 CheckboxFlags([Const] DOMString label, long[] flags, long flags_value);
//    static boolean                 CheckboxFlags_2([Const] DOMString label, unsigned long[] flags, unsigned long flags_value);
    static boolean                 RadioButton([Const] DOMString label, boolean active);
    static boolean                 RadioButton_2([Const] DOMString label, long[] v, long v_button);
    static void                    ProgressBar(float fraction, [Const, Ref]optional ImVec2 size_arg, [Const]optional DOMString overlay);
    static void                    Bullet();

    static void                    Image(long user_texture_id, [Const, Ref] ImVec2 size, [Const, Ref]optional ImVec2 uv0, [Const, Ref]optional ImVec2 uv1, [Const, Ref]optional ImVec4 tint_col, [Const, Ref] ImVec4 border_col);
    static boolean                 ImageButton([Const] DOMString str_id, any user_texture_id, [Const, Ref] ImVec2 size, [Const, Ref]optional ImVec2 uv0, [Const, Ref]optional ImVec2 uv1, [Const, Ref]optional ImVec4 bg_col, [Const, Ref]optional ImVec4 tint_col);

    static boolean                 BeginCombo([Const] DOMString label, [Const] DOMString preview_value, optional ImGuiComboFlags flags);
    static void                    EndCombo();
////    boolean                 Combo([Const] DOMString label, long[] current_item, [Const] DOMString [Const]items[], long items_count, optional long popup_max_height_in_items);  // items with multiple [Const]???
    static boolean                 Combo([Const] DOMString label, long[] current_item, [Const] DOMString items_separated_by_zeros, optional long popup_max_height_in_items);
////    boolean                 Combo([Const] DOMString label, long[] current_item, boolean(*items_getter)(any data, long idx, [Const] DOMString* out_text), any data, long items_count, optional long popup_max_height_in_items); // crazy boolean with param

    static boolean                 DragFloat([Const] DOMString label, float[] v, optional float v_speed, optional float v_min, optional float v_max, [Const]optional DOMString format, optional long flags);
    static boolean                 DragFloat2([Const] DOMString label, float[] v, optional float v_speed, optional float v_min, optional float v_max, [Const]optional DOMString format, optional long flags);
    static boolean                 DragFloat3([Const] DOMString label, float[] v, optional float v_speed, optional float v_min, optional float v_max, [Const]optional DOMString format, optional long flags);
    static boolean                 DragFloat4([Const] DOMString label, float[] v, optional float v_speed, optional float v_min, optional float v_max, [Const]optional DOMString format, optional long flags);
    static boolean                 DragFloatRange2([Const] DOMString label, float[] v_current_min, float[] v_current_max, optional float v_speed, optional float v_min, optional float v_max, [Const]optional DOMString format, [Const]optional DOMString format_max, optional long flags);
    static boolean                 DragInt([Const] DOMString label, long[] v, optional float v_speed, optional long v_min, optional long v_max, [Const]optional DOMString format, optional long flags);
    static boolean                 DragInt2([Const] DOMString label, long[] v, optional float v_speed, optional long v_min, optional long v_max, [Const]optional DOMString format, optional long flags);
    static boolean                 DragInt3([Const] DOMString label, long[] v, optional float v_speed, optional long v_min, optional long v_max, [Const]optional DOMString format, optional long flags);
    static boolean                 DragInt4([Const] DOMString label, long[] v, optional float v_speed, optional long v_min, optional long v_max, [Const]optional DOMString format, optional long flags);
    static boolean                 DragIntRange2([Const] DOMString label, long[] v_current_min, long[] v_current_max, optional float v_speed, optional long v_min, optional long v_max, [Const]optional DOMString format, [Const]optional DOMString format_max, optional long flags);
//    static boolean                 DragScalar([Const] DOMString label, long data_type, any p_data, optional float v_speed, [Const]optional any p_min, [Const]optional any p_max, [Const]optional DOMString format, optional long flags);
//    static boolean                 DragScalarN([Const] DOMString label, long data_type, any p_data, long components, optional float v_speed, [Const]optional any p_min, [Const]optional any p_max, [Const]optional DOMString format, optional long flags);

    static boolean                 SliderFloat([Const] DOMString label, float[] v, float v_min, float v_max, [Const]optional DOMString format, optional long flags);
    static boolean                 SliderFloat2([Const] DOMString label, float[] v, float v_min, float v_max, [Const]optional DOMString format, optional long flags);
    static boolean                 SliderFloat3([Const] DOMString label, float[] v, float v_min, float v_max, [Const]optional DOMString format, optional long flags);
    static boolean                 SliderFloat4([Const] DOMString label, float[] v, float v_min, float v_max, [Const]optional DOMString format, optional long flags);
    static boolean                 SliderAngle([Const] DOMString label, float[] v_rad, optional float v_degrees_min, optional float v_degrees_max, [Const]optional DOMString format, optional long flags);
    static boolean                 SliderInt([Const] DOMString label, long[] v, long v_min, long v_max, [Const]optional DOMString format, optional long flags);
    static boolean                 SliderInt2([Const] DOMString label, long[] v, long v_min, long v_max, [Const]optional DOMString format, optional long flags);
    static boolean                 SliderInt3([Const] DOMString label, long[] v, long v_min, long v_max, [Const]optional DOMString format, optional long flags);
    static boolean                 SliderInt4([Const] DOMString label, long[] v, long v_min, long v_max, [Const]optional DOMString format, optional long flags);
//    static boolean                 SliderScalar([Const] DOMString label, long data_type, any p_data, [Const] any p_min, [Const] any p_max, [Const]optional DOMString format, optional long flags);
//    static boolean                 SliderScalarN([Const] DOMString label, long data_type, any p_data, long components, [Const] any p_min, [Const] any p_max, [Const]optional DOMString format, optional long flags);
    static boolean                 VSliderFloat([Const] DOMString label, [Const, Ref] ImVec2 size, float[] v, float v_min, float v_max, [Const]optional DOMString format, optional long flags);
    static boolean                 VSliderInt([Const] DOMString label, [Const, Ref] ImVec2 size, long[] v, long v_min, long v_max, [Const]optional DOMString format, optional long flags);
//    static boolean                 VSliderScalar([Const] DOMString label, [Const, Ref] ImVec2 size, long data_type, any p_data, [Const] any p_min, [Const] any p_max, [Const]optional DOMString format, optional long flags);

    static boolean                 InputText([Const] DOMString label, byte[] buf, long long buf_size, optional long flags); //, optional ImGuiInputTextCallback callback, optional any user_data);
    static boolean                 InputTextMultiline([Const] DOMString label, byte[] buf, long long buf_size, [Const, Ref]optional ImVec2 size, optional long flags); //, optional ImGuiInputTextCallback callback, optional any user_data);
    static boolean                 InputTextWithHint([Const] DOMString label, [Const] DOMString hint, byte[] buf, long long buf_size, optional long flags); //, optional ImGuiInputTextCallback callback, optional any user_data);
    static boolean                 InputFloat([Const] DOMString label, float[] v, optional float step, optional float step_fast, [Const]optional DOMString format, optional long flags);
    static boolean                 InputFloat2([Const] DOMString label, float[] v, [Const]optional DOMString format, optional long flags);
    static boolean                 InputFloat3([Const] DOMString label, float[] v, [Const]optional DOMString format, optional long flags);
    static boolean                 InputFloat4([Const] DOMString label, float[] v, [Const]optional DOMString format, optional long flags);
    static boolean                 InputInt([Const] DOMString label, long[] v, optional long step, optional long step_fast, optional long flags);
    static boolean                 InputInt2([Const] DOMString label, long[] v, optional long flags);
    static boolean                 InputInt3([Const] DOMString label, long[] v, optional long flags);
    static boolean                 InputInt4([Const] DOMString label, long[] v, optional long flags);
    static boolean                 InputDouble([Const] DOMString label, double[] v, optional double step, optional double step_fast, [Const]optional DOMString format, optional long flags);
//    static boolean                 InputScalar([Const] DOMString label, long data_type, any p_data, [Const]optional any p_step, [Const]optional any p_step_fast, [Const]optional DOMString format, optional long flags);
//    static boolean                 InputScalarN([Const] DOMString label, long data_type, any p_data, long components, [Const]optional any p_step, [Const]optional any p_step_fast, [Const]optional DOMString format, optional long flags);
//
    static boolean                 ColorEdit3([Const] DOMString label, float[] col, optional long flags);
    static boolean                 ColorEdit4([Const] DOMString label, float[] col, optional long flags);
    static boolean                 ColorPicker3([Const] DOMString label, float[] col, optional long flags);
    static boolean                 ColorPicker4([Const] DOMString label, float[] col, optional long flags, [Const]optional float[] ref_col);
    static boolean                 ColorButton([Const] DOMString desc_id, [Const, Ref] ImVec4 col, optional long flags, [Const, Ref]optional ImVec2 size);
    static void                    SetColorEditOptions(ImGuiColorEditFlags flags);

    static boolean                 TreeNode([Const] DOMString label);
    static boolean                 TreeNode_2([Const] DOMString str_id, [Const] DOMString fmt);
    static boolean                 TreeNode_3([Const] any ptr_id, [Const] DOMString fmt);
    static boolean                 TreeNodeV([Const] DOMString str_id, [Const] DOMString fmt, DOMString args);
    static boolean                 TreeNodeV_2([Const] any ptr_id, [Const] DOMString fmt, DOMString args);
    static boolean                 TreeNodeEx([Const] DOMString label, optional long flags);
    static boolean                 TreeNodeEx_2([Const] DOMString str_id, long flags, [Const] DOMString fmt);
    static boolean                 TreeNodeEx_3([Const] any ptr_id, long flags, [Const] DOMString fmt);
    static boolean                 TreeNodeExV([Const] DOMString str_id, long flags, [Const] DOMString fmt, DOMString args);
    static boolean                 TreeNodeExV_2([Const] any ptr_id, long flags, [Const] DOMString fmt, DOMString args);
    static void                    TreePush([Const] DOMString str_id);
//    static void                    TreePush_2([Const] any ptr_id);
    static void                    TreePop();
    static float                   GetTreeNodeToLabelSpacing();
    static boolean                 CollapsingHeader([Const] DOMString label, optional long flags);
    static boolean                 CollapsingHeader_2([Const] DOMString label, boolean[] p_visible, optional long flags);
    static void                    SetNextItemOpen(boolean is_open, optional ImGuiCond cond);

    static boolean                 Selectable([Const]DOMString label, optional boolean selected, optional long flags, [Const, Ref]optional ImVec2 size);
    static boolean                 Selectable_2([Const]DOMString label, boolean[] p_selected, optional long flags, [Const, Ref]optional ImVec2 size);

    static boolean                 BeginListBox([Const]DOMString label, [Const, Ref]optional ImVec2 size);
    static void                    EndListBox();
////    boolean                 ListBox([Const]DOMString label, long[] current_item, [Const]DOMString[] items, long items_count, optional long height_in_items);
////    boolean                 ListBox([Const]DOMString label, long[] current_item, boolean (*items_getter)(any data, long idx, [Const]DOMString[] out_text), any data, long items_count, optional long height_in_items);
//
    static void                    PlotLines([Const]DOMString label, [Const]float[] values, long values_count, optional long values_offset, [Const]optional DOMString overlay_text, optional float scale_min, optional float scale_max); //, [Value] optional ImVec2 graph_size, optional long stride); //ERROR graph size
////    void                    PlotLines([Const]DOMString label, float(*values_getter)(any data, long idx), any data, long values_count, optional long values_offset, [Const]optional DOMString overlay_text, optional float scale_min, optional float scale_max, [Value]optionalImVec2 graph_size);
    static void                    PlotHistogram([Const]DOMString label, [Const]float[] values, long values_count, optional long values_offset, [Const]optional DOMString overlay_text, optional float scale_min, optional float scale_max);//, [Value]optional ImVec2 graph_size, optional long stride); //ERROR graph size
////    void                    PlotHistogram([Const]DOMString label, float(*values_getter)(any data, long idx), any data, long values_count, optional long values_offset, [Const]optional DOMString overlay_text, optional float scale_min, optional float scale_max, [Value]optional ImVec2 graph_size);

    static void                    Value([Const]DOMString prefix, boolean b);
    static void                    Value_2([Const]DOMString prefix, long v);
    static void                    Value_3([Const]DOMString prefix, unsigned long v);
    static void                    Value_4([Const]DOMString prefix, float v, [Const]optional DOMString float_format);

    static boolean                 BeginMenuBar();
    static void                    EndMenuBar();
    static boolean                 BeginMainMenuBar();
    static void                    EndMainMenuBar();
    static boolean                 BeginMenu([Const]DOMString label, optional boolean enabled);
    static void                    EndMenu();
    static boolean                 MenuItem([Const]DOMString label, [Const]optional DOMString shortcut, optional boolean selected, optional boolean enabled);
    static boolean                 MenuItem_2([Const]DOMString label, [Const]DOMString shortcut, boolean[] p_selected, optional boolean enabled);
//
    static void                    BeginTooltip();
    static void                    EndTooltip();
    static void                    SetTooltip([Const]DOMString fmt);
    static void                    SetTooltipV([Const]DOMString fmt, DOMString args);

    static boolean                 BeginPopup([Const]DOMString str_id, optional long flags);
    static boolean                 BeginPopupModal([Const]DOMString name, optional boolean[] p_open, optional long flags);
    static void                    EndPopup();
//
    static void                    OpenPopup([Const]DOMString str_id, optional long popup_flags);
    static void                    OpenPopup_2(long id, optional long popup_flags);
    static void                    OpenPopupOnItemClick([Const]optional DOMString str_id, optional long popup_flags);
    static void                    CloseCurrentPopup();
//
    static boolean                 BeginPopupContextItem([Const]optional DOMString str_id, optional long popup_flags);
    static boolean                 BeginPopupContextWindow([Const]optional DOMString str_id, optional long popup_flags);
    static boolean                 BeginPopupContextVoid([Const]optional DOMString str_id, optional long popup_flags);
//
    static boolean                 IsPopupOpen([Const]DOMString str_id, optional long flags);
//
    static boolean                 BeginTable([Const]DOMString str_id, long column, optional long flags, [Const, Ref]optional ImVec2 outer_size, optional float inner_width);
    static void                    EndTable();
    static void                    TableNextRow(optional long row_flags, optional float min_row_height);
    static boolean                 TableNextColumn();
    static boolean                 TableSetColumnIndex(long column_n);

    static void                    TableSetupColumn([Const]DOMString label, optional long flags, optional float init_width_or_weight, optional long user_id);
    static void                    TableSetupScrollFreeze(long cols, long rows);
    static void                    TableHeadersRow();
    static void                    TableHeader([Const]DOMString label);

    static ImGuiTableSortSpecs     TableGetSortSpecs();
    static long                    TableGetColumnCount();
    static long                    TableGetColumnIndex();
    static long                    TableGetRowIndex();
//    [Const]DOMString        TableGetColumnName(optional long column_n);
    static long                    TableGetColumnFlags(optional long column_n);
    static void                    TableSetColumnEnabled(long column_n, boolean v);
    static void                    TableSetBgColor(long target, unsigned long color, optional long column_n);

    static void                    Columns(optional long count, [Const]optional DOMString id, optional boolean border);
    static void                    NextColumn();
    static long                    GetColumnIndex();
    static float                   GetColumnWidth(optional long column_index);
    static void                    SetColumnWidth(long column_index, float width);
    static float                   GetColumnOffset(optional long column_index);
    static void                    SetColumnOffset(long column_index, float offset_x);
    static long                    GetColumnsCount();

    static boolean                 BeginTabBar([Const]DOMString str_id, optional long flags);
    static void                    EndTabBar();
    static boolean                 BeginTabItem([Const]DOMString label, optional boolean[] p_open, optional long flags);
    static void                    EndTabItem();
    static boolean                 TabItemButton([Const]DOMString label, optional long flags);
    static void                    SetTabItemClosed([Const]DOMString tab_or_docked_window_label);

    static long                    DockSpace(long id, [Const, Ref]optional ImVec2 size, optional long flags, [Const]optional ImGuiWindowClass window_class);
    static long                    DockSpaceOverViewport([Const]optional ImGuiViewport viewport, optional long flags, [Const]optional ImGuiWindowClass window_class);
    static void                    SetNextWindowDockID(long dock_id, optional ImGuiCond cond);
    static void                    SetNextWindowClass([Const]ImGuiWindowClass window_class);
    static long                    GetWindowDockID();
    static boolean                 IsWindowDocked();

//    static void                    LogToTTY(optional long auto_open_depth);
//    static void                    LogToFile(optional long auto_open_depth, [Const]optional DOMString filename);
//    static void                    LogToClipboard(optional long auto_open_depth);
//    static void                    LogFinish();
//    static void                    LogButtons();
//    static void                    LogText([Const]DOMString fmt);
//    static void                    LogTextV([Const]DOMString fmt, DOMString args);

    static boolean                 BeginDragDropSource(optional long flags);
    static boolean                 SetDragDropPayload([Const]DOMString type, [Const]any data, long long sz, optional ImGuiCond cond);
    static void                    EndDragDropSource();
    static boolean                 BeginDragDropTarget();
    [Const] static ImGuiPayload    AcceptDragDropPayload([Const]DOMString type, optional long flags);
    static void                    EndDragDropTarget();
    [Const] static ImGuiPayload    GetDragDropPayload();

    static void                    BeginDisabled(optional boolean disabled);
    static void                    EndDisabled();

    static void                    PushClipRect([Const, Ref]ImVec2 clip_rect_min, [Const, Ref]ImVec2 clip_rect_max, boolean intersect_with_current_clip_rect);
    static void                    PopClipRect();

    static void                    SetItemDefaultFocus();
    static void                    SetKeyboardFocusHere(optional long offset);

    static boolean                 IsItemHovered(optional long flags);
    static boolean                 IsItemActive();
    static boolean                 IsItemFocused();
    static boolean                 IsItemClicked(optional long mouse_button);
    static boolean                 IsItemVisible();
    static boolean                 IsItemEdited();
    static boolean                 IsItemActivated();
    static boolean                 IsItemDeactivated();
    static boolean                 IsItemDeactivatedAfterEdit();
    static boolean                 IsItemToggledOpen();
    static boolean                 IsAnyItemHovered();
    static boolean                 IsAnyItemActive();
    static boolean                 IsAnyItemFocused();
    static long                    GetItemID();
    [Value] static ImVec2          GetItemRectMin();
    [Value] static ImVec2          GetItemRectMax();
    [Value] static ImVec2          GetItemRectSize();
    static void                    SetItemAllowOverlap();

    static ImGuiViewport           GetMainViewport();

    static ImDrawList              GetBackgroundDrawList();
    static ImDrawList              GetForegroundDrawList();
    static ImDrawList              GetBackgroundDrawList_2(ImGuiViewport viewport);
    static ImDrawList              GetForegroundDrawList_2(ImGuiViewport viewport);

    static boolean                 IsRectVisible([Const, Ref]ImVec2 size);
    static boolean                 IsRectVisible_2([Const, Ref]ImVec2 rect_min, [Const, Ref]ImVec2 rect_max);
    static double                  GetTime();
    static long                    GetFrameCount();
    static ImDrawListSharedData    GetDrawListSharedData();
////    [Const]DOMString        GetStyleColorName(long idx);
    static void                    SetStateStorage(ImGuiStorage storage);
    static ImGuiStorage            GetStateStorage();
    static boolean                 BeginChildFrame(long id, [Const, Ref]ImVec2 size, optional long flags);
    static void                    EndChildFrame();

    [Value] static ImVec2          CalcTextSize([Const]DOMString text, [Const]optional DOMString text_end, optional boolean hide_text_after_double_hash, optional float wrap_width);
//
    [Value] static ImVec4          ColorConvertU32ToFloat4(unsigned long col);
    static unsigned long           ColorConvertFloat4ToU32([Const, Ref]ImVec4 col);
    static void                    ColorConvertRGBtoHSV(float r, float g, float b, float[] out_h, float[] out_s, float[] out_v); // fix by changing to pointer
    static void                    ColorConvertHSVtoRGB(float h, float s, float v, float[] out_r, float[] out_g, float[] out_b); // fix by changing to pointer

    static boolean                 IsKeyDown(ImGuiKey key);
    static boolean                 IsKeyPressed(ImGuiKey key, optional boolean repeat);
    static boolean                 IsKeyReleased(ImGuiKey key);
    static long                    GetKeyPressedAmount(ImGuiKey key, float repeat_delay, float rate);
////    [Const]DOMString        GetKeyName(ImGuiKey key);
    static void                    SetNextFrameWantCaptureKeyboard(boolean want_capture_keyboard);

    static boolean                 IsMouseDown(long button);
    static boolean                 IsMouseClicked(long button, optional boolean repeat);
    static boolean                 IsMouseReleased(long button);
    static boolean                 IsMouseDoubleClicked(long button);
    static long                    GetMouseClickedCount(long button);
    static boolean                 IsMouseHoveringRect([Const, Ref]ImVec2 r_min, [Const, Ref]ImVec2 r_max, optional boolean clip);
    static boolean                 IsMousePosValid([Const]optional ImVec2 mouse_pos);
    static boolean                 IsAnyMouseDown();
    [Value] static ImVec2          GetMousePos();
    [Value] static ImVec2          GetMousePosOnOpeningCurrentPopup();
    static boolean                 IsMouseDragging(long button, optional float lock_threshold);
    [Value] static ImVec2          GetMouseDragDelta(optional long button, optional float lock_threshold);
    static void                    ResetMouseDragDelta(optional long button);
    static long                    GetMouseCursor();
    static void                    SetMouseCursor(long cursor_type);
    static void                    SetNextFrameWantCaptureMouse(boolean want_capture_mouse);

////    [Const]DOMString        GetClipboardText();
    static void                    SetClipboardText([Const]DOMString text);

    static void                    LoadIniSettingsFromDisk([Const]DOMString ini_filename);
    static void                    LoadIniSettingsFromMemory([Const]DOMString ini_data, optional long long ini_size);
    static void                    SaveIniSettingsToDisk([Const]DOMString ini_filename);
////    [Const]DOMString           SaveIniSettingsToMemory(optional long long[] out_ini_size); // ERROR
////    [Const]DOMString           SaveIniSettingsToMemory();
//
    static void                    DebugTextEncoding([Const]DOMString text);
    static boolean                 DebugCheckVersionAndDataLayout([Const]DOMString version_str, long long sz_io, long long sz_style, long long sz_vec2, long long sz_vec4, long long sz_drawvert, long long sz_drawidx); // This is called by IMGUI_CHECKVERSION() macro.
//
////    void                    SetAllocatorFunctions(ImGuiMemAllocFunc alloc_func, ImGuiMemFreeFunc free_func, optional any user_data);
////    void                    GetAllocatorFunctions(ImGuiMemAllocFunc* p_alloc_func, ImGuiMemFreeFunc* p_free_func, any* p_user_data);
//    static any                     MemAlloc(long long size);
//    static void                    MemFree(any ptr);
//
    [Ref] static ImGuiPlatformIO   GetPlatformIO();
    static void                    UpdatePlatformWindows();
    static void                    RenderPlatformWindowsDefault(optional any platform_render_arg, optional any renderer_render_arg);
    static void                    DestroyPlatformWindows();
    static ImGuiViewport           FindViewportByID(long id);
    static ImGuiViewport           FindViewportByPlatformHandle(any platform_handle);
};

//interface ImGuiSizeCallback {
//
//};
//
//[JSImplementation="ImGuiSizeCallback"]
//interface CustomImGuiSizeCallback {
//    void CustomImGuiSizeCallback();
//};

interface ImGuiInputTextCallbackData {
//    attribute byte[] Buf;
    attribute long BufSize;
    attribute boolean BufDirty;
    attribute long BufTextLen;
    attribute long Flags;
};

interface ImHelper {
    void memcpyIdx(long destination, ImDrawList drawList, long num);
    void memcpyVtx(long destination, ImDrawList drawList, long num);
    void memcpyFont(ImGuiIO io, long pixelBuffer, long[] widthData, long[] heightData, long[] bytesPerPixel);
    long getTextureId(ImDrawCmd imDrawCmd);
    void setIniFilename(ImGuiIO io, byte[] fileName);
    void removeIniFilename(ImGuiIO io);
};

interface ImVec2 {
    attribute float x;
    attribute float y;

    void ImVec2();
    void ImVec2(float x, float y);
};

interface ImVec4 {
    attribute float x;
    attribute float y;
    attribute float z;
    attribute float w;

    void ImVec4();
    void ImVec4(float x, float y, float z, float w);

    [Operator="=", Ref] ImVec4 copy([Ref]ImVec4 value);
};

interface VecCmdBuffer {
    [Operator="[]", Ref] ImDrawCmd getData(long index);
    long size();
};

interface VecIdxBuffer {
    long size();
};

interface VecVtxBuffer {
    long size();
};

interface ImDrawCmd {
    [Value]attribute ImVec4 ClipRect;
    attribute long VtxOffset;
    attribute long IdxOffset;
    attribute long ElemCount;
    attribute any TextureId;
};

interface ImDrawVert {
    [Value]attribute ImVec2 pos;
    [Value]attribute ImVec2 uv;
    attribute long col;
};

interface ImDrawData {
    attribute long CmdListsCount;
    attribute long TotalIdxCount;
    attribute long TotalVtxCount;
    attribute ImDrawList[] CmdLists;
    [Value]attribute ImVec2 DisplayPos;
    [Value]attribute ImVec2 DisplaySize;
    [Value]attribute ImVec2 FramebufferScale;
};

interface ImDrawList {
    [Value]attribute VecCmdBuffer CmdBuffer;
    [Value]attribute VecIdxBuffer IdxBuffer;
    [Value]attribute VecVtxBuffer VtxBuffer;
    void AddImage(any user_texture_id, [Const, Ref] ImVec2 p_min, [Const, Ref] ImVec2 p_max, [Const, Ref]optional ImVec2 uv_min, [Const, Ref]optional ImVec2 uv_max, optional unsigned long col);
};

interface ImGuiIO {
    attribute boolean WantCaptureMouse;
    [Value]attribute ImVec2 DisplaySize;
    [Value]attribute ImVec2 DisplayFramebufferScale;
    attribute float DeltaTime;
    attribute ImFontAtlas Fonts;
    attribute float FontGlobalScale;
    attribute boolean ConfigDockingNoSplit;
    attribute boolean ConfigDockingWithShift;
    attribute boolean ConfigDockingAlwaysTabBar;
    attribute boolean ConfigDockingTransparentPayload;
    attribute long ConfigFlags;

    void AddMouseWheelEvent(float wheel_x, float wheel_y);
    void AddMouseButtonEvent(long button, boolean down);
    void AddMousePosEvent(float x, float y);
    void AddKeyEvent(ImGuiKey key, boolean down);
    void AddInputCharacter(unsigned long c);
};

interface ImFontAtlas {
    attribute any TexID;
};

interface ImFont {
};

interface ImGuiStyle {
};

interface ImGuiViewport {
};

interface ImGuiTableSortSpecs {
};

interface ImGuiWindowClass {
};

interface ImGuiPayload {
};

interface ImDrawListSharedData {
};

interface ImGuiStorage {
};

interface ImGuiPlatformIO {
};

[NoDelete]
interface ImGuiContext {
};

//enum ImDrawCornerFlags {
//    "ImDrawCornerFlags_None",
//    "ImDrawCornerFlags_TopRight",
//    "ImDrawCornerFlags_BotLeft",
//    "ImDrawCornerFlags_BotRight",
//    "ImDrawCornerFlags_All",
//    "ImDrawCornerFlags_Top",
//    "ImDrawCornerFlags_Bot",
//    "ImDrawCornerFlags_Left",
//    "ImDrawCornerFlags_Right"
//};

enum ImGuiFocusedFlags {
    "ImGuiFocusedFlags_None",
    "ImGuiFocusedFlags_ChildWindows",
    "ImGuiFocusedFlags_RootWindow",
    "ImGuiFocusedFlags_AnyWindow",
    "ImGuiFocusedFlags_NoPopupHierarchy",
    "ImGuiFocusedFlags_DockHierarchy",
    "ImGuiFocusedFlags_RootAndChildWindows"
};

enum ImGuiKey {
    "ImGuiKey_None",
    "ImGuiKey_Tab",
    "ImGuiKey_LeftArrow",
    "ImGuiKey_RightArrow",
    "ImGuiKey_UpArrow",
    "ImGuiKey_DownArrow",
    "ImGuiKey_PageUp",
    "ImGuiKey_PageDown",
    "ImGuiKey_Home",
    "ImGuiKey_End",
    "ImGuiKey_Insert",
    "ImGuiKey_Delete",
    "ImGuiKey_Backspace",
    "ImGuiKey_Space",
    "ImGuiKey_Enter",
    "ImGuiKey_Escape",
    "ImGuiKey_LeftCtrl", "ImGuiKey_LeftShift", "ImGuiKey_LeftAlt", "ImGuiKey_LeftSuper",
    "ImGuiKey_RightCtrl", "ImGuiKey_RightShift", "ImGuiKey_RightAlt", "ImGuiKey_RightSuper",
    "ImGuiKey_Menu",
    "ImGuiKey_0", "ImGuiKey_1", "ImGuiKey_2", "ImGuiKey_3", "ImGuiKey_4", "ImGuiKey_5", "ImGuiKey_6", "ImGuiKey_7", "ImGuiKey_8", "ImGuiKey_9",
    "ImGuiKey_A", "ImGuiKey_B", "ImGuiKey_C", "ImGuiKey_D", "ImGuiKey_E", "ImGuiKey_F", "ImGuiKey_G", "ImGuiKey_H", "ImGuiKey_I", "ImGuiKey_J",
    "ImGuiKey_K", "ImGuiKey_L", "ImGuiKey_M", "ImGuiKey_N", "ImGuiKey_O", "ImGuiKey_P", "ImGuiKey_Q", "ImGuiKey_R", "ImGuiKey_S", "ImGuiKey_T",
    "ImGuiKey_U", "ImGuiKey_V", "ImGuiKey_W", "ImGuiKey_X", "ImGuiKey_Y", "ImGuiKey_Z",
    "ImGuiKey_F1", "ImGuiKey_F2", "ImGuiKey_F3", "ImGuiKey_F4", "ImGuiKey_F5", "ImGuiKey_F6",
    "ImGuiKey_F7", "ImGuiKey_F8", "ImGuiKey_F9", "ImGuiKey_F10", "ImGuiKey_F11", "ImGuiKey_F12",
    "ImGuiKey_Apostrophe",
    "ImGuiKey_Comma",
    "ImGuiKey_Minus",
    "ImGuiKey_Period",
    "ImGuiKey_Slash",
    "ImGuiKey_Semicolon",
    "ImGuiKey_Equal",
    "ImGuiKey_LeftBracket",
    "ImGuiKey_Backslash",
    "ImGuiKey_RightBracket",
    "ImGuiKey_GraveAccent",
    "ImGuiKey_CapsLock",
    "ImGuiKey_ScrollLock",
    "ImGuiKey_NumLock",
    "ImGuiKey_PrintScreen",
    "ImGuiKey_Pause",
    "ImGuiKey_Keypad0", "ImGuiKey_Keypad1", "ImGuiKey_Keypad2", "ImGuiKey_Keypad3", "ImGuiKey_Keypad4",
    "ImGuiKey_Keypad5", "ImGuiKey_Keypad6", "ImGuiKey_Keypad7", "ImGuiKey_Keypad8", "ImGuiKey_Keypad9",
    "ImGuiKey_KeypadDecimal",
    "ImGuiKey_KeypadDivide",
    "ImGuiKey_KeypadMultiply",
    "ImGuiKey_KeypadSubtract",
    "ImGuiKey_KeypadAdd",
    "ImGuiKey_KeypadEnter",
    "ImGuiKey_KeypadEqual",
    "ImGuiKey_GamepadStart",
    "ImGuiKey_GamepadBack",
    "ImGuiKey_GamepadFaceLeft",
    "ImGuiKey_GamepadFaceRight",
    "ImGuiKey_GamepadFaceUp",
    "ImGuiKey_GamepadFaceDown",
    "ImGuiKey_GamepadDpadLeft",
    "ImGuiKey_GamepadDpadRight",
    "ImGuiKey_GamepadDpadUp",
    "ImGuiKey_GamepadDpadDown",
    "ImGuiKey_GamepadL1",
    "ImGuiKey_GamepadR1",
    "ImGuiKey_GamepadL2",
    "ImGuiKey_GamepadR2",
    "ImGuiKey_GamepadL3",
    "ImGuiKey_GamepadR3",
    "ImGuiKey_GamepadLStickLeft",
    "ImGuiKey_GamepadLStickRight",
    "ImGuiKey_GamepadLStickUp",
    "ImGuiKey_GamepadLStickDown",
    "ImGuiKey_GamepadRStickLeft",
    "ImGuiKey_GamepadRStickRight",
    "ImGuiKey_GamepadRStickUp",
    "ImGuiKey_GamepadRStickDown",

    "ImGuiKey_MouseLeft", "ImGuiKey_MouseRight", "ImGuiKey_MouseMiddle", "ImGuiKey_MouseX1", "ImGuiKey_MouseX2", "ImGuiKey_MouseWheelX", "ImGuiKey_MouseWheelY",

    "ImGuiMod_None",
    "ImGuiMod_Ctrl",
    "ImGuiMod_Shift",
    "ImGuiMod_Alt",
    "ImGuiMod_Super",
    "ImGuiMod_Shortcut",
    "ImGuiMod_Mask_"
};

enum ImGuiColorEditFlags {
    "ImGuiColorEditFlags_None",
    "ImGuiColorEditFlags_NoAlpha",
    "ImGuiColorEditFlags_NoPicker",
    "ImGuiColorEditFlags_NoOptions",
    "ImGuiColorEditFlags_NoSmallPreview",
    "ImGuiColorEditFlags_NoTooltip",
    "ImGuiColorEditFlags_NoLabel",
    "ImGuiColorEditFlags_NoSidePreview",
    "ImGuiColorEditFlags_NoDragDrop",
    "ImGuiColorEditFlags_NoBorder",
    "ImGuiColorEditFlags_AlphaBar",
    "ImGuiColorEditFlags_AlphaPreview",
    "ImGuiColorEditFlags_AlphaPreviewHalf",
    "ImGuiColorEditFlags_HDR",
    "ImGuiColorEditFlags_DisplayRGB",
    "ImGuiColorEditFlags_DisplayHSV",
    "ImGuiColorEditFlags_DisplayHex",
    "ImGuiColorEditFlags_Uint8",
    "ImGuiColorEditFlags_Float",
    "ImGuiColorEditFlags_PickerHueBar",
    "ImGuiColorEditFlags_PickerHueWheel",
    "ImGuiColorEditFlags_InputRGB",
    "ImGuiColorEditFlags_InputHSV",
    "ImGuiColorEditFlags_DefaultOptions_"
};

enum ImGuiButtonFlags {
    "ImGuiButtonFlags_None",
    "ImGuiButtonFlags_MouseButtonLeft",
    "ImGuiButtonFlags_MouseButtonRight",
    "ImGuiButtonFlags_MouseButtonMiddle"
};

enum ImGuiComboFlags {
    "ImGuiComboFlags_None",
    "ImGuiComboFlags_PopupAlignLeft",
    "ImGuiComboFlags_HeightSmall",
    "ImGuiComboFlags_HeightRegular",
    "ImGuiComboFlags_HeightLarge",
    "ImGuiComboFlags_HeightLargest",
    "ImGuiComboFlags_NoArrowButton",
    "ImGuiComboFlags_NoPreview",
    "ImGuiComboFlags_HeightMask_"
};

enum ImGuiWindowFlags {
    "ImGuiWindowFlags_None",
    "ImGuiWindowFlags_NoTitleBar",
    "ImGuiWindowFlags_NoResize",
    "ImGuiWindowFlags_NoMove",
    "ImGuiWindowFlags_NoScrollbar",
    "ImGuiWindowFlags_NoScrollWithMouse",
    "ImGuiWindowFlags_NoCollapse",
    "ImGuiWindowFlags_AlwaysAutoResize",
    "ImGuiWindowFlags_NoBackground",
    "ImGuiWindowFlags_NoSavedSettings",
    "ImGuiWindowFlags_NoMouseInputs",
    "ImGuiWindowFlags_MenuBar",
    "ImGuiWindowFlags_HorizontalScrollbar",
    "ImGuiWindowFlags_NoFocusOnAppearing",
    "ImGuiWindowFlags_NoBringToFrontOnFocus",
    "ImGuiWindowFlags_AlwaysVerticalScrollbar",
    "ImGuiWindowFlags_AlwaysHorizontalScrollbar",
    "ImGuiWindowFlags_AlwaysUseWindowPadding",
    "ImGuiWindowFlags_NoNavInputs",
    "ImGuiWindowFlags_NoNavFocus",
    "ImGuiWindowFlags_UnsavedDocument",
    "ImGuiWindowFlags_NoDocking"
};

enum ImGuiCond {
    "ImGuiCond_None",
    "ImGuiCond_Always",
    "ImGuiCond_Once",
    "ImGuiCond_FirstUseEver",
    "ImGuiCond_Appearing"
};