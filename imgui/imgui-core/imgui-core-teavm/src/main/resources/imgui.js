
var ImGui = (() => {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;
  return (
function(ImGui = {})  {

// include: shell.js
// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof ImGui != 'undefined' ? ImGui : {};

// Set up the promise that indicates the Module is initialized
var readyPromiseResolve, readyPromiseReject;
Module['ready'] = new Promise(function(resolve, reject) {
  readyPromiseResolve = resolve;
  readyPromiseReject = reject;
});
["_free","_malloc","_emscripten_bind_VoidPtr___destroy___0","_emscripten_bind_BoolArray_BoolArray_1","_emscripten_bind_BoolArray_resize_1","_emscripten_bind_BoolArray_getValue_1","_emscripten_bind_BoolArray_setValue_2","_emscripten_bind_BoolArray_getPointer_0","_emscripten_bind_BoolArray_get_size_0","_emscripten_bind_BoolArray_set_size_1","_emscripten_bind_BoolArray___destroy___0","_emscripten_bind_IntArray_IntArray_1","_emscripten_bind_IntArray_resize_1","_emscripten_bind_IntArray_getValue_1","_emscripten_bind_IntArray_setValue_2","_emscripten_bind_IntArray_getPointer_0","_emscripten_bind_IntArray_get_size_0","_emscripten_bind_IntArray_set_size_1","_emscripten_bind_IntArray___destroy___0","_emscripten_bind_FloatArray_FloatArray_1","_emscripten_bind_FloatArray_resize_1","_emscripten_bind_FloatArray_getValue_1","_emscripten_bind_FloatArray_setValue_2","_emscripten_bind_FloatArray_getPointer_0","_emscripten_bind_FloatArray_get_size_0","_emscripten_bind_FloatArray_set_size_1","_emscripten_bind_FloatArray___destroy___0","_emscripten_bind_DoubleArray_DoubleArray_1","_emscripten_bind_DoubleArray_resize_1","_emscripten_bind_DoubleArray_getValue_1","_emscripten_bind_DoubleArray_setValue_2","_emscripten_bind_DoubleArray_getPointer_0","_emscripten_bind_DoubleArray_get_size_0","_emscripten_bind_DoubleArray_set_size_1","_emscripten_bind_DoubleArray___destroy___0","_emscripten_bind_CharArray_CharArray_1","_emscripten_bind_CharArray_resize_1","_emscripten_bind_CharArray_getValue_1","_emscripten_bind_CharArray_setValue_2","_emscripten_bind_CharArray_getPointer_0","_emscripten_bind_CharArray_get_size_0","_emscripten_bind_CharArray_set_size_1","_emscripten_bind_CharArray___destroy___0","_emscripten_bind_ImHelper_memcpyIdx_3","_emscripten_bind_ImHelper_memcpyVtx_3","_emscripten_bind_ImHelper_memcpyFont_5","_emscripten_bind_ImHelper_getTextureId_1","_emscripten_bind_ImHelper_setIniFilename_2","_emscripten_bind_ImHelper_removeIniFilename_1","_emscripten_bind_ImHelper___destroy___0","_emscripten_bind_Im_CreateContext_0","_emscripten_bind_Im_Begin_1","_emscripten_bind_Im_End_0","_emscripten_bind_Im_Render_0","_emscripten_bind_Im_NewFrame_0","_emscripten_bind_Im_GetDrawData_0","_emscripten_bind_Im_GetIO_0","_emscripten_bind_Im_SetNextWindowSize_1","_emscripten_bind_Im_SetNextWindowSize_2","_emscripten_bind_Im_ShowDemoWindow_0","_emscripten_bind_Im_ShowDemoWindow_1","_emscripten_bind_Im_Checkbox_2","_emscripten_bind_ImVec2_ImVec2_0","_emscripten_bind_ImVec2_ImVec2_2","_emscripten_bind_ImVec2_get_x_0","_emscripten_bind_ImVec2_set_x_1","_emscripten_bind_ImVec2_get_y_0","_emscripten_bind_ImVec2_set_y_1","_emscripten_bind_ImVec2___destroy___0","_emscripten_bind_ImVec4_ImVec4_0","_emscripten_bind_ImVec4_ImVec4_4","_emscripten_bind_ImVec4_get_x_0","_emscripten_bind_ImVec4_set_x_1","_emscripten_bind_ImVec4_get_y_0","_emscripten_bind_ImVec4_set_y_1","_emscripten_bind_ImVec4_get_z_0","_emscripten_bind_ImVec4_set_z_1","_emscripten_bind_ImVec4_get_w_0","_emscripten_bind_ImVec4_set_w_1","_emscripten_bind_ImVec4___destroy___0","_emscripten_bind_VecCmdBuffer_size_0","_emscripten_bind_VecCmdBuffer_get_Data_0","_emscripten_bind_VecCmdBuffer_set_Data_1","_emscripten_bind_VecCmdBuffer___destroy___0","_emscripten_bind_VecIdxBuffer_size_0","_emscripten_bind_VecIdxBuffer_get_Data_1","_emscripten_bind_VecIdxBuffer_set_Data_2","_emscripten_bind_VecIdxBuffer___destroy___0","_emscripten_bind_VecVtxBuffer_size_0","_emscripten_bind_VecVtxBuffer_get_Data_0","_emscripten_bind_VecVtxBuffer_set_Data_1","_emscripten_bind_VecVtxBuffer___destroy___0","_emscripten_bind_ImDrawCmd_get_ClipRect_0","_emscripten_bind_ImDrawCmd_set_ClipRect_1","_emscripten_bind_ImDrawCmd_get_VtxOffset_0","_emscripten_bind_ImDrawCmd_set_VtxOffset_1","_emscripten_bind_ImDrawCmd_get_IdxOffset_0","_emscripten_bind_ImDrawCmd_set_IdxOffset_1","_emscripten_bind_ImDrawCmd_get_ElemCount_0","_emscripten_bind_ImDrawCmd_set_ElemCount_1","_emscripten_bind_ImDrawCmd_get_TextureId_0","_emscripten_bind_ImDrawCmd_set_TextureId_1","_emscripten_bind_ImDrawCmd___destroy___0","_emscripten_bind_ImDrawVert_get_pos_0","_emscripten_bind_ImDrawVert_set_pos_1","_emscripten_bind_ImDrawVert_get_uv_0","_emscripten_bind_ImDrawVert_set_uv_1","_emscripten_bind_ImDrawVert_get_col_0","_emscripten_bind_ImDrawVert_set_col_1","_emscripten_bind_ImDrawVert___destroy___0","_emscripten_bind_ImDrawData_get_CmdListsCount_0","_emscripten_bind_ImDrawData_set_CmdListsCount_1","_emscripten_bind_ImDrawData_get_TotalIdxCount_0","_emscripten_bind_ImDrawData_set_TotalIdxCount_1","_emscripten_bind_ImDrawData_get_TotalVtxCount_0","_emscripten_bind_ImDrawData_set_TotalVtxCount_1","_emscripten_bind_ImDrawData_get_CmdLists_1","_emscripten_bind_ImDrawData_set_CmdLists_2","_emscripten_bind_ImDrawData_get_DisplayPos_0","_emscripten_bind_ImDrawData_set_DisplayPos_1","_emscripten_bind_ImDrawData_get_DisplaySize_0","_emscripten_bind_ImDrawData_set_DisplaySize_1","_emscripten_bind_ImDrawData_get_FramebufferScale_0","_emscripten_bind_ImDrawData_set_FramebufferScale_1","_emscripten_bind_ImDrawData___destroy___0","_emscripten_bind_ImDrawList_get_CmdBuffer_0","_emscripten_bind_ImDrawList_set_CmdBuffer_1","_emscripten_bind_ImDrawList_get_IdxBuffer_0","_emscripten_bind_ImDrawList_set_IdxBuffer_1","_emscripten_bind_ImDrawList_get_VtxBuffer_0","_emscripten_bind_ImDrawList_set_VtxBuffer_1","_emscripten_bind_ImDrawList___destroy___0","_emscripten_bind_ImGuiIO_AddMouseWheelEvent_2","_emscripten_bind_ImGuiIO_AddMouseButtonEvent_2","_emscripten_bind_ImGuiIO_AddMousePosEvent_2","_emscripten_bind_ImGuiIO_AddKeyEvent_2","_emscripten_bind_ImGuiIO_AddInputCharacter_1","_emscripten_bind_ImGuiIO_get_WantCaptureMouse_0","_emscripten_bind_ImGuiIO_set_WantCaptureMouse_1","_emscripten_bind_ImGuiIO_get_DisplaySize_0","_emscripten_bind_ImGuiIO_set_DisplaySize_1","_emscripten_bind_ImGuiIO_get_DisplayFramebufferScale_0","_emscripten_bind_ImGuiIO_set_DisplayFramebufferScale_1","_emscripten_bind_ImGuiIO_get_DeltaTime_0","_emscripten_bind_ImGuiIO_set_DeltaTime_1","_emscripten_bind_ImGuiIO_get_Fonts_0","_emscripten_bind_ImGuiIO_set_Fonts_1","_emscripten_bind_ImGuiIO___destroy___0","_emscripten_bind_ImFontAtlas_get_TexID_0","_emscripten_bind_ImFontAtlas_set_TexID_1","_emscripten_bind_ImFontAtlas___destroy___0","_emscripten_enum_ImGuiKey_ImGuiKey_None","_fflush","onRuntimeInitialized"].forEach((prop) => {
  if (!Object.getOwnPropertyDescriptor(Module['ready'], prop)) {
    Object.defineProperty(Module['ready'], prop, {
      get: () => abort('You are getting ' + prop + ' on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js'),
      set: () => abort('You are setting ' + prop + ' on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js'),
    });
  }
});

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)


// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = Object.assign({}, Module);

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = (status, toThrow) => {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

// Attempt to auto-detect the environment
var ENVIRONMENT_IS_WEB = typeof window == 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts == 'function';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
var ENVIRONMENT_IS_NODE = typeof process == 'object' && typeof process.versions == 'object' && typeof process.versions.node == 'string';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)');
}

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

// Normally we don't log exceptions but instead let them bubble out the top
// level where the embedding environment (e.g. the browser) can handle
// them.
// However under v8 and node we sometimes exit the process direcly in which case
// its up to use us to log the exception before exiting.
// If we fix https://github.com/emscripten-core/emscripten/issues/15080
// this may no longer be needed under node.
function logExceptionOnExit(e) {
  if (e instanceof ExitStatus) return;
  let toLog = e;
  if (e && typeof e == 'object' && e.stack) {
    toLog = [e, e.stack];
  }
  err('exiting due to exception: ' + toLog);
}

if (ENVIRONMENT_IS_NODE) {
  if (typeof process == 'undefined' || !process.release || process.release.name !== 'node') throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');
  // `require()` is no-op in an ESM module, use `createRequire()` to construct
  // the require()` function.  This is only necessary for multi-environment
  // builds, `-sENVIRONMENT=node` emits a static import declaration instead.
  // TODO: Swap all `require()`'s with `import()`'s?
  // These modules will usually be used on Node.js. Load them eagerly to avoid
  // the complexity of lazy-loading.
  var fs = require('fs');
  var nodePath = require('path');

  if (ENVIRONMENT_IS_WORKER) {
    scriptDirectory = nodePath.dirname(scriptDirectory) + '/';
  } else {
    scriptDirectory = __dirname + '/';
  }

// include: node_shell_read.js
read_ = (filename, binary) => {
  var ret = tryParseAsDataURI(filename);
  if (ret) {
    return binary ? ret : ret.toString();
  }
  // We need to re-wrap `file://` strings to URLs. Normalizing isn't
  // necessary in that case, the path should already be absolute.
  filename = isFileURI(filename) ? new URL(filename) : nodePath.normalize(filename);
  return fs.readFileSync(filename, binary ? undefined : 'utf8');
};

readBinary = (filename) => {
  var ret = read_(filename, true);
  if (!ret.buffer) {
    ret = new Uint8Array(ret);
  }
  assert(ret.buffer);
  return ret;
};

readAsync = (filename, onload, onerror) => {
  var ret = tryParseAsDataURI(filename);
  if (ret) {
    onload(ret);
  }
  // See the comment in the `read_` function.
  filename = isFileURI(filename) ? new URL(filename) : nodePath.normalize(filename);
  fs.readFile(filename, function(err, data) {
    if (err) onerror(err);
    else onload(data.buffer);
  });
};

// end include: node_shell_read.js
  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  // MODULARIZE will export the module in the proper place outside, we don't need to export here

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  // Without this older versions of node (< v15) will log unhandled rejections
  // but return 0, which is not normally the desired behaviour.  This is
  // not be needed with node v15 and about because it is now the default
  // behaviour:
  // See https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode
  var nodeMajor = process.version.match(/^v(\d+)\./)[1];
  if (nodeMajor < 15) {
    process['on']('unhandledRejection', function(reason) { throw reason; });
  }

  quit_ = (status, toThrow) => {
    if (keepRuntimeAlive()) {
      process['exitCode'] = status;
      throw toThrow;
    }
    logExceptionOnExit(toThrow);
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };

} else
if (ENVIRONMENT_IS_SHELL) {

  if ((typeof process == 'object' && typeof require === 'function') || typeof window == 'object' || typeof importScripts == 'function') throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      const data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    let data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer == 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data == 'object');
    return data;
  };

  readAsync = function readAsync(f, onload, onerror) {
    setTimeout(() => onload(readBinary(f)), 0);
  };

  if (typeof clearTimeout == 'undefined') {
    globalThis.clearTimeout = (id) => {};
  }

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit == 'function') {
    quit_ = (status, toThrow) => {
      logExceptionOnExit(toThrow);
      quit(status);
    };
  }

  if (typeof print != 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console == 'undefined') console = /** @type{!Console} */({});
    console.log = /** @type{!function(this:Console, ...*): undefined} */ (print);
    console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */ (typeof printErr != 'undefined' ? printErr : print);
  }

} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (typeof document != 'undefined' && document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // When MODULARIZE, this JS may be executed later, after document.currentScript
  // is gone, so we saved it, and we use it here instead of any other info.
  if (_scriptDir) {
    scriptDirectory = _scriptDir;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  // If scriptDirectory contains a query (starting with ?) or a fragment (starting with #),
  // they are removed because they could contain a slash.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, "").lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }

  if (!(typeof window == 'object' || typeof importScripts == 'function')) throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {
// include: web_or_worker_shell_read.js
read_ = (url) => {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  }

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = (url) => {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = (url, onload, onerror) => {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = () => {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  }

// end include: web_or_worker_shell_read.js
  }

  setWindowTitle = (title) => document.title = title;
} else
{
  throw new Error('environment detection error');
}

var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
Object.assign(Module, moduleOverrides);
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;
checkIncomingModuleAPI();

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.

if (Module['arguments']) arguments_ = Module['arguments'];legacyModuleProp('arguments', 'arguments_');

if (Module['thisProgram']) thisProgram = Module['thisProgram'];legacyModuleProp('thisProgram', 'thisProgram');

if (Module['quit']) quit_ = Module['quit'];legacyModuleProp('quit', 'quit_');

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] == 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] == 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] == 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] == 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] == 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] == 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] == 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] == 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
assert(typeof Module['TOTAL_MEMORY'] == 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');
legacyModuleProp('read', 'read_');
legacyModuleProp('readAsync', 'readAsync');
legacyModuleProp('readBinary', 'readBinary');
legacyModuleProp('setWindowTitle', 'setWindowTitle');
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';

assert(!ENVIRONMENT_IS_SHELL, "shell environment detected but not enabled at build time.  Add 'shell' to `-sENVIRONMENT` to enable.");


// end include: shell.js
// include: preamble.js
// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

var wasmBinary;
if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];legacyModuleProp('wasmBinary', 'wasmBinary');
var noExitRuntime = Module['noExitRuntime'] || true;legacyModuleProp('noExitRuntime', 'noExitRuntime');

// include: wasm2js.js
// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.

// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{duplicate, const} */
var
WebAssembly = {
  // Note that we do not use closure quoting (this['buffer'], etc.) on these
  // functions, as they are just meant for internal use. In other words, this is
  // not a fully general polyfill.
  /** @constructor */
  Memory: function(opts) {
    this.buffer = new ArrayBuffer(opts['initial'] * 65536);
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
  },

  /** @constructor */
  Instance: function(module, info) {
    // TODO: use the module somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    this.exports = (
function instantiate(info) {
function Table(ret) {
  // grow method not included; table is not growable
  ret.set = function(i, func) {
    this[i] = func;
  };
  ret.get = function(i) {
    return this[i];
  };
  return ret;
}

  var bufferView;
  var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
  for (var i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
function initActiveSegments(imports) {
  base64DecodeToExistingUint8Array(bufferView, 65536, "");
  base64DecodeToExistingUint8Array(bufferView, 92288, "EQAAABIAAAAFAAAAAAAAAAAAAAAjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfAAAAJAAAAKhqAQAABAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAA/////woAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACIaAEAUHMBAAUAAAAAAAAAAAAAACEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8AAAAeAAAASHMBAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACBpAQA=");
  base64DecodeToExistingUint8Array(bufferView, 92596, "JGludEFycmF5RnJvbVN0cmluZwA=");
  base64DecodeToExistingUint8Array(bufferView, 92616, "KHNpemVfdCBpZHgsIHNpemVfdCBzaXplKTw6Oj57IHRocm93ICdBcnJheSBpbmRleCAnICsgaWR4ICsgJyBvdXQgb2YgYm91bmRzOiBbMCwnICsgc2l6ZSArICcpJzsgfQA=");
  base64DecodeToExistingUint8Array(bufferView
}

  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[2];
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[2] = value;
  }
      function wasm2js_trap() { throw new Error('abort'); }

function asmFunc(imports) {
 var env = imports.env;
 var memory = env.memory;
 var buffer = memory.buffer;
 memory.grow = __wasm_memory_grow;
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var emscripten_memcpy_big = env.emscripten_memcpy_big;
 var __syscall_openat = env.__syscall_openat;
 var __syscall_fcntl64 = env.__syscall_fcntl64;
 var __syscall_ioctl = env.__syscall_ioctl;
 var wasi_snapshot_preview1 = imports.wasi_snapshot_preview1;
 var __wasi_fd_write = wasi_snapshot_preview1.fd_write;
 var __wasi_fd_read = wasi_snapshot_preview1.fd_read;
 var __wasi_fd_close = wasi_snapshot_preview1.fd_close;
 var emscripten_resize_heap = env.emscripten_resize_heap;
 var abort = env.abort;
 var legalimport$__wasi_fd_seek = wasi_snapshot_preview1.fd_seek;
 var __stack_pointer = 65536;
 var tempRet0 = 0;
 var __stack_end = 0;
 var __stack_base = 0;
 var global$4 = 92596;
 var global$5 = 92616;
 var global$6 = 92596;
 var global$7 = 92616;
 var global$8 = 92616;
 var global$9 = 92714;
 var __wasm_intrinsics_temp_i64 = 0;
 var __wasm_intrinsics_temp_i64$hi = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function __wasm_call_ctors() {
  emscripten_stack_init();
  initialize_emmalloc_heap();
  init_pthread_self();
 }
 
 function emscripten_bind_VoidPtr___destroy___0($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   operator_20delete_28void__29($4 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_BoolArray_BoolArray_1($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = operator_20new_28unsigned_20long_29(8 | 0) | 0;
  BoolArray__BoolArray_28int_29($5 | 0, HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function BoolArray__BoolArray_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = 0;
  BoolArray__resize_28int_29($5 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return $5 | 0;
 }
 
 function BoolArray__resize_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[$5 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   BoolArray__deleteData_28_29($5 | 0);
  }
  (wasm2js_i32$0 = $4, wasm2js_i32$1 = operator_20new_5b_5d_28unsigned_20long_29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[$4 >> 2] = 0;
  label$2 : {
   label$3 : while (1) {
    if (!((HEAP32[$4 >> 2] | 0 | 0) < (HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP8[((HEAP32[($4 + 4 | 0) >> 2] | 0) + (HEAP32[$4 >> 2] | 0) | 0) >> 0] = 0;
    HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
    continue label$3;
   };
  }
  HEAP32[$5 >> 2] = HEAP32[($4 + 4 | 0) >> 2] | 0;
  HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function emscripten_bind_BoolArray_resize_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  BoolArray__resize_28int_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function BoolArray__deleteData_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0;
  label$1 : {
   if (($5 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   operator_20delete_28void__29($5 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_BoolArray_getValue_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $9 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $9 = (BoolArray__getValue_28int_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0) & 1 | 0;
  __stack_pointer = $4 + 16 | 0;
  return $9 | 0;
 }
 
 function BoolArray__getValue_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  return (HEAPU8[((HEAP32[(HEAP32[($4 + 12 | 0) >> 2] | 0) >> 2] | 0) + (HEAP32[($4 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function emscripten_bind_BoolArray_setValue_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP8[($5 + 7 | 0) >> 0] = $2;
  BoolArray__setValue_28int_2c_20bool_29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, (HEAPU8[($5 + 7 | 0) >> 0] | 0) & 1 | 0 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function BoolArray__setValue_28int_2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP8[($5 + 7 | 0) >> 0] = $2;
  HEAP8[((HEAP32[(HEAP32[($5 + 12 | 0) >> 2] | 0) >> 2] | 0) + (HEAP32[($5 + 8 | 0) >> 2] | 0) | 0) >> 0] = (HEAPU8[($5 + 7 | 0) >> 0] | 0) & 1 | 0;
  return;
 }
 
 function emscripten_bind_BoolArray_getPointer_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = BoolArray__getPointer_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function BoolArray__getPointer_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function emscripten_bind_BoolArray_get_size_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function emscripten_bind_BoolArray_set_size_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return;
 }
 
 function emscripten_bind_BoolArray___destroy___0($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   BoolArray___BoolArray_28_29($4 | 0) | 0;
   operator_20delete_28void__29($4 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function BoolArray___BoolArray_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $12 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $4;
  label$1 : {
   if (!((HEAP32[$4 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   BoolArray__deleteData_28_29($4 | 0);
  }
  $12 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $12 | 0;
 }
 
 function emscripten_bind_IntArray_IntArray_1($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = operator_20new_28unsigned_20long_29(8 | 0) | 0;
  IntArray__IntArray_28int_29($5 | 0, HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function IntArray__IntArray_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = 0;
  IntArray__resize_28int_29($5 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return $5 | 0;
 }
 
 function IntArray__resize_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $13 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[$5 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   IntArray__deleteData_28_29($5 | 0);
  }
  $13 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $4, wasm2js_i32$1 = operator_20new_5b_5d_28unsigned_20long_29((($13 & 1073741823 | 0 | 0) != ($13 | 0) & 1 | 0 ? -1 : $13 << 2 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[$4 >> 2] = 0;
  label$2 : {
   label$3 : while (1) {
    if (!((HEAP32[$4 >> 2] | 0 | 0) < (HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[((HEAP32[($4 + 4 | 0) >> 2] | 0) + ((HEAP32[$4 >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
    HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
    continue label$3;
   };
  }
  HEAP32[$5 >> 2] = HEAP32[($4 + 4 | 0) >> 2] | 0;
  HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function emscripten_bind_IntArray_resize_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  IntArray__resize_28int_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function IntArray__deleteData_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0;
  label$1 : {
   if (($5 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   operator_20delete_28void__29($5 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_IntArray_getValue_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = IntArray__getValue_28int_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $7 | 0;
 }
 
 function IntArray__getValue_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  return HEAP32[((HEAP32[(HEAP32[($4 + 12 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function emscripten_bind_IntArray_setValue_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  IntArray__setValue_28int_2c_20int_29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function IntArray__setValue_28int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  HEAP32[((HEAP32[(HEAP32[($5 + 12 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($5 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($5 + 4 | 0) >> 2] | 0;
  return;
 }
 
 function emscripten_bind_IntArray_getPointer_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = IntArray__getPointer_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function IntArray__getPointer_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function emscripten_bind_IntArray_get_size_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function emscripten_bind_IntArray_set_size_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return;
 }
 
 function emscripten_bind_IntArray___destroy___0($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   IntArray___IntArray_28_29($4 | 0) | 0;
   operator_20delete_28void__29($4 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function IntArray___IntArray_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $12 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $4;
  label$1 : {
   if (!((HEAP32[$4 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   IntArray__deleteData_28_29($4 | 0);
  }
  $12 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $12 | 0;
 }
 
 function emscripten_bind_FloatArray_FloatArray_1($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = operator_20new_28unsigned_20long_29(8 | 0) | 0;
  FloatArray__FloatArray_28int_29($5 | 0, HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function FloatArray__FloatArray_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = 0;
  FloatArray__resize_28int_29($5 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return $5 | 0;
 }
 
 function FloatArray__resize_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $13 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[$5 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   FloatArray__deleteData_28_29($5 | 0);
  }
  $13 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $4, wasm2js_i32$1 = operator_20new_5b_5d_28unsigned_20long_29((($13 & 1073741823 | 0 | 0) != ($13 | 0) & 1 | 0 ? -1 : $13 << 2 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[$4 >> 2] = 0;
  label$2 : {
   label$3 : while (1) {
    if (!((HEAP32[$4 >> 2] | 0 | 0) < (HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAPF32[((HEAP32[($4 + 4 | 0) >> 2] | 0) + ((HEAP32[$4 >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(0 | 0);
    HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
    continue label$3;
   };
  }
  HEAP32[$5 >> 2] = HEAP32[($4 + 4 | 0) >> 2] | 0;
  HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function emscripten_bind_FloatArray_resize_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  FloatArray__resize_28int_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function FloatArray__deleteData_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0;
  label$1 : {
   if (($5 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   operator_20delete_28void__29($5 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_FloatArray_getValue_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = Math_fround(0), $13 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = Math_fround(FloatArray__getValue_28int_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0));
  label$1 : {
   label$2 : {
    if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
     break label$2
    }
    $13 = ~~$7;
    break label$1;
   }
   $13 = -2147483648;
  }
  __stack_pointer = $4 + 16 | 0;
  return $13 | 0;
 }
 
 function FloatArray__getValue_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[(HEAP32[($4 + 12 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]));
 }
 
 function emscripten_bind_FloatArray_setValue_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  FloatArray__setValue_28int_2c_20float_29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAP32[($5 + 4 | 0) >> 2] | 0 | 0)));
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function FloatArray__setValue_28int_2c_20float_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAPF32[($5 + 4 | 0) >> 2] = $2;
  HEAPF32[((HEAP32[(HEAP32[($5 + 12 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($5 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[($5 + 4 | 0) >> 2]);
  return;
 }
 
 function emscripten_bind_FloatArray_getPointer_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = FloatArray__getPointer_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function FloatArray__getPointer_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function emscripten_bind_FloatArray_get_size_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function emscripten_bind_FloatArray_set_size_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return;
 }
 
 function emscripten_bind_FloatArray___destroy___0($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   FloatArray___FloatArray_28_29($4 | 0) | 0;
   operator_20delete_28void__29($4 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function FloatArray___FloatArray_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $12 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $4;
  label$1 : {
   if (!((HEAP32[$4 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   FloatArray__deleteData_28_29($4 | 0);
  }
  $12 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $12 | 0;
 }
 
 function emscripten_bind_DoubleArray_DoubleArray_1($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = operator_20new_28unsigned_20long_29(8 | 0) | 0;
  DoubleArray__DoubleArray_28int_29($5 | 0, HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function DoubleArray__DoubleArray_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = 0;
  DoubleArray__resize_28int_29($5 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return $5 | 0;
 }
 
 function DoubleArray__resize_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $13 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[$5 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   DoubleArray__deleteData_28_29($5 | 0);
  }
  $13 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $4, wasm2js_i32$1 = operator_20new_5b_5d_28unsigned_20long_29((($13 & 536870911 | 0 | 0) != ($13 | 0) & 1 | 0 ? -1 : $13 << 3 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[$4 >> 2] = 0;
  label$2 : {
   label$3 : while (1) {
    if (!((HEAP32[$4 >> 2] | 0 | 0) < (HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAPF64[((HEAP32[($4 + 4 | 0) >> 2] | 0) + ((HEAP32[$4 >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
    continue label$3;
   };
  }
  HEAP32[$5 >> 2] = HEAP32[($4 + 4 | 0) >> 2] | 0;
  HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function emscripten_bind_DoubleArray_resize_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  DoubleArray__resize_28int_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function DoubleArray__deleteData_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0;
  label$1 : {
   if (($5 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   operator_20delete_28void__29($5 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_DoubleArray_getValue_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = +DoubleArray__getValue_28int_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return +$7;
 }
 
 function DoubleArray__getValue_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  return +(+HEAPF64[((HEAP32[(HEAP32[($4 + 12 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
 }
 
 function emscripten_bind_DoubleArray_setValue_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAPF64[$5 >> 3] = $2;
  DoubleArray__setValue_28int_2c_20double_29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, +(+HEAPF64[$5 >> 3]));
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function DoubleArray__setValue_28int_2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAPF64[$5 >> 3] = $2;
  HEAPF64[((HEAP32[(HEAP32[($5 + 12 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($5 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[$5 >> 3];
  return;
 }
 
 function emscripten_bind_DoubleArray_getPointer_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = DoubleArray__getPointer_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function DoubleArray__getPointer_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function emscripten_bind_DoubleArray_get_size_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function emscripten_bind_DoubleArray_set_size_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return;
 }
 
 function emscripten_bind_DoubleArray___destroy___0($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   DoubleArray___DoubleArray_28_29($4 | 0) | 0;
   operator_20delete_28void__29($4 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function DoubleArray___DoubleArray_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $12 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $4;
  label$1 : {
   if (!((HEAP32[$4 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   DoubleArray__deleteData_28_29($4 | 0);
  }
  $12 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $12 | 0;
 }
 
 function emscripten_bind_CharArray_CharArray_1($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = operator_20new_28unsigned_20long_29(8 | 0) | 0;
  CharArray__CharArray_28int_29($5 | 0, HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function CharArray__CharArray_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = 0;
  CharArray__resize_28int_29($5 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return $5 | 0;
 }
 
 function CharArray__resize_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[$5 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   CharArray__deleteData_28_29($5 | 0);
  }
  (wasm2js_i32$0 = $4, wasm2js_i32$1 = operator_20new_5b_5d_28unsigned_20long_29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[$4 >> 2] = 0;
  label$2 : {
   label$3 : while (1) {
    if (!((HEAP32[$4 >> 2] | 0 | 0) < (HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP8[((HEAP32[($4 + 4 | 0) >> 2] | 0) + (HEAP32[$4 >> 2] | 0) | 0) >> 0] = 0;
    HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
    continue label$3;
   };
  }
  HEAP32[$5 >> 2] = HEAP32[($4 + 4 | 0) >> 2] | 0;
  HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function emscripten_bind_CharArray_resize_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  CharArray__resize_28int_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function CharArray__deleteData_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0;
  label$1 : {
   if (($5 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   operator_20delete_28void__29($5 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_CharArray_getValue_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0, $10 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = 24;
  $10 = ((CharArray__getValue_28int_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0) << $8 | 0) >> $8 | 0;
  __stack_pointer = $4 + 16 | 0;
  return $10 | 0;
 }
 
 function CharArray__getValue_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $10 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $10 = 24;
  return ((HEAPU8[((HEAP32[(HEAP32[($4 + 12 | 0) >> 2] | 0) >> 2] | 0) + (HEAP32[($4 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0) << $10 | 0) >> $10 | 0 | 0;
 }
 
 function emscripten_bind_CharArray_setValue_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $9 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP8[($5 + 7 | 0) >> 0] = $2;
  $9 = 24;
  CharArray__setValue_28int_2c_20char_29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, ((HEAPU8[($5 + 7 | 0) >> 0] | 0) << $9 | 0) >> $9 | 0 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function CharArray__setValue_28int_2c_20char_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP8[($5 + 7 | 0) >> 0] = $2;
  HEAP8[((HEAP32[(HEAP32[($5 + 12 | 0) >> 2] | 0) >> 2] | 0) + (HEAP32[($5 + 8 | 0) >> 2] | 0) | 0) >> 0] = HEAPU8[($5 + 7 | 0) >> 0] | 0;
  return;
 }
 
 function emscripten_bind_CharArray_getPointer_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = CharArray__getPointer_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function CharArray__getPointer_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function emscripten_bind_CharArray_get_size_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function emscripten_bind_CharArray_set_size_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return;
 }
 
 function emscripten_bind_CharArray___destroy___0($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   CharArray___CharArray_28_29($4 | 0) | 0;
   operator_20delete_28void__29($4 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function CharArray___CharArray_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $12 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $4;
  label$1 : {
   if (!((HEAP32[$4 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   CharArray__deleteData_28_29($4 | 0);
  }
  $12 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $12 | 0;
 }
 
 function emscripten_bind_ImHelper_memcpyIdx_3($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 12 | 0) >> 2] = $0;
  HEAP32[($6 + 8 | 0) >> 2] = $1;
  HEAP32[($6 + 4 | 0) >> 2] = $2;
  HEAP32[$6 >> 2] = $3;
  ImHelper__memcpyIdx_28void__2c_20ImDrawList__2c_20int_29(HEAP32[($6 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6 >> 2] | 0 | 0);
  __stack_pointer = $6 + 16 | 0;
  return;
 }
 
 function ImHelper__memcpyIdx_28void__2c_20ImDrawList__2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  __memcpy(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function emscripten_bind_ImHelper_memcpyVtx_3($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 12 | 0) >> 2] = $0;
  HEAP32[($6 + 8 | 0) >> 2] = $1;
  HEAP32[($6 + 4 | 0) >> 2] = $2;
  HEAP32[$6 >> 2] = $3;
  ImHelper__memcpyVtx_28void__2c_20ImDrawList__2c_20int_29(HEAP32[($6 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6 >> 2] | 0 | 0);
  __stack_pointer = $6 + 16 | 0;
  return;
 }
 
 function ImHelper__memcpyVtx_28void__2c_20ImDrawList__2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  __memcpy(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5 + 8 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function emscripten_bind_ImHelper_memcpyFont_5($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $8 = 0;
  $8 = __stack_pointer - 32 | 0;
  __stack_pointer = $8;
  HEAP32[($8 + 28 | 0) >> 2] = $0;
  HEAP32[($8 + 24 | 0) >> 2] = $1;
  HEAP32[($8 + 20 | 0) >> 2] = $2;
  HEAP32[($8 + 16 | 0) >> 2] = $3;
  HEAP32[($8 + 12 | 0) >> 2] = $4;
  HEAP32[($8 + 8 | 0) >> 2] = $5;
  ImHelper__memcpyFont_28ImGuiIO__2c_20void__2c_20int__2c_20int__2c_20int__29(HEAP32[($8 + 24 | 0) >> 2] | 0 | 0, HEAP32[($8 + 20 | 0) >> 2] | 0 | 0, HEAP32[($8 + 16 | 0) >> 2] | 0 | 0, HEAP32[($8 + 12 | 0) >> 2] | 0 | 0, HEAP32[($8 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $8 + 32 | 0;
  return;
 }
 
 function ImHelper__memcpyFont_28ImGuiIO__2c_20void__2c_20int__2c_20int__2c_20int__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $7 = 0;
  $7 = __stack_pointer - 32 | 0;
  __stack_pointer = $7;
  HEAP32[($7 + 28 | 0) >> 2] = $0;
  HEAP32[($7 + 24 | 0) >> 2] = $1;
  HEAP32[($7 + 20 | 0) >> 2] = $2;
  HEAP32[($7 + 16 | 0) >> 2] = $3;
  HEAP32[($7 + 12 | 0) >> 2] = $4;
  ImFontAtlas__GetTexDataAsRGBA32_28unsigned_20char___2c_20int__2c_20int__2c_20int__29(HEAP32[((HEAP32[($7 + 28 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0, $7 + 8 | 0 | 0, HEAP32[($7 + 20 | 0) >> 2] | 0 | 0, HEAP32[($7 + 16 | 0) >> 2] | 0 | 0, HEAP32[($7 + 12 | 0) >> 2] | 0 | 0);
  HEAP32[($7 + 4 | 0) >> 2] = Math_imul(Math_imul(HEAP32[(HEAP32[($7 + 20 | 0) >> 2] | 0) >> 2] | 0, HEAP32[(HEAP32[($7 + 16 | 0) >> 2] | 0) >> 2] | 0), HEAP32[(HEAP32[($7 + 12 | 0) >> 2] | 0) >> 2] | 0);
  __memcpy(HEAP32[($7 + 24 | 0) >> 2] | 0 | 0, HEAP32[($7 + 8 | 0) >> 2] | 0 | 0, HEAP32[($7 + 4 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $7 + 32 | 0;
  return;
 }
 
 function emscripten_bind_ImHelper_getTextureId_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $6 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $6 = ImHelper__getTextureId_28ImDrawCmd__29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $6 | 0;
 }
 
 function ImHelper__getTextureId_28ImDrawCmd__29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  HEAP32[($3 + 8 | 0) >> 2] = HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
  return HEAP32[($3 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function emscripten_bind_ImHelper_setIniFilename_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  ImHelper__setIniFilename_28ImGuiIO__2c_20char__29(HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function ImHelper__setIniFilename_28ImGuiIO__2c_20char__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return;
 }
 
 function emscripten_bind_ImHelper_removeIniFilename_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  ImHelper__removeIniFilename_28ImGuiIO__29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function ImHelper__removeIniFilename_28ImGuiIO__29($0) {
  $0 = $0 | 0;
  var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  (wasm2js_i32$0 = ImGui__GetIO_28_29() | 0, wasm2js_i32$1 = 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_ImHelper___destroy___0($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   operator_20delete_28void__29($4 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_Im_CreateContext_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = Im__CreateContext_28_29() | 0;
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function Im__CreateContext_28_29() {
  return ImGui__CreateContext_28ImFontAtlas__29(0 | 0) | 0 | 0;
 }
 
 function emscripten_bind_Im_Begin_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $8 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $8 = (Im__Begin_28char_20const__29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0) & 1 | 0;
  __stack_pointer = $4 + 16 | 0;
  return $8 | 0;
 }
 
 function Im__Begin_28char_20const__29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0, $8 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = 0;
  $8 = (ImGui__Begin_28char_20const__2c_20bool__2c_20int_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0, $5 | 0, $5 | 0) | 0) & 1 | 0;
  __stack_pointer = $3 + 16 | 0;
  return $8 | 0;
 }
 
 function emscripten_bind_Im_End_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  Im__End_28_29();
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function Im__End_28_29() {
  ImGui__End_28_29();
  return;
 }
 
 function emscripten_bind_Im_Render_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  Im__Render_28_29();
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function Im__Render_28_29() {
  ImGui__Render_28_29();
  return;
 }
 
 function emscripten_bind_Im_NewFrame_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  Im__NewFrame_28_29();
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function Im__NewFrame_28_29() {
  ImGui__NewFrame_28_29();
  return;
 }
 
 function emscripten_bind_Im_GetDrawData_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = Im__GetDrawData_28_29() | 0;
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function Im__GetDrawData_28_29() {
  return ImGui__GetDrawData_28_29() | 0 | 0;
 }
 
 function emscripten_bind_Im_GetIO_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = Im__GetIO_28_29() | 0;
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function Im__GetIO_28_29() {
  return ImGui__GetIO_28_29() | 0 | 0;
 }
 
 function emscripten_bind_Im_SetNextWindowSize_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  Im__SetNextWindowSize_28ImVec2_20const__2c_20int_29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0, 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function Im__SetNextWindowSize_28ImVec2_20const__2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  ImGui__SetNextWindowSize_28ImVec2_20const__2c_20int_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function emscripten_bind_Im_SetNextWindowSize_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  Im__SetNextWindowSize_28ImVec2_20const__2c_20int_29(HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function emscripten_bind_Im_ShowDemoWindow_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  Im__ShowDemoWindow_28bool__29(0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function Im__ShowDemoWindow_28bool__29($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return;
 }
 
 function emscripten_bind_Im_ShowDemoWindow_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  Im__ShowDemoWindow_28bool__29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function emscripten_bind_Im_Checkbox_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $10 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $10 = (Im__Checkbox_28char_20const__2c_20bool__29(HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0;
  __stack_pointer = $5 + 16 | 0;
  return $10 | 0;
 }
 
 function Im__Checkbox_28char_20const__2c_20bool__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $9 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $9 = (ImGui__Checkbox_28char_20const__2c_20bool__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0) & 1 | 0;
  __stack_pointer = $4 + 16 | 0;
  return $9 | 0;
 }
 
 function emscripten_bind_ImVec2_ImVec2_0() {
  var $1 = 0;
  $1 = operator_20new_28unsigned_20long_29(8 | 0) | 0;
  ImVec2__ImVec2_28_29($1 | 0) | 0;
  return $1 | 0;
 }
 
 function ImVec2__ImVec2_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAPF32[$4 >> 2] = Math_fround(0 | 0);
  HEAPF32[($4 + 4 | 0) >> 2] = Math_fround(0 | 0);
  return $4 | 0;
 }
 
 function emscripten_bind_ImVec2_ImVec2_2($0, $1) {
  $0 = Math_fround($0);
  $1 = Math_fround($1);
  var $4 = 0, $6 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAPF32[($4 + 12 | 0) >> 2] = $0;
  HEAPF32[($4 + 8 | 0) >> 2] = $1;
  $6 = operator_20new_28unsigned_20long_29(8 | 0) | 0;
  ImVec2__ImVec2_28float_2c_20float_29($6 | 0, Math_fround(Math_fround(HEAPF32[($4 + 12 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4 + 8 | 0) >> 2]))) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $6 | 0;
 }
 
 function ImVec2__ImVec2_28float_2c_20float_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = Math_fround($2);
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAPF32[($5 + 8 | 0) >> 2] = $1;
  HEAPF32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  HEAPF32[$6 >> 2] = Math_fround(HEAPF32[($5 + 8 | 0) >> 2]);
  HEAPF32[($6 + 4 | 0) >> 2] = Math_fround(HEAPF32[($5 + 4 | 0) >> 2]);
  return $6 | 0;
 }
 
 function emscripten_bind_ImVec2_get_x_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return Math_fround(Math_fround(HEAPF32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2]));
 }
 
 function emscripten_bind_ImVec2_set_x_1($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAPF32[($4 + 8 | 0) >> 2] = $1;
  HEAPF32[(HEAP32[($4 + 12 | 0) >> 2] | 0) >> 2] = Math_fround(HEAPF32[($4 + 8 | 0) >> 2]);
  return;
 }
 
 function emscripten_bind_ImVec2_get_y_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2]));
 }
 
 function emscripten_bind_ImVec2_set_y_1($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAPF32[($4 + 8 | 0) >> 2] = $1;
  HEAPF32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = Math_fround(HEAPF32[($4 + 8 | 0) >> 2]);
  return;
 }
 
 function emscripten_bind_ImVec2___destroy___0($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   operator_20delete_28void__29($4 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_ImVec4_ImVec4_0() {
  var $1 = 0;
  $1 = operator_20new_28unsigned_20long_29(16 | 0) | 0;
  ImVec4__ImVec4_28_29($1 | 0) | 0;
  return $1 | 0;
 }
 
 function ImVec4__ImVec4_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAPF32[$4 >> 2] = Math_fround(0 | 0);
  HEAPF32[($4 + 4 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4 + 8 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4 + 12 | 0) >> 2] = Math_fround(0 | 0);
  return $4 | 0;
 }
 
 function emscripten_bind_ImVec4_ImVec4_4($0, $1, $2, $3) {
  $0 = Math_fround($0);
  $1 = Math_fround($1);
  $2 = Math_fround($2);
  $3 = Math_fround($3);
  var $6 = 0, $8 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  HEAPF32[($6 + 12 | 0) >> 2] = $0;
  HEAPF32[($6 + 8 | 0) >> 2] = $1;
  HEAPF32[($6 + 4 | 0) >> 2] = $2;
  HEAPF32[$6 >> 2] = $3;
  $8 = operator_20new_28unsigned_20long_29(16 | 0) | 0;
  ImVec4__ImVec4_28float_2c_20float_2c_20float_2c_20float_29($8 | 0, Math_fround(Math_fround(HEAPF32[($6 + 12 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6 + 8 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6 + 4 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[$6 >> 2]))) | 0;
  __stack_pointer = $6 + 16 | 0;
  return $8 | 0;
 }
 
 function ImVec4__ImVec4_28float_2c_20float_2c_20float_2c_20float_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = Math_fround($2);
  $3 = Math_fround($3);
  $4 = Math_fround($4);
  var $7 = 0, $8 = 0;
  $7 = __stack_pointer - 32 | 0;
  HEAP32[($7 + 28 | 0) >> 2] = $0;
  HEAPF32[($7 + 24 | 0) >> 2] = $1;
  HEAPF32[($7 + 20 | 0) >> 2] = $2;
  HEAPF32[($7 + 16 | 0) >> 2] = $3;
  HEAPF32[($7 + 12 | 0) >> 2] = $4;
  $8 = HEAP32[($7 + 28 | 0) >> 2] | 0;
  HEAPF32[$8 >> 2] = Math_fround(HEAPF32[($7 + 24 | 0) >> 2]);
  HEAPF32[($8 + 4 | 0) >> 2] = Math_fround(HEAPF32[($7 + 20 | 0) >> 2]);
  HEAPF32[($8 + 8 | 0) >> 2] = Math_fround(HEAPF32[($7 + 16 | 0) >> 2]);
  HEAPF32[($8 + 12 | 0) >> 2] = Math_fround(HEAPF32[($7 + 12 | 0) >> 2]);
  return $8 | 0;
 }
 
 function emscripten_bind_ImVec4_get_x_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return Math_fround(Math_fround(HEAPF32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2]));
 }
 
 function emscripten_bind_ImVec4_set_x_1($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAPF32[($4 + 8 | 0) >> 2] = $1;
  HEAPF32[(HEAP32[($4 + 12 | 0) >> 2] | 0) >> 2] = Math_fround(HEAPF32[($4 + 8 | 0) >> 2]);
  return;
 }
 
 function emscripten_bind_ImVec4_get_y_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2]));
 }
 
 function emscripten_bind_ImVec4_set_y_1($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAPF32[($4 + 8 | 0) >> 2] = $1;
  HEAPF32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = Math_fround(HEAPF32[($4 + 8 | 0) >> 2]);
  return;
 }
 
 function emscripten_bind_ImVec4_get_z_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2]));
 }
 
 function emscripten_bind_ImVec4_set_z_1($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAPF32[($4 + 8 | 0) >> 2] = $1;
  HEAPF32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = Math_fround(HEAPF32[($4 + 8 | 0) >> 2]);
  return;
 }
 
 function emscripten_bind_ImVec4_get_w_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2]));
 }
 
 function emscripten_bind_ImVec4_set_w_1($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAPF32[($4 + 8 | 0) >> 2] = $1;
  HEAPF32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] = Math_fround(HEAPF32[($4 + 8 | 0) >> 2]);
  return;
 }
 
 function emscripten_bind_ImVec4___destroy___0($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   operator_20delete_28void__29($4 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_VecCmdBuffer_size_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = ImVector_ImDrawCmd___size_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function ImVector_ImDrawCmd___size_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function emscripten_bind_VecCmdBuffer_get_Data_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0;
 }
 
 function emscripten_bind_VecCmdBuffer_set_Data_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return;
 }
 
 function emscripten_bind_VecCmdBuffer___destroy___0($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   ImVector_ImDrawCmd____ImVector_28_29($4 | 0) | 0;
   operator_20delete_28void__29($4 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function ImVector_ImDrawCmd____ImVector_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $13 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $4;
  label$1 : {
   if (!((HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   ImGui__MemFree_28void__29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  }
  $13 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $13 | 0;
 }
 
 function emscripten_bind_VecIdxBuffer_size_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = ImVector_unsigned_20short___size_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function ImVector_unsigned_20short___size_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function emscripten_bind_VecIdxBuffer_get_Data_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  return (HEAPU16[((HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($4 + 8 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) & 65535 | 0 | 0;
 }
 
 function emscripten_bind_VecIdxBuffer_set_Data_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP16[($5 + 6 | 0) >> 1] = $2;
  HEAP16[((HEAP32[((HEAP32[($5 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($5 + 8 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] = HEAPU16[($5 + 6 | 0) >> 1] | 0;
  return;
 }
 
 function emscripten_bind_VecIdxBuffer___destroy___0($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   ImVector_unsigned_20short____ImVector_28_29($4 | 0) | 0;
   operator_20delete_28void__29($4 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function ImVector_unsigned_20short____ImVector_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $13 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $4;
  label$1 : {
   if (!((HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   ImGui__MemFree_28void__29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  }
  $13 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $13 | 0;
 }
 
 function emscripten_bind_VecVtxBuffer_size_0($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = ImVector_ImDrawVert___size_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function ImVector_ImDrawVert___size_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function emscripten_bind_VecVtxBuffer_get_Data_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0;
 }
 
 function emscripten_bind_VecVtxBuffer_set_Data_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return;
 }
 
 function emscripten_bind_VecVtxBuffer___destroy___0($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   ImVector_ImDrawVert____ImVector_28_29($4 | 0) | 0;
   operator_20delete_28void__29($4 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function ImVector_ImDrawVert____ImVector_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $13 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $4;
  label$1 : {
   if (!((HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   ImGui__MemFree_28void__29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  }
  $13 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $13 | 0;
 }
 
 function emscripten_bind_ImDrawCmd_get_ClipRect_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function emscripten_bind_ImDrawCmd_set_ClipRect_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4 = 0, $6 = 0, $8 = 0, $27 = 0, $37 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $6 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  i64toi32_i32$2 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $27 = i64toi32_i32$0;
  i64toi32_i32$0 = $6;
  HEAP32[i64toi32_i32$0 >> 2] = $27;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $8 = 8;
  i64toi32_i32$2 = i64toi32_i32$2 + $8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $37 = i64toi32_i32$1;
  i64toi32_i32$1 = $6 + $8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $37;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  return;
 }
 
 function emscripten_bind_ImDrawCmd_get_VtxOffset_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0;
 }
 
 function emscripten_bind_ImDrawCmd_set_VtxOffset_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return;
 }
 
 function emscripten_bind_ImDrawCmd_get_IdxOffset_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0;
 }
 
 function emscripten_bind_ImDrawCmd_set_IdxOffset_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return;
 }
 
 function emscripten_bind_ImDrawCmd_get_ElemCount_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0;
 }
 
 function emscripten_bind_ImDrawCmd_set_ElemCount_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 28 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return;
 }
 
 function emscripten_bind_ImDrawCmd_get_TextureId_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0;
 }
 
 function emscripten_bind_ImDrawCmd_set_TextureId_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return;
 }
 
 function emscripten_bind_ImDrawCmd___destroy___0($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   operator_20delete_28void__29($4 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_ImDrawVert_get_pos_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function emscripten_bind_ImDrawVert_set_pos_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $23 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  i64toi32_i32$2 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $23 = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $23;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  return;
 }
 
 function emscripten_bind_ImDrawVert_get_uv_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return (HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0 | 0;
 }
 
 function emscripten_bind_ImDrawVert_set_uv_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $28 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  i64toi32_i32$2 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $28 = i64toi32_i32$0;
  i64toi32_i32$0 = (HEAP32[($4 + 12 | 0) >> 2] | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $28;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  return;
 }
 
 function emscripten_bind_ImDrawVert_get_col_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0;
 }
 
 function emscripten_bind_ImDrawVert_set_col_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return;
 }
 
 function emscripten_bind_ImDrawVert___destroy___0($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   operator_20delete_28void__29($4 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_ImDrawData_get_CmdListsCount_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function emscripten_bind_ImDrawData_set_CmdListsCount_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return;
 }
 
 function emscripten_bind_ImDrawData_get_TotalIdxCount_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0;
 }
 
 function emscripten_bind_ImDrawData_set_TotalIdxCount_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return;
 }
 
 function emscripten_bind_ImDrawData_get_TotalVtxCount_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0;
 }
 
 function emscripten_bind_ImDrawData_set_TotalVtxCount_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return;
 }
 
 function emscripten_bind_ImDrawData_get_CmdLists_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  return HEAP32[((HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + ((HEAP32[($4 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function emscripten_bind_ImDrawData_set_CmdLists_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  HEAP32[((HEAP32[((HEAP32[($5 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + ((HEAP32[($5 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($5 + 4 | 0) >> 2] | 0;
  return;
 }
 
 function emscripten_bind_ImDrawData_get_DisplayPos_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return (HEAP32[($3 + 12 | 0) >> 2] | 0) + 20 | 0 | 0;
 }
 
 function emscripten_bind_ImDrawData_set_DisplayPos_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $28 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  i64toi32_i32$2 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $28 = i64toi32_i32$0;
  i64toi32_i32$0 = (HEAP32[($4 + 12 | 0) >> 2] | 0) + 20 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $28;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  return;
 }
 
 function emscripten_bind_ImDrawData_get_DisplaySize_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return (HEAP32[($3 + 12 | 0) >> 2] | 0) + 28 | 0 | 0;
 }
 
 function emscripten_bind_ImDrawData_set_DisplaySize_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $28 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  i64toi32_i32$2 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $28 = i64toi32_i32$0;
  i64toi32_i32$0 = (HEAP32[($4 + 12 | 0) >> 2] | 0) + 28 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $28;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  return;
 }
 
 function emscripten_bind_ImDrawData_get_FramebufferScale_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return (HEAP32[($3 + 12 | 0) >> 2] | 0) + 36 | 0 | 0;
 }
 
 function emscripten_bind_ImDrawData_set_FramebufferScale_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $28 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  i64toi32_i32$2 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $28 = i64toi32_i32$0;
  i64toi32_i32$0 = (HEAP32[($4 + 12 | 0) >> 2] | 0) + 36 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $28;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  return;
 }
 
 function emscripten_bind_ImDrawData___destroy___0($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   operator_20delete_28void__29($4 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_bind_ImDrawList_get_CmdBuffer_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function emscripten_bind_ImDrawList_set_CmdBuffer_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  ImVector_ImDrawCmd___operator__28ImVector_ImDrawCmd__20const__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function ImVector_ImDrawCmd___operator__28ImVector_ImDrawCmd__20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  ImVector_ImDrawCmd___clear_28_29($5 | 0);
  ImVector_ImDrawCmd___resize_28int_29($5 | 0, HEAP32[(HEAP32[($4 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0);
  label$1 : {
   if (!((HEAP32[((HEAP32[($4 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   __memcpy(HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($4 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[$5 >> 2] | 0, 40) | 0) | 0;
  }
  __stack_pointer = $4 + 16 | 0;
  return $5 | 0;
 }
 
 function ImVector_ImDrawCmd___clear_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($4 + 4 | 0) >> 2] = 0;
   HEAP32[$4 >> 2] = 0;
   ImGui__MemFree_28void__29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
   HEAP32[($4 + 8 | 0) >> 2] = 0;
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function ImVector_ImDrawCmd___resize_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) > (HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$1
   }
   ImVector_ImDrawCmd___reserve_28int_29($5 | 0, ImVector_ImDrawCmd____grow_capacity_28int_29_20const($5 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  }
  HEAP32[$5 >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function emscripten_bind_ImDrawList_get_IdxBuffer_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return (HEAP32[($3 + 12 | 0) >> 2] | 0) + 12 | 0 | 0;
 }
 
 function emscripten_bind_ImDrawList_set_IdxBuffer_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  ImVector_unsigned_20short___operator__28ImVector_unsigned_20short__20const__29((HEAP32[($4 + 12 | 0) >> 2] | 0) + 12 | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function ImVector_unsigned_20short___operator__28ImVector_unsigned_20short__20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  ImVector_unsigned_20short___clear_28_29($5 | 0);
  ImVector_unsigned_20short___resize_28int_29($5 | 0, HEAP32[(HEAP32[($4 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0);
  label$1 : {
   if (!((HEAP32[((HEAP32[($4 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   __memcpy(HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($4 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, (HEAP32[$5 >> 2] | 0) << 1 | 0 | 0) | 0;
  }
  __stack_pointer = $4 + 16 | 0;
  return $5 | 0;
 }
 
 function ImVector_unsigned_20short___clear_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($4 + 4 | 0) >> 2] = 0;
   HEAP32[$4 >> 2] = 0;
   ImGui__MemFree_28void__29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
   HEAP32[($4 + 8 | 0) >> 2] = 0;
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function ImVector_unsigned_20short___resize_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) > (HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$1
   }
   ImVector_unsigned_20short___reserve_28int_29($5 | 0, ImVector_unsigned_20short____grow_capacity_28int_29_20const($5 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  }
  HEAP32[$5 >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function emscripten_bind_ImDrawList_get_VtxBuffer_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return (HEAP32[($3 + 12 | 0) >> 2] | 0) + 24 | 0 | 0;
 }
 
 function emscripten_bind_ImDrawList_set_VtxBuffer_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  ImVector_ImDrawVert___operator__28ImVector_ImDrawVert__20const__29((HEAP32[($4 + 12 | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function ImVector_ImDrawVert___operator__28ImVector_ImDrawVert__20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  ImVector_ImDrawVert___clear_28_29($5 | 0);
  ImVector_ImDrawVert___resize_28int_29($5 | 0, HEAP32[(HEAP32[($4 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0);
  label$1 : {
   if (!((HEAP32[((HEAP32[($4 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   __memcpy(HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($4 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[$5 >> 2] | 0, 20) | 0) | 0;
  }
  __stack_pointer = $4 + 16 | 0;
  return $5 | 0;
 }
 
 function ImVector_ImDrawVert___clear_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($4 + 4 | 0) >> 2] = 0;
   HEAP32[$4 >> 2] = 0;
   ImGui__MemFree_28void__29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
   HEAP32[($4 + 8 | 0) >> 2] = 0;
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function ImVector_ImDrawVert___resize_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) > (HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$1
   }
   ImVector_ImDrawVert___reserve_28int_29($5 | 0, ImVector_ImDrawVert____grow_capacity_28int_29_20const($5 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  }
  HEAP32[$5 >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function emscripten_bind_ImDrawList___destroy___0($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   ImDrawList___ImDrawList_28_29($4 | 0) | 0;
   operator_20delete_28void__29($4 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function ImDrawList___ImDrawList_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  ImDrawList___ClearFreeMemory_28_29($4 | 0);
  ImDrawListSplitter___ImDrawListSplitter_28_29($4 + 120 | 0 | 0) | 0;
  ImVector_ImVec2____ImVector_28_29($4 + 84 | 0 | 0) | 0;
  ImVector_void_____ImVector_28_29($4 + 72 | 0 | 0) | 0;
  ImVector_ImVec4____ImVector_28_29($4 + 60 | 0 | 0) | 0;
  ImVector_ImDrawVert____ImVector_28_29($4 + 24 | 0 | 0) | 0;
  ImVector_unsigned_20short____ImVector_28_29($4 + 12 | 0 | 0) | 0;
  ImVector_ImDrawCmd____ImVector_28_29($4 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function ImDrawListSplitter___ImDrawListSplitter_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  ImDrawListSplitter__ClearFreeMemory_28_29($4 | 0);
  ImVector_ImDrawChannel____ImVector_28_29($4 + 8 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function ImVector_ImVec2____ImVector_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $13 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $4;
  label$1 : {
   if (!((HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   ImGui__MemFree_28void__29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  }
  $13 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $13 | 0;
 }
 
 function ImVector_void_____ImVector_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $13 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $4;
  label$1 : {
   if (!((HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   ImGui__MemFree_28void__29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  }
  $13 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $13 | 0;
 }
 
 function ImVector_ImVec4____ImVector_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $13 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $4;
  label$1 : {
   if (!((HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   ImGui__MemFree_28void__29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  }
  $13 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $13 | 0;
 }
 
 function emscripten_bind_ImGuiIO_AddMouseWheelEvent_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = Math_fround($2);
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAPF32[($5 + 8 | 0) >> 2] = $1;
  HEAPF32[($5 + 4 | 0) >> 2] = $2;
  ImGuiIO__AddMouseWheelEvent_28float_2c_20float_29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($5 + 8 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5 + 4 | 0) >> 2])));
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function emscripten_bind_ImGuiIO_AddMouseButtonEvent_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP8[($5 + 7 | 0) >> 0] = $2;
  ImGuiIO__AddMouseButtonEvent_28int_2c_20bool_29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, (HEAPU8[($5 + 7 | 0) >> 0] | 0) & 1 | 0 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function emscripten_bind_ImGuiIO_AddMousePosEvent_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = Math_fround($2);
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAPF32[($5 + 8 | 0) >> 2] = $1;
  HEAPF32[($5 + 4 | 0) >> 2] = $2;
  ImGuiIO__AddMousePosEvent_28float_2c_20float_29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($5 + 8 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5 + 4 | 0) >> 2])));
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function emscripten_bind_ImGuiIO_AddKeyEvent_2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP8[($5 + 7 | 0) >> 0] = $2;
  ImGuiIO__AddKeyEvent_28ImGuiKey_2c_20bool_29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, (HEAPU8[($5 + 7 | 0) >> 0] | 0) & 1 | 0 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function emscripten_bind_ImGuiIO_AddInputCharacter_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  ImGuiIO__AddInputCharacter_28unsigned_20int_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function emscripten_bind_ImGuiIO_get_WantCaptureMouse_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return (HEAPU8[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 148 | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function emscripten_bind_ImGuiIO_set_WantCaptureMouse_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP8[($4 + 11 | 0) >> 0] = $1;
  HEAP8[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 148 | 0) >> 0] = (HEAPU8[($4 + 11 | 0) >> 0] | 0) & 1 | 0;
  return;
 }
 
 function emscripten_bind_ImGuiIO_get_DisplaySize_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return (HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0 | 0;
 }
 
 function emscripten_bind_ImGuiIO_set_DisplaySize_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $28 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  i64toi32_i32$2 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $28 = i64toi32_i32$0;
  i64toi32_i32$0 = (HEAP32[($4 + 12 | 0) >> 2] | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $28;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  return;
 }
 
 function emscripten_bind_ImGuiIO_get_DisplayFramebufferScale_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return (HEAP32[($3 + 12 | 0) >> 2] | 0) + 80 | 0 | 0;
 }
 
 function emscripten_bind_ImGuiIO_set_DisplayFramebufferScale_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $28 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  i64toi32_i32$2 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $28 = i64toi32_i32$0;
  i64toi32_i32$0 = (HEAP32[($4 + 12 | 0) >> 2] | 0) + 80 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $28;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  return;
 }
 
 function emscripten_bind_ImGuiIO_get_DeltaTime_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2]));
 }
 
 function emscripten_bind_ImGuiIO_set_DeltaTime_1($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAPF32[($4 + 8 | 0) >> 2] = $1;
  HEAPF32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] = Math_fround(HEAPF32[($4 + 8 | 0) >> 2]);
  return;
 }
 
 function emscripten_bind_ImGuiIO_get_Fonts_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0;
 }
 
 function emscripten_bind_ImGuiIO_set_Fonts_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 64 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return;
 }
 
 function emscripten_bind_ImGuiIO___destroy___0($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   ImGuiIO___ImGuiIO_28_29($4 | 0) | 0;
   operator_20delete_28void__29($4 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function ImGuiIO___ImGuiIO_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  ImVector_unsigned_20short____ImVector_28_29($4 + 14232 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function emscripten_bind_ImFontAtlas_get_TexID_0($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function emscripten_bind_ImFontAtlas_set_TexID_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[((HEAP32[($4 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return;
 }
 
 function emscripten_bind_ImFontAtlas___destroy___0($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   ImFontAtlas___ImFontAtlas_28_29($4 | 0) | 0;
   operator_20delete_28void__29($4 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function emscripten_enum_ImGuiKey_ImGuiKey_None() {
  return 0 | 0;
 }
 
 function ImVector_ImDrawChannel____ImVector_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $13 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $4;
  label$1 : {
   if (!((HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   ImGui__MemFree_28void__29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  }
  $13 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $13 | 0;
 }
 
 function ImVector_ImDrawCmd____grow_capacity_28int_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $12 = 0, $23 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(HEAP32[($5 + 4 | 0) >> 2] | 0)) {
     break label$2
    }
    $12 = (HEAP32[($5 + 4 | 0) >> 2] | 0) + ((HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) / (2 | 0) | 0) | 0;
    break label$1;
   }
   $12 = 8;
  }
  HEAP32[($4 + 4 | 0) >> 2] = $12;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) > (HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$4
    }
    $23 = HEAP32[($4 + 4 | 0) >> 2] | 0;
    break label$3;
   }
   $23 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  }
  return $23 | 0;
 }
 
 function ImVector_ImDrawCmd___reserve_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) <= (HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   (wasm2js_i32$0 = $4, wasm2js_i32$1 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul(HEAP32[($4 + 8 | 0) >> 2] | 0, 40) | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
   label$3 : {
    if (!((HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    __memcpy(HEAP32[($4 + 4 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[$5 >> 2] | 0, 40) | 0) | 0;
    ImGui__MemFree_28void__29(HEAP32[($5 + 8 | 0) >> 2] | 0 | 0);
   }
   HEAP32[($5 + 8 | 0) >> 2] = HEAP32[($4 + 4 | 0) >> 2] | 0;
   HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  }
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function ImVector_unsigned_20short____grow_capacity_28int_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $12 = 0, $23 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(HEAP32[($5 + 4 | 0) >> 2] | 0)) {
     break label$2
    }
    $12 = (HEAP32[($5 + 4 | 0) >> 2] | 0) + ((HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) / (2 | 0) | 0) | 0;
    break label$1;
   }
   $12 = 8;
  }
  HEAP32[($4 + 4 | 0) >> 2] = $12;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) > (HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$4
    }
    $23 = HEAP32[($4 + 4 | 0) >> 2] | 0;
    break label$3;
   }
   $23 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  }
  return $23 | 0;
 }
 
 function ImVector_unsigned_20short___reserve_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) <= (HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   (wasm2js_i32$0 = $4, wasm2js_i32$1 = ImGui__MemAlloc_28unsigned_20long_29((HEAP32[($4 + 8 | 0) >> 2] | 0) << 1 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
   label$3 : {
    if (!((HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    __memcpy(HEAP32[($4 + 4 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, (HEAP32[$5 >> 2] | 0) << 1 | 0 | 0) | 0;
    ImGui__MemFree_28void__29(HEAP32[($5 + 8 | 0) >> 2] | 0 | 0);
   }
   HEAP32[($5 + 8 | 0) >> 2] = HEAP32[($4 + 4 | 0) >> 2] | 0;
   HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  }
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function ImVector_ImDrawVert____grow_capacity_28int_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $12 = 0, $23 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(HEAP32[($5 + 4 | 0) >> 2] | 0)) {
     break label$2
    }
    $12 = (HEAP32[($5 + 4 | 0) >> 2] | 0) + ((HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) / (2 | 0) | 0) | 0;
    break label$1;
   }
   $12 = 8;
  }
  HEAP32[($4 + 4 | 0) >> 2] = $12;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) > (HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$4
    }
    $23 = HEAP32[($4 + 4 | 0) >> 2] | 0;
    break label$3;
   }
   $23 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  }
  return $23 | 0;
 }
 
 function ImVector_ImDrawVert___reserve_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) <= (HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   (wasm2js_i32$0 = $4, wasm2js_i32$1 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul(HEAP32[($4 + 8 | 0) >> 2] | 0, 20) | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
   label$3 : {
    if (!((HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    __memcpy(HEAP32[($4 + 4 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[$5 >> 2] | 0, 20) | 0) | 0;
    ImGui__MemFree_28void__29(HEAP32[($5 + 8 | 0) >> 2] | 0 | 0);
   }
   HEAP32[($5 + 8 | 0) >> 2] = HEAP32[($4 + 4 | 0) >> 2] | 0;
   HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  }
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function ImGuiStyle__ImGuiStyle_28_29($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  memset($0 + 200 | 0 | 0, 0 | 0, 880 | 0) | 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 1050253722;
  HEAP32[(i64toi32_i32$1 + 192 | 0) >> 2] = 1067450368;
  HEAP32[(i64toi32_i32$1 + 196 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 190 | 0) >> 0] = 1;
  HEAP16[(i64toi32_i32$1 + 188 | 0) >> 1] = 257;
  i64toi32_i32$1 = i64toi32_i32$1 + 180 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1077936128;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 172 | 0;
  i64toi32_i32$0 = 1077936128;
  HEAP32[i64toi32_i32$1 >> 2] = 1100480512;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 164 | 0;
  i64toi32_i32$0 = 1100480512;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 156 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 1056964608;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 1056964608;
  HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] = 1;
  HEAP32[(i64toi32_i32$1 + 152 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 140 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1082130432;
  HEAP32[(i64toi32_i32$1 + 132 | 0) >> 2] = 1082130432;
  HEAP32[(i64toi32_i32$1 + 136 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = 1094713344;
  HEAP32[(i64toi32_i32$1 + 128 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1091567616;
  HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] = 1096810496;
  HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1086324736;
  HEAP32[(i64toi32_i32$1 + 108 | 0) >> 2] = 1101529088;
  HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 100 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 104 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1073741824;
  HEAP32[(i64toi32_i32$1 + 92 | 0) >> 2] = 1082130432;
  HEAP32[(i64toi32_i32$1 + 96 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1082130432;
  HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] = 1082130432;
  HEAP32[(i64toi32_i32$1 + 88 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1082130432;
  HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = 1090519040;
  HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1077936128;
  HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] = 1082130432;
  HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = 0;
  i64toi32_i32$0 = 1056964608;
  HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1107296256;
  HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = 1107296256;
  HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1090519040;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 1090519040;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1058642330;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  ImGui__StyleColorsDark_28ImGuiStyle__29(i64toi32_i32$1 | 0);
  return i64toi32_i32$1 | 0;
 }
 
 function ImGuiIO__ImGuiIO_28_29($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2 = 0, $1 = 0, $3 = 0, $6 = 0, $7 = 0;
  $1 = 0;
  $2 = memset($0 | 0, 0 | 0, 14248 | 0) | 0;
  i64toi32_i32$1 = $2;
  i64toi32_i32$0 = 1086324736;
  HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = 1050253722;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 65690;
  HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = 66849;
  i64toi32_i32$0 = 1084227584;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = 1015580809;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = -1082130432;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = -1082130432;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  memset(i64toi32_i32$1 + 188 | 0 | 0, 255 | 0, 2608 | 0) | 0;
  HEAP32[(i64toi32_i32$1 + 88 | 0) >> 2] = 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 72 | 0) >> 0] = 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1036831949;
  HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] = 1050253722;
  HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1028443341;
  HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] = 1049414861;
  HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = i64toi32_i32$0;
  HEAP16[(i64toi32_i32$1 + 92 | 0) >> 1] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 108 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 104 | 0) >> 2] = 1114636288;
  $6 = 256;
  HEAP8[(i64toi32_i32$1 + 101 | 0) >> 0] = $6;
  HEAP8[(i64toi32_i32$1 + 102 | 0) >> 0] = $6 >>> 8 | 0;
  HEAP16[(i64toi32_i32$1 + 98 | 0) >> 1] = 257;
  HEAP8[(i64toi32_i32$1 + 96 | 0) >> 0] = 0;
  HEAP8[(i64toi32_i32$1 + 94 | 0) >> 0] = 1;
  i64toi32_i32$1 = i64toi32_i32$1 + 116 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($2 + 124 | 0) >> 2] = 0;
  i64toi32_i32$1 = $2;
  i64toi32_i32$0 = -8388609;
  HEAP32[(i64toi32_i32$1 + 13984 | 0) >> 2] = -8388609;
  HEAP32[(i64toi32_i32$1 + 13988 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = -8388609;
  HEAP32[(i64toi32_i32$1 + 3512 | 0) >> 2] = -8388609;
  HEAP32[(i64toi32_i32$1 + 3516 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 140 | 0) >> 2] = 1;
  HEAP32[(i64toi32_i32$1 + 132 | 0) >> 2] = 2;
  HEAP32[(i64toi32_i32$1 + 128 | 0) >> 2] = 3;
  i64toi32_i32$0 = -1082130432;
  HEAP32[(i64toi32_i32$1 + 14140 | 0) >> 2] = -1082130432;
  HEAP32[(i64toi32_i32$1 + 14144 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = 1086324736;
  i64toi32_i32$0 = -1082130432;
  HEAP32[(i64toi32_i32$1 + 14120 | 0) >> 2] = -1082130432;
  HEAP32[(i64toi32_i32$1 + 14124 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 14148 | 0;
  i64toi32_i32$0 = -1082130432;
  HEAP32[i64toi32_i32$1 >> 2] = -1082130432;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2 + 14128 | 0;
  i64toi32_i32$0 = -1082130432;
  HEAP32[i64toi32_i32$1 >> 2] = -1082130432;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($2 + 14156 | 0) >> 2] = -1082130432;
  HEAP32[($2 + 14136 | 0) >> 2] = -1082130432;
  $0 = $2 + 3548 | 0;
  label$1 : while (1) {
   $3 = $1 << 4 | 0;
   i64toi32_i32$1 = $0 + $3 | 0;
   i64toi32_i32$0 = -1082130432;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = -1082130432;
   HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $0 + ($3 | 16 | 0) | 0;
   i64toi32_i32$0 = -1082130432;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = -1082130432;
   HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $0 + ($3 | 32 | 0) | 0;
   i64toi32_i32$0 = -1082130432;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = -1082130432;
   HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $0 + ($3 | 48 | 0) | 0;
   i64toi32_i32$0 = -1082130432;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = -1082130432;
   HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
   $1 = $1 + 4 | 0;
   if (($1 | 0) != (652 | 0)) {
    continue label$1
   }
   break label$1;
  };
  HEAP8[($2 + 14227 | 0) >> 0] = 1;
  $7 = 65281;
  HEAP8[($2 + 14225 | 0) >> 0] = $7;
  HEAP8[($2 + 14226 | 0) >> 0] = $7 >>> 8 | 0;
  return $2 | 0;
 }
 
 function SetPlatformImeDataFn_DefaultImpl_28ImGuiViewport__2c_20ImGuiPlatformImeData__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
 }
 
 function SetClipboardTextFn_DefaultImpl_28void__2c_20char_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $6 = 0, $2 = 0, $4 = 0, $7 = 0, $5 = 0, $8 = 0;
  $2 = 0;
  label$1 : {
   $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $4 = HEAP32[($3 + 23284 | 0) >> 2] | 0;
   if (!$4) {
    break label$1
   }
   HEAP32[($3 + 23276 | 0) >> 2] = 0;
   HEAP32[($3 + 23280 | 0) >> 2] = 0;
   $5 = $3 + 184 | 0;
   HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1 | 0;
   FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($4, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   HEAP32[($3 + 23284 | 0) >> 2] = 0;
  }
  $4 = strlen($1 | 0) | 0;
  $5 = $4 + 1 | 0;
  label$2 : {
   $6 = HEAP32[($3 + 23280 | 0) >> 2] | 0;
   if (($6 | 0) > ($4 | 0)) {
    break label$2
   }
   label$3 : {
    label$4 : {
     if ($6) {
      break label$4
     }
     $7 = 8;
     break label$3;
    }
    $7 = (($6 | 0) / (2 | 0) | 0) + $6 | 0;
   }
   $7 = ($7 | 0) > ($5 | 0) ? $7 : $5;
   if (($6 | 0) >= ($7 | 0)) {
    break label$2
   }
   label$5 : {
    $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$2) {
     break label$5
    }
    $2 = $2 + 184 | 0;
    HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1 | 0;
   }
   $2 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($7, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$6 : {
    $6 = HEAP32[($3 + 23284 | 0) >> 2] | 0;
    if (!$6) {
     break label$6
    }
    __memcpy($2 | 0, $6 | 0, HEAP32[($3 + 23276 | 0) >> 2] | 0 | 0) | 0;
    label$7 : {
     $6 = HEAP32[($3 + 23284 | 0) >> 2] | 0;
     if (!$6) {
      break label$7
     }
     $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$8) {
      break label$7
     }
     $8 = $8 + 184 | 0;
     HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($6, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($3 + 23280 | 0) >> 2] = $7;
   HEAP32[($3 + 23284 | 0) >> 2] = $2;
  }
  HEAP32[($3 + 23276 | 0) >> 2] = $5;
  __memcpy($2 | 0, $1 | 0, $4 | 0) | 0;
  HEAP8[((HEAP32[($3 + 23284 | 0) >> 2] | 0) + $4 | 0) >> 0] = 0;
 }
 
 function GetClipboardTextFn_DefaultImpl_28void__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = 0;
  label$1 : {
   $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   if (!(HEAP32[($2 + 23276 | 0) >> 2] | 0)) {
    break label$1
   }
   $1 = HEAP32[($2 + 23284 | 0) >> 2] | 0;
  }
  return $1 | 0;
 }
 
 function ImGuiIO__AddInputCharacter_28unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $4 = 0, $3 = 0, $5 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   if (!$1) {
    break label$1
   }
   if (!((HEAPU8[($0 + 14225 | 0) >> 0] | 0) & 255 | 0)) {
    break label$1
   }
   label$2 : {
    $0 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    $2 = HEAP32[($0 + 14372 | 0) >> 2] | 0;
    if (($2 | 0) != (HEAP32[($0 + 14376 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    $3 = $2 + 1 | 0;
    label$3 : {
     label$4 : {
      if ($2) {
       break label$4
      }
      $4 = 8;
      break label$3;
     }
     $4 = (($2 | 0) / (2 | 0) | 0) + $2 | 0;
    }
    $3 = ($4 | 0) > ($3 | 0) ? $4 : $3;
    if (($2 | 0) >= ($3 | 0)) {
     break label$2
    }
    $2 = $0 + 184 | 0;
    HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1 | 0;
    $2 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](Math_imul($3, 24), HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
    label$5 : {
     $4 = HEAP32[($0 + 14380 | 0) >> 2] | 0;
     if (!$4) {
      break label$5
     }
     __memcpy($2 | 0, $4 | 0, Math_imul(HEAP32[($0 + 14372 | 0) >> 2] | 0, 24) | 0) | 0;
     label$6 : {
      $4 = HEAP32[($0 + 14380 | 0) >> 2] | 0;
      if (!$4) {
       break label$6
      }
      $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$5) {
       break label$6
      }
      $5 = $5 + 184 | 0;
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1 | 0;
     }
     FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($4, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    }
    HEAP32[($0 + 14376 | 0) >> 2] = $3;
    HEAP32[($0 + 14380 | 0) >> 2] = $2;
    $2 = HEAP32[($0 + 14372 | 0) >> 2] | 0;
   }
   $2 = (HEAP32[($0 + 14380 | 0) >> 2] | 0) + Math_imul($2, 24) | 0;
   i64toi32_i32$0 = 0;
   HEAP32[($2 + 12 | 0) >> 2] = 0;
   HEAP32[($2 + 16 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($2 + 8 | 0) >> 2] = $1;
   i64toi32_i32$0 = 2;
   HEAP32[$2 >> 2] = 6;
   HEAP32[($2 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($2 + 20 | 0) >> 2] = 0;
   HEAP32[($0 + 14372 | 0) >> 2] = (HEAP32[($0 + 14372 | 0) >> 2] | 0) + 1 | 0;
  }
 }
 
 function ImTextCharFromUtf8_28unsigned_20int__2c_20char_20const__2c_20char_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $6 = 0, $4 = 0, $5 = 0, $8 = 0, $3 = 0, $7 = 0, $9 = 0;
  $3 = 0;
  label$1 : {
   $4 = $1 + 1 | 0;
   $5 = HEAPU8[$1 >> 0] | 0;
   $6 = $5 >>> 3 | 0;
   $7 = HEAP8[($6 + 71552 | 0) >> 0] | 0;
   $8 = ((-2130771968 >>> $6 | 0) & 1 | 0) + $7 | 0;
   $6 = $2 ? $2 : $1 + $8 | 0;
   if ($4 >>> 0 >= $6 >>> 0) {
    break label$1
   }
   $3 = HEAPU8[$4 >> 0] | 0;
  }
  $4 = $6 >>> 0 > $1 >>> 0;
  $2 = 0;
  label$2 : {
   $9 = $1 + 2 | 0;
   if ($9 >>> 0 >= $6 >>> 0) {
    break label$2
   }
   $2 = HEAPU8[$9 >> 0] | 0;
  }
  $4 = $4 ? $5 : 0;
  $5 = 0;
  label$3 : {
   $1 = $1 + 3 | 0;
   if ($1 >>> 0 >= $6 >>> 0) {
    break label$3
   }
   $5 = HEAPU8[$1 >> 0] | 0;
  }
  $1 = $7 << 2 | 0;
  $6 = (((HEAP32[($1 + 71584 | 0) >> 2] | 0) & $4 | 0) << 18 | 0 | (($3 << 12 | 0) & 258048 | 0) | 0 | (($2 << 6 | 0) & 4032 | 0) | 0 | ($5 & 63 | 0) | 0) >>> (HEAP32[($1 + 71648 | 0) >> 2] | 0) | 0;
  HEAP32[$0 >> 2] = $6;
  label$4 : {
   if (!(((($2 >>> 4 | 0) & 12 | 0 | (($3 >>> 2 | 0) & 48 | 0) | 0 | (($5 & 192 | 0) >>> 6 | 0) | 0 | (($6 >>> 0 < (HEAP32[($1 + 71616 | 0) >> 2] | 0) >>> 0) << 6 | 0) | 0 | (($6 >>> 0 > 65535 >>> 0) << 8 | 0) | 0 | ((($6 & -2048 | 0 | 0) == (55296 | 0)) << 7 | 0) | 0) ^ 42 | 0) >>> (HEAP32[($1 + 71680 | 0) >> 2] | 0) | 0)) {
    break label$4
   }
   HEAP32[$0 >> 2] = 65533;
   $1 = (((($3 & 255 | 0 | 0) != (0 | 0)) + (($4 | 0) != (0 | 0)) | 0) + (($2 & 255 | 0 | 0) != (0 | 0)) | 0) + (($5 & 255 | 0 | 0) != (0 | 0)) | 0;
   $8 = ($8 | 0) < ($1 | 0) ? $8 : $1;
  }
  return $8 | 0;
 }
 
 function ImGuiIO__AddKeyAnalogEvent_28ImGuiKey_2c_20bool_2c_20float_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = Math_fround($3);
  var $4 = 0, $9 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $5 = 0, $11 = 0;
  label$1 : {
   if (!$1) {
    break label$1
   }
   if (!((HEAPU8[($0 + 14225 | 0) >> 0] | 0) & 255 | 0)) {
    break label$1
   }
   $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   HEAP8[($0 + 14226 | 0) >> 0] = 0;
   label$2 : {
    $5 = $1 + -617 | 0;
    if ($5 >>> 0 > 23 >>> 0) {
     break label$2
    }
    HEAP8[($0 + 14227 | 0) >> 0] = 0;
   }
   label$3 : {
    label$4 : {
     $6 = HEAP32[($4 + 14372 | 0) >> 2] | 0;
     if (($6 | 0) < (1 | 0)) {
      break label$4
     }
     $7 = HEAP32[($4 + 14380 | 0) >> 2] | 0;
     $0 = $6;
     label$5 : while (1) {
      label$6 : {
       $8 = $0 + -1 | 0;
       $9 = Math_imul($8, 24);
       $10 = $7 + $9 | 0;
       if ((HEAP32[$10 >> 2] | 0 | 0) != (5 | 0)) {
        break label$6
       }
       if ((HEAP32[(($7 + $9 | 0) + 8 | 0) >> 2] | 0 | 0) == ($1 | 0)) {
        break label$3
       }
      }
      $9 = $0 >>> 0 < 2 >>> 0;
      $0 = $8;
      if (!$9) {
       continue label$5
      }
      break label$5;
     };
    }
    $10 = 0;
   }
   label$7 : {
    label$8 : {
     if (!($1 & 63488 | 0)) {
      break label$8
     }
     label$9 : {
      label$10 : {
       if (($1 | 0) > (8191 | 0)) {
        break label$10
       }
       if (($1 | 0) == (2048 | 0)) {
        break label$9
       }
       $0 = 648;
       if (($1 | 0) == (4096 | 0)) {
        break label$7
       }
       $0 = $1;
       break label$7;
      }
      label$11 : {
       if (($1 | 0) == (32768 | 0)) {
        break label$11
       }
       label$12 : {
        if (($1 | 0) == (16384 | 0)) {
         break label$12
        }
        $0 = $1;
        if (($0 | 0) != (8192 | 0)) {
         break label$7
        }
        $0 = 649;
        break label$7;
       }
       $0 = 650;
       break label$7;
      }
      $0 = 651;
      break label$7;
     }
     $0 = HEAPU8[($4 + 105 | 0) >> 0] | 0 ? 651 : 648;
     break label$7;
    }
    $0 = $1;
    if ($0 >>> 0 > 511 >>> 0) {
     break label$7
    }
    $0 = HEAP32[(($4 + ($1 << 2 | 0) | 0) + 196 | 0) >> 2] | 0;
    $0 = ($0 | 0) == (-1 | 0) ? $1 : $0;
   }
   label$13 : {
    $0 = $4 + ($0 << 4 | 0) | 0;
    if ((HEAPU8[($10 ? $10 + 12 | 0 : $0 + 3556 | 0) >> 0] | 0 | 0) != (0 | 0) ^ $2 | 0) {
     break label$13
    }
    if (Math_fround(HEAPF32[($10 ? $10 + 16 | 0 : $0 + 3568 | 0) >> 2]) == $3) {
     break label$1
    }
   }
   $8 = $5 >>> 0 < 24 >>> 0 ? 3 : 2;
   label$14 : {
    if (($6 | 0) != (HEAP32[($4 + 14376 | 0) >> 2] | 0 | 0)) {
     break label$14
    }
    $0 = $6 + 1 | 0;
    label$15 : {
     label$16 : {
      if ($6) {
       break label$16
      }
      $9 = 8;
      break label$15;
     }
     $9 = (($6 | 0) / (2 | 0) | 0) + $6 | 0;
    }
    $0 = ($9 | 0) > ($0 | 0) ? $9 : $0;
    if (($6 | 0) >= ($0 | 0)) {
     break label$14
    }
    $9 = $4 + 184 | 0;
    HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + 1 | 0;
    $9 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](Math_imul($0, 24), HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
    label$17 : {
     $7 = HEAP32[($4 + 14380 | 0) >> 2] | 0;
     if (!$7) {
      break label$17
     }
     __memcpy($9 | 0, $7 | 0, Math_imul(HEAP32[($4 + 14372 | 0) >> 2] | 0, 24) | 0) | 0;
     label$18 : {
      $7 = HEAP32[($4 + 14380 | 0) >> 2] | 0;
      if (!$7) {
       break label$18
      }
      $10 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$10) {
       break label$18
      }
      $10 = $10 + 184 | 0;
      HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + -1 | 0;
     }
     FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($7, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    }
    HEAP32[($4 + 14376 | 0) >> 2] = $0;
    HEAP32[($4 + 14380 | 0) >> 2] = $9;
    $6 = HEAP32[($4 + 14372 | 0) >> 2] | 0;
   }
   $0 = (HEAP32[($4 + 14380 | 0) >> 2] | 0) + Math_imul($6, 24) | 0;
   $11 = 0;
   HEAP8[($0 + 13 | 0) >> 0] = $11;
   HEAP8[($0 + 14 | 0) >> 0] = $11 >>> 8 | 0;
   HEAP8[($0 + 12 | 0) >> 0] = $2;
   HEAP32[($0 + 8 | 0) >> 2] = $1;
   HEAP32[($0 + 4 | 0) >> 2] = $8;
   HEAP32[$0 >> 2] = 5;
   HEAP32[($0 + 20 | 0) >> 2] = 0;
   HEAPF32[($0 + 16 | 0) >> 2] = $3;
   HEAP8[($0 + 15 | 0) >> 0] = 0;
   HEAP32[($4 + 14372 | 0) >> 2] = (HEAP32[($4 + 14372 | 0) >> 2] | 0) + 1 | 0;
  }
 }
 
 function ImGui__GetKeyData_28ImGuiKey_29($0) {
  $0 = $0 | 0;
  var $2 = 0, $1 = 0;
  $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!($0 & 63488 | 0)) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if (($0 | 0) > (8191 | 0)) {
       break label$4
      }
      if (($0 | 0) == (2048 | 0)) {
       break label$3
      }
      $2 = 648;
      if (($0 | 0) == (4096 | 0)) {
       break label$1
      }
      $2 = $0;
      break label$1;
     }
     label$5 : {
      if (($0 | 0) == (32768 | 0)) {
       break label$5
      }
      label$6 : {
       if (($0 | 0) == (16384 | 0)) {
        break label$6
       }
       $2 = $0;
       if (($0 | 0) != (8192 | 0)) {
        break label$1
       }
       $2 = 649;
       break label$1;
      }
      $2 = 650;
      break label$1;
     }
     $2 = 651;
     break label$1;
    }
    $2 = HEAPU8[($1 + 105 | 0) >> 0] | 0 ? 651 : 648;
    break label$1;
   }
   label$7 : {
    if ($0 >>> 0 <= 511 >>> 0) {
     break label$7
    }
    $2 = $0;
    break label$1;
   }
   $2 = HEAP32[(($1 + ($0 << 2 | 0) | 0) + 196 | 0) >> 2] | 0;
   $2 = ($2 | 0) == (-1 | 0) ? $0 : $2;
  }
  return ($1 + ($2 << 4 | 0) | 0) + 3556 | 0 | 0;
 }
 
 function ImGuiIO__AddKeyEvent_28ImGuiKey_2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  label$1 : {
   if (!(HEAPU8[($0 + 14225 | 0) >> 0] | 0)) {
    break label$1
   }
   ImGuiIO__AddKeyAnalogEvent_28ImGuiKey_2c_20bool_2c_20float_29($0 | 0, $1 | 0, $2 | 0, Math_fround($2 ? Math_fround(1.0) : Math_fround(0.0)));
  }
 }
 
 function ImGuiIO__AddMousePosEvent_28float_2c_20float_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = Math_fround($2);
  var $4 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   if (!(HEAPU8[($0 + 14225 | 0) >> 0] | 0)) {
    break label$1
   }
   $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   label$2 : {
    if (!($1 > Math_fround(-3402823466385288598117041.0e14))) {
     break label$2
    }
    $4 = $1 >= Math_fround(0.0) ^ -1 | 0;
    label$3 : {
     label$4 : {
      if (!(Math_fround(Math_abs($1)) < Math_fround(2147483648.0))) {
       break label$4
      }
      $0 = ~~$1;
      break label$3;
     }
     $0 = -2147483648;
    }
    $1 = Math_fround($0 - ($4 & Math_fround($0 | 0) != $1 | 0) | 0 | 0);
   }
   label$5 : {
    if (!($2 > Math_fround(-3402823466385288598117041.0e14))) {
     break label$5
    }
    $4 = $2 >= Math_fround(0.0) ^ -1 | 0;
    label$6 : {
     label$7 : {
      if (!(Math_fround(Math_abs($2)) < Math_fround(2147483648.0))) {
       break label$7
      }
      $0 = ~~$2;
      break label$6;
     }
     $0 = -2147483648;
    }
    $2 = Math_fround($0 - ($4 & Math_fround($0 | 0) != $2 | 0) | 0 | 0);
   }
   label$8 : {
    label$9 : {
     label$10 : {
      $5 = HEAP32[($3 + 14372 | 0) >> 2] | 0;
      if (($5 | 0) < (1 | 0)) {
       break label$10
      }
      $6 = HEAP32[($3 + 14380 | 0) >> 2] | 0;
      $0 = $5;
      label$11 : while (1) {
       $4 = $0 + -1 | 0;
       if ((HEAP32[($6 + Math_imul($4, 24) | 0) >> 2] | 0 | 0) == (1 | 0)) {
        break label$9
       }
       $7 = $0 >>> 0 < 2 >>> 0;
       $0 = $4;
       if (!$7) {
        continue label$11
       }
       break label$11;
      };
     }
     $4 = $3 + 3524 | 0;
     $0 = $3 + 3520 | 0;
     break label$8;
    }
    $0 = $6 + Math_imul($4, 24) | 0;
    $4 = $0 + 12 | 0;
    $0 = $0 + 8 | 0;
   }
   label$12 : {
    if (Math_fround(HEAPF32[$0 >> 2]) != $1) {
     break label$12
    }
    if (Math_fround(HEAPF32[$4 >> 2]) == $2) {
     break label$1
    }
   }
   label$13 : {
    if (($5 | 0) != (HEAP32[($3 + 14376 | 0) >> 2] | 0 | 0)) {
     break label$13
    }
    $0 = $5 + 1 | 0;
    label$14 : {
     label$15 : {
      if ($5) {
       break label$15
      }
      $4 = 8;
      break label$14;
     }
     $4 = (($5 | 0) / (2 | 0) | 0) + $5 | 0;
    }
    $0 = ($4 | 0) > ($0 | 0) ? $4 : $0;
    if (($5 | 0) >= ($0 | 0)) {
     break label$13
    }
    $4 = $3 + 184 | 0;
    HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
    $4 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](Math_imul($0, 24), HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
    label$16 : {
     $7 = HEAP32[($3 + 14380 | 0) >> 2] | 0;
     if (!$7) {
      break label$16
     }
     __memcpy($4 | 0, $7 | 0, Math_imul(HEAP32[($3 + 14372 | 0) >> 2] | 0, 24) | 0) | 0;
     label$17 : {
      $7 = HEAP32[($3 + 14380 | 0) >> 2] | 0;
      if (!$7) {
       break label$17
      }
      $6 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$6) {
       break label$17
      }
      $6 = $6 + 184 | 0;
      HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1 | 0;
     }
     FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($7, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    }
    HEAP32[($3 + 14376 | 0) >> 2] = $0;
    HEAP32[($3 + 14380 | 0) >> 2] = $4;
    $5 = HEAP32[($3 + 14372 | 0) >> 2] | 0;
   }
   $0 = (HEAP32[($3 + 14380 | 0) >> 2] | 0) + Math_imul($5, 24) | 0;
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 16 | 0) >> 2] = 0;
   HEAP32[($0 + 20 | 0) >> 2] = i64toi32_i32$0;
   HEAPF32[($0 + 12 | 0) >> 2] = $2;
   HEAPF32[($0 + 8 | 0) >> 2] = $1;
   i64toi32_i32$0 = 1;
   HEAP32[$0 >> 2] = 1;
   HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($3 + 14372 | 0) >> 2] = (HEAP32[($3 + 14372 | 0) >> 2] | 0) + 1 | 0;
  }
 }
 
 function ImGuiIO__AddMouseButtonEvent_28int_2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $3 = 0, $6 = 0, $4 = 0, $7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, i64toi32_i32$0 = 0, $8 = 0;
  label$1 : {
   if (!(HEAPU8[($0 + 14225 | 0) >> 0] | 0)) {
    break label$1
   }
   $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $4 = HEAP32[($3 + 14372 | 0) >> 2] | 0;
   $5 = $4;
   label$2 : {
    label$3 : while (1) {
     label$4 : {
      if (($5 | 0) >= (1 | 0)) {
       break label$4
      }
      $6 = 0;
      break label$2;
     }
     $7 = HEAP32[($3 + 14380 | 0) >> 2] | 0;
     $0 = $5;
     label$5 : {
      label$6 : while (1) {
       $5 = $0 + -1 | 0;
       $8 = Math_imul($5, 24);
       $6 = $7 + $8 | 0;
       if ((HEAP32[$6 >> 2] | 0 | 0) == (3 | 0)) {
        break label$5
       }
       $6 = $0 >>> 0 < 2 >>> 0;
       $0 = $5;
       if (!$6) {
        continue label$6
       }
       break label$6;
      };
      $6 = 0;
      break label$2;
     }
     if ((HEAP32[(($7 + $8 | 0) + 8 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   if (((HEAPU8[($6 ? $6 + 12 | 0 : ($3 + $1 | 0) + 3528 | 0) >> 0] | 0 | 0) != (0 | 0) | 0) == ($2 | 0)) {
    break label$1
   }
   label$7 : {
    if (($4 | 0) != (HEAP32[($3 + 14376 | 0) >> 2] | 0 | 0)) {
     break label$7
    }
    $0 = $4 + 1 | 0;
    label$8 : {
     label$9 : {
      if ($4) {
       break label$9
      }
      $5 = 8;
      break label$8;
     }
     $5 = (($4 | 0) / (2 | 0) | 0) + $4 | 0;
    }
    $0 = ($5 | 0) > ($0 | 0) ? $5 : $0;
    if (($4 | 0) >= ($0 | 0)) {
     break label$7
    }
    $5 = $3 + 184 | 0;
    HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1 | 0;
    $5 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](Math_imul($0, 24), HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
    label$10 : {
     $6 = HEAP32[($3 + 14380 | 0) >> 2] | 0;
     if (!$6) {
      break label$10
     }
     __memcpy($5 | 0, $6 | 0, Math_imul(HEAP32[($3 + 14372 | 0) >> 2] | 0, 24) | 0) | 0;
     label$11 : {
      $6 = HEAP32[($3 + 14380 | 0) >> 2] | 0;
      if (!$6) {
       break label$11
      }
      $7 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$7) {
       break label$11
      }
      $7 = $7 + 184 | 0;
      HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1 | 0;
     }
     FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($6, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    }
    HEAP32[($3 + 14376 | 0) >> 2] = $0;
    HEAP32[($3 + 14380 | 0) >> 2] = $5;
    $4 = HEAP32[($3 + 14372 | 0) >> 2] | 0;
   }
   $0 = (HEAP32[($3 + 14380 | 0) >> 2] | 0) + Math_imul($4, 24) | 0;
   i64toi32_i32$0 = 0;
   $10 = 0;
   HEAP8[($0 + 13 | 0) >> 0] = $10;
   HEAP8[($0 + 14 | 0) >> 0] = $10 >>> 8 | 0;
   HEAP8[($0 + 15 | 0) >> 0] = $10 >>> 16 | 0;
   HEAP8[($0 + 16 | 0) >> 0] = $10 >>> 24 | 0;
   $11 = i64toi32_i32$0;
   HEAP8[($0 + 17 | 0) >> 0] = $11;
   HEAP8[($0 + 18 | 0) >> 0] = $11 >>> 8 | 0;
   HEAP8[($0 + 19 | 0) >> 0] = $11 >>> 16 | 0;
   HEAP8[($0 + 20 | 0) >> 0] = $11 >>> 24 | 0;
   HEAP8[($0 + 12 | 0) >> 0] = $2;
   HEAP32[($0 + 8 | 0) >> 2] = $1;
   i64toi32_i32$0 = 1;
   HEAP32[$0 >> 2] = 3;
   HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
   $12 = $0 + 20 | 0;
   $13 = 0;
   HEAP8[$12 >> 0] = $13;
   HEAP8[($12 + 1 | 0) >> 0] = $13 >>> 8 | 0;
   HEAP8[($12 + 2 | 0) >> 0] = $13 >>> 16 | 0;
   HEAP8[($12 + 3 | 0) >> 0] = $13 >>> 24 | 0;
   HEAP32[($3 + 14372 | 0) >> 2] = (HEAP32[($3 + 14372 | 0) >> 2] | 0) + 1 | 0;
  }
 }
 
 function ImGuiIO__AddMouseWheelEvent_28float_2c_20float_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = Math_fround($2);
  var $3 = 0, $5 = 0, $4 = 0, $6 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   if (!(HEAPU8[($0 + 14225 | 0) >> 0] | 0)) {
    break label$1
   }
   $0 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   label$2 : {
    if ($1 != Math_fround(0.0)) {
     break label$2
    }
    if ($2 == Math_fround(0.0)) {
     break label$1
    }
   }
   label$3 : {
    $3 = HEAP32[($0 + 14372 | 0) >> 2] | 0;
    if (($3 | 0) != (HEAP32[($0 + 14376 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    $4 = $3 + 1 | 0;
    label$4 : {
     label$5 : {
      if ($3) {
       break label$5
      }
      $5 = 8;
      break label$4;
     }
     $5 = (($3 | 0) / (2 | 0) | 0) + $3 | 0;
    }
    $4 = ($5 | 0) > ($4 | 0) ? $5 : $4;
    if (($3 | 0) >= ($4 | 0)) {
     break label$3
    }
    $3 = $0 + 184 | 0;
    HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1 | 0;
    $3 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](Math_imul($4, 24), HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
    label$6 : {
     $5 = HEAP32[($0 + 14380 | 0) >> 2] | 0;
     if (!$5) {
      break label$6
     }
     __memcpy($3 | 0, $5 | 0, Math_imul(HEAP32[($0 + 14372 | 0) >> 2] | 0, 24) | 0) | 0;
     label$7 : {
      $5 = HEAP32[($0 + 14380 | 0) >> 2] | 0;
      if (!$5) {
       break label$7
      }
      $6 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$6) {
       break label$7
      }
      $6 = $6 + 184 | 0;
      HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1 | 0;
     }
     FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($5, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    }
    HEAP32[($0 + 14376 | 0) >> 2] = $4;
    HEAP32[($0 + 14380 | 0) >> 2] = $3;
    $3 = HEAP32[($0 + 14372 | 0) >> 2] | 0;
   }
   $3 = (HEAP32[($0 + 14380 | 0) >> 2] | 0) + Math_imul($3, 24) | 0;
   i64toi32_i32$0 = 0;
   HEAP32[($3 + 16 | 0) >> 2] = 0;
   HEAP32[($3 + 20 | 0) >> 2] = i64toi32_i32$0;
   HEAPF32[($3 + 12 | 0) >> 2] = $2;
   HEAPF32[($3 + 8 | 0) >> 2] = $1;
   i64toi32_i32$0 = 1;
   HEAP32[$3 >> 2] = 2;
   HEAP32[($3 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($0 + 14372 | 0) >> 2] = (HEAP32[($0 + 14372 | 0) >> 2] | 0) + 1 | 0;
  }
 }
 
 function ImGui__MemAlloc_28unsigned_20long_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   if (!$1) {
    break label$1
   }
   $1 = $1 + 184 | 0;
   HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1 | 0;
  }
  return FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($0, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0 | 0;
 }
 
 function ImGui__MemFree_28void__29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   if (!$1) {
    break label$1
   }
   $1 = $1 + 184 | 0;
   HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + -1 | 0;
  }
  FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($0, HEAP32[(0 + 92728 | 0) >> 2] | 0);
 }
 
 function ImStrSkipBlank_28char_20const__29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     $1 = HEAPU8[$0 >> 0] | 0;
     if (($1 | 0) == (32 | 0)) {
      break label$3
     }
     if (($1 | 0) != (9 | 0)) {
      break label$1
     }
    }
    $0 = $0 + 1 | 0;
    continue label$2;
   };
  }
  return $0 | 0;
 }
 
 function ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $3;
  $3 = vsnprintf($0 | 0, $1 | 0, $2 | 0, $3 | 0) | 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   $2 = $1 + -1 | 0;
   $3 = ($3 | 0) != (-1 | 0) ? (($3 | 0) < ($1 | 0) ? $3 : $2) : $2;
   HEAP8[($0 + $3 | 0) >> 0] = 0;
  }
  __stack_pointer = $4 + 16 | 0;
  return $3 | 0;
 }
 
 function ImFormatStringToTempBufferV_28char_20const___2c_20char_20const___2c_20char_20const__2c_20void__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAPU8[$2 >> 0] | 0 | 0) != (37 | 0)) {
      break label$3
     }
     if ((HEAPU8[($2 + 1 | 0) >> 0] | 0 | 0) != (115 | 0)) {
      break label$3
     }
     if (HEAPU8[($2 + 2 | 0) >> 0] | 0) {
      break label$3
     }
     $4 = HEAP32[$3 >> 2] | 0;
     HEAP32[$0 >> 2] = $4;
     if (!$1) {
      break label$1
     }
     $4 = $4 + (strlen($4 | 0) | 0) | 0;
     break label$2;
    }
    $5 = HEAP32[($4 + 23904 | 0) >> 2] | 0;
    $6 = HEAP32[($4 + 23896 | 0) >> 2] | 0;
    $2 = vsnprintf($5 | 0, $6 | 0, $2 | 0, $3 | 0) | 0;
    label$4 : {
     if (!$5) {
      break label$4
     }
     $3 = $6 + -1 | 0;
     $2 = ($2 | 0) != (-1 | 0) ? (($2 | 0) < ($6 | 0) ? $2 : $3) : $3;
     HEAP8[($5 + $2 | 0) >> 0] = 0;
    }
    HEAP32[$0 >> 2] = HEAP32[($4 + 23904 | 0) >> 2] | 0;
    if (!$1) {
     break label$1
    }
    $4 = (HEAP32[($4 + 23904 | 0) >> 2] | 0) + $2 | 0;
   }
   HEAP32[$1 >> 2] = $4;
  }
 }
 
 function ImHashStr_28char_20const__2c_20unsigned_20long_2c_20unsigned_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0;
  $3 = $2 ^ -1 | 0;
  label$1 : {
   label$2 : {
    if (!$1) {
     break label$2
    }
    $2 = $3;
    label$3 : while (1) {
     $4 = $0;
     $0 = $0 + 1 | 0;
     $1 = $1 + -1 | 0;
     label$4 : {
      $5 = HEAPU8[$4 >> 0] | 0;
      if (($5 | 0) != (35 | 0)) {
       break label$4
      }
      if ($1 >>> 0 < 2 >>> 0) {
       break label$4
      }
      if ((HEAPU8[$0 >> 0] | 0 | 0) != (35 | 0)) {
       break label$4
      }
      $2 = (HEAPU8[($4 + 2 | 0) >> 0] | 0 | 0) == (35 | 0) ? $3 : $2;
     }
     $2 = ($2 >>> 8 | 0) ^ (HEAP32[(((($2 & 255 | 0) ^ $5 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
     if ($1) {
      continue label$3
     }
     break label$1;
    };
   }
   label$5 : {
    $1 = HEAPU8[$0 >> 0] | 0;
    if ($1) {
     break label$5
    }
    $2 = $3;
    break label$1;
   }
   $2 = $3;
   label$6 : while (1) {
    $4 = $1 & 255 | 0;
    $1 = HEAPU8[($0 + 1 | 0) >> 0] | 0;
    label$7 : {
     if (($4 | 0) != (35 | 0)) {
      break label$7
     }
     if (($1 & 255 | 0 | 0) != (35 | 0)) {
      break label$7
     }
     $2 = (HEAPU8[($0 + 2 | 0) >> 0] | 0 | 0) == (35 | 0) ? $3 : $2;
    }
    $0 = $0 + 1 | 0;
    $2 = ($2 >>> 8 | 0) ^ (HEAP32[(((($2 & 255 | 0) ^ $4 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
    if ($1 & 255 | 0) {
     continue label$6
    }
    break label$6;
   };
  }
  return $2 ^ -1 | 0 | 0;
 }
 
 function ImFileLoadToMemory_28char_20const__2c_20char_20const__2c_20unsigned_20long__2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  label$1 : {
   if (!$2) {
    break label$1
   }
   HEAP32[$2 >> 2] = 0;
  }
  $4 = 0;
  label$2 : {
   $1 = fopen($0 | 0, $1 | 0) | 0;
   if (!$1) {
    break label$2
   }
   label$3 : {
    label$4 : {
     $0 = ftell($1 | 0) | 0;
     if (($0 | 0) == (-1 | 0)) {
      break label$4
     }
     if (fseek($1 | 0, 0 | 0, 2 | 0) | 0) {
      break label$4
     }
     $4 = ftell($1 | 0) | 0;
     if (($4 | 0) == (-1 | 0)) {
      break label$4
     }
     if (!(fseek($1 | 0, $0 | 0, 0 | 0) | 0)) {
      break label$3
     }
    }
    fclose($1 | 0) | 0;
    return 0 | 0;
   }
   $0 = $4 + $3 | 0;
   label$5 : {
    $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$5) {
     break label$5
    }
    $5 = $5 + 184 | 0;
    HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1 | 0;
   }
   label$6 : {
    $0 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($0, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
    if ($0) {
     break label$6
    }
    fclose($1 | 0) | 0;
    return 0 | 0;
   }
   label$7 : {
    if ((fread($0 | 0, 1 | 0, $4 | 0, $1 | 0) | 0 | 0) == ($4 | 0)) {
     break label$7
    }
    fclose($1 | 0) | 0;
    label$8 : {
     $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$1) {
      break label$8
     }
     $1 = $1 + 184 | 0;
     HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($0, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    return 0 | 0;
   }
   label$9 : {
    if (($3 | 0) < (1 | 0)) {
     break label$9
    }
    memset($0 + $4 | 0 | 0, 0 | 0, $3 | 0) | 0;
   }
   fclose($1 | 0) | 0;
   label$10 : {
    if (!$2) {
     break label$10
    }
    HEAP32[$2 >> 2] = $4;
   }
   $4 = $0;
  }
  return $4 | 0;
 }
 
 function ImGuiStorage__GetIntRef_28unsigned_20int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $4 = 0, $8 = 0, $6 = 0, $7 = 0, $3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $19 = 0, $26 = 0, $147 = 0, $150$hi = 0, $152$hi = 0, $153 = 0;
  $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
  $4 = $3;
  label$1 : {
   $5 = HEAP32[$0 >> 2] | 0;
   if (!$5) {
    break label$1
   }
   $4 = $3;
   $6 = $5;
   label$2 : while (1) {
    $7 = $6 >>> 1 | 0;
    $8 = $4 + ($7 << 3 | 0) | 0;
    $26 = $8 + 8 | 0;
    $8 = (HEAP32[$8 >> 2] | 0) >>> 0 < $1 >>> 0;
    $4 = $8 ? $26 : $4;
    $6 = $8 ? $6 + ($7 ^ -1 | 0) | 0 : $7;
    if ($6) {
     continue label$2
    }
    break label$2;
   };
  }
  label$3 : {
   label$4 : {
    if (($4 | 0) == ($3 + ($5 << 3 | 0) | 0 | 0)) {
     break label$4
    }
    if ((HEAP32[$4 >> 2] | 0 | 0) == ($1 | 0)) {
     break label$3
    }
   }
   $4 = ($4 - $3 | 0) >> 3 | 0;
   label$5 : {
    if (($5 | 0) != (HEAP32[($0 + 4 | 0) >> 2] | 0 | 0)) {
     break label$5
    }
    $6 = $5 + 1 | 0;
    label$6 : {
     label$7 : {
      if ($5) {
       break label$7
      }
      $7 = 8;
      break label$6;
     }
     $7 = (($5 | 0) / (2 | 0) | 0) + $5 | 0;
    }
    $6 = ($7 | 0) > ($6 | 0) ? $7 : $6;
    if (($5 | 0) >= ($6 | 0)) {
     break label$5
    }
    $7 = $6 << 3 | 0;
    label$8 : {
     $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$8) {
      break label$8
     }
     $8 = $8 + 184 | 0;
     HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 1 | 0;
    }
    $3 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($7, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
    label$9 : {
     $7 = $0 + 8 | 0;
     $8 = HEAP32[$7 >> 2] | 0;
     if (!$8) {
      break label$9
     }
     __memcpy($3 | 0, $8 | 0, (HEAP32[$0 >> 2] | 0) << 3 | 0 | 0) | 0;
     label$10 : {
      $8 = HEAP32[$7 >> 2] | 0;
      if (!$8) {
       break label$10
      }
      $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$5) {
       break label$10
      }
      $5 = $5 + 184 | 0;
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1 | 0;
     }
     FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($8, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    }
    HEAP32[($0 + 4 | 0) >> 2] = $6;
    HEAP32[$7 >> 2] = $3;
    $5 = HEAP32[$0 >> 2] | 0;
   }
   label$11 : {
    if (($5 | 0) <= ($4 | 0)) {
     break label$11
    }
    $6 = $3 + ($4 << 3 | 0) | 0;
    memmove($6 + 8 | 0 | 0, $6 | 0, ($5 - $4 | 0) << 3 | 0 | 0) | 0;
    $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   }
   $4 = $4 << 3 | 0;
   $147 = $3 + $4 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = $2;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $19 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $19 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $150$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   $152$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $150$hi;
   i64toi32_i32$0 = $19;
   i64toi32_i32$2 = $152$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $153 = i64toi32_i32$0 | $1 | 0;
   i64toi32_i32$0 = $147;
   HEAP32[i64toi32_i32$0 >> 2] = $153;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
   HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 1 | 0;
   $4 = (HEAP32[($0 + 8 | 0) >> 2] | 0) + $4 | 0;
  }
  return $4 + 4 | 0 | 0;
 }
 
 function ImGuiStorage__SetVoidPtr_28unsigned_20int_2c_20void__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $8 = 0, $4 = 0, $6 = 0, $7 = 0, $3 = 0, $26 = 0;
  $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
  $4 = $3;
  label$1 : {
   $5 = HEAP32[$0 >> 2] | 0;
   if (!$5) {
    break label$1
   }
   $4 = $3;
   $6 = $5;
   label$2 : while (1) {
    $7 = $6 >>> 1 | 0;
    $8 = $4 + ($7 << 3 | 0) | 0;
    $26 = $8 + 8 | 0;
    $8 = (HEAP32[$8 >> 2] | 0) >>> 0 < $1 >>> 0;
    $4 = $8 ? $26 : $4;
    $6 = $8 ? $6 + ($7 ^ -1 | 0) | 0 : $7;
    if ($6) {
     continue label$2
    }
    break label$2;
   };
  }
  label$3 : {
   label$4 : {
    if (($4 | 0) == ($3 + ($5 << 3 | 0) | 0 | 0)) {
     break label$4
    }
    if ((HEAP32[$4 >> 2] | 0 | 0) == ($1 | 0)) {
     break label$3
    }
   }
   $4 = ($4 - $3 | 0) >> 3 | 0;
   label$5 : {
    if (($5 | 0) != (HEAP32[($0 + 4 | 0) >> 2] | 0 | 0)) {
     break label$5
    }
    $6 = $5 + 1 | 0;
    label$6 : {
     label$7 : {
      if ($5) {
       break label$7
      }
      $7 = 8;
      break label$6;
     }
     $7 = (($5 | 0) / (2 | 0) | 0) + $5 | 0;
    }
    $6 = ($7 | 0) > ($6 | 0) ? $7 : $6;
    if (($5 | 0) >= ($6 | 0)) {
     break label$5
    }
    $7 = $6 << 3 | 0;
    label$8 : {
     $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$8) {
      break label$8
     }
     $8 = $8 + 184 | 0;
     HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 1 | 0;
    }
    $3 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($7, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
    label$9 : {
     $7 = $0 + 8 | 0;
     $8 = HEAP32[$7 >> 2] | 0;
     if (!$8) {
      break label$9
     }
     __memcpy($3 | 0, $8 | 0, (HEAP32[$0 >> 2] | 0) << 3 | 0 | 0) | 0;
     label$10 : {
      $8 = HEAP32[$7 >> 2] | 0;
      if (!$8) {
       break label$10
      }
      $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$5) {
       break label$10
      }
      $5 = $5 + 184 | 0;
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1 | 0;
     }
     FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($8, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    }
    HEAP32[($0 + 4 | 0) >> 2] = $6;
    HEAP32[$7 >> 2] = $3;
    $5 = HEAP32[$0 >> 2] | 0;
   }
   label$11 : {
    if (($5 | 0) <= ($4 | 0)) {
     break label$11
    }
    $6 = $3 + ($4 << 3 | 0) | 0;
    memmove($6 + 8 | 0 | 0, $6 | 0, ($5 - $4 | 0) << 3 | 0 | 0) | 0;
    $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   }
   $4 = $3 + ($4 << 3 | 0) | 0;
   HEAP32[($4 + 4 | 0) >> 2] = $2;
   HEAP32[$4 >> 2] = $1;
   HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 1 | 0;
   return;
  }
  HEAP32[($4 + 4 | 0) >> 2] = $2;
 }
 
 function ImGuiTextBuffer__append_28char_20const__2c_20char_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $3 = 0, $4 = 0;
  label$1 : {
   label$2 : {
    if (!$2) {
     break label$2
    }
    $3 = $2 - $1 | 0;
    break label$1;
   }
   $3 = strlen($1 | 0) | 0;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     $2 = HEAP32[$0 >> 2] | 0;
     $4 = $2 ? $2 : 1;
     $2 = $4 + $3 | 0;
     $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     if (($2 | 0) < ($5 | 0)) {
      break label$5
     }
     $6 = $5 << 1 | 0;
     $6 = ($2 | 0) > ($6 | 0) ? $2 : $6;
     if (($5 | 0) >= ($6 | 0)) {
      break label$5
     }
     label$6 : {
      $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$5) {
       break label$6
      }
      $5 = $5 + 184 | 0;
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1 | 0;
     }
     $5 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($6, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
     label$7 : {
      $7 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      if (!$7) {
       break label$7
      }
      __memcpy($5 | 0, $7 | 0, HEAP32[$0 >> 2] | 0 | 0) | 0;
      label$8 : {
       $7 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       if (!$7) {
        break label$8
       }
       $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
       if (!$8) {
        break label$8
       }
       $8 = $8 + 184 | 0;
       HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1 | 0;
      }
      FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($7, HEAP32[(0 + 92728 | 0) >> 2] | 0);
     }
     HEAP32[($0 + 8 | 0) >> 2] = $5;
     break label$4;
    }
    if (($5 | 0) >= ($2 | 0)) {
     break label$3
    }
    label$9 : {
     label$10 : {
      if ($5) {
       break label$10
      }
      $6 = 8;
      break label$9;
     }
     $6 = (($5 | 0) / (2 | 0) | 0) + $5 | 0;
    }
    $6 = ($6 | 0) > ($2 | 0) ? $6 : $2;
    if (($5 | 0) >= ($6 | 0)) {
     break label$3
    }
    label$11 : {
     $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$5) {
      break label$11
     }
     $5 = $5 + 184 | 0;
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1 | 0;
    }
    $5 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($6, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
    label$12 : {
     $7 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     if (!$7) {
      break label$12
     }
     __memcpy($5 | 0, $7 | 0, HEAP32[$0 >> 2] | 0 | 0) | 0;
     label$13 : {
      $7 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      if (!$7) {
       break label$13
      }
      $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$8) {
       break label$13
      }
      $8 = $8 + 184 | 0;
      HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1 | 0;
     }
     FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($7, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    }
    HEAP32[($0 + 8 | 0) >> 2] = $5;
   }
   HEAP32[($0 + 4 | 0) >> 2] = $6;
  }
  HEAP32[$0 >> 2] = $2;
  $2 = $4 + -1 | 0;
  __memcpy((HEAP32[($0 + 8 | 0) >> 2] | 0) + $2 | 0 | 0, $1 | 0, $3 | 0) | 0;
  HEAP8[((HEAP32[($0 + 8 | 0) >> 2] | 0) + ($2 + $3 | 0) | 0) >> 0] = 0;
 }
 
 function ImGuiTextBuffer__appendf_28char_20const__2c_20____29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $2;
  ImGuiTextBuffer__appendfv_28char_20const__2c_20void__29($0 | 0, $1 | 0, $2 | 0);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function ImGuiTextBuffer__appendfv_28char_20const__2c_20void__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $6 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $2;
  HEAP32[($3 + 8 | 0) >> 2] = $2;
  label$1 : {
   $2 = vsnprintf(0 | 0, 0 | 0, $1 | 0, $2 | 0) | 0;
   if (($2 | 0) < (1 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     label$4 : {
      $4 = HEAP32[$0 >> 2] | 0;
      $5 = $4 ? $4 : 1;
      $4 = $5 + $2 | 0;
      $6 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      if (($4 | 0) < ($6 | 0)) {
       break label$4
      }
      $7 = $6 << 1 | 0;
      $7 = ($4 | 0) > ($7 | 0) ? $4 : $7;
      if (($6 | 0) >= ($7 | 0)) {
       break label$4
      }
      label$5 : {
       $6 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
       if (!$6) {
        break label$5
       }
       $6 = $6 + 184 | 0;
       HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1 | 0;
      }
      $6 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($7, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
      label$6 : {
       $8 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       if (!$8) {
        break label$6
       }
       __memcpy($6 | 0, $8 | 0, HEAP32[$0 >> 2] | 0 | 0) | 0;
       label$7 : {
        $8 = HEAP32[($0 + 8 | 0) >> 2] | 0;
        if (!$8) {
         break label$7
        }
        $9 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
        if (!$9) {
         break label$7
        }
        $9 = $9 + 184 | 0;
        HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + -1 | 0;
       }
       FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($8, HEAP32[(0 + 92728 | 0) >> 2] | 0);
      }
      HEAP32[($0 + 8 | 0) >> 2] = $6;
      break label$3;
     }
     if (($6 | 0) >= ($4 | 0)) {
      break label$2
     }
     label$8 : {
      label$9 : {
       if ($6) {
        break label$9
       }
       $7 = 8;
       break label$8;
      }
      $7 = (($6 | 0) / (2 | 0) | 0) + $6 | 0;
     }
     $7 = ($7 | 0) > ($4 | 0) ? $7 : $4;
     if (($6 | 0) >= ($7 | 0)) {
      break label$2
     }
     label$10 : {
      $6 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$6) {
       break label$10
      }
      $6 = $6 + 184 | 0;
      HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1 | 0;
     }
     $6 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($7, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
     label$11 : {
      $8 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      if (!$8) {
       break label$11
      }
      __memcpy($6 | 0, $8 | 0, HEAP32[$0 >> 2] | 0 | 0) | 0;
      label$12 : {
       $8 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       if (!$8) {
        break label$12
       }
       $9 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
       if (!$9) {
        break label$12
       }
       $9 = $9 + 184 | 0;
       HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + -1 | 0;
      }
      FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($8, HEAP32[(0 + 92728 | 0) >> 2] | 0);
     }
     HEAP32[($0 + 8 | 0) >> 2] = $6;
    }
    HEAP32[($0 + 4 | 0) >> 2] = $7;
   }
   HEAP32[$0 >> 2] = $4;
   $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   $6 = ($5 + $4 | 0) + -1 | 0;
   $5 = $2 + 1 | 0;
   $0 = vsnprintf($6 | 0, $5 | 0, $1 | 0, HEAP32[($3 + 8 | 0) >> 2] | 0 | 0) | 0;
   if (!$4) {
    break label$1
   }
   HEAP8[($6 + (($0 | 0) != (-1 | 0) ? (($0 | 0) < ($5 | 0) ? $0 : $2) : $2) | 0) >> 0] = 0;
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function ImGuiTextIndex__append_28char_20const__2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $5 = 0, $4 = 0, $7 = 0, $8 = 0, $6 = 0, $9 = 0;
  label$1 : {
   if (($2 | 0) == ($3 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     if (!$4) {
      break label$3
     }
     if ((HEAPU8[(($4 + $1 | 0) + -1 | 0) >> 0] | 0 | 0) != (10 | 0)) {
      break label$2
     }
    }
    label$4 : {
     $5 = HEAP32[$0 >> 2] | 0;
     if (($5 | 0) != (HEAP32[($0 + 4 | 0) >> 2] | 0 | 0)) {
      break label$4
     }
     $6 = $5 + 1 | 0;
     label$5 : {
      label$6 : {
       if ($5) {
        break label$6
       }
       $7 = 8;
       break label$5;
      }
      $7 = (($5 | 0) / (2 | 0) | 0) + $5 | 0;
     }
     $6 = ($7 | 0) > ($6 | 0) ? $7 : $6;
     if (($5 | 0) >= ($6 | 0)) {
      break label$4
     }
     $5 = $6 << 2 | 0;
     label$7 : {
      $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$4) {
       break label$7
      }
      $4 = $4 + 184 | 0;
      HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
     }
     $5 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($5, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
     label$8 : {
      $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      if (!$4) {
       break label$8
      }
      __memcpy($5 | 0, $4 | 0, (HEAP32[$0 >> 2] | 0) << 2 | 0 | 0) | 0;
      label$9 : {
       $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       if (!$4) {
        break label$9
       }
       $7 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
       if (!$7) {
        break label$9
       }
       $7 = $7 + 184 | 0;
       HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1 | 0;
      }
      FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($4, HEAP32[(0 + 92728 | 0) >> 2] | 0);
     }
     HEAP32[($0 + 4 | 0) >> 2] = $6;
     HEAP32[($0 + 8 | 0) >> 2] = $5;
     $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     $5 = HEAP32[$0 >> 2] | 0;
    }
    HEAP32[((HEAP32[($0 + 8 | 0) >> 2] | 0) + ($5 << 2 | 0) | 0) >> 2] = $4;
    HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 1 | 0;
   }
   label$10 : {
    $2 = $1 + $2 | 0;
    $4 = $1 + $3 | 0;
    $2 = memchr($2 | 0, 10 | 0, $4 - $2 | 0 | 0) | 0;
    if (!$2) {
     break label$10
    }
    label$11 : while (1) {
     label$12 : {
      $2 = $2 + 1 | 0;
      if ($2 >>> 0 >= $4 >>> 0) {
       break label$12
      }
      $6 = $2 - $1 | 0;
      label$13 : {
       $5 = HEAP32[$0 >> 2] | 0;
       if (($5 | 0) != (HEAP32[($0 + 4 | 0) >> 2] | 0 | 0)) {
        break label$13
       }
       $7 = $5 + 1 | 0;
       label$14 : {
        label$15 : {
         if ($5) {
          break label$15
         }
         $8 = 8;
         break label$14;
        }
        $8 = (($5 | 0) / (2 | 0) | 0) + $5 | 0;
       }
       $7 = ($8 | 0) > ($7 | 0) ? $8 : $7;
       if (($5 | 0) >= ($7 | 0)) {
        break label$13
       }
       $5 = $7 << 2 | 0;
       label$16 : {
        $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
        if (!$8) {
         break label$16
        }
        $8 = $8 + 184 | 0;
        HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 1 | 0;
       }
       $5 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($5, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
       label$17 : {
        $8 = HEAP32[($0 + 8 | 0) >> 2] | 0;
        if (!$8) {
         break label$17
        }
        __memcpy($5 | 0, $8 | 0, (HEAP32[$0 >> 2] | 0) << 2 | 0 | 0) | 0;
        label$18 : {
         $8 = HEAP32[($0 + 8 | 0) >> 2] | 0;
         if (!$8) {
          break label$18
         }
         $9 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
         if (!$9) {
          break label$18
         }
         $9 = $9 + 184 | 0;
         HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + -1 | 0;
        }
        FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($8, HEAP32[(0 + 92728 | 0) >> 2] | 0);
       }
       HEAP32[($0 + 4 | 0) >> 2] = $7;
       HEAP32[($0 + 8 | 0) >> 2] = $5;
       $5 = HEAP32[$0 >> 2] | 0;
      }
      HEAP32[((HEAP32[($0 + 8 | 0) >> 2] | 0) + ($5 << 2 | 0) | 0) >> 2] = $6;
      HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 1 | 0;
     }
     $2 = memchr($2 | 0, 10 | 0, $4 - $2 | 0 | 0) | 0;
     if ($2) {
      continue label$11
     }
     break label$11;
    };
   }
   $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
   HEAP32[($0 + 12 | 0) >> 2] = ($2 | 0) > ($3 | 0) ? $2 : $3;
  }
 }
 
 function ImGui__DebugLog_28char_20const__2c_20____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $4 = 0, $2 = 0, $5 = 0, $49 = 0, $55 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[($2 + 28 | 0) >> 2] = $1;
  $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $4 = HEAP32[($3 + 23540 | 0) >> 2] | 0;
  HEAP32[($2 + 16 | 0) >> 2] = HEAP32[($3 + 16016 | 0) >> 2] | 0;
  $5 = $3 + 23540 | 0;
  ImGuiTextBuffer__appendf_28char_20const__2c_20____29($5 | 0, 68232 | 0, $2 + 16 | 0 | 0);
  ImGuiTextBuffer__appendfv_28char_20const__2c_20void__29($5 | 0, $0 | 0, $1 | 0);
  $1 = $4 + -1 | 0;
  $1 = $1 >>> 0 > $4 >>> 0 ? 0 : $1;
  label$1 : {
   if (!((HEAPU8[($3 + 23537 | 0) >> 0] | 0) & 4 | 0)) {
    break label$1
   }
   $4 = HEAP32[($3 + 23548 | 0) >> 2] | 0;
   HEAP32[$2 >> 2] = ($4 ? $4 : 92724) + $1 | 0;
   iprintf(66052 | 0, $2 | 0) | 0;
  }
  $49 = $3 + 23552 | 0;
  $4 = HEAP32[($3 + 23548 | 0) >> 2] | 0;
  $55 = $4 ? $4 : 92724;
  $3 = HEAP32[($3 + 23540 | 0) >> 2] | 0;
  $4 = $3 + -1 | 0;
  ImGuiTextIndex__append_28char_20const__2c_20int_2c_20int_29($49 | 0, $55 | 0, $1 | 0, ($4 >>> 0 > $3 >>> 0 ? 0 : $4) | 0);
  __stack_pointer = $2 + 32 | 0;
 }
 
 function ImGui__GetStyle_28_29() {
  return (HEAP32[(0 + 92720 | 0) >> 2] | 0) + 14396 | 0 | 0;
 }
 
 function ImGui__GetColorU32_28int_2c_20float_29($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $3 = Math_fround(0), $4 = 0, $5 = 0, $2 = 0;
  label$1 : {
   label$2 : {
    $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    $0 = ($2 + 14396 | 0) + ($0 << 4 | 0) | 0;
    $3 = Math_fround(HEAPF32[($0 + 204 | 0) >> 2]);
    $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($3, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
    if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
     break label$2
    }
    $4 = ~~$3;
    break label$1;
   }
   $4 = -2147483648;
  }
  $4 = $4 << 8 | 0;
  label$3 : {
   label$4 : {
    $3 = Math_fround(HEAPF32[($0 + 200 | 0) >> 2]);
    $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($3, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
    if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
     break label$4
    }
    $5 = ~~$3;
    break label$3;
   }
   $5 = -2147483648;
  }
  $4 = $4 | $5 | 0;
  label$5 : {
   label$6 : {
    $3 = Math_fround(HEAPF32[($0 + 208 | 0) >> 2]);
    $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($3, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
    if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
     break label$6
    }
    $5 = ~~$3;
    break label$5;
   }
   $5 = -2147483648;
  }
  $4 = $4 | ($5 << 16 | 0) | 0;
  label$7 : {
   label$8 : {
    $1 = Math_fround(Math_fround(HEAPF32[($0 + 212 | 0) >> 2]) * Math_fround(Math_fround(HEAPF32[($2 + 14396 | 0) >> 2]) * $1));
    $1 = Math_fround(Math_fround(($1 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($1, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
    if (!(Math_fround(Math_abs($1)) < Math_fround(2147483648.0))) {
     break label$8
    }
    $0 = ~~$1;
    break label$7;
   }
   $0 = -2147483648;
  }
  return $4 | ($0 << 24 | 0) | 0 | 0;
 }
 
 function ImGui__PushStyleColor_28int_2c_20unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $6 = 0, $4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $5 = 0, $7 = 0, $8 = 0, $2 = 0, $9 = 0, $3 = 0, $23 = 0, $28 = 0, $107 = 0, $111 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = $2 + 8 | 0;
  $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $5 = $4 + ($0 << 4 | 0) | 0;
  i64toi32_i32$2 = $5 + 14604 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $23 = i64toi32_i32$0;
  i64toi32_i32$0 = $3;
  HEAP32[i64toi32_i32$0 >> 2] = $23;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $5 = $5 + 14596 | 0;
  i64toi32_i32$2 = $5;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $28 = i64toi32_i32$1;
  i64toi32_i32$1 = $2;
  HEAP32[i64toi32_i32$1 >> 2] = $28;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   $6 = HEAP32[($4 + 18476 | 0) >> 2] | 0;
   if (($6 | 0) != (HEAP32[($4 + 18480 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $7 = $6 + 1 | 0;
   $8 = 8;
   label$2 : {
    if (!$6) {
     break label$2
    }
    $8 = (($6 | 0) / (2 | 0) | 0) + $6 | 0;
   }
   $8 = ($8 | 0) > ($7 | 0) ? $8 : $7;
   if (($6 | 0) >= ($8 | 0)) {
    break label$1
   }
   $6 = $4 + 184 | 0;
   HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1 | 0;
   $6 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](Math_imul($8, 20), HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$3 : {
    $7 = HEAP32[($4 + 18484 | 0) >> 2] | 0;
    if (!$7) {
     break label$3
    }
    __memcpy($6 | 0, $7 | 0, Math_imul(HEAP32[($4 + 18476 | 0) >> 2] | 0, 20) | 0) | 0;
    label$4 : {
     $7 = HEAP32[($4 + 18484 | 0) >> 2] | 0;
     if (!$7) {
      break label$4
     }
     $9 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$9) {
      break label$4
     }
     $9 = $9 + 184 | 0;
     HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($7, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($4 + 18480 | 0) >> 2] = $8;
   HEAP32[($4 + 18484 | 0) >> 2] = $6;
   $6 = HEAP32[($4 + 18476 | 0) >> 2] | 0;
  }
  $6 = (HEAP32[($4 + 18484 | 0) >> 2] | 0) + Math_imul($6, 20) | 0;
  HEAP32[$6 >> 2] = $0;
  i64toi32_i32$2 = $2;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $107 = i64toi32_i32$0;
  i64toi32_i32$0 = $6;
  HEAP32[($6 + 4 | 0) >> 2] = $107;
  HEAP32[($6 + 8 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $111 = i64toi32_i32$1;
  i64toi32_i32$1 = $6 + 12 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $111;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4 + 18476 | 0) >> 2] = (HEAP32[($4 + 18476 | 0) >> 2] | 0) + 1 | 0;
  HEAPF32[($5 + 12 | 0) >> 2] = Math_fround(Math_fround(($1 >>> 24 | 0) >>> 0) * Math_fround(.003921568859368563));
  HEAPF32[($5 + 8 | 0) >> 2] = Math_fround(Math_fround((($1 >>> 16 | 0) & 255 | 0) >>> 0) * Math_fround(.003921568859368563));
  HEAPF32[($5 + 4 | 0) >> 2] = Math_fround(Math_fround((($1 >>> 8 | 0) & 255 | 0) >>> 0) * Math_fround(.003921568859368563));
  HEAPF32[$5 >> 2] = Math_fround(Math_fround(($1 & 255 | 0) >>> 0) * Math_fround(.003921568859368563));
  __stack_pointer = $2 + 16 | 0;
 }
 
 function ImGui__PushStyleColor_28int_2c_20ImVec4_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $4 = 0, $7 = 0, $8 = 0, $2 = 0, $9 = 0, $6 = 0, $3 = 0, $23 = 0, $28 = 0, $107 = 0, $111 = 0, $120 = 0, $123 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = $2 + 8 | 0;
  $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $5 = $4 + ($0 << 4 | 0) | 0;
  i64toi32_i32$2 = $5 + 14604 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $23 = i64toi32_i32$0;
  i64toi32_i32$0 = $3;
  HEAP32[i64toi32_i32$0 >> 2] = $23;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $6 = $5 + 14596 | 0;
  i64toi32_i32$2 = $6;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $28 = i64toi32_i32$1;
  i64toi32_i32$1 = $2;
  HEAP32[i64toi32_i32$1 >> 2] = $28;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   $5 = HEAP32[($4 + 18476 | 0) >> 2] | 0;
   if (($5 | 0) != (HEAP32[($4 + 18480 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $7 = $5 + 1 | 0;
   $8 = 8;
   label$2 : {
    if (!$5) {
     break label$2
    }
    $8 = (($5 | 0) / (2 | 0) | 0) + $5 | 0;
   }
   $8 = ($8 | 0) > ($7 | 0) ? $8 : $7;
   if (($5 | 0) >= ($8 | 0)) {
    break label$1
   }
   $5 = $4 + 184 | 0;
   HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1 | 0;
   $5 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](Math_imul($8, 20), HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$3 : {
    $7 = HEAP32[($4 + 18484 | 0) >> 2] | 0;
    if (!$7) {
     break label$3
    }
    __memcpy($5 | 0, $7 | 0, Math_imul(HEAP32[($4 + 18476 | 0) >> 2] | 0, 20) | 0) | 0;
    label$4 : {
     $7 = HEAP32[($4 + 18484 | 0) >> 2] | 0;
     if (!$7) {
      break label$4
     }
     $9 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$9) {
      break label$4
     }
     $9 = $9 + 184 | 0;
     HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($7, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($4 + 18480 | 0) >> 2] = $8;
   HEAP32[($4 + 18484 | 0) >> 2] = $5;
   $5 = HEAP32[($4 + 18476 | 0) >> 2] | 0;
  }
  $5 = (HEAP32[($4 + 18484 | 0) >> 2] | 0) + Math_imul($5, 20) | 0;
  HEAP32[$5 >> 2] = $0;
  i64toi32_i32$2 = $2;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $107 = i64toi32_i32$0;
  i64toi32_i32$0 = $5;
  HEAP32[($5 + 4 | 0) >> 2] = $107;
  HEAP32[($5 + 8 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $111 = i64toi32_i32$1;
  i64toi32_i32$1 = $5 + 12 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $111;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4 + 18476 | 0) >> 2] = (HEAP32[($4 + 18476 | 0) >> 2] | 0) + 1 | 0;
  i64toi32_i32$2 = $1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $120 = i64toi32_i32$0;
  i64toi32_i32$0 = $6 + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $120;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $123 = i64toi32_i32$1;
  i64toi32_i32$1 = $6;
  HEAP32[i64toi32_i32$1 >> 2] = $123;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  __stack_pointer = $2 + 16 | 0;
 }
 
 function ImGui__PopStyleColor_28int_29($0) {
  $0 = $0 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $1 = 0, $3 = 0, $4 = 0, $34 = 0, $38 = 0, $63 = 0, $68 = 0, $87 = 0, $92 = 0;
  label$1 : {
   $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $2 = HEAP32[($1 + 18476 | 0) >> 2] | 0;
   $3 = ($2 | 0) < ($0 | 0) ? $2 : $0;
   if (($3 | 0) < (1 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($3 & 1 | 0) {
      break label$3
     }
     $0 = $3;
     break label$2;
    }
    $0 = (Math_imul($2, 20) + (HEAP32[($1 + 18484 | 0) >> 2] | 0) | 0) + -20 | 0;
    $2 = $1 + ((HEAP32[$0 >> 2] | 0) << 4 | 0) | 0;
    i64toi32_i32$2 = $0 + 12 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $34 = i64toi32_i32$0;
    i64toi32_i32$0 = $2 + 14604 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $34;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    $38 = i64toi32_i32$1;
    i64toi32_i32$1 = $2 + 14596 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $38;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $2 = (HEAP32[($1 + 18476 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[($1 + 18476 | 0) >> 2] = $2;
    $0 = $3 + -1 | 0;
   }
   if (($3 | 0) == (1 | 0)) {
    break label$1
   }
   $3 = $1 + 14596 | 0;
   label$4 : while (1) {
    $2 = (Math_imul($2, 20) + (HEAP32[($1 + 18484 | 0) >> 2] | 0) | 0) + -20 | 0;
    $4 = $3 + ((HEAP32[$2 >> 2] | 0) << 4 | 0) | 0;
    i64toi32_i32$2 = $2;
    i64toi32_i32$0 = HEAP32[($2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($2 + 8 | 0) >> 2] | 0;
    $63 = i64toi32_i32$0;
    i64toi32_i32$0 = $4;
    HEAP32[i64toi32_i32$0 >> 2] = $63;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $2 + 12 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $68 = i64toi32_i32$1;
    i64toi32_i32$1 = $4 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $68;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $2 = HEAP32[($1 + 18476 | 0) >> 2] | 0;
    HEAP32[($1 + 18476 | 0) >> 2] = $2 + -1 | 0;
    $2 = (Math_imul($2, 20) + (HEAP32[($1 + 18484 | 0) >> 2] | 0) | 0) + -40 | 0;
    $4 = $3 + ((HEAP32[$2 >> 2] | 0) << 4 | 0) | 0;
    i64toi32_i32$2 = $2;
    i64toi32_i32$0 = HEAP32[($2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($2 + 8 | 0) >> 2] | 0;
    $87 = i64toi32_i32$0;
    i64toi32_i32$0 = $4;
    HEAP32[i64toi32_i32$0 >> 2] = $87;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $2 + 12 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $92 = i64toi32_i32$1;
    i64toi32_i32$1 = $4 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $92;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $2 = (HEAP32[($1 + 18476 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[($1 + 18476 | 0) >> 2] = $2;
    $4 = $0 + -3 | 0;
    $0 = $0 + -2 | 0;
    if ($4 >>> 0 < -2 >>> 0) {
     continue label$4
    }
    break label$4;
   };
  }
 }
 
 function ImGui__PushStyleVar_28int_2c_20ImVec2_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $7 = 0, $2 = 0, i64toi32_i32$0 = 0, $9 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $8 = 0, i64toi32_i32$4 = 0, $10 = 0, $3 = 0, i64toi32_i32$3 = 0, $16 = 0, $5 = 0, $6 = 0, $120 = 0;
  label$1 : {
   if ((HEAP32[(Math_imul($0, 12) + 72304 | 0) >> 2] | 0 | 0) != (8 | 0)) {
    break label$1
   }
   if (!((25348196 >>> $0 | 0) & 1 | 0)) {
    break label$1
   }
   $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $3 = ($2 + (HEAP32[(Math_imul($0, 12) + 72312 | 0) >> 2] | 0) | 0) + 14396 | 0;
   i64toi32_i32$2 = $3;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $5 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $16 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $16 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $6 = $16;
   label$2 : {
    $7 = HEAP32[($2 + 18488 | 0) >> 2] | 0;
    if (($7 | 0) != (HEAP32[($2 + 18492 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    $8 = $7 + 1 | 0;
    label$3 : {
     label$4 : {
      if ($7) {
       break label$4
      }
      $9 = 8;
      break label$3;
     }
     $9 = (($7 | 0) / (2 | 0) | 0) + $7 | 0;
    }
    $8 = ($9 | 0) > ($8 | 0) ? $9 : $8;
    if (($7 | 0) >= ($8 | 0)) {
     break label$2
    }
    $7 = $2 + 184 | 0;
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1 | 0;
    $7 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](Math_imul($8, 12), HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
    label$5 : {
     $9 = HEAP32[($2 + 18496 | 0) >> 2] | 0;
     if (!$9) {
      break label$5
     }
     __memcpy($7 | 0, $9 | 0, Math_imul(HEAP32[($2 + 18488 | 0) >> 2] | 0, 12) | 0) | 0;
     label$6 : {
      $9 = HEAP32[($2 + 18496 | 0) >> 2] | 0;
      if (!$9) {
       break label$6
      }
      $10 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$10) {
       break label$6
      }
      $10 = $10 + 184 | 0;
      HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + -1 | 0;
     }
     FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($9, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    }
    HEAP32[($2 + 18492 | 0) >> 2] = $8;
    HEAP32[($2 + 18496 | 0) >> 2] = $7;
    $7 = HEAP32[($2 + 18488 | 0) >> 2] | 0;
   }
   $7 = (HEAP32[($2 + 18496 | 0) >> 2] | 0) + Math_imul($7, 12) | 0;
   HEAP32[($7 + 8 | 0) >> 2] = $6;
   HEAP32[($7 + 4 | 0) >> 2] = $5;
   HEAP32[$7 >> 2] = $0;
   HEAP32[($2 + 18488 | 0) >> 2] = (HEAP32[($2 + 18488 | 0) >> 2] | 0) + 1 | 0;
   i64toi32_i32$1 = $1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $120 = i64toi32_i32$0;
   i64toi32_i32$0 = $3;
   HEAP32[i64toi32_i32$0 >> 2] = $120;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  }
 }
 
 function ImGui__PopStyleVar_28int_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $2 = 0, $7 = 0, $1 = 0, $6 = 0, $4 = 0, $5 = 0;
  label$1 : {
   $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $2 = HEAP32[($1 + 18488 | 0) >> 2] | 0;
   $3 = ($2 | 0) < ($0 | 0) ? $2 : $0;
   if (($3 | 0) < (1 | 0)) {
    break label$1
   }
   $4 = $1 + 14396 | 0;
   $5 = HEAP32[($1 + 18496 | 0) >> 2] | 0;
   label$2 : while (1) {
    $0 = $3;
    label$3 : {
     $2 = $2 + -1 | 0;
     $6 = $5 + Math_imul($2, 12) | 0;
     $3 = HEAP32[$6 >> 2] | 0;
     $7 = Math_imul($3, 12);
     if ((HEAP32[($7 + 72304 | 0) >> 2] | 0 | 0) != (8 | 0)) {
      break label$3
     }
     $7 = $4 + (HEAP32[($7 + 72312 | 0) >> 2] | 0) | 0;
     label$4 : {
      if (!((8206235 >>> $3 | 0) & 1 | 0)) {
       break label$4
      }
      HEAPF32[$7 >> 2] = Math_fround(HEAPF32[($6 + 4 | 0) >> 2]);
      break label$3;
     }
     if (!((25348196 >>> $3 | 0) & 1 | 0)) {
      break label$3
     }
     HEAPF32[$7 >> 2] = Math_fround(HEAPF32[($6 + 4 | 0) >> 2]);
     HEAPF32[($7 + 4 | 0) >> 2] = Math_fround(HEAPF32[($6 + 8 | 0) >> 2]);
    }
    HEAP32[($1 + 18488 | 0) >> 2] = $2;
    $3 = $0 + -1 | 0;
    if (($0 | 0) > (1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function ImGui__FindRenderedTextEnd_28char_20const__2c_20char_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  label$1 : {
   $2 = $1 ? $1 : -1;
   if ($2 >>> 0 <= $0 >>> 0) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      $1 = HEAPU8[$0 >> 0] | 0;
      if (($1 | 0) == (35 | 0)) {
       break label$4
      }
      if ($1) {
       break label$3
      }
      break label$1;
     }
     if ((HEAPU8[($0 + 1 | 0) >> 0] | 0 | 0) == (35 | 0)) {
      break label$1
     }
    }
    $0 = $0 + 1 | 0;
    if (($0 | 0) != ($2 | 0)) {
     continue label$2
    }
    break label$2;
   };
   $0 = $2;
  }
  return $0 | 0;
 }
 
 function ImGui__RenderText_28ImVec2_2c_20char_20const__2c_20char_20const__2c_20bool_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $7 = Math_fround(0), $6 = 0, $4 = 0, $5 = 0;
  $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $5 = HEAP32[($4 + 16116 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$3) {
      break label$3
     }
     $6 = $2 ? $2 : -1;
     if ($6 >>> 0 <= $1 >>> 0) {
      break label$1
     }
     $2 = $1;
     label$4 : while (1) {
      label$5 : {
       label$6 : {
        $3 = HEAPU8[$2 >> 0] | 0;
        if (($3 | 0) == (35 | 0)) {
         break label$6
        }
        if ($3) {
         break label$5
        }
        break label$2;
       }
       if ((HEAPU8[($2 + 1 | 0) >> 0] | 0 | 0) == (35 | 0)) {
        break label$2
       }
      }
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($6 | 0)) {
       continue label$4
      }
      break label$4;
     };
     $2 = $6;
     break label$2;
    }
    if ($2) {
     break label$2
    }
    $2 = $1 + (strlen($1 | 0) | 0) | 0;
   }
   if (($2 | 0) == ($1 | 0)) {
    break label$1
   }
   label$7 : {
    label$8 : {
     $7 = Math_fround(HEAPF32[($4 + 14600 | 0) >> 2]);
     $7 = Math_fround(Math_fround(($7 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($7, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
      break label$8
     }
     $3 = ~~$7;
     break label$7;
    }
    $3 = -2147483648;
   }
   $3 = $3 << 8 | 0;
   label$9 : {
    label$10 : {
     $7 = Math_fround(HEAPF32[($4 + 14596 | 0) >> 2]);
     $7 = Math_fround(Math_fround(($7 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($7, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
      break label$10
     }
     $6 = ~~$7;
     break label$9;
    }
    $6 = -2147483648;
   }
   $3 = $3 | $6 | 0;
   label$11 : {
    label$12 : {
     $7 = Math_fround(HEAPF32[($4 + 14604 | 0) >> 2]);
     $7 = Math_fround(Math_fround(($7 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($7, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
      break label$12
     }
     $6 = ~~$7;
     break label$11;
    }
    $6 = -2147483648;
   }
   $3 = $3 | ($6 << 16 | 0) | 0;
   label$13 : {
    label$14 : {
     $7 = Math_fround(Math_fround(HEAPF32[($4 + 14608 | 0) >> 2]) * Math_fround(HEAPF32[($4 + 14396 | 0) >> 2]));
     $7 = Math_fround(Math_fround(($7 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($7, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
      break label$14
     }
     $6 = ~~$7;
     break label$13;
    }
    $6 = -2147483648;
   }
   ImDrawList__AddText_28ImFont_20const__2c_20float_2c_20ImVec2_20const__2c_20unsigned_20int_2c_20char_20const__2c_20char_20const__2c_20float_2c_20ImVec4_20const__29(HEAP32[($5 + 672 | 0) >> 2] | 0 | 0, HEAP32[($4 + 15484 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($4 + 15488 | 0) >> 2])), $0 | 0, $3 | ($6 << 24 | 0) | 0 | 0, $1 | 0, $2 | 0, Math_fround(Math_fround(0.0)), 0 | 0);
   if (!(HEAPU8[($4 + 23484 | 0) >> 0] | 0)) {
    break label$1
   }
   ImGui__LogRenderedText_28ImVec2_20const__2c_20char_20const__2c_20char_20const__29($0 | 0, $1 | 0, $2 | 0);
  }
 }
 
 function ImGui__LogRenderedText_28ImVec2_20const__2c_20char_20const__2c_20char_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $8 = 0, $4 = 0, $6 = 0, $3 = 0, $5 = 0, $7 = 0, $10 = Math_fround(0), $9 = Math_fround(0);
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  label$1 : while (1) {
   $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $5 = HEAP32[($4 + 23512 | 0) >> 2] | 0;
   HEAP32[($4 + 23512 | 0) >> 2] = 0;
   $6 = HEAP32[($4 + 23508 | 0) >> 2] | 0;
   HEAP32[($4 + 23508 | 0) >> 2] = 0;
   $7 = HEAP32[($4 + 16116 | 0) >> 2] | 0;
   label$2 : {
    if ($2) {
     break label$2
    }
    $2 = -1;
    $8 = $1;
    if (($8 | 0) == (-1 | 0)) {
     break label$2
    }
    label$3 : while (1) {
     label$4 : {
      label$5 : {
       $2 = HEAPU8[$8 >> 0] | 0;
       if (($2 | 0) == (35 | 0)) {
        break label$5
       }
       if ($2) {
        break label$4
       }
       $2 = $8;
       break label$2;
      }
      if ((HEAPU8[($8 + 1 | 0) >> 0] | 0 | 0) != (35 | 0)) {
       break label$4
      }
      $2 = $8;
      break label$2;
     }
     $2 = -1;
     $8 = $8 + 1 | 0;
     if (($8 | 0) != (-1 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   label$6 : {
    if (!$0) {
     break label$6
    }
    $9 = Math_fround(HEAPF32[($4 + 23516 | 0) >> 2]);
    $10 = Math_fround(HEAPF32[($0 + 4 | 0) >> 2]);
    HEAPF32[($4 + 23516 | 0) >> 2] = $10;
    if (!($10 > Math_fround(Math_fround($9 + Math_fround(HEAPF32[($4 + 14460 | 0) >> 2])) + Math_fround(1.0)))) {
     break label$6
    }
    ImGui__LogText_28char_20const__2c_20____29(70526 | 0, 0 | 0);
    HEAP8[($4 + 23520 | 0) >> 0] = 1;
   }
   label$7 : {
    if (!$6) {
     break label$7
    }
    ImGui__LogRenderedText_28ImVec2_20const__2c_20char_20const__2c_20char_20const__29($0 | 0, $6 | 0, $6 + (strlen($6 | 0) | 0) | 0 | 0);
   }
   label$8 : {
    $6 = HEAP32[($4 + 23524 | 0) >> 2] | 0;
    $8 = HEAP32[($7 + 428 | 0) >> 2] | 0;
    if (($6 | 0) <= ($8 | 0)) {
     break label$8
    }
    HEAP32[($4 + 23524 | 0) >> 2] = $8;
    $6 = $8;
   }
   $7 = ($8 - $6 | 0) << 2 | 0;
   label$9 : while (1) {
    label$10 : {
     label$11 : {
      $8 = memchr($1 | 0, 10 | 0, $2 - $1 | 0 | 0) | 0;
      $8 = $8 ? $8 : $2;
      if (($1 | 0) != ($8 | 0)) {
       break label$11
      }
      if (($8 | 0) == ($2 | 0)) {
       break label$10
      }
     }
     $6 = HEAPU8[($4 + 23520 | 0) >> 0] | 0;
     HEAP32[($3 + 4 | 0) >> 2] = 70527;
     HEAP32[$3 >> 2] = $6 ? $7 : 1;
     HEAP32[($3 + 12 | 0) >> 2] = $1;
     HEAP32[($3 + 8 | 0) >> 2] = $8 - $1 | 0;
     ImGui__LogText_28char_20const__2c_20____29(66035 | 0, $3 | 0);
     HEAP8[($4 + 23520 | 0) >> 0] = 0;
     if ((HEAPU8[$8 >> 0] | 0 | 0) != (10 | 0)) {
      break label$10
     }
     ImGui__LogText_28char_20const__2c_20____29(70526 | 0, 0 | 0);
     HEAP8[($4 + 23520 | 0) >> 0] = 1;
    }
    $1 = $8 + 1 | 0;
    if (($8 | 0) != ($2 | 0)) {
     continue label$9
    }
    break label$9;
   };
   label$12 : {
    if (!$5) {
     break label$12
    }
    $2 = $5 + (strlen($5 | 0) | 0) | 0;
    $1 = $5;
    continue label$1;
   }
   break label$1;
  };
  __stack_pointer = $3 + 16 | 0;
 }
 
 function ImGui__LogText_28char_20const__2c_20____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $5 = 0, $6 = 0, $7 = 0, $2 = 0, $4 = 0, $76 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  label$1 : {
   $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   if (!(HEAPU8[($3 + 23484 | 0) >> 0] | 0)) {
    break label$1
   }
   HEAP32[($2 + 12 | 0) >> 2] = $1;
   $4 = $3 + 23496 | 0;
   label$2 : {
    if (!(HEAP32[($3 + 23492 | 0) >> 2] | 0)) {
     break label$2
    }
    label$3 : {
     if ((HEAP32[($3 + 23500 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
      break label$3
     }
     label$4 : {
      $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$5) {
       break label$4
      }
      $5 = $5 + 184 | 0;
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1 | 0;
     }
     $5 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](0, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
     label$5 : {
      $6 = HEAP32[($3 + 23504 | 0) >> 2] | 0;
      if (!$6) {
       break label$5
      }
      __memcpy($5 | 0, $6 | 0, HEAP32[($3 + 23496 | 0) >> 2] | 0 | 0) | 0;
      label$6 : {
       $6 = HEAP32[($3 + 23504 | 0) >> 2] | 0;
       if (!$6) {
        break label$6
       }
       $7 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
       if (!$7) {
        break label$6
       }
       $7 = $7 + 184 | 0;
       HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1 | 0;
      }
      FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($6, HEAP32[(0 + 92728 | 0) >> 2] | 0);
     }
     HEAP32[($3 + 23500 | 0) >> 2] = 0;
     HEAP32[($3 + 23504 | 0) >> 2] = $5;
    }
    HEAP32[($3 + 23496 | 0) >> 2] = 0;
    ImGuiTextBuffer__appendfv_28char_20const__2c_20void__29($4 | 0, $0 | 0, $1 | 0);
    $1 = HEAP32[($3 + 23504 | 0) >> 2] | 0;
    $76 = $1 ? $1 : 92724;
    $1 = HEAP32[($3 + 23496 | 0) >> 2] | 0;
    $0 = $1 + -1 | 0;
    fwrite($76 | 0, 1 | 0, ($0 >>> 0 > $1 >>> 0 ? 0 : $0) | 0, HEAP32[($3 + 23492 | 0) >> 2] | 0 | 0) | 0;
    break label$1;
   }
   ImGuiTextBuffer__appendfv_28char_20const__2c_20void__29($4 | 0, $0 | 0, $1 | 0);
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function ImGui__RenderTextWrapped_28ImVec2_2c_20char_20const__2c_20char_20const__2c_20float_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = Math_fround($3);
  var $6 = Math_fround(0), $4 = 0, $7 = 0, $8 = 0, $5 = 0;
  $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $5 = HEAP32[($4 + 16116 | 0) >> 2] | 0;
  label$1 : {
   if ($2) {
    break label$1
   }
   $2 = $1 + (strlen($1 | 0) | 0) | 0;
  }
  label$2 : {
   if (($2 | 0) == ($1 | 0)) {
    break label$2
   }
   label$3 : {
    label$4 : {
     $6 = Math_fround(HEAPF32[($4 + 14600 | 0) >> 2]);
     $6 = Math_fround(Math_fround(($6 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($6, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($6)) < Math_fround(2147483648.0))) {
      break label$4
     }
     $7 = ~~$6;
     break label$3;
    }
    $7 = -2147483648;
   }
   $7 = $7 << 8 | 0;
   label$5 : {
    label$6 : {
     $6 = Math_fround(HEAPF32[($4 + 14596 | 0) >> 2]);
     $6 = Math_fround(Math_fround(($6 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($6, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($6)) < Math_fround(2147483648.0))) {
      break label$6
     }
     $8 = ~~$6;
     break label$5;
    }
    $8 = -2147483648;
   }
   $7 = $7 | $8 | 0;
   label$7 : {
    label$8 : {
     $6 = Math_fround(HEAPF32[($4 + 14604 | 0) >> 2]);
     $6 = Math_fround(Math_fround(($6 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($6, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($6)) < Math_fround(2147483648.0))) {
      break label$8
     }
     $8 = ~~$6;
     break label$7;
    }
    $8 = -2147483648;
   }
   $7 = $7 | ($8 << 16 | 0) | 0;
   label$9 : {
    label$10 : {
     $6 = Math_fround(Math_fround(HEAPF32[($4 + 14608 | 0) >> 2]) * Math_fround(HEAPF32[($4 + 14396 | 0) >> 2]));
     $6 = Math_fround(Math_fround(($6 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($6, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($6)) < Math_fround(2147483648.0))) {
      break label$10
     }
     $8 = ~~$6;
     break label$9;
    }
    $8 = -2147483648;
   }
   ImDrawList__AddText_28ImFont_20const__2c_20float_2c_20ImVec2_20const__2c_20unsigned_20int_2c_20char_20const__2c_20char_20const__2c_20float_2c_20ImVec4_20const__29(HEAP32[($5 + 672 | 0) >> 2] | 0 | 0, HEAP32[($4 + 15484 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($4 + 15488 | 0) >> 2])), $0 | 0, $7 | ($8 << 24 | 0) | 0 | 0, $1 | 0, $2 | 0, Math_fround($3), 0 | 0);
   if (!(HEAPU8[($4 + 23484 | 0) >> 0] | 0)) {
    break label$2
   }
   ImGui__LogRenderedText_28ImVec2_20const__2c_20char_20const__2c_20char_20const__29($0 | 0, $1 | 0, $2 | 0);
  }
 }
 
 function ImGui__RenderTextClippedEx_28ImDrawList__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20char_20const__2c_20char_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImRect_20const__29($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $11 = Math_fround(0), $8 = 0, i64toi32_i32$0 = 0, $13 = Math_fround(0), i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $9 = 0, $12 = Math_fround(0), i64toi32_i32$4 = 0, $10 = 0, $9$hi = 0, i64toi32_i32$3 = 0, $22 = 0, $14 = Math_fround(0), $15 = Math_fround(0);
  $8 = __stack_pointer - 32 | 0;
  __stack_pointer = $8;
  i64toi32_i32$2 = $1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $9 = i64toi32_i32$0;
  $9$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $8;
  HEAP32[($8 + 24 | 0) >> 2] = $9;
  HEAP32[($8 + 28 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $9;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $22 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $22 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $10 = $22;
  i64toi32_i32$0 = $9$hi;
  $11 = (wasm2js_scratch_store_i32(2, $9), wasm2js_scratch_load_f32());
  label$1 : {
   label$2 : {
    if (!$5) {
     break label$2
    }
    i64toi32_i32$1 = $5;
    i64toi32_i32$0 = HEAP32[$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($5 + 4 | 0) >> 2] | 0;
    $9 = i64toi32_i32$0;
    $9$hi = i64toi32_i32$2;
    i64toi32_i32$0 = $8;
    HEAP32[($8 + 16 | 0) >> 2] = $9;
    HEAP32[($8 + 20 | 0) >> 2] = i64toi32_i32$2;
    $12 = (wasm2js_scratch_store_i32(2, $9), wasm2js_scratch_load_f32());
    break label$1;
   }
   $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $13 = Math_fround(HEAPF32[($5 + 15488 | 0) >> 2]);
   label$3 : {
    if (($4 | 0) != ($3 | 0)) {
     break label$3
    }
    HEAPF32[($8 + 20 | 0) >> 2] = $13;
    HEAP32[($8 + 16 | 0) >> 2] = 0;
    $12 = Math_fround(0.0);
    break label$1;
   }
   ImFont__CalcTextSizeA_28float_2c_20float_2c_20float_2c_20char_20const__2c_20char_20const__2c_20char_20const___29_20const($8 + 16 | 0 | 0, HEAP32[($5 + 15484 | 0) >> 2] | 0 | 0, Math_fround($13), Math_fround(Math_fround(3402823466385288598117041.0e14)), Math_fround(Math_fround(0.0)), $3 | 0, $4 | 0, 0 | 0);
   label$4 : {
    label$5 : {
     $13 = Math_fround(Math_fround(HEAPF32[($8 + 16 | 0) >> 2]) + Math_fround(.9999899864196777));
     if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
      break label$5
     }
     $5 = ~~$13;
     break label$4;
    }
    $5 = -2147483648;
   }
   $12 = Math_fround($5 | 0);
   HEAPF32[($8 + 16 | 0) >> 2] = $12;
  }
  $13 = (wasm2js_scratch_store_i32(2, $10), wasm2js_scratch_load_f32());
  $5 = 1;
  label$6 : {
   $10 = $7 ? $7 + 8 | 0 : $2;
   $14 = Math_fround(HEAPF32[$10 >> 2]);
   if (Math_fround($12 + $11) >= $14) {
    break label$6
   }
   $5 = Math_fround(Math_fround(HEAPF32[($8 + 20 | 0) >> 2]) + $13) >= Math_fround(HEAPF32[($10 + 4 | 0) >> 2]);
  }
  $1 = $7 ? $7 : $1;
  label$7 : {
   if (!$7) {
    break label$7
   }
   $7 = 1;
   label$8 : {
    if (Math_fround(HEAPF32[$1 >> 2]) > $11) {
     break label$8
    }
    $7 = Math_fround(HEAPF32[($1 + 4 | 0) >> 2]) > $13;
   }
   $5 = ($7 | $5 | 0 | 0) != (0 | 0);
  }
  label$9 : {
   $15 = Math_fround(HEAPF32[$6 >> 2]);
   if (!($15 > Math_fround(0.0))) {
    break label$9
   }
   $12 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$2 >> 2]) - $11) - $12) * $15) + $11);
   HEAPF32[($8 + 24 | 0) >> 2] = $12 <= $11 ? $11 : $12;
  }
  label$10 : {
   $11 = Math_fround(HEAPF32[($6 + 4 | 0) >> 2]);
   if (!($11 > Math_fround(0.0))) {
    break label$10
   }
   $11 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($2 + 4 | 0) >> 2]) - $13) - Math_fround(HEAPF32[($8 + 20 | 0) >> 2])) * $11) + $13);
   HEAPF32[($8 + 28 | 0) >> 2] = $11 <= $13 ? $13 : $11;
  }
  label$11 : {
   label$12 : {
    if (!$5) {
     break label$12
    }
    i64toi32_i32$1 = $1;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $9 = i64toi32_i32$2;
    $9$hi = i64toi32_i32$0;
    HEAPF32[($8 + 12 | 0) >> 2] = Math_fround(HEAPF32[($10 + 4 | 0) >> 2]);
    HEAPF32[($8 + 8 | 0) >> 2] = $14;
    i64toi32_i32$2 = $8;
    HEAP32[$8 >> 2] = $9;
    HEAP32[($8 + 4 | 0) >> 2] = i64toi32_i32$0;
    label$13 : {
     label$14 : {
      $7 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      $11 = Math_fround(HEAPF32[($7 + 14600 | 0) >> 2]);
      $11 = Math_fround(Math_fround(($11 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($11, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
      if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
       break label$14
      }
      $5 = ~~$11;
      break label$13;
     }
     $5 = -2147483648;
    }
    $5 = $5 << 8 | 0;
    label$15 : {
     label$16 : {
      $11 = Math_fround(HEAPF32[($7 + 14596 | 0) >> 2]);
      $11 = Math_fround(Math_fround(($11 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($11, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
      if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
       break label$16
      }
      $1 = ~~$11;
      break label$15;
     }
     $1 = -2147483648;
    }
    $5 = $5 | $1 | 0;
    label$17 : {
     label$18 : {
      $11 = Math_fround(HEAPF32[($7 + 14604 | 0) >> 2]);
      $11 = Math_fround(Math_fround(($11 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($11, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
      if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
       break label$18
      }
      $1 = ~~$11;
      break label$17;
     }
     $1 = -2147483648;
    }
    $5 = $5 | ($1 << 16 | 0) | 0;
    label$19 : {
     label$20 : {
      $11 = Math_fround(Math_fround(HEAPF32[($7 + 14608 | 0) >> 2]) * Math_fround(HEAPF32[($7 + 14396 | 0) >> 2]));
      $11 = Math_fround(Math_fround(($11 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($11, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
      if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
       break label$20
      }
      $7 = ~~$11;
      break label$19;
     }
     $7 = -2147483648;
    }
    ImDrawList__AddText_28ImFont_20const__2c_20float_2c_20ImVec2_20const__2c_20unsigned_20int_2c_20char_20const__2c_20char_20const__2c_20float_2c_20ImVec4_20const__29($0 | 0, 0 | 0, Math_fround(Math_fround(0.0)), $8 + 24 | 0 | 0, $5 | ($7 << 24 | 0) | 0 | 0, $3 | 0, $4 | 0, Math_fround(Math_fround(0.0)), $8 | 0);
    break label$11;
   }
   label$21 : {
    label$22 : {
     $7 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     $11 = Math_fround(HEAPF32[($7 + 14600 | 0) >> 2]);
     $11 = Math_fround(Math_fround(($11 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($11, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
      break label$22
     }
     $5 = ~~$11;
     break label$21;
    }
    $5 = -2147483648;
   }
   $5 = $5 << 8 | 0;
   label$23 : {
    label$24 : {
     $11 = Math_fround(HEAPF32[($7 + 14596 | 0) >> 2]);
     $11 = Math_fround(Math_fround(($11 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($11, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
      break label$24
     }
     $1 = ~~$11;
     break label$23;
    }
    $1 = -2147483648;
   }
   $5 = $5 | $1 | 0;
   label$25 : {
    label$26 : {
     $11 = Math_fround(HEAPF32[($7 + 14604 | 0) >> 2]);
     $11 = Math_fround(Math_fround(($11 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($11, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
      break label$26
     }
     $1 = ~~$11;
     break label$25;
    }
    $1 = -2147483648;
   }
   $5 = $5 | ($1 << 16 | 0) | 0;
   label$27 : {
    label$28 : {
     $11 = Math_fround(Math_fround(HEAPF32[($7 + 14608 | 0) >> 2]) * Math_fround(HEAPF32[($7 + 14396 | 0) >> 2]));
     $11 = Math_fround(Math_fround(($11 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($11, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
      break label$28
     }
     $7 = ~~$11;
     break label$27;
    }
    $7 = -2147483648;
   }
   ImDrawList__AddText_28ImFont_20const__2c_20float_2c_20ImVec2_20const__2c_20unsigned_20int_2c_20char_20const__2c_20char_20const__2c_20float_2c_20ImVec4_20const__29($0 | 0, 0 | 0, Math_fround(Math_fround(0.0)), $8 + 24 | 0 | 0, $5 | ($7 << 24 | 0) | 0 | 0, $3 | 0, $4 | 0, Math_fround(Math_fround(0.0)), 0 | 0);
  }
  __stack_pointer = $8 + 32 | 0;
 }
 
 function ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = Math_fround($4);
  var $7 = Math_fround(0), $5 = 0, $6 = 0;
  $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$3) {
      break label$3
     }
     label$4 : {
      $6 = $2 ? $2 : -1;
      if ($6 >>> 0 > $1 >>> 0) {
       break label$4
      }
      $7 = Math_fround(HEAPF32[($5 + 15488 | 0) >> 2]);
      break label$2;
     }
     $2 = $1;
     label$5 : while (1) {
      label$6 : {
       label$7 : {
        $3 = HEAPU8[$2 >> 0] | 0;
        if (($3 | 0) == (35 | 0)) {
         break label$7
        }
        if ($3) {
         break label$6
        }
        break label$3;
       }
       if ((HEAPU8[($2 + 1 | 0) >> 0] | 0 | 0) == (35 | 0)) {
        break label$3
       }
      }
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($6 | 0)) {
       continue label$5
      }
      break label$5;
     };
     $2 = $6;
    }
    $7 = Math_fround(HEAPF32[($5 + 15488 | 0) >> 2]);
    if (($2 | 0) != ($1 | 0)) {
     break label$1
    }
   }
   HEAPF32[($0 + 4 | 0) >> 2] = $7;
   HEAP32[$0 >> 2] = 0;
   return;
  }
  ImFont__CalcTextSizeA_28float_2c_20float_2c_20float_2c_20char_20const__2c_20char_20const__2c_20char_20const___29_20const($0 | 0, HEAP32[($5 + 15484 | 0) >> 2] | 0 | 0, Math_fround($7), Math_fround(Math_fround(3402823466385288598117041.0e14)), Math_fround($4), $1 | 0, $2 | 0, 0 | 0);
  label$8 : {
   label$9 : {
    $7 = Math_fround(Math_fround(HEAPF32[$0 >> 2]) + Math_fround(.9999899864196777));
    if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
     break label$9
    }
    $2 = ~~$7;
    break label$8;
   }
   $2 = -2147483648;
  }
  HEAPF32[$0 >> 2] = Math_fround($2 | 0);
 }
 
 function ImGui__RenderTextClipped_28ImVec2_20const__2c_20ImVec2_20const__2c_20char_20const__2c_20char_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImRect_20const__29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $8 = 0, $7 = 0;
  label$1 : {
   $7 = $3 ? $3 : -1;
   if ($7 >>> 0 <= $2 >>> 0) {
    break label$1
   }
   $3 = $2;
   label$2 : {
    label$3 : while (1) {
     label$4 : {
      label$5 : {
       $8 = HEAPU8[$3 >> 0] | 0;
       if (($8 | 0) == (35 | 0)) {
        break label$5
       }
       if ($8) {
        break label$4
       }
       break label$2;
      }
      if ((HEAPU8[($3 + 1 | 0) >> 0] | 0 | 0) == (35 | 0)) {
       break label$2
      }
     }
     $3 = $3 + 1 | 0;
     if (($3 | 0) != ($7 | 0)) {
      continue label$3
     }
     break label$3;
    };
    $3 = $7;
   }
   if (($3 | 0) == ($2 | 0)) {
    break label$1
   }
   $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   ImGui__RenderTextClippedEx_28ImDrawList__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20char_20const__2c_20char_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImRect_20const__29(HEAP32[((HEAP32[($8 + 16116 | 0) >> 2] | 0) + 672 | 0) >> 2] | 0 | 0, $0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0);
   if (!(HEAPU8[($8 + 23484 | 0) >> 0] | 0)) {
    break label$1
   }
   ImGui__LogRenderedText_28ImVec2_20const__2c_20char_20const__2c_20char_20const__29($0 | 0, $2 | 0, $3 | 0);
  }
 }
 
 function ImGui__RenderTextEllipsis_28ImDrawList__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20float_2c_20float_2c_20char_20const__2c_20char_20const__2c_20ImVec2_20const__29($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = Math_fround($3);
  $4 = Math_fround($4);
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $14 = Math_fround(0), $11 = 0, $10 = 0, $12 = Math_fround(0), $18 = 0, i64toi32_i32$1 = 0, $15 = Math_fround(0), $9 = 0, $16 = Math_fround(0), $13 = 0, $17 = Math_fround(0);
  $8 = __stack_pointer - 32 | 0;
  __stack_pointer = $8;
  $9 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         if ($6) {
          break label$7
         }
         $6 = -1;
         if (($5 | 0) == (-1 | 0)) {
          break label$6
         }
         $10 = $5;
         label$8 : while (1) {
          label$9 : {
           label$10 : {
            $11 = HEAPU8[$10 >> 0] | 0;
            if (($11 | 0) == (35 | 0)) {
             break label$10
            }
            if ($11) {
             break label$9
            }
            $6 = $10;
            break label$7;
           }
           if ((HEAPU8[($10 + 1 | 0) >> 0] | 0 | 0) != (35 | 0)) {
            break label$9
           }
           $6 = $10;
           break label$7;
          }
          $6 = -1;
          $10 = $10 + 1 | 0;
          if (($10 | 0) != (-1 | 0)) {
           continue label$8
          }
          break label$8;
         };
        }
        if (!$7) {
         break label$5
        }
        break label$2;
       }
       if ($7) {
        break label$2
       }
       $12 = Math_fround(HEAPF32[($9 + 15488 | 0) >> 2]);
       $6 = -1;
       break label$4;
      }
      $12 = Math_fround(HEAPF32[($9 + 15488 | 0) >> 2]);
      if (($6 | 0) != ($5 | 0)) {
       break label$3
      }
     }
     HEAPF32[($8 + 28 | 0) >> 2] = $12;
     HEAP32[($8 + 24 | 0) >> 2] = 0;
     $12 = Math_fround(0.0);
     break label$1;
    }
    ImFont__CalcTextSizeA_28float_2c_20float_2c_20float_2c_20char_20const__2c_20char_20const__2c_20char_20const___29_20const($8 + 24 | 0 | 0, HEAP32[($9 + 15484 | 0) >> 2] | 0 | 0, Math_fround($12), Math_fround(Math_fround(3402823466385288598117041.0e14)), Math_fround(Math_fround(0.0)), $5 | 0, $6 | 0, 0 | 0);
    label$11 : {
     label$12 : {
      $12 = Math_fround(Math_fround(HEAPF32[($8 + 24 | 0) >> 2]) + Math_fround(.9999899864196777));
      if (!(Math_fround(Math_abs($12)) < Math_fround(2147483648.0))) {
       break label$12
      }
      $10 = ~~$12;
      break label$11;
     }
     $10 = -2147483648;
    }
    $12 = Math_fround($10 | 0);
    HEAPF32[($8 + 24 | 0) >> 2] = $12;
    break label$1;
   }
   i64toi32_i32$1 = HEAP32[($7 + 4 | 0) >> 2] | 0;
   $13 = HEAP32[$7 >> 2] | 0;
   HEAP32[($8 + 24 | 0) >> 2] = $13;
   HEAP32[($8 + 28 | 0) >> 2] = i64toi32_i32$1;
   $12 = (wasm2js_scratch_store_i32(2, $13), wasm2js_scratch_load_f32());
  }
  label$13 : {
   label$14 : {
    $14 = Math_fround(HEAPF32[$2 >> 2]);
    $15 = Math_fround(HEAPF32[$1 >> 2]);
    if (!($12 > Math_fround($14 - $15))) {
     break label$14
    }
    $10 = HEAP32[($0 + 44 | 0) >> 2] | 0;
    $12 = Math_fround(HEAPF32[($10 + 12 | 0) >> 2]);
    $10 = HEAP32[($10 + 8 | 0) >> 2] | 0;
    $16 = Math_fround(HEAPF32[($10 + 16 | 0) >> 2]);
    HEAP32[($8 + 20 | 0) >> 2] = 0;
    $16 = Math_fround($12 / $16);
    $17 = Math_fround($16 * Math_fround(HEAPF32[($10 + 64 | 0) >> 2]));
    $14 = Math_fround(Math_fround(($14 >= $4 ? $14 : $4) - $17) - $15);
    ImFont__CalcTextSizeA_28float_2c_20float_2c_20float_2c_20char_20const__2c_20char_20const__2c_20char_20const___29_20const($8 + 8 | 0 | 0, $10 | 0, Math_fround($12), Math_fround($14 >= Math_fround(1.0) ? $14 : Math_fround(1.0)), Math_fround(Math_fround(0.0)), $5 | 0, $6 | 0, $8 + 20 | 0 | 0);
    $14 = Math_fround(HEAPF32[($8 + 8 | 0) >> 2]);
    label$15 : {
     $11 = HEAP32[($8 + 20 | 0) >> 2] | 0;
     if (($11 | 0) != ($5 | 0)) {
      break label$15
     }
     if ($11 >>> 0 >= $6 >>> 0) {
      break label$15
     }
     $11 = $5 + (ImTextCharFromUtf8_28unsigned_20int__2c_20char_20const__2c_20char_20const__29($8 + 8 | 0 | 0, $5 | 0, $6 | 0) | 0) | 0;
     HEAP32[($8 + 20 | 0) >> 2] = $11;
     ImFont__CalcTextSizeA_28float_2c_20float_2c_20float_2c_20char_20const__2c_20char_20const__2c_20char_20const___29_20const($8 + 8 | 0 | 0, $10 | 0, Math_fround($12), Math_fround(Math_fround(3402823466385288598117041.0e14)), Math_fround(Math_fround(0.0)), $5 | 0, $11 | 0, 0 | 0);
     $14 = Math_fround(HEAPF32[($8 + 8 | 0) >> 2]);
     $11 = HEAP32[($8 + 20 | 0) >> 2] | 0;
    }
    label$16 : {
     if ($11 >>> 0 <= $5 >>> 0) {
      break label$16
     }
     label$17 : while (1) {
      label$18 : {
       $7 = $11 + -1 | 0;
       $18 = HEAPU8[$7 >> 0] | 0;
       if (($18 | 0) == (32 | 0)) {
        break label$18
       }
       if (($18 | 0) != (9 | 0)) {
        break label$16
       }
      }
      HEAP32[($8 + 20 | 0) >> 2] = $7;
      ImFont__CalcTextSizeA_28float_2c_20float_2c_20float_2c_20char_20const__2c_20char_20const__2c_20char_20const___29_20const($8 + 8 | 0 | 0, $10 | 0, Math_fround($12), Math_fround(Math_fround(3402823466385288598117041.0e14)), Math_fround(Math_fround(0.0)), $7 | 0, $11 | 0, 0 | 0);
      $14 = Math_fround($14 - Math_fround(HEAPF32[($8 + 8 | 0) >> 2]));
      $11 = HEAP32[($8 + 20 | 0) >> 2] | 0;
      if ($11 >>> 0 > $5 >>> 0) {
       continue label$17
      }
      break label$17;
     };
    }
    HEAPF32[($8 + 12 | 0) >> 2] = Math_fround(HEAPF32[($2 + 4 | 0) >> 2]);
    HEAPF32[($8 + 8 | 0) >> 2] = $3;
    i64toi32_i32$1 = 0;
    HEAP32[$8 >> 2] = 0;
    HEAP32[($8 + 4 | 0) >> 2] = i64toi32_i32$1;
    ImGui__RenderTextClippedEx_28ImDrawList__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20char_20const__2c_20char_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImRect_20const__29($0 | 0, $1 | 0, $8 + 8 | 0 | 0, $5 | 0, $11 | 0, $8 + 24 | 0 | 0, $8 | 0, 0 | 0);
    $3 = Math_fround(HEAPF32[$1 >> 2]);
    label$19 : {
     label$20 : {
      $15 = Math_fround(HEAPF32[($1 + 4 | 0) >> 2]);
      if (!(Math_fround(Math_abs($15)) < Math_fround(2147483648.0))) {
       break label$20
      }
      $11 = ~~$15;
      break label$19;
     }
     $11 = -2147483648;
    }
    HEAPF32[($8 + 12 | 0) >> 2] = Math_fround($11 | 0);
    label$21 : {
     label$22 : {
      $14 = Math_fround($14 + $3);
      if (!(Math_fround(Math_abs($14)) < Math_fround(2147483648.0))) {
       break label$22
      }
      $11 = ~~$14;
      break label$21;
     }
     $11 = -2147483648;
    }
    $14 = Math_fround($11 | 0);
    HEAPF32[($8 + 8 | 0) >> 2] = $14;
    if (!(Math_fround($17 + $14) <= $4)) {
     break label$13
    }
    if ((HEAP16[($10 + 62 | 0) >> 1] | 0 | 0) < (1 | 0)) {
     break label$13
    }
    $7 = 0;
    label$23 : while (1) {
     label$24 : {
      label$25 : {
       $11 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
       $14 = Math_fround(HEAPF32[($11 + 14600 | 0) >> 2]);
       $14 = Math_fround(Math_fround(($14 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($14, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($14)) < Math_fround(2147483648.0))) {
        break label$25
       }
       $18 = ~~$14;
       break label$24;
      }
      $18 = -2147483648;
     }
     $18 = $18 << 8 | 0;
     label$26 : {
      label$27 : {
       $14 = Math_fround(HEAPF32[($11 + 14596 | 0) >> 2]);
       $14 = Math_fround(Math_fround(($14 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($14, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($14)) < Math_fround(2147483648.0))) {
        break label$27
       }
       $2 = ~~$14;
       break label$26;
      }
      $2 = -2147483648;
     }
     $18 = $18 | $2 | 0;
     label$28 : {
      label$29 : {
       $14 = Math_fround(HEAPF32[($11 + 14604 | 0) >> 2]);
       $14 = Math_fround(Math_fround(($14 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($14, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($14)) < Math_fround(2147483648.0))) {
        break label$29
       }
       $2 = ~~$14;
       break label$28;
      }
      $2 = -2147483648;
     }
     $18 = $18 | ($2 << 16 | 0) | 0;
     label$30 : {
      label$31 : {
       $14 = Math_fround(Math_fround(HEAPF32[($11 + 14608 | 0) >> 2]) * Math_fround(HEAPF32[($11 + 14396 | 0) >> 2]));
       $14 = Math_fround(Math_fround(($14 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($14, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($14)) < Math_fround(2147483648.0))) {
        break label$31
       }
       $11 = ~~$14;
       break label$30;
      }
      $11 = -2147483648;
     }
     ImFont__RenderChar_28ImDrawList__2c_20float_2c_20ImVec2_20const__2c_20unsigned_20int_2c_20unsigned_20short_29_20const($10 | 0, $0 | 0, Math_fround($12), $8 + 8 | 0 | 0, $18 | ($11 << 24 | 0) | 0 | 0, HEAPU16[($10 + 60 | 0) >> 1] | 0 | 0);
     HEAPF32[($8 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10 + 68 | 0) >> 2]) * $16) + Math_fround(HEAPF32[($8 + 8 | 0) >> 2]));
     $7 = $7 + 1 | 0;
     if (($7 | 0) < (HEAP16[($10 + 62 | 0) >> 1] | 0 | 0)) {
      continue label$23
     }
     break label$13;
    };
   }
   HEAPF32[($8 + 12 | 0) >> 2] = Math_fround(HEAPF32[($2 + 4 | 0) >> 2]);
   HEAPF32[($8 + 8 | 0) >> 2] = $3;
   i64toi32_i32$1 = 0;
   HEAP32[$8 >> 2] = 0;
   HEAP32[($8 + 4 | 0) >> 2] = i64toi32_i32$1;
   ImGui__RenderTextClippedEx_28ImDrawList__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20char_20const__2c_20char_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImRect_20const__29($0 | 0, $1 | 0, $8 + 8 | 0 | 0, $5 | 0, $6 | 0, $8 + 24 | 0 | 0, $8 | 0, 0 | 0);
  }
  label$32 : {
   if (!(HEAPU8[($9 + 23484 | 0) >> 0] | 0)) {
    break label$32
   }
   ImGui__LogRenderedText_28ImVec2_20const__2c_20char_20const__2c_20char_20const__29($1 | 0, $5 | 0, $6 | 0);
  }
  __stack_pointer = $8 + 32 | 0;
 }
 
 function ImGui__RenderFrame_28ImVec2_2c_20ImVec2_2c_20unsigned_20int_2c_20bool_2c_20float_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = Math_fround($4);
  var $9 = Math_fround(0), $6 = 0, $5 = 0, $10 = 0, $7 = 0, $8 = Math_fround(0);
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  $6 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $7 = HEAP32[($6 + 16116 | 0) >> 2] | 0;
  ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29(HEAP32[($7 + 672 | 0) >> 2] | 0 | 0, $0 | 0, $1 | 0, $2 | 0, Math_fround($4), 0 | 0);
  label$1 : {
   if (!$3) {
    break label$1
   }
   $8 = Math_fround(HEAPF32[($6 + 14468 | 0) >> 2]);
   if (!($8 > Math_fround(0.0))) {
    break label$1
   }
   $3 = HEAP32[($7 + 672 | 0) >> 2] | 0;
   $9 = Math_fround(HEAPF32[$0 >> 2]);
   HEAPF32[($5 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($0 + 4 | 0) >> 2]) + Math_fround(1.0));
   HEAPF32[($5 + 8 | 0) >> 2] = Math_fround($9 + Math_fround(1.0));
   $9 = Math_fround(HEAPF32[$1 >> 2]);
   HEAPF32[($5 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($1 + 4 | 0) >> 2]) + Math_fround(1.0));
   HEAPF32[$5 >> 2] = Math_fround($9 + Math_fround(1.0));
   label$2 : {
    label$3 : {
     $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     $9 = Math_fround(HEAPF32[($2 + 14696 | 0) >> 2]);
     $9 = Math_fround(Math_fround(($9 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($9, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($9)) < Math_fround(2147483648.0))) {
      break label$3
     }
     $6 = ~~$9;
     break label$2;
    }
    $6 = -2147483648;
   }
   $6 = $6 << 8 | 0;
   label$4 : {
    label$5 : {
     $9 = Math_fround(HEAPF32[($2 + 14692 | 0) >> 2]);
     $9 = Math_fround(Math_fround(($9 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($9, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($9)) < Math_fround(2147483648.0))) {
      break label$5
     }
     $10 = ~~$9;
     break label$4;
    }
    $10 = -2147483648;
   }
   $6 = $6 | $10 | 0;
   label$6 : {
    label$7 : {
     $9 = Math_fround(HEAPF32[($2 + 14700 | 0) >> 2]);
     $9 = Math_fround(Math_fround(($9 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($9, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($9)) < Math_fround(2147483648.0))) {
      break label$7
     }
     $10 = ~~$9;
     break label$6;
    }
    $10 = -2147483648;
   }
   $6 = $6 | ($10 << 16 | 0) | 0;
   label$8 : {
    label$9 : {
     $9 = Math_fround(Math_fround(HEAPF32[($2 + 14704 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 14396 | 0) >> 2]));
     $9 = Math_fround(Math_fround(($9 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($9, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($9)) < Math_fround(2147483648.0))) {
      break label$9
     }
     $2 = ~~$9;
     break label$8;
    }
    $2 = -2147483648;
   }
   ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29($3 | 0, $5 + 8 | 0 | 0, $5 | 0, $6 | ($2 << 24 | 0) | 0 | 0, Math_fround($4), 0 | 0, Math_fround($8));
   label$10 : {
    label$11 : {
     $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     $9 = Math_fround(HEAPF32[($2 + 14680 | 0) >> 2]);
     $9 = Math_fround(Math_fround(($9 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($9, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($9)) < Math_fround(2147483648.0))) {
      break label$11
     }
     $3 = ~~$9;
     break label$10;
    }
    $3 = -2147483648;
   }
   $3 = $3 << 8 | 0;
   label$12 : {
    label$13 : {
     $9 = Math_fround(HEAPF32[($2 + 14676 | 0) >> 2]);
     $9 = Math_fround(Math_fround(($9 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($9, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($9)) < Math_fround(2147483648.0))) {
      break label$13
     }
     $6 = ~~$9;
     break label$12;
    }
    $6 = -2147483648;
   }
   $3 = $3 | $6 | 0;
   label$14 : {
    label$15 : {
     $9 = Math_fround(HEAPF32[($2 + 14684 | 0) >> 2]);
     $9 = Math_fround(Math_fround(($9 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($9, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($9)) < Math_fround(2147483648.0))) {
      break label$15
     }
     $6 = ~~$9;
     break label$14;
    }
    $6 = -2147483648;
   }
   $3 = $3 | ($6 << 16 | 0) | 0;
   label$16 : {
    label$17 : {
     $9 = Math_fround(Math_fround(HEAPF32[($2 + 14688 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 14396 | 0) >> 2]));
     $9 = Math_fround(Math_fround(($9 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($9, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($9)) < Math_fround(2147483648.0))) {
      break label$17
     }
     $2 = ~~$9;
     break label$16;
    }
    $2 = -2147483648;
   }
   ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29(HEAP32[($7 + 672 | 0) >> 2] | 0 | 0, $0 | 0, $1 | 0, $3 | ($2 << 24 | 0) | 0 | 0, Math_fround($4), 0 | 0, Math_fround($8));
  }
  __stack_pointer = $5 + 16 | 0;
 }
 
 function ImGui__RenderFrameBorder_28ImVec2_2c_20ImVec2_2c_20float_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  var $8 = Math_fround(0), $4 = 0, $9 = 0, $7 = 0, $3 = 0, $10 = 0, $5 = Math_fround(0), $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  label$1 : {
   $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $5 = Math_fround(HEAPF32[($4 + 14468 | 0) >> 2]);
   if (!($5 > Math_fround(0.0))) {
    break label$1
   }
   $6 = HEAP32[($4 + 16116 | 0) >> 2] | 0;
   $7 = HEAP32[($6 + 672 | 0) >> 2] | 0;
   $8 = Math_fround(HEAPF32[$0 >> 2]);
   HEAPF32[($3 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($0 + 4 | 0) >> 2]) + Math_fround(1.0));
   HEAPF32[($3 + 8 | 0) >> 2] = Math_fround($8 + Math_fround(1.0));
   $8 = Math_fround(HEAPF32[$1 >> 2]);
   HEAPF32[($3 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($1 + 4 | 0) >> 2]) + Math_fround(1.0));
   HEAPF32[$3 >> 2] = Math_fround($8 + Math_fround(1.0));
   label$2 : {
    label$3 : {
     $8 = Math_fround(HEAPF32[($4 + 14696 | 0) >> 2]);
     $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($8, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($8)) < Math_fround(2147483648.0))) {
      break label$3
     }
     $9 = ~~$8;
     break label$2;
    }
    $9 = -2147483648;
   }
   $9 = $9 << 8 | 0;
   label$4 : {
    label$5 : {
     $8 = Math_fround(HEAPF32[($4 + 14692 | 0) >> 2]);
     $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($8, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($8)) < Math_fround(2147483648.0))) {
      break label$5
     }
     $10 = ~~$8;
     break label$4;
    }
    $10 = -2147483648;
   }
   $9 = $9 | $10 | 0;
   label$6 : {
    label$7 : {
     $8 = Math_fround(HEAPF32[($4 + 14700 | 0) >> 2]);
     $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($8, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($8)) < Math_fround(2147483648.0))) {
      break label$7
     }
     $10 = ~~$8;
     break label$6;
    }
    $10 = -2147483648;
   }
   $9 = $9 | ($10 << 16 | 0) | 0;
   label$8 : {
    label$9 : {
     $8 = Math_fround(Math_fround(HEAPF32[($4 + 14704 | 0) >> 2]) * Math_fround(HEAPF32[($4 + 14396 | 0) >> 2]));
     $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($8, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($8)) < Math_fround(2147483648.0))) {
      break label$9
     }
     $4 = ~~$8;
     break label$8;
    }
    $4 = -2147483648;
   }
   ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29($7 | 0, $3 + 8 | 0 | 0, $3 | 0, $9 | ($4 << 24 | 0) | 0 | 0, Math_fround($2), 0 | 0, Math_fround($5));
   label$10 : {
    label$11 : {
     $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     $8 = Math_fround(HEAPF32[($4 + 14680 | 0) >> 2]);
     $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($8, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($8)) < Math_fround(2147483648.0))) {
      break label$11
     }
     $7 = ~~$8;
     break label$10;
    }
    $7 = -2147483648;
   }
   $7 = $7 << 8 | 0;
   label$12 : {
    label$13 : {
     $8 = Math_fround(HEAPF32[($4 + 14676 | 0) >> 2]);
     $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($8, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($8)) < Math_fround(2147483648.0))) {
      break label$13
     }
     $9 = ~~$8;
     break label$12;
    }
    $9 = -2147483648;
   }
   $7 = $7 | $9 | 0;
   label$14 : {
    label$15 : {
     $8 = Math_fround(HEAPF32[($4 + 14684 | 0) >> 2]);
     $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($8, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($8)) < Math_fround(2147483648.0))) {
      break label$15
     }
     $9 = ~~$8;
     break label$14;
    }
    $9 = -2147483648;
   }
   $7 = $7 | ($9 << 16 | 0) | 0;
   label$16 : {
    label$17 : {
     $8 = Math_fround(Math_fround(HEAPF32[($4 + 14688 | 0) >> 2]) * Math_fround(HEAPF32[($4 + 14396 | 0) >> 2]));
     $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($8, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($8)) < Math_fround(2147483648.0))) {
      break label$17
     }
     $4 = ~~$8;
     break label$16;
    }
    $4 = -2147483648;
   }
   ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29(HEAP32[($6 + 672 | 0) >> 2] | 0 | 0, $0 | 0, $1 | 0, $7 | ($4 << 24 | 0) | 0 | 0, Math_fround($2), 0 | 0, Math_fround($5));
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function ImGui__RenderNavHighlight_28ImRect_20const__2c_20unsigned_20int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $7 = Math_fround(0), $3 = 0, $4 = 0, $9 = Math_fround(0), $12 = Math_fround(0), $8 = Math_fround(0), $16 = 0, $6 = 0, $17 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $5 = Math_fround(0), i64toi32_i32$2 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $47 = 0, $50 = 0, $15 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  label$1 : {
   $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   if ((HEAP32[($4 + 18652 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
    break label$1
   }
   label$2 : {
    if ($2 & 4 | 0) {
     break label$2
    }
    if ((HEAPU8[($4 + 18710 | 0) >> 0] | 0) & 255 | 0) {
     break label$1
    }
   }
   $1 = HEAP32[($4 + 16116 | 0) >> 2] | 0;
   if (HEAPU8[($1 + 388 | 0) >> 0] | 0) {
    break label$1
   }
   $5 = Math_fround(0.0);
   label$3 : {
    if ($2 & 8 | 0) {
     break label$3
    }
    $5 = Math_fround(HEAPF32[($4 + 14464 | 0) >> 2]);
   }
   $6 = ($3 + 16 | 0) + 8 | 0;
   i64toi32_i32$2 = $0 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $47 = i64toi32_i32$0;
   i64toi32_i32$0 = $6;
   HEAP32[$6 >> 2] = $47;
   HEAP32[($6 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0;
   i64toi32_i32$1 = HEAP32[$0 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $50 = i64toi32_i32$1;
   i64toi32_i32$1 = $3;
   HEAP32[($3 + 16 | 0) >> 2] = $50;
   HEAP32[($3 + 20 | 0) >> 2] = i64toi32_i32$0;
   $7 = Math_fround(HEAPF32[($1 + 580 | 0) >> 2]);
   $8 = Math_fround(HEAPF32[($3 + 20 | 0) >> 2]);
   $9 = Math_fround(HEAPF32[($1 + 584 | 0) >> 2]);
   $10 = $8 >= $9 ? $8 : $9;
   HEAPF32[($3 + 20 | 0) >> 2] = $10;
   $8 = Math_fround(HEAPF32[($3 + 16 | 0) >> 2]);
   $11 = $8 >= $7 ? $8 : $7;
   HEAPF32[($3 + 16 | 0) >> 2] = $11;
   $8 = Math_fround(HEAPF32[($1 + 588 | 0) >> 2]);
   $0 = $3 + 28 | 0;
   $9 = Math_fround(HEAPF32[$0 >> 2]);
   $12 = Math_fround(HEAPF32[($1 + 592 | 0) >> 2]);
   $12 = $9 < $12 ? $9 : $12;
   HEAPF32[$0 >> 2] = $12;
   $9 = Math_fround(HEAPF32[$6 >> 2]);
   $9 = $9 < $8 ? $9 : $8;
   HEAPF32[$6 >> 2] = $9;
   label$4 : {
    if (!($2 & 1 | 0)) {
     break label$4
    }
    $13 = Math_fround($12 + Math_fround(4.0));
    HEAPF32[($3 + 28 | 0) >> 2] = $13;
    $14 = Math_fround($9 + Math_fround(4.0));
    HEAPF32[($3 + 24 | 0) >> 2] = $14;
    $12 = Math_fround($10 + Math_fround(-4.0));
    HEAPF32[($3 + 20 | 0) >> 2] = $12;
    $9 = Math_fround($11 + Math_fround(-4.0));
    HEAPF32[($3 + 16 | 0) >> 2] = $9;
    label$5 : {
     label$6 : {
      if (!($9 >= $7)) {
       break label$6
      }
      if (!($12 >= Math_fround(HEAPF32[($1 + 584 | 0) >> 2]))) {
       break label$6
      }
      if (!($14 <= $8)) {
       break label$6
      }
      $0 = 1;
      if ($13 <= Math_fround(HEAPF32[($1 + 592 | 0) >> 2])) {
       break label$5
      }
     }
     $0 = 0;
     ImDrawList__PushClipRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20bool_29(HEAP32[($1 + 672 | 0) >> 2] | 0 | 0, $3 + 16 | 0 | 0, $6 | 0, 0 | 0);
     $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     $13 = Math_fround(HEAPF32[($3 + 28 | 0) >> 2]);
     $14 = Math_fround(HEAPF32[($3 + 24 | 0) >> 2]);
     $12 = Math_fround(HEAPF32[($3 + 20 | 0) >> 2]);
     $9 = Math_fround(HEAPF32[($3 + 16 | 0) >> 2]);
    }
    $15 = HEAP32[($1 + 672 | 0) >> 2] | 0;
    HEAPF32[($3 + 12 | 0) >> 2] = Math_fround($12 + Math_fround(1.0));
    HEAPF32[($3 + 8 | 0) >> 2] = Math_fround($9 + Math_fround(1.0));
    HEAPF32[($3 + 4 | 0) >> 2] = Math_fround($13 + Math_fround(-1.0));
    HEAPF32[$3 >> 2] = Math_fround($14 + Math_fround(-1.0));
    label$7 : {
     label$8 : {
      $7 = Math_fround(HEAPF32[($4 + 15416 | 0) >> 2]);
      $7 = Math_fround(Math_fround(($7 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($7, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
      if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
       break label$8
      }
      $16 = ~~$7;
      break label$7;
     }
     $16 = -2147483648;
    }
    $16 = $16 << 8 | 0;
    label$9 : {
     label$10 : {
      $7 = Math_fround(HEAPF32[($4 + 15412 | 0) >> 2]);
      $7 = Math_fround(Math_fround(($7 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($7, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
      if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
       break label$10
      }
      $17 = ~~$7;
      break label$9;
     }
     $17 = -2147483648;
    }
    $16 = $16 | $17 | 0;
    label$11 : {
     label$12 : {
      $7 = Math_fround(HEAPF32[($4 + 15420 | 0) >> 2]);
      $7 = Math_fround(Math_fround(($7 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($7, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
      if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
       break label$12
      }
      $17 = ~~$7;
      break label$11;
     }
     $17 = -2147483648;
    }
    $16 = $16 | ($17 << 16 | 0) | 0;
    label$13 : {
     label$14 : {
      $7 = Math_fround(Math_fround(HEAPF32[($4 + 15424 | 0) >> 2]) * Math_fround(HEAPF32[($4 + 14396 | 0) >> 2]));
      $7 = Math_fround(Math_fround(($7 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($7, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
      if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
       break label$14
      }
      $4 = ~~$7;
      break label$13;
     }
     $4 = -2147483648;
    }
    ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29($15 | 0, $3 + 8 | 0 | 0, $3 | 0, $16 | ($4 << 24 | 0) | 0 | 0, Math_fround($5), 0 | 0, Math_fround(Math_fround(2.0)));
    if ($0) {
     break label$4
    }
    ImDrawList__PopClipRect_28_29(HEAP32[($1 + 672 | 0) >> 2] | 0 | 0);
   }
   if (!($2 & 2 | 0)) {
    break label$1
   }
   label$15 : {
    label$16 : {
     $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     $7 = Math_fround(HEAPF32[($4 + 15416 | 0) >> 2]);
     $7 = Math_fround(Math_fround(($7 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($7, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
      break label$16
     }
     $2 = ~~$7;
     break label$15;
    }
    $2 = -2147483648;
   }
   $2 = $2 << 8 | 0;
   label$17 : {
    label$18 : {
     $7 = Math_fround(HEAPF32[($4 + 15412 | 0) >> 2]);
     $7 = Math_fround(Math_fround(($7 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($7, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
      break label$18
     }
     $0 = ~~$7;
     break label$17;
    }
    $0 = -2147483648;
   }
   $2 = $2 | $0 | 0;
   label$19 : {
    label$20 : {
     $7 = Math_fround(HEAPF32[($4 + 15420 | 0) >> 2]);
     $7 = Math_fround(Math_fround(($7 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($7, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
      break label$20
     }
     $0 = ~~$7;
     break label$19;
    }
    $0 = -2147483648;
   }
   $2 = $2 | ($0 << 16 | 0) | 0;
   label$21 : {
    label$22 : {
     $7 = Math_fround(Math_fround(HEAPF32[($4 + 15424 | 0) >> 2]) * Math_fround(HEAPF32[($4 + 14396 | 0) >> 2]));
     $7 = Math_fround(Math_fround(($7 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($7, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
      break label$22
     }
     $4 = ~~$7;
     break label$21;
    }
    $4 = -2147483648;
   }
   ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29(HEAP32[($1 + 672 | 0) >> 2] | 0 | 0, $3 + 16 | 0 | 0, $6 | 0, $2 | ($4 << 24 | 0) | 0 | 0, Math_fround($5), 0 | 0, Math_fround(Math_fround(1.0)));
  }
  __stack_pointer = $3 + 32 | 0;
 }
 
 function ImGui__RenderMouseCursor_28ImVec2_2c_20float_2c_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $18 = Math_fround(0), $16 = Math_fround(0), i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $15 = Math_fround(0), $14 = 0, $17 = Math_fround(0), $19 = 0, $7 = 0, $8 = 0, $12 = 0, $9 = 0, $10 = Math_fround(0), $11 = 0, $13 = Math_fround(0);
  $6 = __stack_pointer - 80 | 0;
  __stack_pointer = $6;
  $7 = 0;
  label$1 : {
   $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   if ((HEAP32[($8 + 18576 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$1
   }
   $9 = HEAP32[((HEAP32[($8 + 15504 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
   $10 = Math_fround(HEAPF32[($0 + 4 | 0) >> 2]);
   $11 = $6 + 32 | 0 | 8 | 0;
   $12 = $6 + 56 | 0;
   $13 = Math_fround(HEAPF32[$0 >> 2]);
   $14 = $6 + 48 | 0;
   label$2 : while (1) {
    i64toi32_i32$1 = $6;
    i64toi32_i32$0 = 0;
    HEAP32[($6 + 72 | 0) >> 2] = 0;
    HEAP32[($6 + 76 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $6;
    i64toi32_i32$0 = 0;
    HEAP32[($6 + 64 | 0) >> 2] = 0;
    HEAP32[($6 + 68 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $12;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $14;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $6;
    i64toi32_i32$0 = 0;
    HEAP32[($6 + 40 | 0) >> 2] = 0;
    HEAP32[($6 + 44 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $6;
    i64toi32_i32$0 = 0;
    HEAP32[($6 + 32 | 0) >> 2] = 0;
    HEAP32[($6 + 36 | 0) >> 2] = i64toi32_i32$0;
    label$3 : {
     if (!(ImFontAtlas__GetMouseCursorTexData_28int_2c_20ImVec2__2c_20ImVec2__2c_20ImVec2__2c_20ImVec2__29($9 | 0, $2 | 0, $6 + 72 | 0 | 0, $6 + 64 | 0 | 0, $6 + 32 | 0 | 0, $14 | 0) | 0)) {
      break label$3
     }
     $0 = HEAP32[((HEAP32[($8 + 18584 | 0) >> 2] | 0) + ($7 << 2 | 0) | 0) >> 2] | 0;
     $15 = Math_fround($13 - Math_fround(HEAPF32[($6 + 72 | 0) >> 2]));
     HEAPF32[($6 + 24 | 0) >> 2] = $15;
     $16 = Math_fround($10 - Math_fround(HEAPF32[($6 + 76 | 0) >> 2]));
     HEAPF32[($6 + 28 | 0) >> 2] = $16;
     $17 = Math_fround(HEAPF32[($0 + 12 | 0) >> 2]);
     if (!($16 < Math_fround($17 + Math_fround(HEAPF32[($0 + 20 | 0) >> 2])))) {
      break label$3
     }
     $18 = Math_fround(Math_fround(HEAPF32[($0 + 40 | 0) >> 2]) * $1);
     if (!(Math_fround($16 + Math_fround($18 * Math_fround(Math_fround(HEAPF32[($6 + 68 | 0) >> 2]) + Math_fround(2.0)))) > $17)) {
      break label$3
     }
     $16 = Math_fround(HEAPF32[($0 + 8 | 0) >> 2]);
     if (!($15 < Math_fround($16 + Math_fround(HEAPF32[($0 + 16 | 0) >> 2])))) {
      break label$3
     }
     if (!(Math_fround($15 + Math_fround($18 * Math_fround(Math_fround(HEAPF32[($6 + 64 | 0) >> 2]) + Math_fround(2.0)))) > $16)) {
      break label$3
     }
     $0 = GetViewportDrawList_28ImGuiViewportP__2c_20unsigned_20long_2c_20char_20const__29($0 | 0, 1 | 0, 67101 | 0) | 0;
     $19 = HEAP32[($9 + 4 | 0) >> 2] | 0;
     ImDrawList__PushTextureID_28void__29($0 | 0, $19 | 0);
     $16 = Math_fround($18 * Math_fround(0.0));
     $15 = Math_fround(HEAPF32[($6 + 28 | 0) >> 2]);
     HEAPF32[($6 + 20 | 0) >> 2] = Math_fround($16 + $15);
     $17 = Math_fround(HEAPF32[($6 + 24 | 0) >> 2]);
     HEAPF32[($6 + 16 | 0) >> 2] = Math_fround($18 + $17);
     HEAPF32[($6 + 12 | 0) >> 2] = Math_fround($15 + Math_fround($18 * Math_fround(Math_fround(HEAPF32[($6 + 68 | 0) >> 2]) + Math_fround(0.0))));
     HEAPF32[($6 + 8 | 0) >> 2] = Math_fround($17 + Math_fround($18 * Math_fround(Math_fround(HEAPF32[($6 + 64 | 0) >> 2]) + Math_fround(1.0))));
     ImDrawList__AddImage_28void__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_29($0 | 0, $19 | 0, $6 + 16 | 0 | 0, $6 + 8 | 0 | 0, $14 | 0, $12 | 0, $5 | 0);
     $15 = Math_fround(HEAPF32[($6 + 28 | 0) >> 2]);
     HEAPF32[($6 + 20 | 0) >> 2] = Math_fround($16 + $15);
     $16 = Math_fround(HEAPF32[($6 + 24 | 0) >> 2]);
     HEAPF32[($6 + 16 | 0) >> 2] = Math_fround(Math_fround($18 + $18) + $16);
     HEAPF32[($6 + 12 | 0) >> 2] = Math_fround($15 + Math_fround($18 * Math_fround(Math_fround(HEAPF32[($6 + 68 | 0) >> 2]) + Math_fround(0.0))));
     HEAPF32[($6 + 8 | 0) >> 2] = Math_fround($16 + Math_fround($18 * Math_fround(Math_fround(HEAPF32[($6 + 64 | 0) >> 2]) + Math_fround(2.0))));
     ImDrawList__AddImage_28void__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_29($0 | 0, $19 | 0, $6 + 16 | 0 | 0, $6 + 8 | 0 | 0, $14 | 0, $12 | 0, $5 | 0);
     HEAPF32[($6 + 20 | 0) >> 2] = Math_fround(Math_fround($18 * Math_fround(HEAPF32[($6 + 68 | 0) >> 2])) + Math_fround(HEAPF32[($6 + 28 | 0) >> 2]));
     HEAPF32[($6 + 16 | 0) >> 2] = Math_fround(Math_fround($18 * Math_fround(HEAPF32[($6 + 64 | 0) >> 2])) + Math_fround(HEAPF32[($6 + 24 | 0) >> 2]));
     ImDrawList__AddImage_28void__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_29($0 | 0, $19 | 0, $6 + 24 | 0 | 0, $6 + 16 | 0 | 0, $14 | 0, $12 | 0, $4 | 0);
     HEAPF32[($6 + 20 | 0) >> 2] = Math_fround(Math_fround($18 * Math_fround(HEAPF32[($6 + 68 | 0) >> 2])) + Math_fround(HEAPF32[($6 + 28 | 0) >> 2]));
     HEAPF32[($6 + 16 | 0) >> 2] = Math_fround(Math_fround($18 * Math_fround(HEAPF32[($6 + 64 | 0) >> 2])) + Math_fround(HEAPF32[($6 + 24 | 0) >> 2]));
     ImDrawList__AddImage_28void__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_29($0 | 0, $19 | 0, $6 + 24 | 0 | 0, $6 + 16 | 0 | 0, $6 + 32 | 0 | 0, $11 | 0, $3 | 0);
     ImDrawList__PopTextureID_28_29($0 | 0);
    }
    $7 = $7 + 1 | 0;
    if (($7 | 0) < (HEAP32[($8 + 18576 | 0) >> 2] | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  __stack_pointer = $6 + 80 | 0;
 }
 
 function GetViewportDrawList_28ImGuiViewportP__2c_20unsigned_20long_2c_20char_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $5 = 0, $7 = 0, $6 = 0, $8 = Math_fround(0), $9 = Math_fround(0);
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  label$1 : {
   $5 = $0 + ($1 << 2 | 0) | 0;
   $6 = $5 + 120 | 0;
   $1 = HEAP32[$6 >> 2] | 0;
   if ($1) {
    break label$1
   }
   label$2 : {
    if (!$4) {
     break label$2
    }
    $1 = $4 + 184 | 0;
    HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1 | 0;
   }
   $1 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](144, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   $7 = memset($1 | 0, 0 | 0, 144 | 0) | 0;
   HEAP32[($7 + 48 | 0) >> 2] = $2;
   HEAP32[($7 + 44 | 0) >> 2] = $4 + 15496 | 0;
   HEAP32[$6 >> 2] = $7;
  }
  label$3 : {
   $5 = $5 + 112 | 0;
   if ((HEAP32[$5 >> 2] | 0 | 0) == (HEAP32[($4 + 16016 | 0) >> 2] | 0 | 0)) {
    break label$3
   }
   ImDrawList___ResetForNewFrame_28_29($1 | 0);
   ImDrawList__PushTextureID_28void__29($1 | 0, HEAP32[((HEAP32[($4 + 72 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
   $8 = Math_fround(HEAPF32[($0 + 16 | 0) >> 2]);
   $2 = $0 + 8 | 0;
   $9 = Math_fround(HEAPF32[$2 >> 2]);
   HEAPF32[($3 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($0 + 12 | 0) >> 2]) + Math_fround(HEAPF32[($0 + 20 | 0) >> 2]));
   HEAPF32[($3 + 8 | 0) >> 2] = Math_fround($9 + $8);
   ImDrawList__PushClipRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20bool_29($1 | 0, $2 | 0, $3 + 8 | 0 | 0, 0 | 0);
   HEAP32[$5 >> 2] = HEAP32[($4 + 16016 | 0) >> 2] | 0;
  }
  __stack_pointer = $3 + 16 | 0;
  return $1 | 0;
 }
 
 function ImGui__CreateContext_28ImFontAtlas__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  label$1 : {
   $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   if (!$1) {
    break label$1
   }
   $2 = $1 + 184 | 0;
   HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1 | 0;
  }
  $0 = ImGuiContext__ImGuiContext_28ImFontAtlas__29(FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](23912, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0 | 0, $0 | 0) | 0;
  HEAP32[(0 + 92720 | 0) >> 2] = $0;
  ImGui__Initialize_28_29();
  label$2 : {
   if (!$1) {
    break label$2
   }
   HEAP32[(0 + 92720 | 0) >> 2] = $1;
  }
  return $0 | 0;
 }
 
 function ImGuiContext__ImGuiContext_28ImFontAtlas__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $13 = 0, $14 = 0, $15 = 0;
  ImGuiIO__ImGuiIO_28_29($0 + 8 | 0 | 0) | 0;
  memset($0 + 14256 | 0 | 0, 0 | 0, 140 | 0) | 0;
  ImGuiStyle__ImGuiStyle_28_29($0 + 14396 | 0 | 0) | 0;
  ImDrawListSharedData__ImDrawListSharedData_28_29($0 + 15496 | 0 | 0) | 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 16212 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 16216 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 16136 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 16140 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 16108 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 16112 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 16044 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 16048 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 16052 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 16060 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 16068 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 16076 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 16084 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 16092 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0 + 16100 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 16152 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 16156 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 16160 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $2 = $0 + 17932 | 0;
  $3 = $0 + 16252 | 0;
  label$1 : while (1) {
   i64toi32_i32$1 = $3;
   i64toi32_i32$0 = -1;
   HEAP32[i64toi32_i32$1 >> 2] = -1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP16[(i64toi32_i32$1 + 8 | 0) >> 1] = 0;
   i64toi32_i32$0 = -1;
   HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = -1;
   HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = -1;
   HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = -1;
   HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = -1;
   HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = -1;
   HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = -1;
   HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = -1;
   HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = -1;
   HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] = -1;
   HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = -1;
   HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] = -1;
   HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = i64toi32_i32$0;
   HEAP16[(i64toi32_i32$1 + 20 | 0) >> 1] = 0;
   HEAP16[(i64toi32_i32$1 + 32 | 0) >> 1] = 0;
   HEAP16[(i64toi32_i32$1 + 44 | 0) >> 1] = 0;
   HEAP16[(i64toi32_i32$1 + 56 | 0) >> 1] = 0;
   HEAP16[(i64toi32_i32$1 + 68 | 0) >> 1] = 0;
   HEAP16[(i64toi32_i32$1 + 80 | 0) >> 1] = 0;
   $3 = i64toi32_i32$1 + 84 | 0;
   if (($3 | 0) != ($2 | 0)) {
    continue label$1
   }
   break label$1;
  };
  i64toi32_i32$1 = $0 + 18228 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 18220 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 18212 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  memset($2 | 0, 255 | 0, 280 | 0) | 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 18608 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 18612 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 18584 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 18576 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 18580 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 18616 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 18624 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 18632 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  memset($0 + 18260 | 0 | 0, 0 | 0, 312 | 0) | 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 18720 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 18724 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 18640 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 18728 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 18808 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 18812 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 18816 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 18824 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 18832 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 18764 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 18768 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 18772 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 18780 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 18788 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0 + 18848 | 0) >> 2] = 2139095039;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 18852 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 18856 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 18840 | 0;
  i64toi32_i32$0 = 2139095039;
  HEAP32[i64toi32_i32$1 >> 2] = 2139095039;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 18860 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 18868 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 18876 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0 + 18892 | 0) >> 2] = 2139095039;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 18896 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 18900 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 18884 | 0;
  i64toi32_i32$0 = 2139095039;
  HEAP32[i64toi32_i32$1 >> 2] = 2139095039;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 18904 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 18912 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 18920 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 18932 | 0;
  i64toi32_i32$0 = 2139095039;
  HEAP32[i64toi32_i32$1 >> 2] = 2139095039;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0 + 18928 | 0) >> 2] = 2139095039;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 18940 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 18944 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 18948 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 18956 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 18964 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 18976 | 0;
  i64toi32_i32$0 = 2139095039;
  HEAP32[i64toi32_i32$1 >> 2] = 2139095039;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0 + 18972 | 0) >> 2] = 2139095039;
  i64toi32_i32$1 = $0 + 19076 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 19084 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 19092 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 19100 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0 + 19108 | 0) >> 0] = 0;
  i64toi32_i32$1 = $0 + 19064 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 19056 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 19060 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 19024 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 19016 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 19020 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 19072 | 0) >> 2] = -1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 19112 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 19116 | 0) >> 2] = i64toi32_i32$0;
  $13 = i64toi32_i32$1 + 19109 | 0;
  $14 = 0;
  HEAP8[$13 >> 0] = $14;
  HEAP8[($13 + 1 | 0) >> 0] = $14 >>> 8 | 0;
  i64toi32_i32$1 = i64toi32_i32$1 + 19120 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0 + 19164 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 19156 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 19160 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 19188 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 19192 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 19196 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 19352 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 19356 | 0) >> 2] = i64toi32_i32$0;
  memset(i64toi32_i32$1 + 19364 | 0 | 0, 0 | 0, 3700 | 0) | 0;
  memset(i64toi32_i32$1 + 19208 | 0 | 0, 0 | 0, 68 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$1 + 19328 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 19320 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 19312 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 19304 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 19296 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 19288 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 19280 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 19284 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 19360 | 0) >> 2] = i64toi32_i32$1;
  ImFont__ImFont_28_29(i64toi32_i32$1 + 23064 | 0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$1 + 23372 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 23364 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 23356 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 23348 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 23340 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 23344 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 23576 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 23504 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 23496 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 23500 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 23580 | 0) >> 0] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 23180 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 23184 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 23188 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 23196 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 23204 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 23212 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 23220 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 23228 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 23236 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 23324 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 23316 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 23308 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 23300 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 23292 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 23284 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 23276 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 23280 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 23388 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 23392 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 23396 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 23404 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 23412 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 23420 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 23428 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 23436 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0 + 23444 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 23540 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 23544 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 23548 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 23556 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0 + 23564 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0 + 23588 | 0;
  i64toi32_i32$0 = -1;
  HEAP32[i64toi32_i32$1 >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $6 = $0 + 23581 | 0;
  $7 = 257;
  HEAP8[$6 >> 0] = $7;
  HEAP8[($6 + 1 | 0) >> 0] = $7 >>> 8 | 0;
  HEAP8[($6 + 2 | 0) >> 0] = $7 >>> 16 | 0;
  HEAP8[($6 + 3 | 0) >> 0] = $7 >>> 24 | 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 23596 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 23600 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 23604 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 23612 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 23620 | 0;
  i64toi32_i32$0 = -8388609;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 23896 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 23900 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 23904 | 0) >> 2] = 0;
  HEAP8[i64toi32_i32$1 >> 0] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 15476 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 15480 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = !$1;
  HEAP32[(i64toi32_i32$1 + 15492 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 15484 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 15488 | 0) >> 2] = i64toi32_i32$0;
  label$2 : {
   if ($1) {
    break label$2
   }
   label$3 : {
    $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$3) {
     break label$3
    }
    $3 = $3 + 184 | 0;
    HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1 | 0;
   }
   $1 = ImFontAtlas__ImFontAtlas_28_29(FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](1136, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0 | 0) | 0;
  }
  HEAP32[($0 + 16016 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 16008 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 16012 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 16104 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 16040 | 0) >> 2] = 0;
  i64toi32_i32$0 = -1;
  HEAP32[(i64toi32_i32$1 + 16020 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 16024 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 16028 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 16032 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 16116 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 16120 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 16168 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 16172 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 16144 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 16148 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 16184 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 16188 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] = $1;
  HEAP8[(i64toi32_i32$1 + 16036 | 0) >> 0] = 0;
  i64toi32_i32$1 = i64toi32_i32$1 + 16124 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0 + 16132 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0 + 16174 | 0;
  i64toi32_i32$0 = 0;
  $15 = 0;
  HEAP16[i64toi32_i32$1 >> 1] = $15;
  HEAP16[(i64toi32_i32$1 + 2 | 0) >> 1] = $15 >>> 16 | 0;
  HEAP16[(i64toi32_i32$1 + 4 | 0) >> 1] = i64toi32_i32$0;
  HEAP16[(i64toi32_i32$1 + 6 | 0) >> 1] = i64toi32_i32$0 >>> 16 | 0;
  i64toi32_i32$1 = $0 + 16192 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 16200 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP16[($0 + 16208 | 0) >> 1] = 0;
  HEAP32[($0 + 18572 | 0) >> 2] = 0;
  HEAP32[($0 + 18252 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 18244 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 18248 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 18240 | 0) >> 0] = 0;
  HEAP32[(i64toi32_i32$1 + 18236 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 16248 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 16240 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 16244 | 0) >> 2] = i64toi32_i32$0;
  HEAP16[(i64toi32_i32$1 + 16236 | 0) >> 1] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 16228 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 16232 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 16220 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 16224 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = -1082130432;
  HEAP32[(i64toi32_i32$1 + 16212 | 0) >> 2] = -1082130432;
  HEAP32[(i64toi32_i32$1 + 16216 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 18588 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 18592 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 18596 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0 + 18604 | 0) >> 2] = 0;
  memset($0 + 18644 | 0 | 0, 0 | 0, 66 | 0) | 0;
  HEAP32[($0 + 18748 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 18740 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 18744 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 18738 | 0) >> 0] = 0;
  HEAP16[(i64toi32_i32$1 + 18736 | 0) >> 1] = 0;
  HEAP32[(i64toi32_i32$1 + 18716 | 0) >> 2] = 0;
  HEAP8[(i64toi32_i32$1 + 18710 | 0) >> 0] = 1;
  HEAP32[(i64toi32_i32$1 + 18760 | 0) >> 2] = -1;
  $8 = 0;
  HEAP8[(i64toi32_i32$1 + 18711 | 0) >> 0] = $8;
  HEAP8[(i64toi32_i32$1 + 18712 | 0) >> 0] = $8 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 18713 | 0) >> 0] = $8 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 18714 | 0) >> 0] = $8 >>> 24 | 0;
  HEAP32[(i64toi32_i32$1 + 19044 | 0) >> 2] = 0;
  i64toi32_i32$0 = 12800;
  HEAP32[(i64toi32_i32$1 + 18984 | 0) >> 2] = 4608;
  HEAP32[(i64toi32_i32$1 + 18988 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 18804 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 18796 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 18800 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = -1;
  HEAP32[(i64toi32_i32$1 + 18752 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 18756 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 18992 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 18996 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 19e3 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 19005 | 0;
  i64toi32_i32$0 = 0;
  $9 = 0;
  HEAP8[i64toi32_i32$1 >> 0] = $9;
  HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $9 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $9 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $9 >>> 24 | 0;
  HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 19032 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 19036 | 0) >> 2] = i64toi32_i32$0;
  $10 = i64toi32_i32$1 + 19039 | 0;
  $11 = 0;
  HEAP8[$10 >> 0] = $11;
  HEAP8[($10 + 1 | 0) >> 0] = $11 >>> 8 | 0;
  HEAP8[($10 + 2 | 0) >> 0] = $11 >>> 16 | 0;
  HEAP8[($10 + 3 | 0) >> 0] = $11 >>> 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 19128 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 19132 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = -1;
  HEAP32[(i64toi32_i32$1 + 19048 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 19052 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 19136 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0 + 19144 | 0) >> 2] = 0;
  HEAP32[($0 + 19276 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 177209344;
  HEAP32[(i64toi32_i32$1 + 23160 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 23164 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 19148 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 19152 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 19200 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 19204 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 19168 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 19172 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 19176 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0 + 19184 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 19336 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 19340 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 19344 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 23168 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 23172 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 23176 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 23256 | 0) >> 2] = 0;
  HEAP16[(i64toi32_i32$1 + 23252 | 0) >> 1] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 23244 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 23248 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 23304 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0 + 23260 | 0) >> 2] = 1008981770;
  HEAP32[($0 + 23272 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 23264 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 23268 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 23380 | 0) >> 0] = 0;
  HEAP8[(i64toi32_i32$1 + 23336 | 0) >> 0] = 46;
  HEAP32[(i64toi32_i32$1 + 23384 | 0) >> 2] = 0;
  i64toi32_i32$1 = i64toi32_i32$1 + 23320 | 0;
  i64toi32_i32$0 = -1082130432;
  HEAP32[i64toi32_i32$1 >> 2] = -1082130432;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0 + 23332 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 23508 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 23512 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 23488 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 23492 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 23477 | 0;
  i64toi32_i32$0 = 0;
  $12 = 0;
  HEAP8[i64toi32_i32$1 >> 0] = $12;
  HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $12 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $12 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $12 >>> 24 | 0;
  HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
  i64toi32_i32$1 = $0 + 23472 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 23464 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 23456 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 23448 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 23452 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 23524 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 23532 | 0) >> 2] = 2;
  HEAP32[(i64toi32_i32$1 + 23516 | 0) >> 2] = 2139095039;
  HEAP8[(i64toi32_i32$1 + 23520 | 0) >> 0] = 0;
  HEAP32[(i64toi32_i32$1 + 23536 | 0) >> 2] = 1024;
  HEAP32[(i64toi32_i32$1 + 23528 | 0) >> 2] = 2;
  HEAP32[(i64toi32_i32$1 + 23572 | 0) >> 2] = 0;
  HEAP8[(i64toi32_i32$1 + 23570 | 0) >> 0] = 0;
  HEAP16[(i64toi32_i32$1 + 23568 | 0) >> 1] = 0;
  HEAP32[(i64toi32_i32$1 + 18256 | 0) >> 2] = 0;
  memset(i64toi32_i32$1 + 23628 | 0 | 0, 0 | 0, 256 | 0) | 0;
  HEAP32[(i64toi32_i32$1 + 23892 | 0) >> 2] = -1;
  i64toi32_i32$0 = -1;
  HEAP32[(i64toi32_i32$1 + 23884 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 23888 | 0) >> 2] = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function ImGui__Initialize_28_29() {
  var $1 = 0, $0 = 0, $4 = 0, $2 = 0, i64toi32_i32$0 = 0, $3 = 0, i64toi32_i32$1 = 0, $5 = 0;
  label$1 : {
   $0 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $1 = HEAP32[($0 + 23400 | 0) >> 2] | 0;
   if (($1 | 0) != (HEAP32[($0 + 23404 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $2 = $1 + 1 | 0;
   label$2 : {
    label$3 : {
     if ($1) {
      break label$3
     }
     $3 = 8;
     break label$2;
    }
    $3 = (($1 | 0) / (2 | 0) | 0) + $1 | 0;
   }
   $2 = ($3 | 0) > ($2 | 0) ? $3 : $2;
   if (($1 | 0) >= ($2 | 0)) {
    break label$1
   }
   $1 = $0 + 184 | 0;
   HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1 | 0;
   $1 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](Math_imul($2, 36), HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$4 : {
    $3 = HEAP32[($0 + 23408 | 0) >> 2] | 0;
    if (!$3) {
     break label$4
    }
    __memcpy($1 | 0, $3 | 0, Math_imul(HEAP32[($0 + 23400 | 0) >> 2] | 0, 36) | 0) | 0;
    label$5 : {
     $3 = HEAP32[($0 + 23408 | 0) >> 2] | 0;
     if (!$3) {
      break label$5
     }
     $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$4) {
      break label$5
     }
     $4 = $4 + 184 | 0;
     HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($3, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($0 + 23404 | 0) >> 2] = $2;
   HEAP32[($0 + 23408 | 0) >> 2] = $1;
   $1 = HEAP32[($0 + 23400 | 0) >> 2] | 0;
  }
  $1 = (HEAP32[($0 + 23408 | 0) >> 2] | 0) + Math_imul($1, 36) | 0;
  HEAP32[($1 + 32 | 0) >> 2] = 0;
  HEAP32[($1 + 28 | 0) >> 2] = 4;
  HEAP32[($1 + 24 | 0) >> 2] = 5;
  HEAP32[($1 + 20 | 0) >> 2] = 6;
  HEAP32[($1 + 16 | 0) >> 2] = 7;
  HEAP32[($1 + 12 | 0) >> 2] = 0;
  HEAP32[($1 + 8 | 0) >> 2] = 8;
  HEAP32[($1 + 4 | 0) >> 2] = -1941373717;
  HEAP32[$1 >> 2] = 65667;
  HEAP32[($0 + 23400 | 0) >> 2] = (HEAP32[($0 + 23400 | 0) >> 2] | 0) + 1 | 0;
  ImGui__TableSettingsAddSettingsHandler_28_29();
  $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  HEAP32[($1 + 23452 | 0) >> 2] = 66976;
  HEAP32[($1 + 23480 | 0) >> 2] = 66147;
  HEAP32[($1 + 23476 | 0) >> 2] = 68207;
  HEAP32[($1 + 23472 | 0) >> 2] = 68180;
  HEAP32[($1 + 23468 | 0) >> 2] = 68164;
  HEAP32[($1 + 23464 | 0) >> 2] = 66108;
  HEAP32[($1 + 23460 | 0) >> 2] = 66711;
  HEAP32[($1 + 23456 | 0) >> 2] = 66749;
  $1 = $1 + 184 | 0;
  HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1 | 0;
  $1 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](256, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
  i64toi32_i32$1 = $1;
  i64toi32_i32$0 = 0;
  HEAP32[($1 + 8 | 0) >> 2] = 0;
  HEAP32[($1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1;
  i64toi32_i32$0 = 0;
  HEAP32[($1 + 88 | 0) >> 2] = 0;
  HEAP32[($1 + 92 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1 + 64 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1 + 56 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1 + 48 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1 + 40 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  memset($1 + 128 | 0 | 0, 0 | 0, 128 | 0) | 0;
  i64toi32_i32$1 = $1;
  i64toi32_i32$0 = 2139095039;
  HEAP32[($1 + 208 | 0) >> 2] = 2139095039;
  HEAP32[($1 + 212 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1;
  i64toi32_i32$0 = -1;
  HEAP32[($1 + 72 | 0) >> 2] = 0;
  HEAP32[($1 + 76 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1;
  i64toi32_i32$0 = -1;
  HEAP32[($1 + 108 | 0) >> 2] = 0;
  HEAP32[($1 + 112 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1 + 116 | 0) >> 2] = -1;
  i64toi32_i32$1 = $1;
  i64toi32_i32$0 = 0;
  HEAP32[($1 + 80 | 0) >> 2] = -1;
  HEAP32[($1 + 84 | 0) >> 2] = i64toi32_i32$0;
  HEAP16[($1 + 104 | 0) >> 1] = 65535;
  i64toi32_i32$1 = $1;
  i64toi32_i32$0 = 1065353216;
  HEAP32[($1 + 96 | 0) >> 2] = 1065353216;
  HEAP32[($1 + 100 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1;
  i64toi32_i32$0 = 2139095039;
  HEAP32[($1 + 216 | 0) >> 2] = 2139095039;
  HEAP32[($1 + 220 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1;
  i64toi32_i32$0 = 0;
  HEAP32[($1 + 120 | 0) >> 2] = 0;
  HEAP32[($1 + 124 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1;
  i64toi32_i32$0 = 2139095039;
  HEAP32[($1 + 200 | 0) >> 2] = 2139095039;
  HEAP32[($1 + 204 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($1 + 68 | 0) >> 0] = 1;
  i64toi32_i32$1 = $1;
  i64toi32_i32$0 = 4;
  HEAP32[$1 >> 2] = 286331153;
  HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$6 : {
   $2 = HEAP32[($0 + 18576 | 0) >> 2] | 0;
   if (($2 | 0) != (HEAP32[($0 + 18580 | 0) >> 2] | 0 | 0)) {
    break label$6
   }
   $3 = $2 + 1 | 0;
   label$7 : {
    label$8 : {
     if ($2) {
      break label$8
     }
     $4 = 8;
     break label$7;
    }
    $4 = (($2 | 0) / (2 | 0) | 0) + $2 | 0;
   }
   $3 = ($4 | 0) > ($3 | 0) ? $4 : $3;
   if (($2 | 0) >= ($3 | 0)) {
    break label$6
   }
   $2 = $3 << 2 | 0;
   label$9 : {
    $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$4) {
     break label$9
    }
    $4 = $4 + 184 | 0;
    HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
   }
   $2 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($2, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$10 : {
    $4 = HEAP32[($0 + 18584 | 0) >> 2] | 0;
    if (!$4) {
     break label$10
    }
    __memcpy($2 | 0, $4 | 0, (HEAP32[($0 + 18576 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
    label$11 : {
     $4 = HEAP32[($0 + 18584 | 0) >> 2] | 0;
     if (!$4) {
      break label$11
     }
     $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$5) {
      break label$11
     }
     $5 = $5 + 184 | 0;
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($4, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($0 + 18580 | 0) >> 2] = $3;
   HEAP32[($0 + 18584 | 0) >> 2] = $2;
   $2 = HEAP32[($0 + 18576 | 0) >> 2] | 0;
  }
  HEAP32[((HEAP32[($0 + 18584 | 0) >> 2] | 0) + ($2 << 2 | 0) | 0) >> 2] = $1;
  HEAP32[($0 + 18576 | 0) >> 2] = (HEAP32[($0 + 18576 | 0) >> 2] | 0) + 1 | 0;
  label$12 : {
   $1 = HEAP32[($0 + 23900 | 0) >> 2] | 0;
   if (($1 | 0) > (3072 | 0)) {
    break label$12
   }
   label$13 : {
    label$14 : {
     if ($1) {
      break label$14
     }
     $1 = 8;
     break label$13;
    }
    $1 = (($1 | 0) / (2 | 0) | 0) + $1 | 0;
   }
   $1 = ($1 | 0) > (3073 | 0) ? $1 : 3073;
   label$15 : {
    $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$2) {
     break label$15
    }
    $2 = $2 + 184 | 0;
    HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1 | 0;
   }
   $2 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($1, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$16 : {
    $3 = HEAP32[($0 + 23904 | 0) >> 2] | 0;
    if (!$3) {
     break label$16
    }
    __memcpy($2 | 0, $3 | 0, HEAP32[($0 + 23896 | 0) >> 2] | 0 | 0) | 0;
    label$17 : {
     $3 = HEAP32[($0 + 23904 | 0) >> 2] | 0;
     if (!$3) {
      break label$17
     }
     $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$4) {
      break label$17
     }
     $4 = $4 + 184 | 0;
     HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($3, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($0 + 23900 | 0) >> 2] = $1;
   HEAP32[($0 + 23904 | 0) >> 2] = $2;
  }
  label$18 : {
   $4 = HEAP32[($0 + 23896 | 0) >> 2] | 0;
   if (($4 | 0) > (3072 | 0)) {
    break label$18
   }
   $1 = $4;
   label$19 : {
    $3 = (1 - $1 | 0) & 3 | 0;
    if (!$3) {
     break label$19
    }
    $2 = 0;
    $1 = $4;
    label$20 : while (1) {
     HEAP8[((HEAP32[($0 + 23904 | 0) >> 2] | 0) + $1 | 0) >> 0] = 0;
     $1 = $1 + 1 | 0;
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($3 | 0)) {
      continue label$20
     }
     break label$20;
    };
   }
   if (($4 + -3070 | 0) >>> 0 < 3 >>> 0) {
    break label$18
   }
   label$21 : while (1) {
    HEAP8[((HEAP32[($0 + 23904 | 0) >> 2] | 0) + $1 | 0) >> 0] = 0;
    HEAP8[(($1 + (HEAP32[($0 + 23904 | 0) >> 2] | 0) | 0) + 1 | 0) >> 0] = 0;
    HEAP8[(($1 + (HEAP32[($0 + 23904 | 0) >> 2] | 0) | 0) + 2 | 0) >> 0] = 0;
    HEAP8[(($1 + (HEAP32[($0 + 23904 | 0) >> 2] | 0) | 0) + 3 | 0) >> 0] = 0;
    $1 = $1 + 4 | 0;
    if (($1 | 0) != (3073 | 0)) {
     continue label$21
    }
    break label$21;
   };
  }
  HEAP32[($0 + 23896 | 0) >> 2] = 3073;
  $2 = HEAP32[(HEAP32[($0 + 18584 | 0) >> 2] | 0) >> 2] | 0;
  label$22 : {
   $1 = HEAP32[($0 + 14360 | 0) >> 2] | 0;
   if (($1 | 0) != (HEAP32[($0 + 14364 | 0) >> 2] | 0 | 0)) {
    break label$22
   }
   $3 = $1 + 1 | 0;
   label$23 : {
    label$24 : {
     if ($1) {
      break label$24
     }
     $4 = 8;
     break label$23;
    }
    $4 = (($1 | 0) / (2 | 0) | 0) + $1 | 0;
   }
   $3 = ($4 | 0) > ($3 | 0) ? $4 : $3;
   if (($1 | 0) >= ($3 | 0)) {
    break label$22
   }
   $1 = $3 << 2 | 0;
   label$25 : {
    $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$4) {
     break label$25
    }
    $4 = $4 + 184 | 0;
    HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
   }
   $1 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($1, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$26 : {
    $4 = HEAP32[($0 + 14368 | 0) >> 2] | 0;
    if (!$4) {
     break label$26
    }
    __memcpy($1 | 0, $4 | 0, (HEAP32[($0 + 14360 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
    label$27 : {
     $4 = HEAP32[($0 + 14368 | 0) >> 2] | 0;
     if (!$4) {
      break label$27
     }
     $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$5) {
      break label$27
     }
     $5 = $5 + 184 | 0;
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($4, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($0 + 14364 | 0) >> 2] = $3;
   HEAP32[($0 + 14368 | 0) >> 2] = $1;
   $1 = HEAP32[($0 + 14360 | 0) >> 2] | 0;
  }
  HEAP32[((HEAP32[($0 + 14368 | 0) >> 2] | 0) + ($1 << 2 | 0) | 0) >> 2] = $2;
  HEAP32[($0 + 14360 | 0) >> 2] = (HEAP32[($0 + 14360 | 0) >> 2] | 0) + 1 | 0;
  ImGui__DockContextInitialize_28ImGuiContext__29($0 | 0);
  HEAP8[$0 >> 0] = 1;
 }
 
 function WindowSettingsHandler_WriteAll_28ImGuiContext__2c_20ImGuiSettingsHandler__2c_20ImGuiTextBuffer__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $6 = 0, $3 = 0, $5 = 0, $7 = 0, $10 = Math_fround(0), $8 = 0, $9 = 0, $11 = 0;
  $3 = __stack_pointer - 144 | 0;
  __stack_pointer = $3;
  label$1 : {
   $4 = HEAP32[($0 + 16044 | 0) >> 2] | 0;
   if (!$4) {
    break label$1
   }
   $5 = 0;
   label$2 : while (1) {
    label$3 : {
     $6 = HEAP32[((HEAP32[($0 + 16052 | 0) >> 2] | 0) + ($5 << 2 | 0) | 0) >> 2] | 0;
     if ((HEAPU8[($6 + 9 | 0) >> 0] | 0) & 1 | 0) {
      break label$3
     }
     label$4 : {
      label$5 : {
       label$6 : {
        $4 = HEAP32[($6 + 668 | 0) >> 2] | 0;
        if (($4 | 0) != (-1 | 0)) {
         break label$6
        }
        $7 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
        $4 = HEAP32[($7 + 23420 | 0) >> 2] | 0;
        if (!$4) {
         break label$5
        }
        $8 = HEAP32[($6 + 4 | 0) >> 2] | 0;
        $9 = $4 + 4 | 0;
        $4 = $9;
        label$7 : while (1) {
         if ((HEAP32[$4 >> 2] | 0 | 0) == ($8 | 0)) {
          break label$4
         }
         $4 = $4 + (HEAP32[($4 + -4 | 0) >> 2] | 0) | 0;
         if (($4 | 0) != ($9 + (HEAP32[($7 + 23412 | 0) >> 2] | 0) | 0 | 0)) {
          continue label$7
         }
         break label$5;
        };
       }
       $7 = HEAP32[($0 + 23420 | 0) >> 2] | 0;
       if (!$7) {
        break label$5
       }
       $4 = $7 + $4 | 0;
       break label$4;
      }
      $4 = ImGui__CreateNewWindowSettings_28char_20const__29(HEAP32[$6 >> 2] | 0 | 0) | 0;
      HEAP32[($6 + 668 | 0) >> 2] = $4 - (HEAP32[($0 + 23420 | 0) >> 2] | 0) | 0;
     }
     label$8 : {
      label$9 : {
       $7 = $6 + 52 | 0;
       $10 = Math_fround(Math_fround(HEAPF32[($6 + 64 | 0) >> 2]) - Math_fround(HEAPF32[$7 >> 2]));
       if (!(Math_fround(Math_abs($10)) < Math_fround(2147483648.0))) {
        break label$9
       }
       $8 = ~~$10;
       break label$8;
      }
      $8 = -2147483648;
     }
     $8 = $8 & 65535 | 0;
     label$10 : {
      label$11 : {
       $9 = $6 + 56 | 0;
       $10 = Math_fround(Math_fround(HEAPF32[($6 + 68 | 0) >> 2]) - Math_fround(HEAPF32[$9 >> 2]));
       if (!(Math_fround(Math_abs($10)) < Math_fround(2147483648.0))) {
        break label$11
       }
       $11 = ~~$10;
       break label$10;
      }
      $11 = -2147483648;
     }
     HEAP32[($4 + 4 | 0) >> 2] = $11 << 16 | 0 | $8 | 0;
     label$12 : {
      label$13 : {
       $10 = Math_fround(HEAPF32[($6 + 80 | 0) >> 2]);
       if (!(Math_fround(Math_abs($10)) < Math_fround(2147483648.0))) {
        break label$13
       }
       $8 = ~~$10;
       break label$12;
      }
      $8 = -2147483648;
     }
     $8 = $8 & 65535 | 0;
     label$14 : {
      label$15 : {
       $10 = Math_fround(HEAPF32[($6 + 84 | 0) >> 2]);
       if (!(Math_fround(Math_abs($10)) < Math_fround(2147483648.0))) {
        break label$15
       }
       $11 = ~~$10;
       break label$14;
      }
      $11 = -2147483648;
     }
     HEAP32[($4 + 8 | 0) >> 2] = $11 << 16 | 0 | $8 | 0;
     HEAP32[($4 + 16 | 0) >> 2] = HEAP32[($6 + 48 | 0) >> 2] | 0;
     label$16 : {
      label$17 : {
       $10 = Math_fround(HEAPF32[$7 >> 2]);
       if (!(Math_fround(Math_abs($10)) < Math_fround(2147483648.0))) {
        break label$17
       }
       $7 = ~~$10;
       break label$16;
      }
      $7 = -2147483648;
     }
     $7 = $7 & 65535 | 0;
     label$18 : {
      label$19 : {
       $10 = Math_fround(HEAPF32[$9 >> 2]);
       if (!(Math_fround(Math_abs($10)) < Math_fround(2147483648.0))) {
        break label$19
       }
       $8 = ~~$10;
       break label$18;
      }
      $8 = -2147483648;
     }
     HEAP32[($4 + 12 | 0) >> 2] = $8 << 16 | 0 | $7 | 0;
     HEAP32[($4 + 20 | 0) >> 2] = HEAP32[($6 + 940 | 0) >> 2] | 0;
     HEAP32[($4 + 24 | 0) >> 2] = HEAP32[($6 + 16 | 0) >> 2] | 0;
     HEAP16[($4 + 28 | 0) >> 1] = HEAPU16[($6 + 906 | 0) >> 1] | 0;
     HEAP8[($4 + 30 | 0) >> 0] = HEAPU8[($6 + 222 | 0) >> 0] | 0;
     $4 = HEAP32[($0 + 16044 | 0) >> 2] | 0;
    }
    $5 = $5 + 1 | 0;
    if (($5 | 0) != ($4 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  label$20 : {
   $4 = HEAP32[$2 >> 2] | 0;
   $6 = $4 + -1 | 0;
   $4 = Math_imul(HEAP32[($0 + 23412 | 0) >> 2] | 0, 6) + ($6 >>> 0 > $4 >>> 0 ? 0 : $6) | 0;
   if ((HEAP32[($2 + 4 | 0) >> 2] | 0 | 0) >= ($4 | 0)) {
    break label$20
   }
   label$21 : {
    $6 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$6) {
     break label$21
    }
    $6 = $6 + 184 | 0;
    HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1 | 0;
   }
   $6 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($4, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$22 : {
    $5 = HEAP32[($2 + 8 | 0) >> 2] | 0;
    if (!$5) {
     break label$22
    }
    __memcpy($6 | 0, $5 | 0, HEAP32[$2 >> 2] | 0 | 0) | 0;
    label$23 : {
     $5 = HEAP32[($2 + 8 | 0) >> 2] | 0;
     if (!$5) {
      break label$23
     }
     $7 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$7) {
      break label$23
     }
     $7 = $7 + 184 | 0;
     HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($5, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($2 + 4 | 0) >> 2] = $4;
   HEAP32[($2 + 8 | 0) >> 2] = $6;
  }
  label$24 : {
   $4 = HEAP32[($0 + 23420 | 0) >> 2] | 0;
   if (!$4) {
    break label$24
   }
   $6 = $4 + 4 | 0;
   label$25 : while (1) {
    $5 = HEAP32[$1 >> 2] | 0;
    $4 = $6;
    HEAP32[($3 + 132 | 0) >> 2] = $4 + 32 | 0;
    HEAP32[($3 + 128 | 0) >> 2] = $5;
    ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2 | 0, 69094 | 0, $3 + 128 | 0 | 0);
    label$26 : {
     $6 = HEAP32[($4 + 16 | 0) >> 2] | 0;
     if (!$6) {
      break label$26
     }
     if (($6 | 0) == (286331153 | 0)) {
      break label$26
     }
     $6 = HEAP16[($4 + 12 | 0) >> 1] | 0;
     HEAP32[($3 + 116 | 0) >> 2] = HEAP16[($4 + 14 | 0) >> 1] | 0;
     HEAP32[($3 + 112 | 0) >> 2] = $6;
     ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2 | 0, 68689 | 0, $3 + 112 | 0 | 0);
     HEAP32[($3 + 96 | 0) >> 2] = HEAP32[($4 + 16 | 0) >> 2] | 0;
     ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2 | 0, 69133 | 0, $3 + 96 | 0 | 0);
    }
    label$27 : {
     label$28 : {
      $5 = HEAP16[($4 + 4 | 0) >> 1] | 0;
      $6 = HEAPU16[($4 + 6 | 0) >> 1] | 0;
      if (($5 | $6 | 0) & 65535 | 0) {
       break label$28
      }
      $6 = 0;
      if ((HEAP32[($4 + 16 | 0) >> 2] | 0 | 0) != (286331153 | 0)) {
       break label$27
      }
     }
     HEAP32[($3 + 80 | 0) >> 2] = $5;
     HEAP32[($3 + 84 | 0) >> 2] = $6 << 16 >> 16;
     ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2 | 0, 68697 | 0, $3 + 80 | 0 | 0);
    }
    label$29 : {
     $6 = HEAP16[($4 + 8 | 0) >> 1] | 0;
     $5 = HEAP16[($4 + 10 | 0) >> 1] | 0;
     if (!(($6 | $5 | 0) & 65535 | 0)) {
      break label$29
     }
     HEAP32[($3 + 68 | 0) >> 2] = $5;
     HEAP32[($3 + 64 | 0) >> 2] = $6;
     ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2 | 0, 68708 | 0, $3 + 64 | 0 | 0);
    }
    HEAP32[($3 + 48 | 0) >> 2] = HEAPU8[($4 + 30 | 0) >> 0] | 0;
    ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2 | 0, 68675 | 0, $3 + 48 | 0 | 0);
    label$30 : {
     $6 = HEAP32[($4 + 20 | 0) >> 2] | 0;
     if (!$6) {
      break label$30
     }
     label$31 : {
      label$32 : {
       $5 = HEAP16[($4 + 28 | 0) >> 1] | 0;
       if (($5 | 0) != (-1 | 0)) {
        break label$32
       }
       HEAP32[($3 + 16 | 0) >> 2] = $6;
       ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2 | 0, 69168 | 0, $3 + 16 | 0 | 0);
       break label$31;
      }
      HEAP32[($3 + 36 | 0) >> 2] = $5;
      HEAP32[($3 + 32 | 0) >> 2] = $6;
      ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2 | 0, 68720 | 0, $3 + 32 | 0 | 0);
     }
     $6 = HEAP32[($4 + 24 | 0) >> 2] | 0;
     if (!$6) {
      break label$30
     }
     HEAP32[$3 >> 2] = $6;
     ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2 | 0, 69152 | 0, $3 | 0);
    }
    ImGuiTextBuffer__append_28char_20const__2c_20char_20const__29($2 | 0, 70526 | 0, 0 | 0);
    $6 = $4 + (HEAP32[($4 + -4 | 0) >> 2] | 0) | 0;
    if (($6 | 0) == (((HEAP32[($0 + 23420 | 0) >> 2] | 0) + (HEAP32[($0 + 23412 | 0) >> 2] | 0) | 0) + 4 | 0 | 0)) {
     break label$24
    }
    if ($4) {
     continue label$25
    }
    break label$25;
   };
  }
  __stack_pointer = $3 + 144 | 0;
 }
 
 function WindowSettingsHandler_ApplyAll_28ImGuiContext__2c_20ImGuiSettingsHandler__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $10 = 0, $6 = 0, $11 = 0, $14 = Math_fround(0), $15 = Math_fround(0), i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $12 = 0, i64toi32_i32$4 = 0, $2 = 0, i64toi32_i32$2 = 0, $4 = 0, $13 = 0, $7 = 0, $8 = 0, $9 = 0, $13$hi = 0, i64toi32_i32$3 = 0, $23 = 0, $5 = 0, $47 = 0;
  label$1 : {
   $2 = HEAP32[($0 + 23420 | 0) >> 2] | 0;
   if (!$2) {
    break label$1
   }
   $3 = $2 + 4 | 0;
   $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $5 = $4 + 16100 | 0;
   label$2 : while (1) {
    label$3 : {
     $6 = $3;
     if (!(HEAPU8[($3 + 31 | 0) >> 0] | 0)) {
      break label$3
     }
     $7 = HEAP32[$6 >> 2] | 0;
     $8 = HEAP32[$5 >> 2] | 0;
     $3 = $8;
     $9 = HEAP32[($4 + 16092 | 0) >> 2] | 0;
     $10 = $9;
     label$4 : {
      if (!$10) {
       break label$4
      }
      label$5 : while (1) {
       $11 = $10 >>> 1 | 0;
       $12 = $3 + ($11 << 3 | 0) | 0;
       $47 = $12 + 8 | 0;
       $12 = (HEAP32[$12 >> 2] | 0) >>> 0 < $7 >>> 0;
       $3 = $12 ? $47 : $3;
       $10 = $12 ? $10 + ($11 ^ -1 | 0) | 0 : $11;
       if ($10) {
        continue label$5
       }
       break label$5;
      };
     }
     label$6 : {
      if (($3 | 0) == ($8 + ($9 << 3 | 0) | 0 | 0)) {
       break label$6
      }
      if ((HEAP32[$3 >> 2] | 0 | 0) != ($7 | 0)) {
       break label$6
      }
      $3 = HEAP32[($3 + 4 | 0) >> 2] | 0;
      if (!$3) {
       break label$6
      }
      i64toi32_i32$2 = HEAP32[(HEAP32[($4 + 18584 | 0) >> 2] | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
      $13 = i64toi32_i32$0;
      $13$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $3;
      HEAP32[($3 + 52 | 0) >> 2] = $13;
      HEAP32[($3 + 56 | 0) >> 2] = i64toi32_i32$1;
      label$7 : {
       label$8 : {
        $10 = HEAP32[($6 + 16 | 0) >> 2] | 0;
        if ($10) {
         break label$8
        }
        i64toi32_i32$1 = $13$hi;
        i64toi32_i32$2 = $13;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 32;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$0 = 0;
         $23 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
        } else {
         i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
         $23 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
        }
        $14 = (wasm2js_scratch_store_i32(2, $23), wasm2js_scratch_load_f32());
        i64toi32_i32$0 = $13$hi;
        $15 = (wasm2js_scratch_store_i32(2, $13), wasm2js_scratch_load_f32());
        break label$7;
       }
       HEAP32[($3 + 48 | 0) >> 2] = $10;
       $10 = HEAP16[($6 + 12 | 0) >> 1] | 0;
       $14 = Math_fround(HEAP16[($6 + 14 | 0) >> 1] | 0 | 0);
       HEAPF32[($3 + 56 | 0) >> 2] = $14;
       $15 = Math_fround($10 | 0);
       HEAPF32[($3 + 52 | 0) >> 2] = $15;
      }
      $10 = HEAP16[($6 + 6 | 0) >> 1] | 0;
      label$9 : {
       label$10 : {
        $15 = Math_fround($15 + Math_fround(HEAP16[($6 + 4 | 0) >> 1] | 0 | 0));
        if (!(Math_fround(Math_abs($15)) < Math_fround(2147483648.0))) {
         break label$10
        }
        $11 = ~~$15;
        break label$9;
       }
       $11 = -2147483648;
      }
      HEAPF32[($3 + 64 | 0) >> 2] = Math_fround($11 | 0);
      $11 = $3 + 68 | 0;
      label$11 : {
       label$12 : {
        $14 = Math_fround($14 + Math_fround($10 | 0));
        if (!(Math_fround(Math_abs($14)) < Math_fround(2147483648.0))) {
         break label$12
        }
        $10 = ~~$14;
        break label$11;
       }
       $10 = -2147483648;
      }
      HEAPF32[$11 >> 2] = Math_fround($10 | 0);
      label$13 : {
       $10 = HEAP16[($6 + 8 | 0) >> 1] | 0;
       if (($10 | 0) < (1 | 0)) {
        break label$13
       }
       $11 = HEAP16[($6 + 10 | 0) >> 1] | 0;
       if (($11 | 0) < (1 | 0)) {
        break label$13
       }
       $14 = Math_fround($11 | 0);
       HEAPF32[($3 + 84 | 0) >> 2] = $14;
       $15 = Math_fround($10 | 0);
       HEAPF32[($3 + 80 | 0) >> 2] = $15;
       HEAPF32[($3 + 76 | 0) >> 2] = $14;
       HEAPF32[($3 + 72 | 0) >> 2] = $15;
      }
      HEAP8[($3 + 222 | 0) >> 0] = HEAPU8[($6 + 30 | 0) >> 0] | 0;
      HEAP32[($3 + 940 | 0) >> 2] = HEAP32[($6 + 20 | 0) >> 2] | 0;
      HEAP16[($3 + 906 | 0) >> 1] = HEAPU16[($6 + 28 | 0) >> 1] | 0;
      $2 = HEAP32[($0 + 23420 | 0) >> 2] | 0;
     }
     HEAP8[($6 + 31 | 0) >> 0] = 0;
    }
    $3 = $6 + (HEAP32[($6 + -4 | 0) >> 2] | 0) | 0;
    if (($3 | 0) == (($2 + (HEAP32[($0 + 23412 | 0) >> 2] | 0) | 0) + 4 | 0 | 0)) {
     break label$1
    }
    if ($6) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function WindowSettingsHandler_ReadLine_28ImGuiContext__2c_20ImGuiSettingsHandler__2c_20void__2c_20char_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 144 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 112 | 0) >> 2] = $4 + 140 | 0;
  HEAP32[($4 + 116 | 0) >> 2] = $4 + 136 | 0;
  label$1 : {
   label$2 : {
    if ((sscanf($3 | 0, 66867 | 0, $4 + 112 | 0 | 0) | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP32[($2 + 4 | 0) >> 2] = (HEAP32[($4 + 136 | 0) >> 2] | 0) << 16 | 0 | (HEAPU16[($4 + 140 | 0) >> 1] | 0) | 0;
    break label$1;
   }
   HEAP32[($4 + 100 | 0) >> 2] = $4 + 136 | 0;
   HEAP32[($4 + 96 | 0) >> 2] = $4 + 140 | 0;
   label$3 : {
    if ((sscanf($3 | 0, 66877 | 0, $4 + 96 | 0 | 0) | 0 | 0) != (2 | 0)) {
     break label$3
    }
    HEAP32[($2 + 8 | 0) >> 2] = (HEAP32[($4 + 136 | 0) >> 2] | 0) << 16 | 0 | (HEAPU16[($4 + 140 | 0) >> 1] | 0) | 0;
    break label$1;
   }
   HEAP32[($4 + 80 | 0) >> 2] = $4 + 128 | 0;
   label$4 : {
    if ((sscanf($3 | 0, 67464 | 0, $4 + 80 | 0 | 0) | 0 | 0) != (1 | 0)) {
     break label$4
    }
    HEAP32[($2 + 16 | 0) >> 2] = HEAP32[($4 + 128 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[($4 + 68 | 0) >> 2] = $4 + 136 | 0;
   HEAP32[($4 + 64 | 0) >> 2] = $4 + 140 | 0;
   label$5 : {
    if ((sscanf($3 | 0, 66859 | 0, $4 + 64 | 0 | 0) | 0 | 0) != (2 | 0)) {
     break label$5
    }
    HEAP32[($2 + 12 | 0) >> 2] = (HEAP32[($4 + 136 | 0) >> 2] | 0) << 16 | 0 | (HEAPU16[($4 + 140 | 0) >> 1] | 0) | 0;
    break label$1;
   }
   HEAP32[($4 + 48 | 0) >> 2] = $4 + 132 | 0;
   label$6 : {
    if ((sscanf($3 | 0, 67222 | 0, $4 + 48 | 0 | 0) | 0 | 0) != (1 | 0)) {
     break label$6
    }
    HEAP8[($2 + 30 | 0) >> 0] = (HEAP32[($4 + 132 | 0) >> 2] | 0 | 0) != (0 | 0);
    break label$1;
   }
   HEAP32[($4 + 36 | 0) >> 2] = $4 + 132 | 0;
   HEAP32[($4 + 32 | 0) >> 2] = $4 + 128 | 0;
   label$7 : {
    if ((sscanf($3 | 0, 67296 | 0, $4 + 32 | 0 | 0) | 0 | 0) != (2 | 0)) {
     break label$7
    }
    HEAP32[($2 + 20 | 0) >> 2] = HEAP32[($4 + 128 | 0) >> 2] | 0;
    HEAP16[($2 + 28 | 0) >> 1] = HEAP32[($4 + 132 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[($4 + 16 | 0) >> 2] = $4 + 128 | 0;
   label$8 : {
    if ((sscanf($3 | 0, 67553 | 0, $4 + 16 | 0 | 0) | 0 | 0) != (1 | 0)) {
     break label$8
    }
    $3 = HEAP32[($4 + 128 | 0) >> 2] | 0;
    HEAP16[($2 + 28 | 0) >> 1] = 65535;
    HEAP32[($2 + 20 | 0) >> 2] = $3;
    break label$1;
   }
   HEAP32[$4 >> 2] = $4 + 128 | 0;
   if ((sscanf($3 | 0, 67540 | 0, $4 | 0) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   HEAP32[($2 + 24 | 0) >> 2] = HEAP32[($4 + 128 | 0) >> 2] | 0;
  }
  __stack_pointer = $4 + 144 | 0;
 }
 
 function WindowSettingsHandler_ReadOpen_28ImGuiContext__2c_20ImGuiSettingsHandler__2c_20char_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $3 = 0, $4 = 0, i64toi32_i32$1 = 0, $6 = 0, i64toi32_i32$0 = 0;
  $3 = 0;
  label$1 : {
   $4 = HEAPU8[$2 >> 0] | 0;
   if (!$4) {
    break label$1
   }
   $5 = -1;
   $3 = $2;
   label$2 : while (1) {
    $6 = $4 & 255 | 0;
    $4 = HEAPU8[($3 + 1 | 0) >> 0] | 0;
    label$3 : {
     if (($6 | 0) != (35 | 0)) {
      break label$3
     }
     if (($4 & 255 | 0 | 0) != (35 | 0)) {
      break label$3
     }
     $5 = (HEAPU8[($3 + 2 | 0) >> 0] | 0 | 0) == (35 | 0) ? -1 : $5;
    }
    $3 = $3 + 1 | 0;
    $5 = ($5 >>> 8 | 0) ^ (HEAP32[(((($5 & 255 | 0) ^ $6 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
    if ($4 & 255 | 0) {
     continue label$2
    }
    break label$2;
   };
   $3 = $5 ^ -1 | 0;
  }
  label$4 : {
   label$5 : {
    $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    $5 = HEAP32[($4 + 23420 | 0) >> 2] | 0;
    if (!$5) {
     break label$5
    }
    $6 = $5 + 4 | 0;
    $5 = $6;
    label$6 : while (1) {
     if ((HEAP32[$5 >> 2] | 0 | 0) == ($3 | 0)) {
      break label$4
     }
     $5 = $5 + (HEAP32[($5 + -4 | 0) >> 2] | 0) | 0;
     if (($5 | 0) != ($6 + (HEAP32[($4 + 23412 | 0) >> 2] | 0) | 0 | 0)) {
      continue label$6
     }
     break label$6;
    };
   }
   $5 = ImGui__CreateNewWindowSettings_28char_20const__29($2 | 0) | 0;
   $3 = HEAP32[$5 >> 2] | 0;
  }
  i64toi32_i32$1 = $5;
  i64toi32_i32$0 = 0;
  HEAP32[($5 + 4 | 0) >> 2] = 0;
  HEAP32[($5 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($5 + 28 | 0) >> 2] = 16842751;
  HEAP32[$5 >> 2] = $3;
  i64toi32_i32$1 = $5 + 20 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  return $5 | 0;
 }
 
 function WindowSettingsHandler_ClearAll_28ImGuiContext__2c_20ImGuiSettingsHandler__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $6 = 0, $2 = 0, $5 = 0, $8 = 0, $3 = 0, $7 = 0;
  label$1 : {
   $2 = HEAP32[($0 + 16044 | 0) >> 2] | 0;
   if (!$2) {
    break label$1
   }
   $3 = $2 & 3 | 0;
   $4 = HEAP32[($0 + 16052 | 0) >> 2] | 0;
   $5 = 0;
   $6 = 0;
   label$2 : {
    if ($2 >>> 0 < 4 >>> 0) {
     break label$2
    }
    $7 = $2 & -4 | 0;
    $6 = 0;
    $8 = 0;
    label$3 : while (1) {
     $2 = $6 << 2 | 0;
     HEAP32[((HEAP32[($4 + $2 | 0) >> 2] | 0) + 668 | 0) >> 2] = -1;
     HEAP32[((HEAP32[($4 + ($2 | 4 | 0) | 0) >> 2] | 0) + 668 | 0) >> 2] = -1;
     HEAP32[((HEAP32[($4 + ($2 | 8 | 0) | 0) >> 2] | 0) + 668 | 0) >> 2] = -1;
     HEAP32[((HEAP32[($4 + ($2 | 12 | 0) | 0) >> 2] | 0) + 668 | 0) >> 2] = -1;
     $6 = $6 + 4 | 0;
     $8 = $8 + 4 | 0;
     if (($8 | 0) != ($7 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   if (!$3) {
    break label$1
   }
   label$4 : while (1) {
    HEAP32[((HEAP32[($4 + ($6 << 2 | 0) | 0) >> 2] | 0) + 668 | 0) >> 2] = -1;
    $6 = $6 + 1 | 0;
    $5 = $5 + 1 | 0;
    if (($5 | 0) != ($3 | 0)) {
     continue label$4
    }
    break label$4;
   };
  }
  label$5 : {
   $6 = HEAP32[($0 + 23420 | 0) >> 2] | 0;
   if (!$6) {
    break label$5
   }
   HEAP32[($0 + 23412 | 0) >> 2] = 0;
   HEAP32[($0 + 23416 | 0) >> 2] = 0;
   label$6 : {
    $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$4) {
     break label$6
    }
    $4 = $4 + 184 | 0;
    HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + -1 | 0;
   }
   FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($6, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   HEAP32[($0 + 23420 | 0) >> 2] = 0;
  }
 }
 
 function ImGui__DockContextInitialize_28ImGuiContext__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $3 = 0, $2 = 0, $4 = 0;
  label$1 : {
   $1 = HEAP32[($0 + 23400 | 0) >> 2] | 0;
   if (($1 | 0) != (HEAP32[($0 + 23404 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $2 = $1 + 1 | 0;
   label$2 : {
    label$3 : {
     if ($1) {
      break label$3
     }
     $3 = 8;
     break label$2;
    }
    $3 = (($1 | 0) / (2 | 0) | 0) + $1 | 0;
   }
   $2 = ($3 | 0) > ($2 | 0) ? $3 : $2;
   if (($1 | 0) >= ($2 | 0)) {
    break label$1
   }
   $1 = Math_imul($2, 36);
   label$4 : {
    $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$3) {
     break label$4
    }
    $3 = $3 + 184 | 0;
    HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1 | 0;
   }
   $1 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($1, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$5 : {
    $3 = HEAP32[($0 + 23408 | 0) >> 2] | 0;
    if (!$3) {
     break label$5
    }
    __memcpy($1 | 0, $3 | 0, Math_imul(HEAP32[($0 + 23400 | 0) >> 2] | 0, 36) | 0) | 0;
    label$6 : {
     $3 = HEAP32[($0 + 23408 | 0) >> 2] | 0;
     if (!$3) {
      break label$6
     }
     $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$4) {
      break label$6
     }
     $4 = $4 + 184 | 0;
     HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($3, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($0 + 23404 | 0) >> 2] = $2;
   HEAP32[($0 + 23408 | 0) >> 2] = $1;
   $1 = HEAP32[($0 + 23400 | 0) >> 2] | 0;
  }
  $1 = (HEAP32[($0 + 23408 | 0) >> 2] | 0) + Math_imul($1, 36) | 0;
  HEAP32[($1 + 32 | 0) >> 2] = 0;
  HEAP32[($1 + 28 | 0) >> 2] = 9;
  HEAP32[($1 + 24 | 0) >> 2] = 10;
  HEAP32[($1 + 20 | 0) >> 2] = 11;
  HEAP32[($1 + 16 | 0) >> 2] = 12;
  HEAP32[($1 + 12 | 0) >> 2] = 13;
  HEAP32[($1 + 8 | 0) >> 2] = 13;
  HEAP32[($1 + 4 | 0) >> 2] = -1986982791;
  HEAP32[$1 >> 2] = 66914;
  HEAP32[($0 + 23400 | 0) >> 2] = (HEAP32[($0 + 23400 | 0) >> 2] | 0) + 1 | 0;
 }
 
 function ImGui__SaveIniSettingsToMemory_28unsigned_20long__29($0) {
  $0 = $0 | 0;
  var $3 = 0, $1 = 0, $4 = 0, $5 = 0, $2 = 0;
  $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  HEAP32[($1 + 23384 | 0) >> 2] = 0;
  $2 = $1 + 23388 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $3 = HEAP32[($1 + 23392 | 0) >> 2] | 0;
     if (($3 | 0) > (-1 | 0)) {
      break label$3
     }
     $3 = $1 + 184 | 0;
     HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1 | 0;
     $3 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](0, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
     label$4 : {
      $4 = HEAP32[($1 + 23396 | 0) >> 2] | 0;
      if (!$4) {
       break label$4
      }
      __memcpy($3 | 0, $4 | 0, HEAP32[($1 + 23388 | 0) >> 2] | 0 | 0) | 0;
      label$5 : {
       $4 = HEAP32[($1 + 23396 | 0) >> 2] | 0;
       if (!$4) {
        break label$5
       }
       $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
       if (!$5) {
        break label$5
       }
       $5 = $5 + 184 | 0;
       HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1 | 0;
      }
      FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($4, HEAP32[(0 + 92728 | 0) >> 2] | 0);
     }
     HEAP32[($1 + 23396 | 0) >> 2] = $3;
     HEAP32[($1 + 23388 | 0) >> 2] = 0;
     HEAP32[($1 + 23392 | 0) >> 2] = 0;
     break label$2;
    }
    HEAP32[$2 >> 2] = 0;
    if (!$3) {
     break label$2
    }
    $4 = HEAP32[($1 + 23396 | 0) >> 2] | 0;
    $5 = 0;
    break label$1;
   }
   label$6 : {
    $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$3) {
     break label$6
    }
    $3 = $3 + 184 | 0;
    HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1 | 0;
   }
   $4 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](8, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$7 : {
    $3 = HEAP32[($1 + 23396 | 0) >> 2] | 0;
    if (!$3) {
     break label$7
    }
    __memcpy($4 | 0, $3 | 0, HEAP32[($1 + 23388 | 0) >> 2] | 0 | 0) | 0;
    label$8 : {
     $3 = HEAP32[($1 + 23396 | 0) >> 2] | 0;
     if (!$3) {
      break label$8
     }
     $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$5) {
      break label$8
     }
     $5 = $5 + 184 | 0;
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($3, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($1 + 23392 | 0) >> 2] = 8;
   HEAP32[($1 + 23396 | 0) >> 2] = $4;
   $5 = HEAP32[($1 + 23388 | 0) >> 2] | 0;
  }
  $3 = 0;
  HEAP8[($4 + $5 | 0) >> 0] = 0;
  HEAP32[($1 + 23388 | 0) >> 2] = (HEAP32[($1 + 23388 | 0) >> 2] | 0) + 1 | 0;
  label$9 : {
   if ((HEAP32[($1 + 23400 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$9
   }
   label$10 : while (1) {
    $4 = (HEAP32[($1 + 23408 | 0) >> 2] | 0) + Math_imul($3, 36) | 0;
    FUNCTION_TABLE[HEAP32[($4 + 28 | 0) >> 2] | 0 | 0]($1, $4, $2);
    $3 = $3 + 1 | 0;
    if (($3 | 0) < (HEAP32[($1 + 23400 | 0) >> 2] | 0 | 0)) {
     continue label$10
    }
    break label$10;
   };
  }
  label$11 : {
   if (!$0) {
    break label$11
   }
   $3 = HEAP32[$2 >> 2] | 0;
   $4 = $3 + -1 | 0;
   HEAP32[$0 >> 2] = $4 >>> 0 > $3 >>> 0 ? 0 : $4;
  }
  $1 = HEAP32[($1 + 23396 | 0) >> 2] | 0;
  return ($1 ? $1 : 92724) | 0;
 }
 
 function ImGuiViewportP___ImGuiViewportP_28_29($0) {
  $0 = $0 | 0;
  var $2 = 0, $1 = 0;
  label$1 : {
   $1 = HEAP32[($0 + 120 | 0) >> 2] | 0;
   if (!$1) {
    break label$1
   }
   $1 = ImDrawList___ImDrawList_28_29($1 | 0) | 0;
   label$2 : {
    $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$2) {
     break label$2
    }
    $2 = $2 + 184 | 0;
    HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1 | 0;
   }
   FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($1, HEAP32[(0 + 92728 | 0) >> 2] | 0);
  }
  label$3 : {
   $1 = HEAP32[($0 + 124 | 0) >> 2] | 0;
   if (!$1) {
    break label$3
   }
   $1 = ImDrawList___ImDrawList_28_29($1 | 0) | 0;
   label$4 : {
    $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$2) {
     break label$4
    }
    $2 = $2 + 184 | 0;
    HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1 | 0;
   }
   FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($1, HEAP32[(0 + 92728 | 0) >> 2] | 0);
  }
  label$5 : {
   $1 = HEAP32[($0 + 196 | 0) >> 2] | 0;
   if (!$1) {
    break label$5
   }
   label$6 : {
    $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$2) {
     break label$6
    }
    $2 = $2 + 184 | 0;
    HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1 | 0;
   }
   FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($1, HEAP32[(0 + 92728 | 0) >> 2] | 0);
  }
  label$7 : {
   $1 = HEAP32[($0 + 184 | 0) >> 2] | 0;
   if (!$1) {
    break label$7
   }
   label$8 : {
    $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$2) {
     break label$8
    }
    $2 = $2 + 184 | 0;
    HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1 | 0;
   }
   FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($1, HEAP32[(0 + 92728 | 0) >> 2] | 0);
  }
  return $0 | 0;
 }
 
 function ImGui__CreateNewWindowSettings_28char_20const__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $7 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $5 = 0;
  label$1 : {
   $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $2 = HEAP32[($1 + 23416 | 0) >> 2] | 0;
   $3 = strstr($0 | 0, 68218 | 0) | 0;
   $4 = $3 ? $3 : $0;
   $5 = strlen($4 | 0) | 0;
   $3 = ($5 & -4 | 0) + 40 | 0;
   $6 = HEAP32[($1 + 23412 | 0) >> 2] | 0;
   $0 = $3 + $6 | 0;
   if (($2 | 0) >= ($0 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($2) {
      break label$3
     }
     $7 = 8;
     break label$2;
    }
    $7 = (($2 | 0) / (2 | 0) | 0) + $2 | 0;
   }
   $7 = ($7 | 0) > ($0 | 0) ? $7 : $0;
   if (($2 | 0) >= ($7 | 0)) {
    break label$1
   }
   $2 = $1 + 184 | 0;
   HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1 | 0;
   $2 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($7, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$4 : {
    $8 = HEAP32[($1 + 23420 | 0) >> 2] | 0;
    if (!$8) {
     break label$4
    }
    __memcpy($2 | 0, $8 | 0, HEAP32[($1 + 23412 | 0) >> 2] | 0 | 0) | 0;
    label$5 : {
     $8 = HEAP32[($1 + 23420 | 0) >> 2] | 0;
     if (!$8) {
      break label$5
     }
     $9 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$9) {
      break label$5
     }
     $9 = $9 + 184 | 0;
     HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($8, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($1 + 23416 | 0) >> 2] = $7;
   HEAP32[($1 + 23420 | 0) >> 2] = $2;
  }
  HEAP32[($1 + 23412 | 0) >> 2] = $0;
  $1 = (HEAP32[($1 + 23420 | 0) >> 2] | 0) + $6 | 0;
  i64toi32_i32$1 = $1 + 28 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1;
  i64toi32_i32$0 = 0;
  HEAP32[($1 + 4 | 0) >> 2] = 0;
  HEAP32[($1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[$1 >> 2] = $3;
  i64toi32_i32$1 = $1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1 + 20 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP16[($1 + 32 | 0) >> 1] = 65535;
  $7 = $1 + 4 | 0;
  label$6 : {
   label$7 : {
    if (!$5) {
     break label$7
    }
    $1 = -1;
    $0 = $5;
    $2 = $4;
    label$8 : while (1) {
     $3 = $2;
     $2 = $2 + 1 | 0;
     $0 = $0 + -1 | 0;
     label$9 : {
      $6 = HEAPU8[$3 >> 0] | 0;
      if (($6 | 0) != (35 | 0)) {
       break label$9
      }
      if ($0 >>> 0 < 2 >>> 0) {
       break label$9
      }
      if ((HEAPU8[$2 >> 0] | 0 | 0) != (35 | 0)) {
       break label$9
      }
      $1 = (HEAPU8[($3 + 2 | 0) >> 0] | 0 | 0) == (35 | 0) ? -1 : $1;
     }
     $1 = ($1 >>> 8 | 0) ^ (HEAP32[(((($1 & 255 | 0) ^ $6 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
     if ($0) {
      continue label$8
     }
     break label$6;
    };
   }
   $1 = -1;
   $0 = HEAPU8[$4 >> 0] | 0;
   if (!$0) {
    break label$6
   }
   $2 = $4;
   label$10 : while (1) {
    $3 = $0 & 255 | 0;
    $0 = HEAPU8[($2 + 1 | 0) >> 0] | 0;
    label$11 : {
     if (($3 | 0) != (35 | 0)) {
      break label$11
     }
     if (($0 & 255 | 0 | 0) != (35 | 0)) {
      break label$11
     }
     $1 = (HEAPU8[($2 + 2 | 0) >> 0] | 0 | 0) == (35 | 0) ? -1 : $1;
    }
    $2 = $2 + 1 | 0;
    $1 = ($1 >>> 8 | 0) ^ (HEAP32[(((($1 & 255 | 0) ^ $3 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
    if ($0 & 255 | 0) {
     continue label$10
    }
    break label$10;
   };
  }
  HEAP32[$7 >> 2] = $1 ^ -1 | 0;
  __memcpy($7 + 32 | 0 | 0, $4 | 0, $5 + 1 | 0 | 0) | 0;
  return $7 | 0;
 }
 
 function ImGui__AddSettingsHandler_28ImGuiSettingsHandler_20const__29($0) {
  $0 = $0 | 0;
  var $2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $1 = 0, i64toi32_i32$0 = 0, $4 = 0, $3 = 0, $5 = 0, $82 = 0, $92 = 0, $97 = 0, $102 = 0;
  label$1 : {
   $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $2 = HEAP32[($1 + 23400 | 0) >> 2] | 0;
   if (($2 | 0) != (HEAP32[($1 + 23404 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $3 = $2 + 1 | 0;
   label$2 : {
    label$3 : {
     if ($2) {
      break label$3
     }
     $4 = 8;
     break label$2;
    }
    $4 = (($2 | 0) / (2 | 0) | 0) + $2 | 0;
   }
   $3 = ($4 | 0) > ($3 | 0) ? $4 : $3;
   if (($2 | 0) >= ($3 | 0)) {
    break label$1
   }
   $2 = $1 + 184 | 0;
   HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1 | 0;
   $2 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](Math_imul($3, 36), HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$4 : {
    $4 = HEAP32[($1 + 23408 | 0) >> 2] | 0;
    if (!$4) {
     break label$4
    }
    __memcpy($2 | 0, $4 | 0, Math_imul(HEAP32[($1 + 23400 | 0) >> 2] | 0, 36) | 0) | 0;
    label$5 : {
     $4 = HEAP32[($1 + 23408 | 0) >> 2] | 0;
     if (!$4) {
      break label$5
     }
     $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$5) {
      break label$5
     }
     $5 = $5 + 184 | 0;
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($4, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($1 + 23404 | 0) >> 2] = $3;
   HEAP32[($1 + 23408 | 0) >> 2] = $2;
   $2 = HEAP32[($1 + 23400 | 0) >> 2] | 0;
  }
  $2 = (HEAP32[($1 + 23408 | 0) >> 2] | 0) + Math_imul($2, 36) | 0;
  i64toi32_i32$2 = $0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $82 = i64toi32_i32$0;
  i64toi32_i32$0 = $2;
  HEAP32[$2 >> 2] = $82;
  HEAP32[($2 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($2 + 32 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
  i64toi32_i32$2 = i64toi32_i32$2 + 24 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $92 = i64toi32_i32$1;
  i64toi32_i32$1 = $2 + 24 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $92;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $0 + 16 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $97 = i64toi32_i32$0;
  i64toi32_i32$0 = $2 + 16 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $97;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $102 = i64toi32_i32$1;
  i64toi32_i32$1 = $2 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $102;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1 + 23400 | 0) >> 2] = (HEAP32[($1 + 23400 | 0) >> 2] | 0) + 1 | 0;
 }
 
 function ImGui__DockSettingsHandler_WriteAll_28ImGuiContext__2c_20ImGuiSettingsHandler__2c_20ImGuiTextBuffer__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $3 = 0, $7 = 0, $8 = 0, $11 = 0, $12 = 0, $9 = 0, $13 = 0, $14 = 0, $10 = 0;
  $3 = __stack_pointer - 144 | 0;
  __stack_pointer = $3;
  label$1 : {
   if (!((HEAPU8[($0 + 8 | 0) >> 0] | 0) & 64 | 0)) {
    break label$1
   }
   label$2 : {
    $4 = HEAP32[($0 + 23368 | 0) >> 2] | 0;
    if (($4 | 0) > (-1 | 0)) {
     break label$2
    }
    label$3 : {
     $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$4) {
      break label$3
     }
     $4 = $4 + 184 | 0;
     HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
    }
    $5 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](0, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
    label$4 : {
     $4 = HEAP32[($0 + 23372 | 0) >> 2] | 0;
     if (!$4) {
      break label$4
     }
     __memcpy($5 | 0, $4 | 0, Math_imul(HEAP32[($0 + 23364 | 0) >> 2] | 0, 36) | 0) | 0;
     label$5 : {
      $4 = HEAP32[($0 + 23372 | 0) >> 2] | 0;
      if (!$4) {
       break label$5
      }
      $6 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$6) {
       break label$5
      }
      $6 = $6 + 184 | 0;
      HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1 | 0;
     }
     FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($4, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    }
    $4 = 0;
    HEAP32[($0 + 23368 | 0) >> 2] = 0;
    HEAP32[($0 + 23372 | 0) >> 2] = $5;
   }
   HEAP32[($0 + 23364 | 0) >> 2] = 0;
   label$6 : {
    $6 = HEAP32[($0 + 23340 | 0) >> 2] | 0;
    if (($4 | 0) >= ($6 | 0)) {
     break label$6
    }
    $4 = Math_imul($6, 36);
    label$7 : {
     $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$5) {
      break label$7
     }
     $5 = $5 + 184 | 0;
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1 | 0;
    }
    $4 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($4, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
    label$8 : {
     $5 = HEAP32[($0 + 23372 | 0) >> 2] | 0;
     if (!$5) {
      break label$8
     }
     __memcpy($4 | 0, $5 | 0, Math_imul(HEAP32[($0 + 23364 | 0) >> 2] | 0, 36) | 0) | 0;
     label$9 : {
      $5 = HEAP32[($0 + 23372 | 0) >> 2] | 0;
      if (!$5) {
       break label$9
      }
      $7 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$7) {
       break label$9
      }
      $7 = $7 + 184 | 0;
      HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1 | 0;
     }
     FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($5, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    }
    HEAP32[($0 + 23368 | 0) >> 2] = $6;
    HEAP32[($0 + 23372 | 0) >> 2] = $4;
    $6 = HEAP32[($0 + 23340 | 0) >> 2] | 0;
   }
   label$10 : {
    if (($6 | 0) < (1 | 0)) {
     break label$10
    }
    $7 = $0 + 23340 | 0;
    $4 = 0;
    label$11 : while (1) {
     label$12 : {
      $5 = HEAP32[(((HEAP32[($0 + 23348 | 0) >> 2] | 0) + ($4 << 3 | 0) | 0) + 4 | 0) >> 2] | 0;
      if (!$5) {
       break label$12
      }
      if (HEAP32[($5 + 24 | 0) >> 2] | 0) {
       break label$12
      }
      DockSettingsHandler_DockNodeToSettings_28ImGuiDockContext__2c_20ImGuiDockNode__2c_20int_29($7 | 0, $5 | 0, 0 | 0);
      $6 = HEAP32[$7 >> 2] | 0;
     }
     $4 = $4 + 1 | 0;
     if (($4 | 0) < ($6 | 0)) {
      continue label$11
     }
     break label$11;
    };
   }
   label$13 : {
    label$14 : {
     $8 = HEAP32[($0 + 23364 | 0) >> 2] | 0;
     if (($8 | 0) >= (1 | 0)) {
      break label$14
     }
     $7 = 0;
     break label$13;
    }
    $9 = $8 & 3 | 0;
    $5 = HEAP32[($0 + 23372 | 0) >> 2] | 0;
    $6 = 0;
    $4 = 0;
    $7 = 0;
    label$15 : {
     if ($8 >>> 0 < 4 >>> 0) {
      break label$15
     }
     $10 = $8 & -4 | 0;
     $4 = 0;
     $7 = 0;
     $8 = 0;
     label$16 : while (1) {
      $11 = HEAP8[(($5 + Math_imul($4 | 3 | 0, 36) | 0) + 17 | 0) >> 0] | 0;
      $12 = HEAP8[(($5 + Math_imul($4 | 2 | 0, 36) | 0) + 17 | 0) >> 0] | 0;
      $13 = HEAP8[(($5 + Math_imul($4 | 1 | 0, 36) | 0) + 17 | 0) >> 0] | 0;
      $14 = HEAP8[(($5 + Math_imul($4, 36) | 0) + 17 | 0) >> 0] | 0;
      $7 = ($14 | 0) > ($7 | 0) ? $14 : $7;
      $7 = ($13 | 0) > ($7 | 0) ? $13 : $7;
      $7 = ($12 | 0) > ($7 | 0) ? $12 : $7;
      $7 = ($11 | 0) > ($7 | 0) ? $11 : $7;
      $4 = $4 + 4 | 0;
      $8 = $8 + 4 | 0;
      if (($8 | 0) != ($10 | 0)) {
       continue label$16
      }
      break label$16;
     };
    }
    if (!$9) {
     break label$13
    }
    label$17 : while (1) {
     $8 = HEAP8[(($5 + Math_imul($4, 36) | 0) + 17 | 0) >> 0] | 0;
     $7 = ($8 | 0) > ($7 | 0) ? $8 : $7;
     $4 = $4 + 1 | 0;
     $6 = $6 + 1 | 0;
     if (($6 | 0) != ($9 | 0)) {
      continue label$17
     }
     break label$17;
    };
   }
   HEAP32[($3 + 128 | 0) >> 2] = HEAP32[$1 >> 2] | 0;
   ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2 | 0, 69121 | 0, $3 + 128 | 0 | 0);
   label$18 : {
    if ((HEAP32[($0 + 23364 | 0) >> 2] | 0 | 0) < (1 | 0)) {
     break label$18
    }
    $11 = $3 + 112 | 0;
    $8 = 0;
    label$19 : while (1) {
     $4 = (HEAP32[($0 + 23372 | 0) >> 2] | 0) + Math_imul($8, 36) | 0;
     $6 = HEAP32[($4 + 20 | 0) >> 2] | 0;
     $5 = HEAP8[($4 + 17 | 0) >> 0] | 0;
     HEAP32[$11 >> 2] = 70527;
     HEAP32[($3 + 100 | 0) >> 2] = 70527;
     HEAP32[($3 + 96 | 0) >> 2] = $5 << 1 | 0;
     HEAP32[($3 + 108 | 0) >> 2] = ($7 - $5 | 0) << 1 | 0;
     HEAP32[($3 + 104 | 0) >> 2] = $6 & 1024 | 0 ? 67071 : 68222;
     ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2 | 0, 66043 | 0, $3 + 96 | 0 | 0);
     HEAP32[($3 + 80 | 0) >> 2] = HEAP32[$4 >> 2] | 0;
     ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2 | 0, 67482 | 0, $3 + 80 | 0 | 0);
     label$20 : {
      label$21 : {
       $5 = HEAP32[($4 + 4 | 0) >> 2] | 0;
       if (!$5) {
        break label$21
       }
       $6 = HEAP16[($4 + 32 | 0) >> 1] | 0;
       HEAP32[($3 + 72 | 0) >> 2] = HEAP16[($4 + 34 | 0) >> 1] | 0;
       HEAP32[($3 + 68 | 0) >> 2] = $6;
       HEAP32[($3 + 64 | 0) >> 2] = $5;
       ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2 | 0, 67235 | 0, $3 + 64 | 0 | 0);
       break label$20;
      }
      label$22 : {
       $5 = HEAP32[($4 + 8 | 0) >> 2] | 0;
       if (!$5) {
        break label$22
       }
       HEAP32[($3 + 48 | 0) >> 2] = $5;
       ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2 | 0, 67432 | 0, $3 + 48 | 0 | 0);
      }
      $5 = HEAP16[($4 + 24 | 0) >> 1] | 0;
      $6 = HEAP16[($4 + 26 | 0) >> 1] | 0;
      $12 = HEAP16[($4 + 28 | 0) >> 1] | 0;
      HEAP32[($3 + 44 | 0) >> 2] = HEAP16[($4 + 30 | 0) >> 1] | 0;
      HEAP32[($3 + 40 | 0) >> 2] = $12;
      HEAP32[($3 + 36 | 0) >> 2] = $6;
      HEAP32[($3 + 32 | 0) >> 2] = $5;
      ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2 | 0, 67264 | 0, $3 + 32 | 0 | 0);
     }
     $6 = $4 + 20 | 0;
     label$23 : {
      $5 = HEAPU8[($4 + 16 | 0) >> 0] | 0;
      if (($5 | 0) == (255 | 0)) {
       break label$23
      }
      HEAP32[($3 + 16 | 0) >> 2] = $5 ? 89 : 88;
      ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2 | 0, 67322 | 0, $3 + 16 | 0 | 0);
     }
     label$24 : {
      $5 = HEAP32[$6 >> 2] | 0;
      if (!($5 & 32 | 0)) {
       break label$24
      }
      ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2 | 0, 67937 | 0, 0 | 0);
      $5 = HEAP32[$6 >> 2] | 0;
     }
     label$25 : {
      if (!($5 & 2048 | 0)) {
       break label$25
      }
      ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2 | 0, 67949 | 0, 0 | 0);
      $5 = HEAP32[$6 >> 2] | 0;
     }
     label$26 : {
      if (!($5 & 4096 | 0)) {
       break label$26
      }
      ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2 | 0, 67870 | 0, 0 | 0);
      $5 = HEAP32[$6 >> 2] | 0;
     }
     label$27 : {
      if (!($5 & 8192 | 0)) {
       break label$27
      }
      ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2 | 0, 67882 | 0, 0 | 0);
      $5 = HEAP32[$6 >> 2] | 0;
     }
     label$28 : {
      if (!($5 & 16384 | 0)) {
       break label$28
      }
      ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2 | 0, 67898 | 0, 0 | 0);
      $5 = HEAP32[$6 >> 2] | 0;
     }
     label$29 : {
      if (!($5 & 32768 | 0)) {
       break label$29
      }
      ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2 | 0, 67920 | 0, 0 | 0);
     }
     label$30 : {
      $4 = HEAP32[($4 + 12 | 0) >> 2] | 0;
      if (!$4) {
       break label$30
      }
      HEAP32[$3 >> 2] = $4;
      ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2 | 0, 67447 | 0, $3 | 0);
     }
     ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2 | 0, 70526 | 0, 0 | 0);
     $8 = $8 + 1 | 0;
     if (($8 | 0) < (HEAP32[($0 + 23364 | 0) >> 2] | 0 | 0)) {
      continue label$19
     }
     break label$19;
    };
   }
   ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2 | 0, 70526 | 0, 0 | 0);
  }
  __stack_pointer = $3 + 144 | 0;
 }
 
 function ImGui__DockSettingsHandler_ApplyAll_28ImGuiContext__2c_20ImGuiSettingsHandler__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $7 = 0, $12 = 0, $2 = 0, $8 = 0, $11 = 0, $9 = 0, $6 = 0, i64toi32_i32$0 = 0, $4 = 0, $10 = 0, i64toi32_i32$1 = 0, $5 = 0, $13 = 0, $15 = 0, $16 = 0, $14 = 0, $67 = 0, $418 = 0, $497 = 0, $550 = 0, $619 = 0, $674 = 0, $889 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  label$1 : {
   if (HEAP32[($0 + 16044 | 0) >> 2] | 0) {
    break label$1
   }
   i64toi32_i32$1 = $2 + 40 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $2 + 32 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = ($2 + 16 | 0) + 8 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = 0;
   HEAP32[($2 + 16 | 0) >> 2] = 0;
   HEAP32[($2 + 20 | 0) >> 2] = i64toi32_i32$0;
   $3 = $0 + 23364 | 0;
   ImPool_ImGuiDockContextPruneNodeData___Reserve_28int_29($2 + 16 | 0 | 0, HEAP32[$3 >> 2] | 0 | 0);
   label$2 : {
    label$3 : {
     $4 = HEAP32[$3 >> 2] | 0;
     if (($4 | 0) < (1 | 0)) {
      break label$3
     }
     $5 = ($2 + 16 | 0) + 12 | 0;
     $6 = 0;
     label$4 : while (1) {
      $7 = 0;
      label$5 : {
       $8 = (HEAP32[($0 + 23372 | 0) >> 2] | 0) + Math_imul($6, 36) | 0;
       $9 = HEAP32[($8 + 4 | 0) >> 2] | 0;
       if (!$9) {
        break label$5
       }
       $10 = HEAP32[($2 + 36 | 0) >> 2] | 0;
       $3 = $10;
       $4 = HEAP32[($2 + 28 | 0) >> 2] | 0;
       $7 = $4;
       label$6 : {
        if (!$7) {
         break label$6
        }
        label$7 : while (1) {
         $11 = $7 >>> 1 | 0;
         $12 = $3 + ($11 << 3 | 0) | 0;
         $67 = $12 + 8 | 0;
         $12 = (HEAP32[$12 >> 2] | 0) >>> 0 < $9 >>> 0;
         $3 = $12 ? $67 : $3;
         $7 = $12 ? $7 + ($11 ^ -1 | 0) | 0 : $11;
         if ($7) {
          continue label$7
         }
         break label$7;
        };
       }
       $7 = 0;
       if (($3 | 0) == ($10 + ($4 << 3 | 0) | 0 | 0)) {
        break label$5
       }
       $7 = 0;
       if ((HEAP32[$3 >> 2] | 0 | 0) != ($9 | 0)) {
        break label$5
       }
       $7 = 0;
       $3 = HEAP32[($3 + 4 | 0) >> 2] | 0;
       if (($3 | 0) == (-1 | 0)) {
        break label$5
       }
       $7 = (HEAP32[($2 + 24 | 0) >> 2] | 0) + ($3 << 4 | 0) | 0;
      }
      $11 = $8 + 4 | 0;
      $7 = HEAP32[($7 ? $7 + 12 | 0 : $8) >> 2] | 0;
      label$8 : {
       $12 = ImGuiStorage__GetIntRef_28unsigned_20int_2c_20int_29($5 | 0, HEAP32[$8 >> 2] | 0 | 0, -1 | 0) | 0;
       $3 = HEAP32[$12 >> 2] | 0;
       if (($3 | 0) != (-1 | 0)) {
        break label$8
       }
       HEAP32[$12 >> 2] = HEAP32[($2 + 40 | 0) >> 2] | 0;
       label$9 : {
        label$10 : {
         $3 = HEAP32[($2 + 40 | 0) >> 2] | 0;
         if (($3 | 0) != (HEAP32[($2 + 16 | 0) >> 2] | 0 | 0)) {
          break label$10
         }
         $9 = $3 + 1 | 0;
         $12 = $9;
         label$11 : {
          $8 = HEAP32[($2 + 20 | 0) >> 2] | 0;
          if (($8 | 0) > ($3 | 0)) {
           break label$11
          }
          label$12 : {
           label$13 : {
            if ($8) {
             break label$13
            }
            $4 = 8;
            break label$12;
           }
           $4 = (($8 | 0) / (2 | 0) | 0) + $8 | 0;
          }
          $12 = $9;
          $4 = ($4 | 0) > ($12 | 0) ? $4 : $12;
          if (($8 | 0) >= ($4 | 0)) {
           break label$11
          }
          $12 = $4 << 4 | 0;
          label$14 : {
           $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
           if (!$8) {
            break label$14
           }
           $8 = $8 + 184 | 0;
           HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 1 | 0;
          }
          $12 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($12, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
          label$15 : {
           $8 = HEAP32[($2 + 24 | 0) >> 2] | 0;
           if (!$8) {
            break label$15
           }
           __memcpy($12 | 0, $8 | 0, (HEAP32[($2 + 16 | 0) >> 2] | 0) << 4 | 0 | 0) | 0;
           label$16 : {
            $8 = HEAP32[($2 + 24 | 0) >> 2] | 0;
            if (!$8) {
             break label$16
            }
            $10 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
            if (!$10) {
             break label$16
            }
            $10 = $10 + 184 | 0;
            HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + -1 | 0;
           }
           FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($8, HEAP32[(0 + 92728 | 0) >> 2] | 0);
          }
          HEAP32[($2 + 20 | 0) >> 2] = $4;
          HEAP32[($2 + 24 | 0) >> 2] = $12;
          $12 = (HEAP32[($2 + 40 | 0) >> 2] | 0) + 1 | 0;
         }
         HEAP32[($2 + 16 | 0) >> 2] = $9;
         $9 = HEAP32[($2 + 24 | 0) >> 2] | 0;
         break label$9;
        }
        $9 = HEAP32[($2 + 24 | 0) >> 2] | 0;
        $12 = HEAP32[($9 + ($3 << 4 | 0) | 0) >> 2] | 0;
       }
       HEAP32[($2 + 40 | 0) >> 2] = $12;
       $12 = $9 + ($3 << 4 | 0) | 0;
       i64toi32_i32$1 = $12;
       i64toi32_i32$0 = 0;
       HEAP32[$12 >> 2] = 0;
       HEAP32[($12 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $12 + 8 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($2 + 44 | 0) >> 2] = (HEAP32[($2 + 44 | 0) >> 2] | 0) + 1 | 0;
      }
      HEAP32[(((HEAP32[($2 + 24 | 0) >> 2] | 0) + ($3 << 4 | 0) | 0) + 12 | 0) >> 2] = $7;
      label$17 : {
       $3 = HEAP32[$11 >> 2] | 0;
       if (!$3) {
        break label$17
       }
       label$18 : {
        $7 = ImGuiStorage__GetIntRef_28unsigned_20int_2c_20int_29($5 | 0, $3 | 0, -1 | 0) | 0;
        $3 = HEAP32[$7 >> 2] | 0;
        if (($3 | 0) != (-1 | 0)) {
         break label$18
        }
        HEAP32[$7 >> 2] = HEAP32[($2 + 40 | 0) >> 2] | 0;
        label$19 : {
         label$20 : {
          $3 = HEAP32[($2 + 40 | 0) >> 2] | 0;
          if (($3 | 0) != (HEAP32[($2 + 16 | 0) >> 2] | 0 | 0)) {
           break label$20
          }
          $11 = $3 + 1 | 0;
          $7 = $11;
          label$21 : {
           $12 = HEAP32[($2 + 20 | 0) >> 2] | 0;
           if (($12 | 0) > ($3 | 0)) {
            break label$21
           }
           label$22 : {
            label$23 : {
             if ($12) {
              break label$23
             }
             $9 = 8;
             break label$22;
            }
            $9 = (($12 | 0) / (2 | 0) | 0) + $12 | 0;
           }
           $7 = $11;
           $9 = ($9 | 0) > ($7 | 0) ? $9 : $7;
           if (($12 | 0) >= ($9 | 0)) {
            break label$21
           }
           $7 = $9 << 4 | 0;
           label$24 : {
            $12 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
            if (!$12) {
             break label$24
            }
            $12 = $12 + 184 | 0;
            HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 1 | 0;
           }
           $7 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($7, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
           label$25 : {
            $12 = HEAP32[($2 + 24 | 0) >> 2] | 0;
            if (!$12) {
             break label$25
            }
            __memcpy($7 | 0, $12 | 0, (HEAP32[($2 + 16 | 0) >> 2] | 0) << 4 | 0 | 0) | 0;
            label$26 : {
             $12 = HEAP32[($2 + 24 | 0) >> 2] | 0;
             if (!$12) {
              break label$26
             }
             $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
             if (!$8) {
              break label$26
             }
             $8 = $8 + 184 | 0;
             HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1 | 0;
            }
            FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($12, HEAP32[(0 + 92728 | 0) >> 2] | 0);
           }
           HEAP32[($2 + 20 | 0) >> 2] = $9;
           HEAP32[($2 + 24 | 0) >> 2] = $7;
           $7 = (HEAP32[($2 + 40 | 0) >> 2] | 0) + 1 | 0;
          }
          HEAP32[($2 + 16 | 0) >> 2] = $11;
          $11 = HEAP32[($2 + 24 | 0) >> 2] | 0;
          break label$19;
         }
         $11 = HEAP32[($2 + 24 | 0) >> 2] | 0;
         $7 = HEAP32[($11 + ($3 << 4 | 0) | 0) >> 2] | 0;
        }
        HEAP32[($2 + 40 | 0) >> 2] = $7;
        $7 = $11 + ($3 << 4 | 0) | 0;
        i64toi32_i32$1 = $7;
        i64toi32_i32$0 = 0;
        HEAP32[$7 >> 2] = 0;
        HEAP32[($7 + 4 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$1 = $7 + 8 | 0;
        i64toi32_i32$0 = 0;
        HEAP32[i64toi32_i32$1 >> 2] = 0;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[($2 + 44 | 0) >> 2] = (HEAP32[($2 + 44 | 0) >> 2] | 0) + 1 | 0;
       }
       $3 = (HEAP32[($2 + 24 | 0) >> 2] | 0) + ($3 << 4 | 0) | 0;
       HEAP32[($3 + 8 | 0) >> 2] = (HEAP32[($3 + 8 | 0) >> 2] | 0) + 1 | 0;
      }
      $6 = $6 + 1 | 0;
      $4 = HEAP32[($0 + 23364 | 0) >> 2] | 0;
      if (($6 | 0) < ($4 | 0)) {
       continue label$4
      }
      break label$4;
     };
     if (($4 | 0) < (1 | 0)) {
      break label$3
     }
     $13 = HEAP32[($2 + 36 | 0) >> 2] | 0;
     $10 = HEAP32[($2 + 28 | 0) >> 2] | 0;
     $14 = $13 + ($10 << 3 | 0) | 0;
     $8 = 0;
     $12 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     $5 = HEAP32[($0 + 23372 | 0) >> 2] | 0;
     $15 = HEAP32[($2 + 24 | 0) >> 2] | 0;
     label$27 : while (1) {
      label$28 : {
       $7 = HEAP32[(($5 + Math_imul($8, 36) | 0) + 8 | 0) >> 2] | 0;
       if (!$7) {
        break label$28
       }
       $3 = HEAP32[($12 + 23420 | 0) >> 2] | 0;
       if (!$3) {
        break label$28
       }
       $11 = $3 + 4 | 0;
       $3 = $11;
       label$29 : {
        label$30 : while (1) {
         if ((HEAP32[$3 >> 2] | 0 | 0) == ($7 | 0)) {
          break label$29
         }
         $3 = $3 + (HEAP32[($3 + -4 | 0) >> 2] | 0) | 0;
         if (($3 | 0) != ($11 + (HEAP32[($12 + 23412 | 0) >> 2] | 0) | 0 | 0)) {
          continue label$30
         }
         break label$28;
        };
       }
       $6 = HEAP32[($3 + 20 | 0) >> 2] | 0;
       if (!$6) {
        break label$28
       }
       $3 = $13;
       $7 = $10;
       label$31 : {
        if (!$7) {
         break label$31
        }
        label$32 : while (1) {
         $11 = $7 >>> 1 | 0;
         $9 = $3 + ($11 << 3 | 0) | 0;
         $418 = $9 + 8 | 0;
         $9 = (HEAP32[$9 >> 2] | 0) >>> 0 < $6 >>> 0;
         $3 = $9 ? $418 : $3;
         $7 = $9 ? $7 + ($11 ^ -1 | 0) | 0 : $11;
         if ($7) {
          continue label$32
         }
         break label$32;
        };
       }
       if (($3 | 0) == ($14 | 0)) {
        break label$28
       }
       if ((HEAP32[$3 >> 2] | 0 | 0) != ($6 | 0)) {
        break label$28
       }
       $3 = HEAP32[($3 + 4 | 0) >> 2] | 0;
       if (($3 | 0) == (-1 | 0)) {
        break label$28
       }
       if (!$15) {
        break label$28
       }
       $3 = $15 + ($3 << 4 | 0) | 0;
       HEAP32[($3 + 8 | 0) >> 2] = (HEAP32[($3 + 8 | 0) >> 2] | 0) + 1 | 0;
      }
      $16 = 1;
      $8 = $8 + 1 | 0;
      if (($8 | 0) == ($4 | 0)) {
       break label$2
      }
      continue label$27;
     };
    }
    $16 = 0;
   }
   label$33 : {
    $3 = HEAP32[($0 + 23420 | 0) >> 2] | 0;
    if (!$3) {
     break label$33
    }
    $8 = $3 + 4 | 0;
    $10 = $8 + (HEAP32[($0 + 23412 | 0) >> 2] | 0) | 0;
    $13 = HEAP32[($2 + 36 | 0) >> 2] | 0;
    $6 = HEAP32[($2 + 28 | 0) >> 2] | 0;
    $14 = $13 + ($6 << 3 | 0) | 0;
    $15 = HEAP32[($2 + 24 | 0) >> 2] | 0;
    label$34 : while (1) {
     label$35 : {
      $9 = HEAP32[($8 + 20 | 0) >> 2] | 0;
      if (!$9) {
       break label$35
      }
      $3 = $13;
      $7 = $6;
      label$36 : {
       if (!$7) {
        break label$36
       }
       label$37 : while (1) {
        $11 = $7 >>> 1 | 0;
        $12 = $3 + ($11 << 3 | 0) | 0;
        $497 = $12 + 8 | 0;
        $12 = (HEAP32[$12 >> 2] | 0) >>> 0 < $9 >>> 0;
        $3 = $12 ? $497 : $3;
        $7 = $12 ? $7 + ($11 ^ -1 | 0) | 0 : $11;
        if ($7) {
         continue label$37
        }
        break label$37;
       };
      }
      if (($3 | 0) == ($14 | 0)) {
       break label$35
      }
      if ((HEAP32[$3 >> 2] | 0 | 0) != ($9 | 0)) {
       break label$35
      }
      $3 = HEAP32[($3 + 4 | 0) >> 2] | 0;
      if (($3 | 0) == (-1 | 0)) {
       break label$35
      }
      if (!$15) {
       break label$35
      }
      $7 = $15 + ($3 << 4 | 0) | 0;
      HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1 | 0;
      label$38 : {
       $5 = HEAP32[($7 + 12 | 0) >> 2] | 0;
       if (($5 | 0) == ($9 | 0)) {
        break label$38
       }
       $3 = $13;
       $7 = $6;
       label$39 : {
        if (!$7) {
         break label$39
        }
        label$40 : while (1) {
         $11 = $7 >>> 1 | 0;
         $12 = $3 + ($11 << 3 | 0) | 0;
         $550 = $12 + 8 | 0;
         $12 = (HEAP32[$12 >> 2] | 0) >>> 0 < $5 >>> 0;
         $3 = $12 ? $550 : $3;
         $7 = $12 ? $7 + ($11 ^ -1 | 0) | 0 : $11;
         if ($7) {
          continue label$40
         }
         break label$40;
        };
       }
       if (($3 | 0) == ($14 | 0)) {
        break label$35
       }
       if ((HEAP32[$3 >> 2] | 0 | 0) != ($5 | 0)) {
        break label$35
       }
       $3 = HEAP32[($3 + 4 | 0) >> 2] | 0;
       if (($3 | 0) == (-1 | 0)) {
        break label$35
       }
      }
      $3 = $15 + ($3 << 4 | 0) | 0;
      HEAP32[($3 + 4 | 0) >> 2] = (HEAP32[($3 + 4 | 0) >> 2] | 0) + 1 | 0;
     }
     if (!$8) {
      break label$33
     }
     $8 = $8 + (HEAP32[($8 + -4 | 0) >> 2] | 0) | 0;
     if (($8 | 0) != ($10 | 0)) {
      continue label$34
     }
     break label$34;
    };
   }
   label$41 : {
    if (!$16) {
     break label$41
    }
    $5 = 0;
    label$42 : while (1) {
     $10 = (HEAP32[($0 + 23372 | 0) >> 2] | 0) + Math_imul($5, 36) | 0;
     $9 = HEAP32[$10 >> 2] | 0;
     $6 = HEAP32[($2 + 36 | 0) >> 2] | 0;
     $3 = $6;
     $8 = HEAP32[($2 + 28 | 0) >> 2] | 0;
     $7 = $8;
     label$43 : {
      if (!$7) {
       break label$43
      }
      label$44 : while (1) {
       $11 = $7 >>> 1 | 0;
       $12 = $3 + ($11 << 3 | 0) | 0;
       $619 = $12 + 8 | 0;
       $12 = (HEAP32[$12 >> 2] | 0) >>> 0 < $9 >>> 0;
       $3 = $12 ? $619 : $3;
       $7 = $12 ? $7 + ($11 ^ -1 | 0) | 0 : $11;
       if ($7) {
        continue label$44
       }
       break label$44;
      };
     }
     $12 = 0;
     label$45 : {
      $13 = $6 + ($8 << 3 | 0) | 0;
      if (($3 | 0) == ($13 | 0)) {
       break label$45
      }
      if ((HEAP32[$3 >> 2] | 0 | 0) != ($9 | 0)) {
       break label$45
      }
      $3 = HEAP32[($3 + 4 | 0) >> 2] | 0;
      if (($3 | 0) == (-1 | 0)) {
       break label$45
      }
      $12 = (HEAP32[($2 + 24 | 0) >> 2] | 0) + ($3 << 4 | 0) | 0;
     }
     label$46 : {
      $16 = HEAP32[$12 >> 2] | 0;
      if (($16 | 0) > (1 | 0)) {
       break label$46
      }
      $3 = $12;
      label$47 : {
       $11 = HEAP32[($3 + 12 | 0) >> 2] | 0;
       if (($11 | 0) == ($9 | 0)) {
        break label$47
       }
       label$48 : {
        if (!$8) {
         break label$48
        }
        label$49 : while (1) {
         $3 = $8 >>> 1 | 0;
         $7 = $6 + ($3 << 3 | 0) | 0;
         $674 = $7 + 8 | 0;
         $7 = (HEAP32[$7 >> 2] | 0) >>> 0 < $11 >>> 0;
         $6 = $7 ? $674 : $6;
         $8 = $7 ? $8 + ($3 ^ -1 | 0) | 0 : $3;
         if ($8) {
          continue label$49
         }
         break label$49;
        };
       }
       $3 = 0;
       if (($6 | 0) == ($13 | 0)) {
        break label$47
       }
       if ((HEAP32[$6 >> 2] | 0 | 0) != ($11 | 0)) {
        break label$47
       }
       $7 = HEAP32[($6 + 4 | 0) >> 2] | 0;
       if (($7 | 0) == (-1 | 0)) {
        break label$47
       }
       $3 = (HEAP32[($2 + 24 | 0) >> 2] | 0) + ($7 << 4 | 0) | 0;
      }
      $7 = HEAP32[($10 + 4 | 0) >> 2] | 0;
      label$50 : {
       label$51 : {
        if (($16 | 0) != (1 | 0)) {
         break label$51
        }
        if ($7) {
         break label$51
        }
        $7 = 0;
        label$52 : {
         if (!(HEAP32[($12 + 8 | 0) >> 2] | 0)) {
          break label$52
         }
         $11 = 0;
         break label$50;
        }
        $11 = !((HEAPU8[($10 + 21 | 0) >> 0] | 0) & 8 | 0);
        break label$50;
       }
       $11 = 0;
       label$53 : {
        if (!($16 | $7 | 0)) {
         break label$53
        }
        $7 = 0;
        break label$50;
       }
       $7 = !(HEAP32[($12 + 8 | 0) >> 2] | 0);
      }
      label$54 : {
       if ($11) {
        break label$54
       }
       if ($7) {
        break label$54
       }
       if (HEAP32[($3 + 4 | 0) >> 2] | 0) {
        break label$46
       }
      }
      label$55 : {
       if (!((HEAPU8[($0 + 23536 | 0) >> 0] | 0) & 64 | 0)) {
        break label$55
       }
       HEAP32[$2 >> 2] = $9;
       ImGui__DebugLog_28char_20const__2c_20____29(69323 | 0, $2 | 0);
      }
      label$56 : {
       $7 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
       $3 = HEAP32[($7 + 23420 | 0) >> 2] | 0;
       if (!$3) {
        break label$56
       }
       $11 = HEAP32[$10 >> 2] | 0;
       $12 = $3 + 4 | 0;
       $3 = $12;
       label$57 : while (1) {
        label$58 : {
         if ((HEAP32[($3 + 20 | 0) >> 2] | 0 | 0) != ($11 | 0)) {
          break label$58
         }
         HEAP16[($3 + 28 | 0) >> 1] = 65535;
         HEAP32[($3 + 20 | 0) >> 2] = 0;
         break label$56;
        }
        $3 = $3 + (HEAP32[($3 + -4 | 0) >> 2] | 0) | 0;
        if (($3 | 0) != ($12 + (HEAP32[($7 + 23412 | 0) >> 2] | 0) | 0 | 0)) {
         continue label$57
        }
        break label$57;
       };
      }
      HEAP32[$10 >> 2] = 0;
      $4 = HEAP32[($0 + 23364 | 0) >> 2] | 0;
     }
     $5 = $5 + 1 | 0;
     if (($5 | 0) < ($4 | 0)) {
      continue label$42
     }
     break label$42;
    };
   }
   label$59 : {
    $3 = HEAP32[($2 + 36 | 0) >> 2] | 0;
    if (!$3) {
     break label$59
    }
    i64toi32_i32$1 = $2;
    i64toi32_i32$0 = 0;
    HEAP32[($2 + 28 | 0) >> 2] = 0;
    HEAP32[($2 + 32 | 0) >> 2] = i64toi32_i32$0;
    label$60 : {
     $7 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$7) {
      break label$60
     }
     $7 = $7 + 184 | 0;
     HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($3, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    HEAP32[($2 + 36 | 0) >> 2] = 0;
   }
   $3 = HEAP32[($2 + 24 | 0) >> 2] | 0;
   if (!$3) {
    break label$1
   }
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = 0;
   HEAP32[($2 + 16 | 0) >> 2] = 0;
   HEAP32[($2 + 20 | 0) >> 2] = i64toi32_i32$0;
   label$61 : {
    $7 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$7) {
     break label$61
    }
    $7 = $7 + 184 | 0;
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1 | 0;
   }
   FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($3, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   HEAP32[($2 + 24 | 0) >> 2] = 0;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = 0;
   HEAP32[($2 + 40 | 0) >> 2] = 0;
   HEAP32[($2 + 44 | 0) >> 2] = i64toi32_i32$0;
   $3 = HEAP32[($2 + 36 | 0) >> 2] | 0;
   if (!$3) {
    break label$1
   }
   label$62 : {
    $7 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$7) {
     break label$62
    }
    $7 = $7 + 184 | 0;
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1 | 0;
   }
   FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($3, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   $3 = HEAP32[($2 + 24 | 0) >> 2] | 0;
   if (!$3) {
    break label$1
   }
   label$63 : {
    $7 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$7) {
     break label$63
    }
    $7 = $7 + 184 | 0;
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1 | 0;
   }
   FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($3, HEAP32[(0 + 92728 | 0) >> 2] | 0);
  }
  ImGui__DockContextBuildNodesFromSettings_28ImGuiContext__2c_20ImGuiDockNodeSettings__2c_20int_29($0 | 0, HEAP32[($0 + 23372 | 0) >> 2] | 0 | 0, HEAP32[($0 + 23364 | 0) >> 2] | 0 | 0);
  label$64 : {
   $3 = HEAP32[($0 + 16044 | 0) >> 2] | 0;
   if (($3 | 0) < (1 | 0)) {
    break label$64
   }
   $8 = 0;
   $10 = $0 + 23348 | 0;
   label$65 : while (1) {
    label$66 : {
     $6 = HEAP32[((HEAP32[($0 + 16052 | 0) >> 2] | 0) + ($8 << 2 | 0) | 0) >> 2] | 0;
     $9 = HEAP32[($6 + 940 | 0) >> 2] | 0;
     if (!$9) {
      break label$66
     }
     if ((HEAP32[($6 + 620 | 0) >> 2] | 0 | 0) < ((HEAP32[($0 + 16016 | 0) >> 2] | 0) + -1 | 0 | 0)) {
      break label$66
     }
     if (HEAP32[($6 + 932 | 0) >> 2] | 0) {
      break label$66
     }
     $5 = HEAP32[$10 >> 2] | 0;
     $3 = $5;
     $4 = HEAP32[($0 + 23340 | 0) >> 2] | 0;
     $7 = $4;
     label$67 : {
      if (!$7) {
       break label$67
      }
      label$68 : while (1) {
       $11 = $7 >>> 1 | 0;
       $12 = $3 + ($11 << 3 | 0) | 0;
       $889 = $12 + 8 | 0;
       $12 = (HEAP32[$12 >> 2] | 0) >>> 0 < $9 >>> 0;
       $3 = $12 ? $889 : $3;
       $7 = $12 ? $7 + ($11 ^ -1 | 0) | 0 : $11;
       if ($7) {
        continue label$68
       }
       break label$68;
      };
     }
     $7 = 0;
     label$69 : {
      if (($3 | 0) == ($5 + ($4 << 3 | 0) | 0 | 0)) {
       break label$69
      }
      if ((HEAP32[$3 >> 2] | 0 | 0) != ($9 | 0)) {
       break label$69
      }
      $7 = HEAP32[($3 + 4 | 0) >> 2] | 0;
     }
     ImGui__DockNodeAddWindow_28ImGuiDockNode__2c_20ImGuiWindow__2c_20bool_29($7 | 0, $6 | 0, 1 | 0);
     $3 = HEAP32[($0 + 16044 | 0) >> 2] | 0;
    }
    $8 = $8 + 1 | 0;
    if (($8 | 0) < ($3 | 0)) {
     continue label$65
    }
    break label$65;
   };
  }
  __stack_pointer = $2 + 48 | 0;
 }
 
 function ImGui__DockSettingsHandler_ReadLine_28ImGuiContext__2c_20ImGuiSettingsHandler__2c_20void__2c_20char_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $6 = 0, i64toi32_i32$2 = 0, $7 = 0, $457 = 0, $469 = 0, $475 = 0, $481 = 0;
  $4 = __stack_pointer - 272 | 0;
  __stack_pointer = $4;
  HEAP8[($4 + 271 | 0) >> 0] = 0;
  HEAP32[($4 + 264 | 0) >> 2] = 0;
  HEAP32[($4 + 260 | 0) >> 2] = 0;
  HEAP32[($4 + 256 | 0) >> 2] = 0;
  $5 = $4 + 232 | 0;
  i64toi32_i32$1 = $5;
  i64toi32_i32$0 = 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[($5 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(($4 + 216 | 0) + 32 | 0) >> 2] = 0;
  i64toi32_i32$1 = $4 + 240 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4 + 224 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[$5 >> 0] = 255;
  i64toi32_i32$1 = $4;
  i64toi32_i32$0 = 0;
  HEAP32[($4 + 216 | 0) >> 2] = 0;
  HEAP32[($4 + 220 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     $5 = HEAPU8[$3 >> 0] | 0;
     if (($5 | 0) == (32 | 0)) {
      break label$3
     }
     if (($5 | 0) != (9 | 0)) {
      break label$1
     }
    }
    $3 = $3 + 1 | 0;
    continue label$2;
   };
  }
  label$4 : {
   label$5 : {
    label$6 : {
     if (strncmp($3 | 0, 67039 | 0, 8 | 0) | 0) {
      break label$6
     }
     $3 = $3 + 8 | 0;
     label$7 : while (1) {
      label$8 : {
       $5 = HEAPU8[$3 >> 0] | 0;
       if (($5 | 0) == (32 | 0)) {
        break label$8
       }
       if (($5 | 0) != (9 | 0)) {
        break label$5
       }
      }
      $3 = $3 + 1 | 0;
      continue label$7;
     };
    }
    if (strncmp($3 | 0, 67071 | 0, 9 | 0) | 0) {
     break label$4
    }
    $3 = $3 + 9 | 0;
    label$9 : {
     label$10 : while (1) {
      label$11 : {
       $5 = HEAPU8[$3 >> 0] | 0;
       if (($5 | 0) == (32 | 0)) {
        break label$11
       }
       if (($5 | 0) != (9 | 0)) {
        break label$9
       }
      }
      $3 = $3 + 1 | 0;
      continue label$10;
     };
    }
    HEAP32[($4 + 236 | 0) >> 2] = 1024;
   }
   HEAP32[($4 + 212 | 0) >> 2] = $4 + 256 | 0;
   HEAP32[($4 + 208 | 0) >> 2] = $4 + 216 | 0;
   if ((sscanf($3 | 0, 66672 | 0, $4 + 208 | 0 | 0) | 0 | 0) != (1 | 0)) {
    break label$4
   }
   HEAP32[($4 + 192 | 0) >> 2] = $4 + 216 | 0 | 4 | 0;
   $5 = HEAP32[($4 + 256 | 0) >> 2] | 0;
   HEAP32[($4 + 196 | 0) >> 2] = $4 + 256 | 0;
   label$12 : {
    $3 = $3 + $5 | 0;
    if ((sscanf($3 | 0, 66632 | 0, $4 + 192 | 0 | 0) | 0 | 0) != (1 | 0)) {
     break label$12
    }
    if (!(HEAP32[($4 + 220 | 0) >> 2] | 0)) {
     break label$4
    }
    $3 = $3 + (HEAP32[($4 + 256 | 0) >> 2] | 0) | 0;
   }
   HEAP32[($4 + 176 | 0) >> 2] = $4 + 224 | 0;
   HEAP32[($4 + 180 | 0) >> 2] = $4 + 256 | 0;
   label$13 : {
    if ((sscanf($3 | 0, 66615 | 0, $4 + 176 | 0 | 0) | 0 | 0) != (1 | 0)) {
     break label$13
    }
    if (!(HEAP32[($4 + 224 | 0) >> 2] | 0)) {
     break label$4
    }
    $3 = $3 + (HEAP32[($4 + 256 | 0) >> 2] | 0) | 0;
   }
   label$14 : {
    label$15 : {
     label$16 : {
      if (HEAP32[($4 + 220 | 0) >> 2] | 0) {
       break label$16
      }
      HEAP32[($4 + 152 | 0) >> 2] = $4 + 256 | 0;
      HEAP32[($4 + 148 | 0) >> 2] = $4 + 260 | 0;
      HEAP32[($4 + 144 | 0) >> 2] = $4 + 264 | 0;
      if ((sscanf($3 | 0, 66376 | 0, $4 + 144 | 0 | 0) | 0 | 0) != (2 | 0)) {
       break label$4
      }
      HEAP32[($4 + 240 | 0) >> 2] = (HEAP32[($4 + 260 | 0) >> 2] | 0) << 16 | 0 | (HEAPU16[($4 + 264 | 0) >> 1] | 0) | 0;
      $5 = HEAP32[($4 + 256 | 0) >> 2] | 0;
      HEAP32[($4 + 128 | 0) >> 2] = $4 + 264 | 0;
      HEAP32[($4 + 132 | 0) >> 2] = $4 + 260 | 0;
      HEAP32[($4 + 136 | 0) >> 2] = $4 + 256 | 0;
      $3 = $3 + $5 | 0;
      if ((sscanf($3 | 0, 66406 | 0, $4 + 128 | 0 | 0) | 0 | 0) != (2 | 0)) {
       break label$4
      }
      $3 = $3 + (HEAP32[($4 + 256 | 0) >> 2] | 0) | 0;
      $5 = $4 + 244 | 0;
      break label$15;
     }
     HEAP32[($4 + 168 | 0) >> 2] = $4 + 256 | 0;
     HEAP32[($4 + 164 | 0) >> 2] = $4 + 260 | 0;
     HEAP32[($4 + 160 | 0) >> 2] = $4 + 264 | 0;
     if ((sscanf($3 | 0, 66389 | 0, $4 + 160 | 0 | 0) | 0 | 0) != (2 | 0)) {
      break label$14
     }
     $3 = $3 + (HEAP32[($4 + 256 | 0) >> 2] | 0) | 0;
     $5 = $4 + 248 | 0;
    }
    HEAP32[$5 >> 2] = (HEAP32[($4 + 260 | 0) >> 2] | 0) << 16 | 0 | (HEAPU16[($4 + 264 | 0) >> 1] | 0) | 0;
   }
   HEAP32[($4 + 116 | 0) >> 2] = $4 + 256 | 0;
   HEAP32[($4 + 112 | 0) >> 2] = $4 + 271 | 0;
   label$17 : {
    if ((sscanf($3 | 0, 66603 | 0, $4 + 112 | 0 | 0) | 0 | 0) != (1 | 0)) {
     break label$17
    }
    $3 = $3 + (HEAP32[($4 + 256 | 0) >> 2] | 0) | 0;
    $5 = 0;
    label$18 : {
     switch ((HEAPU8[($4 + 271 | 0) >> 0] | 0) + -88 | 0 | 0) {
     case 1:
      $5 = 1;
      break;
     case 0:
      break label$18;
     default:
      break label$17;
     };
    }
    HEAP8[($4 + 232 | 0) >> 0] = $5;
   }
   HEAP32[($4 + 100 | 0) >> 2] = $4 + 256 | 0;
   HEAP32[($4 + 96 | 0) >> 2] = $4 + 264 | 0;
   label$20 : {
    if ((sscanf($3 | 0, 66533 | 0, $4 + 96 | 0 | 0) | 0 | 0) != (1 | 0)) {
     break label$20
    }
    $3 = $3 + (HEAP32[($4 + 256 | 0) >> 2] | 0) | 0;
    if (!(HEAP32[($4 + 264 | 0) >> 2] | 0)) {
     break label$20
    }
    HEAP32[($4 + 236 | 0) >> 2] = HEAP32[($4 + 236 | 0) >> 2] | 0 | 32 | 0;
   }
   HEAP32[($4 + 84 | 0) >> 2] = $4 + 256 | 0;
   HEAP32[($4 + 80 | 0) >> 2] = $4 + 264 | 0;
   label$21 : {
    if ((sscanf($3 | 0, 66561 | 0, $4 + 80 | 0 | 0) | 0 | 0) != (1 | 0)) {
     break label$21
    }
    $3 = $3 + (HEAP32[($4 + 256 | 0) >> 2] | 0) | 0;
    if (!(HEAP32[($4 + 264 | 0) >> 2] | 0)) {
     break label$21
    }
    HEAP32[($4 + 236 | 0) >> 2] = HEAP32[($4 + 236 | 0) >> 2] | 0 | 2048 | 0;
   }
   HEAP32[($4 + 68 | 0) >> 2] = $4 + 256 | 0;
   HEAP32[($4 + 64 | 0) >> 2] = $4 + 264 | 0;
   label$22 : {
    if ((sscanf($3 | 0, 66443 | 0, $4 + 64 | 0 | 0) | 0 | 0) != (1 | 0)) {
     break label$22
    }
    $3 = $3 + (HEAP32[($4 + 256 | 0) >> 2] | 0) | 0;
    if (!(HEAP32[($4 + 264 | 0) >> 2] | 0)) {
     break label$22
    }
    HEAP32[($4 + 236 | 0) >> 2] = HEAP32[($4 + 236 | 0) >> 2] | 0 | 4096 | 0;
   }
   HEAP32[($4 + 52 | 0) >> 2] = $4 + 256 | 0;
   HEAP32[($4 + 48 | 0) >> 2] = $4 + 264 | 0;
   label$23 : {
    if ((sscanf($3 | 0, 66458 | 0, $4 + 48 | 0 | 0) | 0 | 0) != (1 | 0)) {
     break label$23
    }
    $3 = $3 + (HEAP32[($4 + 256 | 0) >> 2] | 0) | 0;
    if (!(HEAP32[($4 + 264 | 0) >> 2] | 0)) {
     break label$23
    }
    HEAP32[($4 + 236 | 0) >> 2] = HEAP32[($4 + 236 | 0) >> 2] | 0 | 8192 | 0;
   }
   HEAP32[($4 + 36 | 0) >> 2] = $4 + 256 | 0;
   HEAP32[($4 + 32 | 0) >> 2] = $4 + 264 | 0;
   label$24 : {
    if ((sscanf($3 | 0, 66477 | 0, $4 + 32 | 0 | 0) | 0 | 0) != (1 | 0)) {
     break label$24
    }
    $3 = $3 + (HEAP32[($4 + 256 | 0) >> 2] | 0) | 0;
    if (!(HEAP32[($4 + 264 | 0) >> 2] | 0)) {
     break label$24
    }
    HEAP32[($4 + 236 | 0) >> 2] = HEAP32[($4 + 236 | 0) >> 2] | 0 | 16384 | 0;
   }
   HEAP32[($4 + 20 | 0) >> 2] = $4 + 256 | 0;
   HEAP32[($4 + 16 | 0) >> 2] = $4 + 264 | 0;
   label$25 : {
    if ((sscanf($3 | 0, 66502 | 0, $4 + 16 | 0 | 0) | 0 | 0) != (1 | 0)) {
     break label$25
    }
    $3 = $3 + (HEAP32[($4 + 256 | 0) >> 2] | 0) | 0;
    if (!(HEAP32[($4 + 264 | 0) >> 2] | 0)) {
     break label$25
    }
    HEAP32[($4 + 236 | 0) >> 2] = HEAP32[($4 + 236 | 0) >> 2] | 0 | 32768 | 0;
   }
   HEAP32[$4 >> 2] = $4 + 228 | 0;
   HEAP32[($4 + 4 | 0) >> 2] = $4 + 256 | 0;
   sscanf($3 | 0, 66649 | 0, $4 | 0) | 0;
   $5 = HEAP32[($0 + 23364 | 0) >> 2] | 0;
   label$26 : {
    $6 = HEAP32[($4 + 220 | 0) >> 2] | 0;
    if (!$6) {
     break label$26
    }
    if (($5 | 0) < (1 | 0)) {
     break label$26
    }
    $7 = HEAP32[($0 + 23372 | 0) >> 2] | 0;
    $3 = 0;
    label$27 : {
     label$28 : while (1) {
      if ((HEAP32[($7 + Math_imul($3, 36) | 0) >> 2] | 0 | 0) == ($6 | 0)) {
       break label$27
      }
      $3 = $3 + 1 | 0;
      if (($3 | 0) == ($5 | 0)) {
       break label$26
      }
      continue label$28;
     };
    }
    HEAP8[($4 + 233 | 0) >> 0] = (HEAPU8[(($7 + Math_imul($3, 36) | 0) + 17 | 0) >> 0] | 0) + 1 | 0;
   }
   label$29 : {
    if (($5 | 0) != (HEAP32[($0 + 23368 | 0) >> 2] | 0 | 0)) {
     break label$29
    }
    $3 = $5 + 1 | 0;
    label$30 : {
     label$31 : {
      if ($5) {
       break label$31
      }
      $6 = 8;
      break label$30;
     }
     $6 = (($5 | 0) / (2 | 0) | 0) + $5 | 0;
    }
    $3 = ($6 | 0) > ($3 | 0) ? $6 : $3;
    if (($5 | 0) >= ($3 | 0)) {
     break label$29
    }
    $5 = Math_imul($3, 36);
    label$32 : {
     $6 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$6) {
      break label$32
     }
     $6 = $6 + 184 | 0;
     HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1 | 0;
    }
    $5 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($5, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
    label$33 : {
     $6 = HEAP32[($0 + 23372 | 0) >> 2] | 0;
     if (!$6) {
      break label$33
     }
     __memcpy($5 | 0, $6 | 0, Math_imul(HEAP32[($0 + 23364 | 0) >> 2] | 0, 36) | 0) | 0;
     label$34 : {
      $6 = HEAP32[($0 + 23372 | 0) >> 2] | 0;
      if (!$6) {
       break label$34
      }
      $7 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$7) {
       break label$34
      }
      $7 = $7 + 184 | 0;
      HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1 | 0;
     }
     FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($6, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    }
    HEAP32[($0 + 23368 | 0) >> 2] = $3;
    HEAP32[($0 + 23372 | 0) >> 2] = $5;
    $5 = HEAP32[($0 + 23364 | 0) >> 2] | 0;
   }
   $3 = (HEAP32[($0 + 23372 | 0) >> 2] | 0) + Math_imul($5, 36) | 0;
   i64toi32_i32$2 = $4;
   i64toi32_i32$0 = HEAP32[($4 + 216 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($4 + 220 | 0) >> 2] | 0;
   $457 = i64toi32_i32$0;
   i64toi32_i32$0 = $3;
   HEAP32[$3 >> 2] = $457;
   HEAP32[($3 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($3 + 32 | 0) >> 2] = HEAP32[(($4 + 216 | 0) + 32 | 0) >> 2] | 0;
   i64toi32_i32$2 = ($4 + 216 | 0) + 24 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $469 = i64toi32_i32$1;
   i64toi32_i32$1 = $3 + 24 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $469;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = ($4 + 216 | 0) + 16 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $475 = i64toi32_i32$0;
   i64toi32_i32$0 = $3 + 16 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $475;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = ($4 + 216 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $481 = i64toi32_i32$1;
   i64toi32_i32$1 = $3 + 8 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $481;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($0 + 23364 | 0) >> 2] = (HEAP32[($0 + 23364 | 0) >> 2] | 0) + 1 | 0;
  }
  __stack_pointer = $4 + 272 | 0;
 }
 
 function ImGui__DockSettingsHandler_ReadOpen_28ImGuiContext__2c_20ImGuiSettingsHandler__2c_20char_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return !(strcmp($2 | 0, 67343 | 0) | 0) | 0;
 }
 
 function ImGui__DockSettingsHandler_ClearAll_28ImGuiContext__2c_20ImGuiSettingsHandler__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   $2 = HEAP32[($0 + 23372 | 0) >> 2] | 0;
   if (!$2) {
    break label$1
   }
   i64toi32_i32$1 = $0 + 23364 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
   label$2 : {
    $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$3) {
     break label$2
    }
    $3 = $3 + 184 | 0;
    HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1 | 0;
   }
   FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($2, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   HEAP32[($0 + 23372 | 0) >> 2] = 0;
  }
  label$3 : {
   $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $0 = HEAP32[($2 + 23420 | 0) >> 2] | 0;
   if (!$0) {
    break label$3
   }
   $0 = $0 + 4 | 0;
   $3 = $0 + (HEAP32[($2 + 23412 | 0) >> 2] | 0) | 0;
   label$4 : while (1) {
    HEAP32[($0 + 20 | 0) >> 2] = 0;
    $0 = $0 + (HEAP32[($0 + -4 | 0) >> 2] | 0) | 0;
    if (($0 | 0) != ($3 | 0)) {
     continue label$4
    }
    break label$4;
   };
  }
  label$5 : {
   if ((HEAP32[($2 + 16044 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$5
   }
   $0 = 0;
   $3 = $2 + 23536 | 0;
   label$6 : while (1) {
    ImGui__DockContextProcessUndockWindow_28ImGuiContext__2c_20ImGuiWindow__2c_20bool_29(HEAP32[$3 >> 2] | 0 | 0, HEAP32[((HEAP32[($2 + 16052 | 0) >> 2] | 0) + ($0 << 2 | 0) | 0) >> 2] | 0 | 0, 1 | 0);
    $0 = $0 + 1 | 0;
    if (($0 | 0) < (HEAP32[($2 + 16044 | 0) >> 2] | 0 | 0)) {
     continue label$6
    }
    break label$6;
   };
  }
  ImGui__DockBuilderRemoveNodeChildNodes_28unsigned_20int_29(0 | 0);
 }
 
 function ImGuiWindow__ImGuiWindow_28ImGuiContext__2c_20char_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $5 = 0, i64toi32_i32$0 = 0, $3 = 0, i64toi32_i32$1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = 0;
  $4 = memset($0 | 0, 0 | 0, 964 | 0) | 0;
  $0 = strlen($2 | 0) | 0;
  label$1 : {
   $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   if (!$5) {
    break label$1
   }
   $5 = $5 + 184 | 0;
   HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1 | 0;
  }
  $0 = $0 + 1 | 0;
  (wasm2js_i32$0 = $4, wasm2js_i32$1 = __memcpy(FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($0, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0 | 0, $2 | 0, $0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $4, wasm2js_i32$1 = (strlen($2 | 0) | 0) + 1 | 0), HEAP32[(wasm2js_i32$0 + 152 | 0) >> 2] = wasm2js_i32$1;
  label$2 : {
   $5 = HEAPU8[$2 >> 0] | 0;
   if (!$5) {
    break label$2
   }
   $0 = -1;
   label$3 : while (1) {
    $3 = $5 & 255 | 0;
    $5 = HEAPU8[($2 + 1 | 0) >> 0] | 0;
    label$4 : {
     if (($3 | 0) != (35 | 0)) {
      break label$4
     }
     if (($5 & 255 | 0 | 0) != (35 | 0)) {
      break label$4
     }
     $0 = (HEAPU8[($2 + 2 | 0) >> 0] | 0 | 0) == (35 | 0) ? -1 : $0;
    }
    $2 = $2 + 1 | 0;
    $0 = ($0 >>> 8 | 0) ^ (HEAP32[(((($0 & 255 | 0) ^ $3 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
    if ($5 & 255 | 0) {
     continue label$3
    }
    break label$3;
   };
   $3 = $0 ^ -1 | 0;
  }
  HEAP32[($4 + 4 | 0) >> 2] = $3;
  label$5 : {
   $0 = HEAP32[($4 + 280 | 0) >> 2] | 0;
   if (($0 | 0) != (HEAP32[($4 + 284 | 0) >> 2] | 0 | 0)) {
    break label$5
   }
   $5 = $0 + 1 | 0;
   label$6 : {
    label$7 : {
     if ($0) {
      break label$7
     }
     $2 = 8;
     break label$6;
    }
    $2 = (($0 | 0) / (2 | 0) | 0) + $0 | 0;
   }
   $5 = ($2 | 0) > ($5 | 0) ? $2 : $5;
   if (($0 | 0) >= ($5 | 0)) {
    break label$5
   }
   $0 = $5 << 2 | 0;
   label$8 : {
    $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$2) {
     break label$8
    }
    $2 = $2 + 184 | 0;
    HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1 | 0;
   }
   $0 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($0, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$9 : {
    $2 = HEAP32[($4 + 288 | 0) >> 2] | 0;
    if (!$2) {
     break label$9
    }
    __memcpy($0 | 0, $2 | 0, (HEAP32[($4 + 280 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
    label$10 : {
     $2 = HEAP32[($4 + 288 | 0) >> 2] | 0;
     if (!$2) {
      break label$10
     }
     $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$3) {
      break label$10
     }
     $3 = $3 + 184 | 0;
     HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($2, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($4 + 284 | 0) >> 2] = $5;
   HEAP32[($4 + 288 | 0) >> 2] = $0;
   $3 = HEAP32[($4 + 4 | 0) >> 2] | 0;
   $0 = HEAP32[($4 + 280 | 0) >> 2] | 0;
  }
  HEAP32[((HEAP32[($4 + 288 | 0) >> 2] | 0) + ($0 << 2 | 0) | 0) >> 2] = $3;
  HEAP32[($4 + 60 | 0) >> 2] = -1;
  i64toi32_i32$1 = $4;
  i64toi32_i32$0 = 2139095039;
  HEAP32[($4 + 52 | 0) >> 2] = 2139095039;
  HEAP32[($4 + 56 | 0) >> 2] = i64toi32_i32$0;
  $0 = HEAP32[($4 + 280 | 0) >> 2] | 0;
  HEAP32[($4 + 280 | 0) >> 2] = $0 + 1 | 0;
  label$11 : {
   $5 = HEAP32[($4 + 288 | 0) >> 2] | 0;
   $2 = HEAP32[($5 + ($0 << 2 | 0) | 0) >> 2] | 0;
   $2 = (($2 ^ -1 | 0) >>> 8 | 0) ^ (HEAP32[(((($2 & 255 | 0) ^ 220 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
   $2 = ($2 >>> 8 | 0) ^ (HEAP32[(((($2 & 255 | 0) ^ 77 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
   $2 = ($2 >>> 8 | 0) ^ (HEAP32[(((($2 & 255 | 0) ^ 79 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
   $2 = ($2 >>> 8 | 0) ^ (HEAP32[(((($2 & 255 | 0) ^ 86 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
   $2 = (($2 >>> 8 | 0) ^ (HEAP32[(((($2 & 255 | 0) ^ 69 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0) ^ -1 | 0;
   if ((HEAP32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 16168 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
    break label$11
   }
   ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($2 | 0, 11 | 0, 67632 | 0, 0 | 0);
   $0 = (HEAP32[($4 + 280 | 0) >> 2] | 0) + -1 | 0;
   $5 = HEAP32[($4 + 288 | 0) >> 2] | 0;
  }
  HEAP32[($4 + 156 | 0) >> 2] = $2;
  label$12 : {
   $0 = HEAP32[($5 + ($0 << 2 | 0) | 0) >> 2] | 0;
   $0 = (($0 ^ -1 | 0) >>> 8 | 0) ^ (HEAP32[(((($0 & 255 | 0) ^ 220 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
   $0 = ($0 >>> 8 | 0) ^ (HEAP32[(((($0 & 255 | 0) ^ 84 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
   $0 = ($0 >>> 8 | 0) ^ (HEAP32[(((($0 & 255 | 0) ^ 65 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
   $0 = (($0 >>> 8 | 0) ^ (HEAP32[(((($0 & 255 | 0) ^ 66 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0) ^ -1 | 0;
   if ((HEAP32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 16168 | 0) >> 2] | 0 | 0) != ($0 | 0)) {
    break label$12
   }
   ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($0 | 0, 11 | 0, 67667 | 0, 0 | 0);
  }
  i64toi32_i32$1 = $4;
  i64toi32_i32$0 = 1056964608;
  HEAP32[($4 + 192 | 0) >> 2] = 1056964608;
  HEAP32[($4 + 196 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4;
  i64toi32_i32$0 = 2139095039;
  HEAP32[($4 + 184 | 0) >> 2] = 2139095039;
  HEAP32[($4 + 188 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4 + 160 | 0) >> 2] = $0;
  i64toi32_i32$1 = $4;
  i64toi32_i32$0 = 2139095039;
  HEAP32[($4 + 272 | 0) >> 2] = 2139095039;
  HEAP32[($4 + 276 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4 + 260 | 0) >> 2] = 252645135;
  HEAP32[($4 + 252 | 0) >> 2] = -1;
  HEAP16[($4 + 248 | 0) >> 1] = 65535;
  HEAP32[($4 + 628 | 0) >> 2] = -1082130432;
  i64toi32_i32$1 = $4;
  i64toi32_i32$0 = -1;
  HEAP32[($4 + 620 | 0) >> 2] = -1;
  HEAP32[($4 + 624 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4;
  i64toi32_i32$0 = 2139095039;
  HEAP32[($4 + 264 | 0) >> 2] = 2139095039;
  HEAP32[($4 + 268 | 0) >> 2] = i64toi32_i32$0;
  HEAP16[($4 + 906 | 0) >> 1] = 65535;
  HEAP32[($4 + 668 | 0) >> 2] = -1;
  i64toi32_i32$1 = $4;
  i64toi32_i32$0 = 1065353216;
  HEAP32[($4 + 660 | 0) >> 2] = 1065353216;
  HEAP32[($4 + 664 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4 + 720 | 0) >> 2] = $1 + 15496 | 0;
  HEAP32[($4 + 672 | 0) >> 2] = $4 + 676 | 0;
  HEAP32[($4 + 724 | 0) >> 2] = HEAP32[$4 >> 2] | 0;
  HEAP32[($4 + 40 | 0) >> 2] = 0;
  i64toi32_i32$1 = $4;
  i64toi32_i32$0 = 0;
  HEAP32[($4 + 16 | 0) >> 2] = 0;
  HEAP32[($4 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($4 + 41 | 0) >> 0] = 1;
  HEAP32[($4 + 20 | 0) >> 2] = -1;
  return $4 | 0;
 }
 
 function ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $7 = 0, $5 = 0, $9 = 0, $4 = 0, $6 = 0, $8 = 0, $10 = 0;
  $4 = __stack_pointer - 64 | 0;
  __stack_pointer = $4;
  $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $6 = HEAP32[($5 + 16116 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $7 = HEAP32[($5 + 23600 | 0) >> 2] | 0;
    if (($7 | 0) != (-1 | 0)) {
     break label$2
    }
    HEAP32[($5 + 23600 | 0) >> 2] = 0;
    $3 = HEAP32[($6 + 280 | 0) >> 2] | 0;
    $8 = $3 + 1 | 0;
    label$3 : {
     $7 = HEAP32[($5 + 23612 | 0) >> 2] | 0;
     if (($7 | 0) > ($3 | 0)) {
      break label$3
     }
     label$4 : {
      label$5 : {
       if ($7) {
        break label$5
       }
       $1 = 8;
       break label$4;
      }
      $1 = (($7 | 0) / (2 | 0) | 0) + $7 | 0;
     }
     $1 = ($1 | 0) > ($8 | 0) ? $1 : $8;
     if (($7 | 0) >= ($1 | 0)) {
      break label$3
     }
     $7 = $5 + 184 | 0;
     HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1 | 0;
     $7 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($1 << 6 | 0, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
     label$6 : {
      $2 = HEAP32[($5 + 23616 | 0) >> 2] | 0;
      if (!$2) {
       break label$6
      }
      __memcpy($7 | 0, $2 | 0, (HEAP32[($5 + 23608 | 0) >> 2] | 0) << 6 | 0 | 0) | 0;
      label$7 : {
       $2 = HEAP32[($5 + 23616 | 0) >> 2] | 0;
       if (!$2) {
        break label$7
       }
       $9 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
       if (!$9) {
        break label$7
       }
       $9 = $9 + 184 | 0;
       HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + -1 | 0;
      }
      FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($2, HEAP32[(0 + 92728 | 0) >> 2] | 0);
     }
     HEAP32[($5 + 23612 | 0) >> 2] = $1;
     HEAP32[($5 + 23616 | 0) >> 2] = $7;
    }
    label$8 : {
     $1 = HEAP32[($5 + 23608 | 0) >> 2] | 0;
     if (($3 | 0) < ($1 | 0)) {
      break label$8
     }
     label$9 : {
      $10 = $3 - $1 | 0;
      $9 = ($10 + 1 | 0) & 3 | 0;
      if (!$9) {
       break label$9
      }
      $2 = 0;
      label$10 : while (1) {
       $7 = (HEAP32[($5 + 23616 | 0) >> 2] | 0) + ($1 << 6 | 0) | 0;
       i64toi32_i32$1 = $7;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = i64toi32_i32$1 + 56 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $7 + 48 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $7 + 40 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $7 + 32 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $7 + 24 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $7 + 16 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $7 + 8 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $1 = $1 + 1 | 0;
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($9 | 0)) {
        continue label$10
       }
       break label$10;
      };
     }
     if ($10 >>> 0 < 3 >>> 0) {
      break label$8
     }
     label$11 : while (1) {
      $2 = $1 << 6 | 0;
      $7 = (HEAP32[($5 + 23616 | 0) >> 2] | 0) + $2 | 0;
      i64toi32_i32$1 = $7;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = i64toi32_i32$1 + 56 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $7 + 48 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $7 + 40 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $7 + 32 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $7 + 24 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $7 + 16 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $7 + 8 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $7 = $2 + (HEAP32[($5 + 23616 | 0) >> 2] | 0) | 0;
      i64toi32_i32$1 = $7 + 120 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $7 + 112 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $7 + 104 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $7 + 96 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $7 + 88 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $7 + 80 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $7 + 72 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $7 + 64 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $7 = $2 + (HEAP32[($5 + 23616 | 0) >> 2] | 0) | 0;
      i64toi32_i32$1 = $7 + 184 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $7 + 176 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $7 + 168 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $7 + 160 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $7 + 152 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $7 + 144 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $7 + 136 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $7 + 128 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $2 = $1 + 3 | 0;
      $7 = (HEAP32[($5 + 23616 | 0) >> 2] | 0) + ($2 << 6 | 0) | 0;
      i64toi32_i32$1 = $7;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = i64toi32_i32$1 + 56 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $7 + 48 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $7 + 40 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $7 + 32 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $7 + 24 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $7 + 16 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $7 + 8 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $1 = $1 + 4 | 0;
      if (($2 | 0) != ($3 | 0)) {
       continue label$11
      }
      break label$11;
     };
    }
    HEAP32[($5 + 23608 | 0) >> 2] = $8;
    $7 = 0;
    $2 = HEAP32[($6 + 280 | 0) >> 2] | 0;
    if (($2 | 0) < (0 | 0)) {
     break label$1
    }
    $1 = $2 + 1 | 0;
    $10 = $1 & 1 | 0;
    $3 = HEAP32[($5 + 23616 | 0) >> 2] | 0;
    label$12 : {
     if (!$2) {
      break label$12
     }
     $8 = $1 & -2 | 0;
     $7 = 0;
     $9 = 0;
     label$13 : while (1) {
      $1 = $0;
      label$14 : {
       if (($7 | 0) >= ($2 | 0)) {
        break label$14
       }
       $1 = HEAP32[((HEAP32[($6 + 288 | 0) >> 2] | 0) + ($7 << 2 | 0) | 0) >> 2] | 0;
      }
      HEAP32[($3 + ($7 << 6 | 0) | 0) >> 2] = $1;
      $1 = $0;
      label$15 : {
       $5 = $7 | 1 | 0;
       if (($5 | 0) >= ($2 | 0)) {
        break label$15
       }
       $1 = HEAP32[((HEAP32[($6 + 288 | 0) >> 2] | 0) + ($5 << 2 | 0) | 0) >> 2] | 0;
      }
      HEAP32[($3 + ($5 << 6 | 0) | 0) >> 2] = $1;
      $7 = $7 + 2 | 0;
      $9 = $9 + 2 | 0;
      if (($9 | 0) != ($8 | 0)) {
       continue label$13
      }
      break label$13;
     };
    }
    if (!$10) {
     break label$1
    }
    label$16 : {
     if (($7 | 0) >= ($2 | 0)) {
      break label$16
     }
     $0 = HEAP32[((HEAP32[($6 + 288 | 0) >> 2] | 0) + ($7 << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP32[($3 + ($7 << 6 | 0) | 0) >> 2] = $0;
    break label$1;
   }
   if (($7 | 0) != (HEAP32[($6 + 280 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $5 = HEAP32[($5 + 23616 | 0) >> 2] | 0;
   label$17 : {
    label$18 : {
     switch ($1 + -4 | 0 | 0) {
     case 0:
      HEAP32[$4 >> 2] = $2;
      ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29(($5 + ($7 << 6 | 0) | 0) + 7 | 0 | 0, 57 | 0, 67308 | 0, $4 | 0) | 0;
      break label$17;
     case 7:
      $0 = ($5 + ($7 << 6 | 0) | 0) + 7 | 0;
      label$22 : {
       label$23 : {
        if (!$3) {
         break label$23
        }
        $3 = $3 - $2 | 0;
        break label$22;
       }
       $3 = strlen($2 | 0) | 0;
      }
      HEAP32[($4 + 20 | 0) >> 2] = $2;
      HEAP32[($4 + 16 | 0) >> 2] = $3;
      ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($0 | 0, 57 | 0, 66038 | 0, $4 + 16 | 0 | 0) | 0;
      break label$17;
     case 8:
      HEAP32[($4 + 32 | 0) >> 2] = $2;
      ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29(($5 + ($7 << 6 | 0) | 0) + 7 | 0 | 0, 57 | 0, 66253 | 0, $4 + 32 | 0 | 0) | 0;
      break label$17;
     case 9:
      break label$18;
     default:
      break label$17;
     };
    }
    $2 = $5 + ($7 << 6 | 0) | 0;
    if (HEAPU8[($2 + 7 | 0) >> 0] | 0) {
     break label$1
    }
    HEAP32[($4 + 48 | 0) >> 2] = $0;
    ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($2 + 7 | 0 | 0, 57 | 0, 67366 | 0, $4 + 48 | 0 | 0) | 0;
   }
   $7 = $5 + ($7 << 6 | 0) | 0;
   HEAP8[($7 + 6 | 0) >> 0] = $1;
   HEAP8[($7 + 5 | 0) >> 0] = 1;
  }
  __stack_pointer = $4 + 64 | 0;
 }
 
 function ImGuiWindow__GetID_28char_20const__2c_20char_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $5 = 0, $3 = 0, $6 = 0, $7 = 0;
  $3 = (HEAP32[((((HEAP32[($0 + 280 | 0) >> 2] | 0) << 2 | 0) + (HEAP32[($0 + 288 | 0) >> 2] | 0) | 0) + -4 | 0) >> 2] | 0) ^ -1 | 0;
  label$1 : {
   label$2 : {
    if (!$2) {
     break label$2
    }
    $4 = $2 - $1 | 0;
    if (!$4) {
     break label$2
    }
    $0 = $3;
    $5 = $1;
    label$3 : while (1) {
     $6 = $5;
     $5 = $5 + 1 | 0;
     $4 = $4 + -1 | 0;
     label$4 : {
      $7 = HEAPU8[$6 >> 0] | 0;
      if (($7 | 0) != (35 | 0)) {
       break label$4
      }
      if ($4 >>> 0 < 2 >>> 0) {
       break label$4
      }
      if ((HEAPU8[$5 >> 0] | 0 | 0) != (35 | 0)) {
       break label$4
      }
      $0 = (HEAPU8[($6 + 2 | 0) >> 0] | 0 | 0) == (35 | 0) ? $3 : $0;
     }
     $0 = ($0 >>> 8 | 0) ^ (HEAP32[(((($0 & 255 | 0) ^ $7 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
     if ($4) {
      continue label$3
     }
     break label$1;
    };
   }
   label$5 : {
    $4 = HEAPU8[$1 >> 0] | 0;
    if ($4) {
     break label$5
    }
    $0 = $3;
    break label$1;
   }
   $0 = $3;
   $5 = $1;
   label$6 : while (1) {
    $6 = $4 & 255 | 0;
    $4 = HEAPU8[($5 + 1 | 0) >> 0] | 0;
    label$7 : {
     if (($6 | 0) != (35 | 0)) {
      break label$7
     }
     if (($4 & 255 | 0 | 0) != (35 | 0)) {
      break label$7
     }
     $0 = (HEAPU8[($5 + 2 | 0) >> 0] | 0 | 0) == (35 | 0) ? $3 : $0;
    }
    $5 = $5 + 1 | 0;
    $0 = ($0 >>> 8 | 0) ^ (HEAP32[(((($0 & 255 | 0) ^ $6 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
    if ($4 & 255 | 0) {
     continue label$6
    }
    break label$6;
   };
  }
  label$8 : {
   $0 = $0 ^ -1 | 0;
   if ((HEAP32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 16168 | 0) >> 2] | 0 | 0) != ($0 | 0)) {
    break label$8
   }
   ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($0 | 0, 11 | 0, $1 | 0, $2 | 0);
  }
  return $0 | 0;
 }
 
 function ImGuiWindow__GetIDFromRectangle_28ImRect_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $2 = 0, $3 = Math_fround(0), $5 = Math_fround(0);
  $2 = (HEAP32[((((HEAP32[($0 + 280 | 0) >> 2] | 0) << 2 | 0) + (HEAP32[($0 + 288 | 0) >> 2] | 0) | 0) + -4 | 0) >> 2] | 0) ^ -1 | 0;
  $3 = Math_fround(HEAPF32[($0 + 308 | 0) >> 2]);
  $4 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(HEAPF32[$1 >> 2]) - $3)), wasm2js_scratch_load_i32(2));
  $2 = (HEAP32[(((($2 ^ $4 | 0) & 255 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) ^ ($2 >>> 8 | 0) | 0;
  $2 = (HEAP32[(((($2 ^ ($4 >>> 8 | 0) | 0) & 255 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) ^ ($2 >>> 8 | 0) | 0;
  $2 = (HEAP32[(((($2 ^ ($4 >>> 16 | 0) | 0) & 255 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) ^ ($2 >>> 8 | 0) | 0;
  $4 = (HEAP32[(((($2 & 255 | 0) ^ ($4 >>> 24 | 0) | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) ^ ($2 >>> 8 | 0) | 0;
  $5 = Math_fround(HEAPF32[($0 + 312 | 0) >> 2]);
  $0 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(HEAPF32[($1 + 4 | 0) >> 2]) - $5)), wasm2js_scratch_load_i32(2));
  $4 = (HEAP32[(((($4 ^ $0 | 0) & 255 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) ^ ($4 >>> 8 | 0) | 0;
  $4 = (HEAP32[(((($4 ^ ($0 >>> 8 | 0) | 0) & 255 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) ^ ($4 >>> 8 | 0) | 0;
  $4 = (HEAP32[(((($4 ^ ($0 >>> 16 | 0) | 0) & 255 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) ^ ($4 >>> 8 | 0) | 0;
  $4 = (HEAP32[(((($4 & 255 | 0) ^ ($0 >>> 24 | 0) | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) ^ ($4 >>> 8 | 0) | 0;
  $0 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(HEAPF32[($1 + 8 | 0) >> 2]) - $3)), wasm2js_scratch_load_i32(2));
  $4 = (HEAP32[(((($4 ^ $0 | 0) & 255 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) ^ ($4 >>> 8 | 0) | 0;
  $4 = (HEAP32[(((($4 ^ ($0 >>> 8 | 0) | 0) & 255 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) ^ ($4 >>> 8 | 0) | 0;
  $4 = (HEAP32[(((($4 ^ ($0 >>> 16 | 0) | 0) & 255 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) ^ ($4 >>> 8 | 0) | 0;
  $4 = (HEAP32[(((($4 & 255 | 0) ^ ($0 >>> 24 | 0) | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) ^ ($4 >>> 8 | 0) | 0;
  $0 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(HEAPF32[($1 + 12 | 0) >> 2]) - $5)), wasm2js_scratch_load_i32(2));
  $1 = (HEAP32[(((($4 ^ $0 | 0) & 255 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) ^ ($4 >>> 8 | 0) | 0;
  $1 = (HEAP32[(((($1 ^ ($0 >>> 8 | 0) | 0) & 255 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) ^ ($1 >>> 8 | 0) | 0;
  $1 = (HEAP32[(((($1 ^ ($0 >>> 16 | 0) | 0) & 255 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) ^ ($1 >>> 8 | 0) | 0;
  return ((HEAP32[(((($1 & 255 | 0) ^ ($0 >>> 24 | 0) | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) ^ ($1 >>> 8 | 0) | 0) ^ -1 | 0 | 0;
 }
 
 function ImGui__GcCompactTransientWindowBuffers_28ImGuiWindow__29($0) {
  $0 = $0 | 0;
  var $2 = 0, $1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  HEAP8[($0 + 904 | 0) >> 0] = 1;
  $1 = HEAP32[($0 + 672 | 0) >> 2] | 0;
  HEAP32[($0 + 896 | 0) >> 2] = HEAP32[($1 + 16 | 0) >> 2] | 0;
  HEAP32[($0 + 900 | 0) >> 2] = HEAP32[($1 + 28 | 0) >> 2] | 0;
  label$1 : {
   $2 = HEAP32[($0 + 288 | 0) >> 2] | 0;
   if (!$2) {
    break label$1
   }
   i64toi32_i32$1 = $0;
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 280 | 0) >> 2] = 0;
   HEAP32[($0 + 284 | 0) >> 2] = i64toi32_i32$0;
   label$2 : {
    $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$1) {
     break label$2
    }
    $1 = $1 + 184 | 0;
    HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + -1 | 0;
   }
   FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($2, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   HEAP32[($0 + 288 | 0) >> 2] = 0;
   $1 = HEAP32[($0 + 672 | 0) >> 2] | 0;
  }
  ImDrawList___ClearFreeMemory_28_29($1 | 0);
  label$3 : {
   $1 = HEAP32[($0 + 444 | 0) >> 2] | 0;
   if (!$1) {
    break label$3
   }
   i64toi32_i32$1 = $0 + 436 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   label$4 : {
    $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$2) {
     break label$4
    }
    $2 = $2 + 184 | 0;
    HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1 | 0;
   }
   FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($1, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   HEAP32[($0 + 444 | 0) >> 2] = 0;
  }
  label$5 : {
   $1 = HEAP32[($0 + 484 | 0) >> 2] | 0;
   if (!$1) {
    break label$5
   }
   i64toi32_i32$1 = $0 + 476 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   label$6 : {
    $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$2) {
     break label$6
    }
    $2 = $2 + 184 | 0;
    HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1 | 0;
   }
   FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($1, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   HEAP32[($0 + 484 | 0) >> 2] = 0;
  }
  label$7 : {
   $1 = HEAP32[($0 + 496 | 0) >> 2] | 0;
   if (!$1) {
    break label$7
   }
   i64toi32_i32$1 = $0 + 488 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   label$8 : {
    $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$2) {
     break label$8
    }
    $2 = $2 + 184 | 0;
    HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1 | 0;
   }
   FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($1, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   HEAP32[($0 + 496 | 0) >> 2] = 0;
  }
 }
 
 function ImGui__GcAwakeTransientWindowBuffers_28ImGuiWindow__29($0) {
  $0 = $0 | 0;
  var $4 = 0, $1 = 0, $5 = 0, $3 = 0, $2 = 0;
  HEAP8[($0 + 904 | 0) >> 0] = 0;
  label$1 : {
   $1 = HEAP32[($0 + 672 | 0) >> 2] | 0;
   $2 = HEAP32[($0 + 896 | 0) >> 2] | 0;
   if ((HEAP32[($1 + 16 | 0) >> 2] | 0 | 0) >= ($2 | 0)) {
    break label$1
   }
   $3 = $2 << 1 | 0;
   label$2 : {
    $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$4) {
     break label$2
    }
    $4 = $4 + 184 | 0;
    HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
   }
   $3 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($3, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$3 : {
    $4 = HEAP32[($1 + 20 | 0) >> 2] | 0;
    if (!$4) {
     break label$3
    }
    __memcpy($3 | 0, $4 | 0, (HEAP32[($1 + 12 | 0) >> 2] | 0) << 1 | 0 | 0) | 0;
    label$4 : {
     $4 = HEAP32[($1 + 20 | 0) >> 2] | 0;
     if (!$4) {
      break label$4
     }
     $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$5) {
      break label$4
     }
     $5 = $5 + 184 | 0;
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($4, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($1 + 16 | 0) >> 2] = $2;
   HEAP32[($1 + 20 | 0) >> 2] = $3;
   $1 = HEAP32[($0 + 672 | 0) >> 2] | 0;
  }
  label$5 : {
   $2 = HEAP32[($0 + 900 | 0) >> 2] | 0;
   if ((HEAP32[($1 + 28 | 0) >> 2] | 0 | 0) >= ($2 | 0)) {
    break label$5
   }
   $3 = Math_imul($2, 20);
   label$6 : {
    $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$4) {
     break label$6
    }
    $4 = $4 + 184 | 0;
    HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
   }
   $3 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($3, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$7 : {
    $4 = HEAP32[($1 + 32 | 0) >> 2] | 0;
    if (!$4) {
     break label$7
    }
    __memcpy($3 | 0, $4 | 0, Math_imul(HEAP32[($1 + 24 | 0) >> 2] | 0, 20) | 0) | 0;
    label$8 : {
     $4 = HEAP32[($1 + 32 | 0) >> 2] | 0;
     if (!$4) {
      break label$8
     }
     $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$5) {
      break label$8
     }
     $5 = $5 + 184 | 0;
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($4, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($1 + 28 | 0) >> 2] = $2;
   HEAP32[($1 + 32 | 0) >> 2] = $3;
  }
  HEAP32[($0 + 896 | 0) >> 2] = 0;
  HEAP32[($0 + 900 | 0) >> 2] = 0;
 }
 
 function ImGui__SetActiveID_28unsigned_20int_2c_20ImGuiWindow__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  label$1 : {
   $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $4 = HEAP32[($3 + 16128 | 0) >> 2] | 0;
   if (!$4) {
    break label$1
   }
   if ((HEAP32[($3 + 16192 | 0) >> 2] | 0 | 0) != (HEAP32[($4 + 156 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   label$2 : {
    if (!((HEAPU8[($3 + 23536 | 0) >> 0] | 0) & 1 | 0)) {
     break label$2
    }
    ImGui__DebugLog_28char_20const__2c_20____29(68244 | 0, 0 | 0);
   }
   HEAP32[($3 + 16128 | 0) >> 2] = 0;
  }
  $4 = HEAP32[($3 + 16192 | 0) >> 2] | 0;
  HEAP8[($3 + 16204 | 0) >> 0] = ($4 | 0) != ($0 | 0);
  label$3 : {
   label$4 : {
    label$5 : {
     if (($4 | 0) == ($0 | 0)) {
      break label$5
     }
     label$6 : {
      if (!((HEAPU8[($3 + 23536 | 0) >> 0] | 0) & 1 | 0)) {
       break label$6
      }
      $5 = 70527;
      $6 = 70527;
      label$7 : {
       $7 = HEAP32[($3 + 16220 | 0) >> 2] | 0;
       if (!$7) {
        break label$7
       }
       $6 = HEAP32[$7 >> 2] | 0;
      }
      label$8 : {
       if (!$1) {
        break label$8
       }
       $5 = HEAP32[$1 >> 2] | 0;
      }
      HEAP32[($2 + 12 | 0) >> 2] = $5;
      HEAP32[($2 + 8 | 0) >> 2] = $0;
      HEAP32[($2 + 4 | 0) >> 2] = $6;
      HEAP32[$2 >> 2] = $4;
      ImGui__DebugLog_28char_20const__2c_20____29(69915 | 0, $2 | 0);
     }
     HEAP32[($3 + 16228 | 0) >> 2] = -1;
     $8 = 0;
     HEAP8[($3 + 16207 | 0) >> 0] = $8;
     HEAP8[($3 + 16208 | 0) >> 0] = $8 >>> 8 | 0;
     HEAP32[($3 + 16200 | 0) >> 2] = 0;
     label$9 : {
      if ($0) {
       break label$9
      }
      HEAP32[($3 + 16220 | 0) >> 2] = $1;
      $9 = 0;
      HEAP8[($3 + 16205 | 0) >> 0] = $9;
      HEAP8[($3 + 16206 | 0) >> 0] = $9 >>> 8 | 0;
      HEAP32[($3 + 16192 | 0) >> 2] = 0;
      HEAP8[($3 + 16209 | 0) >> 0] = 0;
      break label$3;
     }
     HEAP32[($3 + 16248 | 0) >> 2] = 0;
     HEAP32[($3 + 16244 | 0) >> 2] = $0;
     HEAP32[($3 + 16220 | 0) >> 2] = $1;
     $10 = 0;
     HEAP8[($3 + 16205 | 0) >> 0] = $10;
     HEAP8[($3 + 16206 | 0) >> 0] = $10 >>> 8 | 0;
     HEAP32[($3 + 16192 | 0) >> 2] = $0;
     HEAP8[($3 + 16209 | 0) >> 0] = 0;
     break label$4;
    }
    HEAP32[($3 + 16220 | 0) >> 2] = $1;
    $11 = 0;
    HEAP8[($3 + 16205 | 0) >> 0] = $11;
    HEAP8[($3 + 16206 | 0) >> 0] = $11 >>> 8 | 0;
    HEAP32[($3 + 16192 | 0) >> 2] = $0;
    HEAP8[($3 + 16209 | 0) >> 0] = 0;
    if (!$0) {
     break label$3
    }
   }
   HEAP32[($3 + 16196 | 0) >> 2] = $0;
   $1 = 5;
   label$10 : {
    if ((HEAP32[($3 + 18660 | 0) >> 2] | 0 | 0) == ($0 | 0)) {
     break label$10
    }
    if ((HEAP32[($3 + 18672 | 0) >> 2] | 0 | 0) == ($0 | 0)) {
     break label$10
    }
    $1 = (HEAP32[($3 + 18680 | 0) >> 2] | 0 | 0) == ($0 | 0) ? 5 : 1;
   }
   HEAP32[($3 + 16224 | 0) >> 2] = $1;
  }
  HEAP32[($3 + 18244 | 0) >> 2] = 0;
  HEAP8[($3 + 18240 | 0) >> 0] = 0;
  HEAP32[($3 + 18236 | 0) >> 2] = 0;
  __stack_pointer = $2 + 16 | 0;
 }
 
 function ImGui__ClearActiveID_28_29() {
  ImGui__SetActiveID_28unsigned_20int_2c_20ImGuiWindow__29(0 | 0, 0 | 0);
 }
 
 function ImGui__SetHoveredID_28unsigned_20int_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  HEAP8[($1 + 16180 | 0) >> 0] = 0;
  HEAP32[($1 + 16172 | 0) >> 2] = $0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   if ((HEAP32[($1 + 16176 | 0) >> 2] | 0 | 0) == ($0 | 0)) {
    break label$1
   }
   HEAP32[($1 + 16184 | 0) >> 2] = 0;
   HEAP32[($1 + 16188 | 0) >> 2] = 0;
  }
 }
 
 function ImGui__KeepAliveID_28unsigned_20int_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   if ((HEAP32[($1 + 16192 | 0) >> 2] | 0 | 0) != ($0 | 0)) {
    break label$1
   }
   HEAP32[($1 + 16196 | 0) >> 2] = $0;
  }
  label$2 : {
   if ((HEAP32[($1 + 16232 | 0) >> 2] | 0 | 0) != ($0 | 0)) {
    break label$2
   }
   HEAP8[($1 + 16236 | 0) >> 0] = 1;
  }
 }
 
 function ImGui__MarkItemEdited_28unsigned_20int_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  HEAP16[($1 + 16208 | 0) >> 1] = 257;
  $1 = $1 + 18288 | 0;
  HEAP32[$1 >> 2] = HEAP32[$1 >> 2] | 0 | 4 | 0;
 }
 
 function ImGui__IsItemHovered_28int_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $2 = 0, $3 = 0, $5 = 0, $1 = 0, $6 = Math_fround(0);
  $1 = 0;
  $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $3 = HEAP32[($2 + 16116 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!(HEAPU8[($2 + 18711 | 0) >> 0] | 0)) {
      break label$3
     }
     if ($0 & 1024 | 0) {
      break label$3
     }
     if ((HEAPU8[($2 + 18710 | 0) >> 0] | 0) & 255 | 0) {
      break label$3
     }
     $1 = 0;
     label$4 : {
      if ($0 & 512 | 0) {
       break label$4
      }
      if ((HEAP32[($2 + 18284 | 0) >> 2] | 0) & 4 | 0) {
       break label$1
      }
     }
     $4 = HEAP32[($2 + 18652 | 0) >> 2] | 0;
     if (!$4) {
      break label$1
     }
     if (($4 | 0) != (HEAP32[($2 + 18280 | 0) >> 2] | 0 | 0)) {
      break label$1
     }
     if (($4 | 0) != (HEAP32[($3 + 4 | 0) >> 2] | 0 | 0)) {
      break label$2
     }
     if (!(HEAPU8[($3 + 221 | 0) >> 0] | 0)) {
      break label$2
     }
     break label$1;
    }
    $4 = HEAP32[($2 + 18288 | 0) >> 2] | 0;
    if (!($4 & 1 | 0)) {
     break label$1
    }
    label$5 : {
     if ((HEAP32[($2 + 16120 | 0) >> 2] | 0 | 0) == ($3 | 0)) {
      break label$5
     }
     if (!($4 & 128 | 0 | ($0 & 256 | 0) | 0)) {
      break label$1
     }
    }
    label$6 : {
     if ($0 & 128 | 0) {
      break label$6
     }
     $4 = HEAP32[($2 + 16192 | 0) >> 2] | 0;
     if (!$4) {
      break label$6
     }
     if (($4 | 0) == (HEAP32[($2 + 18280 | 0) >> 2] | 0 | 0)) {
      break label$6
     }
     if (HEAPU8[($2 + 16205 | 0) >> 0] | 0) {
      break label$6
     }
     if (($4 | 0) == (HEAP32[($3 + 156 | 0) >> 2] | 0 | 0)) {
      break label$6
     }
     if (($4 | 0) != (HEAP32[($3 + 160 | 0) >> 2] | 0 | 0)) {
      break label$1
     }
    }
    label$7 : {
     label$8 : {
      label$9 : {
       $4 = HEAP32[($2 + 18648 | 0) >> 2] | 0;
       if (!$4) {
        break label$9
       }
       $5 = HEAP32[($4 + 836 | 0) >> 2] | 0;
       if (!$5) {
        break label$9
       }
       if (!(HEAPU8[($5 + 220 | 0) >> 0] | 0)) {
        break label$9
       }
       if (($5 | 0) == (HEAP32[($3 + 836 | 0) >> 2] | 0 | 0)) {
        break label$9
       }
       label$10 : {
        $4 = HEAP32[($5 + 8 | 0) >> 2] | 0;
        if ($4 & 134217728 | 0) {
         break label$10
        }
        if ($0 & 32 | 0) {
         break label$9
        }
        if (!($4 & 67108864 | 0)) {
         break label$9
        }
       }
       $4 = HEAP32[($3 + 828 | 0) >> 2] | 0;
       if ((HEAP32[($4 + 828 | 0) >> 2] | 0 | 0) == ($5 | 0)) {
        break label$9
       }
       label$11 : while (1) {
        if (($4 | 0) == ($5 | 0)) {
         break label$9
        }
        $4 = HEAP32[($4 + 824 | 0) >> 2] | 0;
        if ($4) {
         continue label$11
        }
        break label$8;
       };
      }
      if ((HEAP32[($3 + 44 | 0) >> 2] | 0 | 0) == (HEAP32[($2 + 18596 | 0) >> 2] | 0 | 0)) {
       break label$7
      }
      $4 = HEAP32[($2 + 16128 | 0) >> 2] | 0;
      if (!$4) {
       break label$8
      }
      if ((HEAP32[($3 + 836 | 0) >> 2] | 0 | 0) == (HEAP32[($4 + 836 | 0) >> 2] | 0 | 0)) {
       break label$7
      }
     }
     if (!((HEAPU8[($2 + 18285 | 0) >> 0] | 0) & 1 | 0)) {
      break label$1
     }
    }
    label$12 : {
     if ($0 & 512 | 0) {
      break label$12
     }
     if ((HEAP32[($2 + 18284 | 0) >> 2] | 0) & 4 | 0) {
      break label$1
     }
    }
    $4 = HEAP32[($2 + 18280 | 0) >> 2] | 0;
    if (($4 | 0) != (HEAP32[($3 + 156 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    if (HEAPU8[($3 + 221 | 0) >> 0] | 0) {
     break label$1
    }
   }
   label$13 : {
    label$14 : {
     if (!($0 & 2048 | 0)) {
      break label$14
     }
     $5 = $2 + 60 | 0;
     break label$13;
    }
    $1 = 1;
    if (!($0 & 4096 | 0)) {
     break label$1
    }
    $5 = $2 + 64 | 0;
   }
   $1 = 1;
   $6 = Math_fround(HEAPF32[$5 >> 2]);
   if (!($6 > Math_fround(0.0))) {
    break label$1
   }
   label$15 : {
    if ($4) {
     break label$15
    }
    $4 = ImGuiWindow__GetIDFromRectangle_28ImRect_20const__29($3 | 0, $2 + 18292 | 0 | 0) | 0;
   }
   label$16 : {
    if (!($0 & 8192 | 0)) {
     break label$16
    }
    if ((HEAP32[($2 + 19340 | 0) >> 2] | 0 | 0) == ($4 | 0)) {
     break label$16
    }
    HEAP32[($2 + 19344 | 0) >> 2] = 0;
   }
   HEAP32[($2 + 19336 | 0) >> 2] = $4;
   $1 = Math_fround(HEAPF32[($2 + 19344 | 0) >> 2]) >= $6;
  }
  return $1 | 0;
 }
 
 function ImGui__ItemHoverable_28ImRect_20const__2c_20unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $6 = Math_fround(0), $3 = 0, $13 = 0, $5 = Math_fround(0), $9 = Math_fround(0), $15 = 0, $16 = 0, $7 = Math_fround(0), $10 = Math_fround(0), $4 = 0, $14 = 0, $8 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0);
  label$1 : {
   $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $3 = HEAP32[($2 + 16172 | 0) >> 2] | 0;
   if (!$3) {
    break label$1
   }
   if (($3 | 0) == ($1 | 0)) {
    break label$1
   }
   if (HEAPU8[($2 + 16180 | 0) >> 0] | 0) {
    break label$1
   }
   return 0 | 0;
  }
  label$2 : {
   label$3 : {
    $3 = HEAP32[($2 + 16116 | 0) >> 2] | 0;
    if ((HEAP32[($2 + 16120 | 0) >> 2] | 0 | 0) != ($3 | 0)) {
     break label$3
    }
    label$4 : {
     $4 = HEAP32[($2 + 16192 | 0) >> 2] | 0;
     if (!$4) {
      break label$4
     }
     if (($4 | 0) == ($1 | 0)) {
      break label$4
     }
     if (!(HEAPU8[($2 + 16205 | 0) >> 0] | 0)) {
      break label$3
     }
    }
    $5 = Math_fround(HEAPF32[($2 + 3520 | 0) >> 2]);
    $6 = Math_fround(HEAPF32[$0 >> 2]);
    $7 = Math_fround(HEAPF32[($3 + 580 | 0) >> 2]);
    $7 = $6 >= $7 ? $6 : $7;
    $6 = Math_fround(HEAPF32[($2 + 14496 | 0) >> 2]);
    if (!($5 >= Math_fround($7 - $6))) {
     break label$3
    }
    $8 = Math_fround(HEAPF32[($2 + 3524 | 0) >> 2]);
    $9 = Math_fround(HEAPF32[($0 + 4 | 0) >> 2]);
    $10 = Math_fround(HEAPF32[($3 + 584 | 0) >> 2]);
    $11 = $9 >= $10 ? $9 : $10;
    $12 = Math_fround(HEAPF32[($2 + 14500 | 0) >> 2]);
    if (!($8 >= Math_fround($11 - $12))) {
     break label$3
    }
    $9 = Math_fround(HEAPF32[($0 + 8 | 0) >> 2]);
    $10 = Math_fround(HEAPF32[($3 + 588 | 0) >> 2]);
    $9 = $9 < $10 ? $9 : $10;
    if (!($5 < Math_fround($9 + $6))) {
     break label$3
    }
    $6 = Math_fround(HEAPF32[($0 + 12 | 0) >> 2]);
    $5 = Math_fround(HEAPF32[($3 + 592 | 0) >> 2]);
    $6 = $6 < $5 ? $6 : $5;
    if (!($8 < Math_fround($6 + $12))) {
     break label$3
    }
    $13 = HEAP32[($2 + 18596 | 0) >> 2] | 0;
    $5 = Math_fround(HEAPF32[($13 + 12 | 0) >> 2]);
    if (!($11 < Math_fround($5 + Math_fround(HEAPF32[($13 + 20 | 0) >> 2])))) {
     break label$3
    }
    if (!($6 > $5)) {
     break label$3
    }
    $6 = Math_fround(HEAPF32[($13 + 8 | 0) >> 2]);
    if (!($7 < Math_fround($6 + Math_fround(HEAPF32[($13 + 16 | 0) >> 2])))) {
     break label$3
    }
    if (!($9 > $6)) {
     break label$3
    }
    label$5 : {
     $14 = HEAP32[($2 + ((HEAP32[($2 + 18280 | 0) >> 2] | 0 | 0) == ($1 | 0) ? 18284 : 18252) | 0) >> 2] | 0;
     if ($14 & 256 | 0) {
      break label$5
     }
     label$6 : {
      label$7 : {
       $15 = HEAP32[($2 + 18648 | 0) >> 2] | 0;
       if (!$15) {
        break label$7
       }
       $16 = HEAP32[($15 + 836 | 0) >> 2] | 0;
       if (!$16) {
        break label$7
       }
       if (!(HEAPU8[($16 + 220 | 0) >> 0] | 0)) {
        break label$7
       }
       if (($16 | 0) == (HEAP32[($3 + 836 | 0) >> 2] | 0 | 0)) {
        break label$7
       }
       if (!((HEAPU8[($16 + 11 | 0) >> 0] | 0) & 12 | 0)) {
        break label$7
       }
       $15 = HEAP32[($3 + 828 | 0) >> 2] | 0;
       if ((HEAP32[($15 + 828 | 0) >> 2] | 0 | 0) == ($16 | 0)) {
        break label$7
       }
       label$8 : while (1) {
        if (($15 | 0) == ($16 | 0)) {
         break label$7
        }
        $15 = HEAP32[($15 + 824 | 0) >> 2] | 0;
        if ($15) {
         continue label$8
        }
        break label$6;
       };
      }
      if ((HEAP32[($3 + 44 | 0) >> 2] | 0 | 0) == ($13 | 0)) {
       break label$5
      }
      $13 = HEAP32[($2 + 16128 | 0) >> 2] | 0;
      if (!$13) {
       break label$6
      }
      if ((HEAP32[($3 + 836 | 0) >> 2] | 0 | 0) == (HEAP32[($13 + 836 | 0) >> 2] | 0 | 0)) {
       break label$5
      }
     }
     HEAP8[($2 + 16181 | 0) >> 0] = 1;
     return 0 | 0;
    }
    label$9 : {
     label$10 : {
      if (!$1) {
       break label$10
      }
      HEAP8[($2 + 16180 | 0) >> 0] = 0;
      HEAP32[($2 + 16172 | 0) >> 2] = $1;
      label$11 : {
       $13 = HEAP32[($2 + 16176 | 0) >> 2] | 0;
       if (($13 | 0) == ($1 | 0)) {
        break label$11
       }
       HEAP32[($2 + 16184 | 0) >> 2] = 0;
       HEAP32[($2 + 16188 | 0) >> 2] = 0;
      }
      if ($14 & 4 | 0) {
       break label$9
      }
      label$12 : {
       if (!(HEAPU8[($2 + 23569 | 0) >> 0] | 0)) {
        break label$12
       }
       if (($13 | 0) != ($1 | 0)) {
        break label$12
       }
       ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29(GetViewportDrawList_28ImGuiViewportP__2c_20unsigned_20long_2c_20char_20const__29(HEAP32[($3 + 44 | 0) >> 2] | 0 | 0, 1 | 0, 67101 | 0) | 0 | 0, $0 | 0, $0 + 8 | 0 | 0, -16711681 | 0, Math_fround(Math_fround(0.0)), 0 | 0, Math_fround(Math_fround(1.0)));
      }
      if ((HEAP32[($2 + 23572 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
       break label$2
      }
      wasm2js_trap();
     }
     if (!($14 & 4 | 0)) {
      break label$2
     }
    }
    label$13 : {
     if (($4 | 0) != ($1 | 0)) {
      break label$13
     }
     ImGui__SetActiveID_28unsigned_20int_2c_20ImGuiWindow__29(0 | 0, 0 | 0);
    }
    HEAP8[($2 + 16181 | 0) >> 0] = 1;
   }
   return 0 | 0;
  }
  return !(HEAPU8[($2 + 18711 | 0) >> 0] | 0) | 0;
 }
 
 function ImGui__IsMouseHoveringRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $7 = Math_fround(0), $5 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $6 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $111 = 0;
  $3 = Math_fround(HEAPF32[($1 + 4 | 0) >> 2]);
  $4 = Math_fround(HEAPF32[$1 >> 2]);
  $5 = Math_fround(HEAPF32[($0 + 4 | 0) >> 2]);
  $6 = Math_fround(HEAPF32[$0 >> 2]);
  $0 = 0;
  $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  label$1 : {
   if (!$2) {
    break label$1
   }
   $2 = HEAP32[($1 + 16116 | 0) >> 2] | 0;
   $7 = Math_fround(HEAPF32[($2 + 592 | 0) >> 2]);
   $3 = $3 < $7 ? $3 : $7;
   $7 = Math_fround(HEAPF32[($2 + 588 | 0) >> 2]);
   $4 = $4 < $7 ? $4 : $7;
   $7 = Math_fround(HEAPF32[($2 + 584 | 0) >> 2]);
   $5 = $5 >= $7 ? $5 : $7;
   $7 = Math_fround(HEAPF32[($2 + 580 | 0) >> 2]);
   $6 = $6 >= $7 ? $6 : $7;
  }
  label$2 : {
   $7 = Math_fround(HEAPF32[($1 + 3520 | 0) >> 2]);
   $8 = Math_fround(HEAPF32[($1 + 14496 | 0) >> 2]);
   if (!($7 >= Math_fround($6 - $8))) {
    break label$2
   }
   $9 = Math_fround(HEAPF32[($1 + 3524 | 0) >> 2]);
   $10 = Math_fround(HEAPF32[($1 + 14500 | 0) >> 2]);
   if (!($9 >= Math_fround($5 - $10))) {
    break label$2
   }
   if (!($7 < Math_fround($4 + $8))) {
    break label$2
   }
   if (!($9 < Math_fround($3 + $10))) {
    break label$2
   }
   $1 = HEAP32[($1 + 18596 | 0) >> 2] | 0;
   $7 = Math_fround(HEAPF32[($1 + 12 | 0) >> 2]);
   $111 = $5 < Math_fround($7 + Math_fround(HEAPF32[($1 + 20 | 0) >> 2])) & $3 > $7 | 0;
   $5 = Math_fround(HEAPF32[($1 + 8 | 0) >> 2]);
   $0 = ($111 & $6 < Math_fround($5 + Math_fround(HEAPF32[($1 + 16 | 0) >> 2])) | 0) & $4 > $5 | 0;
  }
  return $0 | 0;
 }
 
 function ImGui__IsClippedEx_28ImRect_20const__2c_20unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  label$1 : {
   label$2 : {
    $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    $3 = HEAP32[($2 + 16116 | 0) >> 2] | 0;
    if (!(Math_fround(HEAPF32[($3 + 584 | 0) >> 2]) < Math_fround(HEAPF32[($0 + 12 | 0) >> 2]))) {
     break label$2
    }
    if (!(Math_fround(HEAPF32[($3 + 592 | 0) >> 2]) > Math_fround(HEAPF32[($0 + 4 | 0) >> 2]))) {
     break label$2
    }
    if (!(Math_fround(HEAPF32[($3 + 580 | 0) >> 2]) < Math_fround(HEAPF32[($0 + 8 | 0) >> 2]))) {
     break label$2
    }
    if (Math_fround(HEAPF32[($3 + 588 | 0) >> 2]) > Math_fround(HEAPF32[$0 >> 2])) {
     break label$1
    }
   }
   label$3 : {
    if (!$1) {
     break label$3
    }
    if ((HEAP32[($2 + 16192 | 0) >> 2] | 0 | 0) == ($1 | 0)) {
     break label$1
    }
    if ((HEAP32[($2 + 18652 | 0) >> 2] | 0 | 0) == ($1 | 0)) {
     break label$1
    }
   }
   if (HEAPU8[($2 + 23484 | 0) >> 0] | 0) {
    break label$1
   }
   return 1 | 0;
  }
  return 0 | 0;
 }
 
 function ImGui__CalcWrapWidthForPos_28ImVec2_20const__2c_20float_29($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $3 = 0, $2 = Math_fround(0);
  $2 = Math_fround(0.0);
  label$1 : {
   if ($1 < Math_fround(0.0)) {
    break label$1
   }
   $3 = HEAP32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 16116 | 0) >> 2] | 0;
   label$2 : {
    label$3 : {
     if ($1 != Math_fround(0.0)) {
      break label$3
     }
     $1 = Math_fround(HEAPF32[($3 + 556 | 0) >> 2]);
     break label$2;
    }
    if (!($1 > Math_fround(0.0))) {
     break label$2
    }
    $1 = Math_fround(Math_fround(Math_fround(HEAPF32[($3 + 64 | 0) >> 2]) - Math_fround(HEAPF32[($3 + 168 | 0) >> 2])) + $1);
   }
   $1 = Math_fround($1 - Math_fround(HEAPF32[$0 >> 2]));
   $2 = $1 >= Math_fround(1.0) ? $1 : Math_fround(1.0);
  }
  return Math_fround($2);
 }
 
 function ImGui__GetIO_28_29() {
  return (HEAP32[(0 + 92720 | 0) >> 2] | 0) + 8 | 0 | 0;
 }
 
 function ImGui__GetDrawData_28_29() {
  var $0 = 0;
  $0 = HEAP32[(HEAP32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 18584 | 0) >> 2] | 0) >> 2] | 0;
  return (HEAPU8[($0 + 128 | 0) >> 0] | 0 ? $0 + 128 | 0 : 0) | 0;
 }
 
 function ImGui__StartMouseMovingWindow_28ImGuiWindow__29($0) {
  $0 = $0 | 0;
  var $3 = 0, $1 = 0, $2 = 0, $4 = Math_fround(0), $5 = Math_fround(0);
  $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  ImGui__FocusWindow_28ImGuiWindow__29($0 | 0);
  ImGui__SetActiveID_28unsigned_20int_2c_20ImGuiWindow__29(HEAP32[($0 + 156 | 0) >> 2] | 0 | 0, $0 | 0);
  $2 = 1;
  HEAP8[($1 + 18710 | 0) >> 0] = 1;
  $3 = HEAP32[($0 + 836 | 0) >> 2] | 0;
  $4 = Math_fround(HEAPF32[($3 + 64 | 0) >> 2]);
  $5 = Math_fround(HEAPF32[($3 + 68 | 0) >> 2]);
  HEAP8[($1 + 16206 | 0) >> 0] = 1;
  HEAPF32[($1 + 16216 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($1 + 14004 | 0) >> 2]) - $5);
  HEAPF32[($1 + 16212 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($1 + 14e3 | 0) >> 2]) - $4);
  $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  HEAP32[($3 + 18236 | 0) >> 2] = 15;
  HEAP8[($3 + 18240 | 0) >> 0] = 1;
  HEAP16[($3 + 18736 | 0) >> 1] = 0;
  HEAP8[($3 + 18712 | 0) >> 0] = HEAPU8[($3 + 18713 | 0) >> 0] | 0;
  label$1 : {
   label$2 : {
    if ((HEAPU8[($0 + 8 | 0) >> 0] | 0) & 4 | 0) {
     break label$2
    }
    if (!((HEAPU8[((HEAP32[($0 + 836 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0) & 4 | 0)) {
     break label$1
    }
   }
   $2 = 0;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     $3 = HEAP32[($0 + 936 | 0) >> 2] | 0;
     if (!$3) {
      break label$5
     }
     $3 = HEAP32[($3 + 116 | 0) >> 2] | 0;
     if (!$3) {
      break label$5
     }
     if ($2 & !((HEAPU8[($3 + 8 | 0) >> 0] | 0) & 4 | 0) | 0) {
      break label$4
     }
     break label$3;
    }
    if (!$2) {
     break label$3
    }
   }
   HEAP32[($1 + 16128 | 0) >> 2] = $0;
  }
 }
 
 function ImGui__FocusWindow_28ImGuiWindow__29($0) {
  $0 = $0 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, $6 = 0, $8 = 0, $1 = 0, $7 = 0, $10 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if ((HEAP32[($2 + 18648 | 0) >> 2] | 0 | 0) == ($0 | 0)) {
       break label$4
      }
      $3 = $2;
      label$5 : {
       if (!((HEAPU8[($2 + 23536 | 0) >> 0] | 0) & 2 | 0)) {
        break label$5
       }
       label$6 : {
        label$7 : {
         if ($0) {
          break label$7
         }
         $3 = 67676;
         break label$6;
        }
        $3 = HEAP32[$0 >> 2] | 0;
       }
       HEAP32[($1 + 16 | 0) >> 2] = $3;
       ImGui__DebugLog_28char_20const__2c_20____29(69806 | 0, $1 + 16 | 0 | 0);
       $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      }
      HEAP32[($2 + 18648 | 0) >> 2] = $0;
      HEAP16[($2 + 18736 | 0) >> 1] = 0;
      HEAP8[($2 + 18713 | 0) >> 0] = 0;
      $4 = 1;
      label$8 : {
       if (HEAPU8[($3 + 18737 | 0) >> 0] | 0) {
        break label$8
       }
       $4 = (HEAPU8[($3 + 18713 | 0) >> 0] | 0 | 0) != (0 | 0);
      }
      HEAP8[($3 + 18712 | 0) >> 0] = $4;
      label$9 : {
       if (!$0) {
        break label$9
       }
       label$10 : {
        if (!(HEAPU8[($2 + 18711 | 0) >> 0] | 0)) {
         break label$10
        }
        HEAP8[($2 + 18709 | 0) >> 0] = 1;
       }
       $3 = HEAP32[($0 + 852 | 0) >> 2] | 0;
       HEAP32[($2 + 18704 | 0) >> 2] = 0;
       HEAP32[($2 + 18652 | 0) >> 2] = $3;
       $3 = HEAP32[($0 + 892 | 0) >> 2] | 0;
       HEAP8[($2 + 18708 | 0) >> 0] = 0;
       HEAP32[($2 + 18656 | 0) >> 2] = $3;
       ImGui__ClosePopupsOverWindow_28ImGuiWindow__2c_20bool_29($0 | 0, 0 | 0);
       break label$3;
      }
      HEAP32[($2 + 18704 | 0) >> 2] = 0;
      HEAP32[($2 + 18652 | 0) >> 2] = 0;
      HEAP32[($2 + 18656 | 0) >> 2] = 0;
      HEAP8[($2 + 18708 | 0) >> 0] = 0;
      if ((HEAP32[($3 + 18548 | 0) >> 2] | 0 | 0) < (1 | 0)) {
       break label$2
      }
      label$11 : {
       if (!((HEAPU8[($3 + 23536 | 0) >> 0] | 0) & 4 | 0)) {
        break label$11
       }
       HEAP32[$1 >> 2] = 67676;
       ImGui__DebugLog_28char_20const__2c_20____29(69878 | 0, $1 | 0);
      }
      ImGui__ClosePopupToLevel_28int_2c_20bool_29(0 | 0, 0 | 0);
      break label$2;
     }
     if (!$0) {
      break label$2
     }
    }
    $5 = 0;
    $4 = HEAP32[($0 + 932 | 0) >> 2] | 0;
    $6 = ($4 | 0) != (0 | 0);
    $7 = HEAP32[($0 + 836 | 0) >> 2] | 0;
    $8 = HEAP32[($0 + 828 | 0) >> 2] | 0;
    label$12 : {
     $3 = HEAP32[($2 + 16220 | 0) >> 2] | 0;
     if ($3) {
      break label$12
     }
     $9 = 0;
     break label$1;
    }
    label$13 : {
     if ($4) {
      break label$13
     }
     $9 = 0;
     break label$1;
    }
    $9 = (HEAP32[($4 + 112 | 0) >> 2] | 0 | 0) == ($3 | 0);
    $6 = 1;
    break label$1;
   }
   $3 = HEAP32[($2 + 16220 | 0) >> 2] | 0;
   $5 = 1;
   $6 = 0;
   $4 = 0;
   $8 = 0;
   $7 = 0;
   $9 = 0;
  }
  label$14 : {
   if (!(HEAP32[($2 + 16192 | 0) >> 2] | 0)) {
    break label$14
   }
   if (!$3) {
    break label$14
   }
   if ((HEAP32[($3 + 828 | 0) >> 2] | 0 | 0) == ($8 | 0)) {
    break label$14
   }
   if ((HEAPU8[($2 + 16206 | 0) >> 0] | 0 | 0) != (0 | 0) | $9 | 0) {
    break label$14
   }
   ImGui__SetActiveID_28unsigned_20int_2c_20ImGuiWindow__29(0 | 0, 0 | 0);
  }
  label$15 : {
   if ($5) {
    break label$15
   }
   HEAP32[($0 + 624 | 0) >> 2] = HEAP32[($2 + 16016 | 0) >> 2] | 0;
   label$16 : {
    if (!$6) {
     break label$16
    }
    $2 = HEAP32[($4 + 48 | 0) >> 2] | 0;
    if (!$2) {
     break label$16
    }
    $3 = HEAP32[($0 + 160 | 0) >> 2] | 0;
    HEAP32[($2 + 20 | 0) >> 2] = $3;
    HEAP32[($2 + 24 | 0) >> 2] = $3;
   }
   label$17 : {
    $6 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    $3 = HEAP32[($6 + 16064 | 0) >> 2] | 0;
    $2 = HEAP32[($6 + 16056 | 0) >> 2] | 0;
    $9 = $2 + -1 | 0;
    if ((HEAP32[($3 + ($9 << 2 | 0) | 0) >> 2] | 0 | 0) == ($8 | 0)) {
     break label$17
    }
    label$18 : {
     $4 = HEAP16[($8 + 240 | 0) >> 1] | 0;
     if (($9 | 0) <= ($4 | 0)) {
      break label$18
     }
     $5 = $2 + -2 | 0;
     label$19 : {
      label$20 : {
       if (($2 + ($4 ^ -1 | 0) | 0) & 1 | 0) {
        break label$20
       }
       $2 = $4;
       break label$19;
      }
      $10 = $4 << 2 | 0;
      $2 = $4 + 1 | 0;
      HEAP32[($3 + $10 | 0) >> 2] = HEAP32[($3 + ($2 << 2 | 0) | 0) >> 2] | 0;
      $3 = HEAP32[($6 + 16064 | 0) >> 2] | 0;
      $10 = HEAP32[($3 + $10 | 0) >> 2] | 0;
      HEAP16[($10 + 240 | 0) >> 1] = (HEAPU16[($10 + 240 | 0) >> 1] | 0) + -1 | 0;
     }
     if (($5 | 0) == ($4 | 0)) {
      break label$18
     }
     label$21 : while (1) {
      $4 = $2 << 2 | 0;
      $5 = $4 + 4 | 0;
      HEAP32[($3 + $4 | 0) >> 2] = HEAP32[($3 + $5 | 0) >> 2] | 0;
      $3 = HEAP32[($6 + 16064 | 0) >> 2] | 0;
      $4 = HEAP32[($3 + $4 | 0) >> 2] | 0;
      HEAP16[($4 + 240 | 0) >> 1] = (HEAPU16[($4 + 240 | 0) >> 1] | 0) + -1 | 0;
      $2 = $2 + 2 | 0;
      HEAP32[($3 + $5 | 0) >> 2] = HEAP32[($3 + ($2 << 2 | 0) | 0) >> 2] | 0;
      $3 = HEAP32[($6 + 16064 | 0) >> 2] | 0;
      $4 = HEAP32[($3 + $5 | 0) >> 2] | 0;
      HEAP16[($4 + 240 | 0) >> 1] = (HEAPU16[($4 + 240 | 0) >> 1] | 0) + -1 | 0;
      if (($2 | 0) != ($9 | 0)) {
       continue label$21
      }
      break label$21;
     };
    }
    HEAP32[($3 + ($9 << 2 | 0) | 0) >> 2] = $8;
    HEAP16[($8 + 240 | 0) >> 1] = $9;
   }
   if ((HEAP32[($8 + 8 | 0) >> 2] | 0 | (HEAP32[($0 + 8 | 0) >> 2] | 0) | 0 | (HEAP32[($7 + 8 | 0) >> 2] | 0) | 0) & 8192 | 0) {
    break label$15
   }
   $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $5 = HEAP32[($4 + 16044 | 0) >> 2] | 0;
   $0 = HEAP32[($4 + 16052 | 0) >> 2] | 0;
   $2 = HEAP32[((($5 << 2 | 0) + $0 | 0) + -4 | 0) >> 2] | 0;
   if (($2 | 0) == ($7 | 0)) {
    break label$15
   }
   if ((HEAP32[($2 + 836 | 0) >> 2] | 0 | 0) == ($7 | 0)) {
    break label$15
   }
   if (($5 | 0) < (2 | 0)) {
    break label$15
   }
   $2 = $5 + -2 | 0;
   label$22 : while (1) {
    label$23 : {
     $3 = $0 + ($2 << 2 | 0) | 0;
     if ((HEAP32[$3 >> 2] | 0 | 0) != ($7 | 0)) {
      break label$23
     }
     memmove($3 | 0, (($2 << 2 | 0) + $0 | 0) + 4 | 0 | 0, ($5 + ($2 ^ -1 | 0) | 0) << 2 | 0 | 0) | 0;
     HEAP32[((((HEAP32[($4 + 16044 | 0) >> 2] | 0) << 2 | 0) + (HEAP32[($4 + 16052 | 0) >> 2] | 0) | 0) + -4 | 0) >> 2] = $7;
     break label$15;
    }
    $3 = ($2 | 0) > (0 | 0);
    $2 = $2 + -1 | 0;
    if ($3) {
     continue label$22
    }
    break label$22;
   };
  }
  __stack_pointer = $1 + 32 | 0;
 }
 
 function ImGui__ClosePopupsOverWindow_28ImGuiWindow__2c_20bool_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $7 = 0, $3 = 0, $5 = 0, $2 = 0, $8 = 0, $4 = 0, $9 = 0, $6 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = 0;
  label$1 : {
   $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $5 = HEAP32[($4 + 18548 | 0) >> 2] | 0;
   if (!$5) {
    break label$1
   }
   label$2 : {
    if (!$0) {
     break label$2
    }
    if (($5 | 0) < (1 | 0)) {
     break label$2
    }
    $6 = HEAP32[($4 + 18556 | 0) >> 2] | 0;
    $3 = 0;
    label$3 : while (1) {
     label$4 : {
      $7 = HEAP32[(($6 + Math_imul($3, 40) | 0) + 4 | 0) >> 2] | 0;
      if (!$7) {
       break label$4
      }
      $8 = $3;
      if ((HEAPU8[($7 + 11 | 0) >> 0] | 0) & 1 | 0) {
       break label$4
      }
      label$5 : while (1) {
       label$6 : {
        $9 = HEAP32[(($6 + Math_imul($8, 40) | 0) + 4 | 0) >> 2] | 0;
        if (!$9) {
         break label$6
        }
        $7 = $0;
        if ((HEAP32[($7 + 828 | 0) >> 2] | 0 | 0) == ($9 | 0)) {
         break label$4
        }
        label$7 : while (1) {
         if (($7 | 0) == ($9 | 0)) {
          break label$4
         }
         $7 = HEAP32[($7 + 824 | 0) >> 2] | 0;
         if ($7) {
          continue label$7
         }
         break label$7;
        };
       }
       $8 = $8 + 1 | 0;
       if (($8 | 0) != ($5 | 0)) {
        continue label$5
       }
       break label$2;
      };
     }
     $3 = $3 + 1 | 0;
     if (($3 | 0) != ($5 | 0)) {
      continue label$3
     }
     break label$1;
    };
   }
   if (($3 | 0) >= ($5 | 0)) {
    break label$1
   }
   label$8 : {
    if (!((HEAPU8[($4 + 23536 | 0) >> 0] | 0) & 4 | 0)) {
     break label$8
    }
    label$9 : {
     label$10 : {
      if ($0) {
       break label$10
      }
      $7 = 67676;
      break label$9;
     }
     $7 = HEAP32[$0 >> 2] | 0;
    }
    HEAP32[$2 >> 2] = $7;
    ImGui__DebugLog_28char_20const__2c_20____29(69878 | 0, $2 | 0);
   }
   ImGui__ClosePopupToLevel_28int_2c_20bool_29($3 | 0, $1 | 0);
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function ImGui__ClosePopupToLevel_28int_2c_20bool_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $4 = 0, $8 = 0, $5 = 0, $7 = 0, $2 = 0, $6 = 0, $9 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  label$1 : {
   $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   if (!((HEAPU8[($3 + 23536 | 0) >> 0] | 0) & 4 | 0)) {
    break label$1
   }
   HEAP32[($2 + 4 | 0) >> 2] = $1;
   HEAP32[$2 >> 2] = $0;
   ImGui__DebugLog_28char_20const__2c_20____29(68604 | 0, $2 | 0);
  }
  $4 = (HEAP32[($3 + 18556 | 0) >> 2] | 0) + Math_imul($0, 40) | 0;
  $5 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  $6 = HEAP32[($4 + 4 | 0) >> 2] | 0;
  label$2 : {
   $4 = HEAP32[($3 + 18552 | 0) >> 2] | 0;
   if (($4 | 0) >= ($0 | 0)) {
    break label$2
   }
   label$3 : {
    label$4 : {
     if ($4) {
      break label$4
     }
     $7 = 8;
     break label$3;
    }
    $7 = (($4 | 0) / (2 | 0) | 0) + $4 | 0;
   }
   $7 = ($7 | 0) > ($0 | 0) ? $7 : $0;
   if (($4 | 0) >= ($7 | 0)) {
    break label$2
   }
   $4 = Math_imul($7, 40);
   label$5 : {
    $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$8) {
     break label$5
    }
    $8 = $8 + 184 | 0;
    HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 1 | 0;
   }
   $4 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($4, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$6 : {
    $8 = HEAP32[($3 + 18556 | 0) >> 2] | 0;
    if (!$8) {
     break label$6
    }
    __memcpy($4 | 0, $8 | 0, Math_imul(HEAP32[($3 + 18548 | 0) >> 2] | 0, 40) | 0) | 0;
    label$7 : {
     $8 = HEAP32[($3 + 18556 | 0) >> 2] | 0;
     if (!$8) {
      break label$7
     }
     $9 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$9) {
      break label$7
     }
     $9 = $9 + 184 | 0;
     HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($8, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($3 + 18552 | 0) >> 2] = $7;
   HEAP32[($3 + 18556 | 0) >> 2] = $4;
  }
  HEAP32[($3 + 18548 | 0) >> 2] = $0;
  label$8 : {
   if (!$1) {
    break label$8
   }
   label$9 : {
    if (!$6) {
     break label$9
    }
    if (!((HEAPU8[($6 + 11 | 0) >> 0] | 0) & 16 | 0)) {
     break label$9
    }
    $5 = HEAP32[($6 + 820 | 0) >> 2] | 0;
   }
   label$10 : {
    label$11 : {
     if ($5) {
      break label$11
     }
     $0 = 0;
     break label$10;
    }
    label$12 : {
     if (!$6) {
      break label$12
     }
     if ((HEAPU8[($5 + 220 | 0) >> 0] | 0) & 255 | 0) {
      break label$12
     }
     ImGui__FocusTopMostWindowUnderOne_28ImGuiWindow__2c_20ImGuiWindow__29($6 | 0, 0 | 0);
     break label$8;
    }
    label$13 : {
     if (!(HEAP32[($3 + 18704 | 0) >> 2] | 0)) {
      break label$13
     }
     $0 = $5;
     break label$10;
    }
    label$14 : {
     $0 = HEAP32[($5 + 848 | 0) >> 2] | 0;
     if (!$0) {
      break label$14
     }
     if (HEAPU8[($0 + 220 | 0) >> 0] | 0) {
      break label$10
     }
    }
    label$15 : {
     $0 = HEAP32[($5 + 936 | 0) >> 2] | 0;
     if ($0) {
      break label$15
     }
     $0 = $5;
     break label$10;
    }
    label$16 : {
     $3 = HEAP32[($0 + 48 | 0) >> 2] | 0;
     if ($3) {
      break label$16
     }
     $0 = $5;
     break label$10;
    }
    $0 = $5;
    $3 = ImGui__TabBarFindMostRecentlySelectedTabForActiveWindow_28ImGuiTabBar__29($3 | 0) | 0;
    if (!$3) {
     break label$10
    }
    $0 = HEAP32[($3 + 8 | 0) >> 2] | 0;
   }
   ImGui__FocusWindow_28ImGuiWindow__29($0 | 0);
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function ImGui__SetActiveIdUsingAllKeyboardKeys_28_29() {
  var $0 = 0;
  $0 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  HEAP8[($0 + 18240 | 0) >> 0] = 1;
  HEAP32[($0 + 18236 | 0) >> 2] = 15;
  HEAP16[($0 + 18736 | 0) >> 1] = 0;
  HEAP8[($0 + 18712 | 0) >> 0] = HEAPU8[($0 + 18713 | 0) >> 0] | 0;
 }
 
 function ImGui__StartMouseMovingWindowOrNode_28ImGuiWindow__2c_20ImGuiDockNode__2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $6 = 0, $8 = Math_fround(0), $4 = 0, $3 = 0, $5 = 0, $7 = 0, $56 = Math_fround(0);
  $3 = 0;
  $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $5 = 1;
  label$1 : {
   if (!$1) {
    break label$1
   }
   $6 = HEAP32[($1 + 116 | 0) >> 2] | 0;
   if (!$6) {
    break label$1
   }
   if ((HEAPU8[($6 + 8 | 0) >> 0] | 0) & 4 | 0) {
    break label$1
   }
   $6 = $1;
   label$2 : while (1) {
    $7 = $6;
    $6 = HEAP32[($6 + 24 | 0) >> 2] | 0;
    if ($6) {
     continue label$2
    }
    break label$2;
   };
   label$3 : {
    if ((HEAP32[($7 + 124 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
     break label$3
    }
    if (!(HEAP32[($7 + 120 | 0) >> 2] | 0)) {
     break label$1
    }
   }
   label$4 : {
    if ($2) {
     break label$4
    }
    if (!((HEAPU8[($7 + 17 | 0) >> 0] | 0) & 4 | 0)) {
     break label$1
    }
   }
   $5 = 0;
  }
  $6 = 0;
  label$5 : {
   if (!(HEAPU8[($4 + 3528 | 0) >> 0] | 0)) {
    break label$5
   }
   label$6 : {
    label$7 : {
     if (Math_fround(HEAPF32[($4 + 14128 | 0) >> 2]) == Math_fround(0.0)) {
      break label$7
     }
     $6 = 0;
     break label$6;
    }
    $6 = !(HEAPU8[($4 + 17808 | 0) >> 0] | 0);
   }
   $8 = Math_fround(HEAPF32[($4 + 48 | 0) >> 2]);
   $56 = $8;
   $8 = Math_fround($8 * Math_fround(1.7000000476837158));
   $8 = $8 < Math_fround(0.0) ? $56 : $8;
   $3 = Math_fround(HEAPF32[($4 + 14208 | 0) >> 2]) >= Math_fround($8 * $8);
   if ($5 | ($3 ^ 1 | 0) | 0) {
    break label$5
   }
   ImGui__DockContextQueueUndockNode_28ImGuiContext__2c_20ImGuiDockNode__29($4 | 0, $1 | 0);
   return;
  }
  label$8 : {
   if (($5 & ($3 | $6 | 0) | 0 | 0) != (1 | 0)) {
    break label$8
   }
   if ((HEAP32[($4 + 16128 | 0) >> 2] | 0 | 0) == ($0 | 0)) {
    break label$8
   }
   ImGui__StartMouseMovingWindow_28ImGuiWindow__29($0 | 0);
  }
 }
 
 function ImGui__DockContextQueueUndockNode_28ImGuiContext__2c_20ImGuiDockNode__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $4 = 0, $3 = 0, $5 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   $2 = HEAP32[($0 + 23352 | 0) >> 2] | 0;
   if (($2 | 0) != (HEAP32[($0 + 23356 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $3 = $2 + 1 | 0;
   label$2 : {
    label$3 : {
     if ($2) {
      break label$3
     }
     $4 = 8;
     break label$2;
    }
    $4 = (($2 | 0) / (2 | 0) | 0) + $2 | 0;
   }
   $3 = ($4 | 0) > ($3 | 0) ? $4 : $3;
   if (($2 | 0) >= ($3 | 0)) {
    break label$1
   }
   $2 = Math_imul($3, 36);
   label$4 : {
    $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$4) {
     break label$4
    }
    $4 = $4 + 184 | 0;
    HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
   }
   $2 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($2, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$5 : {
    $4 = HEAP32[($0 + 23360 | 0) >> 2] | 0;
    if (!$4) {
     break label$5
    }
    __memcpy($2 | 0, $4 | 0, Math_imul(HEAP32[($0 + 23352 | 0) >> 2] | 0, 36) | 0) | 0;
    label$6 : {
     $4 = HEAP32[($0 + 23360 | 0) >> 2] | 0;
     if (!$4) {
      break label$6
     }
     $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$5) {
      break label$6
     }
     $5 = $5 + 184 | 0;
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($4, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($0 + 23356 | 0) >> 2] = $3;
   HEAP32[($0 + 23360 | 0) >> 2] = $2;
   $2 = HEAP32[($0 + 23352 | 0) >> 2] | 0;
  }
  $2 = (HEAP32[($0 + 23360 | 0) >> 2] | 0) + Math_imul($2, 36) | 0;
  i64toi32_i32$0 = 0;
  HEAP32[($2 + 4 | 0) >> 2] = 0;
  HEAP32[($2 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[$2 >> 2] = 2;
  HEAP32[($2 + 32 | 0) >> 2] = $1;
  HEAP32[($2 + 28 | 0) >> 2] = 0;
  HEAP8[($2 + 24 | 0) >> 0] = 0;
  i64toi32_i32$0 = 1056964608;
  HEAP32[($2 + 16 | 0) >> 2] = -1;
  HEAP32[($2 + 20 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($2 + 12 | 0) >> 2] = 0;
  HEAP32[($0 + 23352 | 0) >> 2] = (HEAP32[($0 + 23352 | 0) >> 2] | 0) + 1 | 0;
 }
 
 function ImGui__IsMouseClicked_28int_2c_20bool_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = Math_fround(0), $2 = 0, $3 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0;
  $2 = 0;
  label$1 : {
   $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   if (!(HEAPU8[(($3 + $0 | 0) + 3528 | 0) >> 0] | 0)) {
    break label$1
   }
   $4 = Math_fround(HEAPF32[(($3 + ($0 << 2 | 0) | 0) + 14128 | 0) >> 2]);
   if ($4 < Math_fround(0.0)) {
    break label$1
   }
   label$2 : {
    if ($4 == Math_fround(0.0)) {
     break label$2
    }
    if (!$1) {
     break label$1
    }
    $5 = Math_fround(HEAPF32[($3 + 52 | 0) >> 2]);
    if (!($4 > $5)) {
     break label$1
    }
    $6 = Math_fround($4 - Math_fround(HEAPF32[($3 + 24 | 0) >> 2]));
    if ($6 >= $4) {
     break label$1
    }
    label$3 : {
     $7 = Math_fround(HEAPF32[($3 + 56 | 0) >> 2]);
     if (!($7 <= Math_fround(0.0))) {
      break label$3
     }
     if (!($4 >= $5)) {
      break label$1
     }
     if ($6 < $5) {
      break label$2
     }
     break label$1;
    }
    $1 = -1;
    $8 = -1;
    label$4 : {
     if ($6 < $5) {
      break label$4
     }
     label$5 : {
      $6 = Math_fround(Math_fround($6 - $5) / $7);
      if (!(Math_fround(Math_abs($6)) < Math_fround(2147483648.0))) {
       break label$5
      }
      $8 = ~~$6;
      break label$4;
     }
     $8 = -2147483648;
    }
    label$6 : {
     if ($4 < $5) {
      break label$6
     }
     label$7 : {
      $4 = Math_fround(Math_fround($4 - $5) / $7);
      if (!(Math_fround(Math_abs($4)) < Math_fround(2147483648.0))) {
       break label$7
      }
      $1 = ~~$4;
      break label$6;
     }
     $1 = -2147483648;
    }
    if (($1 | 0) <= ($8 | 0)) {
     break label$1
    }
   }
   label$8 : {
    if (($0 + 129 | 0) >>> 0 < 140 >>> 0) {
     break label$8
    }
    $2 = 1;
    label$9 : {
     if (($0 | 0) > (7550 | 0)) {
      break label$9
     }
     if (($0 | 0) == (1407 | 0)) {
      break label$8
     }
     if (($0 | 0) == (3455 | 0)) {
      break label$8
     }
     break label$1;
    }
    if (($0 | 0) == (7551 | 0)) {
     break label$8
    }
    if (($0 | 0) == (32127 | 0)) {
     break label$8
    }
    if (($0 | 0) != (15743 | 0)) {
     break label$1
    }
   }
   label$10 : {
    label$11 : {
     $1 = $0 + 641 | 0;
     if (!($1 & 63488 | 0)) {
      break label$11
     }
     label$12 : {
      label$13 : {
       if (($0 | 0) > (7550 | 0)) {
        break label$13
       }
       if (($0 | 0) == (1407 | 0)) {
        break label$12
       }
       $2 = 648;
       if (($0 | 0) == (3455 | 0)) {
        break label$10
       }
       break label$11;
      }
      label$14 : {
       if (($0 | 0) == (32127 | 0)) {
        break label$14
       }
       label$15 : {
        if (($0 | 0) == (15743 | 0)) {
         break label$15
        }
        if (($0 | 0) != (7551 | 0)) {
         break label$11
        }
        $2 = 649;
        break label$10;
       }
       $2 = 650;
       break label$10;
      }
      $2 = 651;
      break label$10;
     }
     $2 = HEAPU8[($3 + 105 | 0) >> 0] | 0 ? 651 : 648;
     break label$10;
    }
    $2 = $1;
   }
   $2 = !(HEAPU8[((Math_imul($2, 12) + $3 | 0) + 10116 | 0) >> 0] | 0);
  }
  return $2 | 0;
 }
 
 function ImGui__IsMouseDragging_28int_2c_20float_29($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $3 = 0, $2 = 0;
  $2 = 0;
  label$1 : {
   $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   if (!(HEAPU8[(($3 + $0 | 0) + 3528 | 0) >> 0] | 0)) {
    break label$1
   }
   label$2 : {
    if (!($1 < Math_fround(0.0))) {
     break label$2
    }
    $1 = Math_fround(HEAPF32[($3 + 48 | 0) >> 2]);
   }
   $2 = Math_fround(HEAPF32[(($3 + ($0 << 2 | 0) | 0) + 14208 | 0) >> 2]) >= Math_fround($1 * $1);
  }
  return $2 | 0;
 }
 
 function ImGui__UpdateMouseMovingWindowNewFrame_28_29() {
  var $1 = 0, $2 = 0, $0 = 0, $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0);
  label$1 : {
   $0 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $1 = HEAP32[($0 + 16128 | 0) >> 2] | 0;
   if (!$1) {
    break label$1
   }
   $2 = HEAP32[($0 + 16192 | 0) >> 2] | 0;
   HEAP32[($0 + 16196 | 0) >> 2] = $2;
   label$2 : {
    if (($2 | 0) != (HEAP32[($0 + 16232 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    HEAP8[($0 + 16236 | 0) >> 0] = 1;
   }
   label$3 : {
    label$4 : {
     $1 = HEAP32[($1 + 836 | 0) >> 2] | 0;
     if (HEAPU8[($1 + 220 | 0) >> 0] | 0) {
      break label$4
     }
     if (HEAPU8[($1 + 219 | 0) >> 0] | 0) {
      break label$4
     }
     $2 = 1;
     break label$3;
    }
    $2 = !(HEAP32[($1 + 44 | 0) >> 2] | 0);
   }
   label$5 : {
    if (!(HEAPU8[($0 + 3528 | 0) >> 0] | 0)) {
     break label$5
    }
    $3 = Math_fround(HEAPF32[($0 + 3520 | 0) >> 2]);
    $4 = Math_fround(HEAPF32[($0 + 3524 | 0) >> 2]);
    if ($3 >= Math_fround(-256.0e3) ^ 1 | 0 | ($4 >= Math_fround(-256.0e3) ^ 1 | 0) | 0 | $2 | 0) {
     break label$5
    }
    $4 = Math_fround($4 - Math_fround(HEAPF32[($0 + 16216 | 0) >> 2]));
    label$6 : {
     label$7 : {
      $5 = Math_fround(HEAPF32[($1 + 64 | 0) >> 2]);
      $3 = Math_fround($3 - Math_fround(HEAPF32[($0 + 16212 | 0) >> 2]));
      if ($5 != $3) {
       break label$7
      }
      if (Math_fround(HEAPF32[($1 + 68 | 0) >> 2]) == $4) {
       break label$6
      }
     }
     label$8 : {
      $2 = HEAP32[($1 + 260 | 0) >> 2] | 0;
      if (!($2 & 1 | 0)) {
       break label$8
      }
      HEAP32[($1 + 264 | 0) >> 2] = 2139095039;
      HEAP32[($1 + 268 | 0) >> 2] = 2139095039;
      HEAP32[($1 + 260 | 0) >> 2] = $2 & -15 | 0;
      $2 = $1 + 68 | 0;
      $6 = Math_fround(HEAPF32[$2 >> 2]);
      label$9 : {
       label$10 : {
        if (!(Math_fround(Math_abs($4)) < Math_fround(2147483648.0))) {
         break label$10
        }
        $7 = ~~$4;
        break label$9;
       }
       $7 = -2147483648;
      }
      $8 = Math_fround($7 | 0);
      HEAPF32[$2 >> 2] = $8;
      label$11 : {
       label$12 : {
        if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
         break label$12
        }
        $2 = ~~$3;
        break label$11;
       }
       $2 = -2147483648;
      }
      $9 = Math_fround($2 | 0);
      HEAPF32[($1 + 64 | 0) >> 2] = $9;
      $6 = Math_fround($8 - $6);
      label$13 : {
       $5 = Math_fround($9 - $5);
       if ($5 != Math_fround(0.0)) {
        break label$13
       }
       if ($6 == Math_fround(0.0)) {
        break label$8
       }
      }
      label$14 : {
       if ((HEAPU8[($1 + 9 | 0) >> 0] | 0) & 1 | 0) {
        break label$14
       }
       if (!(Math_fround(HEAPF32[($0 + 23384 | 0) >> 2]) <= Math_fround(0.0))) {
        break label$14
       }
       HEAPF32[($0 + 23384 | 0) >> 2] = Math_fround(HEAPF32[($0 + 28 | 0) >> 2]);
      }
      HEAPF32[($1 + 292 | 0) >> 2] = Math_fround($5 + Math_fround(HEAPF32[($1 + 292 | 0) >> 2]));
      $2 = $1 + 296 | 0;
      HEAPF32[$2 >> 2] = Math_fround($6 + Math_fround(HEAPF32[$2 >> 2]));
      $2 = $1 + 316 | 0;
      HEAPF32[$2 >> 2] = Math_fround($5 + Math_fround(HEAPF32[$2 >> 2]));
      $2 = $1 + 320 | 0;
      HEAPF32[$2 >> 2] = Math_fround($6 + Math_fround(HEAPF32[$2 >> 2]));
      $2 = $1 + 324 | 0;
      HEAPF32[$2 >> 2] = Math_fround($5 + Math_fround(HEAPF32[$2 >> 2]));
      $2 = $1 + 328 | 0;
      HEAPF32[$2 >> 2] = Math_fround($6 + Math_fround(HEAPF32[$2 >> 2]));
      $2 = $1 + 308 | 0;
      HEAPF32[$2 >> 2] = Math_fround($5 + Math_fround(HEAPF32[$2 >> 2]));
      $2 = $1 + 312 | 0;
      HEAPF32[$2 >> 2] = Math_fround($6 + Math_fround(HEAPF32[$2 >> 2]));
     }
     if (!(HEAPU8[($1 + 218 | 0) >> 0] | 0)) {
      break label$6
     }
     $2 = HEAP32[($1 + 44 | 0) >> 2] | 0;
     HEAPF32[($2 + 8 | 0) >> 2] = $3;
     HEAPF32[($2 + 12 | 0) >> 2] = $4;
     $1 = HEAP32[($1 + 44 | 0) >> 2] | 0;
     $3 = Math_fround(HEAPF32[($1 + 224 | 0) >> 2]);
     HEAPF32[($1 + 24 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($1 + 8 | 0) >> 2]) + $3);
     $4 = Math_fround(HEAPF32[($1 + 228 | 0) >> 2]);
     HEAPF32[($1 + 28 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($1 + 12 | 0) >> 2]) + $4);
     $3 = Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 16 | 0) >> 2]) - $3) + Math_fround(HEAPF32[($1 + 232 | 0) >> 2]));
     HEAPF32[($1 + 32 | 0) >> 2] = $3 <= Math_fround(0.0) ? Math_fround(0.0) : $3;
     $3 = Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 20 | 0) >> 2]) - $4) + Math_fround(HEAPF32[($1 + 236 | 0) >> 2]));
     HEAPF32[($1 + 36 | 0) >> 2] = $3 <= Math_fround(0.0) ? Math_fround(0.0) : $3;
    }
    ImGui__FocusWindow_28ImGuiWindow__29(HEAP32[($0 + 16128 | 0) >> 2] | 0 | 0);
    return;
   }
   label$15 : {
    if ($2) {
     break label$15
    }
    $2 = $0;
    label$16 : {
     if (!((HEAPU8[($2 + 15477 | 0) >> 0] | 0) & 4 | 0)) {
      break label$16
     }
     ImGui__UpdateTryMergeWindowIntoHostViewport_28ImGuiWindow__2c_20ImGuiViewportP__29($1 | 0, HEAP32[($0 + 18596 | 0) >> 2] | 0 | 0) | 0;
     $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    }
    label$17 : {
     label$18 : {
      if (!(HEAPU8[($2 + 19040 | 0) >> 0] | 0)) {
       break label$18
      }
      if (!(HEAP32[($2 + 19144 | 0) >> 2] | 0)) {
       break label$18
      }
      $1 = HEAP32[($1 + 44 | 0) >> 2] | 0;
      break label$17;
     }
     $1 = HEAP32[($1 + 44 | 0) >> 2] | 0;
     HEAP32[($0 + 18596 | 0) >> 2] = $1;
    }
    HEAP32[($1 + 4 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) & -129 | 0;
   }
   HEAP32[($0 + 16128 | 0) >> 2] = 0;
   ImGui__SetActiveID_28unsigned_20int_2c_20ImGuiWindow__29(0 | 0, 0 | 0);
   return;
  }
  label$19 : {
   $1 = HEAP32[($0 + 16220 | 0) >> 2] | 0;
   if (!$1) {
    break label$19
   }
   $1 = HEAP32[($1 + 156 | 0) >> 2] | 0;
   if (($1 | 0) != (HEAP32[($0 + 16192 | 0) >> 2] | 0 | 0)) {
    break label$19
   }
   HEAP32[($0 + 16196 | 0) >> 2] = $1;
   label$20 : {
    if ((HEAP32[($0 + 16232 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
     break label$20
    }
    HEAP8[($0 + 16236 | 0) >> 0] = 1;
   }
   if (HEAPU8[($0 + 3528 | 0) >> 0] | 0) {
    break label$19
   }
   ImGui__SetActiveID_28unsigned_20int_2c_20ImGuiWindow__29(0 | 0, 0 | 0);
  }
 }
 
 function ImGui__UpdateTryMergeWindowIntoHostViewport_28ImGuiWindow__2c_20ImGuiViewportP__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $11 = 0, $10 = 0, $12 = 0, $3 = 0, $5 = Math_fround(0), $4 = Math_fround(0), $6 = Math_fround(0), i64toi32_i32$0 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $13 = 0;
  $2 = 0;
  label$1 : {
   $3 = HEAP32[($0 + 44 | 0) >> 2] | 0;
   if (($3 | 0) == ($1 | 0)) {
    break label$1
   }
   if (((HEAP32[($1 + 4 | 0) >> 2] | 0) & 5120 | 0 | 0) != (4096 | 0)) {
    break label$1
   }
   $4 = Math_fround(HEAPF32[($0 + 64 | 0) >> 2]);
   $5 = Math_fround(HEAPF32[($1 + 8 | 0) >> 2]);
   if (!($4 >= $5)) {
    break label$1
   }
   $6 = Math_fround(HEAPF32[($0 + 68 | 0) >> 2]);
   $7 = Math_fround(HEAPF32[($1 + 12 | 0) >> 2]);
   if (!($6 >= $7)) {
    break label$1
   }
   $8 = Math_fround($4 + Math_fround(HEAPF32[($0 + 72 | 0) >> 2]));
   if (!($8 <= Math_fround($5 + Math_fround(HEAPF32[($1 + 16 | 0) >> 2])))) {
    break label$1
   }
   $9 = Math_fround($6 + Math_fround(HEAPF32[($0 + 76 | 0) >> 2]));
   if (!($9 <= Math_fround($7 + Math_fround(HEAPF32[($1 + 20 | 0) >> 2])))) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $10 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (HEAPU8[($10 + 100 | 0) >> 0] | 0) {
      break label$3
     }
     if (!((HEAPU8[($0 + 25 | 0) >> 0] | 0) & 8 | 0)) {
      break label$2
     }
    }
    if (!((HEAPU8[($10 + 15477 | 0) >> 0] | 0) & 4 | 0)) {
     break label$2
    }
    if ((HEAPU8[($0 + 905 | 0) >> 0] | 0) & 1 | 0) {
     break label$2
    }
    $11 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    if ($11 & 318767104 | 0) {
     break label$2
    }
    if (($11 & 201326592 | 0 | 0) != (67108864 | 0)) {
     break label$1
    }
   }
   label$4 : {
    label$5 : {
     label$6 : {
      $12 = HEAP32[($10 + 16044 | 0) >> 2] | 0;
      if (($12 | 0) < (1 | 0)) {
       break label$6
      }
      $13 = HEAP32[($10 + 16052 | 0) >> 2] | 0;
      $11 = 0;
      label$7 : {
       label$8 : while (1) {
        $2 = HEAP32[($13 + ($11 << 2 | 0) | 0) >> 2] | 0;
        if (($2 | 0) == ($0 | 0)) {
         break label$7
        }
        label$9 : {
         if (!(HEAPU8[($2 + 220 | 0) >> 0] | 0)) {
          break label$9
         }
         if (!(HEAPU8[($2 + 218 | 0) >> 0] | 0)) {
          break label$9
         }
         if ((HEAPU8[($2 + 11 | 0) >> 0] | 0) & 1 | 0) {
          break label$9
         }
         $2 = HEAP32[($2 + 44 | 0) >> 2] | 0;
         $5 = Math_fround(HEAPF32[($2 + 12 | 0) >> 2]);
         if (!($6 < Math_fround($5 + Math_fround(HEAPF32[($2 + 20 | 0) >> 2])))) {
          break label$9
         }
         if (!($9 > $5)) {
          break label$9
         }
         $5 = Math_fround(HEAPF32[($2 + 8 | 0) >> 2]);
         if (!($4 < Math_fround($5 + Math_fround(HEAPF32[($2 + 16 | 0) >> 2])))) {
          break label$9
         }
         if (!($8 > $5)) {
          break label$9
         }
         return 0 | 0;
        }
        $11 = $11 + 1 | 0;
        if (($11 | 0) != ($12 | 0)) {
         continue label$8
        }
        break label$8;
       };
      }
      if (!(HEAPU8[($0 + 218 | 0) >> 0] | 0)) {
       break label$4
      }
      if (($12 | 0) < (1 | 0)) {
       break label$5
      }
      $11 = 0;
      label$10 : while (1) {
       label$11 : {
        $2 = HEAP32[((HEAP32[($10 + 16052 | 0) >> 2] | 0) + ($11 << 2 | 0) | 0) >> 2] | 0;
        if ((HEAP32[($2 + 44 | 0) >> 2] | 0 | 0) != ($3 | 0)) {
         break label$11
        }
        label$12 : {
         if (!(HEAPU8[($2 + 218 | 0) >> 0] | 0)) {
          break label$12
         }
         if ((HEAP32[($3 + 108 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
          break label$12
         }
         i64toi32_i32$0 = 0;
         HEAP32[($3 + 16 | 0) >> 2] = 0;
         HEAP32[($3 + 20 | 0) >> 2] = i64toi32_i32$0;
         $12 = HEAP32[($10 + 16044 | 0) >> 2] | 0;
        }
        HEAP32[($2 + 44 | 0) >> 2] = $1;
        HEAP32[($2 + 48 | 0) >> 2] = HEAP32[$1 >> 2] | 0;
        HEAP8[($2 + 218 | 0) >> 0] = (HEAP32[($1 + 108 | 0) >> 2] | 0 | 0) == ($2 | 0);
       }
       $11 = $11 + 1 | 0;
       if (($11 | 0) < ($12 | 0)) {
        continue label$10
       }
       break label$10;
      };
      if (!(HEAPU8[($0 + 218 | 0) >> 0] | 0)) {
       break label$4
      }
      break label$5;
     }
     if (!(HEAPU8[($0 + 218 | 0) >> 0] | 0)) {
      break label$4
     }
    }
    $2 = HEAP32[($0 + 44 | 0) >> 2] | 0;
    if ((HEAP32[($2 + 108 | 0) >> 2] | 0 | 0) != ($0 | 0)) {
     break label$4
    }
    i64toi32_i32$0 = 0;
    HEAP32[($2 + 16 | 0) >> 2] = 0;
    HEAP32[($2 + 20 | 0) >> 2] = i64toi32_i32$0;
    $12 = HEAP32[($10 + 16044 | 0) >> 2] | 0;
   }
   HEAP32[($0 + 44 | 0) >> 2] = $1;
   HEAP32[($0 + 48 | 0) >> 2] = HEAP32[$1 >> 2] | 0;
   HEAP8[($0 + 218 | 0) >> 0] = (HEAP32[($1 + 108 | 0) >> 2] | 0 | 0) == ($0 | 0);
   $2 = 1;
   $3 = HEAP32[($10 + 16052 | 0) >> 2] | 0;
   $1 = HEAP32[((($12 << 2 | 0) + $3 | 0) + -4 | 0) >> 2] | 0;
   if (($1 | 0) == ($0 | 0)) {
    break label$1
   }
   if ((HEAP32[($1 + 836 | 0) >> 2] | 0 | 0) == ($0 | 0)) {
    break label$1
   }
   if (($12 | 0) < (2 | 0)) {
    break label$1
   }
   $1 = $12 + -2 | 0;
   label$13 : while (1) {
    label$14 : {
     $11 = $3 + ($1 << 2 | 0) | 0;
     if ((HEAP32[$11 >> 2] | 0 | 0) != ($0 | 0)) {
      break label$14
     }
     memmove($11 | 0, (($1 << 2 | 0) + $3 | 0) + 4 | 0 | 0, ($12 + ($1 ^ -1 | 0) | 0) << 2 | 0 | 0) | 0;
     HEAP32[((((HEAP32[($10 + 16044 | 0) >> 2] | 0) << 2 | 0) + (HEAP32[($10 + 16052 | 0) >> 2] | 0) | 0) + -4 | 0) >> 2] = $0;
     return 1 | 0;
    }
    $11 = ($1 | 0) > (0 | 0);
    $1 = $1 + -1 | 0;
    if ($11) {
     continue label$13
    }
    break label$13;
   };
  }
  return $2 | 0;
 }
 
 function ImGui__SetWindowPos_28ImGuiWindow__2c_20ImVec2_20const__2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = Math_fround(0), $4 = Math_fround(0), $3 = 0, $6 = Math_fround(0), $8 = Math_fround(0), $7 = Math_fround(0);
  $3 = HEAP32[($0 + 260 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!$2) {
     break label$2
    }
    if (!($3 << 24 >> 24 & $2 | 0)) {
     break label$1
    }
   }
   HEAP32[($0 + 264 | 0) >> 2] = 2139095039;
   HEAP32[($0 + 268 | 0) >> 2] = 2139095039;
   HEAP32[($0 + 260 | 0) >> 2] = $3 & -15 | 0;
   $2 = $0 + 68 | 0;
   $4 = Math_fround(HEAPF32[$2 >> 2]);
   label$3 : {
    label$4 : {
     $5 = Math_fround(HEAPF32[($1 + 4 | 0) >> 2]);
     if (!(Math_fround(Math_abs($5)) < Math_fround(2147483648.0))) {
      break label$4
     }
     $3 = ~~$5;
     break label$3;
    }
    $3 = -2147483648;
   }
   $5 = Math_fround(HEAPF32[$1 >> 2]);
   $6 = Math_fround($3 | 0);
   HEAPF32[$2 >> 2] = $6;
   $7 = Math_fround(HEAPF32[($0 + 64 | 0) >> 2]);
   label$5 : {
    label$6 : {
     if (!(Math_fround(Math_abs($5)) < Math_fround(2147483648.0))) {
      break label$6
     }
     $2 = ~~$5;
     break label$5;
    }
    $2 = -2147483648;
   }
   $8 = Math_fround($2 | 0);
   HEAPF32[($0 + 64 | 0) >> 2] = $8;
   $5 = Math_fround($6 - $4);
   label$7 : {
    $4 = Math_fround($8 - $7);
    if ($4 != Math_fround(0.0)) {
     break label$7
    }
    if ($5 == Math_fround(0.0)) {
     break label$1
    }
   }
   label$8 : {
    if ((HEAPU8[($0 + 9 | 0) >> 0] | 0) & 1 | 0) {
     break label$8
    }
    $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!(Math_fround(HEAPF32[($2 + 23384 | 0) >> 2]) <= Math_fround(0.0))) {
     break label$8
    }
    HEAPF32[($2 + 23384 | 0) >> 2] = Math_fround(HEAPF32[($2 + 28 | 0) >> 2]);
   }
   HEAPF32[($0 + 292 | 0) >> 2] = Math_fround($4 + Math_fround(HEAPF32[($0 + 292 | 0) >> 2]));
   $2 = $0 + 296 | 0;
   HEAPF32[$2 >> 2] = Math_fround($5 + Math_fround(HEAPF32[$2 >> 2]));
   $2 = $0 + 316 | 0;
   HEAPF32[$2 >> 2] = Math_fround($4 + Math_fround(HEAPF32[$2 >> 2]));
   $2 = $0 + 320 | 0;
   HEAPF32[$2 >> 2] = Math_fround($5 + Math_fround(HEAPF32[$2 >> 2]));
   $2 = $0 + 324 | 0;
   HEAPF32[$2 >> 2] = Math_fround($4 + Math_fround(HEAPF32[$2 >> 2]));
   $2 = $0 + 328 | 0;
   HEAPF32[$2 >> 2] = Math_fround($5 + Math_fround(HEAPF32[$2 >> 2]));
   $2 = $0 + 308 | 0;
   HEAPF32[$2 >> 2] = Math_fround($4 + Math_fround(HEAPF32[$2 >> 2]));
   $0 = $0 + 312 | 0;
   HEAPF32[$0 >> 2] = Math_fround($5 + Math_fround(HEAPF32[$0 >> 2]));
  }
 }
 
 function ImGui__UpdateMouseMovingWindowEndFrame_28_29() {
  var $1 = 0, $2 = 0, $5 = 0, $6 = 0, $3 = 0, $0 = 0, $4 = 0, $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0);
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  label$1 : {
   $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   if (HEAP32[($1 + 16192 | 0) >> 2] | 0) {
    break label$1
   }
   if (HEAP32[($1 + 16172 | 0) >> 2] | 0) {
    break label$1
   }
   label$2 : {
    $2 = HEAP32[($1 + 18648 | 0) >> 2] | 0;
    if (!$2) {
     break label$2
    }
    if (HEAPU8[($2 + 225 | 0) >> 0] | 0) {
     break label$1
    }
   }
   label$3 : {
    if (!(HEAPU8[($1 + 14080 | 0) >> 0] | 0)) {
     break label$3
    }
    label$4 : {
     $3 = HEAP32[($1 + 16120 | 0) >> 2] | 0;
     if (!$3) {
      break label$4
     }
     $4 = HEAP32[($3 + 828 | 0) >> 2] | 0;
     if (!$4) {
      break label$4
     }
     label$5 : {
      if (!((HEAPU8[($4 + 11 | 0) >> 0] | 0) & 4 | 0)) {
       break label$5
      }
      $5 = HEAP32[($1 + 18548 | 0) >> 2] | 0;
      if (($5 | 0) < (1 | 0)) {
       break label$3
      }
      $6 = HEAP32[($4 + 244 | 0) >> 2] | 0;
      $7 = HEAP32[($1 + 18556 | 0) >> 2] | 0;
      $2 = 0;
      label$6 : while (1) {
       if ((HEAP32[($7 + Math_imul($2, 40) | 0) >> 2] | 0 | 0) == ($6 | 0)) {
        break label$5
       }
       $2 = $2 + 1 | 0;
       if (($2 | 0) == ($5 | 0)) {
        break label$3
       }
       continue label$6;
      };
     }
     ImGui__StartMouseMovingWindow_28ImGuiWindow__29($3 | 0);
     label$7 : {
      if (!(HEAPU8[($1 + 111 | 0) >> 0] | 0)) {
       break label$7
      }
      label$8 : {
       if (!((HEAPU8[($4 + 8 | 0) >> 0] | 0) & 1 | 0)) {
        break label$8
       }
       if (!((HEAPU8[($4 + 905 | 0) >> 0] | 0) & 1 | 0)) {
        break label$7
       }
      }
      ImGuiWindow__TitleBarRect_28_29_20const($0 | 0, $4 | 0);
      label$9 : {
       $8 = Math_fround(HEAPF32[($1 + 14e3 | 0) >> 2]);
       if (!($8 >= Math_fround(HEAPF32[$0 >> 2]))) {
        break label$9
       }
       $9 = Math_fround(HEAPF32[($1 + 14004 | 0) >> 2]);
       if (!($9 >= Math_fround(HEAPF32[($0 + 4 | 0) >> 2]))) {
        break label$9
       }
       if (!($8 < Math_fround(HEAPF32[($0 + 8 | 0) >> 2]))) {
        break label$9
       }
       if ($9 < Math_fround(HEAPF32[($0 + 12 | 0) >> 2])) {
        break label$7
       }
      }
      HEAP32[($1 + 16128 | 0) >> 2] = 0;
     }
     if (!(HEAPU8[($1 + 16181 | 0) >> 0] | 0)) {
      break label$3
     }
     HEAP32[($1 + 16128 | 0) >> 2] = 0;
     break label$3;
    }
    if (!$2) {
     break label$3
    }
    if (ImGui__GetTopMostPopupModal_28_29() | 0) {
     break label$3
    }
    ImGui__FocusWindow_28ImGuiWindow__29(0 | 0);
   }
   if (!(HEAPU8[($1 + 14081 | 0) >> 0] | 0)) {
    break label$1
   }
   label$10 : {
    label$11 : {
     $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     $2 = HEAP32[($3 + 18548 | 0) >> 2] | 0;
     if (($2 | 0) < (1 | 0)) {
      break label$11
     }
     $7 = HEAP32[($3 + 18556 | 0) >> 2] | 0;
     label$12 : while (1) {
      label$13 : {
       $6 = $2 + -1 | 0;
       $5 = HEAP32[(($7 + Math_imul($6, 40) | 0) + 4 | 0) >> 2] | 0;
       if (!$5) {
        break label$13
       }
       if ((HEAPU8[($5 + 11 | 0) >> 0] | 0) & 8 | 0) {
        break label$10
       }
      }
      $5 = $2 >>> 0 > 1 >>> 0;
      $2 = $6;
      if ($5) {
       continue label$12
      }
      break label$12;
     };
    }
    $5 = 0;
   }
   label$14 : {
    $6 = HEAP32[($1 + 16120 | 0) >> 2] | 0;
    if (!$6) {
     break label$14
    }
    label$15 : {
     if (!$5) {
      break label$15
     }
     label$16 : {
      $2 = ((HEAP32[($6 + 8 | 0) >> 2] | 0) >>> 25 | 0) & 1 | 0;
      $1 = ((HEAP32[($5 + 8 | 0) >> 2] | 0) >>> 25 | 0) & 1 | 0;
      if (($2 | 0) != ($1 | 0)) {
       break label$16
      }
      $2 = HEAP32[($3 + 16044 | 0) >> 2] | 0;
      label$17 : while (1) {
       if (($2 | 0) < (1 | 0)) {
        break label$14
       }
       $2 = $2 + -1 | 0;
       $1 = HEAP32[((HEAP32[($3 + 16052 | 0) >> 2] | 0) + ($2 << 2 | 0) | 0) >> 2] | 0;
       if (($1 | 0) == ($6 | 0)) {
        break label$15
       }
       if (($1 | 0) != ($5 | 0)) {
        continue label$17
       }
       break label$14;
      };
     }
     if ($2 >>> 0 <= $1 >>> 0) {
      break label$14
     }
    }
    $5 = $6;
   }
   ImGui__ClosePopupsOverWindow_28ImGuiWindow__2c_20bool_29($5 | 0, 1 | 0);
  }
  __stack_pointer = $0 + 16 | 0;
 }
 
 function ImGuiWindow__TitleBarRect_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = Math_fround(0), i64toi32_i32$0 = 0, $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), i64toi32_i32$1 = 0, $57 = 0;
  $2 = Math_fround(HEAPF32[($1 + 68 | 0) >> 2]);
  $3 = Math_fround(HEAPF32[($1 + 80 | 0) >> 2]);
  $4 = Math_fround(HEAPF32[($1 + 64 | 0) >> 2]);
  $5 = Math_fround(0.0);
  label$1 : {
   if ((HEAPU8[($1 + 8 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   $6 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $5 = Math_fround(Math_fround(Math_fround(HEAPF32[($6 + 15492 | 0) >> 2]) * Math_fround(HEAPF32[($1 + 660 | 0) >> 2])) * Math_fround(HEAPF32[($1 + 664 | 0) >> 2]));
   label$2 : {
    $7 = HEAP32[($1 + 820 | 0) >> 2] | 0;
    if (!$7) {
     break label$2
    }
    $5 = Math_fround($5 * Math_fround(HEAPF32[($7 + 660 | 0) >> 2]));
   }
   $8 = Math_fround(HEAPF32[($6 + 14460 | 0) >> 2]);
   $5 = Math_fround(Math_fround($8 + $8) + $5);
  }
  i64toi32_i32$0 = HEAP32[($1 + 64 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1 + 68 | 0) >> 2] | 0;
  HEAPF32[($0 + 12 | 0) >> 2] = Math_fround($2 + $5);
  HEAPF32[($0 + 8 | 0) >> 2] = Math_fround($4 + $3);
  $57 = i64toi32_i32$0;
  i64toi32_i32$0 = $0;
  HEAP32[$0 >> 2] = $57;
  HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function ImGui__GetTopMostPopupModal_28_29() {
  var $3 = 0, $0 = 0, $1 = 0, $2 = 0;
  label$1 : {
   label$2 : {
    $0 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    $1 = HEAP32[($0 + 18548 | 0) >> 2] | 0;
    if (($1 | 0) < (1 | 0)) {
     break label$2
    }
    $2 = HEAP32[($0 + 18556 | 0) >> 2] | 0;
    label$3 : while (1) {
     label$4 : {
      $0 = $1 + -1 | 0;
      $3 = HEAP32[(($2 + Math_imul($0, 40) | 0) + 4 | 0) >> 2] | 0;
      if (!$3) {
       break label$4
      }
      if ((HEAPU8[($3 + 11 | 0) >> 0] | 0) & 8 | 0) {
       break label$1
      }
     }
     $3 = $1 >>> 0 > 1 >>> 0;
     $1 = $0;
     if ($3) {
      continue label$3
     }
     break label$3;
    };
   }
   $3 = 0;
  }
  return $3 | 0;
 }
 
 function ImGui__IsPopupOpen_28unsigned_20int_2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = $1 & 256 | 0;
  $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $4 = HEAP32[($3 + 18548 | 0) >> 2] | 0;
  label$1 : {
   if (!($1 & 128 | 0)) {
    break label$1
   }
   label$2 : {
    if (!$2) {
     break label$2
    }
    return ($4 | 0) > (0 | 0) | 0;
   }
   return ($4 | 0) > (HEAP32[($3 + 18560 | 0) >> 2] | 0 | 0) | 0;
  }
  label$3 : {
   label$4 : {
    if (!$2) {
     break label$4
    }
    label$5 : {
     if (($4 | 0) >= (1 | 0)) {
      break label$5
     }
     return 0 | 0;
    }
    $3 = HEAP32[($3 + 18556 | 0) >> 2] | 0;
    $1 = 0;
    label$6 : while (1) {
     $2 = (HEAP32[($3 + Math_imul($1, 40) | 0) >> 2] | 0 | 0) == ($0 | 0);
     if ($2) {
      break label$3
     }
     $1 = $1 + 1 | 0;
     if (($1 | 0) != ($4 | 0)) {
      continue label$6
     }
     break label$3;
    };
   }
   $2 = 0;
   $1 = HEAP32[($3 + 18560 | 0) >> 2] | 0;
   if (($4 | 0) <= ($1 | 0)) {
    break label$3
   }
   $2 = (HEAP32[((HEAP32[($3 + 18556 | 0) >> 2] | 0) + Math_imul($1, 40) | 0) >> 2] | 0 | 0) == ($0 | 0);
  }
  return $2 | 0;
 }
 
 function ImGui__UpdateHoveredWindowAndCaptureFlags_28_29() {
  var $2 = 0, $1 = 0, $5 = 0, $8 = 0, $12 = 0, $11 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $9 = 0, $4 = Math_fround(0), $3 = Math_fround(0), $0 = 0, $16 = Math_fround(0), $15 = Math_fround(0), i64toi32_i32$0 = 0, $10 = 0;
  $0 = 0;
  $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $2 = $1 + 14500 | 0;
  $3 = Math_fround(HEAPF32[$2 >> 2]);
  HEAPF32[($1 + 16112 | 0) >> 2] = $3 >= Math_fround(4.0) ? $3 : Math_fround(4.0);
  $4 = Math_fround(HEAPF32[($1 + 14496 | 0) >> 2]);
  HEAPF32[($1 + 16108 | 0) >> 2] = $4 >= Math_fround(4.0) ? $4 : Math_fround(4.0);
  label$1 : {
   label$2 : {
    $5 = HEAP32[($1 + 16128 | 0) >> 2] | 0;
    if ($5) {
     break label$2
    }
    $6 = (wasm2js_scratch_store_f32($3), wasm2js_scratch_load_i32(2));
    $7 = (wasm2js_scratch_store_f32($4), wasm2js_scratch_load_i32(2));
    $8 = 0;
    break label$1;
   }
   $0 = HEAP32[($5 + 44 | 0) >> 2] | 0;
   HEAP32[($5 + 44 | 0) >> 2] = HEAP32[($1 + 18596 | 0) >> 2] | 0;
   $8 = (HEAPU8[($5 + 9 | 0) >> 0] | 0) & 2 | 0 ? 0 : $5;
   $6 = HEAP32[$2 >> 2] | 0;
   $7 = HEAP32[($1 + 14496 | 0) >> 2] | 0;
  }
  $9 = $7;
  $10 = $6;
  label$3 : {
   if (!(HEAPU8[($1 + 110 | 0) >> 0] | 0)) {
    break label$3
   }
   $10 = HEAP32[($1 + 16112 | 0) >> 2] | 0;
   $9 = HEAP32[($1 + 16108 | 0) >> 2] | 0;
  }
  label$4 : {
   label$5 : {
    label$6 : {
     $11 = HEAP32[($1 + 16044 | 0) >> 2] | 0;
     if (($11 | 0) < (1 | 0)) {
      break label$6
     }
     $12 = HEAP32[($1 + 16052 | 0) >> 2] | 0;
     label$7 : while (1) {
      label$8 : {
       $13 = $11;
       $11 = $13 + -1 | 0;
       $2 = HEAP32[($12 + ($11 << 2 | 0) | 0) >> 2] | 0;
       if (!(HEAPU8[($2 + 219 | 0) >> 0] | 0)) {
        break label$8
       }
       if (HEAPU8[($2 + 226 | 0) >> 0] | 0) {
        break label$8
       }
       $14 = HEAP32[($2 + 8 | 0) >> 2] | 0;
       if ($14 & 512 | 0) {
        break label$8
       }
       if ((HEAP32[($2 + 44 | 0) >> 2] | 0 | 0) != (HEAP32[($1 + 18596 | 0) >> 2] | 0 | 0)) {
        break label$8
       }
       $3 = Math_fround(HEAPF32[($1 + 3520 | 0) >> 2]);
       $14 = $14 & 16777282 | 0;
       $4 = (wasm2js_scratch_store_i32(2, $14 ? $7 : $9), wasm2js_scratch_load_f32());
       if (!($3 >= Math_fround(Math_fround(HEAPF32[($2 + 500 | 0) >> 2]) - $4))) {
        break label$8
       }
       $15 = Math_fround(HEAPF32[($1 + 3524 | 0) >> 2]);
       $16 = (wasm2js_scratch_store_i32(2, $14 ? $6 : $10), wasm2js_scratch_load_f32());
       if (!($15 >= Math_fround(Math_fround(HEAPF32[($2 + 504 | 0) >> 2]) - $16))) {
        break label$8
       }
       if (!($3 < Math_fround(Math_fround(HEAPF32[($2 + 508 | 0) >> 2]) + $4))) {
        break label$8
       }
       if (!($15 < Math_fround(Math_fround(HEAPF32[($2 + 512 | 0) >> 2]) + $16))) {
        break label$8
       }
       label$9 : {
        $14 = HEAPU16[($2 + 612 | 0) >> 1] | 0;
        if (!$14) {
         break label$9
        }
        $4 = Math_fround(Math_fround(HEAPF32[($2 + 64 | 0) >> 2]) + Math_fround(HEAP16[($2 + 616 | 0) >> 1] | 0 | 0));
        if (!($3 >= $4)) {
         break label$9
        }
        $16 = Math_fround(Math_fround(HEAPF32[($2 + 68 | 0) >> 2]) + Math_fround(HEAP16[($2 + 618 | 0) >> 1] | 0 | 0));
        if (!($15 >= $16)) {
         break label$9
        }
        if (!($3 < Math_fround($4 + Math_fround($14 << 16 >> 16 | 0)))) {
         break label$9
        }
        if ($15 < Math_fround($16 + Math_fround(HEAP16[($2 + 614 | 0) >> 1] | 0 | 0))) {
         break label$8
        }
       }
       $8 = $8 ? $8 : $2;
       label$10 : {
        if ($5) {
         break label$10
        }
        HEAP32[($1 + 16124 | 0) >> 2] = $2;
        HEAP32[($1 + 16120 | 0) >> 2] = $8;
        break label$4;
       }
       if ((HEAP32[($2 + 836 | 0) >> 2] | 0 | 0) == (HEAP32[($5 + 836 | 0) >> 2] | 0 | 0)) {
        break label$8
       }
       HEAP32[($1 + 16124 | 0) >> 2] = $2;
       HEAP32[($1 + 16120 | 0) >> 2] = $8;
       break label$5;
      }
      if ($13 >>> 0 > 1 >>> 0) {
       continue label$7
      }
      break label$7;
     };
    }
    HEAP32[($1 + 16124 | 0) >> 2] = 0;
    HEAP32[($1 + 16120 | 0) >> 2] = $8;
    if (!$5) {
     break label$4
    }
   }
   HEAP32[($5 + 44 | 0) >> 2] = $0;
  }
  $11 = 0;
  $12 = 0;
  label$11 : {
   $14 = HEAP32[($1 + 18548 | 0) >> 2] | 0;
   if (($14 | 0) < (1 | 0)) {
    break label$11
   }
   $12 = HEAP32[($1 + 18556 | 0) >> 2] | 0;
   $2 = $14;
   label$12 : {
    label$13 : while (1) {
     label$14 : {
      $11 = $2 + -1 | 0;
      $13 = HEAP32[(($12 + Math_imul($11, 40) | 0) + 4 | 0) >> 2] | 0;
      if (!$13) {
       break label$14
      }
      if ((HEAPU8[($13 + 11 | 0) >> 0] | 0) & 8 | 0) {
       break label$12
      }
     }
     $13 = $2 >>> 0 < 2 >>> 0;
     $2 = $11;
     if (!$13) {
      continue label$13
     }
     break label$13;
    };
    $11 = 0;
    $12 = 0;
    break label$11;
   }
   $11 = 1;
   label$15 : {
    if ($8) {
     break label$15
    }
    $12 = 0;
    break label$11;
   }
   label$16 : {
    $2 = HEAP32[($8 + 828 | 0) >> 2] | 0;
    if ((HEAP32[($2 + 828 | 0) >> 2] | 0 | 0) != ($13 | 0)) {
     break label$16
    }
    $12 = 0;
    break label$11;
   }
   label$17 : while (1) {
    $12 = ($2 | 0) != ($13 | 0);
    if (($2 | 0) == ($13 | 0)) {
     break label$11
    }
    $2 = HEAP32[($2 + 824 | 0) >> 2] | 0;
    if ($2) {
     continue label$17
    }
    break label$17;
   };
  }
  label$18 : {
   if (!(HEAPU8[($1 + 14080 | 0) >> 0] | 0)) {
    break label$18
   }
   $2 = ($8 | 0) != (0 | 0);
   HEAP8[($1 + 14120 | 0) >> 0] = $11 | $2 | 0;
   HEAP8[($1 + 14115 | 0) >> 0] = $2 | ($14 | 0) > (0 | 0) | 0;
  }
  $13 = HEAPU8[($1 + 3528 | 0) >> 0] | 0;
  label$19 : {
   if (!(HEAPU8[($1 + 14081 | 0) >> 0] | 0)) {
    break label$19
   }
   $2 = ($8 | 0) != (0 | 0);
   HEAP8[($1 + 14121 | 0) >> 0] = $11 | $2 | 0;
   HEAP8[($1 + 14116 | 0) >> 0] = $2 | ($14 | 0) > (0 | 0) | 0;
  }
  $2 = $13 ? 0 : -1;
  label$20 : {
   $5 = HEAPU8[($1 + 3529 | 0) >> 0] | 0;
   if (!$5) {
    break label$20
   }
   label$21 : {
    if (!$13) {
     break label$21
    }
    if (!(+HEAPF64[($1 + 14048 | 0) >> 3] < +HEAPF64[(($1 + ($2 << 3 | 0) | 0) + 14040 | 0) >> 3])) {
     break label$20
    }
   }
   $2 = 1;
  }
  label$22 : {
   if (!(HEAPU8[($1 + 14082 | 0) >> 0] | 0)) {
    break label$22
   }
   $7 = ($8 | 0) != (0 | 0);
   HEAP8[($1 + 14122 | 0) >> 0] = $11 | $7 | 0;
   HEAP8[($1 + 14117 | 0) >> 0] = $7 | ($14 | 0) > (0 | 0) | 0;
  }
  label$23 : {
   $7 = HEAPU8[($1 + 3530 | 0) >> 0] | 0;
   if (!$7) {
    break label$23
   }
   label$24 : {
    if (($2 | 0) == (-1 | 0)) {
     break label$24
    }
    if (!(+HEAPF64[($1 + 14056 | 0) >> 3] < +HEAPF64[(($1 + ($2 << 3 | 0) | 0) + 14040 | 0) >> 3])) {
     break label$23
    }
   }
   $2 = 2;
  }
  label$25 : {
   if (!(HEAPU8[($1 + 14083 | 0) >> 0] | 0)) {
    break label$25
   }
   $9 = ($8 | 0) != (0 | 0);
   HEAP8[($1 + 14123 | 0) >> 0] = $11 | $9 | 0;
   HEAP8[($1 + 14118 | 0) >> 0] = $9 | ($14 | 0) > (0 | 0) | 0;
  }
  label$26 : {
   $9 = HEAPU8[($1 + 3531 | 0) >> 0] | 0;
   if (!$9) {
    break label$26
   }
   label$27 : {
    if (($2 | 0) == (-1 | 0)) {
     break label$27
    }
    if (!(+HEAPF64[($1 + 14064 | 0) >> 3] < +HEAPF64[(($1 + ($2 << 3 | 0) | 0) + 14040 | 0) >> 3])) {
     break label$26
    }
   }
   $2 = 3;
  }
  $5 = $5 | $13 | 0;
  $13 = HEAP32[($1 + 8 | 0) >> 2] | 0;
  label$28 : {
   if (!(HEAPU8[($1 + 14084 | 0) >> 0] | 0)) {
    break label$28
   }
   $6 = ($8 | 0) != (0 | 0);
   HEAP8[($1 + 14124 | 0) >> 0] = $11 | $6 | 0;
   HEAP8[($1 + 14119 | 0) >> 0] = $6 | ($14 | 0) > (0 | 0) | 0;
  }
  $5 = $7 | $5 | 0;
  $6 = $13 & 16 | 0;
  label$29 : {
   label$30 : {
    label$31 : {
     $7 = HEAPU8[($1 + 3532 | 0) >> 0] | 0;
     if (!$7) {
      break label$31
     }
     label$32 : {
      label$33 : {
       if (($2 | 0) == (-1 | 0)) {
        break label$33
       }
       if (!(+HEAPF64[($1 + 14072 | 0) >> 3] < +HEAPF64[(($1 + ($2 << 3 | 0) | 0) + 14040 | 0) >> 3])) {
        break label$32
       }
      }
      $2 = 4;
     }
     $12 = $12 | ($6 | 0) != (0 | 0) | 0;
     break label$30;
    }
    $12 = $12 | ($6 | 0) != (0 | 0) | 0;
    if (($2 | 0) != (-1 | 0)) {
     break label$30
    }
    $6 = 1;
    $0 = 1;
    break label$29;
   }
   $2 = $1 + $2 | 0;
   $0 = (HEAPU8[($2 + 14120 | 0) >> 0] | 0 | 0) != (0 | 0);
   $6 = (HEAPU8[($2 + 14115 | 0) >> 0] | 0 | 0) != (0 | 0);
  }
  $2 = $9 | $5 | 0;
  label$34 : {
   label$35 : {
    if (HEAPU8[($1 + 19040 | 0) >> 0] | 0) {
     break label$35
    }
    $9 = 1;
    break label$34;
   }
   $9 = !((HEAPU8[($1 + 19044 | 0) >> 0] | 0) & 16 | 0);
  }
  $5 = $7 | $2 | 0;
  label$36 : {
   label$37 : {
    label$38 : {
     label$39 : {
      label$40 : {
       label$41 : {
        label$42 : {
         label$43 : {
          if ($6) {
           break label$43
          }
          if (!($9 | $12 | 0)) {
           break label$42
          }
          i64toi32_i32$0 = 0;
          HEAP32[($1 + 16120 | 0) >> 2] = 0;
          HEAP32[($1 + 16124 | 0) >> 2] = i64toi32_i32$0;
          $2 = HEAP32[($1 + 23884 | 0) >> 2] | 0;
          if (($2 | 0) != (-1 | 0)) {
           break label$37
          }
          $12 = 0;
          break label$39;
         }
         if (!$12) {
          break label$41
         }
         i64toi32_i32$0 = 0;
         HEAP32[($1 + 16120 | 0) >> 2] = 0;
         HEAP32[($1 + 16124 | 0) >> 2] = i64toi32_i32$0;
         $2 = HEAP32[($1 + 23884 | 0) >> 2] | 0;
         if (($2 | 0) != (-1 | 0)) {
          break label$37
         }
         $8 = 0;
         break label$40;
        }
        $12 = $8;
        $2 = HEAP32[($1 + 23884 | 0) >> 2] | 0;
        if (($2 | 0) == (-1 | 0)) {
         break label$39
        }
        break label$37;
       }
       $2 = HEAP32[($1 + 23884 | 0) >> 2] | 0;
       if (($2 | 0) != (-1 | 0)) {
        break label$37
       }
      }
      $2 = 1;
      if ($8) {
       break label$38
      }
      $12 = 0;
      if ($5) {
       break label$38
      }
     }
     $2 = ($14 | 0) > (0 | 0);
     $8 = $12;
    }
    HEAP8[($1 + 156 | 0) >> 0] = $2;
    HEAP8[($1 + 13988 | 0) >> 0] = $0 & ($8 | $5 | 0 | 0) != (0 | 0) | 0 | $11 | 0;
    break label$36;
   }
   $2 = ($2 | 0) != (0 | 0);
   HEAP8[($1 + 156 | 0) >> 0] = $2;
   HEAP8[($1 + 13988 | 0) >> 0] = $2;
  }
  label$44 : {
   label$45 : {
    $2 = HEAP32[($1 + 23888 | 0) >> 2] | 0;
    if (($2 | 0) == (-1 | 0)) {
     break label$45
    }
    $2 = ($2 | 0) != (0 | 0);
    break label$44;
   }
   $2 = $11 | (HEAP32[($1 + 16192 | 0) >> 2] | 0 | 0) != (0 | 0) | 0;
  }
  HEAP8[($1 + 158 | 0) >> 0] = ((HEAP32[($1 + 23892 | 0) >> 2] | 0) + -1 | 0) >>> 0 < -2 >>> 0;
  HEAP8[($1 + 157 | 0) >> 0] = HEAPU8[($1 + 161 | 0) >> 0] | 0 ? (($13 & 9 | 0 | 0) == (1 | 0) ? 1 : $2) : $2;
 }
 
 function ImGui__NewFrame_28_29() {
  var $5 = 0, $3 = 0, $4 = 0, $2 = 0, $7 = Math_fround(0), $6 = 0, $1 = 0, $8 = Math_fround(0), $22 = Math_fround(0), i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $23 = Math_fround(0), $15 = 0, $24 = Math_fround(0), $18 = 0, i64toi32_i32$1 = 0, $19 = 0, $9 = 0, $0 = 0, $25 = Math_fround(0), $16 = 0, $12 = 0, $10 = 0, $11 = 0, $13 = 0, $20 = 0, $26 = Math_fround(0), $17 = 0, $27 = Math_fround(0), i64toi32_i32$4 = 0, $20$hi = 0, $28 = Math_fround(0), i64toi32_i32$3 = 0, $14 = 0, $21 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $29 = 0.0, $417 = 0, $425 = 0, $428 = 0, $438 = 0, $21$hi = 0, $676 = 0, $680 = Math_fround(0), $701 = 0, $706 = Math_fround(0), $791 = 0, $795 = 0, $799 = 0, $803 = 0, $1972 = 0, $2140 = 0, $2144 = 0, $2216 = 0, $2247 = 0, $2258 = 0, $2294 = 0, $2486 = 0, $2490 = 0, $3027 = 0, $4530 = 0, $4535 = 0, $5484 = Math_fround(0), $5691 = 0, $5697 = 0, $5730 = Math_fround(0), $5739 = Math_fround(0), $5771 = 0, $5835 = 0;
  $0 = __stack_pointer - 144 | 0;
  __stack_pointer = $0;
  label$1 : {
   $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $2 = HEAP32[($1 + 23436 | 0) >> 2] | 0;
   if (($2 | 0) < (1 | 0)) {
    break label$1
   }
   $3 = $2;
   label$2 : while (1) {
    label$3 : {
     $4 = HEAP32[($1 + 23444 | 0) >> 2] | 0;
     $5 = $3 + -1 | 0;
     $6 = $4 + Math_imul($5, 20) | 0;
     if ((HEAP32[($6 + 4 | 0) >> 2] | 0 | 0) != (7 | 0)) {
      break label$3
     }
     memmove($6 | 0, $4 + Math_imul($3, 20) | 0 | 0, Math_imul($2 - $3 | 0, 20) | 0) | 0;
     $2 = (HEAP32[($1 + 23436 | 0) >> 2] | 0) + -1 | 0;
     HEAP32[($1 + 23436 | 0) >> 2] = $2;
    }
    $4 = $3 >>> 0 > 1 >>> 0;
    $3 = $5;
    if ($4) {
     continue label$2
    }
    break label$2;
   };
   if (($2 | 0) < (1 | 0)) {
    break label$1
   }
   $3 = 0;
   label$4 : while (1) {
    label$5 : {
     $5 = (HEAP32[($1 + 23444 | 0) >> 2] | 0) + Math_imul($3, 20) | 0;
     if (HEAP32[($5 + 4 | 0) >> 2] | 0) {
      break label$5
     }
     FUNCTION_TABLE[HEAP32[($5 + 12 | 0) >> 2] | 0 | 0]($1, $5);
     $2 = HEAP32[($1 + 23436 | 0) >> 2] | 0;
    }
    $3 = $3 + 1 | 0;
    if (($3 | 0) < ($2 | 0)) {
     continue label$4
    }
    break label$4;
   };
  }
  HEAP32[($1 + 15480 | 0) >> 2] = HEAP32[($1 + 15476 | 0) >> 2] | 0;
  label$6 : {
   $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   if (!(Math_fround(HEAPF32[($3 + 24 | 0) >> 2]) <= Math_fround(0.0))) {
    break label$6
   }
   if ((HEAP32[($3 + 16016 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$6
   }
   HEAP32[($3 + 24 | 0) >> 2] = 925353388;
  }
  label$7 : {
   if (!(HEAPU8[($3 + 110 | 0) >> 0] | 0)) {
    break label$7
   }
   if ((HEAPU8[($3 + 12 | 0) >> 0] | 0) & 2 | 0) {
    break label$7
   }
   HEAP8[($3 + 110 | 0) >> 0] = 0;
  }
  label$8 : {
   $5 = HEAP32[($3 + 8 | 0) >> 2] | 0;
   if (!($5 & 1024 | 0)) {
    break label$8
   }
   if (((HEAP32[($3 + 12 | 0) >> 2] | 0) & 5120 | 0 | 0) == (5120 | 0)) {
    break label$8
   }
   HEAP32[($3 + 8 | 0) >> 2] = $5 & -1025 | 0;
  }
  HEAP32[($1 + 15476 | 0) >> 2] = HEAP32[($1 + 8 | 0) >> 2] | 0;
  label$9 : {
   if (HEAPU8[($3 + 23380 | 0) >> 0] | 0) {
    break label$9
   }
   label$10 : {
    $5 = HEAP32[($3 + 32 | 0) >> 2] | 0;
    if (!$5) {
     break label$10
    }
    HEAP32[($0 + 136 | 0) >> 2] = 0;
    $5 = ImFileLoadToMemory_28char_20const__2c_20char_20const__2c_20unsigned_20long__2c_20int_29($5 | 0, 67332 | 0, $0 + 136 | 0 | 0, 0 | 0) | 0;
    if (!$5) {
     break label$10
    }
    label$11 : {
     $4 = HEAP32[($0 + 136 | 0) >> 2] | 0;
     if (!$4) {
      break label$11
     }
     ImGui__LoadIniSettingsFromMemory_28char_20const__2c_20unsigned_20long_29($5 | 0, $4 | 0);
    }
    label$12 : {
     $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$4) {
      break label$12
     }
     $4 = $4 + 184 | 0;
     HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($5, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP8[($3 + 23380 | 0) >> 0] = 1;
  }
  label$13 : {
   $7 = Math_fround(HEAPF32[($3 + 23384 | 0) >> 2]);
   if (!($7 > Math_fround(0.0))) {
    break label$13
   }
   $7 = Math_fround($7 - Math_fround(HEAPF32[($3 + 24 | 0) >> 2]));
   HEAPF32[($3 + 23384 | 0) >> 2] = $7;
   if (!($7 <= Math_fround(0.0))) {
    break label$13
   }
   label$14 : {
    label$15 : {
     $5 = HEAP32[($3 + 32 | 0) >> 2] | 0;
     if (!$5) {
      break label$15
     }
     HEAP32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 23384 | 0) >> 2] = 0;
     HEAP32[($0 + 136 | 0) >> 2] = 0;
     $4 = ImGui__SaveIniSettingsToMemory_28unsigned_20long__29($0 + 136 | 0 | 0) | 0;
     $5 = fopen($5 | 0, 65704 | 0) | 0;
     if (!$5) {
      break label$14
     }
     fwrite($4 | 0, 1 | 0, HEAP32[($0 + 136 | 0) >> 2] | 0 | 0, $5 | 0) | 0;
     fclose($5 | 0) | 0;
     break label$14;
    }
    HEAP8[($3 + 160 | 0) >> 0] = 1;
   }
   HEAP32[($3 + 23384 | 0) >> 2] = 0;
  }
  HEAP8[($1 + 16032 | 0) >> 0] = 1;
  HEAP16[($1 + 23274 | 0) >> 1] = 0;
  HEAP32[($1 + 16104 | 0) >> 2] = 0;
  HEAP32[($1 + 16016 | 0) >> 2] = (HEAP32[($1 + 16016 | 0) >> 2] | 0) + 1 | 0;
  $7 = Math_fround(HEAPF32[($1 + 24 | 0) >> 2]);
  HEAPF64[($1 + 16008 | 0) >> 3] = +HEAPF64[($1 + 16008 | 0) >> 3] + +$7;
  label$16 : {
   if ((HEAP32[($1 + 23292 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$16
   }
   label$17 : {
    $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$3) {
     break label$17
    }
    $3 = $3 + 184 | 0;
    HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1 | 0;
   }
   $3 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](0, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$18 : {
    $5 = HEAP32[($1 + 23296 | 0) >> 2] | 0;
    if (!$5) {
     break label$18
    }
    __memcpy($3 | 0, $5 | 0, (HEAP32[($1 + 23288 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
    label$19 : {
     $5 = HEAP32[($1 + 23296 | 0) >> 2] | 0;
     if (!$5) {
      break label$19
     }
     $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$4) {
      break label$19
     }
     $4 = $4 + 184 | 0;
     HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($5, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($1 + 23292 | 0) >> 2] = 0;
   HEAP32[($1 + 23296 | 0) >> 2] = $3;
   $7 = Math_fround(HEAPF32[($1 + 24 | 0) >> 2]);
  }
  HEAP32[($1 + 23288 | 0) >> 2] = 0;
  $3 = HEAP32[($1 + 23872 | 0) >> 2] | 0;
  $5 = ($1 + ($3 << 2 | 0) | 0) + 23632 | 0;
  HEAPF32[($1 + 23880 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($1 + 23880 | 0) >> 2]) + Math_fround($7 - Math_fround(HEAPF32[$5 >> 2])));
  HEAPF32[$5 >> 2] = $7;
  HEAP32[($1 + 23872 | 0) >> 2] = ($3 + 1 | 0 | 0) % (60 | 0) | 0;
  $3 = HEAP32[($1 + 23876 | 0) >> 2] | 0;
  $3 = (($3 | 0) < (59 | 0) ? $3 : 59) + 1 | 0;
  HEAP32[($1 + 23876 | 0) >> 2] = $3;
  $7 = Math_fround(3402823466385288598117041.0e14);
  label$20 : {
   $8 = Math_fround(HEAPF32[($1 + 23880 | 0) >> 2]);
   if (!($8 > Math_fround(0.0))) {
    break label$20
   }
   $7 = Math_fround(Math_fround(1.0) / Math_fround($8 / Math_fround($3 | 0)));
  }
  HEAPF32[($1 + 164 | 0) >> 2] = $7;
  label$21 : {
   if ((HEAP32[($1 + 14388 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$21
   }
   label$22 : {
    $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$3) {
     break label$22
    }
    $3 = $3 + 184 | 0;
    HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1 | 0;
   }
   $3 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](0, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$23 : {
    $5 = HEAP32[($1 + 14392 | 0) >> 2] | 0;
    if (!$5) {
     break label$23
    }
    __memcpy($3 | 0, $5 | 0, Math_imul(HEAP32[($1 + 14384 | 0) >> 2] | 0, 24) | 0) | 0;
    label$24 : {
     $5 = HEAP32[($1 + 14392 | 0) >> 2] | 0;
     if (!$5) {
      break label$24
     }
     $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$4) {
      break label$24
     }
     $4 = $4 + 184 | 0;
     HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($5, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($1 + 14388 | 0) >> 2] = 0;
   HEAP32[($1 + 14392 | 0) >> 2] = $3;
  }
  HEAP32[($1 + 14384 | 0) >> 2] = 0;
  ImGui__UpdateInputEvents_28bool_29(HEAPU8[($1 + 106 | 0) >> 0] | 0 | 0);
  label$25 : {
   label$26 : {
    $9 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    $10 = (HEAP32[($9 + 15476 | 0) >> 2] | 0) & 1024 | 0;
    if (!$10) {
     break label$26
    }
    $11 = $9 + 18576 | 0;
    label$27 : {
     $2 = HEAP32[($9 + 18576 | 0) >> 2] | 0;
     if (($2 | 0) < (1 | 0)) {
      break label$27
     }
     $5 = HEAP32[($9 + 14292 | 0) >> 2] | 0;
     if (!$5) {
      break label$27
     }
     $3 = 0;
     label$28 : while (1) {
      label$29 : {
       if (!$5) {
        break label$29
       }
       $4 = HEAP32[((HEAP32[($9 + 18584 | 0) >> 2] | 0) + ($3 << 2 | 0) | 0) >> 2] | 0;
       if (!(HEAPU8[($4 + 68 | 0) >> 0] | 0)) {
        break label$29
       }
       $5 = FUNCTION_TABLE[$5 | 0]($4) | 0;
       HEAP32[($4 + 4 | 0) >> 2] = (HEAP32[($4 + 4 | 0) >> 2] | 0) & -1025 | 0 | ($5 ? 1024 : 0) | 0;
       $2 = HEAP32[$11 >> 2] | 0;
      }
      $3 = $3 + 1 | 0;
      if (($3 | 0) >= ($2 | 0)) {
       break label$27
      }
      $5 = HEAP32[($9 + 14292 | 0) >> 2] | 0;
      continue label$28;
     };
    }
    $12 = $9 + 18584 | 0;
    $13 = HEAP32[(HEAP32[$12 >> 2] | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[($9 + 14272 | 0) >> 2] | 0 | 0]($0 + 136 | 0, $13);
    i64toi32_i32$2 = $9 + 16 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $417 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[(i64toi32_i32$0 + 128 | 0) >> 2] = $417;
    HEAP32[(i64toi32_i32$0 + 132 | 0) >> 2] = i64toi32_i32$1;
    if (!((HEAPU8[($13 + 5 | 0) >> 0] | 0) & 4 | 0)) {
     break label$25
    }
    i64toi32_i32$2 = $13;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
    $425 = i64toi32_i32$1;
    i64toi32_i32$1 = $0;
    HEAP32[(i64toi32_i32$1 + 136 | 0) >> 2] = $425;
    HEAP32[(i64toi32_i32$1 + 140 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $428 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[(i64toi32_i32$0 + 128 | 0) >> 2] = $428;
    HEAP32[(i64toi32_i32$0 + 132 | 0) >> 2] = i64toi32_i32$1;
    break label$25;
   }
   $12 = $9 + 18584 | 0;
   $13 = HEAP32[(HEAP32[$12 >> 2] | 0) >> 2] | 0;
   i64toi32_i32$0 = $0;
   i64toi32_i32$1 = 0;
   HEAP32[(i64toi32_i32$0 + 136 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 140 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $9 + 16 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $438 = i64toi32_i32$1;
   i64toi32_i32$1 = $0;
   HEAP32[(i64toi32_i32$1 + 128 | 0) >> 2] = $438;
   HEAP32[(i64toi32_i32$1 + 132 | 0) >> 2] = i64toi32_i32$0;
   $11 = $9 + 18576 | 0;
  }
  ImGui__AddUpdateViewport_28ImGuiWindow__2c_20unsigned_20int_2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20int_29(0 | 0, 286331153 | 0, $0 + 136 | 0 | 0, $0 + 128 | 0 | 0, 4100 | 0) | 0;
  HEAP32[($9 + 18596 | 0) >> 2] = 0;
  i64toi32_i32$1 = $9;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 18588 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 18592 | 0) >> 2] = i64toi32_i32$0;
  label$30 : {
   if ((HEAP32[(i64toi32_i32$1 + 18576 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$30
   }
   $14 = $9 + 9 | 0;
   $15 = 0;
   label$31 : while (1) {
    $3 = HEAP32[((HEAP32[$12 >> 2] | 0) + ($15 << 2 | 0) | 0) >> 2] | 0;
    HEAP32[($3 + 72 | 0) >> 2] = $15;
    label$32 : {
     label$33 : {
      if (($15 | 0) < (1 | 0)) {
       break label$33
      }
      if ((HEAP32[($3 + 76 | 0) >> 2] | 0 | 0) >= ((HEAP32[($9 + 16016 | 0) >> 2] | 0) + -2 | 0 | 0)) {
       break label$33
      }
      label$34 : {
       $16 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
       $2 = HEAP32[($16 + 16044 | 0) >> 2] | 0;
       if (($2 | 0) < (1 | 0)) {
        break label$34
       }
       $17 = $2 & 1 | 0;
       $4 = HEAP32[($16 + 16052 | 0) >> 2] | 0;
       $5 = 0;
       label$35 : {
        if (($2 | 0) == (1 | 0)) {
         break label$35
        }
        $18 = $2 & -2 | 0;
        $5 = 0;
        $2 = 0;
        label$36 : while (1) {
         label$37 : {
          $6 = $5 << 2 | 0;
          $19 = HEAP32[($4 + $6 | 0) >> 2] | 0;
          if ((HEAP32[($19 + 44 | 0) >> 2] | 0 | 0) != ($3 | 0)) {
           break label$37
          }
          HEAP8[($19 + 218 | 0) >> 0] = 0;
          HEAP32[($19 + 44 | 0) >> 2] = 0;
         }
         label$38 : {
          $6 = HEAP32[($4 + ($6 | 4 | 0) | 0) >> 2] | 0;
          if ((HEAP32[($6 + 44 | 0) >> 2] | 0 | 0) != ($3 | 0)) {
           break label$38
          }
          HEAP8[($6 + 218 | 0) >> 0] = 0;
          HEAP32[($6 + 44 | 0) >> 2] = 0;
         }
         $5 = $5 + 2 | 0;
         $2 = $2 + 2 | 0;
         if (($2 | 0) != ($18 | 0)) {
          continue label$36
         }
         break label$36;
        };
       }
       if (!$17) {
        break label$34
       }
       $5 = HEAP32[($4 + ($5 << 2 | 0) | 0) >> 2] | 0;
       if ((HEAP32[($5 + 44 | 0) >> 2] | 0 | 0) != ($3 | 0)) {
        break label$34
       }
       HEAP8[($5 + 218 | 0) >> 0] = 0;
       HEAP32[($5 + 44 | 0) >> 2] = 0;
      }
      label$39 : {
       if ((HEAP32[($16 + 18600 | 0) >> 2] | 0 | 0) != ($3 | 0)) {
        break label$39
       }
       HEAP32[($16 + 18600 | 0) >> 2] = 0;
      }
      label$40 : {
       if (!((HEAPU8[($16 + 23536 | 0) >> 0] | 0) & 128 | 0)) {
        break label$40
       }
       $5 = HEAP32[$3 >> 2] | 0;
       label$41 : {
        label$42 : {
         $4 = HEAP32[($3 + 108 | 0) >> 2] | 0;
         if ($4) {
          break label$42
         }
         $4 = 67354;
         break label$41;
        }
        $4 = HEAP32[$4 >> 2] | 0;
       }
       HEAP32[($0 + 116 | 0) >> 2] = $4;
       HEAP32[($0 + 112 | 0) >> 2] = $5;
       ImGui__DebugLog_28char_20const__2c_20____29(70220 | 0, $0 + 112 | 0 | 0);
      }
      label$43 : {
       if (!(HEAPU8[($3 + 68 | 0) >> 0] | 0)) {
        break label$43
       }
       label$44 : {
        $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
        $4 = HEAP32[($5 + 14332 | 0) >> 2] | 0;
        if (!$4) {
         break label$44
        }
        FUNCTION_TABLE[$4 | 0]($3);
       }
       label$45 : {
        $5 = HEAP32[($5 + 14260 | 0) >> 2] | 0;
        if (!$5) {
         break label$45
        }
        FUNCTION_TABLE[$5 | 0]($3);
       }
       if ((HEAP32[$3 >> 2] | 0 | 0) == (286331153 | 0)) {
        break label$43
       }
       HEAP8[($3 + 68 | 0) >> 0] = 0;
      }
      HEAP32[($3 + 60 | 0) >> 2] = 0;
      i64toi32_i32$1 = $3;
      i64toi32_i32$0 = 0;
      HEAP32[($3 + 52 | 0) >> 2] = 0;
      HEAP32[($3 + 56 | 0) >> 2] = i64toi32_i32$0;
      HEAP8[($3 + 71 | 0) >> 0] = 0;
      $68 = 0;
      HEAP8[($3 + 69 | 0) >> 0] = $68;
      HEAP8[($3 + 70 | 0) >> 0] = $68 >>> 8 | 0;
      $5 = HEAP32[($3 + 72 | 0) >> 2] | 0;
      $4 = (HEAP32[($16 + 18584 | 0) >> 2] | 0) + ($5 << 2 | 0) | 0;
      memmove($4 | 0, $4 + 4 | 0 | 0, ((HEAP32[($16 + 18576 | 0) >> 2] | 0) + ($5 ^ -1 | 0) | 0) << 2 | 0 | 0) | 0;
      HEAP32[($16 + 18576 | 0) >> 2] = (HEAP32[($16 + 18576 | 0) >> 2] | 0) + -1 | 0;
      $3 = ImGuiViewportP___ImGuiViewportP_28_29($3 | 0) | 0;
      label$46 : {
       $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
       if (!$5) {
        break label$46
       }
       $5 = $5 + 184 | 0;
       HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1 | 0;
      }
      FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($3, HEAP32[(0 + 92728 | 0) >> 2] | 0);
      $15 = $15 + -1 | 0;
      break label$32;
     }
     $5 = HEAPU8[($3 + 68 | 0) >> 0] | 0;
     label$47 : {
      if (!$10) {
       break label$47
      }
      if (!($5 & 255 | 0)) {
       break label$47
      }
      if ((HEAP32[($3 + 4 | 0) >> 2] | 0) & 1024 | 0) {
       break label$47
      }
      label$48 : {
       if (!(HEAPU8[($3 + 69 | 0) >> 0] | 0)) {
        break label$48
       }
       FUNCTION_TABLE[HEAP32[($9 + 14272 | 0) >> 2] | 0 | 0]($0 + 120 | 0, $3);
       i64toi32_i32$2 = $0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 120 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 124 | 0) >> 2] | 0;
       $20 = i64toi32_i32$0;
       $20$hi = i64toi32_i32$1;
       i64toi32_i32$0 = $3;
       HEAP32[($3 + 8 | 0) >> 2] = $20;
       HEAP32[($3 + 12 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$0 = $3;
       HEAP32[($3 + 200 | 0) >> 2] = $20;
       HEAP32[($3 + 204 | 0) >> 2] = i64toi32_i32$1;
      }
      if (!(HEAPU8[($3 + 70 | 0) >> 0] | 0)) {
       break label$47
      }
      FUNCTION_TABLE[HEAP32[($9 + 14280 | 0) >> 2] | 0 | 0]($0 + 120 | 0, $3);
      i64toi32_i32$2 = $0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 120 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 124 | 0) >> 2] | 0;
      $20 = i64toi32_i32$1;
      $20$hi = i64toi32_i32$0;
      i64toi32_i32$1 = $3;
      HEAP32[($3 + 16 | 0) >> 2] = $20;
      HEAP32[($3 + 20 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $3;
      HEAP32[($3 + 208 | 0) >> 2] = $20;
      HEAP32[($3 + 212 | 0) >> 2] = i64toi32_i32$0;
     }
     ImGui__UpdateViewportPlatformMonitor_28ImGuiViewportP__29($3 | 0);
     HEAP32[($3 + 96 | 0) >> 2] = 1065353216;
     i64toi32_i32$2 = $3;
     i64toi32_i32$0 = HEAP32[($3 + 240 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($3 + 244 | 0) >> 2] | 0;
     $21 = i64toi32_i32$0;
     $21$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $3;
     HEAP32[($3 + 224 | 0) >> 2] = $21;
     HEAP32[($3 + 228 | 0) >> 2] = i64toi32_i32$1;
     $4 = $3 + 248 | 0;
     i64toi32_i32$2 = $4;
     i64toi32_i32$1 = HEAP32[$4 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($4 + 4 | 0) >> 2] | 0;
     $20 = i64toi32_i32$1;
     $20$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $4;
     i64toi32_i32$0 = 0;
     HEAP32[$4 >> 2] = 0;
     HEAP32[($4 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $3;
     i64toi32_i32$0 = 0;
     HEAP32[($3 + 240 | 0) >> 2] = 0;
     HEAP32[($3 + 244 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = $20$hi;
     i64toi32_i32$1 = $3;
     HEAP32[($3 + 232 | 0) >> 2] = $20;
     HEAP32[($3 + 236 | 0) >> 2] = i64toi32_i32$0;
     $4 = $3 + 8 | 0;
     $22 = Math_fround(HEAPF32[$4 >> 2]);
     i64toi32_i32$0 = $21$hi;
     $7 = (wasm2js_scratch_store_i32(2, $21), wasm2js_scratch_load_f32());
     HEAPF32[($3 + 24 | 0) >> 2] = Math_fround($22 + $7);
     $676 = $3 + 28 | 0;
     $23 = Math_fround(HEAPF32[($3 + 12 | 0) >> 2]);
     $680 = $23;
     i64toi32_i32$2 = $21;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $69 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $69 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     $8 = (wasm2js_scratch_store_i32(2, $69), wasm2js_scratch_load_f32());
     HEAPF32[$676 >> 2] = Math_fround($680 + $8);
     i64toi32_i32$1 = $20$hi;
     $7 = Math_fround(Math_fround(Math_fround(HEAPF32[($3 + 16 | 0) >> 2]) - $7) + (wasm2js_scratch_store_i32(2, $20), wasm2js_scratch_load_f32()));
     HEAPF32[($3 + 32 | 0) >> 2] = $7 <= Math_fround(0.0) ? Math_fround(0.0) : $7;
     $701 = $3 + 36 | 0;
     $706 = Math_fround(Math_fround(HEAPF32[($3 + 20 | 0) >> 2]) - $8);
     i64toi32_i32$0 = $20;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $70 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $70 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7 = Math_fround($706 + (wasm2js_scratch_store_i32(2, $70), wasm2js_scratch_load_f32()));
     HEAPF32[$701 >> 2] = $7 <= Math_fround(0.0) ? Math_fround(0.0) : $7;
     label$49 : {
      if (!((HEAPU8[($3 + 5 | 0) >> 0] | 0) & 16 | 0)) {
       break label$49
      }
      label$50 : {
       $2 = $3 + 88 | 0;
       if (Math_fround($22 - Math_fround(HEAPF32[$2 >> 2])) != Math_fround(0.0)) {
        break label$50
       }
       if (Math_fround($23 - Math_fround(HEAPF32[($3 + 92 | 0) >> 2])) == Math_fround(0.0)) {
        break label$49
       }
      }
      ImGui__TranslateWindowsInViewport_28ImGuiViewportP__2c_20ImVec2_20const__2c_20ImVec2_20const__29($3 | 0, $2 | 0, $4 | 0);
     }
     label$51 : {
      label$52 : {
       if (!($5 & 255 | 0)) {
        break label$52
       }
       $5 = HEAP32[($9 + 14316 | 0) >> 2] | 0;
       if (!$5) {
        break label$52
       }
       $7 = Math_fround(FUNCTION_TABLE[$5 | 0]($3));
       break label$51;
      }
      label$53 : {
       $5 = HEAP16[($3 + 104 | 0) >> 1] | 0;
       if (($5 | 0) == (-1 | 0)) {
        break label$53
       }
       $7 = Math_fround(HEAPF32[(((HEAP32[($9 + 14356 | 0) >> 2] | 0) + Math_imul($5, 36) | 0) + 32 | 0) >> 2]);
       break label$51;
      }
      $7 = Math_fround(HEAPF32[($3 + 40 | 0) >> 2]);
      $7 = $7 != Math_fround(0.0) ? $7 : Math_fround(1.0);
     }
     label$54 : {
      $8 = Math_fround(HEAPF32[($3 + 40 | 0) >> 2]);
      if ($8 == Math_fround(0.0)) {
       break label$54
      }
      if ($7 == $8) {
       break label$54
      }
      if (!((HEAPU8[$14 >> 0] | 0) & 64 | 0)) {
       break label$54
      }
      ImGui__ScaleWindowsInViewport_28ImGuiViewportP__2c_20float_29($3 | 0, Math_fround(Math_fround($7 / $8)));
     }
     HEAPF32[($3 + 40 | 0) >> 2] = $7;
    }
    $15 = $15 + 1 | 0;
    if (($15 | 0) < (HEAP32[$11 >> 2] | 0 | 0)) {
     continue label$31
    }
    break label$31;
   };
  }
  label$55 : {
   if (HEAP32[($9 + 14348 | 0) >> 2] | 0) {
    break label$55
   }
   i64toi32_i32$1 = $13;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
   $791 = i64toi32_i32$2;
   i64toi32_i32$2 = $9;
   HEAP32[(i64toi32_i32$2 + 18608 | 0) >> 2] = $791;
   HEAP32[(i64toi32_i32$2 + 18612 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
   $795 = i64toi32_i32$0;
   i64toi32_i32$0 = $9 + 18616 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $795;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
   $799 = i64toi32_i32$2;
   i64toi32_i32$2 = $9 + 18624 | 0;
   HEAP32[i64toi32_i32$2 >> 2] = $799;
   HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
   $803 = i64toi32_i32$0;
   i64toi32_i32$0 = $9 + 18632 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $803;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
   HEAPF32[($9 + 18640 | 0) >> 2] = Math_fround(HEAPF32[(i64toi32_i32$1 + 40 | 0) >> 2]);
  }
  label$56 : {
   label$57 : {
    if (!$10) {
     break label$57
    }
    label$58 : {
     label$59 : {
      label$60 : {
       label$61 : {
        label$62 : {
         if (!((HEAPU8[($9 + 13 | 0) >> 0] | 0) & 8 | 0)) {
          break label$62
         }
         $2 = HEAP32[($9 + 3544 | 0) >> 2] | 0;
         if (!$2) {
          break label$59
         }
         $3 = 0;
         $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
         $5 = HEAP32[($4 + 18576 | 0) >> 2] | 0;
         if (($5 | 0) < (1 | 0)) {
          break label$59
         }
         $4 = HEAP32[($4 + 18584 | 0) >> 2] | 0;
         label$63 : {
          label$64 : while (1) {
           $6 = HEAP32[($4 + ($3 << 2 | 0) | 0) >> 2] | 0;
           if ((HEAP32[$6 >> 2] | 0 | 0) == ($2 | 0)) {
            break label$63
           }
           $3 = $3 + 1 | 0;
           if (($3 | 0) == ($5 | 0)) {
            break label$59
           }
           continue label$64;
          };
         }
         if (!((HEAPU8[($6 + 4 | 0) >> 0] | 0) & 128 | 0)) {
          break label$60
         }
         $22 = Math_fround(HEAPF32[($9 + 3524 | 0) >> 2]);
         $7 = Math_fround(HEAPF32[($9 + 3520 | 0) >> 2]);
         $6 = 0;
         $3 = 0;
         label$65 : while (1) {
          label$66 : {
           $2 = HEAP32[($4 + ($3 << 2 | 0) | 0) >> 2] | 0;
           if ((HEAPU16[($2 + 4 | 0) >> 1] | 0) & 1152 | 0) {
            break label$66
           }
           $8 = Math_fround(HEAPF32[($2 + 8 | 0) >> 2]);
           if (!($7 >= $8)) {
            break label$66
           }
           $23 = Math_fround(HEAPF32[($2 + 12 | 0) >> 2]);
           if (!($22 >= $23)) {
            break label$66
           }
           if (!($7 < Math_fround($8 + Math_fround(HEAPF32[($2 + 16 | 0) >> 2])))) {
            break label$66
           }
           if (!($22 < Math_fround($23 + Math_fround(HEAPF32[($2 + 20 | 0) >> 2])))) {
            break label$66
           }
           label$67 : {
            if (!$6) {
             break label$67
            }
            if ((HEAP32[($6 + 80 | 0) >> 2] | 0 | 0) >= (HEAP32[($2 + 80 | 0) >> 2] | 0 | 0)) {
             break label$66
            }
           }
           $6 = $2;
          }
          $3 = $3 + 1 | 0;
          if (($3 | 0) != ($5 | 0)) {
           continue label$65
          }
          break label$61;
         };
        }
        $6 = 0;
        $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
        $4 = HEAP32[($3 + 18576 | 0) >> 2] | 0;
        if (($4 | 0) < (1 | 0)) {
         break label$59
        }
        $22 = Math_fround(HEAPF32[($9 + 3524 | 0) >> 2]);
        $7 = Math_fround(HEAPF32[($9 + 3520 | 0) >> 2]);
        $2 = HEAP32[($3 + 18584 | 0) >> 2] | 0;
        $3 = 0;
        label$68 : while (1) {
         label$69 : {
          $5 = HEAP32[($2 + ($3 << 2 | 0) | 0) >> 2] | 0;
          if ((HEAPU16[($5 + 4 | 0) >> 1] | 0) & 1152 | 0) {
           break label$69
          }
          $8 = Math_fround(HEAPF32[($5 + 8 | 0) >> 2]);
          if (!($7 >= $8)) {
           break label$69
          }
          $23 = Math_fround(HEAPF32[($5 + 12 | 0) >> 2]);
          if (!($22 >= $23)) {
           break label$69
          }
          if (!($7 < Math_fround($8 + Math_fround(HEAPF32[($5 + 16 | 0) >> 2])))) {
           break label$69
          }
          if (!($22 < Math_fround($23 + Math_fround(HEAPF32[($5 + 20 | 0) >> 2])))) {
           break label$69
          }
          label$70 : {
           if (!$6) {
            break label$70
           }
           if ((HEAP32[($6 + 80 | 0) >> 2] | 0 | 0) >= (HEAP32[($5 + 80 | 0) >> 2] | 0 | 0)) {
            break label$69
           }
          }
          $6 = $5;
         }
         $3 = $3 + 1 | 0;
         if (($3 | 0) != ($4 | 0)) {
          continue label$68
         }
         break label$68;
        };
       }
       if (!$6) {
        break label$59
       }
      }
      HEAP32[($9 + 18600 | 0) >> 2] = $6;
      $5 = 0;
      $13 = $6;
      break label$58;
     }
     $13 = 0;
     $5 = 1;
     $6 = HEAP32[($9 + 18600 | 0) >> 2] | 0;
     if ($6) {
      break label$58
     }
     $6 = HEAP32[(HEAP32[($9 + 18584 | 0) >> 2] | 0) >> 2] | 0;
     HEAP32[($9 + 18600 | 0) >> 2] = $6;
    }
    label$71 : {
     label$72 : {
      $3 = HEAP32[($9 + 16128 | 0) >> 2] | 0;
      if (!$3) {
       break label$72
      }
      $3 = HEAP32[($3 + 44 | 0) >> 2] | 0;
      if ($3) {
       break label$71
      }
     }
     $3 = $6;
    }
    HEAP32[($9 + 18596 | 0) >> 2] = $3;
    label$73 : {
     label$74 : {
      $4 = HEAPU8[($9 + 19040 | 0) >> 0] | 0;
      if (!$4) {
       break label$74
      }
      $13 = $5 ? ($4 ? $6 : $13) : $13;
      break label$73;
     }
     if (!(HEAP32[($9 + 16192 | 0) >> 2] | 0)) {
      break label$73
     }
     $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (HEAPU8[($5 + 3528 | 0) >> 0] | 0) {
      break label$56
     }
     if (HEAPU8[($5 + 3529 | 0) >> 0] | 0) {
      break label$56
     }
     if (HEAPU8[($5 + 3530 | 0) >> 0] | 0) {
      break label$56
     }
     if (HEAPU8[($5 + 3531 | 0) >> 0] | 0) {
      break label$56
     }
     if (HEAPU8[($5 + 3532 | 0) >> 0] | 0) {
      break label$56
     }
    }
    if (!$13) {
     break label$56
    }
    if (($13 | 0) == ($3 | 0)) {
     break label$56
    }
    if ((HEAPU8[($13 + 4 | 0) >> 0] | 0) & 128 | 0) {
     break label$56
    }
   }
   HEAP32[($9 + 18596 | 0) >> 2] = $13;
  }
  HEAP8[((HEAP32[($1 + 72 | 0) >> 2] | 0) + 16 | 0) >> 0] = 1;
  label$75 : {
   $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $5 = HEAP32[($3 + 84 | 0) >> 2] | 0;
   if ($5) {
    break label$75
   }
   $5 = HEAP32[(HEAP32[((HEAP32[($3 + 72 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) >> 2] | 0;
  }
  HEAP32[($3 + 15484 | 0) >> 2] = $5;
  $7 = Math_fround(Math_max(Math_fround(Math_fround(Math_fround(HEAPF32[($3 + 76 | 0) >> 2]) * Math_fround(HEAPF32[($5 + 16 | 0) >> 2])) * Math_fround(HEAPF32[($5 + 76 | 0) >> 2])), Math_fround(1.0)));
  HEAPF32[($3 + 15492 | 0) >> 2] = $7;
  label$76 : {
   label$77 : {
    $4 = HEAP32[($3 + 16116 | 0) >> 2] | 0;
    if ($4) {
     break label$77
    }
    $7 = Math_fround(0.0);
    break label$76;
   }
   $7 = Math_fround(Math_fround($7 * Math_fround(HEAPF32[($4 + 660 | 0) >> 2])) * Math_fround(HEAPF32[($4 + 664 | 0) >> 2]));
   $4 = HEAP32[($4 + 820 | 0) >> 2] | 0;
   if (!$4) {
    break label$76
   }
   $7 = Math_fround($7 * Math_fround(HEAPF32[($4 + 660 | 0) >> 2]));
  }
  HEAPF32[($3 + 15488 | 0) >> 2] = $7;
  $4 = HEAP32[($5 + 48 | 0) >> 2] | 0;
  i64toi32_i32$1 = $4;
  i64toi32_i32$2 = HEAP32[($4 + 52 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($4 + 56 | 0) >> 2] | 0;
  $20 = i64toi32_i32$2;
  $20$hi = i64toi32_i32$0;
  HEAP32[($3 + 16004 | 0) >> 2] = $4 + 96 | 0;
  i64toi32_i32$2 = $3;
  HEAP32[($3 + 15496 | 0) >> 2] = $20;
  HEAP32[($3 + 15500 | 0) >> 2] = i64toi32_i32$0;
  HEAPF32[($3 + 15508 | 0) >> 2] = $7;
  HEAP32[($3 + 15504 | 0) >> 2] = $5;
  label$78 : {
   label$79 : {
    $4 = HEAP32[($1 + 18576 | 0) >> 2] | 0;
    if (($4 | 0) >= (1 | 0)) {
     break label$79
    }
    $7 = Math_fround(-3402823466385288598117041.0e14);
    $8 = Math_fround(3402823466385288598117041.0e14);
    $22 = Math_fround(3402823466385288598117041.0e14);
    $23 = Math_fround(-3402823466385288598117041.0e14);
    break label$78;
   }
   $2 = HEAP32[($1 + 18584 | 0) >> 2] | 0;
   $22 = Math_fround(3402823466385288598117041.0e14);
   $23 = Math_fround(-3402823466385288598117041.0e14);
   $5 = 0;
   $7 = Math_fround(-3402823466385288598117041.0e14);
   $8 = Math_fround(3402823466385288598117041.0e14);
   label$80 : while (1) {
    $3 = HEAP32[($2 + ($5 << 2 | 0) | 0) >> 2] | 0;
    $24 = Math_fround(HEAPF32[($3 + 8 | 0) >> 2]);
    $25 = Math_fround($24 + Math_fround(HEAPF32[($3 + 16 | 0) >> 2]));
    $7 = $7 < $25 ? $25 : $7;
    $25 = Math_fround(HEAPF32[($3 + 12 | 0) >> 2]);
    $26 = Math_fround($25 + Math_fround(HEAPF32[($3 + 20 | 0) >> 2]));
    $23 = $23 < $26 ? $26 : $23;
    $8 = $8 > $24 ? $24 : $8;
    $22 = $22 > $25 ? $25 : $22;
    $5 = $5 + 1 | 0;
    if (($5 | 0) != ($4 | 0)) {
     continue label$80
    }
    break label$80;
   };
  }
  HEAPF32[($1 + 15532 | 0) >> 2] = $23;
  HEAPF32[($1 + 15528 | 0) >> 2] = $7;
  HEAPF32[($1 + 15524 | 0) >> 2] = $22;
  HEAPF32[($1 + 15520 | 0) >> 2] = $8;
  HEAPF32[($1 + 15512 | 0) >> 2] = Math_fround(HEAPF32[($1 + 14588 | 0) >> 2]);
  ImDrawListSharedData__SetCircleTessellationMaxError_28float_29($1 + 15496 | 0 | 0, Math_fround(Math_fround(HEAPF32[($1 + 14592 | 0) >> 2])));
  $3 = HEAPU8[($1 + 14584 | 0) >> 0] | 0;
  HEAP32[($1 + 15536 | 0) >> 2] = $3;
  label$81 : {
   if (!(HEAPU8[($1 + 14585 | 0) >> 0] | 0)) {
    break label$81
   }
   if ((HEAPU8[(HEAP32[((HEAP32[($1 + 15484 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0) >> 0] | 0) & 4 | 0) {
    break label$81
   }
   $3 = $3 | 2 | 0;
   HEAP32[($1 + 15536 | 0) >> 2] = $3;
  }
  label$82 : {
   if (!(HEAPU8[($1 + 14586 | 0) >> 0] | 0)) {
    break label$82
   }
   $3 = $3 | 4 | 0;
   HEAP32[($1 + 15536 | 0) >> 2] = $3;
  }
  label$83 : {
   if (!((HEAPU8[($1 + 12 | 0) >> 0] | 0) & 8 | 0)) {
    break label$83
   }
   HEAP32[($1 + 15536 | 0) >> 2] = $3 | 8 | 0;
  }
  label$84 : {
   if ((HEAP32[($1 + 18576 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$84
   }
   $5 = 0;
   label$85 : while (1) {
    $3 = HEAP32[((HEAP32[($1 + 18584 | 0) >> 2] | 0) + ($5 << 2 | 0) | 0) >> 2] | 0;
    i64toi32_i32$2 = $3;
    i64toi32_i32$0 = 0;
    HEAP32[($3 + 128 | 0) >> 2] = 0;
    HEAP32[($3 + 132 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($3 + 48 | 0) >> 2] = 0;
    i64toi32_i32$2 = $3 + 136 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$2 >> 2] = 0;
    HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $3 + 144 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$2 >> 2] = 0;
    HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $3 + 152 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$2 >> 2] = 0;
    HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $3 + 160 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$2 >> 2] = 0;
    HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $3 + 168 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$2 >> 2] = 0;
    HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
    $5 = $5 + 1 | 0;
    if (($5 | 0) < (HEAP32[($1 + 18576 | 0) >> 2] | 0 | 0)) {
     continue label$85
    }
    break label$85;
   };
  }
  label$86 : {
   if (!(HEAPU8[($1 + 19040 | 0) >> 0] | 0)) {
    break label$86
   }
   $3 = HEAP32[($1 + 19064 | 0) >> 2] | 0;
   if (($3 | 0) != (HEAP32[($1 + 16192 | 0) >> 2] | 0 | 0)) {
    break label$86
   }
   label$87 : {
    $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if ((HEAP32[($5 + 16192 | 0) >> 2] | 0 | 0) != ($3 | 0)) {
     break label$87
    }
    HEAP32[($5 + 16196 | 0) >> 2] = $3;
   }
   if ((HEAP32[($5 + 16232 | 0) >> 2] | 0 | 0) != ($3 | 0)) {
    break label$86
   }
   HEAP8[($5 + 16236 | 0) >> 0] = 1;
  }
  label$88 : {
   label$89 : {
    label$90 : {
     label$91 : {
      label$92 : {
       label$93 : {
        if (!(HEAP32[($1 + 16176 | 0) >> 2] | 0)) {
         break label$93
        }
        $3 = HEAP32[($1 + 16172 | 0) >> 2] | 0;
        if (!$3) {
         break label$92
        }
        if ((HEAP32[($1 + 16192 | 0) >> 2] | 0 | 0) != ($3 | 0)) {
         break label$91
        }
        HEAP32[($1 + 16188 | 0) >> 2] = 0;
        break label$91;
       }
       i64toi32_i32$2 = $1;
       i64toi32_i32$0 = 0;
       HEAP32[($1 + 16184 | 0) >> 2] = 0;
       HEAP32[($1 + 16188 | 0) >> 2] = i64toi32_i32$0;
       $3 = HEAP32[($1 + 16172 | 0) >> 2] | 0;
       if ($3) {
        break label$91
       }
      }
      $3 = HEAP32[($1 + 16192 | 0) >> 2] | 0;
      $4 = 0;
      break label$90;
     }
     $7 = Math_fround(HEAPF32[($1 + 24 | 0) >> 2]);
     HEAPF32[($1 + 16184 | 0) >> 2] = Math_fround($7 + Math_fround(HEAPF32[($1 + 16184 | 0) >> 2]));
     label$94 : {
      $5 = HEAP32[($1 + 16192 | 0) >> 2] | 0;
      if (($5 | 0) != ($3 | 0)) {
       break label$94
      }
      HEAP16[($1 + 16180 | 0) >> 1] = 0;
      HEAP32[($1 + 16172 | 0) >> 2] = 0;
      HEAP32[($1 + 16176 | 0) >> 2] = $3;
      break label$89;
     }
     HEAPF32[($1 + 16188 | 0) >> 2] = Math_fround($7 + Math_fround(HEAPF32[($1 + 16188 | 0) >> 2]));
     $4 = $3;
     $3 = $5;
    }
    $5 = 0;
    HEAP16[($1 + 16180 | 0) >> 1] = 0;
    HEAP32[($1 + 16172 | 0) >> 2] = 0;
    HEAP32[($1 + 16176 | 0) >> 2] = $4;
    if ($3) {
     break label$89
    }
    $7 = Math_fround(HEAPF32[($1 + 24 | 0) >> 2]);
    $4 = 1;
    break label$88;
   }
   label$95 : {
    label$96 : {
     if ((HEAP32[($1 + 16196 | 0) >> 2] | 0 | 0) == ($3 | 0)) {
      break label$96
     }
     if ((HEAP32[($1 + 16232 | 0) >> 2] | 0 | 0) != ($3 | 0)) {
      break label$96
     }
     $4 = 1;
     label$97 : {
      if (!((HEAPU8[($1 + 23536 | 0) >> 0] | 0) & 1 | 0)) {
       break label$97
      }
      ImGui__DebugLog_28char_20const__2c_20____29(70460 | 0, 0 | 0);
     }
     $5 = 0;
     ImGui__SetActiveID_28unsigned_20int_2c_20ImGuiWindow__29(0 | 0, 0 | 0);
     $7 = Math_fround(HEAPF32[($1 + 24 | 0) >> 2]);
     $3 = HEAP32[($1 + 16192 | 0) >> 2] | 0;
     if ($3) {
      break label$95
     }
     break label$88;
    }
    $7 = Math_fround(HEAPF32[($1 + 24 | 0) >> 2]);
   }
   HEAPF32[($1 + 16200 | 0) >> 2] = Math_fround($7 + Math_fround(HEAPF32[($1 + 16200 | 0) >> 2]));
   $4 = 0;
   $5 = $3;
  }
  HEAP32[($1 + 16232 | 0) >> 2] = $5;
  HEAP8[($1 + 16236 | 0) >> 0] = 0;
  HEAP8[($1 + 16209 | 0) >> 0] = 0;
  HEAP32[($1 + 16196 | 0) >> 2] = 0;
  HEAP8[($1 + 16204 | 0) >> 0] = 0;
  HEAP32[($1 + 16240 | 0) >> 2] = HEAP32[($1 + 16220 | 0) >> 2] | 0;
  HEAP8[($1 + 16237 | 0) >> 0] = HEAPU8[($1 + 16208 | 0) >> 0] | 0;
  HEAPF32[($1 + 16248 | 0) >> 2] = Math_fround($7 + Math_fround(HEAPF32[($1 + 16248 | 0) >> 2]));
  label$98 : {
   $3 = HEAP32[($1 + 23160 | 0) >> 2] | 0;
   if (!$3) {
    break label$98
   }
   if (($5 | 0) == ($3 | 0)) {
    break label$98
   }
   HEAP32[($1 + 23160 | 0) >> 2] = 0;
  }
  label$99 : {
   label$100 : {
    if (!$4) {
     break label$100
    }
    HEAP32[($1 + 18244 | 0) >> 2] = 0;
    HEAP8[($1 + 18240 | 0) >> 0] = 0;
    HEAP32[($1 + 18236 | 0) >> 2] = 0;
    break label$99;
   }
   if (!((HEAPU8[($1 + 18244 | 0) >> 0] | 0) & 2 | 0)) {
    break label$99
   }
   $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   HEAP32[($3 + 16420 | 0) >> 2] = $5;
   HEAP32[($3 + 16424 | 0) >> 2] = $5;
   HEAP16[($3 + 16428 | 0) >> 1] = 0;
  }
  $3 = HEAP32[($1 + 19336 | 0) >> 2] | 0;
  HEAP32[($1 + 19340 | 0) >> 2] = $3;
  $8 = Math_fround(HEAPF32[($1 + 19344 | 0) >> 2]);
  label$101 : {
   label$102 : {
    if (!$3) {
     break label$102
    }
    HEAP32[($1 + 19348 | 0) >> 2] = 0;
    HEAP32[($1 + 19336 | 0) >> 2] = 0;
    HEAPF32[($1 + 19344 | 0) >> 2] = Math_fround($7 + $8);
    break label$101;
   }
   if (!($8 > Math_fround(0.0))) {
    break label$101
   }
   $8 = Math_fround($7 + Math_fround(HEAPF32[($1 + 19348 | 0) >> 2]));
   HEAPF32[($1 + 19348 | 0) >> 2] = $8;
   if (!($8 >= Math_fround(Math_max(Math_fround($7 + $7), Math_fround(.20000000298023224))))) {
    break label$101
   }
   i64toi32_i32$2 = $1;
   i64toi32_i32$0 = 0;
   HEAP32[($1 + 19344 | 0) >> 2] = 0;
   HEAP32[($1 + 19348 | 0) >> 2] = i64toi32_i32$0;
  }
  HEAP32[($1 + 19152 | 0) >> 2] = 0;
  $71 = 0;
  HEAP8[($1 + 19041 | 0) >> 0] = $71;
  HEAP8[($1 + 19042 | 0) >> 0] = $71 >>> 8 | 0;
  HEAP32[($1 + 19144 | 0) >> 2] = HEAP32[($1 + 19140 | 0) >> 2] | 0;
  i64toi32_i32$2 = $1;
  i64toi32_i32$0 = 0;
  HEAP32[($1 + 19136 | 0) >> 2] = 2139095039;
  HEAP32[($1 + 19140 | 0) >> 2] = i64toi32_i32$0;
  label$103 : {
   $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $6 = HEAPU8[($5 + 14234 | 0) >> 0] | 0;
   if (!($6 & 255 | 0)) {
    break label$103
   }
   $3 = 512;
   label$104 : while (1) {
    label$105 : {
     $4 = HEAP32[(($5 + ($3 << 2 | 0) | 0) + 196 | 0) >> 2] | 0;
     if (($4 | 0) == (-1 | 0)) {
      break label$105
     }
     HEAP32[(($5 + ($4 << 2 | 0) | 0) + 196 | 0) >> 2] = $3;
    }
    label$106 : {
     $4 = $3 | 1 | 0;
     $2 = HEAP32[(($5 + ($4 << 2 | 0) | 0) + 196 | 0) >> 2] | 0;
     if (($2 | 0) == (-1 | 0)) {
      break label$106
     }
     HEAP32[(($5 + ($2 << 2 | 0) | 0) + 196 | 0) >> 2] = $4;
    }
    $3 = $3 + 2 | 0;
    if (($3 | 0) != (652 | 0)) {
     continue label$104
    }
    break label$104;
   };
   $3 = 0;
   $15 = $5 + 8 | 0;
   label$107 : while (1) {
    label$108 : {
     label$109 : {
      if (($6 & 255 | 0 | 0) != (1 | 0)) {
       break label$109
      }
      $4 = ($5 + $3 | 0) + 2804 | 0;
      $6 = HEAPU8[$4 >> 0] | 0;
      break label$108;
     }
     label$110 : {
      label$111 : while (1) {
       $4 = ($5 + $3 | 0) + 2804 | 0;
       if (HEAPU8[$4 >> 0] | 0) {
        break label$110
       }
       $3 = $3 + 1 | 0;
       if (($3 | 0) == (512 | 0)) {
        break label$103
       }
       continue label$111;
      };
     }
     $6 = 1;
    }
    $2 = HEAP32[(($15 + ($3 << 2 | 0) | 0) + 188 | 0) >> 2] | 0;
    $2 = ($2 | 0) == (-1 | 0) ? $3 : $2;
    HEAP8[(($15 + ($2 << 4 | 0) | 0) + 3548 | 0) >> 0] = $6;
    label$112 : {
     if (($2 | 0) == ($3 | 0)) {
      break label$112
     }
     HEAP8[(($5 + $2 | 0) + 2804 | 0) >> 0] = HEAPU8[$4 >> 0] | 0;
    }
    $6 = 1;
    HEAP8[($5 + 14234 | 0) >> 0] = 1;
    $3 = $3 + 1 | 0;
    if (($3 | 0) != (512 | 0)) {
     continue label$107
    }
    break label$107;
   };
   HEAP8[($5 + 13924 | 0) >> 0] = HEAPU8[($5 + 3548 | 0) >> 0] | 0;
   HEAP8[($5 + 13940 | 0) >> 0] = HEAPU8[($5 + 3549 | 0) >> 0] | 0;
   HEAP8[($5 + 13956 | 0) >> 0] = HEAPU8[($5 + 3550 | 0) >> 0] | 0;
   HEAP8[($5 + 13972 | 0) >> 0] = HEAPU8[($5 + 3551 | 0) >> 0] | 0;
  }
  label$113 : {
   if (!((HEAPU8[($5 + 8 | 0) >> 0] | 0) & 2 | 0)) {
    break label$113
   }
   if (!(HEAPU8[($5 + 14235 | 0) >> 0] | 0)) {
    break label$113
   }
   if (!((HEAP32[($5 + 12 | 0) >> 2] | 0) & 1 | 0)) {
    break label$113
   }
   $7 = Math_fround(HEAPF32[($5 + 3456 | 0) >> 2]);
   HEAPF32[($5 + 13520 | 0) >> 2] = $7;
   $8 = Math_fround(HEAPF32[($5 + 3460 | 0) >> 2]);
   HEAPF32[($5 + 13488 | 0) >> 2] = $8;
   $22 = Math_fround(HEAPF32[($5 + 3468 | 0) >> 2]);
   HEAPF32[($5 + 13472 | 0) >> 2] = $22;
   $23 = Math_fround(HEAPF32[($5 + 3464 | 0) >> 2]);
   HEAPF32[($5 + 13504 | 0) >> 2] = $23;
   $24 = Math_fround(HEAPF32[($5 + 3472 | 0) >> 2]);
   HEAPF32[($5 + 13536 | 0) >> 2] = $24;
   $25 = Math_fround(HEAPF32[($5 + 3476 | 0) >> 2]);
   HEAPF32[($5 + 13552 | 0) >> 2] = $25;
   HEAP8[($5 + 13508 | 0) >> 0] = $7 > Math_fround(0.0);
   HEAP8[($5 + 13476 | 0) >> 0] = $8 > Math_fround(0.0);
   HEAP8[($5 + 13460 | 0) >> 0] = $22 > Math_fround(0.0);
   HEAP8[($5 + 13492 | 0) >> 0] = $23 > Math_fround(0.0);
   HEAP8[($5 + 13524 | 0) >> 0] = $24 > Math_fround(0.0);
   HEAP8[($5 + 13540 | 0) >> 0] = $25 > Math_fround(0.0);
   $7 = Math_fround(HEAPF32[($5 + 3480 | 0) >> 2]);
   HEAPF32[($5 + 13568 | 0) >> 2] = $7;
   HEAP8[($5 + 13556 | 0) >> 0] = $7 > Math_fround(0.0);
   $7 = Math_fround(HEAPF32[($5 + 3484 | 0) >> 2]);
   HEAPF32[($5 + 13584 | 0) >> 2] = $7;
   $8 = Math_fround(HEAPF32[($5 + 3488 | 0) >> 2]);
   HEAPF32[($5 + 13696 | 0) >> 2] = $8;
   $22 = Math_fround(HEAPF32[($5 + 3492 | 0) >> 2]);
   HEAPF32[($5 + 13712 | 0) >> 2] = $22;
   HEAP8[($5 + 13572 | 0) >> 0] = $7 > Math_fround(0.0);
   HEAP8[($5 + 13684 | 0) >> 0] = $8 > Math_fround(0.0);
   HEAP8[($5 + 13700 | 0) >> 0] = $22 > Math_fround(0.0);
   $7 = Math_fround(HEAPF32[($5 + 3504 | 0) >> 2]);
   $8 = Math_fround(HEAPF32[($5 + 3512 | 0) >> 2]);
   HEAPF32[($5 + 13600 | 0) >> 2] = $7 >= $8 ? $7 : $8;
   HEAP8[($5 + 13588 | 0) >> 0] = $7 > Math_fround(0.0) | $8 > Math_fround(0.0) | 0;
   $7 = Math_fround(HEAPF32[($5 + 3508 | 0) >> 2]);
   $8 = Math_fround(HEAPF32[($5 + 3516 | 0) >> 2]);
   HEAPF32[($5 + 13616 | 0) >> 2] = $7 >= $8 ? $7 : $8;
   HEAP8[($5 + 13604 | 0) >> 0] = $7 > Math_fround(0.0) | $8 > Math_fround(0.0) | 0;
   $7 = Math_fround(HEAPF32[($5 + 3496 | 0) >> 2]);
   HEAPF32[($5 + 13728 | 0) >> 2] = $7;
   $8 = Math_fround(HEAPF32[($5 + 3500 | 0) >> 2]);
   HEAPF32[($5 + 13744 | 0) >> 2] = $8;
   HEAP8[($5 + 13716 | 0) >> 0] = $7 > Math_fround(0.0);
   HEAP8[($5 + 13732 | 0) >> 0] = $8 > Math_fround(0.0);
  }
  $3 = HEAPU8[($5 + 3528 | 0) >> 0] | 0;
  HEAP8[($5 + 13812 | 0) >> 0] = $3;
  $4 = HEAPU8[($5 + 3529 | 0) >> 0] | 0;
  HEAP8[($5 + 13828 | 0) >> 0] = $4;
  $2 = HEAPU8[($5 + 3530 | 0) >> 0] | 0;
  HEAP8[($5 + 13844 | 0) >> 0] = $2;
  $6 = HEAPU8[($5 + 3531 | 0) >> 0] | 0;
  HEAP8[($5 + 13860 | 0) >> 0] = $6;
  $15 = HEAPU8[($5 + 3532 | 0) >> 0] | 0;
  HEAP8[($5 + 13876 | 0) >> 0] = $15;
  $7 = Math_fround(HEAPF32[($5 + 3540 | 0) >> 2]);
  HEAPF32[($5 + 13904 | 0) >> 2] = $7;
  HEAPF32[($5 + 13824 | 0) >> 2] = $3 ? Math_fround(1.0) : Math_fround(0.0);
  HEAPF32[($5 + 13840 | 0) >> 2] = $4 ? Math_fround(1.0) : Math_fround(0.0);
  HEAPF32[($5 + 13856 | 0) >> 2] = $2 ? Math_fround(1.0) : Math_fround(0.0);
  HEAPF32[($5 + 13872 | 0) >> 2] = $6 ? Math_fround(1.0) : Math_fround(0.0);
  HEAPF32[($5 + 13888 | 0) >> 2] = $15 ? Math_fround(1.0) : Math_fround(0.0);
  HEAP8[($5 + 13892 | 0) >> 0] = $7 != Math_fround(0.0);
  $7 = Math_fround(HEAPF32[($5 + 3536 | 0) >> 2]);
  HEAPF32[($5 + 13920 | 0) >> 2] = $7;
  HEAP8[($5 + 13908 | 0) >> 0] = $7 != Math_fround(0.0);
  label$114 : {
   label$115 : {
    if (HEAPU8[($5 + 13924 | 0) >> 0] | 0) {
     break label$115
    }
    $3 = 0;
    break label$114;
   }
   $3 = !(HEAPU8[($5 + 17892 | 0) >> 0] | 0) << 12 | 0;
  }
  label$116 : {
   if (!(HEAPU8[($5 + 13940 | 0) >> 0] | 0)) {
    break label$116
   }
   $3 = HEAPU8[($5 + 17904 | 0) >> 0] | 0 ? $3 : $3 | 8192 | 0;
  }
  label$117 : {
   if (!(HEAPU8[($5 + 13956 | 0) >> 0] | 0)) {
    break label$117
   }
   $3 = HEAPU8[($5 + 17916 | 0) >> 0] | 0 ? $3 : $3 | 16384 | 0;
  }
  label$118 : {
   if (!(HEAPU8[($5 + 13972 | 0) >> 0] | 0)) {
    break label$118
   }
   $3 = HEAPU8[($5 + 17928 | 0) >> 0] | 0 ? $3 : $3 | 32768 | 0;
  }
  HEAP8[($5 + 3551 | 0) >> 0] = $3 >>> 15 | 0;
  HEAP32[($5 + 3552 | 0) >> 2] = $3;
  HEAP8[($5 + 3550 | 0) >> 0] = ($3 >>> 14 | 0) & 1 | 0;
  HEAP8[($5 + 3549 | 0) >> 0] = ($3 >>> 13 | 0) & 1 | 0;
  HEAP8[($5 + 3548 | 0) >> 0] = ($3 >>> 12 | 0) & 1 | 0;
  label$119 : {
   if ((HEAPU8[($5 + 12 | 0) >> 0] | 0) & 1 | 0) {
    break label$119
   }
   HEAP32[($5 + 13808 | 0) >> 2] = 0;
   HEAP8[($5 + 13796 | 0) >> 0] = 0;
   HEAP32[($5 + 13792 | 0) >> 2] = 0;
   HEAP8[($5 + 13780 | 0) >> 0] = 0;
   HEAP32[($5 + 13776 | 0) >> 2] = 0;
   HEAP8[($5 + 13764 | 0) >> 0] = 0;
   HEAP32[($5 + 13760 | 0) >> 2] = 0;
   HEAP8[($5 + 13748 | 0) >> 0] = 0;
   HEAP32[($5 + 13744 | 0) >> 2] = 0;
   HEAP8[($5 + 13732 | 0) >> 0] = 0;
   HEAP32[($5 + 13728 | 0) >> 2] = 0;
   HEAP8[($5 + 13716 | 0) >> 0] = 0;
   HEAP32[($5 + 13712 | 0) >> 2] = 0;
   HEAP8[($5 + 13700 | 0) >> 0] = 0;
   HEAP32[($5 + 13696 | 0) >> 2] = 0;
   HEAP8[($5 + 13684 | 0) >> 0] = 0;
   HEAP32[($5 + 13680 | 0) >> 2] = 0;
   HEAP8[($5 + 13668 | 0) >> 0] = 0;
   HEAP32[($5 + 13664 | 0) >> 2] = 0;
   HEAP8[($5 + 13652 | 0) >> 0] = 0;
   HEAP32[($5 + 13648 | 0) >> 2] = 0;
   HEAP8[($5 + 13636 | 0) >> 0] = 0;
   HEAP32[($5 + 13632 | 0) >> 2] = 0;
   HEAP8[($5 + 13620 | 0) >> 0] = 0;
   HEAP32[($5 + 13616 | 0) >> 2] = 0;
   HEAP8[($5 + 13604 | 0) >> 0] = 0;
   HEAP32[($5 + 13600 | 0) >> 2] = 0;
   HEAP8[($5 + 13588 | 0) >> 0] = 0;
   HEAP32[($5 + 13584 | 0) >> 2] = 0;
   HEAP8[($5 + 13572 | 0) >> 0] = 0;
   HEAP32[($5 + 13568 | 0) >> 2] = 0;
   HEAP8[($5 + 13556 | 0) >> 0] = 0;
   HEAP32[($5 + 13552 | 0) >> 2] = 0;
   HEAP8[($5 + 13540 | 0) >> 0] = 0;
   HEAP32[($5 + 13536 | 0) >> 2] = 0;
   HEAP8[($5 + 13524 | 0) >> 0] = 0;
   HEAP32[($5 + 13520 | 0) >> 2] = 0;
   HEAP8[($5 + 13508 | 0) >> 0] = 0;
   HEAP32[($5 + 13504 | 0) >> 2] = 0;
   HEAP8[($5 + 13492 | 0) >> 0] = 0;
   HEAP32[($5 + 13488 | 0) >> 2] = 0;
   HEAP8[($5 + 13476 | 0) >> 0] = 0;
   HEAP32[($5 + 13472 | 0) >> 2] = 0;
   HEAP8[($5 + 13460 | 0) >> 0] = 0;
   HEAP32[($5 + 13456 | 0) >> 2] = 0;
   HEAP8[($5 + 13444 | 0) >> 0] = 0;
   HEAP32[($5 + 13440 | 0) >> 2] = 0;
   HEAP8[($5 + 13428 | 0) >> 0] = 0;
  }
  $3 = 0;
  label$120 : while (1) {
   $4 = $5 + ($3 << 4 | 0) | 0;
   $2 = $4 + 3560 | 0;
   $8 = Math_fround(HEAPF32[$2 >> 2]);
   HEAPF32[($4 + 3564 | 0) >> 2] = $8;
   label$121 : {
    label$122 : {
     if (HEAPU8[($4 + 3556 | 0) >> 0] | 0) {
      break label$122
     }
     $7 = Math_fround(-1.0);
     break label$121;
    }
    $7 = Math_fround(0.0);
    if ($8 < Math_fround(0.0)) {
     break label$121
    }
    $7 = Math_fround($8 + Math_fround(HEAPF32[($5 + 24 | 0) >> 2]));
   }
   HEAPF32[$2 >> 2] = $7;
   $3 = $3 + 1 | 0;
   if (($3 | 0) != (652 | 0)) {
    continue label$120
   }
   break label$120;
  };
  $3 = 512;
  label$123 : while (1) {
   $4 = $5 + Math_imul($3 + -512 | 0, 12) | 0;
   $6 = $4 + 16256 | 0;
   HEAP32[($4 + 16252 | 0) >> 2] = HEAP32[$6 >> 2] | 0;
   label$124 : {
    $2 = HEAPU8[(($5 + ($3 << 4 | 0) | 0) + 3556 | 0) >> 0] | 0;
    if ($2) {
     break label$124
    }
    HEAP32[$6 >> 2] = -1;
   }
   $1972 = $4 + 16260 | 0;
   $4 = $4 + 16261 | 0;
   $2 = ($2 | 0) != (0 | 0) & (HEAPU8[$4 >> 0] | 0 | 0) != (0 | 0) | 0;
   HEAP8[$1972 >> 0] = $2;
   HEAP8[$4 >> 0] = $2;
   $3 = $3 + 1 | 0;
   if (($3 | 0) != (652 | 0)) {
    continue label$123
   }
   break label$123;
  };
  label$125 : {
   if ((HEAP32[($5 + 18228 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$125
   }
   $3 = $5 + 184 | 0;
   HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1 | 0;
   $3 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](0, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$126 : {
    $4 = HEAP32[($5 + 18232 | 0) >> 2] | 0;
    if (!$4) {
     break label$126
    }
    __memcpy($3 | 0, $4 | 0, (HEAP32[($5 + 18224 | 0) >> 2] | 0) << 4 | 0 | 0) | 0;
    label$127 : {
     $4 = HEAP32[($5 + 18232 | 0) >> 2] | 0;
     if (!$4) {
      break label$127
     }
     $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$2) {
      break label$127
     }
     $2 = $2 + 184 | 0;
     HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($4, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($5 + 18228 | 0) >> 2] = 0;
   HEAP32[($5 + 18232 | 0) >> 2] = $3;
  }
  $12 = $5 + 17932 | 0;
  HEAP32[($5 + 18224 | 0) >> 2] = 0;
  $15 = 512;
  label$128 : while (1) {
   $4 = HEAP32[($5 + 18224 | 0) >> 2] | 0;
   label$129 : {
    label$130 : {
     $16 = (($15 << 1 | 0) + $12 | 0) + -1024 | 0;
     $3 = HEAPU16[$16 >> 1] | 0;
     if (($3 | 0) != (65535 | 0)) {
      break label$130
     }
     HEAP16[$16 >> 1] = 65535;
     break label$129;
    }
    $9 = $15 & 63488 | 0;
    label$131 : while (1) {
     $3 = (HEAP32[($5 + 18220 | 0) >> 2] | 0) + ($3 << 16 >> 16 << 4 | 0) | 0;
     HEAP8[($3 + 4 | 0) >> 0] = 255;
     $2 = HEAP32[($3 + 12 | 0) >> 2] | 0;
     HEAP32[($3 + 12 | 0) >> 2] = -1;
     HEAP32[($3 + 8 | 0) >> 2] = $2;
     label$132 : {
      if (($2 | 0) == (-1 | 0)) {
       break label$132
      }
      $6 = $3 + 8 | 0;
      label$133 : {
       $2 = HEAP32[($5 + 18224 | 0) >> 2] | 0;
       if (($2 | 0) != (HEAP32[($5 + 18228 | 0) >> 2] | 0 | 0)) {
        break label$133
       }
       $19 = $2 + 1 | 0;
       label$134 : {
        label$135 : {
         if ($2) {
          break label$135
         }
         $18 = 8;
         break label$134;
        }
        $18 = (($2 | 0) / (2 | 0) | 0) + $2 | 0;
       }
       $19 = ($18 | 0) > ($19 | 0) ? $18 : $19;
       if (($2 | 0) >= ($19 | 0)) {
        break label$133
       }
       $2 = $19 << 4 | 0;
       label$136 : {
        $18 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
        if (!$18) {
         break label$136
        }
        $18 = $18 + 184 | 0;
        HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + 1 | 0;
       }
       $2 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($2, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
       label$137 : {
        $18 = HEAP32[($5 + 18232 | 0) >> 2] | 0;
        if (!$18) {
         break label$137
        }
        __memcpy($2 | 0, $18 | 0, (HEAP32[($5 + 18224 | 0) >> 2] | 0) << 4 | 0 | 0) | 0;
        label$138 : {
         $18 = HEAP32[($5 + 18232 | 0) >> 2] | 0;
         if (!$18) {
          break label$138
         }
         $11 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
         if (!$11) {
          break label$138
         }
         $11 = $11 + 184 | 0;
         HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + -1 | 0;
        }
        FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($18, HEAP32[(0 + 92728 | 0) >> 2] | 0);
       }
       HEAP32[($5 + 18228 | 0) >> 2] = $19;
       HEAP32[($5 + 18232 | 0) >> 2] = $2;
       $2 = HEAP32[($5 + 18224 | 0) >> 2] | 0;
      }
      $2 = (HEAP32[($5 + 18232 | 0) >> 2] | 0) + ($2 << 4 | 0) | 0;
      i64toi32_i32$1 = $3;
      i64toi32_i32$0 = HEAP32[$3 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[($3 + 4 | 0) >> 2] | 0;
      $2140 = i64toi32_i32$0;
      i64toi32_i32$0 = $2;
      HEAP32[$2 >> 2] = $2140;
      HEAP32[($2 + 4 | 0) >> 2] = i64toi32_i32$2;
      i64toi32_i32$1 = $6;
      i64toi32_i32$2 = HEAP32[$6 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($6 + 4 | 0) >> 2] | 0;
      $2144 = i64toi32_i32$2;
      i64toi32_i32$2 = $2 + 8 | 0;
      HEAP32[i64toi32_i32$2 >> 2] = $2144;
      HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($5 + 18224 | 0) >> 2] = (HEAP32[($5 + 18224 | 0) >> 2] | 0) + 1 | 0;
      if ((HEAP32[($5 + 3552 | 0) >> 2] | 0 | 0) != (HEAPU16[($3 + 2 | 0) >> 1] | 0 | 0)) {
       break label$132
      }
      $2 = $15;
      label$139 : {
       if (!$9) {
        break label$139
       }
       label$140 : {
        label$141 : {
         label$142 : {
          if (($15 | 0) > (8191 | 0)) {
           break label$142
          }
          if (($15 | 0) == (2048 | 0)) {
           break label$141
          }
          $2 = 648;
          if (($15 | 0) == (4096 | 0)) {
           break label$139
          }
          break label$140;
         }
         label$143 : {
          if (($15 | 0) == (32768 | 0)) {
           break label$143
          }
          label$144 : {
           if (($15 | 0) == (16384 | 0)) {
            break label$144
           }
           if (($15 | 0) != (8192 | 0)) {
            break label$140
           }
           $2 = 649;
           break label$139;
          }
          $2 = 650;
          break label$139;
         }
         $2 = 651;
         break label$139;
        }
        $2 = HEAPU8[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 105 | 0) >> 0] | 0 ? 651 : 648;
        break label$139;
       }
       $2 = $15;
      }
      $2 = (Math_imul($2, 12) + (HEAP32[(0 + 92720 | 0) >> 2] | 0) | 0) + 10108 | 0;
      if ((HEAP32[$2 >> 2] | 0 | 0) != (-1 | 0)) {
       break label$132
      }
      HEAP32[$2 >> 2] = HEAP32[$6 >> 2] | 0;
     }
     $3 = HEAPU16[$3 >> 1] | 0;
     if (($3 | 0) != (65535 | 0)) {
      continue label$131
     }
     break label$131;
    };
    $3 = HEAP32[($5 + 18224 | 0) >> 2] | 0;
    HEAP16[$16 >> 1] = ($3 | 0) > ($4 | 0) ? $4 : -1;
    label$145 : {
     if (($3 | 0) > ($4 | 0)) {
      break label$145
     }
     $4 = $3;
     break label$129;
    }
    $18 = $3 + ($4 ^ -1 | 0) | 0;
    $2 = HEAP32[($5 + 18232 | 0) >> 2] | 0;
    $6 = 0;
    label$146 : {
     $19 = ($3 - $4 | 0) & 3 | 0;
     if (!$19) {
      break label$146
     }
     label$147 : while (1) {
      $2216 = $2 + ($4 << 4 | 0) | 0;
      $4 = $4 + 1 | 0;
      HEAP16[$2216 >> 1] = ($4 | 0) < ($3 | 0) ? $4 : -1;
      $6 = $6 + 1 | 0;
      if (($6 | 0) != ($19 | 0)) {
       continue label$147
      }
      break label$147;
     };
    }
    label$148 : {
     if ($18 >>> 0 >= 3 >>> 0) {
      break label$148
     }
     $4 = $3;
     break label$129;
    }
    label$149 : while (1) {
     $6 = $4 + 1 | 0;
     HEAP16[($2 + ($4 << 4 | 0) | 0) >> 1] = ($6 | 0) < ($3 | 0) ? $6 : -1;
     $2247 = $2 + ($6 << 4 | 0) | 0;
     $6 = $4 + 2 | 0;
     HEAP16[$2247 >> 1] = ($6 | 0) < ($3 | 0) ? $6 : -1;
     $2258 = $2 + ($6 << 4 | 0) | 0;
     $6 = $4 + 3 | 0;
     HEAP16[$2258 >> 1] = ($6 | 0) < ($3 | 0) ? $6 : -1;
     $4 = $4 + 4 | 0;
     HEAP16[($2 + ($6 << 4 | 0) | 0) >> 1] = ($4 | 0) < ($3 | 0) ? $4 : -1;
     if (($4 | 0) != ($3 | 0)) {
      continue label$149
     }
     break label$149;
    };
    $4 = $3;
   }
   $15 = $15 + 1 | 0;
   if (($15 | 0) != (652 | 0)) {
    continue label$128
   }
   break label$128;
  };
  i64toi32_i32$1 = $5;
  i64toi32_i32$0 = HEAP32[($5 + 18228 | 0) >> 2] | 0;
  i64toi32_i32$2 = HEAP32[($5 + 18232 | 0) >> 2] | 0;
  $20 = i64toi32_i32$0;
  $20$hi = i64toi32_i32$2;
  HEAP32[($5 + 18232 | 0) >> 2] = HEAP32[($5 + 18220 | 0) >> 2] | 0;
  $3 = $5 + 18212 | 0;
  i64toi32_i32$1 = $3;
  i64toi32_i32$2 = HEAP32[$3 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3 + 4 | 0) >> 2] | 0;
  $2294 = i64toi32_i32$2;
  i64toi32_i32$2 = $5;
  HEAP32[($5 + 18224 | 0) >> 2] = $2294;
  HEAP32[($5 + 18228 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[$3 >> 2] = $4;
  i64toi32_i32$0 = $20$hi;
  i64toi32_i32$2 = $5 + 18216 | 0;
  HEAP32[i64toi32_i32$2 >> 2] = $20;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
  $19 = 0;
  $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  HEAP8[($3 + 159 | 0) >> 0] = 0;
  label$150 : {
   $5 = HEAP32[($3 + 8 | 0) >> 2] | 0;
   if (!($5 & 2 | 0)) {
    break label$150
   }
   if (!((HEAPU8[($3 + 12 | 0) >> 0] | 0) & 1 | 0)) {
    break label$150
   }
   label$151 : {
    if (!(HEAPU8[($3 + 13476 | 0) >> 0] | 0)) {
     break label$151
    }
    if (HEAPU8[($3 + 17556 | 0) >> 0] | 0) {
     break label$151
    }
    HEAP32[($3 + 18700 | 0) >> 2] = 3;
   }
   label$152 : {
    if (!(HEAPU8[($3 + 13460 | 0) >> 0] | 0)) {
     break label$152
    }
    if (HEAPU8[($3 + 17544 | 0) >> 0] | 0) {
     break label$152
    }
    HEAP32[($3 + 18700 | 0) >> 2] = 3;
   }
   label$153 : {
    if (!(HEAPU8[($3 + 13492 | 0) >> 0] | 0)) {
     break label$153
    }
    if (HEAPU8[($3 + 17568 | 0) >> 0] | 0) {
     break label$153
    }
    HEAP32[($3 + 18700 | 0) >> 2] = 3;
   }
   label$154 : {
    if (!(HEAPU8[($3 + 13508 | 0) >> 0] | 0)) {
     break label$154
    }
    if (HEAPU8[($3 + 17580 | 0) >> 0] | 0) {
     break label$154
    }
    HEAP32[($3 + 18700 | 0) >> 2] = 3;
   }
   label$155 : {
    if (!(HEAPU8[($3 + 13540 | 0) >> 0] | 0)) {
     break label$155
    }
    if (HEAPU8[($3 + 17604 | 0) >> 0] | 0) {
     break label$155
    }
    HEAP32[($3 + 18700 | 0) >> 2] = 3;
   }
   label$156 : {
    if (!(HEAPU8[($3 + 13524 | 0) >> 0] | 0)) {
     break label$156
    }
    if (HEAPU8[($3 + 17592 | 0) >> 0] | 0) {
     break label$156
    }
    HEAP32[($3 + 18700 | 0) >> 2] = 3;
   }
   label$157 : {
    if (!(HEAPU8[($3 + 13556 | 0) >> 0] | 0)) {
     break label$157
    }
    if (HEAPU8[($3 + 17616 | 0) >> 0] | 0) {
     break label$157
    }
    HEAP32[($3 + 18700 | 0) >> 2] = 3;
   }
   $19 = 1;
   if (!(HEAPU8[($3 + 13572 | 0) >> 0] | 0)) {
    break label$150
   }
   if (HEAPU8[($3 + 17628 | 0) >> 0] | 0) {
    break label$150
   }
   HEAP32[($3 + 18700 | 0) >> 2] = 3;
  }
  label$158 : {
   $10 = $5 & 1 | 0;
   if (!$10) {
    break label$158
   }
   label$159 : {
    if (!(HEAPU8[($3 + 11940 | 0) >> 0] | 0)) {
     break label$159
    }
    if (HEAPU8[($3 + 16404 | 0) >> 0] | 0) {
     break label$159
    }
    HEAP32[($3 + 18700 | 0) >> 2] = 2;
   }
   label$160 : {
    if (!(HEAPU8[($3 + 11956 | 0) >> 0] | 0)) {
     break label$160
    }
    if (HEAPU8[($3 + 16416 | 0) >> 0] | 0) {
     break label$160
    }
    HEAP32[($3 + 18700 | 0) >> 2] = 2;
   }
   label$161 : {
    if (!(HEAPU8[($3 + 11972 | 0) >> 0] | 0)) {
     break label$161
    }
    if (HEAPU8[($3 + 16428 | 0) >> 0] | 0) {
     break label$161
    }
    HEAP32[($3 + 18700 | 0) >> 2] = 2;
   }
   label$162 : {
    if (!(HEAPU8[($3 + 11780 | 0) >> 0] | 0)) {
     break label$162
    }
    if (HEAPU8[($3 + 16284 | 0) >> 0] | 0) {
     break label$162
    }
    HEAP32[($3 + 18700 | 0) >> 2] = 2;
   }
   label$163 : {
    if (!(HEAPU8[($3 + 11764 | 0) >> 0] | 0)) {
     break label$163
    }
    if (HEAPU8[($3 + 16272 | 0) >> 0] | 0) {
     break label$163
    }
    HEAP32[($3 + 18700 | 0) >> 2] = 2;
   }
   label$164 : {
    if (!(HEAPU8[($3 + 11796 | 0) >> 0] | 0)) {
     break label$164
    }
    if (HEAPU8[($3 + 16296 | 0) >> 0] | 0) {
     break label$164
    }
    HEAP32[($3 + 18700 | 0) >> 2] = 2;
   }
   if (!(HEAPU8[($3 + 11812 | 0) >> 0] | 0)) {
    break label$158
   }
   if (HEAPU8[($3 + 16308 | 0) >> 0] | 0) {
    break label$158
   }
   HEAP32[($3 + 18700 | 0) >> 2] = 2;
  }
  label$165 : {
   $5 = HEAP32[($3 + 18716 | 0) >> 2] | 0;
   if (!$5) {
    break label$165
   }
   $2 = HEAP32[($3 + 18648 | 0) >> 2] | 0;
   if (!$2) {
    break label$165
   }
   label$166 : {
    label$167 : {
     if ((HEAPU8[($3 + 23536 | 0) >> 0] | 0) & 8 | 0) {
      break label$167
     }
     $4 = $3;
     break label$166;
    }
    $4 = HEAP32[($3 + 18704 | 0) >> 2] | 0;
    HEAP32[($0 + 104 | 0) >> 2] = HEAP32[$2 >> 2] | 0;
    HEAP32[($0 + 100 | 0) >> 2] = $4;
    HEAP32[($0 + 96 | 0) >> 2] = $5;
    ImGui__DebugLog_28char_20const__2c_20____29(70360 | 0, $0 + 96 | 0 | 0);
    $5 = HEAP32[($3 + 18716 | 0) >> 2] | 0;
    $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    $2 = HEAP32[($4 + 18648 | 0) >> 2] | 0;
   }
   $6 = HEAP32[($3 + 18704 | 0) >> 2] | 0;
   HEAP32[($4 + 18704 | 0) >> 2] = $6;
   HEAP32[($4 + 18652 | 0) >> 2] = $5;
   HEAP32[($4 + 18656 | 0) >> 2] = 0;
   HEAP32[(($2 + ($6 << 2 | 0) | 0) + 852 | 0) >> 2] = $5;
   $5 = $2 + ($6 << 4 | 0) | 0;
   i64toi32_i32$1 = $3 + 18728 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $2486 = i64toi32_i32$0;
   i64toi32_i32$0 = $5 + 868 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $2486;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$1 = $3;
   i64toi32_i32$2 = HEAP32[($3 + 18720 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($3 + 18724 | 0) >> 2] | 0;
   $2490 = i64toi32_i32$2;
   i64toi32_i32$2 = $5 + 860 | 0;
   HEAP32[i64toi32_i32$2 >> 2] = $2490;
   HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP8[($3 + 18708 | 0) >> 0] = 1;
   if (!(HEAPU8[($3 + 18714 | 0) >> 0] | 0)) {
    break label$165
   }
   HEAP8[($4 + 18711 | 0) >> 0] = 1;
   $72 = 1;
   HEAP8[($4 + 18709 | 0) >> 0] = $72;
   HEAP8[($4 + 18710 | 0) >> 0] = $72 >>> 8 | 0;
  }
  $14 = 0;
  HEAP32[($3 + 18716 | 0) >> 2] = 0;
  $73 = 0;
  HEAP8[($3 + 18713 | 0) >> 0] = $73;
  HEAP8[($3 + 18714 | 0) >> 0] = $73 >>> 8 | 0;
  HEAP32[($3 + 18680 | 0) >> 2] = 0;
  label$168 : {
   if (!(HEAPU8[($3 + 18736 | 0) >> 0] | 0)) {
    break label$168
   }
   ImGui__NavMoveRequestApplyResult_28_29();
  }
  HEAP32[($3 + 18804 | 0) >> 2] = 0;
  HEAP16[($3 + 18736 | 0) >> 1] = 0;
  label$169 : {
   if (!(HEAPU8[($3 + 18709 | 0) >> 0] | 0)) {
    break label$169
   }
   if (!(HEAPU8[($3 + 18708 | 0) >> 0] | 0)) {
    break label$169
   }
   if (HEAPU8[($3 + 18710 | 0) >> 0] | 0) {
    break label$169
   }
   if (!(HEAPU8[($3 + 18711 | 0) >> 0] | 0)) {
    break label$169
   }
   $14 = (HEAP32[($3 + 18648 | 0) >> 2] | 0 | 0) != (0 | 0);
  }
  HEAP8[($3 + 18709 | 0) >> 0] = 0;
  label$170 : {
   $4 = HEAP32[($3 + 18648 | 0) >> 2] | 0;
   if (!$4) {
    break label$170
   }
   $5 = $4;
   label$171 : {
    label$172 : {
     label$173 : while (1) {
      if ((HEAP32[($5 + 828 | 0) >> 2] | 0 | 0) == ($5 | 0)) {
       break label$172
      }
      if ((HEAPU8[($5 + 11 | 0) >> 0] | 0) & 20 | 0) {
       break label$172
      }
      $5 = HEAP32[($5 + 820 | 0) >> 2] | 0;
      if ($5) {
       continue label$173
      }
      break label$171;
     };
    }
    if (($5 | 0) == ($4 | 0)) {
     break label$171
    }
    HEAP32[($5 + 848 | 0) >> 2] = $4;
   }
   if (!(HEAP32[($4 + 848 | 0) >> 2] | 0)) {
    break label$170
   }
   if (HEAP32[($3 + 18704 | 0) >> 2] | 0) {
    break label$170
   }
   HEAP32[($4 + 848 | 0) >> 2] = 0;
  }
  $12 = 1;
  label$174 : {
   $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $5 = HEAP32[($4 + 18548 | 0) >> 2] | 0;
   if (($5 | 0) < (1 | 0)) {
    break label$174
   }
   $15 = HEAP32[($4 + 18556 | 0) >> 2] | 0;
   label$175 : {
    label$176 : while (1) {
     label$177 : {
      $2 = $5 + -1 | 0;
      $6 = HEAP32[(($15 + Math_imul($2, 40) | 0) + 4 | 0) >> 2] | 0;
      if (!$6) {
       break label$177
      }
      if ((HEAPU8[($6 + 11 | 0) >> 0] | 0) & 8 | 0) {
       break label$175
      }
     }
     $6 = $5 >>> 0 < 2 >>> 0;
     $5 = $2;
     if (!$6) {
      continue label$176
     }
     break label$174;
    };
   }
   $12 = 0;
   HEAP32[($4 + 18992 | 0) >> 2] = 0;
  }
  label$178 : {
   if (!(HEAP32[($4 + 18996 | 0) >> 2] | 0)) {
    break label$178
   }
   if (HEAP32[($4 + 18992 | 0) >> 2] | 0) {
    break label$178
   }
   $7 = Math_fround(Math_fround(HEAPF32[($4 + 19008 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($4 + 24 | 0) >> 2]) * Math_fround(-10.0)));
   $7 = $7 >= Math_fround(0.0) ? $7 : Math_fround(0.0);
   HEAPF32[($4 + 19008 | 0) >> 2] = $7;
   if (!(Math_fround(HEAPF32[($4 + 19032 | 0) >> 2]) <= Math_fround(0.0))) {
    break label$178
   }
   if (!($7 <= Math_fround(0.0))) {
    break label$178
   }
   HEAP32[($4 + 18996 | 0) >> 2] = 0;
  }
  $18 = 0;
  $5 = 0;
  label$179 : {
   $17 = HEAP32[($4 + 8 | 0) >> 2] | 0;
   if (!($17 & 2 | 0)) {
    break label$179
   }
   $5 = (HEAPU8[($4 + 12 | 0) >> 0] | 0) & 1 | 0;
  }
  $9 = 0;
  $11 = 0;
  $16 = 0;
  label$180 : {
   if (!$12) {
    break label$180
   }
   $11 = 0;
   $9 = 0;
   label$181 : {
    $2 = HEAP32[($4 + 18984 | 0) >> 2] | 0;
    if (!$2) {
     break label$181
    }
    label$182 : {
     if (!($2 & 2048 | 0)) {
      break label$182
     }
     $2 = (HEAPU8[($4 + 105 | 0) >> 0] | 0 ? 32768 : 4096) | ($2 & -2049 | 0) | 0;
    }
    $9 = 0;
    $6 = $2 & 63488 | 0;
    if ((HEAP32[($4 + 3552 | 0) >> 2] | 0 | 0) != ($6 | 0)) {
     break label$181
    }
    label$183 : {
     $2 = $2 & -63489 | 0;
     if ($2) {
      break label$183
     }
     label$184 : {
      label$185 : {
       label$186 : {
        if (($6 | 0) > (8191 | 0)) {
         break label$186
        }
        if (($6 | 0) == (2048 | 0)) {
         break label$185
        }
        $2 = 648;
        if (($6 | 0) == (4096 | 0)) {
         break label$183
        }
        break label$184;
       }
       label$187 : {
        if (($6 | 0) == (32768 | 0)) {
         break label$187
        }
        label$188 : {
         if (($6 | 0) == (16384 | 0)) {
          break label$188
         }
         if (($6 | 0) != (8192 | 0)) {
          break label$184
         }
         $2 = 649;
         break label$183;
        }
        $2 = 650;
        break label$183;
       }
       $2 = 651;
       break label$183;
      }
      $2 = HEAPU8[($4 + 105 | 0) >> 0] | 0 ? 651 : 648;
      break label$183;
     }
     $2 = $6;
    }
    $9 = ImGui__IsKeyPressed_28ImGuiKey_2c_20unsigned_20int_2c_20int_29($2 | 0, -1 | 0, 1 | 0) | 0;
   }
   label$189 : {
    $2 = HEAP32[($4 + 18988 | 0) >> 2] | 0;
    if (!$2) {
     break label$189
    }
    label$190 : {
     if (!($2 & 2048 | 0)) {
      break label$190
     }
     $2 = (HEAPU8[($4 + 105 | 0) >> 0] | 0 ? 32768 : 4096) | ($2 & -2049 | 0) | 0;
    }
    $6 = $2 & 63488 | 0;
    if ((HEAP32[($4 + 3552 | 0) >> 2] | 0 | 0) != ($6 | 0)) {
     break label$189
    }
    label$191 : {
     $2 = $2 & -63489 | 0;
     if ($2) {
      break label$191
     }
     label$192 : {
      label$193 : {
       label$194 : {
        if (($6 | 0) > (8191 | 0)) {
         break label$194
        }
        if (($6 | 0) == (2048 | 0)) {
         break label$193
        }
        $2 = 648;
        if (($6 | 0) == (4096 | 0)) {
         break label$191
        }
        break label$192;
       }
       label$195 : {
        if (($6 | 0) == (32768 | 0)) {
         break label$195
        }
        label$196 : {
         if (($6 | 0) == (16384 | 0)) {
          break label$196
         }
         if (($6 | 0) != (8192 | 0)) {
          break label$192
         }
         $2 = 649;
         break label$191;
        }
        $2 = 650;
        break label$191;
       }
       $2 = 651;
       break label$191;
      }
      $2 = HEAPU8[($4 + 105 | 0) >> 0] | 0 ? 651 : 648;
      break label$191;
     }
     $2 = $6;
    }
    $11 = ImGui__IsKeyPressed_28ImGuiKey_2c_20unsigned_20int_2c_20int_29($2 | 0, -1 | 0, 1 | 0) | 0;
   }
   $18 = 0;
   label$197 : {
    $2 = HEAP32[($4 + 18992 | 0) >> 2] | 0;
    if (($5 & !$2 | 0 | 0) != (1 | 0)) {
     break label$197
    }
    label$198 : {
     if (!(HEAPU8[($4 + 13460 | 0) >> 0] | 0)) {
      break label$198
     }
     if (Math_fround(HEAPF32[($4 + 13464 | 0) >> 2]) != Math_fround(0.0)) {
      break label$198
     }
     $18 = !(HEAPU8[($4 + 17544 | 0) >> 0] | 0);
     $2 = 0;
     break label$197;
    }
    $2 = 0;
    $18 = 0;
   }
   $16 = ($9 | $11 | 0) & !$2 | 0;
  }
  label$199 : {
   label$200 : {
    if ($18) {
     break label$200
    }
    if (!$16) {
     break label$199
    }
   }
   label$201 : {
    label$202 : {
     $5 = HEAP32[($4 + 18648 | 0) >> 2] | 0;
     if (!$5) {
      break label$202
     }
     $5 = HEAP32[($5 + 828 | 0) >> 2] | 0;
     break label$201;
    }
    $2 = HEAP32[($4 + 16056 | 0) >> 2] | 0;
    if (($2 | 0) < (1 | 0)) {
     break label$199
    }
    $15 = HEAP32[($4 + 16064 | 0) >> 2] | 0;
    label$203 : while (1) {
     label$204 : {
      $6 = $2;
      $2 = $2 + -1 | 0;
      $5 = HEAP32[($15 + ($2 << 2 | 0) | 0) >> 2] | 0;
      if (!(HEAPU8[($5 + 220 | 0) >> 0] | 0)) {
       break label$204
      }
      if ((HEAP32[($5 + 828 | 0) >> 2] | 0 | 0) != ($5 | 0)) {
       break label$204
      }
      if (!((HEAPU8[($5 + 10 | 0) >> 0] | 0) & 8 | 0)) {
       break label$201
      }
     }
     if ($6 >>> 0 > 1 >>> 0) {
      continue label$203
     }
     break label$199;
    };
   }
   HEAP32[($4 + 18992 | 0) >> 2] = $5;
   HEAP32[($4 + 18996 | 0) >> 2] = $5;
   i64toi32_i32$2 = $4;
   i64toi32_i32$0 = 0;
   HEAP32[($4 + 19016 | 0) >> 2] = 0;
   HEAP32[($4 + 19020 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $4;
   i64toi32_i32$0 = 0;
   HEAP32[($4 + 19004 | 0) >> 2] = 0;
   HEAP32[($4 + 19008 | 0) >> 2] = i64toi32_i32$0;
   HEAP8[($4 + 19012 | 0) >> 0] = $18;
   i64toi32_i32$2 = $4 + 19024 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$2 >> 2] = 0;
   HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($4 + 18700 | 0) >> 2] = $16 ? 2 : 3;
  }
  $5 = $17 & 1 | 0;
  $8 = Math_fround(HEAPF32[($4 + 24 | 0) >> 2]);
  $7 = Math_fround($8 + Math_fround(HEAPF32[($4 + 19004 | 0) >> 2]));
  HEAPF32[($4 + 19004 | 0) >> 2] = $7;
  label$205 : {
   label$206 : {
    $15 = HEAP32[($4 + 18992 | 0) >> 2] | 0;
    if (!$15) {
     break label$206
    }
    label$207 : {
     $18 = HEAP32[($4 + 18700 | 0) >> 2] | 0;
     if (($18 | 0) != (3 | 0)) {
      break label$207
     }
     $22 = Math_fround(HEAPF32[($4 + 19008 | 0) >> 2]);
     $7 = Math_fround(Math_fround($7 + Math_fround(-.20000000298023224)) / Math_fround(.05000000074505806));
     $7 = $7 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($7, Math_fround(1.0)));
     $7 = $22 >= $7 ? $22 : $7;
     HEAPF32[($4 + 19008 | 0) >> 2] = $7;
     $15 = 0;
     $6 = 0;
     label$208 : {
      if (!(HEAPU8[($4 + 13588 | 0) >> 0] | 0)) {
       break label$208
      }
      $6 = 0;
      $22 = Math_fround(HEAPF32[($4 + 13592 | 0) >> 2]);
      if ($22 < Math_fround(0.0)) {
       break label$208
      }
      label$209 : {
       if ($22 == Math_fround(0.0)) {
        break label$209
       }
       $6 = 0;
       $23 = Math_fround(HEAPF32[($4 + 52 | 0) >> 2]);
       if (!($22 > $23)) {
        break label$208
       }
       $6 = 0;
       $24 = Math_fround($22 - $8);
       if ($24 >= $22) {
        break label$208
       }
       label$210 : {
        $25 = Math_fround(HEAPF32[($4 + 56 | 0) >> 2]);
        if (!($25 <= Math_fround(0.0))) {
         break label$210
        }
        $6 = 0;
        if (!($22 >= $23)) {
         break label$208
        }
        $6 = 0;
        if ($24 < $23) {
         break label$209
        }
        break label$208;
       }
       $2 = -1;
       $18 = -1;
       label$211 : {
        if ($24 < $23) {
         break label$211
        }
        label$212 : {
         $24 = Math_fround(Math_fround($24 - $23) / $25);
         if (!(Math_fround(Math_abs($24)) < Math_fround(2147483648.0))) {
          break label$212
         }
         $18 = ~~$24;
         break label$211;
        }
        $18 = -2147483648;
       }
       label$213 : {
        if ($22 < $23) {
         break label$213
        }
        label$214 : {
         $22 = Math_fround(Math_fround($22 - $23) / $25);
         if (!(Math_fround(Math_abs($22)) < Math_fround(2147483648.0))) {
          break label$214
         }
         $2 = ~~$22;
         break label$213;
        }
        $2 = -2147483648;
       }
       $6 = 0;
       if (($2 | 0) <= ($18 | 0)) {
        break label$208
       }
      }
      $6 = !(HEAPU8[($4 + 17640 | 0) >> 0] | 0);
     }
     label$215 : {
      if (!(HEAPU8[($4 + 13604 | 0) >> 0] | 0)) {
       break label$215
      }
      $22 = Math_fround(HEAPF32[($4 + 13608 | 0) >> 2]);
      if ($22 < Math_fround(0.0)) {
       break label$215
      }
      label$216 : {
       if ($22 == Math_fround(0.0)) {
        break label$216
       }
       $23 = Math_fround(HEAPF32[($4 + 52 | 0) >> 2]);
       if (!($22 > $23)) {
        break label$215
       }
       $8 = Math_fround($22 - $8);
       if ($8 >= $22) {
        break label$215
       }
       label$217 : {
        $24 = Math_fround(HEAPF32[($4 + 56 | 0) >> 2]);
        if (!($24 <= Math_fround(0.0))) {
         break label$217
        }
        if (!($22 >= $23)) {
         break label$215
        }
        if ($8 < $23) {
         break label$216
        }
        break label$215;
       }
       $2 = -1;
       $18 = -1;
       label$218 : {
        if ($8 < $23) {
         break label$218
        }
        label$219 : {
         $8 = Math_fround(Math_fround($8 - $23) / $24);
         if (!(Math_fround(Math_abs($8)) < Math_fround(2147483648.0))) {
          break label$219
         }
         $18 = ~~$8;
         break label$218;
        }
        $18 = -2147483648;
       }
       label$220 : {
        if ($22 < $23) {
         break label$220
        }
        label$221 : {
         $8 = Math_fround(Math_fround($22 - $23) / $24);
         if (!(Math_fround(Math_abs($8)) < Math_fround(2147483648.0))) {
          break label$221
         }
         $2 = ~~$8;
         break label$220;
        }
        $2 = -2147483648;
       }
       if (($2 | 0) <= ($18 | 0)) {
        break label$215
       }
      }
      $15 = !(HEAPU8[($4 + 17652 | 0) >> 0] | 0);
     }
     $2 = $4;
     label$222 : {
      $6 = $6 - $15 | 0;
      if (!$6) {
       break label$222
      }
      NavUpdateWindowingHighlightWindow_28int_29($6 | 0);
      HEAP32[($4 + 19008 | 0) >> 2] = 1065353216;
      $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      $7 = Math_fround(1.0);
     }
     label$223 : {
      label$224 : {
       if (!(HEAPU8[($2 + 13460 | 0) >> 0] | 0)) {
        break label$224
       }
       if (!(HEAPU8[($2 + 17544 | 0) >> 0] | 0)) {
        break label$223
       }
      }
      $6 = 0;
      $2 = $7 < Math_fround(1.0) & (HEAPU8[($4 + 19012 | 0) >> 0] | 0 | 0) != (0 | 0) | 0;
      HEAP8[($4 + 19012 | 0) >> 0] = $2;
      label$225 : {
       label$226 : {
        if (($2 | 0) != (1 | 0)) {
         break label$226
        }
        $2 = 0;
        $6 = (HEAP32[($4 + 18648 | 0) >> 2] | 0 | 0) != (0 | 0);
        break label$225;
       }
       $2 = HEAP32[($4 + 18992 | 0) >> 2] | 0;
      }
      HEAP32[($4 + 18992 | 0) >> 2] = 0;
      break label$205;
     }
     $15 = HEAP32[($4 + 18992 | 0) >> 2] | 0;
     if (!$15) {
      break label$206
     }
     $18 = HEAP32[($4 + 18700 | 0) >> 2] | 0;
    }
    $6 = 0;
    $2 = 0;
    if (($18 | 0) != (2 | 0)) {
     break label$205
    }
    $7 = Math_fround(HEAPF32[($4 + 19008 | 0) >> 2]);
    $8 = Math_fround(Math_fround(Math_fround(HEAPF32[($4 + 19004 | 0) >> 2]) + Math_fround(-.20000000298023224)) / Math_fround(.05000000074505806));
    $8 = $8 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($8, Math_fround(1.0)));
    HEAPF32[($4 + 19008 | 0) >> 2] = $7 >= $8 ? $7 : $8;
    label$227 : {
     if (($9 | $11 | 0 | 0) != (1 | 0)) {
      break label$227
     }
     NavUpdateWindowingHighlightWindow_28int_29(($9 ? -1 : 1) | 0);
     break label$206;
    }
    $6 = 0;
    $2 = HEAP32[($4 + 18988 | 0) >> 2] | 0;
    $3027 = $2 ? $2 : 63488;
    $2 = HEAP32[($4 + 18984 | 0) >> 2] | 0;
    $2 = $3027 & ($2 ? $2 & 63488 | 0 : 63488) | 0;
    $2 = ((HEAP32[($4 + 3552 | 0) >> 2] | 0) & $2 | 0 | 0) == ($2 | 0) ? 0 : $15;
    break label$205;
   }
   $6 = 0;
   $2 = 0;
  }
  label$228 : {
   if (!$5) {
    break label$228
   }
   $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   if (!(HEAPU8[($5 + 13956 | 0) >> 0] | 0)) {
    break label$228
   }
   if (Math_fround(HEAPF32[($5 + 13960 | 0) >> 2]) != Math_fround(0.0)) {
    break label$228
   }
   if ((HEAP32[($5 + 17908 | 0) >> 2] | 0 | 0) != (-1 | 0)) {
    break label$228
   }
   HEAP32[($4 + 18700 | 0) >> 2] = 2;
   HEAP8[($4 + 19012 | 0) >> 0] = 1;
  }
  label$229 : {
   if (!(HEAPU8[($4 + 19012 | 0) >> 0] | 0)) {
    break label$229
   }
   if ((HEAP32[($4 + 18700 | 0) >> 2] | 0 | 0) != (2 | 0)) {
    break label$229
   }
   label$230 : {
    label$231 : {
     if ((HEAP32[($4 + 14240 | 0) >> 2] | 0 | 0) > (0 | 0)) {
      break label$231
     }
     if (HEAPU8[($4 + 3548 | 0) >> 0] | 0) {
      break label$231
     }
     if (HEAPU8[($4 + 3549 | 0) >> 0] | 0) {
      break label$231
     }
     if (HEAPU8[($4 + 3551 | 0) >> 0] | 0) {
      break label$231
     }
     $18 = 0;
     $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if ((HEAP32[($5 + 17908 | 0) >> 2] | 0 | 0) == (-1 | 0)) {
      break label$230
     }
    }
    HEAP8[($4 + 19012 | 0) >> 0] = 0;
    $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    $18 = 1;
   }
   $15 = HEAPU8[($5 + 13956 | 0) >> 0] | 0;
   label$232 : {
    label$233 : {
     label$234 : {
      if (Math_fround(HEAPF32[($5 + 13964 | 0) >> 2]) < Math_fround(0.0)) {
       break label$234
      }
      if ($15 & 255 | 0) {
       break label$233
      }
      if ($18 | (HEAPU8[($5 + 17916 | 0) >> 0] | 0 | 0) != (0 | 0) | 0) {
       break label$232
      }
      label$235 : {
       if (!(HEAP32[($4 + 16192 | 0) >> 2] | 0)) {
        break label$235
       }
       if (!(HEAPU8[($4 + 16205 | 0) >> 0] | 0)) {
        break label$232
       }
      }
      $6 = ((Math_fround(HEAPF32[($4 + 3520 | 0) >> 2]) >= Math_fround(-256.0e3) & Math_fround(HEAPF32[($4 + 3524 | 0) >> 2]) >= Math_fround(-256.0e3) | 0) ^ (Math_fround(HEAPF32[($4 + 13992 | 0) >> 2]) >= Math_fround(-256.0e3) & Math_fround(HEAPF32[($4 + 13996 | 0) >> 2]) >= Math_fround(-256.0e3) | 0) | 0) ^ 1 | 0 | $6 | 0;
      break label$232;
     }
     if (!($15 & 255 | 0)) {
      break label$232
     }
    }
    if (!(HEAPU8[($5 + 17916 | 0) >> 0] | 0)) {
     break label$229
    }
   }
   HEAP8[($4 + 19012 | 0) >> 0] = 0;
  }
  label$236 : {
   $5 = HEAP32[($4 + 18992 | 0) >> 2] | 0;
   if (!$5) {
    break label$236
   }
   if ((HEAPU8[($5 + 8 | 0) >> 0] | 0) & 4 | 0) {
    break label$236
   }
   $7 = Math_fround(0.0);
   $8 = Math_fround(0.0);
   label$237 : {
    label$238 : {
     label$239 : {
      switch ((HEAP32[($4 + 18700 | 0) >> 2] | 0) + -2 | 0 | 0) {
      case 0:
       $7 = Math_fround(0.0);
       $8 = Math_fround(0.0);
       if (HEAPU8[($4 + 3549 | 0) >> 0] | 0) {
        break label$237
       }
       $15 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
       $7 = Math_fround(Math_fround(HEAPF32[($15 + 11792 | 0) >> 2]) - Math_fround(HEAPF32[($15 + 11776 | 0) >> 2]));
       $18 = $15 + 11808 | 0;
       $15 = $15 + 11824 | 0;
       break label$238;
      case 1:
       break label$239;
      default:
       break label$237;
      };
     }
     $15 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     $7 = Math_fround(Math_fround(HEAPF32[($15 + 13712 | 0) >> 2]) - Math_fround(HEAPF32[($15 + 13696 | 0) >> 2]));
     $18 = $15 + 13728 | 0;
     $15 = $15 + 13744 | 0;
    }
    $8 = Math_fround(Math_fround(HEAPF32[$15 >> 2]) - Math_fround(HEAPF32[$18 >> 2]));
   }
   label$241 : {
    if ($7 != Math_fround(0.0)) {
     break label$241
    }
    if ($8 == Math_fround(0.0)) {
     break label$236
    }
   }
   HEAP8[($4 + 18711 | 0) >> 0] = 1;
   $22 = Math_fround(HEAPF32[($4 + 88 | 0) >> 2]);
   $23 = Math_fround(HEAPF32[($4 + 92 | 0) >> 2]);
   $22 = Math_fround(Math_fround(Math_fround(HEAPF32[($4 + 24 | 0) >> 2]) * Math_fround(800.0)) * ($22 < $23 ? $22 : $23));
   $7 = Math_fround(Math_fround(HEAPF32[($4 + 19016 | 0) >> 2]) + Math_fround($7 * $22));
   HEAPF32[($4 + 19016 | 0) >> 2] = $7;
   $15 = $4 + 19020 | 0;
   $8 = Math_fround(Math_fround(HEAPF32[$15 >> 2]) + Math_fround($8 * $22));
   HEAPF32[$15 >> 2] = $8;
   label$242 : {
    label$243 : {
     if (!(Math_fround(Math_abs($8)) < Math_fround(2147483648.0))) {
      break label$243
     }
     $15 = ~~$8;
     break label$242;
    }
    $15 = -2147483648;
   }
   label$244 : {
    label$245 : {
     if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
      break label$245
     }
     $18 = ~~$7;
     break label$244;
    }
    $18 = -2147483648;
   }
   if (!($18 | $15 | 0)) {
    break label$236
   }
   $7 = Math_fround($15 | 0);
   $8 = Math_fround($18 | 0);
   label$246 : {
    $5 = HEAP32[($5 + 836 | 0) >> 2] | 0;
    $15 = HEAP32[($5 + 260 | 0) >> 2] | 0;
    if (!($15 & 1 | 0)) {
     break label$246
    }
    i64toi32_i32$2 = $5;
    i64toi32_i32$0 = 2139095039;
    HEAP32[($5 + 264 | 0) >> 2] = 2139095039;
    HEAP32[($5 + 268 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($5 + 260 | 0) >> 2] = $15 & -15 | 0;
    label$247 : {
     label$248 : {
      $15 = $5 + 68 | 0;
      $22 = Math_fround(HEAPF32[$15 >> 2]);
      $23 = Math_fround($22 + $7);
      if (!(Math_fround(Math_abs($23)) < Math_fround(2147483648.0))) {
       break label$248
      }
      $18 = ~~$23;
      break label$247;
     }
     $18 = -2147483648;
    }
    $23 = Math_fround($18 | 0);
    HEAPF32[$15 >> 2] = $23;
    label$249 : {
     label$250 : {
      $15 = $5 + 64 | 0;
      $24 = Math_fround(HEAPF32[$15 >> 2]);
      $25 = Math_fround($24 + $8);
      if (!(Math_fround(Math_abs($25)) < Math_fround(2147483648.0))) {
       break label$250
      }
      $18 = ~~$25;
      break label$249;
     }
     $18 = -2147483648;
    }
    $25 = Math_fround($18 | 0);
    HEAPF32[$15 >> 2] = $25;
    $22 = Math_fround($23 - $22);
    label$251 : {
     $23 = Math_fround($25 - $24);
     if ($23 != Math_fround(0.0)) {
      break label$251
     }
     if ($22 == Math_fround(0.0)) {
      break label$246
     }
    }
    label$252 : {
     if ((HEAPU8[($5 + 9 | 0) >> 0] | 0) & 1 | 0) {
      break label$252
     }
     $15 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!(Math_fround(HEAPF32[($15 + 23384 | 0) >> 2]) <= Math_fround(0.0))) {
      break label$252
     }
     HEAPF32[($15 + 23384 | 0) >> 2] = Math_fround(HEAPF32[($15 + 28 | 0) >> 2]);
    }
    HEAPF32[($5 + 292 | 0) >> 2] = Math_fround($23 + Math_fround(HEAPF32[($5 + 292 | 0) >> 2]));
    $15 = $5 + 296 | 0;
    HEAPF32[$15 >> 2] = Math_fround($22 + Math_fround(HEAPF32[$15 >> 2]));
    $15 = $5 + 316 | 0;
    HEAPF32[$15 >> 2] = Math_fround($23 + Math_fround(HEAPF32[$15 >> 2]));
    $15 = $5 + 320 | 0;
    HEAPF32[$15 >> 2] = Math_fround($22 + Math_fround(HEAPF32[$15 >> 2]));
    $15 = $5 + 324 | 0;
    HEAPF32[$15 >> 2] = Math_fround($23 + Math_fround(HEAPF32[$15 >> 2]));
    $15 = $5 + 328 | 0;
    HEAPF32[$15 >> 2] = Math_fround($22 + Math_fround(HEAPF32[$15 >> 2]));
    $15 = $5 + 308 | 0;
    HEAPF32[$15 >> 2] = Math_fround($23 + Math_fround(HEAPF32[$15 >> 2]));
    $5 = $5 + 312 | 0;
    HEAPF32[$5 >> 2] = Math_fround($22 + Math_fround(HEAPF32[$5 >> 2]));
   }
   HEAPF32[($4 + 19016 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4 + 19016 | 0) >> 2]) - $8);
   HEAPF32[($4 + 19020 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4 + 19020 | 0) >> 2]) - $7);
  }
  label$253 : {
   if (!$2) {
    break label$253
   }
   $15 = 0;
   label$254 : {
    label$255 : {
     $5 = HEAP32[($4 + 18648 | 0) >> 2] | 0;
     if (!$5) {
      break label$255
     }
     if (($2 | 0) == (HEAP32[($5 + 828 | 0) >> 2] | 0 | 0)) {
      break label$254
     }
     $15 = HEAP32[($5 + 44 | 0) >> 2] | 0;
    }
    ImGui__SetActiveID_28unsigned_20int_2c_20ImGuiWindow__29(0 | 0, 0 | 0);
    $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    HEAP8[($5 + 18711 | 0) >> 0] = 1;
    $74 = 1;
    HEAP8[($5 + 18709 | 0) >> 0] = $74;
    HEAP8[($5 + 18710 | 0) >> 0] = $74 >>> 8 | 0;
    label$256 : {
     label$257 : {
      $5 = HEAP32[($2 + 848 | 0) >> 2] | 0;
      if (!$5) {
       break label$257
      }
      if (HEAPU8[($5 + 220 | 0) >> 0] | 0) {
       break label$256
      }
     }
     label$258 : {
      $5 = HEAP32[($2 + 936 | 0) >> 2] | 0;
      if ($5) {
       break label$258
      }
      $5 = $2;
      break label$256;
     }
     label$259 : {
      $18 = HEAP32[($5 + 48 | 0) >> 2] | 0;
      if ($18) {
       break label$259
      }
      $5 = $2;
      break label$256;
     }
     $5 = $2;
     $2 = ImGui__TabBarFindMostRecentlySelectedTabForActiveWindow_28ImGuiTabBar__29($18 | 0) | 0;
     if (!$2) {
      break label$256
     }
     $5 = HEAP32[($2 + 8 | 0) >> 2] | 0;
    }
    ImGui__ClosePopupsOverWindow_28ImGuiWindow__2c_20bool_29($5 | 0, 0 | 0);
    ImGui__FocusWindow_28ImGuiWindow__29($5 | 0);
    label$260 : {
     if (HEAP32[($5 + 852 | 0) >> 2] | 0) {
      break label$260
     }
     ImGui__NavInitWindow_28ImGuiWindow__2c_20bool_29($5 | 0, 0 | 0);
    }
    label$261 : {
     if ((HEAPU16[($5 + 386 | 0) >> 1] | 0 | 0) != (2 | 0)) {
      break label$261
     }
     HEAP32[($4 + 18704 | 0) >> 2] = 1;
    }
    $5 = HEAP32[($5 + 44 | 0) >> 2] | 0;
    if (($5 | 0) == ($15 | 0)) {
     break label$254
    }
    $2 = HEAP32[($4 + 14284 | 0) >> 2] | 0;
    if (!$2) {
     break label$254
    }
    FUNCTION_TABLE[$2 | 0]($5);
   }
   HEAP32[($4 + 18992 | 0) >> 2] = 0;
  }
  label$262 : {
   if (!$6) {
    break label$262
   }
   if (!(HEAP32[($4 + 18648 | 0) >> 2] | 0)) {
    break label$262
   }
   ImGui__SetActiveID_28unsigned_20int_2c_20ImGuiWindow__29(0 | 0, 0 | 0);
   $6 = HEAP32[($4 + 18648 | 0) >> 2] | 0;
   $2 = $6;
   label$263 : {
    label$264 : while (1) {
     $5 = $2;
     $2 = HEAP32[($5 + 820 | 0) >> 2] | 0;
     if (!$2) {
      break label$263
     }
     if ((HEAPU8[($5 + 384 | 0) >> 0] | 0) & 2 | 0) {
      break label$263
     }
     if (((HEAP32[($5 + 8 | 0) >> 2] | 0) & 352321536 | 0 | 0) == (16777216 | 0)) {
      continue label$264
     }
     break label$264;
    };
   }
   label$265 : {
    if (($5 | 0) == ($6 | 0)) {
     break label$265
    }
    ImGui__FocusWindow_28ImGuiWindow__29($5 | 0);
    HEAP32[($5 + 848 | 0) >> 2] = $6;
    $6 = HEAP32[($4 + 18648 | 0) >> 2] | 0;
   }
   $4 = HEAP32[($4 + 18704 | 0) >> 2] | 0;
   label$266 : {
    label$267 : {
     if ((HEAPU8[($6 + 384 | 0) >> 0] | 0) & 2 | 0) {
      break label$267
     }
     $2 = 0;
     if ($4) {
      break label$266
     }
     break label$262;
    }
    $2 = 1;
    label$268 : {
     if (!$4) {
      break label$268
     }
     $2 = $4 ^ 1 | 0;
     break label$266;
    }
    if (HEAP32[($5 + 936 | 0) >> 2] | 0) {
     break label$266
    }
    HEAP32[($6 + 856 | 0) >> 2] = 0;
   }
   ImGui__NavRestoreLayer_28ImGuiNavLayer_29($2 | 0);
   $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   HEAP8[($5 + 18711 | 0) >> 0] = 1;
   $75 = 1;
   HEAP8[($5 + 18709 | 0) >> 0] = $75;
   HEAP8[($5 + 18710 | 0) >> 0] = $75 >>> 8 | 0;
  }
  label$269 : {
   label$270 : {
    label$271 : {
     $15 = ($10 | 0) != (0 | 0) | $19 | 0;
     if (($15 | 0) != (1 | 0)) {
      break label$271
     }
     $5 = HEAP32[($3 + 18648 | 0) >> 2] | 0;
     if (!$5) {
      break label$271
     }
     $5 = (HEAP32[($5 + 8 | 0) >> 2] | 0) & 262144 | 0;
     HEAP8[($3 + 161 | 0) >> 0] = !$5;
     if ($5) {
      break label$270
     }
     if (!(HEAP32[($3 + 18652 | 0) >> 2] | 0)) {
      break label$270
     }
     if (HEAPU8[($3 + 18710 | 0) >> 0] | 0) {
      break label$270
     }
     $5 = 1;
     break label$269;
    }
    HEAP8[($3 + 161 | 0) >> 0] = 0;
   }
   $5 = (HEAP32[($3 + 18992 | 0) >> 2] | 0 | 0) != (0 | 0);
  }
  HEAP8[($3 + 162 | 0) >> 0] = $5;
  $4 = 0;
  label$272 : {
   $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $2 = HEAP32[($5 + 8 | 0) >> 2] | 0;
   if (!($2 & 2 | 0)) {
    break label$272
   }
   $4 = (HEAPU8[($5 + 12 | 0) >> 0] | 0) & 1 | 0;
  }
  label$273 : {
   label$274 : {
    label$275 : {
     if (!($2 & 1 | 0)) {
      break label$275
     }
     if (!(HEAPU8[($5 + 11972 | 0) >> 0] | 0)) {
      break label$275
     }
     if (Math_fround(HEAPF32[($5 + 11976 | 0) >> 2]) != Math_fround(0.0)) {
      break label$275
     }
     label$276 : {
      if (!(HEAPU8[($5 + 18240 | 0) >> 0] | 0)) {
       break label$276
      }
      if ((HEAP32[($5 + 16192 | 0) >> 2] | 0 | 0) != (-1 | 0)) {
       break label$275
      }
     }
     if ((HEAP32[($5 + 16420 | 0) >> 2] | 0 | 0) == (-1 | 0)) {
      break label$274
     }
    }
    if (!$4) {
     break label$273
    }
    if (!(HEAPU8[($5 + 13476 | 0) >> 0] | 0)) {
     break label$273
    }
    if (Math_fround(HEAPF32[($5 + 13480 | 0) >> 2]) != Math_fround(0.0)) {
     break label$273
    }
    if ((HEAP32[($5 + 17548 | 0) >> 2] | 0 | 0) != (-1 | 0)) {
     break label$273
    }
   }
   label$277 : {
    if (!((HEAPU8[($5 + 23536 | 0) >> 0] | 0) & 8 | 0)) {
     break label$277
    }
    ImGui__DebugLog_28char_20const__2c_20____29(69716 | 0, 0 | 0);
   }
   label$278 : {
    if (!(HEAP32[($5 + 16192 | 0) >> 2] | 0)) {
     break label$278
    }
    ImGui__SetActiveID_28unsigned_20int_2c_20ImGuiWindow__29(0 | 0, 0 | 0);
    break label$273;
   }
   label$279 : {
    if (!(HEAP32[($5 + 18704 | 0) >> 2] | 0)) {
     break label$279
    }
    ImGui__NavRestoreLayer_28ImGuiNavLayer_29(0 | 0);
    $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    HEAP8[($5 + 18711 | 0) >> 0] = 1;
    $76 = 1;
    HEAP8[($5 + 18709 | 0) >> 0] = $76;
    HEAP8[($5 + 18710 | 0) >> 0] = $76 >>> 8 | 0;
    break label$273;
   }
   label$280 : {
    $4 = HEAP32[($5 + 18648 | 0) >> 2] | 0;
    if (!$4) {
     break label$280
    }
    if (($4 | 0) == (HEAP32[($4 + 828 | 0) >> 2] | 0 | 0)) {
     break label$280
    }
    if ((HEAPU8[($4 + 11 | 0) >> 0] | 0) & 4 | 0) {
     break label$280
    }
    $2 = HEAP32[($4 + 820 | 0) >> 2] | 0;
    if (!$2) {
     break label$280
    }
    $24 = Math_fround(HEAPF32[($4 + 76 | 0) >> 2]);
    $7 = Math_fround(HEAPF32[($4 + 68 | 0) >> 2]);
    $25 = Math_fround(HEAPF32[($4 + 72 | 0) >> 2]);
    $8 = Math_fround(HEAPF32[($4 + 64 | 0) >> 2]);
    ImGui__FocusWindow_28ImGuiWindow__29($2 | 0);
    $22 = Math_fround(HEAPF32[($2 + 308 | 0) >> 2]);
    $23 = Math_fround(HEAPF32[($2 + 312 | 0) >> 2]);
    $2 = HEAP32[($4 + 164 | 0) >> 2] | 0;
    $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    HEAP32[($5 + 18704 | 0) >> 2] = 0;
    HEAP32[($5 + 18652 | 0) >> 2] = $2;
    HEAP32[($5 + 18656 | 0) >> 2] = 0;
    $4 = HEAP32[($5 + 18648 | 0) >> 2] | 0;
    HEAPF32[($4 + 872 | 0) >> 2] = Math_fround(Math_fround($7 + $24) - $23);
    HEAPF32[($4 + 868 | 0) >> 2] = Math_fround(Math_fround($8 + $25) - $22);
    HEAPF32[($4 + 864 | 0) >> 2] = Math_fround($7 - $23);
    HEAPF32[($4 + 860 | 0) >> 2] = Math_fround($8 - $22);
    HEAP32[($4 + 852 | 0) >> 2] = $2;
    HEAP8[($5 + 18711 | 0) >> 0] = 1;
    $77 = 1;
    HEAP8[($5 + 18709 | 0) >> 0] = $77;
    HEAP8[($5 + 18710 | 0) >> 0] = $77 >>> 8 | 0;
    break label$273;
   }
   label$281 : {
    $2 = HEAP32[($5 + 18548 | 0) >> 2] | 0;
    if (($2 | 0) < (1 | 0)) {
     break label$281
    }
    $6 = $2 + -1 | 0;
    $2 = HEAP32[(((HEAP32[($5 + 18556 | 0) >> 2] | 0) + Math_imul($6, 40) | 0) + 4 | 0) >> 2] | 0;
    if (!$2) {
     break label$281
    }
    if ((HEAPU8[($2 + 11 | 0) >> 0] | 0) & 8 | 0) {
     break label$281
    }
    ImGui__ClosePopupToLevel_28int_2c_20bool_29($6 | 0, 1 | 0);
    break label$273;
   }
   label$282 : {
    if (!$4) {
     break label$282
    }
    if (((HEAP32[($4 + 8 | 0) >> 2] | 0) & 83886080 | 0 | 0) == (16777216 | 0)) {
     break label$282
    }
    HEAP32[($4 + 852 | 0) >> 2] = 0;
   }
   HEAP32[($5 + 18652 | 0) >> 2] = 0;
  }
  i64toi32_i32$2 = $3;
  i64toi32_i32$0 = 0;
  HEAP32[($3 + 18660 | 0) >> 2] = 0;
  HEAP32[($3 + 18664 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($3 + 18676 | 0) >> 2] = 0;
  i64toi32_i32$2 = $3 + 18668 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$2 >> 2] = 0;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$283 : {
   label$284 : {
    label$285 : {
     $5 = HEAP32[($3 + 18652 | 0) >> 2] | 0;
     if (!$5) {
      break label$285
     }
     if (HEAPU8[($3 + 18710 | 0) >> 0] | 0) {
      break label$285
     }
     if (HEAP32[($3 + 18992 | 0) >> 2] | 0) {
      break label$285
     }
     label$286 : {
      $4 = HEAP32[($3 + 18648 | 0) >> 2] | 0;
      if ($4) {
       break label$286
      }
      $9 = $19;
      break label$283;
     }
     if ((HEAPU8[($4 + 10 | 0) >> 0] | 0) & 4 | 0) {
      break label$285
     }
     label$287 : {
      label$288 : {
       label$289 : {
        label$290 : {
         label$291 : {
          label$292 : {
           label$293 : {
            label$294 : {
             label$295 : {
              label$296 : {
               label$297 : {
                label$298 : {
                 label$299 : {
                  label$300 : {
                   label$301 : {
                    label$302 : {
                     label$303 : {
                      label$304 : {
                       label$305 : {
                        label$306 : {
                         label$307 : {
                          label$308 : {
                           if (!$10) {
                            break label$308
                           }
                           label$309 : {
                            $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
                            if (!(HEAPU8[($4 + 11940 | 0) >> 0] | 0)) {
                             break label$309
                            }
                            $6 = HEAPU8[($4 + 16404 | 0) >> 0] | 0;
                            if ($19 & ($6 | 0) != (0 | 0) | 0) {
                             break label$307
                            }
                            $2 = 0;
                            $9 = 0;
                            if ($6) {
                             break label$301
                            }
                            break label$305;
                           }
                           if ($19) {
                            break label$307
                           }
                           if (HEAPU8[($4 + 11956 | 0) >> 0] | 0) {
                            break label$306
                           }
                           $9 = 0;
                           break label$284;
                          }
                          $9 = 0;
                          if (!$19) {
                           break label$284
                          }
                          $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
                         }
                         $9 = 0;
                         label$310 : {
                          if (HEAPU8[($4 + 13508 | 0) >> 0] | 0) {
                           break label$310
                          }
                          $2 = 0;
                          break label$302;
                         }
                         label$311 : {
                          if (!(HEAPU8[($4 + 17580 | 0) >> 0] | 0)) {
                           break label$311
                          }
                          $2 = 0;
                          break label$302;
                         }
                         label$312 : {
                          if (!$10) {
                           break label$312
                          }
                          if (HEAPU8[($4 + 11940 | 0) >> 0] | 0) {
                           break label$305
                          }
                          $2 = 0;
                          break label$304;
                         }
                         if ($19) {
                          break label$303
                         }
                         $2 = 1;
                         $9 = 1;
                         $4 = HEAP32[($3 + 16192 | 0) >> 2] | 0;
                         if ($4) {
                          break label$293
                         }
                         HEAP32[($3 + 18664 | 0) >> 2] = $5;
                         $9 = 0;
                         break label$284;
                        }
                        $9 = 0;
                        $2 = 0;
                        if (HEAPU8[($4 + 16416 | 0) >> 0] | 0) {
                         break label$284
                        }
                        break label$298;
                       }
                       label$313 : {
                        if (Math_fround(HEAPF32[($4 + 11944 | 0) >> 2]) == Math_fround(0.0)) {
                         break label$313
                        }
                        $2 = 0;
                        break label$304;
                       }
                       $2 = !(HEAPU8[($4 + 16404 | 0) >> 0] | 0);
                      }
                      $9 = 1;
                      if ($2) {
                       break label$301
                      }
                      if ($19 ^ 1 | 0) {
                       break label$301
                      }
                      if (HEAPU8[($4 + 13508 | 0) >> 0] | 0) {
                       break label$303
                      }
                      $2 = 0;
                      break label$301;
                     }
                     $9 = 1;
                     label$314 : {
                      if (Math_fround(HEAPF32[($4 + 13512 | 0) >> 2]) == Math_fround(0.0)) {
                       break label$314
                      }
                      $2 = 0;
                      break label$302;
                     }
                     $2 = !(HEAPU8[($4 + 17580 | 0) >> 0] | 0);
                    }
                    if (!$10) {
                     break label$300
                    }
                   }
                   if (!(HEAPU8[($4 + 11956 | 0) >> 0] | 0)) {
                    break label$300
                   }
                   $6 = 0;
                   $18 = HEAPU8[($4 + 16416 | 0) >> 0] | 0;
                   if ($19 & ($18 | 0) != (0 | 0) | 0) {
                    break label$299
                   }
                   if (!$18) {
                    break label$298
                   }
                   break label$294;
                  }
                  $6 = 0;
                  if (!$19) {
                   break label$294
                  }
                 }
                 $6 = 0;
                 if (!(HEAPU8[($4 + 13492 | 0) >> 0] | 0)) {
                  break label$294
                 }
                 if (HEAPU8[($4 + 17568 | 0) >> 0] | 0) {
                  break label$294
                 }
                 if (!$10) {
                  break label$296
                 }
                 if (HEAPU8[($4 + 11956 | 0) >> 0] | 0) {
                  break label$298
                 }
                 $6 = 0;
                 break label$297;
                }
                label$315 : {
                 if (Math_fround(HEAPF32[($4 + 11960 | 0) >> 2]) == Math_fround(0.0)) {
                  break label$315
                 }
                 $6 = 0;
                 break label$297;
                }
                $6 = !(HEAPU8[($4 + 16416 | 0) >> 0] | 0);
               }
               if ($6) {
                break label$294
               }
               if ($19 ^ 1 | 0) {
                break label$294
               }
               if (HEAPU8[($4 + 13492 | 0) >> 0] | 0) {
                break label$295
               }
               $6 = 0;
               break label$294;
              }
              if (!$19) {
               break label$294
              }
             }
             label$316 : {
              if (Math_fround(HEAPF32[($4 + 13496 | 0) >> 2]) == Math_fround(0.0)) {
               break label$316
              }
              $6 = 0;
              break label$294;
             }
             $6 = !(HEAPU8[($4 + 17568 | 0) >> 0] | 0);
            }
            $4 = HEAP32[($3 + 16192 | 0) >> 2] | 0;
            label$317 : {
             if (!$2) {
              break label$317
             }
             if ($4) {
              break label$317
             }
             HEAP32[($3 + 18676 | 0) >> 2] = 2;
             HEAP32[($3 + 18660 | 0) >> 2] = $5;
             if (!$6) {
              break label$291
             }
             break label$290;
            }
            if (!$4) {
             break label$292
            }
            $2 = $2 ^ 1 | 0;
            if (!($6 & ($4 | 0) == ($5 | 0) | 0)) {
             break label$293
            }
            HEAP32[($3 + 18676 | 0) >> 2] = 1;
            HEAP32[($3 + 18672 | 0) >> 2] = $5;
            $4 = $5;
           }
           label$318 : {
            $4 = ($4 | 0) != ($5 | 0);
            if ($4) {
             break label$318
            }
            if (!$9) {
             break label$318
            }
            HEAP32[($3 + 18664 | 0) >> 2] = $5;
           }
           if (!($2 | $4 | 0)) {
            break label$287
           }
           break label$285;
          }
          if ($6) {
           break label$290
          }
         }
         if ($9) {
          break label$289
         }
         break label$288;
        }
        HEAP32[($3 + 18676 | 0) >> 2] = 1;
        HEAP32[($3 + 18672 | 0) >> 2] = $5;
        if (!$9) {
         break label$288
        }
       }
       HEAP32[($3 + 18664 | 0) >> 2] = $5;
       if ($2) {
        break label$287
       }
       break label$285;
      }
      if (!$2) {
       break label$285
      }
     }
     HEAP32[($3 + 18668 | 0) >> 2] = $5;
    }
    $9 = $19;
   }
   $5 = HEAP32[($3 + 18648 | 0) >> 2] | 0;
   if (!$5) {
    break label$283
   }
   if (!((HEAPU8[($5 + 10 | 0) >> 0] | 0) & 4 | 0)) {
    break label$283
   }
   HEAP8[($3 + 18710 | 0) >> 0] = 1;
  }
  label$319 : {
   $5 = HEAP32[($3 + 18692 | 0) >> 2] | 0;
   if (!$5) {
    break label$319
   }
   label$320 : {
    label$321 : {
     $4 = HEAP32[($3 + 18696 | 0) >> 2] | 0;
     if (!($4 & 1 | 0)) {
      break label$321
     }
     HEAP32[($3 + 18672 | 0) >> 2] = $5;
     break label$320;
    }
    HEAP32[($3 + 18664 | 0) >> 2] = $5;
    HEAP32[($3 + 18668 | 0) >> 2] = $5;
    HEAP32[($3 + 18660 | 0) >> 2] = $5;
   }
   HEAP32[($3 + 18676 | 0) >> 2] = $4;
  }
  $6 = 0;
  HEAP32[($3 + 18692 | 0) >> 2] = 0;
  label$322 : {
   $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $4 = HEAP32[($5 + 8 | 0) >> 2] | 0;
   if (!($4 & 2 | 0)) {
    break label$322
   }
   $6 = (HEAPU8[($5 + 12 | 0) >> 0] | 0) & 1 | 0;
  }
  $2 = HEAP32[($5 + 18648 | 0) >> 2] | 0;
  $4 = $4 & 1 | 0;
  label$323 : {
   label$324 : {
    label$325 : {
     label$326 : {
      label$327 : {
       label$328 : {
        if (!(HEAPU8[($5 + 18738 | 0) >> 0] | 0)) {
         break label$328
        }
        if (!$2) {
         break label$328
        }
        if (!((HEAPU8[($5 + 23536 | 0) >> 0] | 0) & 8 | 0)) {
         break label$327
        }
        HEAP32[($0 + 80 | 0) >> 2] = HEAP32[($5 + 18752 | 0) >> 2] | 0;
        ImGui__DebugLog_28char_20const__2c_20____29(68918 | 0, $0 + 80 | 0 | 0);
        break label$327;
       }
       i64toi32_i32$2 = $5;
       i64toi32_i32$0 = 0;
       HEAP32[($5 + 18740 | 0) >> 2] = 0;
       HEAP32[($5 + 18744 | 0) >> 2] = i64toi32_i32$0;
       $19 = -1;
       HEAP32[($5 + 18752 | 0) >> 2] = -1;
       if (!$2) {
        break label$326
       }
       label$329 : {
        if (HEAP32[($5 + 18992 | 0) >> 2] | 0) {
         break label$329
        }
        if ((HEAPU8[($2 + 10 | 0) >> 0] | 0) & 4 | 0) {
         break label$329
        }
        $19 = -1;
        label$330 : {
         $18 = HEAP32[($5 + 18236 | 0) >> 2] | 0;
         if ($18 & 1 | 0) {
          break label$330
         }
         label$331 : {
          label$332 : {
           if (!$6) {
            break label$332
           }
           if (ImGui__IsKeyPressed_28ImGuiKey_2c_20unsigned_20int_2c_20int_29(623 | 0, -1 | 0, 5 | 0) | 0) {
            break label$331
           }
          }
          if (!$4) {
           break label$330
          }
          $19 = -1;
          if (!(ImGui__IsKeyPressed_28ImGuiKey_2c_20unsigned_20int_2c_20int_29(513 | 0, -1 | 0, 5 | 0) | 0)) {
           break label$330
          }
         }
         $19 = 0;
         HEAP32[($5 + 18752 | 0) >> 2] = 0;
        }
        label$333 : {
         if ($18 & 2 | 0) {
          break label$333
         }
         label$334 : {
          label$335 : {
           if (!$6) {
            break label$335
           }
           if (ImGui__IsKeyPressed_28ImGuiKey_2c_20unsigned_20int_2c_20int_29(624 | 0, -1 | 0, 5 | 0) | 0) {
            break label$334
           }
          }
          if (!$4) {
           break label$333
          }
          if (!(ImGui__IsKeyPressed_28ImGuiKey_2c_20unsigned_20int_2c_20int_29(514 | 0, -1 | 0, 5 | 0) | 0)) {
           break label$333
          }
         }
         $19 = 1;
         HEAP32[($5 + 18752 | 0) >> 2] = 1;
        }
        label$336 : {
         if ($18 & 4 | 0) {
          break label$336
         }
         label$337 : {
          label$338 : {
           if (!$6) {
            break label$338
           }
           if (ImGui__IsKeyPressed_28ImGuiKey_2c_20unsigned_20int_2c_20int_29(625 | 0, -1 | 0, 5 | 0) | 0) {
            break label$337
           }
          }
          if (!$4) {
           break label$336
          }
          if (!(ImGui__IsKeyPressed_28ImGuiKey_2c_20unsigned_20int_2c_20int_29(515 | 0, -1 | 0, 5 | 0) | 0)) {
           break label$336
          }
         }
         $19 = 2;
         HEAP32[($5 + 18752 | 0) >> 2] = 2;
        }
        if ($18 & 8 | 0) {
         break label$329
        }
        label$339 : {
         label$340 : {
          if (!$6) {
           break label$340
          }
          if (ImGui__IsKeyPressed_28ImGuiKey_2c_20unsigned_20int_2c_20int_29(626 | 0, -1 | 0, 5 | 0) | 0) {
           break label$339
          }
         }
         if (!$4) {
          break label$329
         }
         if (!(ImGui__IsKeyPressed_28ImGuiKey_2c_20unsigned_20int_2c_20int_29(516 | 0, -1 | 0, 5 | 0) | 0)) {
          break label$329
         }
        }
        $19 = 3;
        HEAP32[($5 + 18752 | 0) >> 2] = 3;
       }
       i64toi32_i32$2 = $5;
       i64toi32_i32$0 = 2139095039;
       HEAP32[($5 + 18780 | 0) >> 2] = 2139095039;
       HEAP32[($5 + 18784 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($5 + 18760 | 0) >> 2] = $19;
       i64toi32_i32$2 = $5 + 18788 | 0;
       i64toi32_i32$0 = -8388609;
       HEAP32[i64toi32_i32$2 >> 2] = -8388609;
       HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
      }
      $8 = Math_fround(0.0);
      if ((HEAP32[($5 + 18752 | 0) >> 2] | 0 | 0) != (-1 | 0)) {
       break label$323
      }
      if (!$4) {
       break label$323
      }
      $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      $6 = HEAP32[($4 + 18648 | 0) >> 2] | 0;
      if ((HEAPU8[($6 + 10 | 0) >> 0] | 0) & 4 | 0) {
       break label$323
      }
      if (HEAP32[($4 + 18992 | 0) >> 2] | 0) {
       break label$323
      }
      $16 = 0;
      $18 = 0;
      label$341 : {
       if (!(HEAPU8[($4 + 11828 | 0) >> 0] | 0)) {
        break label$341
       }
       label$342 : {
        if (!(HEAPU8[($4 + 18240 | 0) >> 0] | 0)) {
         break label$342
        }
        $18 = 0;
        if ((HEAP32[($4 + 16192 | 0) >> 2] | 0 | 0) != (-1 | 0)) {
         break label$341
        }
       }
       $18 = (HEAP32[($4 + 16312 | 0) >> 2] | 0 | 0) == (-1 | 0);
      }
      label$343 : {
       if (!(HEAPU8[($4 + 11844 | 0) >> 0] | 0)) {
        break label$343
       }
       label$344 : {
        if (!(HEAPU8[($4 + 18240 | 0) >> 0] | 0)) {
         break label$344
        }
        if ((HEAP32[($4 + 16192 | 0) >> 2] | 0 | 0) != (-1 | 0)) {
         break label$343
        }
       }
       $16 = (HEAP32[($4 + 16324 | 0) >> 2] | 0 | 0) == (-1 | 0);
      }
      $11 = 0;
      $19 = 0;
      label$345 : {
       if (!(HEAPU8[($4 + 11860 | 0) >> 0] | 0)) {
        break label$345
       }
       $19 = 0;
       $7 = Math_fround(HEAPF32[($4 + 11864 | 0) >> 2]);
       if ($7 < Math_fround(0.0)) {
        break label$345
       }
       label$346 : {
        if ($7 == Math_fround(0.0)) {
         break label$346
        }
        $19 = 0;
        $22 = Math_fround(HEAPF32[($4 + 52 | 0) >> 2]);
        if (!($7 > $22)) {
         break label$345
        }
        $19 = 0;
        $23 = Math_fround($7 - Math_fround(HEAPF32[($4 + 24 | 0) >> 2]));
        if ($23 >= $7) {
         break label$345
        }
        label$347 : {
         $24 = Math_fround(HEAPF32[($4 + 56 | 0) >> 2]);
         if (!($24 <= Math_fround(0.0))) {
          break label$347
         }
         $19 = 0;
         if (!($7 >= $22)) {
          break label$345
         }
         $19 = 0;
         if ($23 < $22) {
          break label$346
         }
         break label$345;
        }
        $12 = -1;
        $10 = -1;
        label$348 : {
         if ($23 < $22) {
          break label$348
         }
         label$349 : {
          $23 = Math_fround(Math_fround($23 - $22) / $24);
          if (!(Math_fround(Math_abs($23)) < Math_fround(2147483648.0))) {
           break label$349
          }
          $10 = ~~$23;
          break label$348;
         }
         $10 = -2147483648;
        }
        label$350 : {
         if ($7 < $22) {
          break label$350
         }
         label$351 : {
          $7 = Math_fround(Math_fround($7 - $22) / $24);
          if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
           break label$351
          }
          $12 = ~~$7;
          break label$350;
         }
         $12 = -2147483648;
        }
        $19 = 0;
        if (($12 | 0) <= ($10 | 0)) {
         break label$345
        }
       }
       label$352 : {
        if (!(HEAPU8[($4 + 18240 | 0) >> 0] | 0)) {
         break label$352
        }
        $19 = 0;
        if ((HEAP32[($4 + 16192 | 0) >> 2] | 0 | 0) != (-1 | 0)) {
         break label$345
        }
       }
       $19 = (HEAP32[($4 + 16336 | 0) >> 2] | 0 | 0) == (-1 | 0);
      }
      label$353 : {
       if (!(HEAPU8[($4 + 11876 | 0) >> 0] | 0)) {
        break label$353
       }
       $7 = Math_fround(HEAPF32[($4 + 11880 | 0) >> 2]);
       if ($7 < Math_fround(0.0)) {
        break label$353
       }
       label$354 : {
        if ($7 == Math_fround(0.0)) {
         break label$354
        }
        $22 = Math_fround(HEAPF32[($4 + 52 | 0) >> 2]);
        if (!($7 > $22)) {
         break label$353
        }
        $23 = Math_fround($7 - Math_fround(HEAPF32[($4 + 24 | 0) >> 2]));
        if ($23 >= $7) {
         break label$353
        }
        label$355 : {
         $24 = Math_fround(HEAPF32[($4 + 56 | 0) >> 2]);
         if (!($24 <= Math_fround(0.0))) {
          break label$355
         }
         if (!($7 >= $22)) {
          break label$353
         }
         if ($23 < $22) {
          break label$354
         }
         break label$353;
        }
        $12 = -1;
        $10 = -1;
        label$356 : {
         if ($23 < $22) {
          break label$356
         }
         label$357 : {
          $23 = Math_fround(Math_fround($23 - $22) / $24);
          if (!(Math_fround(Math_abs($23)) < Math_fround(2147483648.0))) {
           break label$357
          }
          $10 = ~~$23;
          break label$356;
         }
         $10 = -2147483648;
        }
        label$358 : {
         if ($7 < $22) {
          break label$358
         }
         label$359 : {
          $7 = Math_fround(Math_fround($7 - $22) / $24);
          if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
           break label$359
          }
          $12 = ~~$7;
          break label$358;
         }
         $12 = -2147483648;
        }
        if (($12 | 0) <= ($10 | 0)) {
         break label$353
        }
       }
       label$360 : {
        if (!(HEAPU8[($4 + 18240 | 0) >> 0] | 0)) {
         break label$360
        }
        if ((HEAP32[($4 + 16192 | 0) >> 2] | 0 | 0) != (-1 | 0)) {
         break label$353
        }
       }
       $11 = (HEAP32[($4 + 16348 | 0) >> 2] | 0 | 0) == (-1 | 0);
      }
      label$361 : {
       if (($18 | 0) != ($16 | 0)) {
        break label$361
       }
       if (!($19 ^ $11 | 0)) {
        break label$323
       }
      }
      label$362 : {
       if (!(HEAP32[($4 + 18704 | 0) >> 2] | 0)) {
        break label$362
       }
       ImGui__NavRestoreLayer_28ImGuiNavLayer_29(0 | 0);
      }
      label$363 : {
       if (!(HEAPU16[($6 + 384 | 0) >> 1] | 0)) {
        break label$363
       }
       $18 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
       break label$324;
      }
      $18 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!(HEAPU8[($6 + 389 | 0) >> 0] | 0)) {
       break label$324
      }
      if (!(HEAPU8[($18 + 11828 | 0) >> 0] | 0)) {
       break label$325
      }
      $7 = Math_fround(HEAPF32[($18 + 11832 | 0) >> 2]);
      if ($7 < Math_fround(0.0)) {
       break label$325
      }
      label$364 : {
       if ($7 == Math_fround(0.0)) {
        break label$364
       }
       $22 = Math_fround(HEAPF32[($18 + 52 | 0) >> 2]);
       if (!($7 > $22)) {
        break label$325
       }
       $23 = Math_fround($7 - Math_fround(HEAPF32[($18 + 24 | 0) >> 2]));
       if ($23 >= $7) {
        break label$325
       }
       label$365 : {
        $24 = Math_fround(HEAPF32[($18 + 56 | 0) >> 2]);
        if (!($24 <= Math_fround(0.0))) {
         break label$365
        }
        if (!($7 >= $22)) {
         break label$325
        }
        if ($23 < $22) {
         break label$364
        }
        break label$325;
       }
       $4 = -1;
       $16 = -1;
       label$366 : {
        if ($23 < $22) {
         break label$366
        }
        label$367 : {
         $23 = Math_fround(Math_fround($23 - $22) / $24);
         if (!(Math_fround(Math_abs($23)) < Math_fround(2147483648.0))) {
          break label$367
         }
         $16 = ~~$23;
         break label$366;
        }
        $16 = -2147483648;
       }
       label$368 : {
        if ($7 < $22) {
         break label$368
        }
        label$369 : {
         $7 = Math_fround(Math_fround($7 - $22) / $24);
         if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
          break label$369
         }
         $4 = ~~$7;
         break label$368;
        }
        $4 = -2147483648;
       }
       if (($4 | 0) <= ($16 | 0)) {
        break label$325
       }
      }
      label$370 : {
       if (!(HEAPU8[($18 + 18240 | 0) >> 0] | 0)) {
        break label$370
       }
       if ((HEAP32[($18 + 16192 | 0) >> 2] | 0 | 0) != (-1 | 0)) {
        break label$325
       }
      }
      if ((HEAP32[($18 + 16312 | 0) >> 2] | 0 | 0) != (-1 | 0)) {
       break label$325
      }
      HEAP32[($6 + 204 | 0) >> 2] = 0;
      HEAP32[($6 + 196 | 0) >> 2] = 0;
      HEAPF32[($6 + 188 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6 + 172 | 0) >> 2]) - Math_fround(Math_fround(HEAPF32[($6 + 528 | 0) >> 2]) - Math_fround(HEAPF32[($6 + 520 | 0) >> 2])));
      $8 = Math_fround(0.0);
      break label$323;
     }
     i64toi32_i32$2 = $5;
     i64toi32_i32$0 = 2139095039;
     HEAP32[($5 + 18780 | 0) >> 2] = 2139095039;
     HEAP32[($5 + 18784 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($5 + 18760 | 0) >> 2] = -1;
     i64toi32_i32$2 = $5 + 18788 | 0;
     i64toi32_i32$0 = -8388609;
     HEAP32[i64toi32_i32$2 >> 2] = -8388609;
     HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
     $8 = Math_fround(0.0);
     break label$323;
    }
    label$371 : {
     if (!(ImGui__IsKeyPressed_28ImGuiKey_2c_20unsigned_20int_2c_20int_29(518 | 0, -1 | 0, 1 | 0) | 0)) {
      break label$371
     }
     HEAP32[($6 + 204 | 0) >> 2] = 0;
     HEAP32[($6 + 196 | 0) >> 2] = 0;
     HEAPF32[($6 + 188 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6 + 172 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($6 + 528 | 0) >> 2]) - Math_fround(HEAPF32[($6 + 520 | 0) >> 2])));
     break label$323;
    }
    label$372 : {
     if (!$19) {
      break label$372
     }
     HEAP32[($6 + 204 | 0) >> 2] = 0;
     HEAP32[($6 + 196 | 0) >> 2] = 0;
     HEAP32[($6 + 188 | 0) >> 2] = 0;
     break label$323;
    }
    if (!$11) {
     break label$323
    }
    HEAP32[($6 + 204 | 0) >> 2] = 0;
    HEAP32[($6 + 196 | 0) >> 2] = 0;
    HEAPF32[($6 + 188 | 0) >> 2] = Math_fround(HEAPF32[($6 + 180 | 0) >> 2]);
    break label$323;
   }
   $8 = Math_fround(Math_fround(HEAPF32[($6 + 528 | 0) >> 2]) - Math_fround(HEAPF32[($6 + 520 | 0) >> 2]));
   $7 = Math_fround(Math_fround(Math_fround(HEAPF32[($18 + 15492 | 0) >> 2]) * Math_fround(HEAPF32[($6 + 660 | 0) >> 2])) * Math_fround(HEAPF32[($6 + 664 | 0) >> 2]));
   $10 = HEAP32[($4 + 18704 | 0) >> 2] | 0;
   $12 = $6 + ($10 << 4 | 0) | 0;
   $16 = $12 + 860 | 0;
   label$373 : {
    $17 = HEAP32[($6 + 820 | 0) >> 2] | 0;
    if (!$17) {
     break label$373
    }
    $7 = Math_fround($7 * Math_fround(HEAPF32[($17 + 660 | 0) >> 2]));
   }
   $12 = $12 + 872 | 0;
   $7 = Math_fround(Math_fround($8 - $7) + Math_fround(Math_fround(HEAPF32[$12 >> 2]) - Math_fround(HEAPF32[($16 + 4 | 0) >> 2])));
   $8 = $7 <= Math_fround(0.0) ? Math_fround(0.0) : $7;
   label$374 : {
    label$375 : {
     label$376 : {
      if (!(HEAPU8[($18 + 11828 | 0) >> 0] | 0)) {
       break label$376
      }
      $7 = Math_fround(HEAPF32[($18 + 11832 | 0) >> 2]);
      if ($7 < Math_fround(0.0)) {
       break label$376
      }
      label$377 : {
       if ($7 == Math_fround(0.0)) {
        break label$377
       }
       $22 = Math_fround(HEAPF32[($18 + 52 | 0) >> 2]);
       if (!($7 > $22)) {
        break label$376
       }
       $23 = Math_fround($7 - Math_fround(HEAPF32[($18 + 24 | 0) >> 2]));
       if ($23 >= $7) {
        break label$376
       }
       label$378 : {
        $24 = Math_fround(HEAPF32[($18 + 56 | 0) >> 2]);
        if (!($24 <= Math_fround(0.0))) {
         break label$378
        }
        if (!($7 >= $22)) {
         break label$376
        }
        if (!($23 < $22)) {
         break label$376
        }
        break label$377;
       }
       $17 = -1;
       $13 = -1;
       label$379 : {
        if ($23 < $22) {
         break label$379
        }
        label$380 : {
         $23 = Math_fround(Math_fround($23 - $22) / $24);
         if (!(Math_fround(Math_abs($23)) < Math_fround(2147483648.0))) {
          break label$380
         }
         $13 = ~~$23;
         break label$379;
        }
        $13 = -2147483648;
       }
       label$381 : {
        if ($7 < $22) {
         break label$381
        }
        label$382 : {
         $7 = Math_fround(Math_fround($7 - $22) / $24);
         if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
          break label$382
         }
         $17 = ~~$7;
         break label$381;
        }
        $17 = -2147483648;
       }
       if (($17 | 0) <= ($13 | 0)) {
        break label$376
       }
      }
      if (HEAPU8[($18 + 16320 | 0) >> 0] | 0) {
       break label$376
      }
      $8 = Math_fround(-$8);
      $6 = 2;
      $19 = 3;
      break label$375;
     }
     if (!(HEAPU8[($18 + 11844 | 0) >> 0] | 0)) {
      break label$374
     }
     $7 = Math_fround(HEAPF32[($18 + 11848 | 0) >> 2]);
     if ($7 < Math_fround(0.0)) {
      break label$374
     }
     label$383 : {
      if ($7 == Math_fround(0.0)) {
       break label$383
      }
      $22 = Math_fround(HEAPF32[($18 + 52 | 0) >> 2]);
      if (!($7 > $22)) {
       break label$374
      }
      $23 = Math_fround($7 - Math_fround(HEAPF32[($18 + 24 | 0) >> 2]));
      if ($23 >= $7) {
       break label$374
      }
      label$384 : {
       $24 = Math_fround(HEAPF32[($18 + 56 | 0) >> 2]);
       if (!($24 <= Math_fround(0.0))) {
        break label$384
       }
       if (!($7 >= $22)) {
        break label$374
       }
       if ($23 < $22) {
        break label$383
       }
       break label$374;
      }
      $17 = -1;
      $13 = -1;
      label$385 : {
       if ($23 < $22) {
        break label$385
       }
       label$386 : {
        $23 = Math_fround(Math_fround($23 - $22) / $24);
        if (!(Math_fround(Math_abs($23)) < Math_fround(2147483648.0))) {
         break label$386
        }
        $13 = ~~$23;
        break label$385;
       }
       $13 = -2147483648;
      }
      label$387 : {
       if ($7 < $22) {
        break label$387
       }
       label$388 : {
        $7 = Math_fround(Math_fround($7 - $22) / $24);
        if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
         break label$388
        }
        $17 = ~~$7;
        break label$387;
       }
       $17 = -2147483648;
      }
      if (($17 | 0) <= ($13 | 0)) {
       break label$374
      }
     }
     if (HEAPU8[($18 + 16332 | 0) >> 0] | 0) {
      break label$374
     }
     $6 = 3;
     $19 = 2;
    }
    HEAP32[($4 + 18760 | 0) >> 2] = $6;
    HEAP32[($4 + 18752 | 0) >> 2] = $19;
    HEAP32[($4 + 18740 | 0) >> 2] = 48;
    if ($8 == Math_fround(0.0)) {
     break label$323
    }
    i64toi32_i32$1 = $2;
    i64toi32_i32$0 = HEAP32[($2 + 516 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($2 + 520 | 0) >> 2] | 0;
    $4530 = i64toi32_i32$0;
    i64toi32_i32$0 = $5;
    HEAP32[($5 + 18780 | 0) >> 2] = $4530;
    HEAP32[($5 + 18784 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$1 = $2 + 524 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $4535 = i64toi32_i32$2;
    i64toi32_i32$2 = $5 + 18788 | 0;
    HEAP32[i64toi32_i32$2 >> 2] = $4535;
    HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
    $4 = $5 + 18784 | 0;
    HEAPF32[$4 >> 2] = Math_fround($8 + Math_fround(HEAPF32[$4 >> 2]));
    $4 = $5 + 18792 | 0;
    HEAPF32[$4 >> 2] = Math_fround($8 + Math_fround(HEAPF32[$4 >> 2]));
    break label$323;
   }
   label$389 : {
    if (!$19) {
     break label$389
    }
    HEAP32[$12 >> 2] = 0;
    HEAP32[($16 + 4 | 0) >> 2] = 0;
    label$390 : {
     $6 = ($6 + ($10 << 4 | 0) | 0) + 868 | 0;
     if (!(Math_fround(HEAPF32[$16 >> 2]) > Math_fround(HEAPF32[$6 >> 2]))) {
      break label$390
     }
     HEAP32[$6 >> 2] = 0;
     HEAP32[$16 >> 2] = 0;
    }
    HEAP32[($4 + 18740 | 0) >> 2] = 80;
    HEAP32[($4 + 18752 | 0) >> 2] = 3;
    $8 = Math_fround(0.0);
    break label$323;
   }
   $8 = Math_fround(0.0);
   if (!$11) {
    break label$323
   }
   $7 = Math_fround(HEAPF32[($6 + 92 | 0) >> 2]);
   HEAPF32[$12 >> 2] = $7;
   HEAPF32[($16 + 4 | 0) >> 2] = $7;
   label$391 : {
    $6 = ($6 + ($10 << 4 | 0) | 0) + 868 | 0;
    if (!(Math_fround(HEAPF32[$16 >> 2]) > Math_fround(HEAPF32[$6 >> 2]))) {
     break label$391
    }
    HEAP32[$6 >> 2] = 0;
    HEAP32[$16 >> 2] = 0;
   }
   HEAP32[($4 + 18740 | 0) >> 2] = 80;
   HEAP32[($4 + 18752 | 0) >> 2] = 2;
  }
  HEAP8[($5 + 18738 | 0) >> 0] = 0;
  label$392 : {
   $6 = HEAP32[($5 + 18752 | 0) >> 2] | 0;
   if (($6 | 0) == (-1 | 0)) {
    break label$392
   }
   $19 = HEAP32[($5 + 18740 | 0) >> 2] | 0;
   $18 = HEAP32[($5 + 18744 | 0) >> 2] | 0;
   $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   HEAP32[($4 + 18760 | 0) >> 2] = HEAP32[($5 + 18760 | 0) >> 2] | 0;
   HEAP32[($4 + 18756 | 0) >> 2] = $6;
   HEAP32[($4 + 18752 | 0) >> 2] = $6;
   HEAP8[($4 + 18736 | 0) >> 0] = 1;
   $78 = 1;
   HEAP8[($4 + 18737 | 0) >> 0] = $78;
   HEAP8[($4 + 18738 | 0) >> 0] = $78 >>> 8 | 0;
   HEAP32[($4 + 18744 | 0) >> 2] = $18;
   i64toi32_i32$2 = $4;
   i64toi32_i32$0 = 0;
   HEAP32[($4 + 18808 | 0) >> 2] = 0;
   HEAP32[($4 + 18812 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($4 + 18816 | 0) >> 2] = 0;
   HEAP32[($4 + 18836 | 0) >> 2] = 0;
   i64toi32_i32$2 = $4 + 18856 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$2 >> 2] = 0;
   HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $4 + 18848 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$2 >> 2] = 2139095039;
   HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $4 + 18840 | 0;
   i64toi32_i32$0 = 2139095039;
   HEAP32[i64toi32_i32$2 >> 2] = 2139095039;
   HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($4 + 18892 | 0) >> 2] = 2139095039;
   HEAP32[($4 + 18880 | 0) >> 2] = 0;
   HEAP32[($4 + 18748 | 0) >> 2] = HEAP32[($4 + 3552 | 0) >> 2] | 0;
   HEAP32[($4 + 18740 | 0) >> 2] = $19 | (($19 >>> 6 | 0) & 16 | 0) | 0;
   HEAP32[($4 + 18896 | 0) >> 2] = 0;
   i64toi32_i32$2 = $4 + 18884 | 0;
   i64toi32_i32$0 = 2139095039;
   HEAP32[i64toi32_i32$2 >> 2] = 2139095039;
   HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $4 + 18900 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$2 >> 2] = 0;
   HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $4 + 18932 | 0;
   i64toi32_i32$0 = 2139095039;
   HEAP32[i64toi32_i32$2 >> 2] = 2139095039;
   HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $4 + 18924 | 0;
   i64toi32_i32$0 = 2139095039;
   HEAP32[i64toi32_i32$2 >> 2] = 0;
   HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($4 + 18804 | 0) >> 2] = 0;
   HEAP32[($4 + 18940 | 0) >> 2] = 0;
   i64toi32_i32$2 = $4 + 18944 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$2 >> 2] = 0;
   HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $4 + 18976 | 0;
   i64toi32_i32$0 = 2139095039;
   HEAP32[i64toi32_i32$2 >> 2] = 2139095039;
   HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $4 + 18968 | 0;
   i64toi32_i32$0 = 2139095039;
   HEAP32[i64toi32_i32$2 >> 2] = 0;
   HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP8[($4 + 18712 | 0) >> 0] = 1;
  }
  label$393 : {
   label$394 : {
    label$395 : {
     if (!(HEAPU8[($5 + 18736 | 0) >> 0] | 0)) {
      break label$395
     }
     label$396 : {
      if (HEAP32[($5 + 18652 | 0) >> 2] | 0) {
       break label$396
      }
      label$397 : {
       if ((HEAPU8[($5 + 23536 | 0) >> 0] | 0) & 8 | 0) {
        break label$397
       }
       HEAP32[($5 + 18716 | 0) >> 2] = 0;
       $79 = 257;
       HEAP8[($5 + 18713 | 0) >> 0] = $79;
       HEAP8[($5 + 18714 | 0) >> 0] = $79 >>> 8 | 0;
       HEAP8[($5 + 18710 | 0) >> 0] = 0;
       break label$396;
      }
      label$398 : {
       label$399 : {
        if ($2) {
         break label$399
        }
        $4 = 67676;
        break label$398;
       }
       $4 = HEAP32[$2 >> 2] | 0;
      }
      HEAP32[($0 + 68 | 0) >> 2] = HEAP32[($5 + 18704 | 0) >> 2] | 0;
      HEAP32[($0 + 64 | 0) >> 2] = $4;
      ImGui__DebugLog_28char_20const__2c_20____29(68548 | 0, $0 + 64 | 0 | 0);
      HEAP32[($5 + 18716 | 0) >> 2] = 0;
      $80 = 257;
      HEAP8[($5 + 18713 | 0) >> 0] = $80;
      HEAP8[($5 + 18714 | 0) >> 0] = $80 >>> 8 | 0;
      HEAP8[($5 + 18710 | 0) >> 0] = 0;
      if (!(HEAPU8[($5 + 18736 | 0) >> 0] | 0)) {
       break label$395
      }
     }
     if ((HEAP32[($5 + 18700 | 0) >> 2] | 0 | 0) != (3 | 0)) {
      break label$395
     }
     if (HEAP32[($5 + 18704 | 0) >> 2] | 0) {
      break label$395
     }
     if (!$2) {
      break label$395
     }
     $23 = Math_fround(HEAPF32[($2 + 528 | 0) >> 2]);
     $7 = Math_fround(HEAPF32[($2 + 312 | 0) >> 2]);
     $24 = Math_fround(HEAPF32[($2 + 524 | 0) >> 2]);
     $22 = Math_fround(HEAPF32[($2 + 308 | 0) >> 2]);
     $26 = Math_fround(HEAPF32[($2 + 520 | 0) >> 2]);
     $27 = Math_fround(HEAPF32[($2 + 516 | 0) >> 2]);
     $6 = HEAP32[($5 + 18740 | 0) >> 2] | 0;
     $4 = $6 & 10 | 0;
     label$400 : {
      $6 = $6 & 5 | 0;
      if (!$6) {
       break label$400
      }
      if ($4) {
       break label$394
      }
     }
     $28 = Math_fround(Math_fround($23 + Math_fround(1.0)) - $7);
     $25 = Math_fround(Math_fround($24 + Math_fround(1.0)) - $22);
     $23 = Math_fround(Math_fround($26 + Math_fround(-1.0)) - $7);
     label$401 : {
      $7 = Math_fround(HEAPF32[($2 + 860 | 0) >> 2]);
      $26 = Math_fround(Math_fround($27 + Math_fround(-1.0)) - $22);
      if (!($7 >= $26)) {
       break label$401
      }
      if (!(Math_fround(HEAPF32[($2 + 864 | 0) >> 2]) >= $23)) {
       break label$401
      }
      if (!(Math_fround(HEAPF32[($2 + 868 | 0) >> 2]) <= $25)) {
       break label$401
      }
      if (Math_fround(HEAPF32[($2 + 872 | 0) >> 2]) <= $28) {
       break label$394
      }
     }
     $27 = Math_fround($25 - $26);
     $22 = Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 15492 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 660 | 0) >> 2])) * Math_fround(HEAPF32[($2 + 664 | 0) >> 2]));
     label$402 : {
      $19 = HEAP32[($2 + 820 | 0) >> 2] | 0;
      if (!$19) {
       break label$402
      }
      $22 = Math_fround($22 * Math_fround(HEAPF32[($19 + 660 | 0) >> 2]));
     }
     $19 = $2 + 864 | 0;
     $24 = Math_fround($28 - $23);
     $22 = Math_fround($22 * Math_fround(.5));
     $24 = $24 < $22 ? $24 : $22;
     $23 = $4 ? Math_fround(-3402823466385288598117041.0e14) : Math_fround($23 + $24);
     $24 = $4 ? Math_fround(3402823466385288598117041.0e14) : Math_fround($28 - $24);
     $28 = Math_fround(HEAPF32[$19 >> 2]);
     HEAPF32[$19 >> 2] = $28 < $23 ? $23 : $28 > $24 ? $24 : $28;
     $27 = $27 < $22 ? $27 : $22;
     $22 = $6 ? Math_fround(-3402823466385288598117041.0e14) : Math_fround($26 + $27);
     $25 = $6 ? Math_fround(3402823466385288598117041.0e14) : Math_fround($25 - $27);
     HEAPF32[($2 + 860 | 0) >> 2] = $7 < $22 ? $22 : $7 > $25 ? $25 : $7;
     $4 = $2 + 868 | 0;
     $7 = Math_fround(HEAPF32[$4 >> 2]);
     HEAPF32[$4 >> 2] = $7 < $22 ? $22 : $7 > $25 ? $25 : $7;
     $4 = $2 + 872 | 0;
     $7 = Math_fround(HEAPF32[$4 >> 2]);
     HEAPF32[$4 >> 2] = $7 < $23 ? $23 : $7 > $24 ? $24 : $7;
     HEAP32[($5 + 18652 | 0) >> 2] = 0;
     break label$394;
    }
    if ($2) {
     break label$394
    }
    $7 = Math_fround(0.0);
    $8 = Math_fround(0.0);
    $22 = Math_fround(0.0);
    break label$393;
   }
   $22 = Math_fround(0.0);
   label$403 : {
    label$404 : {
     $4 = $2 + ((HEAP32[($5 + 18704 | 0) >> 2] | 0) << 4 | 0) | 0;
     $25 = Math_fround(HEAPF32[($4 + 860 | 0) >> 2]);
     $26 = Math_fround(HEAPF32[($4 + 868 | 0) >> 2]);
     if (!($25 > $26)) {
      break label$404
     }
     $7 = Math_fround(0.0);
     $23 = Math_fround(0.0);
     $24 = Math_fround(0.0);
     break label$403;
    }
    $7 = Math_fround(0.0);
    $23 = Math_fround(0.0);
    $24 = Math_fround(0.0);
    $27 = Math_fround(HEAPF32[($4 + 864 | 0) >> 2]);
    $28 = Math_fround(HEAPF32[($4 + 872 | 0) >> 2]);
    if ($27 > $28) {
     break label$403
    }
    $22 = $28;
    $7 = $26;
    $23 = $27;
    $24 = $25;
   }
   $25 = Math_fround(HEAPF32[($2 + 308 | 0) >> 2]);
   $24 = Math_fround(Math_fround($24 + $25) + Math_fround(1.0));
   $7 = Math_fround($7 + $25);
   $7 = $24 < $7 ? $24 : $7;
   $24 = Math_fround(HEAPF32[($2 + 312 | 0) >> 2]);
   $22 = Math_fround($8 + Math_fround($22 + $24));
   $8 = Math_fround($8 + Math_fround($23 + $24));
  }
  HEAPF32[($5 + 18764 | 0) >> 2] = $7;
  HEAPF32[($5 + 18776 | 0) >> 2] = $22;
  HEAPF32[($5 + 18772 | 0) >> 2] = $7;
  HEAPF32[($5 + 18768 | 0) >> 2] = $8;
  label$405 : {
   if (!(Math_fround(HEAPF32[($5 + 18780 | 0) >> 2]) > $7)) {
    break label$405
   }
   HEAPF32[($5 + 18780 | 0) >> 2] = $7;
  }
  label$406 : {
   if (!(Math_fround(HEAPF32[($5 + 18784 | 0) >> 2]) > $8)) {
    break label$406
   }
   HEAPF32[($5 + 18784 | 0) >> 2] = $8;
  }
  label$407 : {
   if (!(Math_fround(HEAPF32[($5 + 18788 | 0) >> 2]) < $7)) {
    break label$407
   }
   HEAPF32[($5 + 18788 | 0) >> 2] = $7;
  }
  label$408 : {
   if (!(Math_fround(HEAPF32[($5 + 18792 | 0) >> 2]) < $22)) {
    break label$408
   }
   HEAPF32[($5 + 18792 | 0) >> 2] = $22;
  }
  $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  label$409 : {
   if ((HEAP32[($3 + 18752 | 0) >> 2] | 0 | 0) != (-1 | 0)) {
    break label$409
   }
   $4 = HEAP32[($5 + 18648 | 0) >> 2] | 0;
   if (!$4) {
    break label$409
   }
   if (HEAP32[($5 + 18992 | 0) >> 2] | 0) {
    break label$409
   }
   if ((HEAPU8[($4 + 10 | 0) >> 0] | 0) & 4 | 0) {
    break label$409
   }
   if (!(HEAPU8[($5 + 11748 | 0) >> 0] | 0)) {
    break label$409
   }
   $7 = Math_fround(HEAPF32[($5 + 11752 | 0) >> 2]);
   if ($7 < Math_fround(0.0)) {
    break label$409
   }
   label$410 : {
    if ($7 == Math_fround(0.0)) {
     break label$410
    }
    $8 = Math_fround(HEAPF32[($5 + 52 | 0) >> 2]);
    if (!($7 > $8)) {
     break label$409
    }
    $22 = Math_fround($7 - Math_fround(HEAPF32[($5 + 24 | 0) >> 2]));
    if ($22 >= $7) {
     break label$409
    }
    label$411 : {
     $23 = Math_fround(HEAPF32[($5 + 56 | 0) >> 2]);
     if (!($23 <= Math_fround(0.0))) {
      break label$411
     }
     if (!($7 >= $8)) {
      break label$409
     }
     if ($22 < $8) {
      break label$410
     }
     break label$409;
    }
    $2 = -1;
    $6 = -1;
    label$412 : {
     if ($22 < $8) {
      break label$412
     }
     label$413 : {
      $22 = Math_fround(Math_fround($22 - $8) / $23);
      if (!(Math_fround(Math_abs($22)) < Math_fround(2147483648.0))) {
       break label$413
      }
      $6 = ~~$22;
      break label$412;
     }
     $6 = -2147483648;
    }
    label$414 : {
     if ($7 < $8) {
      break label$414
     }
     label$415 : {
      $7 = Math_fround(Math_fround($7 - $8) / $23);
      if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
       break label$415
      }
      $2 = ~~$7;
      break label$414;
     }
     $2 = -2147483648;
    }
    if (($2 | 0) <= ($6 | 0)) {
     break label$409
    }
   }
   label$416 : {
    if (!(HEAPU8[($5 + 18240 | 0) >> 0] | 0)) {
     break label$416
    }
    if ((HEAP32[($5 + 16192 | 0) >> 2] | 0 | 0) != (-1 | 0)) {
     break label$409
    }
   }
   if ((HEAP32[($5 + 16252 | 0) >> 2] | 0 | 0) != (-1 | 0)) {
    break label$409
   }
   if (HEAPU8[($5 + 3548 | 0) >> 0] | 0) {
    break label$409
   }
   if (HEAPU8[($5 + 3550 | 0) >> 0] | 0) {
    break label$409
   }
   $2 = 2;
   $6 = -1;
   label$417 : {
    if (HEAPU8[($5 + 3549 | 0) >> 0] | 0) {
     break label$417
    }
    $6 = (HEAP32[($5 + 16192 | 0) >> 2] | 0 | 0) != (0 | 0);
    $2 = 3;
   }
   $4 = HEAPU8[($4 + 225 | 0) >> 0] | 0;
   HEAP32[($5 + 18800 | 0) >> 2] = $6;
   ImGui__NavMoveRequestSubmit_28int_2c_20int_2c_20int_2c_20int_29(-1 | 0, $2 | 0, 1024 | 0, ($4 ? 33 : 3) | 0);
   HEAP32[($5 + 18804 | 0) >> 2] = -1;
   $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  }
  $4 = 1;
  label$418 : {
   if (HEAPU8[($5 + 18737 | 0) >> 0] | 0) {
    break label$418
   }
   $4 = (HEAPU8[($5 + 18713 | 0) >> 0] | 0 | 0) != (0 | 0);
  }
  HEAP8[($5 + 18712 | 0) >> 0] = $4;
  HEAP8[($3 + 18708 | 0) >> 0] = 0;
  label$419 : {
   $4 = HEAP32[($3 + 18648 | 0) >> 2] | 0;
   if (!$4) {
    break label$419
   }
   if ((HEAPU8[($4 + 10 | 0) >> 0] | 0) & 4 | 0) {
    break label$419
   }
   if (HEAP32[($3 + 18992 | 0) >> 2] | 0) {
    break label$419
   }
   $7 = Math_fround(Math_fround(Math_fround(HEAPF32[($5 + 15492 | 0) >> 2]) * Math_fround(HEAPF32[($4 + 660 | 0) >> 2])) * Math_fround(HEAPF32[($4 + 664 | 0) >> 2]));
   label$420 : {
    $2 = HEAP32[($4 + 820 | 0) >> 2] | 0;
    if (!$2) {
     break label$420
    }
    $7 = Math_fround($7 * Math_fround(HEAPF32[($2 + 660 | 0) >> 2]));
   }
   label$421 : {
    label$422 : {
     $7 = Math_fround(Math_fround(Math_fround($7 * Math_fround(100.0)) * Math_fround(HEAPF32[($3 + 24 | 0) >> 2])) + Math_fround(.5));
     if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
      break label$422
     }
     $2 = ~~$7;
     break label$421;
    }
    $2 = -2147483648;
   }
   $7 = Math_fround($2 | 0);
   label$423 : {
    if (HEAPU16[($4 + 384 | 0) >> 1] | 0) {
     break label$423
    }
    if (!(HEAPU8[($4 + 389 | 0) >> 0] | 0)) {
     break label$423
    }
    $2 = HEAP32[($3 + 18752 | 0) >> 2] | 0;
    if (($2 | 0) == (-1 | 0)) {
     break label$423
    }
    label$424 : {
     if ($2 >>> 0 > 1 >>> 0) {
      break label$424
     }
     HEAP32[($4 + 200 | 0) >> 2] = 0;
     HEAP32[($4 + 192 | 0) >> 2] = 0;
     label$425 : {
      label$426 : {
       $8 = Math_fround(Math_fround(($2 ? Math_fround(1.0) : Math_fround(-1.0)) * $7) + Math_fround(HEAPF32[($4 + 168 | 0) >> 2]));
       if (!(Math_fround(Math_abs($8)) < Math_fround(2147483648.0))) {
        break label$426
       }
       $6 = ~~$8;
       break label$425;
      }
      $6 = -2147483648;
     }
     HEAPF32[($4 + 184 | 0) >> 2] = Math_fround($6 | 0);
    }
    if (($2 & -2 | 0 | 0) != (2 | 0)) {
     break label$423
    }
    HEAP32[($4 + 204 | 0) >> 2] = 0;
    HEAP32[($4 + 196 | 0) >> 2] = 0;
    label$427 : {
     label$428 : {
      $8 = Math_fround(Math_fround((($2 | 0) == (2 | 0) ? Math_fround(-1.0) : Math_fround(1.0)) * $7) + Math_fround(HEAPF32[($4 + 172 | 0) >> 2]));
      if (!(Math_fround(Math_abs($8)) < Math_fround(2147483648.0))) {
       break label$428
      }
      $2 = ~~$8;
      break label$427;
     }
     $2 = -2147483648;
    }
    HEAPF32[($4 + 188 | 0) >> 2] = Math_fround($2 | 0);
   }
   if (!$9) {
    break label$419
   }
   $8 = Math_fround(HEAPF32[($5 + 13728 | 0) >> 2]);
   $24 = Math_fround(HEAPF32[($5 + 13744 | 0) >> 2]);
   $22 = Math_fround(Math_fround(HEAPF32[($5 + 13712 | 0) >> 2]) - Math_fround(HEAPF32[($5 + 13696 | 0) >> 2]));
   label$429 : {
    label$430 : {
     if (!(HEAPU8[($5 + 13588 | 0) >> 0] | 0)) {
      break label$430
     }
     if (HEAPU8[($5 + 17640 | 0) >> 0] | 0) {
      break label$430
     }
     $23 = Math_fround(.10000000149011612);
     break label$429;
    }
    label$431 : {
     if (HEAPU8[($5 + 13604 | 0) >> 0] | 0) {
      break label$431
     }
     $23 = Math_fround(1.0);
     break label$429;
    }
    $23 = HEAPU8[($5 + 17652 | 0) >> 0] | 0 ? Math_fround(1.0) : Math_fround(10.0);
   }
   $8 = Math_fround($24 - $8);
   label$432 : {
    if ($22 == Math_fround(0.0)) {
     break label$432
    }
    if (!(HEAPU8[($4 + 216 | 0) >> 0] | 0)) {
     break label$432
    }
    HEAP32[($4 + 200 | 0) >> 2] = 0;
    HEAP32[($4 + 192 | 0) >> 2] = 0;
    label$433 : {
     label$434 : {
      $22 = Math_fround(Math_fround(Math_fround($22 * $7) * $23) + Math_fround(HEAPF32[($4 + 168 | 0) >> 2]));
      if (!(Math_fround(Math_abs($22)) < Math_fround(2147483648.0))) {
       break label$434
      }
      $2 = ~~$22;
      break label$433;
     }
     $2 = -2147483648;
    }
    HEAPF32[($4 + 184 | 0) >> 2] = Math_fround($2 | 0);
   }
   if ($8 == Math_fround(0.0)) {
    break label$419
   }
   HEAP32[($4 + 204 | 0) >> 2] = 0;
   HEAP32[($4 + 196 | 0) >> 2] = 0;
   label$435 : {
    label$436 : {
     $7 = Math_fround(Math_fround(Math_fround($8 * $7) * $23) + Math_fround(HEAPF32[($4 + 172 | 0) >> 2]));
     if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
      break label$436
     }
     $2 = ~~$7;
     break label$435;
    }
    $2 = -2147483648;
   }
   HEAPF32[($4 + 188 | 0) >> 2] = Math_fround($2 | 0);
  }
  label$437 : {
   label$438 : {
    if ($15) {
     break label$438
    }
    HEAP16[($3 + 18710 | 0) >> 1] = 1;
    break label$437;
   }
   if (!$14) {
    break label$437
   }
   if (!((HEAPU8[($3 + 8 | 0) >> 0] | 0) & 4 | 0)) {
    break label$437
   }
   if (!((HEAPU8[($3 + 12 | 0) >> 0] | 0) & 4 | 0)) {
    break label$437
   }
   ImGui__NavCalcPreferredRefPos_28_29($0 + 136 | 0 | 0);
   i64toi32_i32$1 = $0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 136 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 140 | 0) >> 2] | 0;
   $20 = i64toi32_i32$0;
   $20$hi = i64toi32_i32$2;
   i64toi32_i32$0 = $3 + 3520 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $20;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$0 = $3 + 13992 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $20;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
   HEAP8[($3 + 159 | 0) >> 0] = 1;
   $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  }
  HEAP32[($3 + 18796 | 0) >> 2] = 0;
  $24 = Math_fround(HEAPF32[($5 + 3524 | 0) >> 2]);
  label$439 : {
   $7 = Math_fround(HEAPF32[($5 + 3520 | 0) >> 2]);
   if (!($7 >= Math_fround(-256.0e3))) {
    break label$439
   }
   if (!($24 >= Math_fround(-256.0e3))) {
    break label$439
   }
   $4 = $24 >= Math_fround(0.0) ^ -1 | 0;
   label$440 : {
    label$441 : {
     if (!(Math_fround(Math_abs($24)) < Math_fround(2147483648.0))) {
      break label$441
     }
     $3 = ~~$24;
     break label$440;
    }
    $3 = -2147483648;
   }
   $24 = Math_fround($3 - ($4 & $24 != Math_fround($3 | 0) | 0) | 0 | 0);
   HEAPF32[($5 + 19356 | 0) >> 2] = $24;
   $4 = $7 >= Math_fround(0.0) ^ -1 | 0;
   label$442 : {
    label$443 : {
     if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
      break label$443
     }
     $3 = ~~$7;
     break label$442;
    }
    $3 = -2147483648;
   }
   $7 = Math_fround($3 - ($4 & $7 != Math_fround($3 | 0) | 0) | 0 | 0);
   HEAPF32[($5 + 19352 | 0) >> 2] = $7;
   HEAPF32[($5 + 3524 | 0) >> 2] = $24;
   HEAPF32[($5 + 3520 | 0) >> 2] = $7;
  }
  label$444 : {
   label$445 : {
    label$446 : {
     if (!($7 >= Math_fround(-256.0e3))) {
      break label$446
     }
     if (!($24 >= Math_fround(-256.0e3))) {
      break label$446
     }
     $8 = Math_fround(HEAPF32[($5 + 13992 | 0) >> 2]);
     if (!($8 >= Math_fround(-256.0e3))) {
      break label$446
     }
     $22 = Math_fround(HEAPF32[($5 + 13996 | 0) >> 2]);
     if ($22 >= Math_fround(-256.0e3)) {
      break label$445
     }
    }
    i64toi32_i32$0 = $5 + 188 | 0;
    i64toi32_i32$2 = 0;
    HEAP32[i64toi32_i32$0 >> 2] = 0;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
    break label$444;
   }
   $22 = Math_fround($24 - $22);
   HEAPF32[($5 + 192 | 0) >> 2] = $22;
   $7 = Math_fround($7 - $8);
   HEAPF32[($5 + 188 | 0) >> 2] = $7;
   label$447 : {
    if ($7 != Math_fround(0.0)) {
     break label$447
    }
    if ($22 == Math_fround(0.0)) {
     break label$444
    }
   }
   HEAP8[($5 + 18711 | 0) >> 0] = 0;
  }
  i64toi32_i32$1 = $5;
  i64toi32_i32$2 = HEAP32[($5 + 3520 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($5 + 3524 | 0) >> 2] | 0;
  $20 = i64toi32_i32$2;
  $20$hi = i64toi32_i32$0;
  i64toi32_i32$2 = $5 + 13992 | 0;
  HEAP32[i64toi32_i32$2 >> 2] = $20;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
  $25 = (wasm2js_scratch_store_i32(2, $20), wasm2js_scratch_load_f32());
  $10 = $25 >= Math_fround(-256.0e3) & $24 >= Math_fround(-256.0e3) | 0;
  $4 = $5 + 8 | 0;
  $3 = 0;
  label$448 : while (1) {
   $15 = $4 + ($3 << 2 | 0) | 0;
   $19 = $15 + 14140 | 0;
   $6 = $15 + 14120 | 0;
   label$449 : {
    label$450 : {
     $2 = $4 + $3 | 0;
     if (!(HEAPU8[($2 + 3520 | 0) >> 0] | 0)) {
      break label$450
     }
     $18 = $2 + 14072 | 0;
     $7 = Math_fround(HEAPF32[$6 >> 2]);
     $9 = $7 < Math_fround(0.0);
     HEAP8[$18 >> 0] = $9;
     $11 = $3 << 1 | 0;
     $12 = $4 + $11 | 0;
     $16 = $12 + 14082 | 0;
     HEAP16[$16 >> 1] = 0;
     HEAP8[($2 + 14102 | 0) >> 0] = 0;
     HEAPF32[$19 >> 2] = $7;
     label$451 : {
      if (!$9) {
       break label$451
      }
      HEAP32[$6 >> 2] = 0;
      label$452 : {
       label$453 : {
        $29 = +HEAPF64[($5 + 16008 | 0) >> 3];
        $2 = $3 << 3 | 0;
        $19 = $5 + $2 | 0;
        $6 = $19 + 14040 | 0;
        if (!(Math_fround(HEAPF32[($5 + 40 | 0) >> 2]) > Math_fround($29 - +HEAPF64[$6 >> 3]))) {
         break label$453
        }
        $7 = Math_fround(0.0);
        $8 = Math_fround(0.0);
        label$454 : {
         if (!$10) {
          break label$454
         }
         $8 = Math_fround($24 - Math_fround(HEAPF32[($19 + 14004 | 0) >> 2]));
         $7 = Math_fround($25 - Math_fround(HEAPF32[($19 + 14e3 | 0) >> 2]));
        }
        $5484 = Math_fround(Math_fround($7 * $7) + Math_fround($8 * $8));
        $7 = Math_fround(HEAPF32[($5 + 44 | 0) >> 2]);
        if (!($5484 < Math_fround($7 * $7))) {
         break label$453
        }
        $19 = ($5 + $11 | 0) + 14100 | 0;
        HEAP16[$19 >> 1] = (HEAPU16[$19 >> 1] | 0) + 1 | 0;
        break label$452;
       }
       HEAP16[(($5 + $11 | 0) + 14100 | 0) >> 1] = 1;
      }
      HEAPF64[$6 >> 3] = $29;
      $2 = $4 + $2 | 0;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$2 = $2 + 13992 | 0;
      HEAP32[i64toi32_i32$2 >> 2] = $20;
      HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP16[$16 >> 1] = HEAPU16[($12 + 14092 | 0) >> 1] | 0;
      i64toi32_i32$2 = $2 + 14160 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$2 >> 2] = 0;
      HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($15 + 14200 | 0) >> 2] = 0;
      $15 = HEAPU16[$16 >> 1] | 0;
      break label$449;
     }
     HEAPF32[$6 >> 2] = Math_fround($7 + Math_fround(HEAPF32[($5 + 24 | 0) >> 2]));
     $7 = Math_fround(0.0);
     $8 = Math_fround(0.0);
     label$455 : {
      if (!$10) {
       break label$455
      }
      $2 = $5 + ($3 << 3 | 0) | 0;
      $7 = Math_fround($24 - Math_fround(HEAPF32[($2 + 14004 | 0) >> 2]));
      $8 = Math_fround($25 - Math_fround(HEAPF32[($2 + 14e3 | 0) >> 2]));
     }
     $2 = $15 + 14200 | 0;
     $22 = Math_fround(HEAPF32[$2 >> 2]);
     $23 = Math_fround(Math_fround($8 * $8) + Math_fround($7 * $7));
     HEAPF32[$2 >> 2] = $22 >= $23 ? $22 : $23;
     $2 = $4 + ($3 << 3 | 0) | 0;
     $6 = $2 + 14160 | 0;
     $22 = Math_fround(HEAPF32[$6 >> 2]);
     $8 = $8 < Math_fround(0.0) ? Math_fround(-$8) : $8;
     HEAPF32[$6 >> 2] = $22 >= $8 ? $22 : $8;
     $2 = $2 + 14164 | 0;
     $8 = Math_fround(HEAPF32[$2 >> 2]);
     $7 = $7 < Math_fround(0.0) ? Math_fround(-$7) : $7;
     HEAPF32[$2 >> 2] = $8 >= $7 ? $8 : $7;
     $15 = 0;
     break label$449;
    }
    $15 = 0;
    $18 = $2 + 14072 | 0;
    HEAP8[$18 >> 0] = 0;
    HEAP16[(($4 + ($3 << 1 | 0) | 0) + 14082 | 0) >> 1] = 0;
    $7 = Math_fround(HEAPF32[$6 >> 2]);
    HEAP8[($2 + 14102 | 0) >> 0] = $7 >= Math_fround(0.0);
    HEAPF32[$19 >> 2] = $7;
    HEAP32[$6 >> 2] = -1082130432;
   }
   HEAP8[(($5 + $3 | 0) + 14085 | 0) >> 0] = ($15 & 65535 | 0 | 0) == (2 | 0);
   label$456 : {
    if (!(HEAPU8[$18 >> 0] | 0)) {
     break label$456
    }
    HEAP8[($5 + 18711 | 0) >> 0] = 0;
   }
   $3 = $3 + 1 | 0;
   if (($3 | 0) != (5 | 0)) {
    continue label$448
   }
   break label$448;
  };
  ImGui__DockContextNewFrameUpdateUndocking_28ImGuiContext__29($1 | 0);
  ImGui__UpdateHoveredWindowAndCaptureFlags_28_29();
  ImGui__UpdateMouseMovingWindowNewFrame_28_29();
  label$457 : {
   label$458 : {
    label$459 : {
     label$460 : {
      $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      $3 = HEAP32[($2 + 18548 | 0) >> 2] | 0;
      if (($3 | 0) < (1 | 0)) {
       break label$460
      }
      $6 = HEAP32[($2 + 18556 | 0) >> 2] | 0;
      label$461 : while (1) {
       label$462 : {
        $5 = $3 + -1 | 0;
        $4 = HEAP32[(($6 + Math_imul($5, 40) | 0) + 4 | 0) >> 2] | 0;
        if (!$4) {
         break label$462
        }
        if ((HEAPU8[($4 + 11 | 0) >> 0] | 0) & 8 | 0) {
         break label$459
        }
       }
       $4 = $3 >>> 0 > 1 >>> 0;
       $3 = $5;
       if ($4) {
        continue label$461
       }
       break label$461;
      };
     }
     if (!(HEAP32[($1 + 18992 | 0) >> 2] | 0)) {
      break label$458
     }
     if (!(Math_fround(HEAPF32[($1 + 19008 | 0) >> 2]) > Math_fround(0.0))) {
      break label$458
     }
    }
    $7 = Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 24 | 0) >> 2]) * Math_fround(6.0)) + Math_fround(HEAPF32[($1 + 19032 | 0) >> 2]));
    HEAPF32[($1 + 19032 | 0) >> 2] = $7 < Math_fround(1.0) ? $7 : Math_fround(1.0);
    break label$457;
   }
   $7 = Math_fround(Math_fround(HEAPF32[($1 + 19032 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($1 + 24 | 0) >> 2]) * Math_fround(-10.0)));
   HEAPF32[($1 + 19032 | 0) >> 2] = $7 >= Math_fround(0.0) ? $7 : Math_fround(0.0);
  }
  HEAP32[($1 + 23892 | 0) >> 2] = -1;
  $3 = 0;
  HEAP32[($1 + 19036 | 0) >> 2] = 0;
  i64toi32_i32$2 = $1;
  i64toi32_i32$0 = -1;
  HEAP32[($1 + 23884 | 0) >> 2] = -1;
  HEAP32[($1 + 23888 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1;
  i64toi32_i32$0 = HEAP32[($1 + 23300 | 0) >> 2] | 0;
  i64toi32_i32$2 = HEAP32[($1 + 23304 | 0) >> 2] | 0;
  $5691 = i64toi32_i32$0;
  i64toi32_i32$0 = $1;
  HEAP32[($1 + 23316 | 0) >> 2] = $5691;
  HEAP32[($1 + 23320 | 0) >> 2] = i64toi32_i32$2;
  HEAP8[($1 + 23300 | 0) >> 0] = 0;
  i64toi32_i32$1 = $1 + 23308 | 0;
  i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  $5697 = i64toi32_i32$2;
  i64toi32_i32$2 = $1 + 23324 | 0;
  HEAP32[i64toi32_i32$2 >> 2] = $5697;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
  $5 = $2;
  label$463 : {
   $4 = HEAP32[($5 + 16132 | 0) >> 2] | 0;
   if (!$4) {
    break label$463
   }
   $7 = Math_fround(Math_fround(HEAPF32[($2 + 16148 | 0) >> 2]) - Math_fround(HEAPF32[($2 + 24 | 0) >> 2]));
   HEAPF32[($2 + 16148 | 0) >> 2] = $7;
   label$464 : {
    label$465 : {
     $8 = Math_fround(HEAPF32[($2 + 3520 | 0) >> 2]);
     if (!($8 >= Math_fround(-256.0e3))) {
      break label$465
     }
     $22 = Math_fround(HEAPF32[($2 + 3524 | 0) >> 2]);
     if (!($22 >= Math_fround(-256.0e3))) {
      break label$465
     }
     $8 = Math_fround($8 - Math_fround(HEAPF32[($2 + 16136 | 0) >> 2]));
     $5730 = Math_fround($8 * $8);
     $8 = Math_fround($22 - Math_fround(HEAPF32[($2 + 16140 | 0) >> 2]));
     $5739 = Math_fround($5730 + Math_fround($8 * $8));
     $8 = Math_fround(HEAPF32[($2 + 48 | 0) >> 2]);
     if ($5739 > Math_fround($8 * $8)) {
      break label$464
     }
     $3 = $4;
     $5 = $2;
     if ($7 <= Math_fround(0.0)) {
      break label$464
     }
     break label$463;
    }
    $3 = $4;
    $5 = $2;
    if (!($7 <= Math_fround(0.0))) {
     break label$463
    }
   }
   $3 = 0;
   HEAP32[($2 + 16148 | 0) >> 2] = 0;
   $5 = $2;
   label$466 : {
    if (!((HEAPU8[($5 + 23536 | 0) >> 0] | 0) & 32 | 0)) {
     break label$466
    }
    HEAP32[($0 + 48 | 0) >> 2] = 67605;
    ImGui__DebugLog_28char_20const__2c_20____29(70433 | 0, $0 + 48 | 0 | 0);
    $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   }
   HEAP32[($2 + 16132 | 0) >> 2] = 0;
   i64toi32_i32$2 = $2;
   i64toi32_i32$0 = 0;
   HEAP32[($2 + 16160 | 0) >> 2] = 0;
   HEAP32[($2 + 16164 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($2 + 16144 | 0) >> 2] = -1;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = HEAP32[($2 + 3520 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[($2 + 3524 | 0) >> 2] | 0;
   $5771 = i64toi32_i32$0;
   i64toi32_i32$0 = $2;
   HEAP32[($2 + 16136 | 0) >> 2] = $5771;
   HEAP32[($2 + 16140 | 0) >> 2] = i64toi32_i32$2;
  }
  $7 = Math_fround(0.0);
  $8 = Math_fround(0.0);
  label$467 : {
   if ((HEAP32[($5 + 17860 | 0) >> 2] | 0 | 0) != (-1 | 0)) {
    break label$467
   }
   $8 = Math_fround(HEAPF32[($2 + 3540 | 0) >> 2]);
  }
  label$468 : {
   if ((HEAP32[($5 + 17872 | 0) >> 2] | 0 | 0) != (-1 | 0)) {
    break label$468
   }
   $7 = Math_fround(HEAPF32[($2 + 3536 | 0) >> 2]);
  }
  $4 = $3;
  label$469 : {
   label$470 : {
    if ($3) {
     break label$470
    }
    $4 = HEAP32[($2 + 16120 | 0) >> 2] | 0;
    if (!$4) {
     break label$469
    }
   }
   if (HEAPU8[($4 + 222 | 0) >> 0] | 0) {
    break label$469
   }
   $6 = HEAPU8[($2 + 3548 | 0) >> 0] | 0;
   label$471 : {
    label$472 : {
     if ($7 == Math_fround(0.0)) {
      break label$472
     }
     if (!($6 & 255 | 0)) {
      break label$471
     }
     if (!(HEAPU8[($2 + 80 | 0) >> 0] | 0)) {
      break label$469
     }
     $7 = Math_fround(Math_fround(Math_fround(Math_abs($7)) * Math_fround(.699999988079071)) + Math_fround(HEAPF32[($5 + 16148 | 0) >> 2]));
     HEAPF32[($5 + 16148 | 0) >> 2] = $7 < Math_fround(.699999988079071) ? $7 : Math_fround(.699999988079071);
     label$473 : {
      if ((HEAP32[($5 + 16132 | 0) >> 2] | 0 | 0) == ($4 | 0)) {
       break label$473
      }
      label$474 : {
       if (!((HEAPU8[($5 + 23536 | 0) >> 0] | 0) & 32 | 0)) {
        break label$474
       }
       HEAP32[($0 + 32 | 0) >> 2] = HEAP32[$4 >> 2] | 0;
       ImGui__DebugLog_28char_20const__2c_20____29(70433 | 0, $0 + 32 | 0 | 0);
      }
      HEAP32[($5 + 16132 | 0) >> 2] = $4;
      i64toi32_i32$1 = $5 + 3520 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $5835 = i64toi32_i32$2;
      i64toi32_i32$2 = $5;
      HEAP32[($5 + 16136 | 0) >> 2] = $5835;
      HEAP32[($5 + 16140 | 0) >> 2] = i64toi32_i32$0;
     }
     $8 = Math_fround(HEAPF32[($4 + 660 | 0) >> 2]);
     $7 = Math_fround(Math_fround(Math_fround(HEAPF32[($2 + 3536 | 0) >> 2]) * Math_fround(.10000000149011612)) + $8);
     $7 = $7 < Math_fround(.5) ? Math_fround(.5) : Math_fround(Math_min($7, Math_fround(2.5)));
     HEAPF32[($4 + 660 | 0) >> 2] = $7;
     if (($4 | 0) != (HEAP32[($4 + 828 | 0) >> 2] | 0 | 0)) {
      break label$469
     }
     $26 = Math_fround(HEAPF32[($2 + 3520 | 0) >> 2]);
     $24 = Math_fround(HEAPF32[($2 + 3524 | 0) >> 2]);
     i64toi32_i32$2 = $4;
     i64toi32_i32$0 = 2139095039;
     HEAP32[($4 + 264 | 0) >> 2] = 2139095039;
     HEAP32[($4 + 268 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($4 + 260 | 0) >> 2] = (HEAP32[($4 + 260 | 0) >> 2] | 0) & -15 | 0;
     label$475 : {
      label$476 : {
       $3 = $4 + 68 | 0;
       $22 = Math_fround(HEAPF32[$3 >> 2]);
       $7 = Math_fround($7 / $8);
       $8 = Math_fround(Math_fround(1.0) - $7);
       $23 = Math_fround(HEAPF32[($4 + 76 | 0) >> 2]);
       $24 = Math_fround($22 + Math_fround(Math_fround(Math_fround($8 * $23) * Math_fround($24 - $22)) / $23));
       if (!(Math_fround(Math_abs($24)) < Math_fround(2147483648.0))) {
        break label$476
       }
       $5 = ~~$24;
       break label$475;
      }
      $5 = -2147483648;
     }
     $27 = Math_fround($5 | 0);
     HEAPF32[$3 >> 2] = $27;
     label$477 : {
      label$478 : {
       $3 = $4 + 64 | 0;
       $24 = Math_fround(HEAPF32[$3 >> 2]);
       $25 = Math_fround(HEAPF32[($4 + 72 | 0) >> 2]);
       $8 = Math_fround($24 + Math_fround(Math_fround(Math_fround($8 * $25) * Math_fround($26 - $24)) / $25));
       if (!(Math_fround(Math_abs($8)) < Math_fround(2147483648.0))) {
        break label$478
       }
       $5 = ~~$8;
       break label$477;
      }
      $5 = -2147483648;
     }
     $26 = Math_fround($5 | 0);
     HEAPF32[$3 >> 2] = $26;
     $8 = Math_fround($27 - $22);
     label$479 : {
      label$480 : {
       $22 = Math_fround($26 - $24);
       if ($22 != Math_fround(0.0)) {
        break label$480
       }
       if ($8 == Math_fround(0.0)) {
        break label$479
       }
      }
      label$481 : {
       if ((HEAPU8[($4 + 9 | 0) >> 0] | 0) & 1 | 0) {
        break label$481
       }
       $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
       if (!(Math_fround(HEAPF32[($3 + 23384 | 0) >> 2]) <= Math_fround(0.0))) {
        break label$481
       }
       HEAPF32[($3 + 23384 | 0) >> 2] = Math_fround(HEAPF32[($3 + 28 | 0) >> 2]);
      }
      HEAPF32[($4 + 292 | 0) >> 2] = Math_fround($22 + Math_fround(HEAPF32[($4 + 292 | 0) >> 2]));
      $3 = $4 + 296 | 0;
      HEAPF32[$3 >> 2] = Math_fround($8 + Math_fround(HEAPF32[$3 >> 2]));
      $3 = $4 + 316 | 0;
      HEAPF32[$3 >> 2] = Math_fround($22 + Math_fround(HEAPF32[$3 >> 2]));
      $3 = $4 + 320 | 0;
      HEAPF32[$3 >> 2] = Math_fround($8 + Math_fround(HEAPF32[$3 >> 2]));
      $3 = $4 + 324 | 0;
      HEAPF32[$3 >> 2] = Math_fround($22 + Math_fround(HEAPF32[$3 >> 2]));
      $3 = $4 + 328 | 0;
      HEAPF32[$3 >> 2] = Math_fround($8 + Math_fround(HEAPF32[$3 >> 2]));
      $3 = $4 + 308 | 0;
      HEAPF32[$3 >> 2] = Math_fround($22 + Math_fround(HEAPF32[$3 >> 2]));
      $3 = $4 + 312 | 0;
      HEAPF32[$3 >> 2] = Math_fround($8 + Math_fround(HEAPF32[$3 >> 2]));
     }
     $3 = $4 + 76 | 0;
     label$482 : {
      label$483 : {
       $8 = Math_fround($7 * $23);
       if (!(Math_fround(Math_abs($8)) < Math_fround(2147483648.0))) {
        break label$483
       }
       $5 = ~~$8;
       break label$482;
      }
      $5 = -2147483648;
     }
     HEAPF32[$3 >> 2] = Math_fround($5 | 0);
     label$484 : {
      label$485 : {
       $8 = Math_fround($7 * $25);
       if (!(Math_fround(Math_abs($8)) < Math_fround(2147483648.0))) {
        break label$485
       }
       $3 = ~~$8;
       break label$484;
      }
      $3 = -2147483648;
     }
     HEAPF32[($4 + 72 | 0) >> 2] = Math_fround($3 | 0);
     label$486 : {
      label$487 : {
       $3 = $4 + 80 | 0;
       $8 = Math_fround($7 * Math_fround(HEAPF32[$3 >> 2]));
       if (!(Math_fround(Math_abs($8)) < Math_fround(2147483648.0))) {
        break label$487
       }
       $5 = ~~$8;
       break label$486;
      }
      $5 = -2147483648;
     }
     HEAPF32[$3 >> 2] = Math_fround($5 | 0);
     label$488 : {
      label$489 : {
       $3 = $4 + 84 | 0;
       $7 = Math_fround($7 * Math_fround(HEAPF32[$3 >> 2]));
       if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
        break label$489
       }
       $5 = ~~$7;
       break label$488;
      }
      $5 = -2147483648;
     }
     HEAPF32[$3 >> 2] = Math_fround($5 | 0);
     break label$469;
    }
    if ($6 & 255 | 0) {
     break label$469
    }
   }
   label$490 : {
    if (!(HEAPU8[($2 + 3549 | 0) >> 0] | 0)) {
     break label$490
    }
    $5 = HEAPU8[($2 + 105 | 0) >> 0] | 0;
    $8 = $5 ? $8 : $7;
    $7 = $5 ? $7 : Math_fround(0.0);
   }
   $5 = $2 + 16152 | 0;
   $22 = Math_fround(HEAPF32[$5 >> 2]);
   $23 = Math_fround(HEAPF32[($2 + 16156 | 0) >> 2]);
   i64toi32_i32$2 = $5;
   i64toi32_i32$0 = 0;
   HEAP32[$5 >> 2] = 0;
   HEAP32[($5 + 4 | 0) >> 2] = i64toi32_i32$0;
   $24 = Math_fround(HEAPF32[($2 + 16160 | 0) >> 2]);
   $25 = Math_fround(Math_fround(Math_fround(Math_abs($8)) / Math_fround(30.0)) + Math_fround($24 - Math_fround($24 / Math_fround(30.0))));
   HEAPF32[($2 + 16160 | 0) >> 2] = $25;
   $5 = $2 + 16164 | 0;
   $24 = Math_fround(HEAPF32[$5 >> 2]);
   $24 = Math_fround(Math_fround(Math_fround(Math_abs($7)) / Math_fround(30.0)) + Math_fround($24 - Math_fround($24 / Math_fround(30.0))));
   HEAPF32[$5 >> 2] = $24;
   $7 = Math_fround($7 + $23);
   label$491 : {
    $8 = Math_fround($8 + $22);
    if ($8 != Math_fround(0.0)) {
     break label$491
    }
    if ($7 == Math_fround(0.0)) {
     break label$469
    }
   }
   label$492 : {
    if ($3) {
     break label$492
    }
    $6 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    label$493 : {
     label$494 : {
      if ($8 == Math_fround(0.0)) {
       break label$494
      }
      $5 = HEAP32[($6 + 16120 | 0) >> 2] | 0;
      $3 = $5;
      label$495 : {
       $2 = HEAP32[($5 + 8 | 0) >> 2] | 0;
       $15 = $2 & 16777216 | 0;
       if (!$15) {
        break label$495
       }
       $4 = $2;
       $3 = $5;
       label$496 : while (1) {
        label$497 : {
         if (Math_fround(HEAPF32[($3 + 176 | 0) >> 2]) == Math_fround(0.0)) {
          break label$497
         }
         if (($4 & 528 | 0 | 0) != (16 | 0)) {
          break label$495
         }
        }
        $3 = HEAP32[($3 + 820 | 0) >> 2] | 0;
        $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
        if ($4 & 16777216 | 0) {
         continue label$496
        }
        break label$496;
       };
      }
      if ($7 != Math_fround(0.0)) {
       break label$493
      }
      break label$492;
     }
     if ($7 == Math_fround(0.0)) {
      break label$469
     }
     $5 = HEAP32[($6 + 16120 | 0) >> 2] | 0;
     $2 = HEAP32[($5 + 8 | 0) >> 2] | 0;
     $15 = $2 & 16777216 | 0;
     $3 = 0;
    }
    label$498 : {
     if (!$15) {
      break label$498
     }
     label$499 : while (1) {
      label$500 : {
       if (Math_fround(HEAPF32[($5 + 180 | 0) >> 2]) == Math_fround(0.0)) {
        break label$500
       }
       if (($2 & 528 | 0 | 0) != (16 | 0)) {
        break label$498
       }
      }
      $5 = HEAP32[($5 + 820 | 0) >> 2] | 0;
      $2 = HEAP32[($5 + 8 | 0) >> 2] | 0;
      if ($2 & 16777216 | 0) {
       continue label$499
      }
      break label$499;
     };
    }
    label$501 : {
     if ($7 != Math_fround(0.0)) {
      break label$501
     }
     $3 = $5;
     break label$492;
    }
    label$502 : {
     if ($3) {
      break label$502
     }
     $3 = $5;
     break label$492;
    }
    label$503 : {
     if (($3 | 0) != ($5 | 0)) {
      break label$503
     }
     $3 = $5;
     break label$492;
    }
    $4 = HEAP32[($6 + 16016 | 0) >> 2] | 0;
    label$504 : {
     $2 = HEAP32[($6 + 16144 | 0) >> 2] | 0;
     if (($2 | 0) != (-1 | 0)) {
      break label$504
     }
     HEAP32[($6 + 16144 | 0) >> 2] = $4;
     $2 = $4;
    }
    label$505 : {
     label$506 : {
      label$507 : {
       if ($8 == Math_fround(0.0)) {
        break label$507
       }
       if (($2 | 0) == ($4 | 0)) {
        break label$506
       }
      }
      $22 = Math_fround(HEAPF32[($6 + 16160 | 0) >> 2]);
      $23 = Math_fround(HEAPF32[($6 + 16164 | 0) >> 2]);
      if ($22 != $23) {
       break label$505
      }
     }
     HEAPF32[($6 + 16152 | 0) >> 2] = $8;
     HEAPF32[($6 + 16156 | 0) >> 2] = $7;
     break label$469;
    }
    $3 = $22 > $23 ? $3 : $5;
   }
   if ((HEAPU16[($3 + 8 | 0) >> 1] | 0) & 528 | 0) {
    break label$469
   }
   label$508 : {
    label$509 : {
     if ($8 != Math_fround(0.0)) {
      break label$509
     }
     $5 = 0;
     break label$508;
    }
    $5 = Math_fround(HEAPF32[($3 + 176 | 0) >> 2]) != Math_fround(0.0);
   }
   HEAP8[($0 + 136 | 0) >> 0] = $5;
   label$510 : {
    label$511 : {
     if ($7 != Math_fround(0.0)) {
      break label$511
     }
     HEAP8[($0 + 137 | 0) >> 0] = 0;
     break label$510;
    }
    $4 = Math_fround(HEAPF32[($3 + 180 | 0) >> 2]) != Math_fround(0.0);
    HEAP8[($0 + 137 | 0) >> 0] = $4;
    if (($4 & $5 | 0 | 0) != (1 | 0)) {
     break label$510
    }
    HEAP8[(($0 + 136 | 0) + ($25 > $24) | 0) >> 0] = 0;
    $5 = HEAPU8[($0 + 136 | 0) >> 0] | 0;
   }
   label$512 : {
    if (!($5 & 255 | 0)) {
     break label$512
    }
    LockWheelingWindow_28ImGuiWindow__2c_20float_29($3 | 0, Math_fround($8));
    $23 = Math_fround(Math_fround(Math_fround(HEAPF32[($3 + 524 | 0) >> 2]) - Math_fround(HEAPF32[($3 + 516 | 0) >> 2])) * Math_fround(.6700000166893005));
    $22 = Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 15492 | 0) >> 2]) * Math_fround(HEAPF32[($3 + 660 | 0) >> 2])) * Math_fround(HEAPF32[($3 + 664 | 0) >> 2]));
    label$513 : {
     $5 = HEAP32[($3 + 820 | 0) >> 2] | 0;
     if (!$5) {
      break label$513
     }
     $22 = Math_fround($22 * Math_fround(HEAPF32[($5 + 660 | 0) >> 2]));
    }
    HEAP32[($3 + 200 | 0) >> 2] = 0;
    HEAP32[($3 + 192 | 0) >> 2] = 0;
    label$514 : {
     label$515 : {
      $22 = Math_fround($22 + $22);
      $22 = $22 < $23 ? $22 : $23;
      if (!(Math_fround(Math_abs($22)) < Math_fround(2147483648.0))) {
       break label$515
      }
      $5 = ~~$22;
      break label$514;
     }
     $5 = -2147483648;
    }
    HEAPF32[($3 + 184 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3 + 168 | 0) >> 2]) - Math_fround($8 * Math_fround($5 | 0)));
   }
   if (!(HEAPU8[($0 + 137 | 0) >> 0] | 0)) {
    break label$469
   }
   LockWheelingWindow_28ImGuiWindow__2c_20float_29($3 | 0, Math_fround($7));
   $22 = Math_fround(Math_fround(Math_fround(HEAPF32[($3 + 528 | 0) >> 2]) - Math_fround(HEAPF32[($3 + 520 | 0) >> 2])) * Math_fround(.6700000166893005));
   $8 = Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 15492 | 0) >> 2]) * Math_fround(HEAPF32[($3 + 660 | 0) >> 2])) * Math_fround(HEAPF32[($3 + 664 | 0) >> 2]));
   label$516 : {
    $5 = HEAP32[($3 + 820 | 0) >> 2] | 0;
    if (!$5) {
     break label$516
    }
    $8 = Math_fround($8 * Math_fround(HEAPF32[($5 + 660 | 0) >> 2]));
   }
   HEAP32[($3 + 204 | 0) >> 2] = 0;
   HEAP32[($3 + 196 | 0) >> 2] = 0;
   label$517 : {
    label$518 : {
     $8 = Math_fround($8 * Math_fround(5.0));
     $8 = $8 < $22 ? $8 : $22;
     if (!(Math_fround(Math_abs($8)) < Math_fround(2147483648.0))) {
      break label$518
     }
     $5 = ~~$8;
     break label$517;
    }
    $5 = -2147483648;
   }
   HEAPF32[($3 + 188 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3 + 172 | 0) >> 2]) - Math_fround($7 * Math_fround($5 | 0)));
  }
  $8 = Math_fround(3402823466385288598117041.0e14);
  label$519 : {
   if (HEAPU8[($1 + 16035 | 0) >> 0] | 0) {
    break label$519
   }
   $7 = Math_fround(HEAPF32[($1 + 112 | 0) >> 2]);
   if ($7 < Math_fround(0.0)) {
    break label$519
   }
   $8 = Math_fround(Math_fround(+HEAPF64[($1 + 16008 | 0) >> 3]) - $7);
  }
  label$520 : {
   $6 = HEAP32[($1 + 16044 | 0) >> 2] | 0;
   if (!$6) {
    break label$520
   }
   $5 = 0;
   label$521 : while (1) {
    $3 = HEAP32[((HEAP32[($1 + 16052 | 0) >> 2] | 0) + ($5 << 2 | 0) | 0) >> 2] | 0;
    HEAP8[($3 + 221 | 0) >> 0] = 0;
    $4 = HEAPU8[($3 + 219 | 0) >> 0] | 0;
    HEAP8[($3 + 220 | 0) >> 0] = $4;
    HEAP8[($3 + 219 | 0) >> 0] = 0;
    $2 = HEAPU16[($3 + 232 | 0) >> 1] | 0;
    HEAP16[($3 + 232 | 0) >> 1] = 0;
    HEAP16[($3 + 234 | 0) >> 1] = $2;
    label$522 : {
     if ($4) {
      break label$522
     }
     if (HEAPU8[($3 + 904 | 0) >> 0] | 0) {
      break label$522
     }
     if (!(Math_fround(HEAPF32[($3 + 628 | 0) >> 2]) < $8)) {
      break label$522
     }
     ImGui__GcCompactTransientWindowBuffers_28ImGuiWindow__29($3 | 0);
     $6 = HEAP32[($1 + 16044 | 0) >> 2] | 0;
    }
    $5 = $5 + 1 | 0;
    if (($5 | 0) != ($6 | 0)) {
     continue label$521
    }
    break label$521;
   };
  }
  label$523 : {
   $5 = HEAP32[($1 + 19252 | 0) >> 2] | 0;
   if (($5 | 0) < (1 | 0)) {
    break label$523
   }
   $3 = 0;
   label$524 : while (1) {
    label$525 : {
     $7 = Math_fround(HEAPF32[((HEAP32[($1 + 19260 | 0) >> 2] | 0) + ($3 << 2 | 0) | 0) >> 2]);
     if (!($7 >= Math_fround(0.0))) {
      break label$525
     }
     if (!($7 < $8)) {
      break label$525
     }
     ImGui__TableGcCompactTransientBuffers_28ImGuiTable__29((HEAP32[($1 + 19228 | 0) >> 2] | 0) + Math_imul($3, 488) | 0 | 0);
     $5 = HEAP32[($1 + 19252 | 0) >> 2] | 0;
    }
    $3 = $3 + 1 | 0;
    if (($3 | 0) < ($5 | 0)) {
     continue label$524
    }
    break label$524;
   };
  }
  label$526 : {
   $5 = HEAP32[($1 + 19208 | 0) >> 2] | 0;
   if (($5 | 0) < (1 | 0)) {
    break label$526
   }
   $3 = 0;
   label$527 : while (1) {
    label$528 : {
     $4 = (HEAP32[($1 + 19216 | 0) >> 2] | 0) + Math_imul($3, 104) | 0;
     $7 = Math_fround(HEAPF32[($4 + 4 | 0) >> 2]);
     if (!($7 >= Math_fround(0.0))) {
      break label$528
     }
     if (!($7 < $8)) {
      break label$528
     }
     ImGui__TableGcCompactTransientBuffers_28ImGuiTableTempData__29($4 | 0);
     $5 = HEAP32[($1 + 19208 | 0) >> 2] | 0;
    }
    $3 = $3 + 1 | 0;
    if (($3 | 0) < ($5 | 0)) {
     continue label$527
    }
    break label$527;
   };
  }
  label$529 : {
   if (!(HEAPU8[($1 + 16035 | 0) >> 0] | 0)) {
    break label$529
   }
   label$530 : {
    $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    $5 = HEAP32[($3 + 18532 | 0) >> 2] | 0;
    if (!$5) {
     break label$530
    }
    i64toi32_i32$2 = $3;
    i64toi32_i32$0 = 0;
    HEAP32[($3 + 18524 | 0) >> 2] = 0;
    HEAP32[($3 + 18528 | 0) >> 2] = i64toi32_i32$0;
    $4 = $3 + 184 | 0;
    HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + -1 | 0;
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($5, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    HEAP32[($3 + 18532 | 0) >> 2] = 0;
   }
   label$531 : {
    $5 = HEAP32[($3 + 18544 | 0) >> 2] | 0;
    if (!$5) {
     break label$531
    }
    i64toi32_i32$2 = $3;
    i64toi32_i32$0 = 0;
    HEAP32[($3 + 18536 | 0) >> 2] = 0;
    HEAP32[($3 + 18540 | 0) >> 2] = i64toi32_i32$0;
    label$532 : {
     $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$4) {
      break label$532
     }
     $4 = $4 + 184 | 0;
     HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($5, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    HEAP32[($3 + 18544 | 0) >> 2] = 0;
   }
   ImGui__TableGcCompactSettings_28_29();
  }
  HEAP8[($1 + 16035 | 0) >> 0] = 0;
  label$533 : {
   $3 = HEAP32[($1 + 18648 | 0) >> 2] | 0;
   if (!$3) {
    break label$533
   }
   if (HEAPU8[($3 + 220 | 0) >> 0] | 0) {
    break label$533
   }
   $6 = 0;
   label$534 : {
    $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    $3 = HEAP32[($5 + 16056 | 0) >> 2] | 0;
    if (($3 | 0) < (1 | 0)) {
     break label$534
    }
    $2 = HEAP32[($5 + 16064 | 0) >> 2] | 0;
    label$535 : while (1) {
     label$536 : {
      $4 = $3;
      $3 = $3 + -1 | 0;
      $5 = HEAP32[($2 + ($3 << 2 | 0) | 0) >> 2] | 0;
      if (!$5) {
       break label$536
      }
      if (!(HEAPU8[($5 + 220 | 0) >> 0] | 0)) {
       break label$536
      }
      if (((HEAP32[($5 + 8 | 0) >> 2] | 0) & 262656 | 0 | 0) == (262656 | 0)) {
       break label$536
      }
      label$537 : {
       $6 = HEAP32[($5 + 848 | 0) >> 2] | 0;
       if (!$6) {
        break label$537
       }
       if (HEAPU8[($6 + 220 | 0) >> 0] | 0) {
        break label$534
       }
      }
      label$538 : {
       $3 = HEAP32[($5 + 936 | 0) >> 2] | 0;
       if ($3) {
        break label$538
       }
       $6 = $5;
       break label$534;
      }
      label$539 : {
       $3 = HEAP32[($3 + 48 | 0) >> 2] | 0;
       if ($3) {
        break label$539
       }
       $6 = $5;
       break label$534;
      }
      $6 = $5;
      $3 = ImGui__TabBarFindMostRecentlySelectedTabForActiveWindow_28ImGuiTabBar__29($3 | 0) | 0;
      if (!$3) {
       break label$534
      }
      $6 = HEAP32[($3 + 8 | 0) >> 2] | 0;
      break label$534;
     }
     if ($4 >>> 0 > 1 >>> 0) {
      continue label$535
     }
     break label$535;
    };
   }
   ImGui__FocusWindow_28ImGuiWindow__29($6 | 0);
  }
  label$540 : {
   if ((HEAP32[($1 + 16084 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$540
   }
   label$541 : {
    $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$3) {
     break label$541
    }
    $3 = $3 + 184 | 0;
    HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1 | 0;
   }
   $3 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](0, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$542 : {
    $5 = HEAP32[($1 + 16088 | 0) >> 2] | 0;
    if (!$5) {
     break label$542
    }
    __memcpy($3 | 0, $5 | 0, Math_imul(HEAP32[($1 + 16080 | 0) >> 2] | 0, 84) | 0) | 0;
    label$543 : {
     $5 = HEAP32[($1 + 16088 | 0) >> 2] | 0;
     if (!$5) {
      break label$543
     }
     $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$4) {
      break label$543
     }
     $4 = $4 + 184 | 0;
     HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($5, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($1 + 16084 | 0) >> 2] = 0;
   HEAP32[($1 + 16088 | 0) >> 2] = $3;
  }
  HEAP32[($1 + 16080 | 0) >> 2] = 0;
  label$544 : {
   if ((HEAP32[($1 + 18564 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$544
   }
   label$545 : {
    $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$3) {
     break label$545
    }
    $3 = $3 + 184 | 0;
    HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1 | 0;
   }
   $3 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](0, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$546 : {
    $5 = HEAP32[($1 + 18568 | 0) >> 2] | 0;
    if (!$5) {
     break label$546
    }
    __memcpy($3 | 0, $5 | 0, Math_imul(HEAP32[($1 + 18560 | 0) >> 2] | 0, 40) | 0) | 0;
    label$547 : {
     $5 = HEAP32[($1 + 18568 | 0) >> 2] | 0;
     if (!$5) {
      break label$547
     }
     $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$4) {
      break label$547
     }
     $4 = $4 + 184 | 0;
     HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($5, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($1 + 18564 | 0) >> 2] = 0;
   HEAP32[($1 + 18568 | 0) >> 2] = $3;
  }
  HEAP32[($1 + 18560 | 0) >> 2] = 0;
  label$548 : {
   label$549 : {
    label$550 : {
     $3 = HEAP32[($1 + 18528 | 0) >> 2] | 0;
     if (($3 | 0) > (-1 | 0)) {
      break label$550
     }
     label$551 : {
      $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$3) {
       break label$551
      }
      $3 = $3 + 184 | 0;
      HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1 | 0;
     }
     $3 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](0, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
     label$552 : {
      $5 = HEAP32[($1 + 18532 | 0) >> 2] | 0;
      if (!$5) {
       break label$552
      }
      __memcpy($3 | 0, $5 | 0, (HEAP32[($1 + 18524 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
      label$553 : {
       $5 = HEAP32[($1 + 18532 | 0) >> 2] | 0;
       if (!$5) {
        break label$553
       }
       $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
       if (!$4) {
        break label$553
       }
       $4 = $4 + 184 | 0;
       HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + -1 | 0;
      }
      FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($5, HEAP32[(0 + 92728 | 0) >> 2] | 0);
     }
     HEAP32[($1 + 18532 | 0) >> 2] = $3;
     i64toi32_i32$2 = $1;
     i64toi32_i32$0 = 0;
     HEAP32[($1 + 18524 | 0) >> 2] = 0;
     HEAP32[($1 + 18528 | 0) >> 2] = i64toi32_i32$0;
     break label$549;
    }
    $5 = 0;
    HEAP32[($1 + 18524 | 0) >> 2] = 0;
    if (!$3) {
     break label$549
    }
    $3 = HEAP32[($1 + 18532 | 0) >> 2] | 0;
    break label$548;
   }
   label$554 : {
    $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$3) {
     break label$554
    }
    $3 = $3 + 184 | 0;
    HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1 | 0;
   }
   $3 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](32, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$555 : {
    $5 = HEAP32[($1 + 18532 | 0) >> 2] | 0;
    if (!$5) {
     break label$555
    }
    __memcpy($3 | 0, $5 | 0, (HEAP32[($1 + 18524 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
    label$556 : {
     $5 = HEAP32[($1 + 18532 | 0) >> 2] | 0;
     if (!$5) {
      break label$556
     }
     $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$4) {
      break label$556
     }
     $4 = $4 + 184 | 0;
     HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($5, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($1 + 18528 | 0) >> 2] = 8;
   HEAP32[($1 + 18532 | 0) >> 2] = $3;
   $5 = HEAP32[($1 + 18524 | 0) >> 2] | 0;
  }
  HEAP32[($3 + ($5 << 2 | 0) | 0) >> 2] = 0;
  HEAP32[($1 + 18524 | 0) >> 2] = (HEAP32[($1 + 18524 | 0) >> 2] | 0) + 1 | 0;
  label$557 : {
   if ((HEAP32[($1 + 18540 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$557
   }
   label$558 : {
    $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$3) {
     break label$558
    }
    $3 = $3 + 184 | 0;
    HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1 | 0;
   }
   $3 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](0, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$559 : {
    $5 = HEAP32[($1 + 18544 | 0) >> 2] | 0;
    if (!$5) {
     break label$559
    }
    __memcpy($3 | 0, $5 | 0, Math_imul(HEAP32[($1 + 18536 | 0) >> 2] | 0, 48) | 0) | 0;
    label$560 : {
     $5 = HEAP32[($1 + 18544 | 0) >> 2] | 0;
     if (!$5) {
      break label$560
     }
     $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$4) {
      break label$560
     }
     $4 = $4 + 184 | 0;
     HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($5, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($1 + 18540 | 0) >> 2] = 0;
   HEAP32[($1 + 18544 | 0) >> 2] = $3;
  }
  HEAP32[($1 + 18536 | 0) >> 2] = 0;
  ImGui__DockContextNewFrameUpdateDocking_28ImGuiContext__29($1 | 0);
  $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  HEAP32[($3 + 23572 | 0) >> 2] = 0;
  label$561 : {
   if (!(HEAPU8[($3 + 23569 | 0) >> 0] | 0)) {
    break label$561
   }
   HEAP32[($3 + 19036 | 0) >> 2] = 7;
   $5 = HEAP32[($3 + 16176 | 0) >> 2] | 0;
   label$562 : {
    if (!(HEAPU8[($3 + 11972 | 0) >> 0] | 0)) {
     break label$562
    }
    $7 = Math_fround(HEAPF32[($3 + 11976 | 0) >> 2]);
    if ($7 < Math_fround(0.0)) {
     break label$562
    }
    label$563 : {
     if ($7 == Math_fround(0.0)) {
      break label$563
     }
     $8 = Math_fround(HEAPF32[($3 + 52 | 0) >> 2]);
     if (!($7 > $8)) {
      break label$562
     }
     $22 = Math_fround($7 - Math_fround(HEAPF32[($3 + 24 | 0) >> 2]));
     if ($22 >= $7) {
      break label$562
     }
     label$564 : {
      $23 = Math_fround(HEAPF32[($3 + 56 | 0) >> 2]);
      if (!($23 <= Math_fround(0.0))) {
       break label$564
      }
      if (!($7 >= $8)) {
       break label$562
      }
      if ($22 < $8) {
       break label$563
      }
      break label$562;
     }
     $4 = -1;
     $2 = -1;
     label$565 : {
      if ($22 < $8) {
       break label$565
      }
      label$566 : {
       $22 = Math_fround(Math_fround($22 - $8) / $23);
       if (!(Math_fround(Math_abs($22)) < Math_fround(2147483648.0))) {
        break label$566
       }
       $2 = ~~$22;
       break label$565;
      }
      $2 = -2147483648;
     }
     label$567 : {
      if ($7 < $8) {
       break label$567
      }
      label$568 : {
       $7 = Math_fround(Math_fround($7 - $8) / $23);
       if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
        break label$568
       }
       $4 = ~~$7;
       break label$567;
      }
      $4 = -2147483648;
     }
     if (($4 | 0) <= ($2 | 0)) {
      break label$562
     }
    }
    if (HEAPU8[($3 + 16428 | 0) >> 0] | 0) {
     break label$562
    }
    HEAP8[($3 + 23569 | 0) >> 0] = 0;
   }
   label$569 : {
    label$570 : {
     $4 = HEAP32[($3 + 3552 | 0) >> 2] | 0;
     if (($4 | 0) == (12288 | 0)) {
      break label$570
     }
     $2 = HEAPU8[($3 + 23570 | 0) >> 0] | 0;
     if (!(HEAPU8[(($3 + $2 | 0) + 3528 | 0) >> 0] | 0)) {
      break label$569
     }
     if (Math_fround(HEAPF32[(($3 + ($2 << 2 | 0) | 0) + 14128 | 0) >> 2]) != Math_fround(0.0)) {
      break label$569
     }
     $6 = 1;
     label$571 : {
      if ($2 >>> 0 > 10 >>> 0) {
       break label$571
      }
      $6 = !(HEAPU8[((Math_imul($2, 12) + $3 | 0) + 17808 | 0) >> 0] | 0);
     }
     if (!$6) {
      break label$569
     }
     if (!$5) {
      break label$569
     }
     HEAP8[($3 + 23569 | 0) >> 0] = 0;
     HEAP32[($3 + 23572 | 0) >> 2] = $5;
     break label$569;
    }
    label$572 : {
     if (!(HEAPU8[($3 + 3528 | 0) >> 0] | 0)) {
      break label$572
     }
     if (Math_fround(HEAPF32[($3 + 14128 | 0) >> 2]) != Math_fround(0.0)) {
      break label$572
     }
     if (HEAPU8[($3 + 17808 | 0) >> 0] | 0) {
      break label$572
     }
     HEAP8[($3 + 23570 | 0) >> 0] = 0;
    }
    label$573 : {
     if (!(HEAPU8[($3 + 3529 | 0) >> 0] | 0)) {
      break label$573
     }
     if (Math_fround(HEAPF32[($3 + 14132 | 0) >> 2]) != Math_fround(0.0)) {
      break label$573
     }
     if (HEAPU8[($3 + 17820 | 0) >> 0] | 0) {
      break label$573
     }
     HEAP8[($3 + 23570 | 0) >> 0] = 1;
    }
    if (!(HEAPU8[($3 + 3530 | 0) >> 0] | 0)) {
     break label$569
    }
    if (Math_fround(HEAPF32[($3 + 14136 | 0) >> 2]) != Math_fround(0.0)) {
     break label$569
    }
    if (HEAPU8[($3 + 17832 | 0) >> 0] | 0) {
     break label$569
    }
    HEAP8[($3 + 23570 | 0) >> 0] = 2;
   }
   HEAP32[($3 + 18428 | 0) >> 2] = 1060320051;
   HEAP32[($3 + 18340 | 0) >> 2] = HEAP32[($3 + 18340 | 0) >> 2] | 0 | 64 | 0;
   ImGui__BeginTooltipEx_28int_2c_20int_29(0 | 0, 0 | 0);
   HEAP32[($0 + 16 | 0) >> 2] = $5;
   ImGui__Text_28char_20const__2c_20____29(67493 | 0, $0 + 16 | 0 | 0);
   ImGui__Text_28char_20const__2c_20____29(68044 | 0, 0 | 0);
   label$574 : {
    label$575 : {
     if (($4 | 0) != (12288 | 0)) {
      break label$575
     }
     ImGui__Text_28char_20const__2c_20____29(67980 | 0, 0 | 0);
     break label$574;
    }
    HEAP32[$0 >> 2] = HEAP32[(((HEAPU8[($3 + 23570 | 0) >> 0] | 0) << 2 | 0) + 72816 | 0) >> 2] | 0;
    ImGui__TextColored_28ImVec4_20const__2c_20char_20const__2c_20____29(((HEAP32[(0 + 92720 | 0) >> 2] | 0) + (!$5 << 4 | 0) | 0) + 14596 | 0 | 0, 68104 | 0, $0 | 0);
   }
   ImGui__End_28_29();
   $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  }
  HEAP32[($3 + 16168 | 0) >> 2] = 0;
  label$576 : {
   if ((HEAP32[($3 + 16016 | 0) >> 2] | 0 | 0) != ((HEAP32[($3 + 23596 | 0) >> 2] | 0) + 1 | 0 | 0)) {
    break label$576
   }
   label$577 : {
    $5 = HEAP32[($3 + 16176 | 0) >> 2] | 0;
    if ($5) {
     break label$577
    }
    $5 = HEAP32[($3 + 16192 | 0) >> 2] | 0;
   }
   label$578 : {
    if ((HEAP32[($3 + 23604 | 0) >> 2] | 0 | 0) == ($5 | 0)) {
     break label$578
    }
    HEAP32[($3 + 23604 | 0) >> 2] = $5;
    HEAP32[($3 + 23600 | 0) >> 2] = -1;
    label$579 : {
     if ((HEAP32[($3 + 23612 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
      break label$579
     }
     $4 = $3 + 184 | 0;
     HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
     $4 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](0, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
     label$580 : {
      $2 = HEAP32[($3 + 23616 | 0) >> 2] | 0;
      if (!$2) {
       break label$580
      }
      __memcpy($4 | 0, $2 | 0, (HEAP32[($3 + 23608 | 0) >> 2] | 0) << 6 | 0 | 0) | 0;
      label$581 : {
       $2 = HEAP32[($3 + 23616 | 0) >> 2] | 0;
       if (!$2) {
        break label$581
       }
       $6 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
       if (!$6) {
        break label$581
       }
       $6 = $6 + 184 | 0;
       HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1 | 0;
      }
      FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($2, HEAP32[(0 + 92728 | 0) >> 2] | 0);
     }
     HEAP32[($3 + 23612 | 0) >> 2] = 0;
     HEAP32[($3 + 23616 | 0) >> 2] = $4;
    }
    HEAP32[($3 + 23608 | 0) >> 2] = 0;
   }
   if (!$5) {
    break label$576
   }
   label$582 : {
    $4 = HEAP32[($3 + 23600 | 0) >> 2] | 0;
    if (($4 | 0) < (0 | 0)) {
     break label$582
    }
    label$583 : {
     $5 = HEAP32[($3 + 23608 | 0) >> 2] | 0;
     if (($4 | 0) >= ($5 | 0)) {
      break label$583
     }
     label$584 : {
      $2 = (HEAP32[($3 + 23616 | 0) >> 2] | 0) + ($4 << 6 | 0) | 0;
      if (HEAPU8[($2 + 5 | 0) >> 0] | 0) {
       break label$584
      }
      if ((HEAP8[($2 + 4 | 0) >> 0] | 0 | 0) < (3 | 0)) {
       break label$583
      }
     }
     $4 = $4 + 1 | 0;
     HEAP32[($3 + 23600 | 0) >> 2] = $4;
    }
    if (($4 | 0) >= ($5 | 0)) {
     break label$576
    }
    $5 = (HEAP32[($3 + 23616 | 0) >> 2] | 0) + ($4 << 6 | 0) | 0;
    HEAP32[($3 + 16168 | 0) >> 2] = HEAP32[$5 >> 2] | 0;
    HEAP8[($5 + 4 | 0) >> 0] = (HEAPU8[($5 + 4 | 0) >> 0] | 0) + 1 | 0;
    break label$576;
   }
   if (($4 | 0) != (-1 | 0)) {
    break label$576
   }
   HEAP32[($3 + 16168 | 0) >> 2] = $5;
  }
  label$585 : {
   $3 = HEAPU8[($1 + 23568 | 0) >> 0] | 0;
   if (!$3) {
    break label$585
   }
   $3 = $3 + -1 | 0;
   HEAP8[($1 + 23568 | 0) >> 0] = $3;
   if ($3 & 255 | 0) {
    break label$585
   }
   HEAP32[($1 + 18256 | 0) >> 2] = 0;
  }
  HEAP8[($1 + 16033 | 0) >> 0] = 1;
  $3 = 0;
  $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  i64toi32_i32$2 = $5 + 18376 | 0;
  i64toi32_i32$0 = 1137180672;
  HEAP32[i64toi32_i32$2 >> 2] = 1137180672;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($5 + 18348 | 0) >> 2] = 4;
  HEAP32[($5 + 18340 | 0) >> 2] = HEAP32[($5 + 18340 | 0) >> 2] | 0 | 2 | 0;
  ImGui__Begin_28char_20const__2c_20bool__2c_20int_29(65759 | 0, 0 | 0, 0 | 0) | 0;
  label$586 : {
   $4 = HEAP32[($1 + 23436 | 0) >> 2] | 0;
   if (($4 | 0) < (1 | 0)) {
    break label$586
   }
   label$587 : while (1) {
    label$588 : {
     $5 = (HEAP32[($1 + 23444 | 0) >> 2] | 0) + Math_imul($3, 20) | 0;
     if ((HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$588
     }
     FUNCTION_TABLE[HEAP32[($5 + 12 | 0) >> 2] | 0 | 0]($1, $5);
     $4 = HEAP32[($1 + 23436 | 0) >> 2] | 0;
    }
    $3 = $3 + 1 | 0;
    if (($3 | 0) < ($4 | 0)) {
     continue label$587
    }
    break label$587;
   };
  }
  __stack_pointer = $0 + 144 | 0;
 }
 
 function ImGui__LoadIniSettingsFromMemory_28char_20const__2c_20unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $4 = 0, $6 = 0, $2 = 0, $7 = 0, $5 = 0, $10 = 0, $9 = 0, $11 = 0, $8 = 0, $12 = 0;
  $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  label$1 : {
   if ($1) {
    break label$1
   }
   $1 = strlen($0 | 0) | 0;
  }
  $3 = $1 + 1 | 0;
  label$2 : {
   $4 = HEAP32[($2 + 23392 | 0) >> 2] | 0;
   if (($4 | 0) > ($1 | 0)) {
    break label$2
   }
   label$3 : {
    label$4 : {
     if ($4) {
      break label$4
     }
     $5 = 8;
     break label$3;
    }
    $5 = (($4 | 0) / (2 | 0) | 0) + $4 | 0;
   }
   $5 = ($5 | 0) > ($3 | 0) ? $5 : $3;
   if (($4 | 0) >= ($5 | 0)) {
    break label$2
   }
   $4 = $2 + 184 | 0;
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
   $4 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($5, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$5 : {
    $6 = HEAP32[($2 + 23396 | 0) >> 2] | 0;
    if (!$6) {
     break label$5
    }
    __memcpy($4 | 0, $6 | 0, HEAP32[($2 + 23388 | 0) >> 2] | 0 | 0) | 0;
    label$6 : {
     $6 = HEAP32[($2 + 23396 | 0) >> 2] | 0;
     if (!$6) {
      break label$6
     }
     $7 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$7) {
      break label$6
     }
     $7 = $7 + 184 | 0;
     HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($6, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($2 + 23392 | 0) >> 2] = $5;
   HEAP32[($2 + 23396 | 0) >> 2] = $4;
  }
  HEAP32[($2 + 23388 | 0) >> 2] = $3;
  $3 = 0;
  $8 = __memcpy(HEAP32[($2 + 23396 | 0) >> 2] | 0 | 0, $0 | 0, $1 | 0) | 0;
  $5 = $8 + $1 | 0;
  HEAP8[$5 >> 0] = 0;
  label$7 : {
   $4 = HEAP32[($2 + 23400 | 0) >> 2] | 0;
   if (($4 | 0) < (1 | 0)) {
    break label$7
   }
   label$8 : while (1) {
    label$9 : {
     $6 = (HEAP32[($2 + 23408 | 0) >> 2] | 0) + Math_imul($3, 36) | 0;
     $7 = HEAP32[($6 + 12 | 0) >> 2] | 0;
     if (!$7) {
      break label$9
     }
     FUNCTION_TABLE[$7 | 0]($2, $6);
     $4 = HEAP32[($2 + 23400 | 0) >> 2] | 0;
    }
    $3 = $3 + 1 | 0;
    if (($3 | 0) < ($4 | 0)) {
     continue label$8
    }
    break label$8;
   };
  }
  label$10 : {
   if (($1 | 0) < (1 | 0)) {
    break label$10
   }
   $7 = 0;
   $3 = $8;
   $9 = 0;
   label$11 : while (1) {
    label$12 : {
     switch ((HEAPU8[$3 >> 0] | 0) + -10 | 0 | 0) {
     default:
      $4 = $3;
      label$14 : {
       if ($3 >>> 0 >= $5 >>> 0) {
        break label$14
       }
       $4 = $3;
       label$15 : while (1) {
        label$16 : {
         switch ((HEAPU8[$4 >> 0] | 0) + -10 | 0 | 0) {
         case 0:
         case 3:
          break label$14;
         default:
          break label$16;
         };
        }
        $4 = $4 + 1 | 0;
        if ($4 >>> 0 < $5 >>> 0) {
         continue label$15
        }
        break label$15;
       };
       $4 = $5;
      }
      HEAP8[$4 >> 0] = 0;
      label$17 : {
       $6 = HEAPU8[$3 >> 0] | 0;
       if (($6 | 0) == (59 | 0)) {
        break label$17
       }
       label$18 : {
        if (($6 | 0) != (91 | 0)) {
         break label$18
        }
        if ($4 >>> 0 <= $3 >>> 0) {
         break label$18
        }
        $10 = $4 + -1 | 0;
        if ((HEAPU8[$10 >> 0] | 0 | 0) != (93 | 0)) {
         break label$18
        }
        HEAP8[$10 >> 0] = 0;
        $6 = $3 + 1 | 0;
        $3 = memchr($6 | 0, 93 | 0, $10 - $6 | 0 | 0) | 0;
        if (!$3) {
         break label$17
        }
        $11 = $3 + 1 | 0;
        $12 = memchr($11 | 0, 91 | 0, $10 - $11 | 0 | 0) | 0;
        if (!$12) {
         break label$17
        }
        $9 = 0;
        HEAP8[$3 >> 0] = 0;
        $11 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
        $3 = -1;
        $10 = 0;
        label$19 : {
         $7 = HEAPU8[$6 >> 0] | 0;
         if (!$7) {
          break label$19
         }
         label$20 : while (1) {
          $10 = $7 & 255 | 0;
          $7 = HEAPU8[($6 + 1 | 0) >> 0] | 0;
          label$21 : {
           if (($10 | 0) != (35 | 0)) {
            break label$21
           }
           if (($7 & 255 | 0 | 0) != (35 | 0)) {
            break label$21
           }
           $3 = (HEAPU8[($6 + 2 | 0) >> 0] | 0 | 0) == (35 | 0) ? -1 : $3;
          }
          $6 = $6 + 1 | 0;
          $3 = ($3 >>> 8 | 0) ^ (HEAP32[(((($3 & 255 | 0) ^ $10 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
          if ($7 & 255 | 0) {
           continue label$20
          }
          break label$20;
         };
         $10 = $3 ^ -1 | 0;
        }
        $7 = 0;
        $6 = HEAP32[($11 + 23400 | 0) >> 2] | 0;
        if (($6 | 0) < (1 | 0)) {
         break label$17
        }
        $11 = HEAP32[($11 + 23408 | 0) >> 2] | 0;
        $3 = 0;
        label$22 : {
         label$23 : while (1) {
          $9 = $11 + Math_imul($3, 36) | 0;
          if ((HEAP32[($9 + 4 | 0) >> 2] | 0 | 0) == ($10 | 0)) {
           break label$22
          }
          $9 = 0;
          $7 = 0;
          $3 = $3 + 1 | 0;
          if (($3 | 0) != ($6 | 0)) {
           continue label$23
          }
          break label$17;
         };
        }
        $7 = FUNCTION_TABLE[HEAP32[($9 + 16 | 0) >> 2] | 0 | 0]($2, $9, $12 + 1 | 0) | 0;
        break label$17;
       }
       if (!$9) {
        break label$17
       }
       if (!$7) {
        break label$17
       }
       FUNCTION_TABLE[HEAP32[($9 + 20 | 0) >> 2] | 0 | 0]($2, $9, $7, $3);
      }
      $3 = $4 + 1 | 0;
      if ($3 >>> 0 >= $5 >>> 0) {
       break label$10
      }
      continue label$11;
     case 0:
     case 3:
      break label$12;
     };
    }
    $3 = $3 + 1 | 0;
    continue label$11;
   };
  }
  HEAP8[($2 + 23380 | 0) >> 0] = 1;
  __memcpy($8 | 0, $0 | 0, $1 | 0) | 0;
  label$24 : {
   $4 = HEAP32[($2 + 23400 | 0) >> 2] | 0;
   if (($4 | 0) < (1 | 0)) {
    break label$24
   }
   $3 = 0;
   label$25 : while (1) {
    label$26 : {
     $5 = (HEAP32[($2 + 23408 | 0) >> 2] | 0) + Math_imul($3, 36) | 0;
     $6 = HEAP32[($5 + 24 | 0) >> 2] | 0;
     if (!$6) {
      break label$26
     }
     FUNCTION_TABLE[$6 | 0]($2, $5);
     $4 = HEAP32[($2 + 23400 | 0) >> 2] | 0;
    }
    $3 = $3 + 1 | 0;
    if (($3 | 0) < ($4 | 0)) {
     continue label$25
    }
    break label$25;
   };
  }
 }
 
 function ImGui__UpdateInputEvents_28bool_29($0) {
  $0 = $0 | 0;
  var $13 = 0, $2 = 0, $14 = 0, $4 = 0, $15 = 0, i64toi32_i32$0 = 0, $1 = 0, i64toi32_i32$1 = 0, $16 = 0, $11 = 0, $12 = 0, $9 = 0, i64toi32_i32$2 = 0, $8 = 0, $7 = 0, $10 = 0, $19 = Math_fround(0), $3 = 0, $17 = 0, $6 = 0, $18 = 0, $5 = 0, $432 = 0, $437 = 0, $442 = 0;
  $1 = __stack_pointer - 240 | 0;
  __stack_pointer = $1;
  $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $3 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   $3 = (HEAP32[($2 + 23892 | 0) >> 2] | 0 | 0) == (1 | 0);
  }
  memset($1 + 152 | 0 | 0, 0 | 0, 84 | 0) | 0;
  label$2 : {
   label$3 : {
    label$4 : {
     $4 = HEAP32[($2 + 14372 | 0) >> 2] | 0;
     if (($4 | 0) < (1 | 0)) {
      break label$4
     }
     $5 = $2 + 3556 | 0;
     $6 = $2 + 8 | 0;
     $7 = 0;
     $8 = 0;
     $9 = 0;
     $10 = 0;
     $11 = 0;
     $12 = 0;
     label$5 : {
      label$6 : while (1) {
       label$7 : {
        label$8 : {
         label$9 : {
          label$10 : {
           label$11 : {
            label$12 : {
             label$13 : {
              label$14 : {
               $13 = (HEAP32[($2 + 14380 | 0) >> 2] | 0) + Math_imul($12, 24) | 0;
               switch ((HEAP32[$13 >> 2] | 0) + -1 | 0 | 0) {
               case 4:
                break label$10;
               case 3:
                break label$11;
               case 1:
                break label$12;
               case 2:
                break label$13;
               case 0:
                break label$14;
               case 6:
                break label$8;
               case 5:
                break label$9;
               default:
                break label$7;
               };
              }
              $14 = HEAP32[($13 + 8 | 0) >> 2] | 0;
              $13 = HEAP32[($13 + 12 | 0) >> 2] | 0;
              label$15 : {
               if (!$0) {
                break label$15
               }
               if ((($11 | 0) != (0 | 0) | $8 | 0 | $9 | 0 | $10 | 0) & 1 | 0) {
                break label$5
               }
              }
              HEAP32[($2 + 3524 | 0) >> 2] = $13;
              HEAP32[($2 + 3520 | 0) >> 2] = $14;
              $7 = 1;
              break label$7;
             }
             $15 = HEAP32[($13 + 8 | 0) >> 2] | 0;
             $14 = 1 << $15 | 0;
             label$16 : {
              if (!$0) {
               break label$16
              }
              if ((($14 & $11 | 0 | 0) != (0 | 0) | $8 | 0) & 1 | 0) {
               break label$5
              }
             }
             HEAP8[(($2 + $15 | 0) + 3528 | 0) >> 0] = HEAPU8[($13 + 12 | 0) >> 0] | 0;
             $11 = $14 | $11 | 0;
             break label$7;
            }
            label$17 : {
             if (!$0) {
              break label$17
             }
             if (($7 | ($11 | 0) != (0 | 0) | 0) & 1 | 0) {
              break label$5
             }
            }
            HEAPF32[($2 + 3540 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($13 + 8 | 0) >> 2]) + Math_fround(HEAPF32[($2 + 3540 | 0) >> 2]));
            HEAPF32[($2 + 3536 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($13 + 12 | 0) >> 2]) + Math_fround(HEAPF32[($2 + 3536 | 0) >> 2]));
            $8 = 1;
            break label$7;
           }
           HEAP32[($2 + 3544 | 0) >> 2] = HEAP32[($13 + 8 | 0) >> 2] | 0;
           break label$7;
          }
          $15 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
          label$18 : {
           label$19 : {
            $14 = HEAP32[($13 + 8 | 0) >> 2] | 0;
            if (!($14 & 63488 | 0)) {
             break label$19
            }
            label$20 : {
             label$21 : {
              if (($14 | 0) > (8191 | 0)) {
               break label$21
              }
              if (($14 | 0) == (2048 | 0)) {
               break label$20
              }
              $16 = 648;
              if (($14 | 0) == (4096 | 0)) {
               break label$18
              }
              $16 = $14;
              break label$18;
             }
             label$22 : {
              if (($14 | 0) == (32768 | 0)) {
               break label$22
              }
              label$23 : {
               if (($14 | 0) == (16384 | 0)) {
                break label$23
               }
               $16 = $14;
               if (($14 | 0) != (8192 | 0)) {
                break label$18
               }
               $16 = 649;
               break label$18;
              }
              $16 = 650;
              break label$18;
             }
             $16 = 651;
             break label$18;
            }
            $16 = HEAPU8[($15 + 105 | 0) >> 0] | 0 ? 651 : 648;
            break label$18;
           }
           label$24 : {
            if ($14 >>> 0 <= 511 >>> 0) {
             break label$24
            }
            $16 = $14;
            break label$18;
           }
           $16 = HEAP32[(($15 + ($14 << 2 | 0) | 0) + 196 | 0) >> 2] | 0;
           $16 = ($16 | 0) == (-1 | 0) ? $14 : $16;
          }
          $9 = $15 + ($16 << 4 | 0) | 0;
          $16 = $9 + 3556 | 0;
          $17 = $16 - $5 | 0;
          $14 = $17 >> 4 | 0;
          label$25 : {
           label$26 : {
            if ($0) {
             break label$26
            }
            $15 = HEAPU8[($13 + 12 | 0) >> 0] | 0;
            break label$25;
           }
           $15 = HEAPU8[$16 >> 0] | 0;
           $18 = HEAPU8[($13 + 12 | 0) >> 0] | 0;
           if (($15 | 0) == ($18 | 0)) {
            break label$25
           }
           if (((HEAP32[(($1 + 152 | 0) + (($17 >> 9 | 0) << 2 | 0) | 0) >> 2] | 0) >>> $14 | 0 | $10 | 0) & 1 | 0) {
            break label$5
           }
           $15 = $18;
           if ($11) {
            break label$5
           }
          }
          HEAP8[$16 >> 0] = $15;
          HEAPF32[($9 + 3568 | 0) >> 2] = Math_fround(HEAPF32[($13 + 16 | 0) >> 2]);
          $9 = 1;
          $13 = ($1 + 152 | 0) + (($17 >> 9 | 0) << 2 | 0) | 0;
          HEAP32[$13 >> 2] = HEAP32[$13 >> 2] | 0 | (1 << $14 | 0) | 0;
          HEAP8[(($6 + $14 | 0) + 2796 | 0) >> 0] = $15;
          $13 = HEAP32[(($6 + ($14 << 2 | 0) | 0) + 188 | 0) >> 2] | 0;
          if (($13 | 0) == (-1 | 0)) {
           break label$7
          }
          HEAP8[(($2 + $13 | 0) + 2804 | 0) >> 0] = HEAPU8[$16 >> 0] | 0;
          break label$7;
         }
         label$27 : {
          if (!$0) {
           break label$27
          }
          label$28 : {
           if (!($9 & 1 | 0)) {
            break label$28
           }
           if (!(($3 | ($11 | 0) != (0 | 0) | 0 | $7 | 0 | $8 | 0) & 1 | 0)) {
            break label$27
           }
           break label$5;
          }
          if ((($11 | 0) != (0 | 0) | $7 | 0 | $8 | 0) & 1 | 0) {
           break label$5
          }
         }
         $13 = HEAP32[($13 + 8 | 0) >> 2] | 0;
         $4 = $13 >>> 0 < 65536 >>> 0 ? $13 : -3;
         label$29 : {
          $13 = HEAP32[($2 + 14240 | 0) >> 2] | 0;
          if (($13 | 0) != (HEAP32[($2 + 14244 | 0) >> 2] | 0 | 0)) {
           break label$29
          }
          $14 = $13 + 1 | 0;
          label$30 : {
           label$31 : {
            if ($13) {
             break label$31
            }
            $15 = 8;
            break label$30;
           }
           $15 = (($13 | 0) / (2 | 0) | 0) + $13 | 0;
          }
          $14 = ($15 | 0) > ($14 | 0) ? $15 : $14;
          if (($13 | 0) >= ($14 | 0)) {
           break label$29
          }
          $13 = $14 << 1 | 0;
          label$32 : {
           $15 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
           if (!$15) {
            break label$32
           }
           $15 = $15 + 184 | 0;
           HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 1 | 0;
          }
          $13 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($13, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
          label$33 : {
           $15 = HEAP32[($2 + 14248 | 0) >> 2] | 0;
           if (!$15) {
            break label$33
           }
           __memcpy($13 | 0, $15 | 0, (HEAP32[($2 + 14240 | 0) >> 2] | 0) << 1 | 0 | 0) | 0;
           label$34 : {
            $15 = HEAP32[($2 + 14248 | 0) >> 2] | 0;
            if (!$15) {
             break label$34
            }
            $16 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
            if (!$16) {
             break label$34
            }
            $16 = $16 + 184 | 0;
            HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) + -1 | 0;
           }
           FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($15, HEAP32[(0 + 92728 | 0) >> 2] | 0);
          }
          HEAP32[($2 + 14244 | 0) >> 2] = $14;
          HEAP32[($2 + 14248 | 0) >> 2] = $13;
          $13 = HEAP32[($2 + 14240 | 0) >> 2] | 0;
         }
         HEAP16[((HEAP32[($2 + 14248 | 0) >> 2] | 0) + ($13 << 1 | 0) | 0) >> 1] = $4;
         HEAP32[($2 + 14240 | 0) >> 2] = (HEAP32[($2 + 14240 | 0) >> 2] | 0) + 1 | 0;
         $10 = $3 | $10 | 0;
         $4 = HEAP32[($2 + 14372 | 0) >> 2] | 0;
         break label$7;
        }
        HEAP8[($2 + 14232 | 0) >> 0] = (HEAPU8[($13 + 8 | 0) >> 0] | 0) ^ 1 | 0;
       }
       $12 = $12 + 1 | 0;
       if (($12 | 0) < ($4 | 0)) {
        continue label$6
       }
       break label$3;
      };
     }
     if ($12) {
      break label$3
     }
    }
    $4 = HEAP32[($2 + 14372 | 0) >> 2] | 0;
    $12 = 0;
    break label$2;
   }
   $13 = HEAP32[($2 + 14384 | 0) >> 2] | 0;
   $0 = 0;
   label$35 : while (1) {
    $4 = (HEAP32[($2 + 14380 | 0) >> 2] | 0) + Math_imul($0, 24) | 0;
    label$36 : {
     if (($13 | 0) != (HEAP32[($2 + 14388 | 0) >> 2] | 0 | 0)) {
      break label$36
     }
     $11 = $13 + 1 | 0;
     label$37 : {
      label$38 : {
       if ($13) {
        break label$38
       }
       $14 = 8;
       break label$37;
      }
      $14 = (($13 | 0) / (2 | 0) | 0) + $13 | 0;
     }
     $11 = ($14 | 0) > ($11 | 0) ? $14 : $11;
     if (($13 | 0) >= ($11 | 0)) {
      break label$36
     }
     $13 = Math_imul($11, 24);
     label$39 : {
      $14 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$14) {
       break label$39
      }
      $14 = $14 + 184 | 0;
      HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 1 | 0;
     }
     $13 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($13, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
     label$40 : {
      $14 = HEAP32[($2 + 14392 | 0) >> 2] | 0;
      if (!$14) {
       break label$40
      }
      __memcpy($13 | 0, $14 | 0, Math_imul(HEAP32[($2 + 14384 | 0) >> 2] | 0, 24) | 0) | 0;
      label$41 : {
       $14 = HEAP32[($2 + 14392 | 0) >> 2] | 0;
       if (!$14) {
        break label$41
       }
       $15 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
       if (!$15) {
        break label$41
       }
       $15 = $15 + 184 | 0;
       HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + -1 | 0;
      }
      FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($14, HEAP32[(0 + 92728 | 0) >> 2] | 0);
     }
     HEAP32[($2 + 14388 | 0) >> 2] = $11;
     HEAP32[($2 + 14392 | 0) >> 2] = $13;
     $13 = HEAP32[($2 + 14384 | 0) >> 2] | 0;
    }
    $13 = (HEAP32[($2 + 14392 | 0) >> 2] | 0) + Math_imul($13, 24) | 0;
    i64toi32_i32$2 = $4;
    i64toi32_i32$0 = HEAP32[$4 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($4 + 4 | 0) >> 2] | 0;
    $432 = i64toi32_i32$0;
    i64toi32_i32$0 = $13;
    HEAP32[$13 >> 2] = $432;
    HEAP32[($13 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $4 + 16 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $437 = i64toi32_i32$1;
    i64toi32_i32$1 = $13 + 16 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $437;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $4 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $442 = i64toi32_i32$0;
    i64toi32_i32$0 = $13 + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $442;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $13 = (HEAP32[($2 + 14384 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($2 + 14384 | 0) >> 2] = $13;
    $0 = $0 + 1 | 0;
    if (($0 | 0) != ($12 | 0)) {
     continue label$35
    }
    break label$35;
   };
   $4 = HEAP32[($2 + 14372 | 0) >> 2] | 0;
   if (!((HEAPU8[($2 + 23536 | 0) >> 0] | 0) & 32 | 0)) {
    break label$2
   }
   if (($4 | 0) < (1 | 0)) {
    break label$2
   }
   $16 = ($1 + 16 | 0) + 16 | 0;
   $13 = 0;
   label$42 : while (1) {
    $11 = $13 >>> 0 < $12 >>> 0 ? 67118 : 66904;
    $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    label$43 : {
     label$44 : {
      label$45 : {
       label$46 : {
        label$47 : {
         label$48 : {
          label$49 : {
           label$50 : {
            $0 = (HEAP32[($2 + 14380 | 0) >> 2] | 0) + Math_imul($13, 24) | 0;
            switch ((HEAP32[$0 >> 2] | 0) + -1 | 0 | 0) {
            case 6:
             break label$44;
            case 5:
             break label$45;
            case 4:
             break label$46;
            case 3:
             break label$47;
            case 1:
             break label$48;
            case 2:
             break label$49;
            case 0:
             break label$50;
            default:
             break label$43;
            };
           }
           label$51 : {
            $19 = Math_fround(HEAPF32[($0 + 8 | 0) >> 2]);
            if ($19 != Math_fround(-3402823466385288598117041.0e14)) {
             break label$51
            }
            if (Math_fround(HEAPF32[($0 + 12 | 0) >> 2]) != Math_fround(-3402823466385288598117041.0e14)) {
             break label$51
            }
            if (!((HEAPU8[($4 + 23536 | 0) >> 0] | 0) & 32 | 0)) {
             break label$43
            }
            HEAP32[$1 >> 2] = $11;
            ImGui__DebugLog_28char_20const__2c_20____29(69601 | 0, $1 | 0);
            break label$43;
           }
           if (!((HEAPU8[($4 + 23536 | 0) >> 0] | 0) & 32 | 0)) {
            break label$43
           }
           HEAPF64[$16 >> 3] = +Math_fround(HEAPF32[($0 + 12 | 0) >> 2]);
           HEAPF64[($1 + 24 | 0) >> 3] = +$19;
           HEAP32[($1 + 16 | 0) >> 2] = $11;
           ImGui__DebugLog_28char_20const__2c_20____29(69574 | 0, $1 + 16 | 0 | 0);
           break label$43;
          }
          if (!((HEAPU8[($4 + 23536 | 0) >> 0] | 0) & 32 | 0)) {
           break label$43
          }
          $4 = HEAPU8[($0 + 12 | 0) >> 0] | 0;
          HEAP32[($1 + 52 | 0) >> 2] = HEAP32[($0 + 8 | 0) >> 2] | 0;
          HEAP32[($1 + 48 | 0) >> 2] = $11;
          HEAP32[($1 + 56 | 0) >> 2] = $4 ? 66345 : 66250;
          ImGui__DebugLog_28char_20const__2c_20____29(68366 | 0, $1 + 48 | 0 | 0);
          break label$43;
         }
         if (!((HEAPU8[($4 + 23536 | 0) >> 0] | 0) & 32 | 0)) {
          break label$43
         }
         $19 = Math_fround(HEAPF32[($0 + 8 | 0) >> 2]);
         HEAPF64[(($1 + 64 | 0) + 16 | 0) >> 3] = +Math_fround(HEAPF32[($0 + 12 | 0) >> 2]);
         HEAPF64[($1 + 72 | 0) >> 3] = +$19;
         HEAP32[($1 + 64 | 0) >> 2] = $11;
         ImGui__DebugLog_28char_20const__2c_20____29(69545 | 0, $1 + 64 | 0 | 0);
         break label$43;
        }
        if (!((HEAPU8[($4 + 23536 | 0) >> 0] | 0) & 32 | 0)) {
         break label$43
        }
        HEAP32[($1 + 100 | 0) >> 2] = HEAP32[($0 + 8 | 0) >> 2] | 0;
        HEAP32[($1 + 96 | 0) >> 2] = $11;
        ImGui__DebugLog_28char_20const__2c_20____29(69665 | 0, $1 + 96 | 0 | 0);
        break label$43;
       }
       if (!((HEAPU8[($4 + 23536 | 0) >> 0] | 0) & 32 | 0)) {
        break label$43
       }
       label$52 : {
        label$53 : {
         label$54 : {
          $14 = HEAP32[($0 + 8 | 0) >> 2] | 0;
          if ($14 >>> 0 > 511 >>> 0) {
           break label$54
          }
          $15 = 67672;
          $14 = HEAP32[(($4 + ($14 << 2 | 0) | 0) + 196 | 0) >> 2] | 0;
          switch ($14 + 1 | 0 | 0) {
          case 0:
           break label$52;
          case 1:
           break label$53;
          default:
           break label$54;
          };
         }
         label$55 : {
          label$56 : {
           if (!($14 & 63488 | 0)) {
            break label$56
           }
           label$57 : {
            label$58 : {
             if (($14 | 0) > (8191 | 0)) {
              break label$58
             }
             if (($14 | 0) == (2048 | 0)) {
              break label$57
             }
             $4 = 136;
             if (($14 | 0) != (4096 | 0)) {
              break label$56
             }
             break label$55;
            }
            label$59 : {
             if (($14 | 0) == (32768 | 0)) {
              break label$59
             }
             label$60 : {
              if (($14 | 0) == (16384 | 0)) {
               break label$60
              }
              if (($14 | 0) != (8192 | 0)) {
               break label$56
              }
              $4 = 137;
              break label$55;
             }
             $4 = 138;
             break label$55;
            }
            $4 = 139;
            break label$55;
           }
           $14 = HEAPU8[($4 + 105 | 0) >> 0] | 0 ? 651 : 648;
          }
          $15 = 66265;
          $4 = $14 + -512 | 0;
          if ($4 >>> 0 > 139 >>> 0) {
           break label$52
          }
         }
         $15 = HEAP32[(($4 << 2 | 0) + 71712 | 0) >> 2] | 0;
         break label$52;
        }
        $15 = 66971;
       }
       $4 = HEAPU8[($0 + 12 | 0) >> 0] | 0;
       HEAP32[($1 + 116 | 0) >> 2] = $15;
       HEAP32[($1 + 112 | 0) >> 2] = $11;
       HEAP32[($1 + 120 | 0) >> 2] = $4 ? 66345 : 66250;
       ImGui__DebugLog_28char_20const__2c_20____29(68389 | 0, $1 + 112 | 0 | 0);
       break label$43;
      }
      if (!((HEAPU8[($4 + 23536 | 0) >> 0] | 0) & 32 | 0)) {
       break label$43
      }
      $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      HEAP32[($1 + 136 | 0) >> 2] = $4;
      HEAP32[($1 + 132 | 0) >> 2] = $4;
      HEAP32[($1 + 128 | 0) >> 2] = $11;
      ImGui__DebugLog_28char_20const__2c_20____29(69693 | 0, $1 + 128 | 0 | 0);
      break label$43;
     }
     if (!((HEAPU8[($4 + 23536 | 0) >> 0] | 0) & 32 | 0)) {
      break label$43
     }
     HEAP32[($1 + 148 | 0) >> 2] = HEAPU8[($0 + 8 | 0) >> 0] | 0;
     HEAP32[($1 + 144 | 0) >> 2] = $11;
     ImGui__DebugLog_28char_20const__2c_20____29(68950 | 0, $1 + 144 | 0 | 0);
    }
    $13 = $13 + 1 | 0;
    $4 = HEAP32[($2 + 14372 | 0) >> 2] | 0;
    if (($13 | 0) < ($4 | 0)) {
     continue label$42
    }
    break label$42;
   };
  }
  label$61 : {
   label$62 : {
    if (($4 | 0) != ($12 | 0)) {
     break label$62
    }
    $13 = 0;
    if ((HEAP32[($2 + 14376 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$61
    }
    label$63 : {
     $13 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$13) {
      break label$63
     }
     $13 = $13 + 184 | 0;
     HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1 | 0;
    }
    $12 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](0, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
    label$64 : {
     $13 = HEAP32[($2 + 14380 | 0) >> 2] | 0;
     if (!$13) {
      break label$64
     }
     __memcpy($12 | 0, $13 | 0, Math_imul(HEAP32[($2 + 14372 | 0) >> 2] | 0, 24) | 0) | 0;
     label$65 : {
      $13 = HEAP32[($2 + 14380 | 0) >> 2] | 0;
      if (!$13) {
       break label$65
      }
      $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$4) {
       break label$65
      }
      $4 = $4 + 184 | 0;
      HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + -1 | 0;
     }
     FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($13, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    }
    $13 = 0;
    HEAP32[($2 + 14376 | 0) >> 2] = 0;
    HEAP32[($2 + 14380 | 0) >> 2] = $12;
    break label$61;
   }
   $13 = HEAP32[($2 + 14380 | 0) >> 2] | 0;
   memmove($13 | 0, $13 + Math_imul($12, 24) | 0 | 0, Math_imul($4 - $12 | 0, 24) | 0) | 0;
   $13 = (HEAP32[($2 + 14372 | 0) >> 2] | 0) - $12 | 0;
  }
  HEAP32[($2 + 14372 | 0) >> 2] = $13;
  label$66 : {
   if (!(HEAPU8[($2 + 14232 | 0) >> 0] | 0)) {
    break label$66
   }
   memset($2 + 2804 | 0 | 0, 0 | 0, 652 | 0) | 0;
   $13 = $2 + 3556 | 0;
   $4 = 0;
   label$67 : while (1) {
    $12 = $4 << 4 | 0;
    $0 = $13 + $12 | 0;
    i64toi32_i32$0 = $0;
    i64toi32_i32$1 = -1082130432;
    HEAP32[($0 + 4 | 0) >> 2] = -1082130432;
    HEAP32[($0 + 8 | 0) >> 2] = i64toi32_i32$1;
    HEAP8[$0 >> 0] = 0;
    $0 = $13 + ($12 | 16 | 0) | 0;
    i64toi32_i32$0 = $0;
    i64toi32_i32$1 = -1082130432;
    HEAP32[($0 + 4 | 0) >> 2] = -1082130432;
    HEAP32[($0 + 8 | 0) >> 2] = i64toi32_i32$1;
    HEAP8[$0 >> 0] = 0;
    $0 = $13 + ($12 | 32 | 0) | 0;
    i64toi32_i32$0 = $0;
    i64toi32_i32$1 = -1082130432;
    HEAP32[($0 + 4 | 0) >> 2] = -1082130432;
    HEAP32[($0 + 8 | 0) >> 2] = i64toi32_i32$1;
    HEAP8[$0 >> 0] = 0;
    $12 = $13 + ($12 | 48 | 0) | 0;
    i64toi32_i32$0 = $12;
    i64toi32_i32$1 = -1082130432;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = -1082130432;
    HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = i64toi32_i32$1;
    HEAP8[i64toi32_i32$0 >> 0] = 0;
    $4 = $4 + 4 | 0;
    if (($4 | 0) != (652 | 0)) {
     continue label$67
    }
    break label$67;
   };
   HEAP32[($2 + 3528 | 0) >> 2] = 0;
   i64toi32_i32$0 = $2 + 3520 | 0;
   i64toi32_i32$1 = -8388609;
   HEAP32[i64toi32_i32$0 >> 2] = -8388609;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$0 = $2 + 3548 | 0;
   i64toi32_i32$1 = 0;
   HEAP32[i64toi32_i32$0 >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP8[($2 + 3532 | 0) >> 0] = 0;
   HEAP32[($2 + 14148 | 0) >> 2] = -1082130432;
   HEAP32[($2 + 14128 | 0) >> 2] = -1082130432;
   i64toi32_i32$0 = $2 + 14152 | 0;
   i64toi32_i32$1 = -1082130432;
   HEAP32[i64toi32_i32$0 >> 2] = -1082130432;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$0 = $2 + 14132 | 0;
   i64toi32_i32$1 = -1082130432;
   HEAP32[i64toi32_i32$0 >> 2] = -1082130432;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$0 = $2 + 14160 | 0;
   i64toi32_i32$1 = -1082130432;
   HEAP32[i64toi32_i32$0 >> 2] = -1082130432;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$0 = $2 + 14140 | 0;
   i64toi32_i32$1 = -1082130432;
   HEAP32[i64toi32_i32$0 >> 2] = -1082130432;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$0 = $2 + 3536 | 0;
   i64toi32_i32$1 = 0;
   HEAP32[i64toi32_i32$0 >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  }
  __stack_pointer = $1 + 240 | 0;
 }
 
 function ImGui__AddUpdateViewport_28ImGuiWindow__2c_20unsigned_20int_2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20int_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $8 = 0, i64toi32_i32$0 = 0, $7 = 0, i64toi32_i32$1 = 0, $13 = Math_fround(0), $10 = 0, $6 = 0, $12 = Math_fround(0), i64toi32_i32$2 = 0, $9 = 0, $5 = 0, $14 = Math_fround(0), $11 = 0, $76 = 0, $84 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  $6 = $4 | 1 | 0;
  $7 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   label$2 : {
    $8 = HEAP32[($7 + 16128 | 0) >> 2] | 0;
    if (!$8) {
     break label$2
    }
    $6 = (HEAP32[($8 + 836 | 0) >> 2] | 0 | 0) == ($0 | 0) ? $4 | 161 | 0 : $6;
   }
   $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   $6 = (($4 & 262656 | 0 | 0) == (262656 | 0) ? $6 | 128 | 0 : $6) | (($4 >>> 7 | 0) & 32 | 0) | 0;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     $9 = HEAP32[($7 + 18576 | 0) >> 2] | 0;
     if (($9 | 0) < (1 | 0)) {
      break label$5
     }
     $10 = HEAP32[($7 + 18584 | 0) >> 2] | 0;
     $8 = 0;
     label$6 : {
      label$7 : {
       label$8 : while (1) {
        $4 = HEAP32[($10 + ($8 << 2 | 0) | 0) >> 2] | 0;
        if ((HEAP32[$4 >> 2] | 0 | 0) == ($1 | 0)) {
         break label$7
        }
        $8 = $8 + 1 | 0;
        if (($8 | 0) == ($9 | 0)) {
         break label$6
        }
        continue label$8;
       };
      }
      label$9 : {
       label$10 : {
        if (!(HEAPU8[($4 + 69 | 0) >> 0] | 0)) {
         break label$10
        }
        if (($1 | 0) != (286331153 | 0)) {
         break label$9
        }
       }
       i64toi32_i32$2 = $2;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $76 = i64toi32_i32$0;
       i64toi32_i32$0 = $4;
       HEAP32[($4 + 8 | 0) >> 2] = $76;
       HEAP32[($4 + 12 | 0) >> 2] = i64toi32_i32$1;
      }
      label$11 : {
       label$12 : {
        if (!(HEAPU8[($4 + 70 | 0) >> 0] | 0)) {
         break label$12
        }
        if (($1 | 0) != (286331153 | 0)) {
         break label$11
        }
       }
       i64toi32_i32$2 = $3;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $84 = i64toi32_i32$1;
       i64toi32_i32$1 = $4;
       HEAP32[($4 + 16 | 0) >> 2] = $84;
       HEAP32[($4 + 20 | 0) >> 2] = i64toi32_i32$0;
      }
      HEAP32[($4 + 4 | 0) >> 2] = (HEAP32[($4 + 4 | 0) >> 2] | 0) & 1024 | 0 | $6 | 0;
      break label$3;
     }
     if (!$7) {
      break label$4
     }
    }
    $4 = $7 + 184 | 0;
    HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
   }
   $4 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](256, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   memset($4 + 4 | 0 | 0, 0 | 0, 68 | 0) | 0;
   i64toi32_i32$1 = $4;
   i64toi32_i32$0 = 0;
   HEAP32[($4 + 88 | 0) >> 2] = 0;
   HEAP32[($4 + 92 | 0) >> 2] = i64toi32_i32$0;
   memset($4 + 128 | 0 | 0, 0 | 0, 128 | 0) | 0;
   HEAP32[($4 + 116 | 0) >> 2] = -1;
   i64toi32_i32$1 = $4;
   i64toi32_i32$0 = -1;
   HEAP32[($4 + 76 | 0) >> 2] = -1;
   HEAP32[($4 + 80 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($4 + 84 | 0) >> 2] = 0;
   i64toi32_i32$1 = $4;
   i64toi32_i32$0 = -1;
   HEAP32[($4 + 108 | 0) >> 2] = 0;
   HEAP32[($4 + 112 | 0) >> 2] = i64toi32_i32$0;
   HEAP16[($4 + 104 | 0) >> 1] = 65535;
   i64toi32_i32$1 = $4;
   i64toi32_i32$0 = 1065353216;
   HEAP32[($4 + 96 | 0) >> 2] = 1065353216;
   HEAP32[($4 + 100 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4;
   i64toi32_i32$0 = 2139095039;
   HEAP32[($4 + 216 | 0) >> 2] = 2139095039;
   HEAP32[($4 + 220 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4;
   i64toi32_i32$0 = 0;
   HEAP32[($4 + 120 | 0) >> 2] = 0;
   HEAP32[($4 + 124 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4;
   i64toi32_i32$0 = 2139095039;
   HEAP32[($4 + 208 | 0) >> 2] = 2139095039;
   HEAP32[($4 + 212 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4;
   i64toi32_i32$0 = 2139095039;
   HEAP32[($4 + 200 | 0) >> 2] = 2139095039;
   HEAP32[($4 + 204 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[$4 >> 2] = $1;
   HEAP32[($4 + 72 | 0) >> 2] = HEAP32[($7 + 18576 | 0) >> 2] | 0;
   i64toi32_i32$2 = $2;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $11 = i64toi32_i32$0;
   i64toi32_i32$0 = $4;
   HEAP32[($4 + 8 | 0) >> 2] = $11;
   HEAP32[($4 + 12 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$0 = $4;
   HEAP32[($4 + 88 | 0) >> 2] = $11;
   HEAP32[($4 + 92 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $3;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $11 = i64toi32_i32$1;
   HEAP32[($4 + 4 | 0) >> 2] = $6;
   i64toi32_i32$1 = $4;
   HEAP32[($4 + 16 | 0) >> 2] = $11;
   HEAP32[($4 + 20 | 0) >> 2] = i64toi32_i32$0;
   ImGui__UpdateViewportPlatformMonitor_28ImGuiViewportP__29($4 | 0);
   label$13 : {
    $8 = HEAP32[($7 + 18576 | 0) >> 2] | 0;
    if (($8 | 0) != (HEAP32[($7 + 18580 | 0) >> 2] | 0 | 0)) {
     break label$13
    }
    $9 = $8 + 1 | 0;
    label$14 : {
     label$15 : {
      if ($8) {
       break label$15
      }
      $10 = 8;
      break label$14;
     }
     $10 = (($8 | 0) / (2 | 0) | 0) + $8 | 0;
    }
    $9 = ($10 | 0) > ($9 | 0) ? $10 : $9;
    if (($8 | 0) >= ($9 | 0)) {
     break label$13
    }
    $8 = $9 << 2 | 0;
    label$16 : {
     $10 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$10) {
      break label$16
     }
     $10 = $10 + 184 | 0;
     HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 1 | 0;
    }
    $8 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($8, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
    label$17 : {
     $10 = HEAP32[($7 + 18584 | 0) >> 2] | 0;
     if (!$10) {
      break label$17
     }
     __memcpy($8 | 0, $10 | 0, (HEAP32[($7 + 18576 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
     label$18 : {
      $10 = HEAP32[($7 + 18584 | 0) >> 2] | 0;
      if (!$10) {
       break label$18
      }
      $6 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$6) {
       break label$18
      }
      $6 = $6 + 184 | 0;
      HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1 | 0;
     }
     FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($10, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    }
    HEAP32[($7 + 18580 | 0) >> 2] = $9;
    HEAP32[($7 + 18584 | 0) >> 2] = $8;
    $8 = HEAP32[($7 + 18576 | 0) >> 2] | 0;
   }
   HEAP32[((HEAP32[($7 + 18584 | 0) >> 2] | 0) + ($8 << 2 | 0) | 0) >> 2] = $4;
   HEAP32[($7 + 18576 | 0) >> 2] = (HEAP32[($7 + 18576 | 0) >> 2] | 0) + 1 | 0;
   label$19 : {
    if (!((HEAPU8[($7 + 23536 | 0) >> 0] | 0) & 128 | 0)) {
     break label$19
    }
    label$20 : {
     label$21 : {
      if ($0) {
       break label$21
      }
      $8 = 67676;
      break label$20;
     }
     $8 = HEAP32[$0 >> 2] | 0;
    }
    HEAP32[($5 + 4 | 0) >> 2] = $8;
    HEAP32[$5 >> 2] = $1;
    ImGui__DebugLog_28char_20const__2c_20____29(70258 | 0, $5 | 0);
   }
   $8 = $7 + 15520 | 0;
   $12 = Math_fround(HEAPF32[$8 >> 2]);
   $13 = Math_fround(HEAPF32[($4 + 8 | 0) >> 2]);
   HEAPF32[$8 >> 2] = $12 < $13 ? $12 : $13;
   $8 = $7 + 15524 | 0;
   $14 = Math_fround(HEAPF32[$8 >> 2]);
   $12 = Math_fround(HEAPF32[($4 + 12 | 0) >> 2]);
   HEAPF32[$8 >> 2] = $14 < $12 ? $14 : $12;
   $8 = $7 + 15528 | 0;
   $14 = Math_fround(HEAPF32[$8 >> 2]);
   $13 = Math_fround($13 + Math_fround(HEAPF32[($4 + 16 | 0) >> 2]));
   HEAPF32[$8 >> 2] = $14 >= $13 ? $14 : $13;
   $8 = $7 + 15532 | 0;
   $13 = Math_fround(HEAPF32[$8 >> 2]);
   $12 = Math_fround($12 + Math_fround(HEAPF32[($4 + 20 | 0) >> 2]));
   HEAPF32[$8 >> 2] = $13 >= $12 ? $13 : $12;
   $8 = HEAP16[($4 + 104 | 0) >> 1] | 0;
   if (($8 | 0) == (-1 | 0)) {
    break label$3
   }
   HEAPF32[($4 + 40 | 0) >> 2] = Math_fround(HEAPF32[(((HEAP32[($7 + 14356 | 0) >> 2] | 0) + Math_imul($8, 36) | 0) + 32 | 0) >> 2]);
  }
  HEAP32[($4 + 108 | 0) >> 2] = $0;
  HEAP32[($4 + 76 | 0) >> 2] = HEAP32[($7 + 16016 | 0) >> 2] | 0;
  $13 = Math_fround(HEAPF32[($4 + 224 | 0) >> 2]);
  HEAPF32[($4 + 24 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4 + 8 | 0) >> 2]) + $13);
  $12 = Math_fround(HEAPF32[($4 + 228 | 0) >> 2]);
  HEAPF32[($4 + 28 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4 + 12 | 0) >> 2]) + $12);
  $13 = Math_fround(Math_fround(Math_fround(HEAPF32[($4 + 16 | 0) >> 2]) - $13) + Math_fround(HEAPF32[($4 + 232 | 0) >> 2]));
  HEAPF32[($4 + 32 | 0) >> 2] = $13 <= Math_fround(0.0) ? Math_fround(0.0) : $13;
  $13 = Math_fround(Math_fround(Math_fround(HEAPF32[($4 + 20 | 0) >> 2]) - $12) + Math_fround(HEAPF32[($4 + 236 | 0) >> 2]));
  HEAPF32[($4 + 36 | 0) >> 2] = $13 <= Math_fround(0.0) ? Math_fround(0.0) : $13;
  label$22 : {
   if (!$0) {
    break label$22
   }
   HEAP8[($0 + 218 | 0) >> 0] = 1;
  }
  __stack_pointer = $5 + 16 | 0;
  return $4 | 0;
 }
 
 function ImGui__UpdateViewportPlatformMonitor_28ImGuiViewportP__29($0) {
  $0 = $0 | 0;
  var $9 = Math_fround(0), $1 = 0, $5 = Math_fround(0), $7 = Math_fround(0), $12 = 0, $14 = Math_fround(0), $6 = Math_fround(0), $8 = Math_fround(0), $13 = Math_fround(0), $15 = Math_fround(0), $3 = Math_fround(0), $4 = 0, $2 = 0, $10 = Math_fround(0), $11 = 0;
  label$1 : {
   $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $2 = HEAP32[($1 + 14348 | 0) >> 2] | 0;
   if (($2 | 0) > (1 | 0)) {
    break label$1
   }
   HEAP16[($0 + 104 | 0) >> 1] = $2 + -1 | 0;
   return;
  }
  $3 = Math_fround(1.0000000474974513e-03);
  $4 = -1;
  label$2 : {
   $5 = Math_fround(HEAPF32[($0 + 8 | 0) >> 2]);
   $6 = Math_fround($5 + Math_fround(HEAPF32[($0 + 16 | 0) >> 2]));
   $7 = Math_fround(HEAPF32[($0 + 12 | 0) >> 2]);
   $8 = Math_fround($7 + Math_fround(HEAPF32[($0 + 20 | 0) >> 2]));
   $9 = Math_fround(Math_fround(Math_fround($6 - $5) * Math_fround($8 - $7)) * Math_fround(.5));
   $10 = $9 >= Math_fround(1.0) ? $9 : Math_fround(1.0);
   if (!($10 > Math_fround(1.0000000474974513e-03))) {
    break label$2
   }
   $11 = HEAP32[($1 + 14356 | 0) >> 2] | 0;
   $4 = -1;
   $12 = 0;
   label$3 : while (1) {
    $1 = $11 + Math_imul($12, 36) | 0;
    $9 = Math_fround(HEAPF32[$1 >> 2]);
    $13 = Math_fround($9 + Math_fround(HEAPF32[($1 + 8 | 0) >> 2]));
    $14 = Math_fround(HEAPF32[($1 + 4 | 0) >> 2]);
    $15 = Math_fround($14 + Math_fround(HEAPF32[($1 + 12 | 0) >> 2]));
    label$4 : {
     if (!($5 >= $9)) {
      break label$4
     }
     if (!($7 >= $14)) {
      break label$4
     }
     if (!($6 <= $13)) {
      break label$4
     }
     if (!($8 <= $15)) {
      break label$4
     }
     HEAP16[($0 + 104 | 0) >> 1] = $12;
     return;
    }
    $9 = Math_fround(Math_fround(($6 < $9 ? $9 : $6 > $13 ? $13 : $6) - ($5 < $9 ? $9 : $5 > $13 ? $13 : $5)) * Math_fround(($8 < $14 ? $14 : $8 > $15 ? $15 : $8) - ($7 < $14 ? $14 : $7 > $15 ? $15 : $7)));
    $1 = $9 < $3;
    $4 = $1 ? $4 : $12;
    $12 = $12 + 1 | 0;
    if (($12 | 0) >= ($2 | 0)) {
     break label$2
    }
    $3 = $1 ? $3 : $9;
    if ($3 < $10) {
     continue label$3
    }
    break label$3;
   };
  }
  HEAP16[($0 + 104 | 0) >> 1] = $4;
 }
 
 function ImGui__TranslateWindowsInViewport_28ImGuiViewportP__2c_20ImVec2_20const__2c_20ImVec2_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $7 = Math_fround(0), $10 = Math_fround(0), $3 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $6 = Math_fround(0), $9 = Math_fround(0), $5 = 0, $8 = Math_fround(0), $11 = Math_fround(0), $12 = 0;
  $3 = 0;
  label$1 : {
   $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $5 = HEAP32[($4 + 16044 | 0) >> 2] | 0;
   if (($5 | 0) < (1 | 0)) {
    break label$1
   }
   $6 = Math_fround(HEAPF32[($1 + 4 | 0) >> 2]);
   $7 = Math_fround(Math_fround(HEAPF32[($2 + 4 | 0) >> 2]) - $6);
   $8 = Math_fround($6 + Math_fround(HEAPF32[($0 + 20 | 0) >> 2]));
   $9 = Math_fround(HEAPF32[$1 >> 2]);
   $10 = Math_fround(Math_fround(HEAPF32[$2 >> 2]) - $9);
   $11 = Math_fround($9 + Math_fround(HEAPF32[($0 + 16 | 0) >> 2]));
   $2 = ((HEAP32[($4 + 15480 | 0) >> 2] | 0) ^ (HEAP32[($4 + 15476 | 0) >> 2] | 0) | 0) & 1024 | 0;
   $12 = HEAP32[($4 + 16052 | 0) >> 2] | 0;
   label$2 : while (1) {
    $4 = HEAP32[($12 + ($3 << 2 | 0) | 0) >> 2] | 0;
    label$3 : {
     label$4 : {
      label$5 : {
       if (!$2) {
        break label$5
       }
       $13 = Math_fround(HEAPF32[($4 + 68 | 0) >> 2]);
       $14 = Math_fround(HEAPF32[($4 + 64 | 0) >> 2]);
       break label$4;
      }
      if ((HEAP32[($4 + 44 | 0) >> 2] | 0 | 0) != ($0 | 0)) {
       break label$3
      }
      $14 = Math_fround(HEAPF32[($4 + 64 | 0) >> 2]);
      if (!($14 >= $9)) {
       break label$3
      }
      $13 = Math_fround(HEAPF32[($4 + 68 | 0) >> 2]);
      if (!($13 >= $6)) {
       break label$3
      }
      if (!(Math_fround($14 + Math_fround(HEAPF32[($4 + 72 | 0) >> 2])) <= $11)) {
       break label$3
      }
      if (!(Math_fround($13 + Math_fround(HEAPF32[($4 + 76 | 0) >> 2])) <= $8)) {
       break label$3
      }
     }
     HEAPF32[($4 + 68 | 0) >> 2] = Math_fround($7 + $13);
     HEAPF32[($4 + 64 | 0) >> 2] = Math_fround($10 + $14);
     HEAPF32[($4 + 580 | 0) >> 2] = Math_fround($10 + Math_fround(HEAPF32[($4 + 580 | 0) >> 2]));
     HEAPF32[($4 + 500 | 0) >> 2] = Math_fround($10 + Math_fround(HEAPF32[($4 + 500 | 0) >> 2]));
     $1 = $4 + 584 | 0;
     HEAPF32[$1 >> 2] = Math_fround($7 + Math_fround(HEAPF32[$1 >> 2]));
     $1 = $4 + 588 | 0;
     HEAPF32[$1 >> 2] = Math_fround($10 + Math_fround(HEAPF32[$1 >> 2]));
     $1 = $4 + 592 | 0;
     HEAPF32[$1 >> 2] = Math_fround($7 + Math_fround(HEAPF32[$1 >> 2]));
     $1 = $4 + 504 | 0;
     HEAPF32[$1 >> 2] = Math_fround($7 + Math_fround(HEAPF32[$1 >> 2]));
     $1 = $4 + 508 | 0;
     HEAPF32[$1 >> 2] = Math_fround($10 + Math_fround(HEAPF32[$1 >> 2]));
     $1 = $4 + 512 | 0;
     HEAPF32[$1 >> 2] = Math_fround($7 + Math_fround(HEAPF32[$1 >> 2]));
     HEAPF32[($4 + 516 | 0) >> 2] = Math_fround($10 + Math_fround(HEAPF32[($4 + 516 | 0) >> 2]));
     $1 = $4 + 520 | 0;
     HEAPF32[$1 >> 2] = Math_fround($7 + Math_fround(HEAPF32[$1 >> 2]));
     $1 = $4 + 524 | 0;
     HEAPF32[$1 >> 2] = Math_fround($10 + Math_fround(HEAPF32[$1 >> 2]));
     $1 = $4 + 528 | 0;
     HEAPF32[$1 >> 2] = Math_fround($7 + Math_fround(HEAPF32[$1 >> 2]));
     HEAPF32[($4 + 292 | 0) >> 2] = Math_fround($10 + Math_fround(HEAPF32[($4 + 292 | 0) >> 2]));
     $1 = $4 + 296 | 0;
     HEAPF32[$1 >> 2] = Math_fround($7 + Math_fround(HEAPF32[$1 >> 2]));
     $1 = $4 + 308 | 0;
     HEAPF32[$1 >> 2] = Math_fround($10 + Math_fround(HEAPF32[$1 >> 2]));
     $1 = $4 + 312 | 0;
     HEAPF32[$1 >> 2] = Math_fround($7 + Math_fround(HEAPF32[$1 >> 2]));
     $1 = $4 + 316 | 0;
     HEAPF32[$1 >> 2] = Math_fround($10 + Math_fround(HEAPF32[$1 >> 2]));
     $1 = $4 + 320 | 0;
     HEAPF32[$1 >> 2] = Math_fround($7 + Math_fround(HEAPF32[$1 >> 2]));
     $1 = $4 + 324 | 0;
     HEAPF32[$1 >> 2] = Math_fround($10 + Math_fround(HEAPF32[$1 >> 2]));
     $4 = $4 + 328 | 0;
     HEAPF32[$4 >> 2] = Math_fround($7 + Math_fround(HEAPF32[$4 >> 2]));
    }
    $3 = $3 + 1 | 0;
    if (($3 | 0) != ($5 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function ImGui__ScaleWindowsInViewport_28ImGuiViewportP__2c_20float_29($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $9 = Math_fround(0), $5 = 0, $4 = 0, $2 = 0, $7 = 0, $8 = Math_fround(0), $6 = Math_fround(0), $3 = 0;
  label$1 : {
   $2 = HEAP32[($0 + 108 | 0) >> 2] | 0;
   if ($2) {
    break label$1
   }
   label$2 : {
    $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    $4 = HEAP32[($3 + 16044 | 0) >> 2] | 0;
    if (!$4) {
     break label$2
    }
    $5 = 0;
    label$3 : while (1) {
     label$4 : {
      $2 = HEAP32[((HEAP32[($3 + 16052 | 0) >> 2] | 0) + ($5 << 2 | 0) | 0) >> 2] | 0;
      if ((HEAP32[($2 + 44 | 0) >> 2] | 0 | 0) != ($0 | 0)) {
       break label$4
      }
      label$5 : {
       label$6 : {
        $4 = $2 + 72 | 0;
        $6 = Math_fround(Math_fround(HEAPF32[$4 >> 2]) * $1);
        if (!(Math_fround(Math_abs($6)) < Math_fround(2147483648.0))) {
         break label$6
        }
        $7 = ~~$6;
        break label$5;
       }
       $7 = -2147483648;
      }
      $6 = Math_fround(HEAPF32[($0 + 8 | 0) >> 2]);
      $8 = Math_fround(HEAPF32[($0 + 12 | 0) >> 2]);
      HEAPF32[$4 >> 2] = Math_fround($7 | 0);
      label$7 : {
       label$8 : {
        $4 = $2 + 76 | 0;
        $9 = Math_fround(Math_fround(HEAPF32[$4 >> 2]) * $1);
        if (!(Math_fround(Math_abs($9)) < Math_fround(2147483648.0))) {
         break label$8
        }
        $7 = ~~$9;
        break label$7;
       }
       $7 = -2147483648;
      }
      HEAPF32[$4 >> 2] = Math_fround($7 | 0);
      label$9 : {
       label$10 : {
        $4 = $2 + 80 | 0;
        $9 = Math_fround(Math_fround(HEAPF32[$4 >> 2]) * $1);
        if (!(Math_fround(Math_abs($9)) < Math_fround(2147483648.0))) {
         break label$10
        }
        $7 = ~~$9;
        break label$9;
       }
       $7 = -2147483648;
      }
      HEAPF32[$4 >> 2] = Math_fround($7 | 0);
      label$11 : {
       label$12 : {
        $4 = $2 + 84 | 0;
        $9 = Math_fround(Math_fround(HEAPF32[$4 >> 2]) * $1);
        if (!(Math_fround(Math_abs($9)) < Math_fround(2147483648.0))) {
         break label$12
        }
        $7 = ~~$9;
        break label$11;
       }
       $7 = -2147483648;
      }
      HEAPF32[$4 >> 2] = Math_fround($7 | 0);
      label$13 : {
       label$14 : {
        $4 = $2 + 88 | 0;
        $9 = Math_fround(Math_fround(HEAPF32[$4 >> 2]) * $1);
        if (!(Math_fround(Math_abs($9)) < Math_fround(2147483648.0))) {
         break label$14
        }
        $7 = ~~$9;
        break label$13;
       }
       $7 = -2147483648;
      }
      HEAPF32[$4 >> 2] = Math_fround($7 | 0);
      label$15 : {
       label$16 : {
        $4 = $2 + 92 | 0;
        $9 = Math_fround(Math_fround(HEAPF32[$4 >> 2]) * $1);
        if (!(Math_fround(Math_abs($9)) < Math_fround(2147483648.0))) {
         break label$16
        }
        $7 = ~~$9;
        break label$15;
       }
       $7 = -2147483648;
      }
      HEAPF32[$4 >> 2] = Math_fround($7 | 0);
      label$17 : {
       label$18 : {
        $4 = $2 + 68 | 0;
        $8 = Math_fround($8 + Math_fround(Math_fround(Math_fround(HEAPF32[$4 >> 2]) - $8) * $1));
        if (!(Math_fround(Math_abs($8)) < Math_fround(2147483648.0))) {
         break label$18
        }
        $7 = ~~$8;
        break label$17;
       }
       $7 = -2147483648;
      }
      HEAPF32[$4 >> 2] = Math_fround($7 | 0);
      label$19 : {
       label$20 : {
        $2 = $2 + 64 | 0;
        $6 = Math_fround($6 + Math_fround(Math_fround(Math_fround(HEAPF32[$2 >> 2]) - $6) * $1));
        if (!(Math_fround(Math_abs($6)) < Math_fround(2147483648.0))) {
         break label$20
        }
        $4 = ~~$6;
        break label$19;
       }
       $4 = -2147483648;
      }
      HEAPF32[$2 >> 2] = Math_fround($4 | 0);
      $4 = HEAP32[($3 + 16044 | 0) >> 2] | 0;
     }
     $5 = $5 + 1 | 0;
     if (($5 | 0) != ($4 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   return;
  }
  $5 = HEAP32[($2 + 44 | 0) >> 2] | 0;
  $6 = Math_fround(HEAPF32[($5 + 12 | 0) >> 2]);
  label$21 : {
   label$22 : {
    $0 = $2 + 72 | 0;
    $8 = Math_fround(Math_fround(HEAPF32[$0 >> 2]) * $1);
    if (!(Math_fround(Math_abs($8)) < Math_fround(2147483648.0))) {
     break label$22
    }
    $3 = ~~$8;
    break label$21;
   }
   $3 = -2147483648;
  }
  $8 = Math_fround(HEAPF32[($5 + 8 | 0) >> 2]);
  HEAPF32[$0 >> 2] = Math_fround($3 | 0);
  label$23 : {
   label$24 : {
    $5 = $2 + 76 | 0;
    $9 = Math_fround(Math_fround(HEAPF32[$5 >> 2]) * $1);
    if (!(Math_fround(Math_abs($9)) < Math_fround(2147483648.0))) {
     break label$24
    }
    $0 = ~~$9;
    break label$23;
   }
   $0 = -2147483648;
  }
  HEAPF32[$5 >> 2] = Math_fround($0 | 0);
  label$25 : {
   label$26 : {
    $5 = $2 + 80 | 0;
    $9 = Math_fround(Math_fround(HEAPF32[$5 >> 2]) * $1);
    if (!(Math_fround(Math_abs($9)) < Math_fround(2147483648.0))) {
     break label$26
    }
    $0 = ~~$9;
    break label$25;
   }
   $0 = -2147483648;
  }
  HEAPF32[$5 >> 2] = Math_fround($0 | 0);
  label$27 : {
   label$28 : {
    $5 = $2 + 84 | 0;
    $9 = Math_fround(Math_fround(HEAPF32[$5 >> 2]) * $1);
    if (!(Math_fround(Math_abs($9)) < Math_fround(2147483648.0))) {
     break label$28
    }
    $0 = ~~$9;
    break label$27;
   }
   $0 = -2147483648;
  }
  HEAPF32[$5 >> 2] = Math_fround($0 | 0);
  label$29 : {
   label$30 : {
    $5 = $2 + 92 | 0;
    $9 = Math_fround(Math_fround(HEAPF32[$5 >> 2]) * $1);
    if (!(Math_fround(Math_abs($9)) < Math_fround(2147483648.0))) {
     break label$30
    }
    $0 = ~~$9;
    break label$29;
   }
   $0 = -2147483648;
  }
  HEAPF32[$5 >> 2] = Math_fround($0 | 0);
  label$31 : {
   label$32 : {
    $5 = $2 + 88 | 0;
    $9 = Math_fround(Math_fround(HEAPF32[$5 >> 2]) * $1);
    if (!(Math_fround(Math_abs($9)) < Math_fround(2147483648.0))) {
     break label$32
    }
    $0 = ~~$9;
    break label$31;
   }
   $0 = -2147483648;
  }
  HEAPF32[$5 >> 2] = Math_fround($0 | 0);
  label$33 : {
   label$34 : {
    $5 = $2 + 64 | 0;
    $8 = Math_fround($8 + Math_fround(Math_fround(Math_fround(HEAPF32[$5 >> 2]) - $8) * $1));
    if (!(Math_fround(Math_abs($8)) < Math_fround(2147483648.0))) {
     break label$34
    }
    $0 = ~~$8;
    break label$33;
   }
   $0 = -2147483648;
  }
  HEAPF32[$5 >> 2] = Math_fround($0 | 0);
  label$35 : {
   label$36 : {
    $2 = $2 + 68 | 0;
    $1 = Math_fround($6 + Math_fround(Math_fround(Math_fround(HEAPF32[$2 >> 2]) - $6) * $1));
    if (!(Math_fround(Math_abs($1)) < Math_fround(2147483648.0))) {
     break label$36
    }
    $5 = ~~$1;
    break label$35;
   }
   $5 = -2147483648;
  }
  HEAPF32[$2 >> 2] = Math_fround($5 | 0);
 }
 
 function ImGui__NavMoveRequestApplyResult_28_29() {
  var $1 = 0, $3 = 0, $2 = 0, $0 = 0, $4 = 0, $5 = Math_fround(0), $10 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $6 = Math_fround(0), $11 = 0, i64toi32_i32$2 = 0, $9 = Math_fround(0), $17 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $243 = 0, $247 = 0;
  $0 = __stack_pointer - 48 | 0;
  __stack_pointer = $0;
  label$1 : {
   label$2 : {
    $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!(HEAP32[($1 + 18812 | 0) >> 2] | 0)) {
     break label$2
    }
    $2 = $1 + 18808 | 0;
    break label$1;
   }
   $2 = HEAP32[($1 + 18900 | 0) >> 2] | 0 ? $1 + 18896 | 0 : 0;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         $3 = HEAP32[($1 + 18740 | 0) >> 2] | 0;
         if (!($3 & 1024 | 0)) {
          break label$9
         }
         label$10 : {
          if ((HEAP32[($1 + 18804 | 0) >> 2] | 0 | 0) == (1 | 0)) {
           break label$10
          }
          if (HEAP32[($1 + 18800 | 0) >> 2] | 0) {
           break label$8
          }
         }
         if (!(HEAP32[($1 + 18944 | 0) >> 2] | 0)) {
          break label$8
         }
         $2 = $1 + 18940 | 0;
         break label$7;
        }
        if (!$2) {
         break label$5
        }
        break label$7;
       }
       if (!$2) {
        break label$6
       }
      }
      label$11 : {
       if (!($3 & 32 | 0)) {
        break label$11
       }
       $4 = HEAP32[($1 + 18856 | 0) >> 2] | 0;
       if (!$4) {
        break label$11
       }
       $2 = ($4 | 0) == (HEAP32[($1 + 18652 | 0) >> 2] | 0 | 0) ? $2 : $1 + 18852 | 0;
      }
      label$12 : {
       label$13 : {
        $4 = $1 + 18896 | 0;
        if (($2 | 0) == ($4 | 0)) {
         break label$13
        }
        if (!(HEAP32[($1 + 18900 | 0) >> 2] | 0)) {
         break label$12
        }
        if ((HEAP32[((HEAP32[($1 + 18896 | 0) >> 2] | 0) + 820 | 0) >> 2] | 0 | 0) != (HEAP32[($1 + 18648 | 0) >> 2] | 0 | 0)) {
         break label$12
        }
        $5 = Math_fround(HEAPF32[($1 + 18928 | 0) >> 2]);
        $6 = Math_fround(HEAPF32[($2 + 32 | 0) >> 2]);
        if ($5 < $6) {
         break label$13
        }
        if ($5 != $6) {
         break label$12
        }
        if (!(Math_fround(HEAPF32[($1 + 18932 | 0) >> 2]) < Math_fround(HEAPF32[($2 + 36 | 0) >> 2]))) {
         break label$12
        }
       }
       $2 = $4;
      }
      label$14 : {
       if (HEAP32[($1 + 18704 | 0) >> 2] | 0) {
        break label$14
       }
       label$15 : {
        if (!($3 & 64 | 0)) {
         break label$15
        }
        $3 = HEAP32[$2 >> 2] | 0;
        $5 = Math_fround(0.0);
        label$16 : {
         if ((HEAP32[($1 + 18752 | 0) >> 2] | 0 | 0) != (2 | 0)) {
          break label$16
         }
         $5 = Math_fround(HEAPF32[($3 + 180 | 0) >> 2]);
        }
        HEAP32[($3 + 204 | 0) >> 2] = 0;
        HEAP32[($3 + 196 | 0) >> 2] = 0;
        HEAPF32[($3 + 188 | 0) >> 2] = $5;
        break label$14;
       }
       $6 = Math_fround(HEAPF32[($2 + 16 | 0) >> 2]);
       $7 = Math_fround(HEAPF32[($2 + 20 | 0) >> 2]);
       $3 = HEAP32[$2 >> 2] | 0;
       $5 = Math_fround(HEAPF32[($3 + 308 | 0) >> 2]);
       $8 = Math_fround(HEAPF32[($2 + 12 | 0) >> 2]);
       $9 = Math_fround(HEAPF32[($3 + 312 | 0) >> 2]);
       HEAPF32[($0 + 44 | 0) >> 2] = Math_fround($9 + Math_fround(HEAPF32[($2 + 24 | 0) >> 2]));
       HEAPF32[($0 + 40 | 0) >> 2] = Math_fround($5 + $7);
       HEAPF32[($0 + 36 | 0) >> 2] = Math_fround($9 + $6);
       HEAPF32[($0 + 32 | 0) >> 2] = Math_fround($5 + $8);
       ImGui__ScrollToRectEx_28ImGuiWindow__2c_20ImRect_20const__2c_20int_29($0 + 24 | 0 | 0, $3 | 0, $0 + 32 | 0 | 0, HEAP32[($1 + 18744 | 0) >> 2] | 0 | 0);
      }
      label$17 : {
       $3 = HEAP32[$2 >> 2] | 0;
       if ((HEAP32[($1 + 18648 | 0) >> 2] | 0 | 0) == ($3 | 0)) {
        break label$17
       }
       label$18 : {
        if (!((HEAPU8[($1 + 23536 | 0) >> 0] | 0) & 2 | 0)) {
         break label$18
        }
        HEAP32[($0 + 16 | 0) >> 2] = HEAP32[$3 >> 2] | 0;
        ImGui__DebugLog_28char_20const__2c_20____29(69834 | 0, $0 + 16 | 0 | 0);
        $3 = HEAP32[$2 >> 2] | 0;
       }
       HEAP32[($1 + 18648 | 0) >> 2] = $3;
      }
      label$19 : {
       $3 = HEAP32[($1 + 16192 | 0) >> 2] | 0;
       if (($3 | 0) == (HEAP32[($2 + 4 | 0) >> 2] | 0 | 0)) {
        break label$19
       }
       ImGui__SetActiveID_28unsigned_20int_2c_20ImGuiWindow__29(0 | 0, 0 | 0);
       $3 = HEAP32[($2 + 4 | 0) >> 2] | 0;
      }
      label$20 : {
       if ((HEAP32[($1 + 18652 | 0) >> 2] | 0 | 0) == ($3 | 0)) {
        break label$20
       }
       HEAP32[($1 + 18680 | 0) >> 2] = $3;
       HEAP32[($1 + 18684 | 0) >> 2] = HEAP32[($2 + 8 | 0) >> 2] | 0;
       HEAP32[($1 + 18688 | 0) >> 2] = HEAP32[($1 + 18748 | 0) >> 2] | 0;
      }
      $10 = HEAP32[($1 + 18704 | 0) >> 2] | 0;
      label$21 : {
       if (!((HEAPU8[($1 + 23536 | 0) >> 0] | 0) & 8 | 0)) {
        break label$21
       }
       HEAP32[($0 + 8 | 0) >> 2] = HEAP32[(HEAP32[($1 + 18648 | 0) >> 2] | 0) >> 2] | 0;
       HEAP32[($0 + 4 | 0) >> 2] = $10;
       HEAP32[$0 >> 2] = $3;
       ImGui__DebugLog_28char_20const__2c_20____29(70293 | 0, $0 | 0);
       $10 = HEAP32[($1 + 18704 | 0) >> 2] | 0;
       $3 = HEAP32[($2 + 4 | 0) >> 2] | 0;
      }
      $11 = HEAP32[($2 + 8 | 0) >> 2] | 0;
      $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      HEAP32[($4 + 18704 | 0) >> 2] = $10;
      HEAP32[($4 + 18652 | 0) >> 2] = $3;
      HEAP32[($4 + 18656 | 0) >> 2] = $11;
      $11 = HEAP32[($4 + 18648 | 0) >> 2] | 0;
      HEAP32[(($11 + ($10 << 2 | 0) | 0) + 852 | 0) >> 2] = $3;
      $3 = $11 + ($10 << 4 | 0) | 0;
      i64toi32_i32$2 = $2 + 20 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $243 = i64toi32_i32$0;
      i64toi32_i32$0 = $3 + 868 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $243;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $2;
      i64toi32_i32$1 = HEAP32[($2 + 12 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($2 + 16 | 0) >> 2] | 0;
      $247 = i64toi32_i32$1;
      i64toi32_i32$1 = $3 + 860 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $247;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      label$22 : {
       $3 = HEAP32[($1 + 18740 | 0) >> 2] | 0;
       if (!($3 & 1024 | 0)) {
        break label$22
       }
       if (!((HEAPU8[($2 + 29 | 0) >> 0] | 0) & 4 | 0)) {
        break label$22
       }
       $10 = HEAP32[($2 + 4 | 0) >> 2] | 0;
       $3 = $3 | 4096 | 0;
       HEAP32[($1 + 18740 | 0) >> 2] = $3;
       HEAP32[($1 + 18696 | 0) >> 2] = 5;
       HEAP32[($1 + 18692 | 0) >> 2] = $10;
      }
      label$23 : {
       if (!($3 & 2048 | 0)) {
        break label$23
       }
       $2 = HEAP32[($2 + 4 | 0) >> 2] | 0;
       HEAP32[($1 + 18696 | 0) >> 2] = 0;
       HEAP32[($1 + 18692 | 0) >> 2] = $2;
      }
      if ($3 & 4096 | 0) {
       break label$3
      }
      break label$4;
     }
     $3 = $3 | 4096 | 0;
     HEAP32[($1 + 18740 | 0) >> 2] = $3;
    }
    if (!(HEAP32[($1 + 18652 | 0) >> 2] | 0)) {
     break label$3
    }
    $4 = $1;
    if ($3 & 4096 | 0) {
     break label$3
    }
   }
   HEAP8[($4 + 18711 | 0) >> 0] = 1;
   $17 = 1;
   HEAP8[($4 + 18709 | 0) >> 0] = $17;
   HEAP8[($4 + 18710 | 0) >> 0] = $17 >>> 8 | 0;
  }
  __stack_pointer = $0 + 48 | 0;
 }
 
 function ImGui__IsKeyPressed_28ImGuiKey_2c_20unsigned_20int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $3 = 0, $7 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $8 = Math_fround(0), $4 = 0, $6 = 0;
  $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $4 = $0 & 63488 | 0;
    if (!$4) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if (($0 | 0) > (8191 | 0)) {
       break label$4
      }
      if (($0 | 0) == (2048 | 0)) {
       break label$3
      }
      $5 = 648;
      if (($0 | 0) == (4096 | 0)) {
       break label$1
      }
      $5 = $0;
      break label$1;
     }
     label$5 : {
      if (($0 | 0) == (32768 | 0)) {
       break label$5
      }
      label$6 : {
       if (($0 | 0) == (16384 | 0)) {
        break label$6
       }
       $5 = $0;
       if (($0 | 0) != (8192 | 0)) {
        break label$1
       }
       $5 = 649;
       break label$1;
      }
      $5 = 650;
      break label$1;
     }
     $5 = 651;
     break label$1;
    }
    $5 = HEAPU8[($3 + 105 | 0) >> 0] | 0 ? 651 : 648;
    break label$1;
   }
   $5 = $0;
   if ($0 >>> 0 > 511 >>> 0) {
    break label$1
   }
   $5 = HEAP32[(($3 + ($0 << 2 | 0) | 0) + 196 | 0) >> 2] | 0;
   $5 = ($5 | 0) == (-1 | 0) ? $0 : $5;
  }
  $6 = 0;
  label$7 : {
   $5 = $3 + ($5 << 4 | 0) | 0;
   if (!(HEAPU8[($5 + 3556 | 0) >> 0] | 0)) {
    break label$7
   }
   $7 = Math_fround(HEAPF32[($5 + 3560 | 0) >> 2]);
   if ($7 < Math_fround(0.0)) {
    break label$7
   }
   label$8 : {
    label$9 : {
     if (!($2 & 1 | 0)) {
      break label$9
     }
     if ($7 == Math_fround(0.0)) {
      break label$9
     }
     label$10 : {
      label$11 : {
       switch (($2 & 14 | 0) + -4 | 0 | 0) {
       case 0:
        $8 = Math_fround(Math_fround(HEAPF32[($3 + 56 | 0) >> 2]) * Math_fround(.800000011920929));
        $9 = Math_fround(Math_fround(HEAPF32[($3 + 52 | 0) >> 2]) * Math_fround(.7200000286102295));
        break label$10;
       case 4:
        $8 = Math_fround(Math_fround(HEAPF32[($3 + 56 | 0) >> 2]) * Math_fround(.30000001192092896));
        $9 = Math_fround(Math_fround(HEAPF32[($3 + 52 | 0) >> 2]) * Math_fround(.7200000286102295));
        break label$10;
       default:
        break label$11;
       };
      }
      $8 = Math_fround(HEAPF32[($3 + 56 | 0) >> 2]);
      $9 = Math_fround(HEAPF32[($3 + 52 | 0) >> 2]);
     }
     if (!($7 > $9)) {
      break label$7
     }
     label$14 : {
      label$15 : {
       if (!$4) {
        break label$15
       }
       label$16 : {
        label$17 : {
         if (($0 | 0) > (8191 | 0)) {
          break label$17
         }
         if (($0 | 0) == (2048 | 0)) {
          break label$16
         }
         $5 = 648;
         if (($0 | 0) == (4096 | 0)) {
          break label$14
         }
         $5 = $0;
         break label$14;
        }
        label$18 : {
         if (($0 | 0) == (32768 | 0)) {
          break label$18
         }
         label$19 : {
          if (($0 | 0) == (16384 | 0)) {
           break label$19
          }
          $5 = $0;
          if (($0 | 0) != (8192 | 0)) {
           break label$14
          }
          $5 = 649;
          break label$14;
         }
         $5 = 650;
         break label$14;
        }
        $5 = 651;
        break label$14;
       }
       $5 = HEAPU8[($3 + 105 | 0) >> 0] | 0 ? 651 : 648;
       break label$14;
      }
      $5 = $0;
      if ($0 >>> 0 > 511 >>> 0) {
       break label$14
      }
      $5 = HEAP32[(($3 + ($0 << 2 | 0) | 0) + 196 | 0) >> 2] | 0;
      $5 = ($5 | 0) == (-1 | 0) ? $0 : $5;
     }
     $5 = $3 + ($5 << 4 | 0) | 0;
     if (!(HEAPU8[($5 + 3556 | 0) >> 0] | 0)) {
      break label$7
     }
     $7 = Math_fround(HEAPF32[($5 + 3560 | 0) >> 2]);
     if ($7 == Math_fround(0.0)) {
      break label$8
     }
     $10 = Math_fround($7 - Math_fround(HEAPF32[($3 + 24 | 0) >> 2]));
     if ($10 >= $7) {
      break label$7
     }
     label$20 : {
      if (!($8 <= Math_fround(0.0))) {
       break label$20
      }
      if (!($7 >= $9)) {
       break label$7
      }
      if ($10 < $9) {
       break label$8
      }
      break label$7;
     }
     $3 = -1;
     $5 = -1;
     label$21 : {
      if ($10 < $9) {
       break label$21
      }
      label$22 : {
       $10 = Math_fround(Math_fround($10 - $9) / $8);
       if (!(Math_fround(Math_abs($10)) < Math_fround(2147483648.0))) {
        break label$22
       }
       $5 = ~~$10;
       break label$21;
      }
      $5 = -2147483648;
     }
     label$23 : {
      if ($7 < $9) {
       break label$23
      }
      label$24 : {
       $7 = Math_fround(Math_fround($7 - $9) / $8);
       if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
        break label$24
       }
       $3 = ~~$7;
       break label$23;
      }
      $3 = -2147483648;
     }
     if (($3 | 0) > ($5 | 0)) {
      break label$8
     }
     break label$7;
    }
    if ($7 != Math_fround(0.0)) {
     break label$7
    }
   }
   $6 = ImGui__TestKeyOwner_28ImGuiKey_2c_20unsigned_20int_29($0 | 0, $1 | 0) | 0;
  }
  return $6 | 0;
 }
 
 function NavUpdateWindowingHighlightWindow_28int_29($0) {
  $0 = $0 | 0;
  var $2 = 0, $1 = 0, $5 = 0, $4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3 = 0;
  label$1 : {
   $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $2 = HEAP32[($1 + 18992 | 0) >> 2] | 0;
   if ((HEAPU8[($2 + 11 | 0) >> 0] | 0) & 8 | 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     label$4 : {
      $3 = HEAP16[($2 + 240 | 0) >> 1] | 0;
      $2 = $3 + $0 | 0;
      if (($2 | 0) < (0 | 0)) {
       break label$4
      }
      $4 = HEAP32[($1 + 16056 | 0) >> 2] | 0;
      label$5 : while (1) {
       if (($2 | 0) >= ($4 | 0)) {
        break label$4
       }
       label$6 : {
        $5 = HEAP32[((HEAP32[($1 + 16064 | 0) >> 2] | 0) + ($2 << 2 | 0) | 0) >> 2] | 0;
        if (!(HEAPU8[($5 + 220 | 0) >> 0] | 0)) {
         break label$6
        }
        if ((HEAP32[($5 + 828 | 0) >> 2] | 0 | 0) != ($5 | 0)) {
         break label$6
        }
        if (!((HEAPU8[($5 + 10 | 0) >> 0] | 0) & 8 | 0)) {
         break label$3
        }
       }
       $2 = $2 + $0 | 0;
       if (($2 | 0) > (-1 | 0)) {
        continue label$5
       }
       break label$5;
      };
     }
     $4 = HEAP32[($1 + 16056 | 0) >> 2] | 0;
     $2 = 0;
     label$7 : {
      if (($0 | 0) > (-1 | 0)) {
       break label$7
      }
      if (($4 | 0) < (1 | 0)) {
       break label$2
      }
      $2 = $4 + -1 | 0;
     }
     label$8 : while (1) {
      if (($2 | 0) == ($3 | 0)) {
       break label$2
      }
      if (($2 | 0) >= ($4 | 0)) {
       break label$2
      }
      label$9 : {
       $5 = HEAP32[((HEAP32[($1 + 16064 | 0) >> 2] | 0) + ($2 << 2 | 0) | 0) >> 2] | 0;
       if (!(HEAPU8[($5 + 220 | 0) >> 0] | 0)) {
        break label$9
       }
       if ((HEAP32[($5 + 828 | 0) >> 2] | 0 | 0) != ($5 | 0)) {
        break label$9
       }
       if (!((HEAPU8[($5 + 10 | 0) >> 0] | 0) & 8 | 0)) {
        break label$3
       }
      }
      $2 = $2 + $0 | 0;
      if (($2 | 0) > (-1 | 0)) {
       continue label$8
      }
      break label$2;
     };
    }
    i64toi32_i32$1 = $1;
    i64toi32_i32$0 = 0;
    HEAP32[($1 + 19016 | 0) >> 2] = 0;
    HEAP32[($1 + 19020 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($1 + 18992 | 0) >> 2] = $5;
    HEAP32[($1 + 18996 | 0) >> 2] = $5;
    i64toi32_i32$1 = $1 + 19024 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   }
   HEAP8[($1 + 19012 | 0) >> 0] = 0;
  }
 }
 
 function ImGui__NavInitWindow_28ImGuiWindow__2c_20bool_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2 = 0, $7 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    if (!($4 & 262144 | 0)) {
     break label$2
    }
    HEAP32[($3 + 18652 | 0) >> 2] = 0;
    HEAP32[($3 + 18656 | 0) >> 2] = HEAP32[($0 + 892 | 0) >> 2] | 0;
    break label$1;
   }
   label$3 : {
    label$4 : {
     if ((HEAP32[($0 + 828 | 0) >> 2] | 0 | 0) == ($0 | 0)) {
      break label$4
     }
     if ($4 & 67108864 | 0) {
      break label$4
     }
     if (!(HEAP32[($0 + 852 | 0) >> 2] | 0)) {
      break label$4
     }
     $4 = 0;
     if (!$1) {
      break label$3
     }
    }
    $4 = 1;
   }
   label$5 : {
    if (!((HEAPU8[($3 + 23536 | 0) >> 0] | 0) & 8 | 0)) {
     break label$5
    }
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[($2 + 8 | 0) >> 2] = HEAP32[($3 + 18704 | 0) >> 2] | 0;
    HEAP32[($2 + 4 | 0) >> 2] = $1;
    HEAP32[$2 >> 2] = $4;
    ImGui__DebugLog_28char_20const__2c_20____29(68464 | 0, $2 | 0);
   }
   label$6 : {
    if (!$4) {
     break label$6
    }
    $1 = HEAP32[($0 + 892 | 0) >> 2] | 0;
    $0 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    $4 = HEAP32[($3 + 18704 | 0) >> 2] | 0;
    HEAP32[($0 + 18704 | 0) >> 2] = $4;
    HEAP32[($0 + 18652 | 0) >> 2] = 0;
    HEAP32[($0 + 18656 | 0) >> 2] = $1;
    $1 = HEAP32[($0 + 18648 | 0) >> 2] | 0;
    HEAP32[(($1 + ($4 << 2 | 0) | 0) + 852 | 0) >> 2] = 0;
    $4 = $1 + ($4 << 4 | 0) | 0;
    i64toi32_i32$1 = $4 + 868 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $4 + 860 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $3;
    i64toi32_i32$0 = 0;
    HEAP32[($3 + 18720 | 0) >> 2] = 0;
    HEAP32[($3 + 18724 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($3 + 18716 | 0) >> 2] = 0;
    $4 = 1;
    $7 = 1;
    HEAP8[($3 + 18713 | 0) >> 0] = $7;
    HEAP8[($3 + 18714 | 0) >> 0] = $7 >>> 8 | 0;
    i64toi32_i32$1 = $3 + 18728 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    label$7 : {
     if (HEAPU8[($0 + 18737 | 0) >> 0] | 0) {
      break label$7
     }
     $4 = (HEAPU8[($0 + 18713 | 0) >> 0] | 0 | 0) != (0 | 0);
    }
    HEAP8[($0 + 18712 | 0) >> 0] = $4;
    break label$1;
   }
   HEAP32[($3 + 18652 | 0) >> 2] = HEAP32[($0 + 852 | 0) >> 2] | 0;
   HEAP32[($3 + 18656 | 0) >> 2] = HEAP32[($0 + 892 | 0) >> 2] | 0;
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function ImGui__NavRestoreLayer_28ImGuiNavLayer_29($0) {
  $0 = $0 | 0;
  var $2 = 0, $4 = 0, $3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5 = 0, $1 = 0, i64toi32_i32$2 = 0, $11 = 0, $87 = 0, $92 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  label$1 : {
   if ($0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $3 = HEAP32[($2 + 18648 | 0) >> 2] | 0;
     $4 = HEAP32[($3 + 848 | 0) >> 2] | 0;
     if (!$4) {
      break label$3
     }
     if (HEAPU8[($4 + 220 | 0) >> 0] | 0) {
      break label$2
     }
    }
    $4 = $3;
    $5 = HEAP32[($4 + 936 | 0) >> 2] | 0;
    if (!$5) {
     break label$2
    }
    $4 = $3;
    $5 = HEAP32[($5 + 48 | 0) >> 2] | 0;
    if (!$5) {
     break label$2
    }
    $4 = $3;
    $5 = ImGui__TabBarFindMostRecentlySelectedTabForActiveWindow_28ImGuiTabBar__29($5 | 0) | 0;
    if (!$5) {
     break label$2
    }
    $4 = HEAP32[($5 + 8 | 0) >> 2] | 0;
   }
   HEAP32[($2 + 18648 | 0) >> 2] = $4;
   if (!((HEAPU8[($2 + 23536 | 0) >> 0] | 0) & 2 | 0)) {
    break label$1
   }
   $3 = HEAP32[$3 >> 2] | 0;
   HEAP32[($1 + 20 | 0) >> 2] = HEAP32[$4 >> 2] | 0;
   HEAP32[($1 + 16 | 0) >> 2] = $3;
   ImGui__DebugLog_28char_20const__2c_20____29(69748 | 0, $1 + 16 | 0 | 0);
  }
  label$4 : {
   label$5 : {
    $4 = HEAP32[($2 + 18648 | 0) >> 2] | 0;
    $5 = $0 << 2 | 0;
    $3 = HEAP32[(($4 + $5 | 0) + 852 | 0) >> 2] | 0;
    if (!$3) {
     break label$5
    }
    $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    HEAP32[($2 + 18704 | 0) >> 2] = $0;
    HEAP32[($2 + 18652 | 0) >> 2] = $3;
    HEAP32[($2 + 18656 | 0) >> 2] = 0;
    $2 = HEAP32[($2 + 18648 | 0) >> 2] | 0;
    HEAP32[(($2 + $5 | 0) + 852 | 0) >> 2] = $3;
    $0 = $0 << 4 | 0;
    $2 = $2 + $0 | 0;
    $0 = $4 + $0 | 0;
    i64toi32_i32$2 = $0 + 868 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $87 = i64toi32_i32$0;
    i64toi32_i32$0 = $2 + 868 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $87;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $0 + 860 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $92 = i64toi32_i32$1;
    i64toi32_i32$1 = $2 + 860 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $92;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    break label$4;
   }
   HEAP32[($2 + 18704 | 0) >> 2] = $0;
   $0 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   label$6 : {
    if (!((HEAPU8[($4 + 10 | 0) >> 0] | 0) & 4 | 0)) {
     break label$6
    }
    HEAP32[($0 + 18652 | 0) >> 2] = 0;
    HEAP32[($0 + 18656 | 0) >> 2] = HEAP32[($4 + 892 | 0) >> 2] | 0;
    break label$4;
   }
   $2 = $0;
   label$7 : {
    if (!((HEAPU8[($2 + 23536 | 0) >> 0] | 0) & 8 | 0)) {
     break label$7
    }
    $2 = HEAP32[$4 >> 2] | 0;
    HEAP32[($1 + 8 | 0) >> 2] = HEAP32[($0 + 18704 | 0) >> 2] | 0;
    HEAP32[($1 + 4 | 0) >> 2] = $2;
    HEAP32[$1 >> 2] = 1;
    ImGui__DebugLog_28char_20const__2c_20____29(68464 | 0, $1 | 0);
    $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   }
   $3 = HEAP32[($4 + 892 | 0) >> 2] | 0;
   $4 = HEAP32[($0 + 18704 | 0) >> 2] | 0;
   HEAP32[($2 + 18704 | 0) >> 2] = $4;
   HEAP32[($2 + 18652 | 0) >> 2] = 0;
   HEAP32[($2 + 18656 | 0) >> 2] = $3;
   $3 = HEAP32[($2 + 18648 | 0) >> 2] | 0;
   HEAP32[(($3 + ($4 << 2 | 0) | 0) + 852 | 0) >> 2] = 0;
   $4 = $3 + ($4 << 4 | 0) | 0;
   i64toi32_i32$1 = $4 + 868 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4 + 860 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $0;
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 18716 | 0) >> 2] = 0;
   HEAP32[($0 + 18720 | 0) >> 2] = i64toi32_i32$0;
   $4 = 1;
   $11 = 1;
   HEAP8[($0 + 18713 | 0) >> 0] = $11;
   HEAP8[($0 + 18714 | 0) >> 0] = $11 >>> 8 | 0;
   i64toi32_i32$1 = $0 + 18724 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($0 + 18732 | 0) >> 2] = 0;
   label$8 : {
    if (HEAPU8[($2 + 18737 | 0) >> 0] | 0) {
     break label$8
    }
    $4 = (HEAPU8[($2 + 18713 | 0) >> 0] | 0 | 0) != (0 | 0);
   }
   HEAP8[($2 + 18712 | 0) >> 0] = $4;
  }
  __stack_pointer = $1 + 32 | 0;
 }
 
 function ImGui__NavMoveRequestSubmit_28int_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $7 = 0;
  $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  HEAP32[($4 + 18760 | 0) >> 2] = $1;
  HEAP32[($4 + 18756 | 0) >> 2] = $0;
  HEAP32[($4 + 18752 | 0) >> 2] = $0;
  HEAP8[($4 + 18736 | 0) >> 0] = 1;
  $7 = 1;
  HEAP8[($4 + 18737 | 0) >> 0] = $7;
  HEAP8[($4 + 18738 | 0) >> 0] = $7 >>> 8 | 0;
  HEAP32[($4 + 18744 | 0) >> 2] = $3;
  i64toi32_i32$1 = $4;
  i64toi32_i32$0 = 0;
  HEAP32[($4 + 18808 | 0) >> 2] = 0;
  HEAP32[($4 + 18812 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4;
  i64toi32_i32$0 = 0;
  HEAP32[($4 + 18852 | 0) >> 2] = 0;
  HEAP32[($4 + 18856 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4 + 18816 | 0) >> 2] = 0;
  HEAP32[($4 + 18848 | 0) >> 2] = 2139095039;
  HEAP32[($4 + 18836 | 0) >> 2] = 0;
  HEAP32[($4 + 18860 | 0) >> 2] = 0;
  i64toi32_i32$1 = $4 + 18840 | 0;
  i64toi32_i32$0 = 2139095039;
  HEAP32[i64toi32_i32$1 >> 2] = 2139095039;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4 + 18892 | 0) >> 2] = 2139095039;
  HEAP32[($4 + 18880 | 0) >> 2] = 0;
  HEAP32[($4 + 18740 | 0) >> 2] = ($2 >>> 6 | 0) & 16 | 0 | $2 | 0;
  HEAP32[($4 + 18748 | 0) >> 2] = HEAP32[($4 + 3552 | 0) >> 2] | 0;
  HEAP32[($4 + 18896 | 0) >> 2] = 0;
  i64toi32_i32$1 = $4 + 18884 | 0;
  i64toi32_i32$0 = 2139095039;
  HEAP32[i64toi32_i32$1 >> 2] = 2139095039;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4 + 18900 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4 + 18932 | 0;
  i64toi32_i32$0 = 2139095039;
  HEAP32[i64toi32_i32$1 >> 2] = 2139095039;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4 + 18924 | 0;
  i64toi32_i32$0 = 2139095039;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4 + 18804 | 0) >> 2] = 0;
  HEAP32[($4 + 18940 | 0) >> 2] = 0;
  i64toi32_i32$1 = $4 + 18944 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4 + 18976 | 0;
  i64toi32_i32$0 = 2139095039;
  HEAP32[i64toi32_i32$1 >> 2] = 2139095039;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4 + 18968 | 0;
  i64toi32_i32$0 = 2139095039;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($4 + 18712 | 0) >> 0] = 1;
 }
 
 function ImGui__NavCalcPreferredRefPos_28_29($0) {
  $0 = $0 | 0;
  var $5 = Math_fround(0), $3 = 0, $2 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $4 = 0, $9 = Math_fround(0), $8 = Math_fround(0), $1 = 0, $10 = Math_fround(0), $11 = Math_fround(0);
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  label$1 : {
   label$2 : {
    label$3 : {
     $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (HEAPU8[($2 + 18710 | 0) >> 0] | 0) {
      break label$3
     }
     if (!(HEAPU8[($2 + 18711 | 0) >> 0] | 0)) {
      break label$3
     }
     $3 = HEAP32[($2 + 18648 | 0) >> 2] | 0;
     if ($3) {
      break label$2
     }
    }
    $3 = $2 + 3520 | 0;
    $4 = Math_fround(HEAPF32[$3 >> 2]) >= Math_fround(-256.0e3) & Math_fround(HEAPF32[($2 + 3524 | 0) >> 2]) >= Math_fround(-256.0e3) | 0;
    $5 = Math_fround(Math_fround(HEAPF32[($2 + ($4 ? 3520 : 19352) | 0) >> 2]) + Math_fround(1.0));
    $6 = Math_fround(HEAPF32[(($4 ? $3 : $2 + 19352 | 0) + 4 | 0) >> 2]);
    break label$1;
   }
   $6 = Math_fround(HEAPF32[($3 + 312 | 0) >> 2]);
   $4 = $3 + ((HEAP32[($2 + 18704 | 0) >> 2] | 0) << 4 | 0) | 0;
   $5 = Math_fround($6 + Math_fround(HEAPF32[($4 + 872 | 0) >> 2]));
   $7 = Math_fround(HEAPF32[($3 + 308 | 0) >> 2]);
   $8 = Math_fround($7 + Math_fround(HEAPF32[($4 + 868 | 0) >> 2]));
   $9 = Math_fround($6 + Math_fround(HEAPF32[($4 + 864 | 0) >> 2]));
   $6 = Math_fround($7 + Math_fround(HEAPF32[($4 + 860 | 0) >> 2]));
   label$4 : {
    if ((HEAP32[($3 + 620 | 0) >> 2] | 0 | 0) == (HEAP32[($2 + 16016 | 0) >> 2] | 0 | 0)) {
     break label$4
    }
    label$5 : {
     if (Math_fround(HEAPF32[($3 + 184 | 0) >> 2]) != Math_fround(3402823466385288598117041.0e14)) {
      break label$5
     }
     if (Math_fround(HEAPF32[($3 + 188 | 0) >> 2]) == Math_fround(3402823466385288598117041.0e14)) {
      break label$4
     }
    }
    CalcNextScrollFromScrollTargetAndClamp_28ImGuiWindow__29($1 + 8 | 0 | 0, $3 | 0);
    $7 = Math_fround(Math_fround(HEAPF32[($3 + 172 | 0) >> 2]) - Math_fround(HEAPF32[($1 + 12 | 0) >> 2]));
    $5 = Math_fround($5 + $7);
    $10 = Math_fround(Math_fround(HEAPF32[($3 + 168 | 0) >> 2]) - Math_fround(HEAPF32[($1 + 8 | 0) >> 2]));
    $8 = Math_fround($8 + $10);
    $9 = Math_fround($9 + $7);
    $6 = Math_fround($6 + $10);
   }
   label$6 : {
    label$7 : {
     $3 = HEAP32[($3 + 44 | 0) >> 2] | 0;
     $7 = Math_fround(HEAPF32[($3 + 12 | 0) >> 2]);
     $10 = Math_fround($7 + Math_fround(HEAPF32[($3 + 20 | 0) >> 2]));
     $11 = Math_fround(HEAPF32[($2 + 14460 | 0) >> 2]);
     $9 = Math_fround($5 - $9);
     $5 = Math_fround($5 - ($11 < $9 ? $11 : $9));
     $5 = $5 < $7 ? $7 : $5 > $10 ? $10 : $5;
     if (!(Math_fround(Math_abs($5)) < Math_fround(2147483648.0))) {
      break label$7
     }
     $4 = ~~$5;
     break label$6;
    }
    $4 = -2147483648;
   }
   label$8 : {
    label$9 : {
     $5 = Math_fround(HEAPF32[($3 + 8 | 0) >> 2]);
     $7 = Math_fround($5 + Math_fround(HEAPF32[($3 + 16 | 0) >> 2]));
     $9 = Math_fround(Math_fround(HEAPF32[($2 + 14456 | 0) >> 2]) * Math_fround(4.0));
     $8 = Math_fround($8 - $6);
     $6 = Math_fround($6 + ($9 < $8 ? $9 : $8));
     $5 = $6 < $5 ? $5 : $6 > $7 ? $7 : $6;
     if (!(Math_fround(Math_abs($5)) < Math_fround(2147483648.0))) {
      break label$9
     }
     $2 = ~~$5;
     break label$8;
    }
    $2 = -2147483648;
   }
   $6 = Math_fround($4 | 0);
   $5 = Math_fround($2 | 0);
  }
  HEAPF32[($0 + 4 | 0) >> 2] = $6;
  HEAPF32[$0 >> 2] = $5;
  __stack_pointer = $1 + 16 | 0;
 }
 
 function ImGui__DockContextNewFrameUpdateUndocking_28ImGuiContext__29($0) {
  $0 = $0 | 0;
  var $3 = 0, $2 = 0, $7 = 0, $11 = 0, $4 = 0, $14 = 0, $8 = 0, $16 = Math_fround(0), $9 = 0, $1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $10 = 0, $13 = 0, $15 = Math_fround(0), $6 = 0, $5 = 0, $17 = Math_fround(0), $154 = 0, $157 = 0, $160 = 0, $12 = 0, $266 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  label$1 : {
   label$2 : {
    if ((HEAPU8[($0 + 8 | 0) >> 0] | 0) & 64 | 0) {
     break label$2
    }
    label$3 : {
     if ((HEAP32[($0 + 23340 | 0) >> 2] | 0 | 0) > (0 | 0)) {
      break label$3
     }
     if ((HEAP32[($0 + 23352 | 0) >> 2] | 0 | 0) < (1 | 0)) {
      break label$1
     }
    }
    label$4 : {
     $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     $3 = HEAP32[($2 + 23420 | 0) >> 2] | 0;
     if (!$3) {
      break label$4
     }
     $3 = $3 + 4 | 0;
     $4 = $3 + (HEAP32[($2 + 23412 | 0) >> 2] | 0) | 0;
     label$5 : while (1) {
      HEAP32[($3 + 20 | 0) >> 2] = 0;
      $3 = $3 + (HEAP32[($3 + -4 | 0) >> 2] | 0) | 0;
      if (($3 | 0) != ($4 | 0)) {
       continue label$5
      }
      break label$5;
     };
    }
    label$6 : {
     if ((HEAP32[($2 + 16044 | 0) >> 2] | 0 | 0) < (1 | 0)) {
      break label$6
     }
     $3 = 0;
     $4 = $2 + 23536 | 0;
     label$7 : while (1) {
      ImGui__DockContextProcessUndockWindow_28ImGuiContext__2c_20ImGuiWindow__2c_20bool_29(HEAP32[$4 >> 2] | 0 | 0, HEAP32[((HEAP32[($2 + 16052 | 0) >> 2] | 0) + ($3 << 2 | 0) | 0) >> 2] | 0 | 0, 1 | 0);
      $3 = $3 + 1 | 0;
      if (($3 | 0) < (HEAP32[($2 + 16044 | 0) >> 2] | 0 | 0)) {
       continue label$7
      }
      break label$7;
     };
    }
    ImGui__DockBuilderRemoveNodeChildNodes_28unsigned_20int_29(0 | 0);
    break label$1;
   }
   label$8 : {
    if (!(HEAPU8[($0 + 96 | 0) >> 0] | 0)) {
     break label$8
    }
    $4 = HEAP32[($0 + 23340 | 0) >> 2] | 0;
    if (($4 | 0) < (1 | 0)) {
     break label$8
    }
    $3 = 0;
    label$9 : while (1) {
     label$10 : {
      $2 = HEAP32[(((HEAP32[($0 + 23348 | 0) >> 2] | 0) + ($3 << 3 | 0) | 0) + 4 | 0) >> 2] | 0;
      if (!$2) {
       break label$10
      }
      if (HEAP32[($2 + 24 | 0) >> 2] | 0) {
       break label$10
      }
      if (!(HEAP32[($2 + 28 | 0) >> 2] | 0)) {
       break label$10
      }
      ImGui__DockBuilderRemoveNodeChildNodes_28unsigned_20int_29(HEAP32[$2 >> 2] | 0 | 0);
      $4 = HEAP32[($0 + 23340 | 0) >> 2] | 0;
     }
     $3 = $3 + 1 | 0;
     if (($3 | 0) < ($4 | 0)) {
      continue label$9
     }
     break label$9;
    };
   }
   label$11 : {
    if (!(HEAPU8[($0 + 23376 | 0) >> 0] | 0)) {
     break label$11
    }
    ImGui__DockContextRebuildNodes_28ImGuiContext__29($0 | 0);
    HEAP8[($0 + 23376 | 0) >> 0] = 0;
   }
   if ((HEAP32[($0 + 23352 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$1
   }
   $5 = $0 + 23536 | 0;
   $6 = 0;
   label$12 : while (1) {
    label$13 : {
     $3 = (HEAP32[($0 + 23360 | 0) >> 2] | 0) + Math_imul($6, 36) | 0;
     if ((HEAP32[$3 >> 2] | 0 | 0) != (2 | 0)) {
      break label$13
     }
     label$14 : {
      $2 = HEAP32[($3 + 28 | 0) >> 2] | 0;
      if (!$2) {
       break label$14
      }
      ImGui__DockContextProcessUndockWindow_28ImGuiContext__2c_20ImGuiWindow__2c_20bool_29(HEAP32[$5 >> 2] | 0 | 0, $2 | 0, 1 | 0);
      break label$13;
     }
     $7 = HEAP32[($3 + 32 | 0) >> 2] | 0;
     if (!$7) {
      break label$13
     }
     label$15 : {
      if (!((HEAPU8[$5 >> 0] | 0) & 64 | 0)) {
       break label$15
      }
      HEAP32[($1 + 16 | 0) >> 2] = HEAP32[$7 >> 2] | 0;
      ImGui__DebugLog_28char_20const__2c_20____29(69495 | 0, $1 + 16 | 0 | 0);
     }
     label$16 : {
      label$17 : {
       label$18 : {
        $3 = HEAP32[($7 + 24 | 0) >> 2] | 0;
        if (!$3) {
         break label$18
        }
        if (!((HEAPU8[($7 + 17 | 0) >> 0] | 0) & 8 | 0)) {
         break label$17
        }
       }
       $8 = ImGui__DockContextAddNode_28ImGuiContext__2c_20unsigned_20int_29($0 | 0, 0 | 0) | 0;
       i64toi32_i32$0 = HEAP32[($7 + 52 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($7 + 56 | 0) >> 2] | 0;
       $154 = i64toi32_i32$0;
       i64toi32_i32$0 = $8;
       HEAP32[($8 + 52 | 0) >> 2] = $154;
       HEAP32[($8 + 56 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$1 = HEAP32[($7 + 60 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($7 + 64 | 0) >> 2] | 0;
       $157 = i64toi32_i32$1;
       i64toi32_i32$1 = $8;
       HEAP32[($8 + 60 | 0) >> 2] = $157;
       HEAP32[($8 + 64 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$0 = HEAP32[($7 + 68 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($7 + 72 | 0) >> 2] | 0;
       $160 = i64toi32_i32$0;
       i64toi32_i32$0 = $8;
       HEAP32[($8 + 68 | 0) >> 2] = $160;
       HEAP32[($8 + 72 | 0) >> 2] = i64toi32_i32$1;
       ImGui__DockNodeMoveWindows_28ImGuiDockNode__2c_20ImGuiDockNode__29($8 | 0, $7 | 0);
       $9 = HEAP32[$8 >> 2] | 0;
       $2 = HEAP32[$7 >> 2] | 0;
       label$19 : {
        $10 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
        if (!((HEAPU8[($10 + 23536 | 0) >> 0] | 0) & 64 | 0)) {
         break label$19
        }
        HEAP32[($1 + 4 | 0) >> 2] = $9;
        HEAP32[$1 >> 2] = $2;
        ImGui__DebugLog_28char_20const__2c_20____29(69253 | 0, $1 | 0);
       }
       label$20 : {
        $11 = HEAP32[($10 + 16044 | 0) >> 2] | 0;
        if (($11 | 0) < (1 | 0)) {
         break label$20
        }
        $12 = $11 & 1 | 0;
        $4 = HEAP32[($10 + 16052 | 0) >> 2] | 0;
        $3 = 0;
        label$21 : {
         if (($11 | 0) == (1 | 0)) {
          break label$21
         }
         $13 = $11 & -2 | 0;
         $3 = 0;
         $11 = 0;
         label$22 : while (1) {
          label$23 : {
           $7 = $3 << 2 | 0;
           $14 = HEAP32[($4 + $7 | 0) >> 2] | 0;
           if ((HEAP32[($14 + 940 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
            break label$23
           }
           if (HEAP32[($14 + 932 | 0) >> 2] | 0) {
            break label$23
           }
           HEAP32[($14 + 940 | 0) >> 2] = $9;
          }
          label$24 : {
           $7 = HEAP32[($4 + ($7 | 4 | 0) | 0) >> 2] | 0;
           if ((HEAP32[($7 + 940 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
            break label$24
           }
           if (HEAP32[($7 + 932 | 0) >> 2] | 0) {
            break label$24
           }
           HEAP32[($7 + 940 | 0) >> 2] = $9;
          }
          $3 = $3 + 2 | 0;
          $11 = $11 + 2 | 0;
          if (($11 | 0) != ($13 | 0)) {
           continue label$22
          }
          break label$22;
         };
        }
        if (!$12) {
         break label$20
        }
        $3 = HEAP32[($4 + ($3 << 2 | 0) | 0) >> 2] | 0;
        if ((HEAP32[($3 + 940 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
         break label$20
        }
        if (HEAP32[($3 + 932 | 0) >> 2] | 0) {
         break label$20
        }
        HEAP32[($3 + 940 | 0) >> 2] = $9;
       }
       label$25 : {
        $3 = HEAP32[($10 + 23420 | 0) >> 2] | 0;
        if ($3) {
         break label$25
        }
        $7 = $8;
        break label$16;
       }
       $3 = $3 + 4 | 0;
       $4 = $3 + (HEAP32[($10 + 23412 | 0) >> 2] | 0) | 0;
       label$26 : while (1) {
        label$27 : {
         if ((HEAP32[($3 + 20 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
          break label$27
         }
         HEAP32[($3 + 20 | 0) >> 2] = $9;
        }
        $3 = $3 + (HEAP32[($3 + -4 | 0) >> 2] | 0) | 0;
        if (($3 | 0) != ($4 | 0)) {
         continue label$26
        }
        break label$26;
       };
       $7 = $8;
       break label$16;
      }
      $266 = $3 + 28 | 0;
      $3 = HEAP32[($3 + 28 | 0) >> 2] | 0;
      HEAP32[($266 + ((($3 | 0) != ($7 | 0)) << 2 | 0) | 0) >> 2] = 0;
      $2 = HEAP32[($7 + 24 | 0) >> 2] | 0;
      ImGui__DockNodeTreeMerge_28ImGuiContext__2c_20ImGuiDockNode__2c_20ImGuiDockNode__29($0 | 0, $2 | 0, HEAP32[(($2 + ((($3 | 0) == ($7 | 0)) << 2 | 0) | 0) + 28 | 0) >> 2] | 0 | 0);
      $3 = HEAP32[($7 + 24 | 0) >> 2] | 0;
      HEAP16[($3 + 156 | 0) >> 1] = (HEAPU16[($3 + 156 | 0) >> 1] | 0) & 65087 | 0 | 128 | 0;
      HEAP32[($7 + 24 | 0) >> 2] = 0;
     }
     label$28 : {
      if ((HEAP32[($7 + 36 | 0) >> 2] | 0 | 0) < (1 | 0)) {
       break label$28
      }
      $11 = 0;
      label$29 : while (1) {
       $2 = HEAP32[((HEAP32[($7 + 44 | 0) >> 2] | 0) + ($11 << 2 | 0) | 0) >> 2] | 0;
       $9 = (HEAP32[($2 + 8 | 0) >> 2] | 0) & -16777217 | 0;
       HEAP32[($2 + 8 | 0) >> 2] = $9;
       label$30 : {
        $14 = HEAP32[($2 + 820 | 0) >> 2] | 0;
        if (!$14) {
         break label$30
        }
        $13 = HEAP32[($14 + 444 | 0) >> 2] | 0;
        $8 = HEAP32[($14 + 436 | 0) >> 2] | 0;
        $4 = $13 + ($8 << 2 | 0) | 0;
        $3 = $13;
        label$31 : {
         if (($8 | 0) < (1 | 0)) {
          break label$31
         }
         label$32 : while (1) {
          if ((HEAP32[$3 >> 2] | 0 | 0) == ($2 | 0)) {
           break label$31
          }
          $3 = $3 + 4 | 0;
          if ($3 >>> 0 < $4 >>> 0) {
           continue label$32
          }
          break label$32;
         };
        }
        if ($3 >>> 0 >= $4 >>> 0) {
         break label$30
        }
        memmove($3 | 0, $3 + 4 | 0 | 0, ($8 + ((($3 - $13 | 0) ^ -1 | 0) >>> 2 | 0) | 0) << 2 | 0 | 0) | 0;
        HEAP32[($14 + 436 | 0) >> 2] = (HEAP32[($14 + 436 | 0) >> 2] | 0) + -1 | 0;
        $9 = HEAP32[($2 + 8 | 0) >> 2] | 0;
       }
       HEAP32[($2 + 820 | 0) >> 2] = 0;
       HEAP32[($2 + 844 | 0) >> 2] = $2;
       HEAP32[($2 + 840 | 0) >> 2] = $2;
       HEAP32[($2 + 836 | 0) >> 2] = $2;
       HEAP32[($2 + 832 | 0) >> 2] = $2;
       HEAP32[($2 + 828 | 0) >> 2] = $2;
       $3 = $2;
       label$33 : {
        if (!($9 & 8388608 | 0)) {
         break label$33
        }
        label$34 : while (1) {
         $3 = HEAP32[($3 + 820 | 0) >> 2] | 0;
         if ((HEAPU8[($3 + 10 | 0) >> 0] | 0) & 128 | 0) {
          continue label$34
         }
         break label$34;
        };
        HEAP32[($2 + 844 | 0) >> 2] = $3;
       }
       $11 = $11 + 1 | 0;
       if (($11 | 0) < (HEAP32[($7 + 36 | 0) >> 2] | 0 | 0)) {
        continue label$29
       }
       break label$29;
      };
     }
     $2 = $7 + 158 | 0;
     $4 = (HEAPU16[($7 + 156 | 0) >> 1] | 0 | ((HEAPU8[$2 >> 0] | 0) << 16 | 0) | 0) & 16777152 | 0;
     HEAP16[($7 + 156 | 0) >> 1] = $4 | 9 | 0;
     label$35 : {
      label$36 : {
       $11 = HEAP32[((HEAP32[(HEAP32[($7 + 44 | 0) >> 2] | 0) >> 2] | 0) + 44 | 0) >> 2] | 0;
       if ($11) {
        break label$36
       }
       $11 = HEAP32[($7 + 64 | 0) >> 2] | 0;
       $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
       $14 = HEAP32[($7 + 60 | 0) >> 2] | 0;
       break label$35;
      }
      label$37 : {
       label$38 : {
        $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
        if ((HEAPU8[($3 + 15477 | 0) >> 0] | 0) & 4 | 0) {
         break label$38
        }
        $14 = $11 + 36 | 0;
        $11 = $11 + 32 | 0;
        break label$37;
       }
       label$39 : {
        label$40 : {
         $11 = HEAP16[($11 + 104 | 0) >> 1] | 0;
         if (($11 | 0) < (0 | 0)) {
          break label$40
         }
         if ((HEAP32[($3 + 14348 | 0) >> 2] | 0 | 0) <= ($11 | 0)) {
          break label$40
         }
         $11 = (HEAP32[($3 + 14356 | 0) >> 2] | 0) + Math_imul($11, 36) | 0;
         break label$39;
        }
        $11 = $3 + 18608 | 0;
       }
       $14 = $11 + 28 | 0;
       $11 = $11 + 24 | 0;
      }
      $15 = Math_fround(HEAPF32[($7 + 64 | 0) >> 2]);
      label$41 : {
       label$42 : {
        $16 = Math_fround(Math_fround(HEAPF32[$14 >> 2]) * Math_fround(.8999999761581421));
        if (!(Math_fround(Math_abs($16)) < Math_fround(2147483648.0))) {
         break label$42
        }
        $14 = ~~$16;
        break label$41;
       }
       $14 = -2147483648;
      }
      $16 = Math_fround($14 | 0);
      $16 = $15 < $16 ? $15 : $16;
      $15 = Math_fround(HEAPF32[($7 + 60 | 0) >> 2]);
      label$43 : {
       label$44 : {
        $17 = Math_fround(Math_fround(HEAPF32[$11 >> 2]) * Math_fround(.8999999761581421));
        if (!(Math_fround(Math_abs($17)) < Math_fround(2147483648.0))) {
         break label$44
        }
        $14 = ~~$17;
        break label$43;
       }
       $14 = -2147483648;
      }
      $11 = (wasm2js_scratch_store_f32($16), wasm2js_scratch_load_i32(2));
      $16 = Math_fround($14 | 0);
      $14 = (wasm2js_scratch_store_f32($15 < $16 ? $15 : $16), wasm2js_scratch_load_i32(2));
     }
     HEAP32[($7 + 60 | 0) >> 2] = $14;
     $4 = $4 | 131081 | 0;
     HEAP16[($7 + 156 | 0) >> 1] = $4;
     HEAP32[($7 + 64 | 0) >> 2] = $11;
     HEAP8[$2 >> 0] = $4 >>> 16 | 0;
     if (!(Math_fround(HEAPF32[($3 + 23384 | 0) >> 2]) <= Math_fround(0.0))) {
      break label$13
     }
     HEAPF32[($3 + 23384 | 0) >> 2] = Math_fround(HEAPF32[($3 + 28 | 0) >> 2]);
    }
    $6 = $6 + 1 | 0;
    if (($6 | 0) < (HEAP32[($0 + 23352 | 0) >> 2] | 0 | 0)) {
     continue label$12
    }
    break label$12;
   };
  }
  __stack_pointer = $1 + 32 | 0;
 }
 
 function LockWheelingWindow_28ImGuiWindow__2c_20float_29($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $3 = 0, $2 = 0, i64toi32_i32$1 = 0, $4 = 0, i64toi32_i32$2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ($0) {
     break label$2
    }
    $1 = Math_fround(0.0);
    break label$1;
   }
   $1 = Math_fround(Math_fround(Math_fround(Math_abs($1)) * Math_fround(.699999988079071)) + Math_fround(HEAPF32[($3 + 16148 | 0) >> 2]));
   $1 = $1 < Math_fround(.699999988079071) ? $1 : Math_fround(.699999988079071);
  }
  HEAPF32[($3 + 16148 | 0) >> 2] = $1;
  label$3 : {
   if ((HEAP32[($3 + 16132 | 0) >> 2] | 0 | 0) == ($0 | 0)) {
    break label$3
   }
   label$4 : {
    if (!((HEAPU8[($3 + 23536 | 0) >> 0] | 0) & 32 | 0)) {
     break label$4
    }
    label$5 : {
     label$6 : {
      if ($0) {
       break label$6
      }
      $4 = 67605;
      break label$5;
     }
     $4 = HEAP32[$0 >> 2] | 0;
    }
    HEAP32[$2 >> 2] = $4;
    ImGui__DebugLog_28char_20const__2c_20____29(70433 | 0, $2 | 0);
   }
   HEAP32[($3 + 16132 | 0) >> 2] = $0;
   i64toi32_i32$2 = $3 + 3520 | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   HEAP32[($3 + 16136 | 0) >> 2] = HEAP32[i64toi32_i32$2 >> 2] | 0;
   HEAP32[($3 + 16140 | 0) >> 2] = i64toi32_i32$1;
   if ($0) {
    break label$3
   }
   i64toi32_i32$1 = 0;
   HEAP32[($3 + 16160 | 0) >> 2] = 0;
   HEAP32[($3 + 16164 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($3 + 16144 | 0) >> 2] = -1;
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function ImGui__DockContextNewFrameUpdateDocking_28ImGuiContext__29($0) {
  $0 = $0 | 0;
  var $2 = 0, $3 = 0, $5 = 0, $1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $4 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  label$1 : {
   if (!((HEAPU8[($0 + 8 | 0) >> 0] | 0) & 64 | 0)) {
    break label$1
   }
   HEAP32[($0 + 23628 | 0) >> 2] = 0;
   label$2 : {
    $2 = HEAP32[($0 + 16124 | 0) >> 2] | 0;
    if (!$2) {
     break label$2
    }
    label$3 : {
     label$4 : {
      $3 = HEAP32[($2 + 936 | 0) >> 2] | 0;
      if (!$3) {
       break label$4
      }
      i64toi32_i32$2 = $0 + 3520 | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      HEAP32[$1 >> 2] = $4;
      HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[($1 + 8 | 0) >> 2] = $4;
      HEAP32[($1 + 12 | 0) >> 2] = i64toi32_i32$1;
      $2 = ImGui__DockNodeTreeFindVisibleNodeByPos_28ImGuiDockNode__2c_20ImVec2_29($3 | 0, $1 | 0) | 0;
      break label$3;
     }
     $2 = HEAP32[((HEAP32[($2 + 828 | 0) >> 2] | 0) + 932 | 0) >> 2] | 0;
     if (!$2) {
      break label$2
     }
    }
    HEAP32[($0 + 23628 | 0) >> 2] = $2;
   }
   label$5 : {
    $3 = HEAP32[($0 + 23352 | 0) >> 2] | 0;
    if (($3 | 0) < (1 | 0)) {
     break label$5
    }
    $2 = 0;
    label$6 : while (1) {
     label$7 : {
      $5 = (HEAP32[($0 + 23360 | 0) >> 2] | 0) + Math_imul($2, 36) | 0;
      if ((HEAP32[$5 >> 2] | 0 | 0) != (1 | 0)) {
       break label$7
      }
      ImGui__DockContextProcessDock_28ImGuiContext__2c_20ImGuiDockRequest__29($0 | 0, $5 | 0);
      $3 = HEAP32[($0 + 23352 | 0) >> 2] | 0;
     }
     $2 = $2 + 1 | 0;
     if (($2 | 0) < ($3 | 0)) {
      continue label$6
     }
     break label$6;
    };
   }
   label$8 : {
    if ((HEAP32[($0 + 23356 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$8
    }
    label$9 : {
     $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$2) {
      break label$9
     }
     $2 = $2 + 184 | 0;
     HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1 | 0;
    }
    $2 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](0, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
    label$10 : {
     $3 = HEAP32[($0 + 23360 | 0) >> 2] | 0;
     if (!$3) {
      break label$10
     }
     __memcpy($2 | 0, $3 | 0, Math_imul(HEAP32[($0 + 23352 | 0) >> 2] | 0, 36) | 0) | 0;
     label$11 : {
      $3 = HEAP32[($0 + 23360 | 0) >> 2] | 0;
      if (!$3) {
       break label$11
      }
      $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$5) {
       break label$11
      }
      $5 = $5 + 184 | 0;
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1 | 0;
     }
     FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($3, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    }
    HEAP32[($0 + 23356 | 0) >> 2] = 0;
    HEAP32[($0 + 23360 | 0) >> 2] = $2;
   }
   $2 = 0;
   HEAP32[($0 + 23352 | 0) >> 2] = 0;
   $5 = HEAP32[($0 + 23340 | 0) >> 2] | 0;
   if (($5 | 0) < (1 | 0)) {
    break label$1
   }
   label$12 : while (1) {
    label$13 : {
     $3 = HEAP32[(((HEAP32[($0 + 23348 | 0) >> 2] | 0) + ($2 << 3 | 0) | 0) + 4 | 0) >> 2] | 0;
     if (!$3) {
      break label$13
     }
     if (HEAP32[($3 + 24 | 0) >> 2] | 0) {
      break label$13
     }
     if ((HEAP32[($3 + 16 | 0) >> 2] | 0) & 1024 | 0) {
      break label$13
     }
     ImGui__DockNodeUpdate_28ImGuiDockNode__29($3 | 0);
     $5 = HEAP32[($0 + 23340 | 0) >> 2] | 0;
    }
    $2 = $2 + 1 | 0;
    if (($2 | 0) < ($5 | 0)) {
     continue label$12
    }
    break label$12;
   };
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function ImGui__BeginTooltipEx_28int_2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $6 = 0, $2 = 0, $7 = 0, $8 = 0, $5 = 0, $9 = 0, $10 = 0, i64toi32_i32$1 = 0, $4 = Math_fround(0), $121 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (HEAPU8[($3 + 19041 | 0) >> 0] | 0) {
     break label$2
    }
    if (!(HEAPU8[($3 + 19042 | 0) >> 0] | 0)) {
     break label$1
    }
   }
   i64toi32_i32$1 = $3 + 18368 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
   $0 = 1;
   HEAP8[($3 + 18400 | 0) >> 0] = 1;
   HEAP32[($3 + 18344 | 0) >> 2] = 1;
   HEAP32[($3 + 18340 | 0) >> 2] = HEAP32[($3 + 18340 | 0) >> 2] | 0 | 65 | 0;
   HEAPF32[($3 + 18428 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3 + 14672 | 0) >> 2]) * Math_fround(.6000000238418579));
   $4 = Math_fround(HEAPF32[($3 + 14580 | 0) >> 2]);
   HEAPF32[($3 + 18364 | 0) >> 2] = Math_fround(Math_fround($4 * Math_fround(8.0)) + Math_fround(HEAPF32[($3 + 3524 | 0) >> 2]));
   HEAPF32[($3 + 18360 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3 + 3520 | 0) >> 2]) + Math_fround($4 * Math_fround(16.0)));
  }
  HEAP32[($2 + 16 | 0) >> 2] = HEAP16[($3 + 23274 | 0) >> 1] | 0;
  ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($2 + 32 | 0 | 0, 16 | 0, 67150 | 0, $2 + 16 | 0 | 0) | 0;
  label$3 : {
   if (!($0 & 1 | 0)) {
    break label$3
   }
   $5 = 0;
   label$4 : {
    $6 = HEAPU8[($2 + 32 | 0) >> 0] | 0;
    if (!$6) {
     break label$4
    }
    $7 = $2 + 32 | 0;
    $0 = -1;
    label$5 : while (1) {
     $8 = $6 & 255 | 0;
     $6 = HEAPU8[($7 + 1 | 0) >> 0] | 0;
     label$6 : {
      if (($8 | 0) != (35 | 0)) {
       break label$6
      }
      if (($6 & 255 | 0 | 0) != (35 | 0)) {
       break label$6
      }
      $0 = (HEAPU8[($7 + 2 | 0) >> 0] | 0 | 0) == (35 | 0) ? -1 : $0;
     }
     $7 = $7 + 1 | 0;
     $0 = ($0 >>> 8 | 0) ^ (HEAP32[(((($0 & 255 | 0) ^ $8 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
     if ($6 & 255 | 0) {
      continue label$5
     }
     break label$5;
    };
    $5 = $0 ^ -1 | 0;
   }
   $6 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $9 = HEAP32[($6 + 16100 | 0) >> 2] | 0;
   $0 = $9;
   label$7 : {
    $10 = HEAP32[($6 + 16092 | 0) >> 2] | 0;
    if (!$10) {
     break label$7
    }
    $0 = $9;
    $6 = $10;
    label$8 : while (1) {
     $7 = $6 >>> 1 | 0;
     $8 = $0 + ($7 << 3 | 0) | 0;
     $121 = $8 + 8 | 0;
     $8 = (HEAP32[$8 >> 2] | 0) >>> 0 < $5 >>> 0;
     $0 = $8 ? $121 : $0;
     $6 = $8 ? $6 + ($7 ^ -1 | 0) | 0 : $7;
     if ($6) {
      continue label$8
     }
     break label$8;
    };
   }
   if (($0 | 0) == ($9 + ($10 << 3 | 0) | 0 | 0)) {
    break label$3
   }
   if ((HEAP32[$0 >> 2] | 0 | 0) != ($5 | 0)) {
    break label$3
   }
   $0 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   if (!$0) {
    break label$3
   }
   if (!(HEAPU8[($0 + 219 | 0) >> 0] | 0)) {
    break label$3
   }
   HEAP8[($0 + 256 | 0) >> 0] = 1;
   HEAP8[($0 + 226 | 0) >> 0] = 1;
   $0 = (HEAPU16[($3 + 23274 | 0) >> 1] | 0) + 1 | 0;
   HEAP16[($3 + 23274 | 0) >> 1] = $0;
   HEAP32[$2 >> 2] = $0 << 16 >> 16;
   ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($2 + 32 | 0 | 0, 16 | 0, 67150 | 0, $2 | 0) | 0;
  }
  ImGui__Begin_28char_20const__2c_20bool__2c_20int_29($2 + 32 | 0 | 0, 0 | 0, $1 | 36438855 | 0 | 0) | 0;
  __stack_pointer = $2 + 48 | 0;
 }
 
 function ImGui__End_28_29() {
  var $2 = 0, $1 = 0, $0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3 = 0, i64toi32_i32$2 = 0, $6 = Math_fround(0), $5 = 0, $7 = Math_fround(0), $8 = 0, $4 = 0, $4$hi = 0, $47 = 0, $161 = 0, $171 = 0, $176 = 0, $181 = 0, $186 = 0, $191 = 0, $196 = 0;
  $0 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $1 = HEAP32[($0 + 16116 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($0 + 16080 | 0) >> 2] | 0 | 0) > (1 | 0)) {
     break label$2
    }
    if (HEAPU8[($0 + 16033 | 0) >> 0] | 0) {
     break label$1
    }
   }
   $2 = $0;
   label$3 : {
    if (!(HEAP32[($1 + 452 | 0) >> 2] | 0)) {
     break label$3
    }
    ImGui__EndColumns_28_29();
    $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   }
   label$4 : {
    if ((HEAPU8[($1 + 11 | 0) >> 0] | 0) & 32 | 0) {
     break label$4
    }
    $2 = HEAP32[($2 + 16116 | 0) >> 2] | 0;
    HEAP8[($2 + 221 | 0) >> 0] = 1;
    ImDrawList__PopClipRect_28_29(HEAP32[($2 + 672 | 0) >> 2] | 0 | 0);
    $3 = HEAP32[($2 + 672 | 0) >> 2] | 0;
    $3 = (((HEAP32[($3 + 60 | 0) >> 2] | 0) << 4 | 0) + (HEAP32[($3 + 68 | 0) >> 2] | 0) | 0) + -16 | 0;
    i64toi32_i32$2 = $3;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $4 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
    $47 = i64toi32_i32$1;
    i64toi32_i32$1 = $2 + 588 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $47;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$1 = $2;
    HEAP32[($2 + 580 | 0) >> 2] = $4;
    HEAP32[($2 + 584 | 0) >> 2] = i64toi32_i32$0;
    $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   }
   $5 = HEAP32[($2 + 18512 | 0) >> 2] | 0;
   $3 = $5 + -1 | 0;
   HEAP32[($2 + 18512 | 0) >> 2] = $3;
   label$5 : {
    label$6 : {
     if ($3) {
      break label$6
     }
     $3 = 0;
     break label$5;
    }
    $3 = HEAP32[((($5 << 2 | 0) + (HEAP32[($2 + 18520 | 0) >> 2] | 0) | 0) + -8 | 0) >> 2] | 0;
   }
   HEAP32[($2 + 18248 | 0) >> 2] = $3;
   label$7 : {
    if ((HEAPU8[($1 + 11 | 0) >> 0] | 0) & 1 | 0) {
     break label$7
    }
    ImGui__LogFinish_28_29();
   }
   label$8 : {
    if (!(HEAPU8[($1 + 357 | 0) >> 0] | 0)) {
     break label$8
    }
    $2 = HEAP32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 16116 | 0) >> 2] | 0;
    HEAP8[($2 + 357 | 0) >> 0] = 0;
    $3 = $2 + 316 | 0;
    $6 = Math_fround(HEAPF32[$3 >> 2]);
    $7 = Math_fround(HEAPF32[($2 + 292 | 0) >> 2]);
    HEAPF32[$3 >> 2] = $6 >= $7 ? $6 : $7;
    $3 = $2 + 320 | 0;
    $6 = Math_fround(HEAPF32[$3 >> 2]);
    $7 = Math_fround(HEAPF32[($2 + 296 | 0) >> 2]);
    HEAPF32[$3 >> 2] = $6 >= $7 ? $6 : $7;
   }
   label$9 : {
    $2 = HEAP32[($1 + 932 | 0) >> 2] | 0;
    if (!$2) {
     break label$9
    }
    if (!((HEAPU8[($1 + 905 | 0) >> 0] | 0) & 4 | 0)) {
     break label$9
    }
    $2 = HEAP32[($2 + 112 | 0) >> 2] | 0;
    if (!$2) {
     break label$9
    }
    $6 = Math_fround(HEAPF32[($1 + 112 | 0) >> 2]);
    $7 = Math_fround(HEAPF32[($1 + 316 | 0) >> 2]);
    HEAPF32[($2 + 320 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 320 | 0) >> 2]) + Math_fround(HEAPF32[($1 + 116 | 0) >> 2])) - Math_fround(HEAPF32[($2 + 116 | 0) >> 2]));
    HEAPF32[($2 + 316 | 0) >> 2] = Math_fround(Math_fround($7 + $6) - Math_fround(HEAPF32[($2 + 112 | 0) >> 2]));
   }
   $5 = HEAP32[($0 + 16088 | 0) >> 2] | 0;
   $8 = HEAP32[($0 + 16080 | 0) >> 2] | 0;
   $3 = $8 + -1 | 0;
   $2 = $5 + Math_imul($3, 84) | 0;
   i64toi32_i32$2 = $2;
   i64toi32_i32$0 = HEAP32[($2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($2 + 8 | 0) >> 2] | 0;
   $161 = i64toi32_i32$0;
   i64toi32_i32$0 = $0;
   HEAP32[($0 + 18280 | 0) >> 2] = $161;
   HEAP32[($0 + 18284 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($0 + 18336 | 0) >> 2] = HEAP32[($2 + 60 | 0) >> 2] | 0;
   i64toi32_i32$2 = $2 + 52 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $171 = i64toi32_i32$1;
   i64toi32_i32$1 = $0 + 18328 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $171;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $2 + 44 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $176 = i64toi32_i32$0;
   i64toi32_i32$0 = $0 + 18320 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $176;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $2 + 36 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $181 = i64toi32_i32$1;
   i64toi32_i32$1 = $0 + 18312 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $181;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $2 + 28 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $186 = i64toi32_i32$0;
   i64toi32_i32$0 = $0 + 18304 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $186;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $2 + 20 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $191 = i64toi32_i32$1;
   i64toi32_i32$1 = $0 + 18296 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $191;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $2 + 12 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $196 = i64toi32_i32$0;
   i64toi32_i32$0 = $0 + 18288 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $196;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   label$10 : {
    $1 = HEAP32[($1 + 8 | 0) >> 2] | 0;
    if (!($1 & 268435456 | 0)) {
     break label$10
    }
    HEAP32[($0 + 18572 | 0) >> 2] = (HEAP32[($0 + 18572 | 0) >> 2] | 0) + -1 | 0;
   }
   label$11 : {
    if (!($1 & 67108864 | 0)) {
     break label$11
    }
    HEAP32[($0 + 18560 | 0) >> 2] = (HEAP32[($0 + 18560 | 0) >> 2] | 0) + -1 | 0;
   }
   HEAP32[($0 + 16080 | 0) >> 2] = $3;
   label$12 : {
    label$13 : {
     label$14 : {
      if ($3) {
       break label$14
      }
      $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      HEAP32[($1 + 16116 | 0) >> 2] = 0;
      break label$13;
     }
     $3 = 0;
     $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     $2 = HEAP32[((Math_imul($8, 84) + $5 | 0) + -168 | 0) >> 2] | 0;
     HEAP32[($1 + 16116 | 0) >> 2] = $2;
     if (!$2) {
      break label$13
     }
     label$15 : {
      $5 = HEAP32[($2 + 456 | 0) >> 2] | 0;
      if (($5 | 0) == (-1 | 0)) {
       break label$15
      }
      $3 = (HEAP32[($1 + 19228 | 0) >> 2] | 0) + Math_imul($5, 488) | 0;
     }
     HEAP32[($1 + 19200 | 0) >> 2] = $3;
     $6 = Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 15492 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 660 | 0) >> 2])) * Math_fround(HEAPF32[($2 + 664 | 0) >> 2]));
     label$16 : {
      $2 = HEAP32[($2 + 820 | 0) >> 2] | 0;
      if (!$2) {
       break label$16
      }
      $6 = Math_fround($6 * Math_fround(HEAPF32[($2 + 660 | 0) >> 2]));
     }
     HEAPF32[($1 + 15488 | 0) >> 2] = $6;
     HEAPF32[($1 + 15508 | 0) >> 2] = $6;
     break label$12;
    }
    HEAP32[($1 + 19200 | 0) >> 2] = 0;
   }
   $0 = HEAP32[($0 + 16116 | 0) >> 2] | 0;
   if (!$0) {
    break label$1
   }
   label$17 : {
    $0 = HEAP32[($0 + 44 | 0) >> 2] | 0;
    if ($0) {
     break label$17
    }
    if (!(HEAP32[($1 + 18592 | 0) >> 2] | 0)) {
     break label$1
    }
    i64toi32_i32$0 = $1;
    i64toi32_i32$1 = 0;
    HEAP32[($1 + 18588 | 0) >> 2] = 1065353216;
    HEAP32[($1 + 18592 | 0) >> 2] = i64toi32_i32$1;
    return;
   }
   HEAP32[($0 + 76 | 0) >> 2] = HEAP32[($1 + 16016 | 0) >> 2] | 0;
   if ((HEAP32[($1 + 18592 | 0) >> 2] | 0 | 0) == ($0 | 0)) {
    break label$1
   }
   $6 = Math_fround(HEAPF32[($0 + 40 | 0) >> 2]);
   HEAP32[($1 + 18592 | 0) >> 2] = $0;
   HEAPF32[($1 + 18588 | 0) >> 2] = $6;
   $1 = HEAP32[($1 + 14320 | 0) >> 2] | 0;
   if (!$1) {
    break label$1
   }
   FUNCTION_TABLE[$1 | 0]($0);
  }
 }
 
 function ImGui__Begin_28char_20const__2c_20bool__2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $7 = 0, $8 = 0, $13 = Math_fround(0), $4 = 0, $6 = 0, i64toi32_i32$1 = 0, $3 = 0, $15 = Math_fround(0), i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $37 = Math_fround(0), $11 = 0, i64toi32_i32$3 = 0, $5 = 0, $36 = Math_fround(0), $21 = 0, $10 = 0, $19 = 0, $16 = 0, $9 = 0, $39 = Math_fround(0), $38 = Math_fround(0), $40 = Math_fround(0), $41 = Math_fround(0), $45 = Math_fround(0), $14 = 0, $26 = 0, $20 = 0, i64toi32_i32$4 = 0, $18 = 0, $42 = Math_fround(0), $25 = 0, $29 = 0, $44 = Math_fround(0), $28 = 0, $14$hi = 0, $23 = 0, $22 = 0, $43 = Math_fround(0), $30 = 0, $57 = Math_fround(0), $12 = 0, $35 = 0, $32 = 0, $54 = Math_fround(0), $53 = Math_fround(0), $17 = 0, $52 = Math_fround(0), $31 = 0, $56 = Math_fround(0), $27 = 0, $47 = Math_fround(0), $51 = Math_fround(0), $24 = 0.0, $50 = Math_fround(0), $33 = 0, $34 = 0, $55 = Math_fround(0), $58 = Math_fround(0), $161 = 0, $162 = 0, $46 = 0, $48 = Math_fround(0), $163 = 0, $164 = 0, $165 = 0, $166 = 0, $59 = 0, $167 = 0, $60 = 0.0, $168 = 0, $119 = 0, $191 = 0, $472 = 0, $904 = 0, $910 = 0, $916 = 0, $922 = 0, $928 = 0, $935 = 0, $938 = 0, $1037 = 0, $1041 = 0, $1045 = 0, $1049 = 0, $1053 = 0, $1057 = 0, $1061 = 0, $1341 = 0, $1346 = 0, $1351 = 0, $1356 = 0, $1361 = 0, $1389 = Math_fround(0), $1402 = 0, $1543 = 0, $1560 = 0, $1565 = 0, $1569 = 0, $2832 = 0, $2931 = 0, $3075 = 0, $3088 = 0, $3101 = 0, $3251 = 0, $3265 = 0, $3265$hi = 0, $3268 = 0, $3268$hi = 0, $3272 = 0, $3299 = 0, $3299$hi = 0, $3301 = 0, $3301$hi = 0, $3305 = 0, $49 = 0, $4304 = 0, $4305 = 0, $4366$hi = 0, $4414 = Math_fround(0), $4426$hi = 0, $4755 = 0, $4756 = 0, $4778 = Math_fround(0), $4780 = Math_fround(0), $4806 = Math_fround(0), $4819$hi = 0, $4865 = Math_fround(0), $4877$hi = 0, $5054 = 0, $5055 = 0, $5065$hi = 0, $5074$hi = 0, $5149 = 0, $5167 = 0, $5174 = 0, $5246 = 0, $5408 = 0, $5411 = 0, $5807 = 0, $5839 = 0, $59$hi = 0, $6802 = 0, $6805 = Math_fround(0), $7541 = 0, $7545 = 0, $8301 = Math_fround(0), $8418 = 0, $8618 = 0, $8623 = 0, $8684 = 0, $8709 = 0, $8714 = 0, $8736 = 0, $8741 = 0, $8746 = 0, $8751 = 0, $8756 = 0, $8762 = 0, $8765 = 0, $8777 = 0, $8792 = 0, $8823 = 0, $8824 = Math_fround(0), $8825 = Math_fround(0), $8874 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3 = __stack_pointer - 320 | 0;
  __stack_pointer = $3;
  $4 = 0;
  $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  label$1 : {
   $6 = HEAPU8[$0 >> 0] | 0;
   if (!$6) {
    break label$1
   }
   $7 = -1;
   $8 = $0;
   label$2 : while (1) {
    $9 = $6 & 255 | 0;
    $6 = HEAPU8[($8 + 1 | 0) >> 0] | 0;
    label$3 : {
     if (($9 | 0) != (35 | 0)) {
      break label$3
     }
     if (($6 & 255 | 0 | 0) != (35 | 0)) {
      break label$3
     }
     $7 = (HEAPU8[($8 + 2 | 0) >> 0] | 0 | 0) == (35 | 0) ? -1 : $7;
    }
    $8 = $8 + 1 | 0;
    $7 = ($7 >>> 8 | 0) ^ (HEAP32[(((($7 & 255 | 0) ^ $9 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
    if ($6 & 255 | 0) {
     continue label$2
    }
    break label$2;
   };
   $4 = $7 ^ -1 | 0;
  }
  $10 = HEAP32[($5 + 16100 | 0) >> 2] | 0;
  $7 = $10;
  label$4 : {
   $11 = $5 + 16092 | 0;
   $12 = HEAP32[$11 >> 2] | 0;
   if (!$12) {
    break label$4
   }
   $7 = $10;
   $6 = $12;
   label$5 : while (1) {
    $8 = $6 >>> 1 | 0;
    $9 = $7 + ($8 << 3 | 0) | 0;
    $119 = $9 + 8 | 0;
    $9 = (HEAP32[$9 >> 2] | 0) >>> 0 < $4 >>> 0;
    $7 = $9 ? $119 : $7;
    $6 = $9 ? $6 + ($8 ^ -1 | 0) | 0 : $8;
    if ($6) {
     continue label$5
    }
    break label$5;
   };
  }
  label$6 : {
   label$7 : {
    if (($7 | 0) == ($10 + ($12 << 3 | 0) | 0 | 0)) {
     break label$7
    }
    if ((HEAP32[$7 >> 2] | 0 | 0) != ($4 | 0)) {
     break label$7
    }
    $10 = 0;
    $7 = HEAP32[($7 + 4 | 0) >> 2] | 0;
    if ($7) {
     break label$6
    }
   }
   label$8 : {
    if (!$5) {
     break label$8
    }
    $7 = $5 + 184 | 0;
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1 | 0;
   }
   $6 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](964, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   ImGuiWindow__ImGuiWindow_28ImGuiContext__2c_20char_20const__29($6 | 0, $5 | 0, $0 | 0) | 0;
   HEAP32[($3 + 256 | 0) >> 2] = $6;
   HEAP32[($6 + 8 | 0) >> 2] = $2;
   ImGuiStorage__SetVoidPtr_28unsigned_20int_2c_20void__29($11 | 0, HEAP32[($6 + 4 | 0) >> 2] | 0 | 0, $6 | 0);
   $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $7 = HEAP32[(HEAP32[($8 + 18584 | 0) >> 2] | 0) >> 2] | 0;
   $9 = $7 + 8 | 0;
   $13 = Math_fround(HEAPF32[$9 >> 2]);
   HEAPF32[($6 + 68 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($7 + 12 | 0) >> 2]) + Math_fround(60.0));
   HEAPF32[($6 + 64 | 0) >> 2] = Math_fround($13 + Math_fround(60.0));
   i64toi32_i32$2 = $9;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $191 = i64toi32_i32$0;
   i64toi32_i32$0 = $6;
   HEAP32[($6 + 52 | 0) >> 2] = $191;
   HEAP32[($6 + 56 | 0) >> 2] = i64toi32_i32$1;
   label$9 : {
    if ($2 & 256 | 0) {
     break label$9
    }
    $7 = HEAP32[($8 + 23420 | 0) >> 2] | 0;
    if (!$7) {
     break label$9
    }
    $9 = HEAP32[($6 + 4 | 0) >> 2] | 0;
    $4 = $7 + 4 | 0;
    $7 = $4;
    label$10 : {
     label$11 : while (1) {
      if ((HEAP32[$7 >> 2] | 0 | 0) == ($9 | 0)) {
       break label$10
      }
      $7 = $7 + (HEAP32[($7 + -4 | 0) >> 2] | 0) | 0;
      if (($7 | 0) != ($4 + (HEAP32[($8 + 23412 | 0) >> 2] | 0) | 0 | 0)) {
       continue label$11
      }
      break label$9;
     };
    }
    $9 = HEAP32[($5 + 23420 | 0) >> 2] | 0;
    HEAP32[($6 + 260 | 0) >> 2] = (HEAP32[($6 + 260 | 0) >> 2] | 0) & -67372037 | 0;
    HEAP32[($6 + 668 | 0) >> 2] = $7 - $9 | 0;
    i64toi32_i32$2 = HEAP32[(HEAP32[($8 + 18584 | 0) >> 2] | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
    $14 = i64toi32_i32$1;
    $14$hi = i64toi32_i32$0;
    i64toi32_i32$1 = $6;
    HEAP32[($6 + 52 | 0) >> 2] = $14;
    HEAP32[($6 + 56 | 0) >> 2] = i64toi32_i32$0;
    label$12 : {
     label$13 : {
      $9 = HEAP32[($7 + 16 | 0) >> 2] | 0;
      if ($9) {
       break label$13
      }
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$2 = $14;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $161 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       $161 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
      }
      $13 = (wasm2js_scratch_store_i32(2, $161), wasm2js_scratch_load_f32());
      i64toi32_i32$1 = $14$hi;
      $15 = (wasm2js_scratch_store_i32(2, $14), wasm2js_scratch_load_f32());
      break label$12;
     }
     HEAP32[($6 + 48 | 0) >> 2] = $9;
     $9 = HEAP16[($7 + 12 | 0) >> 1] | 0;
     $13 = Math_fround(HEAP16[($7 + 14 | 0) >> 1] | 0 | 0);
     HEAPF32[($6 + 56 | 0) >> 2] = $13;
     $15 = Math_fround($9 | 0);
     HEAPF32[($6 + 52 | 0) >> 2] = $15;
    }
    $9 = HEAP16[($7 + 6 | 0) >> 1] | 0;
    label$14 : {
     label$15 : {
      $15 = Math_fround($15 + Math_fround(HEAP16[($7 + 4 | 0) >> 1] | 0 | 0));
      if (!(Math_fround(Math_abs($15)) < Math_fround(2147483648.0))) {
       break label$15
      }
      $4 = ~~$15;
      break label$14;
     }
     $4 = -2147483648;
    }
    HEAPF32[($6 + 64 | 0) >> 2] = Math_fround($4 | 0);
    label$16 : {
     label$17 : {
      $13 = Math_fround($13 + Math_fround($9 | 0));
      if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
       break label$17
      }
      $9 = ~~$13;
      break label$16;
     }
     $9 = -2147483648;
    }
    HEAPF32[($6 + 68 | 0) >> 2] = Math_fround($9 | 0);
    label$18 : {
     $9 = HEAP16[($7 + 8 | 0) >> 1] | 0;
     if (($9 | 0) < (1 | 0)) {
      break label$18
     }
     $4 = HEAP16[($7 + 10 | 0) >> 1] | 0;
     if (($4 | 0) < (1 | 0)) {
      break label$18
     }
     $13 = Math_fround($4 | 0);
     HEAPF32[($6 + 84 | 0) >> 2] = $13;
     $15 = Math_fround($9 | 0);
     HEAPF32[($6 + 80 | 0) >> 2] = $15;
     HEAPF32[($6 + 76 | 0) >> 2] = $13;
     HEAPF32[($6 + 72 | 0) >> 2] = $15;
    }
    HEAP8[($6 + 222 | 0) >> 0] = HEAPU8[($7 + 30 | 0) >> 0] | 0;
    HEAP32[($6 + 940 | 0) >> 2] = HEAP32[($7 + 20 | 0) >> 2] | 0;
    HEAP16[($6 + 906 | 0) >> 1] = HEAPU16[($7 + 28 | 0) >> 1] | 0;
   }
   i64toi32_i32$0 = $6;
   i64toi32_i32$1 = HEAP32[($6 + 64 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[($6 + 68 | 0) >> 2] | 0;
   $14 = i64toi32_i32$1;
   $14$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $6 + 324 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $14;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$1 = $6 + 316 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $14;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$1 = $6 + 308 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $14;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
   label$19 : {
    label$20 : {
     if (!($2 & 64 | 0)) {
      break label$20
     }
     HEAP8[($6 + 251 | 0) >> 0] = 0;
     HEAP16[($6 + 248 | 0) >> 1] = 514;
     break label$19;
    }
    label$21 : {
     if (!(Math_fround(HEAPF32[($6 + 72 | 0) >> 2]) <= Math_fround(0.0))) {
      break label$21
     }
     HEAP8[($6 + 248 | 0) >> 0] = 2;
    }
    label$22 : {
     if (!(Math_fround(HEAPF32[($6 + 76 | 0) >> 2]) <= Math_fround(0.0))) {
      break label$22
     }
     HEAP8[($6 + 249 | 0) >> 0] = 2;
    }
    $7 = 1;
    label$23 : {
     if ((HEAP8[($6 + 248 | 0) >> 0] | 0 | 0) > (0 | 0)) {
      break label$23
     }
     $7 = (HEAP8[($6 + 249 | 0) >> 0] | 0 | 0) > (0 | 0);
    }
    HEAP8[($6 + 251 | 0) >> 0] = $7;
   }
   label$24 : {
    label$25 : {
     if (!($2 & 8192 | 0)) {
      break label$25
     }
     ImVector_ImGuiWindow____push_front_28ImGuiWindow__20const__29($5 + 16044 | 0 | 0, $3 + 256 | 0 | 0);
     break label$24;
    }
    label$26 : {
     $7 = HEAP32[($5 + 16044 | 0) >> 2] | 0;
     if (($7 | 0) != (HEAP32[($5 + 16048 | 0) >> 2] | 0 | 0)) {
      break label$26
     }
     $9 = $7 + 1 | 0;
     label$27 : {
      label$28 : {
       if ($7) {
        break label$28
       }
       $4 = 8;
       break label$27;
      }
      $4 = (($7 | 0) / (2 | 0) | 0) + $7 | 0;
     }
     $9 = ($4 | 0) > ($9 | 0) ? $4 : $9;
     if (($7 | 0) >= ($9 | 0)) {
      break label$26
     }
     $7 = $8 + 184 | 0;
     HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1 | 0;
     $7 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($9 << 2 | 0, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
     label$29 : {
      $8 = HEAP32[($5 + 16052 | 0) >> 2] | 0;
      if (!$8) {
       break label$29
      }
      __memcpy($7 | 0, $8 | 0, (HEAP32[($5 + 16044 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
      label$30 : {
       $8 = HEAP32[($5 + 16052 | 0) >> 2] | 0;
       if (!$8) {
        break label$30
       }
       $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
       if (!$4) {
        break label$30
       }
       $4 = $4 + 184 | 0;
       HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + -1 | 0;
      }
      FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($8, HEAP32[(0 + 92728 | 0) >> 2] | 0);
     }
     HEAP32[($5 + 16048 | 0) >> 2] = $9;
     HEAP32[($5 + 16052 | 0) >> 2] = $7;
     $7 = HEAP32[($5 + 16044 | 0) >> 2] | 0;
    }
    HEAP32[((HEAP32[($5 + 16052 | 0) >> 2] | 0) + ($7 << 2 | 0) | 0) >> 2] = $6;
    HEAP32[($5 + 16044 | 0) >> 2] = (HEAP32[($5 + 16044 | 0) >> 2] | 0) + 1 | 0;
   }
   $7 = HEAP32[($3 + 256 | 0) >> 2] | 0;
   $10 = 1;
  }
  $8 = ($2 & 786944 | 0 | 0) == (786944 | 0) ? $2 | 6 | 0 : $2;
  $9 = HEAP32[($5 + 16016 | 0) >> 2] | 0;
  $6 = 0;
  label$31 : {
   if (HEAP32[($5 + 16080 | 0) >> 2] | 0) {
    break label$31
   }
   $6 = (HEAPU8[($5 + 16033 | 0) >> 0] | 0 | 0) != (0 | 0);
  }
  $2 = HEAP32[($7 + 620 | 0) >> 2] | 0;
  HEAP8[($7 + 227 | 0) >> 0] = $6;
  $6 = $9 + -1 | 0;
  label$32 : {
   label$33 : {
    if ($8 & 67108864 | 0) {
     break label$33
    }
    $12 = ($2 | 0) < ($6 | 0);
    break label$32;
   }
   $472 = ($2 | 0) < ($6 | 0);
   $6 = (HEAP32[($5 + 18556 | 0) >> 2] | 0) + Math_imul(HEAP32[($5 + 18560 | 0) >> 2] | 0, 40) | 0;
   $12 = $472 | ((HEAP32[($7 + 244 | 0) >> 2] | 0 | 0) != (HEAP32[$6 >> 2] | 0 | 0) | ($7 | 0) != (HEAP32[($6 + 4 | 0) >> 2] | 0 | 0) | 0) | 0;
  }
  $16 = HEAPU8[($7 + 225 | 0) >> 0] | 0;
  label$34 : {
   label$35 : {
    $4 = ($2 | 0) == ($9 | 0);
    if ($4) {
     break label$35
    }
    $17 = ($8 >>> 24 | 0) & ($8 & 335544320 | 0 | 0) != (67108864 | 0) | 0;
    $6 = (HEAPU8[($7 + 228 | 0) >> 0] | 0 | 0) == ($17 | 0);
    $18 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    label$36 : {
     label$37 : {
      if ($17) {
       break label$37
      }
      if ($6 & ($10 ^ 1 | 0) | 0) {
       break label$37
      }
      label$38 : {
       $6 = HEAP32[($18 + 16056 | 0) >> 2] | 0;
       if (($6 | 0) != (HEAP32[($18 + 16060 | 0) >> 2] | 0 | 0)) {
        break label$38
       }
       $11 = $6 + 1 | 0;
       label$39 : {
        label$40 : {
         if ($6) {
          break label$40
         }
         $19 = 8;
         break label$39;
        }
        $19 = (($6 | 0) / (2 | 0) | 0) + $6 | 0;
       }
       $11 = ($19 | 0) > ($11 | 0) ? $19 : $11;
       if (($6 | 0) >= ($11 | 0)) {
        break label$38
       }
       $6 = $18 + 184 | 0;
       HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1 | 0;
       $6 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($11 << 2 | 0, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
       label$41 : {
        $19 = HEAP32[($18 + 16064 | 0) >> 2] | 0;
        if (!$19) {
         break label$41
        }
        __memcpy($6 | 0, $19 | 0, (HEAP32[($18 + 16056 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
        label$42 : {
         $19 = HEAP32[($18 + 16064 | 0) >> 2] | 0;
         if (!$19) {
          break label$42
         }
         $20 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
         if (!$20) {
          break label$42
         }
         $20 = $20 + 184 | 0;
         HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) + -1 | 0;
        }
        FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($19, HEAP32[(0 + 92728 | 0) >> 2] | 0);
       }
       HEAP32[($18 + 16060 | 0) >> 2] = $11;
       HEAP32[($18 + 16064 | 0) >> 2] = $6;
       $6 = HEAP32[($18 + 16056 | 0) >> 2] | 0;
      }
      HEAP32[((HEAP32[($18 + 16064 | 0) >> 2] | 0) + ($6 << 2 | 0) | 0) >> 2] = $7;
      $6 = HEAP32[($18 + 16056 | 0) >> 2] | 0;
      HEAP32[($18 + 16056 | 0) >> 2] = $6 + 1 | 0;
      HEAP16[($7 + 240 | 0) >> 1] = $6;
      break label$36;
     }
     if ($10 | ($17 ^ 1 | 0) | 0) {
      break label$36
     }
     if ($6) {
      break label$36
     }
     label$43 : {
      label$44 : {
       $11 = HEAP16[($7 + 240 | 0) >> 1] | 0;
       $6 = $11 + 1 | 0;
       $21 = HEAP32[($18 + 16056 | 0) >> 2] | 0;
       if (($6 | 0) < ($21 | 0)) {
        break label$44
       }
       $20 = HEAP32[($18 + 16064 | 0) >> 2] | 0;
       break label$43;
      }
      $22 = ($21 - $11 | 0) + -2 | 0;
      $20 = HEAP32[($18 + 16064 | 0) >> 2] | 0;
      label$45 : {
       $23 = ($21 + ($11 ^ -1 | 0) | 0) & 3 | 0;
       if (!$23) {
        break label$45
       }
       $11 = 0;
       label$46 : while (1) {
        $19 = HEAP32[($20 + ($6 << 2 | 0) | 0) >> 2] | 0;
        HEAP16[($19 + 240 | 0) >> 1] = (HEAPU16[($19 + 240 | 0) >> 1] | 0) + -1 | 0;
        $6 = $6 + 1 | 0;
        $11 = $11 + 1 | 0;
        if (($11 | 0) != ($23 | 0)) {
         continue label$46
        }
        break label$46;
       };
      }
      label$47 : {
       if ($22 >>> 0 <= 2 >>> 0) {
        break label$47
       }
       label$48 : while (1) {
        $11 = $20 + ($6 << 2 | 0) | 0;
        $19 = HEAP32[$11 >> 2] | 0;
        HEAP16[($19 + 240 | 0) >> 1] = (HEAPU16[($19 + 240 | 0) >> 1] | 0) + -1 | 0;
        $19 = HEAP32[($11 + 4 | 0) >> 2] | 0;
        HEAP16[($19 + 240 | 0) >> 1] = (HEAPU16[($19 + 240 | 0) >> 1] | 0) + -1 | 0;
        $19 = HEAP32[($11 + 8 | 0) >> 2] | 0;
        HEAP16[($19 + 240 | 0) >> 1] = (HEAPU16[($19 + 240 | 0) >> 1] | 0) + -1 | 0;
        $11 = HEAP32[($11 + 12 | 0) >> 2] | 0;
        HEAP16[($11 + 240 | 0) >> 1] = (HEAPU16[($11 + 240 | 0) >> 1] | 0) + -1 | 0;
        $6 = $6 + 4 | 0;
        if (($6 | 0) != ($21 | 0)) {
         continue label$48
        }
        break label$48;
       };
      }
      $11 = HEAP16[($7 + 240 | 0) >> 1] | 0;
     }
     $6 = $20 + ($11 << 2 | 0) | 0;
     memmove($6 | 0, $6 + 4 | 0 | 0, ($21 + ($11 ^ -1 | 0) | 0) << 2 | 0 | 0) | 0;
     HEAP32[($18 + 16056 | 0) >> 2] = (HEAP32[($18 + 16056 | 0) >> 2] | 0) + -1 | 0;
     HEAP16[($7 + 240 | 0) >> 1] = 65535;
    }
    HEAP8[($7 + 225 | 0) >> 0] = $12;
    HEAP8[($7 + 228 | 0) >> 0] = $17;
    label$49 : {
     if (!$12) {
      break label$49
     }
     HEAP32[($7 + 260 | 0) >> 2] = HEAP32[($7 + 260 | 0) >> 2] | 0 | 134744072 | 0;
    }
    HEAP32[($7 + 620 | 0) >> 2] = $9;
    HEAP32[($7 + 12 | 0) >> 2] = HEAP32[($7 + 8 | 0) >> 2] | 0;
    HEAP32[($7 + 8 | 0) >> 2] = $8;
    $24 = +HEAPF64[($5 + 16008 | 0) >> 3];
    HEAP16[($7 + 236 | 0) >> 1] = 0;
    HEAPF32[($7 + 628 | 0) >> 2] = Math_fround($24);
    $6 = HEAP32[($5 + 16104 | 0) >> 2] | 0;
    HEAP32[($5 + 16104 | 0) >> 2] = $6 + 1 | 0;
    HEAP16[($7 + 238 | 0) >> 1] = $6;
    break label$34;
   }
   $8 = HEAP32[($7 + 8 | 0) >> 2] | 0;
  }
  label$50 : {
   if (!((HEAPU8[($5 + 18341 | 0) >> 0] | 0) & 2 | 0)) {
    break label$50
   }
   ImGui__SetWindowDock_28ImGuiWindow__2c_20unsigned_20int_2c_20int_29($7 | 0, HEAP32[($5 + 18436 | 0) >> 2] | 0 | 0, HEAP32[($5 + 18356 | 0) >> 2] | 0 | 0);
  }
  label$51 : {
   label$52 : {
    $17 = ($2 | 0) != ($9 | 0);
    if ($17) {
     break label$52
    }
    $6 = HEAPU8[($7 + 905 | 0) >> 0] | 0;
    break label$51;
   }
   label$53 : {
    label$54 : {
     if (HEAP32[($7 + 940 | 0) >> 2] | 0) {
      break label$54
     }
     if (HEAP32[($7 + 932 | 0) >> 2] | 0) {
      break label$54
     }
     label$55 : {
      if (HEAPU8[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 98 | 0) >> 0] | 0) {
       break label$55
      }
      if (!(HEAPU8[($7 + 40 | 0) >> 0] | 0)) {
       break label$53
      }
     }
     if ((HEAP32[($7 + 8 | 0) >> 2] | 0) & 18874369 | 0) {
      break label$53
     }
     if (HEAPU8[($7 + 227 | 0) >> 0] | 0) {
      break label$53
     }
    }
    $9 = HEAPU8[($7 + 905 | 0) >> 0] | 0;
    ImGui__BeginDocked_28ImGuiWindow__2c_20bool__29($7 | 0, $1 | 0);
    $8 = HEAP32[($7 + 8 | 0) >> 2] | 0;
    label$56 : {
     $6 = HEAPU8[($7 + 905 | 0) >> 0] | 0;
     if (!($6 & 1 | 0)) {
      break label$56
     }
     HEAP32[($5 + 18340 | 0) >> 2] = (HEAP32[($5 + 18340 | 0) >> 2] | 0) & -17 | 0;
     $6 = HEAPU8[($7 + 905 | 0) >> 0] | 0;
    }
    if (!($6 & 4 | 0)) {
     break label$51
    }
    if ($9 & 4 | 0) {
     break label$51
    }
    if (!($9 & 2 | 0)) {
     break label$51
    }
    if (HEAPU8[($7 + 225 | 0) >> 0] | 0 | ($16 & 255 | 0) | 0) {
     break label$51
    }
    HEAP8[($7 + 225 | 0) >> 0] = 1;
    HEAP32[($7 + 260 | 0) >> 2] = HEAP32[($7 + 260 | 0) >> 2] | 0 | 134744072 | 0;
    break label$51;
   }
   $6 = (HEAPU8[($7 + 905 | 0) >> 0] | 0) & -8 | 0;
   HEAP8[($7 + 905 | 0) >> 0] = $6;
  }
  label$57 : {
   label$58 : {
    if (!($6 & 1 | 0)) {
     break label$58
    }
    $18 = HEAP32[((HEAP32[($7 + 932 | 0) >> 2] | 0) + 112 | 0) >> 2] | 0;
    if ($18) {
     break label$57
    }
   }
   label$59 : {
    $6 = HEAP32[($5 + 16080 | 0) >> 2] | 0;
    if ($6) {
     break label$59
    }
    $18 = 0;
    break label$57;
   }
   $18 = HEAP32[((Math_imul($6, 84) + (HEAP32[($5 + 16088 | 0) >> 2] | 0) | 0) + -84 | 0) >> 2] | 0;
  }
  label$60 : {
   label$61 : {
    if ($4) {
     break label$61
    }
    $9 = $8 & 83886080 | 0 ? $18 : 0;
    break label$60;
   }
   $9 = HEAP32[($7 + 820 | 0) >> 2] | 0;
  }
  label$62 : {
   if (HEAP32[($7 + 280 | 0) >> 2] | 0) {
    break label$62
   }
   label$63 : {
    label$64 : {
     if (!(HEAP32[($7 + 284 | 0) >> 2] | 0)) {
      break label$64
     }
     $6 = HEAP32[($7 + 288 | 0) >> 2] | 0;
     $2 = 0;
     break label$63;
    }
    label$65 : {
     $6 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$6) {
      break label$65
     }
     $6 = $6 + 184 | 0;
     HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1 | 0;
    }
    $6 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](32, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
    label$66 : {
     $2 = HEAP32[($7 + 288 | 0) >> 2] | 0;
     if (!$2) {
      break label$66
     }
     __memcpy($6 | 0, $2 | 0, (HEAP32[($7 + 280 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
     label$67 : {
      $2 = HEAP32[($7 + 288 | 0) >> 2] | 0;
      if (!$2) {
       break label$67
      }
      $11 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$11) {
       break label$67
      }
      $11 = $11 + 184 | 0;
      HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + -1 | 0;
     }
     FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($2, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    }
    HEAP32[($7 + 284 | 0) >> 2] = 8;
    HEAP32[($7 + 288 | 0) >> 2] = $6;
    $2 = HEAP32[($7 + 280 | 0) >> 2] | 0;
   }
   HEAP32[($6 + ($2 << 2 | 0) | 0) >> 2] = HEAP32[($7 + 4 | 0) >> 2] | 0;
   HEAP32[($7 + 280 | 0) >> 2] = (HEAP32[($7 + 280 | 0) >> 2] | 0) + 1 | 0;
  }
  HEAP32[($5 + 16116 | 0) >> 2] = $7;
  $19 = $3 + 200 | 0;
  HEAP32[$19 >> 2] = HEAP32[($5 + 18336 | 0) >> 2] | 0;
  $20 = $3 + 192 | 0;
  i64toi32_i32$0 = $5 + 18328 | 0;
  i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
  $904 = i64toi32_i32$2;
  i64toi32_i32$2 = $20;
  HEAP32[i64toi32_i32$2 >> 2] = $904;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
  $21 = $3 + 184 | 0;
  i64toi32_i32$0 = $5 + 18320 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
  $910 = i64toi32_i32$1;
  i64toi32_i32$1 = $21;
  HEAP32[i64toi32_i32$1 >> 2] = $910;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
  $23 = $3 + 176 | 0;
  i64toi32_i32$0 = $5 + 18312 | 0;
  i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
  $916 = i64toi32_i32$2;
  i64toi32_i32$2 = $23;
  HEAP32[i64toi32_i32$2 >> 2] = $916;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
  $16 = $3 + 168 | 0;
  i64toi32_i32$0 = $5 + 18304 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
  $922 = i64toi32_i32$1;
  i64toi32_i32$1 = $16;
  HEAP32[i64toi32_i32$1 >> 2] = $922;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
  $22 = $3 + 160 | 0;
  i64toi32_i32$0 = $5 + 18296 | 0;
  i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
  $928 = i64toi32_i32$2;
  i64toi32_i32$2 = $22;
  HEAP32[i64toi32_i32$2 >> 2] = $928;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
  $11 = 8;
  $25 = ($3 + 144 | 0) + 8 | 0;
  i64toi32_i32$0 = $5 + 18288 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
  $935 = i64toi32_i32$1;
  i64toi32_i32$1 = $25;
  HEAP32[i64toi32_i32$1 >> 2] = $935;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$0 = $5;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 18280 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 18284 | 0) >> 2] | 0;
  $938 = i64toi32_i32$2;
  i64toi32_i32$2 = $3;
  HEAP32[($3 + 144 | 0) >> 2] = $938;
  HEAP32[($3 + 148 | 0) >> 2] = i64toi32_i32$1;
  $6 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $26 = HEAPU16[($6 + 23272 | 0) >> 1] | 0;
  $27 = HEAP32[($6 + 18560 | 0) >> 2] | 0;
  $28 = HEAP32[($6 + 18524 | 0) >> 2] | 0;
  $29 = HEAP32[($6 + 18536 | 0) >> 2] | 0;
  $30 = HEAP32[($6 + 18512 | 0) >> 2] | 0;
  $31 = HEAP32[($6 + 18500 | 0) >> 2] | 0;
  $32 = HEAP32[($6 + 18488 | 0) >> 2] | 0;
  $33 = HEAP32[($6 + 18476 | 0) >> 2] | 0;
  $34 = HEAP32[((HEAP32[($6 + 16116 | 0) >> 2] | 0) + 280 | 0) >> 2] | 0;
  label$68 : {
   $2 = HEAP32[(i64toi32_i32$0 + 16080 | 0) >> 2] | 0;
   if (($2 | 0) != (HEAP32[(i64toi32_i32$0 + 16084 | 0) >> 2] | 0 | 0)) {
    break label$68
   }
   $35 = $2 + 1 | 0;
   label$69 : {
    if (!$2) {
     break label$69
    }
    $11 = (($2 | 0) / (2 | 0) | 0) + $2 | 0;
   }
   $11 = ($11 | 0) > ($35 | 0) ? $11 : $35;
   if (($2 | 0) >= ($11 | 0)) {
    break label$68
   }
   $6 = $6 + 184 | 0;
   HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1 | 0;
   $6 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](Math_imul($11, 84), HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$70 : {
    $2 = HEAP32[($5 + 16088 | 0) >> 2] | 0;
    if (!$2) {
     break label$70
    }
    __memcpy($6 | 0, $2 | 0, Math_imul(HEAP32[($5 + 16080 | 0) >> 2] | 0, 84) | 0) | 0;
    label$71 : {
     $2 = HEAP32[($5 + 16088 | 0) >> 2] | 0;
     if (!$2) {
      break label$71
     }
     $35 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$35) {
      break label$71
     }
     $35 = $35 + 184 | 0;
     HEAP32[$35 >> 2] = (HEAP32[$35 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($2, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($5 + 16084 | 0) >> 2] = $11;
   HEAP32[($5 + 16088 | 0) >> 2] = $6;
   $2 = HEAP32[($5 + 16080 | 0) >> 2] | 0;
  }
  $6 = (HEAP32[($5 + 16088 | 0) >> 2] | 0) + Math_imul($2, 84) | 0;
  HEAP32[$6 >> 2] = $7;
  i64toi32_i32$0 = $3;
  i64toi32_i32$1 = HEAP32[($3 + 144 | 0) >> 2] | 0;
  i64toi32_i32$2 = HEAP32[($3 + 148 | 0) >> 2] | 0;
  $1037 = i64toi32_i32$1;
  i64toi32_i32$1 = $6;
  HEAP32[($6 + 4 | 0) >> 2] = $1037;
  HEAP32[($6 + 8 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$0 = $25;
  i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
  $1041 = i64toi32_i32$2;
  i64toi32_i32$2 = $6 + 12 | 0;
  HEAP32[i64toi32_i32$2 >> 2] = $1041;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $22;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
  $1045 = i64toi32_i32$1;
  i64toi32_i32$1 = $6 + 20 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1045;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$0 = $16;
  i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
  $1049 = i64toi32_i32$2;
  i64toi32_i32$2 = $6 + 28 | 0;
  HEAP32[i64toi32_i32$2 >> 2] = $1049;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $23;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
  $1053 = i64toi32_i32$1;
  i64toi32_i32$1 = $6 + 36 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1053;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$0 = $21;
  i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
  $1057 = i64toi32_i32$2;
  i64toi32_i32$2 = $6 + 44 | 0;
  HEAP32[i64toi32_i32$2 >> 2] = $1057;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $20;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
  $1061 = i64toi32_i32$1;
  i64toi32_i32$1 = $6 + 52 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1061;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
  HEAP32[($6 + 60 | 0) >> 2] = HEAP32[$19 >> 2] | 0;
  HEAP16[($6 + 80 | 0) >> 1] = $26;
  HEAP16[($6 + 78 | 0) >> 1] = $27;
  HEAP16[($6 + 76 | 0) >> 1] = $28;
  HEAP16[($6 + 74 | 0) >> 1] = $29;
  HEAP16[($6 + 72 | 0) >> 1] = $30;
  HEAP16[($6 + 70 | 0) >> 1] = $31;
  HEAP16[($6 + 68 | 0) >> 1] = $32;
  HEAP16[($6 + 66 | 0) >> 1] = $33;
  HEAP16[($6 + 64 | 0) >> 1] = $34;
  HEAP32[($5 + 16080 | 0) >> 2] = (HEAP32[($5 + 16080 | 0) >> 2] | 0) + 1 | 0;
  label$72 : {
   if (!($8 & 268435456 | 0)) {
    break label$72
   }
   HEAP32[($5 + 18572 | 0) >> 2] = (HEAP32[($5 + 18572 | 0) >> 2] | 0) + 1 | 0;
  }
  label$73 : {
   if ($4) {
    break label$73
   }
   HEAP32[($7 + 820 | 0) >> 2] = $9;
   HEAP32[($7 + 844 | 0) >> 2] = $7;
   HEAP32[($7 + 840 | 0) >> 2] = $7;
   HEAP32[($7 + 836 | 0) >> 2] = $7;
   HEAP32[($7 + 832 | 0) >> 2] = $7;
   HEAP32[($7 + 828 | 0) >> 2] = $7;
   label$74 : {
    if (($8 & 50331648 | 0 | 0) != (16777216 | 0)) {
     break label$74
    }
    if (!$9) {
     break label$74
    }
    HEAP32[($7 + 836 | 0) >> 2] = HEAP32[($9 + 836 | 0) >> 2] | 0;
    if ((HEAPU8[($7 + 905 | 0) >> 0] | 0) & 1 | 0) {
     break label$74
    }
    if ((HEAPU8[($9 + 11 | 0) >> 0] | 0) & 32 | 0) {
     break label$74
    }
    HEAP32[($7 + 828 | 0) >> 2] = HEAP32[($9 + 828 | 0) >> 2] | 0;
   }
   label$75 : {
    if (!($8 & 67108864 | 0)) {
     break label$75
    }
    if (!$9) {
     break label$75
    }
    HEAP32[($7 + 832 | 0) >> 2] = HEAP32[($9 + 832 | 0) >> 2] | 0;
   }
   label$76 : {
    if ($8 & 134217728 | 0) {
     break label$76
    }
    if (!($8 & 83886080 | 0)) {
     break label$76
    }
    if (!$9) {
     break label$76
    }
    HEAP32[($7 + 840 | 0) >> 2] = HEAP32[($9 + 840 | 0) >> 2] | 0;
   }
   label$77 : {
    if (!((HEAPU8[($7 + 10 | 0) >> 0] | 0) & 128 | 0)) {
     break label$77
    }
    $6 = $7;
    label$78 : while (1) {
     $6 = HEAP32[($6 + 820 | 0) >> 2] | 0;
     if ((HEAPU8[($6 + 10 | 0) >> 0] | 0) & 128 | 0) {
      continue label$78
     }
     break label$78;
    };
    HEAP32[($7 + 844 | 0) >> 2] = $6;
   }
   HEAP32[($7 + 824 | 0) >> 2] = $18;
  }
  $11 = HEAP32[($7 + 4 | 0) >> 2] | 0;
  label$79 : {
   $6 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $2 = HEAP32[($6 + 18512 | 0) >> 2] | 0;
   if (($2 | 0) != (HEAP32[($6 + 18516 | 0) >> 2] | 0 | 0)) {
    break label$79
   }
   $19 = $2 + 1 | 0;
   label$80 : {
    label$81 : {
     if ($2) {
      break label$81
     }
     $20 = 8;
     break label$80;
    }
    $20 = (($2 | 0) / (2 | 0) | 0) + $2 | 0;
   }
   $19 = ($20 | 0) > ($19 | 0) ? $20 : $19;
   if (($2 | 0) >= ($19 | 0)) {
    break label$79
   }
   $2 = $6 + 184 | 0;
   HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1 | 0;
   $2 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($19 << 2 | 0, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$82 : {
    $20 = HEAP32[($6 + 18520 | 0) >> 2] | 0;
    if (!$20) {
     break label$82
    }
    __memcpy($2 | 0, $20 | 0, (HEAP32[($6 + 18512 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
    label$83 : {
     $20 = HEAP32[($6 + 18520 | 0) >> 2] | 0;
     if (!$20) {
      break label$83
     }
     $21 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$21) {
      break label$83
     }
     $21 = $21 + 184 | 0;
     HEAP32[$21 >> 2] = (HEAP32[$21 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($20, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($6 + 18516 | 0) >> 2] = $19;
   HEAP32[($6 + 18520 | 0) >> 2] = $2;
   $2 = HEAP32[($6 + 18512 | 0) >> 2] | 0;
  }
  HEAP32[((HEAP32[($6 + 18520 | 0) >> 2] | 0) + ($2 << 2 | 0) | 0) >> 2] = $11;
  HEAP32[($6 + 18248 | 0) >> 2] = $11;
  HEAP32[($6 + 18512 | 0) >> 2] = (HEAP32[($6 + 18512 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[($7 + 892 | 0) >> 2] = HEAP32[($5 + 18248 | 0) >> 2] | 0;
  HEAP32[($5 + 16116 | 0) >> 2] = 0;
  label$84 : {
   if (!($8 & 67108864 | 0)) {
    break label$84
   }
   $2 = HEAP32[($5 + 18560 | 0) >> 2] | 0;
   $6 = (HEAP32[($5 + 18556 | 0) >> 2] | 0) + Math_imul($2, 40) | 0;
   HEAP32[($6 + 4 | 0) >> 2] = $7;
   HEAP32[($6 + 12 | 0) >> 2] = HEAP32[($18 + 380 | 0) >> 2] | 0;
   label$85 : {
    if (($2 | 0) != (HEAP32[($5 + 18564 | 0) >> 2] | 0 | 0)) {
     break label$85
    }
    $11 = $2 + 1 | 0;
    label$86 : {
     label$87 : {
      if ($2) {
       break label$87
      }
      $19 = 8;
      break label$86;
     }
     $19 = (($2 | 0) / (2 | 0) | 0) + $2 | 0;
    }
    $11 = ($19 | 0) > ($11 | 0) ? $19 : $11;
    if (($2 | 0) >= ($11 | 0)) {
     break label$85
    }
    $2 = Math_imul($11, 40);
    label$88 : {
     $19 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$19) {
      break label$88
     }
     $19 = $19 + 184 | 0;
     HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1 | 0;
    }
    $2 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($2, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
    label$89 : {
     $19 = HEAP32[($5 + 18568 | 0) >> 2] | 0;
     if (!$19) {
      break label$89
     }
     __memcpy($2 | 0, $19 | 0, Math_imul(HEAP32[($5 + 18560 | 0) >> 2] | 0, 40) | 0) | 0;
     label$90 : {
      $19 = HEAP32[($5 + 18568 | 0) >> 2] | 0;
      if (!$19) {
       break label$90
      }
      $20 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$20) {
       break label$90
      }
      $20 = $20 + 184 | 0;
      HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) + -1 | 0;
     }
     FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($19, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    }
    HEAP32[($5 + 18564 | 0) >> 2] = $11;
    HEAP32[($5 + 18568 | 0) >> 2] = $2;
    $2 = HEAP32[($5 + 18560 | 0) >> 2] | 0;
   }
   $2 = (HEAP32[($5 + 18568 | 0) >> 2] | 0) + Math_imul($2, 40) | 0;
   i64toi32_i32$0 = $6;
   i64toi32_i32$2 = HEAP32[$6 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($6 + 4 | 0) >> 2] | 0;
   $1341 = i64toi32_i32$2;
   i64toi32_i32$2 = $2;
   HEAP32[$2 >> 2] = $1341;
   HEAP32[($2 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$0 = $6 + 32 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $1346 = i64toi32_i32$1;
   i64toi32_i32$1 = $2 + 32 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $1346;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$0 = $6 + 24 | 0;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $1351 = i64toi32_i32$2;
   i64toi32_i32$2 = $2 + 24 | 0;
   HEAP32[i64toi32_i32$2 >> 2] = $1351;
   HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$0 = $6 + 16 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $1356 = i64toi32_i32$1;
   i64toi32_i32$1 = $2 + 16 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $1356;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$0 = $6 + 8 | 0;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $1361 = i64toi32_i32$2;
   i64toi32_i32$2 = $2 + 8 | 0;
   HEAP32[i64toi32_i32$2 >> 2] = $1361;
   HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($5 + 18560 | 0) >> 2] = (HEAP32[($5 + 18560 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($7 + 244 | 0) >> 2] = HEAP32[$6 >> 2] | 0;
  }
  $19 = 0;
  $11 = 0;
  label$91 : {
   if (!((HEAPU8[($5 + 18340 | 0) >> 0] | 0) & 1 | 0)) {
    break label$91
   }
   label$92 : {
    $11 = HEAP32[($7 + 260 | 0) >> 2] | 0;
    $6 = HEAP32[($5 + 18344 | 0) >> 2] | 0;
    $2 = $11 << 24 >> 24 & $6 | 0;
    if (!$2) {
     break label$92
    }
    $13 = Math_fround(HEAPF32[($5 + 18368 | 0) >> 2]);
    $1389 = Math_fround($13 * $13);
    $13 = Math_fround(HEAPF32[($5 + 18372 | 0) >> 2]);
    if (!(Math_fround($1389 + Math_fround($13 * $13)) > Math_fround(9.999999747378752e-06))) {
     break label$92
    }
    i64toi32_i32$0 = $5 + 18360 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $1402 = i64toi32_i32$1;
    i64toi32_i32$1 = $7;
    HEAP32[($7 + 264 | 0) >> 2] = $1402;
    HEAP32[($7 + 268 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $5;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 18368 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 18372 | 0) >> 2] | 0;
    $14 = i64toi32_i32$2;
    $14$hi = i64toi32_i32$1;
    HEAP32[($7 + 260 | 0) >> 2] = $11 & -15 | 0;
    i64toi32_i32$2 = $7;
    HEAP32[($7 + 272 | 0) >> 2] = $14;
    HEAP32[($7 + 276 | 0) >> 2] = i64toi32_i32$1;
    $11 = 1;
    break label$91;
   }
   $11 = ($2 | 0) != (0 | 0);
   ImGui__SetWindowPos_28ImGuiWindow__2c_20ImVec2_20const__2c_20int_29($7 | 0, $5 + 18360 | 0 | 0, $6 | 0);
  }
  $20 = 0;
  label$93 : {
   if (!((HEAPU8[($5 + 18340 | 0) >> 0] | 0) & 2 | 0)) {
    break label$93
   }
   label$94 : {
    label$95 : {
     $6 = HEAP32[($7 + 260 | 0) >> 2] | 0;
     $21 = HEAP32[($5 + 18348 | 0) >> 2] | 0;
     if ((($6 << 16 | 0) >> 24 | 0) & $21 | 0) {
      break label$95
     }
     $19 = 0;
     $2 = 0;
     $20 = 0;
     if (!$21) {
      break label$94
     }
     break label$93;
    }
    $19 = Math_fround(HEAPF32[($5 + 18380 | 0) >> 2]) > Math_fround(0.0);
    $2 = Math_fround(HEAPF32[($5 + 18376 | 0) >> 2]) > Math_fround(0.0);
   }
   HEAP32[($7 + 260 | 0) >> 2] = $6 & -3585 | 0;
   $36 = Math_fround(HEAPF32[($5 + 18376 | 0) >> 2]);
   $6 = $36 <= Math_fround(0.0);
   HEAP8[($7 + 248 | 0) >> 0] = $6 << 1 | 0;
   $13 = Math_fround(HEAPF32[($5 + 18380 | 0) >> 2]);
   HEAP8[($7 + 249 | 0) >> 0] = ($13 <= Math_fround(0.0)) << 1 | 0;
   $37 = Math_fround(HEAPF32[($7 + 84 | 0) >> 2]);
   $15 = Math_fround(HEAPF32[($7 + 80 | 0) >> 2]);
   label$96 : {
    label$97 : {
     if (!$6) {
      break label$97
     }
     HEAP8[($7 + 251 | 0) >> 0] = 0;
     $36 = $15;
     break label$96;
    }
    label$98 : {
     label$99 : {
      if (!(Math_fround(Math_abs($36)) < Math_fround(2147483648.0))) {
       break label$99
      }
      $6 = ~~$36;
      break label$98;
     }
     $6 = -2147483648;
    }
    $36 = Math_fround($6 | 0);
    HEAPF32[($7 + 80 | 0) >> 2] = $36;
   }
   label$100 : {
    label$101 : {
     if (!($13 <= Math_fround(0.0))) {
      break label$101
     }
     HEAP8[($7 + 251 | 0) >> 0] = 0;
     $13 = $37;
     break label$100;
    }
    label$102 : {
     label$103 : {
      if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
       break label$103
      }
      $6 = ~~$13;
      break label$102;
     }
     $6 = -2147483648;
    }
    $13 = Math_fround($6 | 0);
    HEAPF32[($7 + 84 | 0) >> 2] = $13;
   }
   label$104 : {
    label$105 : {
     if ($15 != $36) {
      break label$105
     }
     if ($37 == $13) {
      break label$104
     }
    }
    if ((HEAPU8[($7 + 9 | 0) >> 0] | 0) & 1 | 0) {
     break label$104
    }
    $6 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!(Math_fround(HEAPF32[($6 + 23384 | 0) >> 2]) <= Math_fround(0.0))) {
     break label$104
    }
    HEAPF32[($6 + 23384 | 0) >> 2] = Math_fround(HEAPF32[($6 + 28 | 0) >> 2]);
   }
   $20 = $2;
  }
  label$106 : {
   $6 = HEAP32[($5 + 18340 | 0) >> 2] | 0;
   if (!($6 & 128 | 0)) {
    break label$106
   }
   label$107 : {
    $13 = Math_fround(HEAPF32[($5 + 18392 | 0) >> 2]);
    if (!($13 >= Math_fround(0.0))) {
     break label$107
    }
    HEAP32[($7 + 192 | 0) >> 2] = 0;
    HEAPF32[($7 + 184 | 0) >> 2] = $13;
   }
   $13 = Math_fround(HEAPF32[($5 + 18396 | 0) >> 2]);
   if (!($13 >= Math_fround(0.0))) {
    break label$106
   }
   HEAP32[($7 + 196 | 0) >> 2] = 0;
   HEAPF32[($7 + 188 | 0) >> 2] = $13;
  }
  label$108 : {
   label$109 : {
    if (!($6 & 4 | 0)) {
     break label$109
    }
    i64toi32_i32$0 = $5 + 18384 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $1543 = i64toi32_i32$1;
    i64toi32_i32$1 = $7;
    HEAP32[($7 + 104 | 0) >> 2] = $1543;
    HEAP32[($7 + 108 | 0) >> 2] = i64toi32_i32$2;
    break label$108;
   }
   if ($4) {
    break label$108
   }
   i64toi32_i32$1 = $7;
   i64toi32_i32$2 = 0;
   HEAP32[($7 + 104 | 0) >> 2] = 0;
   HEAP32[($7 + 108 | 0) >> 2] = i64toi32_i32$2;
  }
  label$110 : {
   $6 = HEAP32[($5 + 18340 | 0) >> 2] | 0;
   if (!($6 & 1024 | 0)) {
    break label$110
   }
   HEAP16[($7 + 40 | 0) >> 1] = HEAPU16[($5 + 18464 | 0) >> 1] | 0;
   i64toi32_i32$0 = $5 + 18456 | 0;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $1560 = i64toi32_i32$2;
   i64toi32_i32$2 = $7 + 32 | 0;
   HEAP32[i64toi32_i32$2 >> 2] = $1560;
   HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$0 = $5 + 18448 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $1565 = i64toi32_i32$1;
   i64toi32_i32$1 = $7 + 24 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $1565;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$0 = $5 + 18440 | 0;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $1569 = i64toi32_i32$2;
   i64toi32_i32$2 = $7;
   HEAP32[($7 + 16 | 0) >> 2] = $1569;
   HEAP32[($7 + 20 | 0) >> 2] = i64toi32_i32$1;
   $6 = HEAP32[($5 + 18340 | 0) >> 2] | 0;
  }
  label$111 : {
   if (!($6 & 8 | 0)) {
    break label$111
   }
   $21 = HEAPU8[($5 + 18401 | 0) >> 0] | 0;
   $2 = HEAP32[($7 + 260 | 0) >> 2] | 0;
   label$112 : {
    $23 = HEAP32[($5 + 18352 | 0) >> 2] | 0;
    if (!$23) {
     break label$112
    }
    if (!((($2 << 8 | 0) >> 24 | 0) & $23 | 0)) {
     break label$111
    }
   }
   HEAP8[($7 + 222 | 0) >> 0] = $21;
   HEAP32[($7 + 260 | 0) >> 2] = $2 & -917505 | 0;
   $6 = HEAP32[($5 + 18340 | 0) >> 2] | 0;
  }
  label$113 : {
   if (!($6 & 32 | 0)) {
    break label$113
   }
   ImGui__FocusWindow_28ImGuiWindow__29($7 | 0);
  }
  label$114 : {
   if (!(HEAPU8[($7 + 225 | 0) >> 0] | 0)) {
    break label$114
   }
   HEAP32[($7 + 260 | 0) >> 2] = (HEAP32[($7 + 260 | 0) >> 2] | 0) & -134744073 | 0;
  }
  label$115 : {
   label$116 : {
    label$117 : {
     label$118 : {
      label$119 : {
       if ($4) {
        break label$119
       }
       i64toi32_i32$2 = $7;
       i64toi32_i32$1 = -8388609;
       HEAP32[($7 + 580 | 0) >> 2] = -8388609;
       HEAP32[($7 + 584 | 0) >> 2] = i64toi32_i32$1;
       HEAP8[($7 + 219 | 0) >> 0] = 1;
       i64toi32_i32$2 = $7 + 588 | 0;
       i64toi32_i32$1 = 2139095039;
       HEAP32[i64toi32_i32$2 >> 2] = 2139095039;
       HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
       HEAP8[($7 + 229 | 0) >> 0] = ($1 | 0) != (0 | 0);
       $29 = HEAP8[($7 + 257 | 0) >> 0] | 0;
       label$120 : {
        $6 = HEAP32[($7 + 284 | 0) >> 2] | 0;
        if (($6 | 0) > (0 | 0)) {
         break label$120
        }
        $4 = $6 - ((0 - $6 | 0) >>> 1 | 0) | 0;
        $4 = $6 ? (($4 | 0) > (1 | 0) ? $4 : 1) : 8;
        $6 = $4 << 2 | 0;
        label$121 : {
         $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
         if (!$2) {
          break label$121
         }
         $2 = $2 + 184 | 0;
         HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1 | 0;
        }
        $6 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($6, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
        label$122 : {
         $2 = HEAP32[($7 + 288 | 0) >> 2] | 0;
         if (!$2) {
          break label$122
         }
         __memcpy($6 | 0, $2 | 0, (HEAP32[($7 + 280 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
         label$123 : {
          $2 = HEAP32[($7 + 288 | 0) >> 2] | 0;
          if (!$2) {
           break label$123
          }
          $21 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
          if (!$21) {
           break label$123
          }
          $21 = $21 + 184 | 0;
          HEAP32[$21 >> 2] = (HEAP32[$21 >> 2] | 0) + -1 | 0;
         }
         FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($2, HEAP32[(0 + 92728 | 0) >> 2] | 0);
        }
        HEAP32[($7 + 284 | 0) >> 2] = $4;
        HEAP32[($7 + 288 | 0) >> 2] = $6;
       }
       HEAP32[($7 + 280 | 0) >> 2] = 1;
       ImDrawList___ResetForNewFrame_28_29(HEAP32[($7 + 672 | 0) >> 2] | 0 | 0);
       HEAP32[($7 + 456 | 0) >> 2] = -1;
       label$124 : {
        if (!($8 & 536870912 | 0)) {
         break label$124
        }
        $6 = HEAP32[($7 + 672 | 0) >> 2] | 0;
        ImDrawListSplitter__Split_28ImDrawList__2c_20int_29($6 + 120 | 0 | 0, $6 | 0, 2 | 0);
        $6 = HEAP32[($7 + 672 | 0) >> 2] | 0;
        ImDrawListSplitter__SetCurrentChannel_28ImDrawList__2c_20int_29($6 + 120 | 0 | 0, $6 | 0, 1 | 0);
       }
       label$125 : {
        if (!(HEAPU8[($7 + 904 | 0) >> 0] | 0)) {
         break label$125
        }
        ImGui__GcAwakeTransientWindowBuffers_28ImGuiWindow__29($7 | 0);
       }
       label$126 : {
        label$127 : {
         label$128 : {
          label$129 : {
           $6 = HEAP32[($7 + 44 | 0) >> 2] | 0;
           if (!$6) {
            break label$129
           }
           if ((HEAP32[($6 + 108 | 0) >> 2] | 0 | 0) == ($7 | 0)) {
            break label$128
           }
          }
          if ((HEAPU8[($7 + 905 | 0) >> 0] | 0) & 1 | 0) {
           break label$128
          }
          if (!(HEAP32[($5 + 19e3 | 0) >> 2] | 0)) {
           break label$126
          }
          if (!($10 | (((HEAPU8[($7 + 10 | 0) >> 0] | 0) & 8 | 0) >>> 3 | 0) | 0)) {
           break label$127
          }
          break label$126;
         }
         if ($10) {
          break label$126
         }
        }
        $6 = HEAP32[$7 >> 2] | 0;
        if (!(strcmp($0 | 0, $6 | 0) | 0)) {
         break label$126
        }
        label$130 : {
         $2 = HEAP32[($7 + 152 | 0) >> 2] | 0;
         $4 = (strlen($0 | 0) | 0) + 1 | 0;
         if ($2 >>> 0 >= $4 >>> 0) {
          break label$130
         }
         label$131 : {
          if (!$6) {
           break label$131
          }
          $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
          if (!$2) {
           break label$131
          }
          $2 = $2 + 184 | 0;
          HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1 | 0;
         }
         FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($6, HEAP32[(0 + 92728 | 0) >> 2] | 0);
         label$132 : {
          $6 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
          if (!$6) {
           break label$132
          }
          $6 = $6 + 184 | 0;
          HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1 | 0;
         }
         $6 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($4, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
         $2 = $4;
        }
        $6 = __memcpy($6 | 0, $0 | 0, $4 | 0) | 0;
        HEAP32[($7 + 152 | 0) >> 2] = $2;
        HEAP32[$7 >> 2] = $6;
       }
       $27 = $7 + 88 | 0;
       $25 = $7 + 96 | 0;
       CalcWindowContentSizes_28ImGuiWindow__2c_20ImVec2__2c_20ImVec2__29($7 | 0, $27 | 0, $25 | 0);
       label$133 : {
        $6 = HEAP8[($7 + 256 | 0) >> 0] | 0;
        if (($6 | 0) < (1 | 0)) {
         break label$133
        }
        HEAP8[($7 + 256 | 0) >> 0] = $6 + -1 | 0;
       }
       label$134 : {
        $6 = HEAP8[($7 + 257 | 0) >> 0] | 0;
        if (($6 | 0) < (1 | 0)) {
         break label$134
        }
        HEAP8[($7 + 257 | 0) >> 0] = $6 + -1 | 0;
       }
       label$135 : {
        $6 = HEAP8[($7 + 258 | 0) >> 0] | 0;
        if (($6 | 0) < (1 | 0)) {
         break label$135
        }
        HEAP8[($7 + 258 | 0) >> 0] = $6 + -1 | 0;
       }
       label$136 : {
        if (!$10) {
         break label$136
        }
        if ($20 & $19 | 0) {
         break label$136
        }
        HEAP8[($7 + 257 | 0) >> 0] = 1;
       }
       label$137 : {
        if (($12 & ($8 & 100663296 | 0 | 0) != (0 | 0) | 0 | 0) != (1 | 0)) {
         break label$137
        }
        HEAP8[($7 + 257 | 0) >> 0] = 1;
        if (!($8 & 64 | 0)) {
         break label$137
        }
        label$138 : {
         if ($20) {
          break label$138
         }
         HEAP32[($7 + 72 | 0) >> 2] = 0;
         HEAP32[($7 + 80 | 0) >> 2] = 0;
        }
        label$139 : {
         if ($19) {
          break label$139
         }
         HEAP32[($7 + 76 | 0) >> 2] = 0;
         HEAP32[($7 + 84 | 0) >> 2] = 0;
        }
        i64toi32_i32$2 = $27;
        i64toi32_i32$1 = 0;
        HEAP32[i64toi32_i32$2 >> 2] = 0;
        HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
        i64toi32_i32$1 = 0;
        HEAP32[i64toi32_i32$2 >> 2] = 0;
        HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
       }
       $6 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
       HEAP32[($7 + 60 | 0) >> 2] = -1;
       $4 = HEAP32[($6 + 18584 | 0) >> 2] | 0;
       $2 = HEAP32[$4 >> 2] | 0;
       label$140 : {
        if ((HEAPU8[($6 + 15477 | 0) >> 0] | 0) & 4 | 0) {
         break label$140
        }
        label$141 : {
         if (!(HEAPU8[($7 + 218 | 0) >> 0] | 0)) {
          break label$141
         }
         $4 = HEAP32[($7 + 44 | 0) >> 2] | 0;
         if ((HEAP32[($4 + 108 | 0) >> 2] | 0 | 0) != ($7 | 0)) {
          break label$141
         }
         i64toi32_i32$2 = $4;
         i64toi32_i32$1 = 0;
         HEAP32[($4 + 16 | 0) >> 2] = 0;
         HEAP32[($4 + 20 | 0) >> 2] = i64toi32_i32$1;
        }
        HEAP32[($7 + 44 | 0) >> 2] = $2;
        HEAP32[($7 + 48 | 0) >> 2] = HEAP32[$2 >> 2] | 0;
        HEAP8[($7 + 218 | 0) >> 0] = (HEAP32[($2 + 108 | 0) >> 2] | 0 | 0) == ($7 | 0);
        break label$116;
       }
       $26 = HEAP32[($7 + 8 | 0) >> 2] | 0;
       HEAP8[($7 + 218 | 0) >> 0] = 0;
       label$142 : {
        $30 = $26 & 100663296 | 0;
        if (!$30) {
         break label$142
        }
        if (!(HEAPU8[($7 + 225 | 0) >> 0] | 0)) {
         break label$142
        }
        i64toi32_i32$2 = $7;
        i64toi32_i32$1 = 0;
        HEAP32[($7 + 44 | 0) >> 2] = 0;
        HEAP32[($7 + 48 | 0) >> 2] = i64toi32_i32$1;
       }
       label$143 : {
        $23 = HEAP32[($6 + 18340 | 0) >> 2] | 0;
        if ($23 & 256 | 0) {
         break label$143
        }
        if (HEAP32[($7 + 44 | 0) >> 2] | 0) {
         break label$143
        }
        label$144 : {
         $21 = HEAP32[($7 + 820 | 0) >> 2] | 0;
         if (!$21) {
          break label$144
         }
         label$145 : {
          if (!(HEAPU8[($21 + 227 | 0) >> 0] | 0)) {
           break label$145
          }
          if (!(HEAPU8[($21 + 220 | 0) >> 0] | 0)) {
           break label$144
          }
         }
         $21 = HEAP32[($21 + 44 | 0) >> 2] | 0;
         HEAP32[($7 + 44 | 0) >> 2] = $21;
         if ($21) {
          break label$143
         }
        }
        $16 = HEAP32[($7 + 48 | 0) >> 2] | 0;
        if (!$16) {
         break label$143
        }
        $21 = 0;
        label$146 : {
         $22 = HEAP32[($6 + 18576 | 0) >> 2] | 0;
         if (($22 | 0) <= (0 | 0)) {
          break label$146
         }
         label$147 : {
          label$148 : while (1) {
           $28 = HEAP32[($4 + ($21 << 2 | 0) | 0) >> 2] | 0;
           if ((HEAP32[$28 >> 2] | 0 | 0) == ($16 | 0)) {
            break label$147
           }
           $21 = $21 + 1 | 0;
           if (($21 | 0) == ($22 | 0)) {
            break label$146
           }
           continue label$148;
          };
         }
         HEAP32[($7 + 44 | 0) >> 2] = $28;
         break label$143;
        }
        HEAP32[($7 + 44 | 0) >> 2] = 0;
        if (Math_fround(HEAPF32[($7 + 52 | 0) >> 2]) == Math_fround(3402823466385288598117041.0e14)) {
         break label$143
        }
        if (Math_fround(HEAPF32[($7 + 56 | 0) >> 2]) == Math_fround(3402823466385288598117041.0e14)) {
         break label$143
        }
        (wasm2js_i32$0 = $7, wasm2js_i32$1 = ImGui__AddUpdateViewport_28ImGuiWindow__2c_20unsigned_20int_2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20int_29($7 | 0, HEAP32[($7 + 4 | 0) >> 2] | 0 | 0, $7 + 52 | 0 | 0, $7 + 72 | 0 | 0, 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 44 | 0) >> 2] = wasm2js_i32$1;
        $23 = HEAP32[($6 + 18340 | 0) >> 2] | 0;
       }
       label$149 : {
        label$150 : {
         label$151 : {
          label$152 : {
           label$153 : {
            $28 = $23 & 256 | 0;
            if (!$28) {
             break label$153
            }
            $21 = 0;
            $23 = HEAP32[($6 + 18432 | 0) >> 2] | 0;
            label$154 : {
             $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
             $16 = HEAP32[($4 + 18576 | 0) >> 2] | 0;
             if (($16 | 0) < (1 | 0)) {
              break label$154
             }
             $22 = HEAP32[($4 + 18584 | 0) >> 2] | 0;
             $4 = 0;
             label$155 : while (1) {
              $21 = HEAP32[($22 + ($4 << 2 | 0) | 0) >> 2] | 0;
              if ((HEAP32[$21 >> 2] | 0 | 0) == ($23 | 0)) {
               break label$154
              }
              $4 = $4 + 1 | 0;
              if (($4 | 0) != ($16 | 0)) {
               continue label$155
              }
              break label$155;
             };
             $21 = 0;
            }
            HEAP32[($7 + 48 | 0) >> 2] = $23;
            HEAP32[($7 + 44 | 0) >> 2] = $21;
            break label$152;
           }
           label$156 : {
            if (!($26 & 285212672 | 0)) {
             break label$156
            }
            $21 = HEAP32[((HEAP32[($7 + 820 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0;
            HEAP32[($7 + 44 | 0) >> 2] = $21;
            break label$152;
           }
           label$157 : {
            $4 = HEAP32[($7 + 932 | 0) >> 2] | 0;
            if (!$4) {
             break label$157
            }
            $4 = HEAP32[($4 + 112 | 0) >> 2] | 0;
            if (!$4) {
             break label$157
            }
            $21 = HEAP32[($4 + 44 | 0) >> 2] | 0;
            HEAP32[($7 + 44 | 0) >> 2] = $21;
            break label$152;
           }
           label$158 : {
            if (!($26 & 33554432 | 0)) {
             break label$158
            }
            $21 = HEAP32[($6 + 18596 | 0) >> 2] | 0;
            HEAP32[($7 + 44 | 0) >> 2] = $21;
            break label$152;
           }
           label$159 : {
            label$160 : {
             $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
             if (HEAPU8[($4 + 100 | 0) >> 0] | 0) {
              break label$160
             }
             if (!((HEAPU8[($7 + 25 | 0) >> 0] | 0) & 8 | 0)) {
              break label$159
             }
            }
            if (!((HEAPU8[($4 + 15477 | 0) >> 0] | 0) & 4 | 0)) {
             break label$159
            }
            if ((HEAPU8[($7 + 905 | 0) >> 0] | 0) & 1 | 0) {
             break label$159
            }
            $21 = HEAP32[($7 + 8 | 0) >> 2] | 0;
            if ($21 & 318767104 | 0) {
             break label$159
            }
            if (($21 & 201326592 | 0 | 0) == (67108864 | 0)) {
             break label$159
            }
            $21 = ImGui__AddUpdateViewport_28ImGuiWindow__2c_20unsigned_20int_2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20int_29($7 | 0, HEAP32[($7 + 4 | 0) >> 2] | 0 | 0, $7 + 64 | 0 | 0, $7 + 72 | 0 | 0, 0 | 0) | 0;
            HEAP32[($7 + 44 | 0) >> 2] = $21;
            break label$152;
           }
           label$161 : {
            $21 = HEAP32[($6 + 16128 | 0) >> 2] | 0;
            if (!$21) {
             break label$161
            }
            if ((HEAP32[($21 + 836 | 0) >> 2] | 0 | 0) != ($7 | 0)) {
             break label$161
            }
            if (!(Math_fround(HEAPF32[($4 + 3520 | 0) >> 2]) >= Math_fround(-256.0e3))) {
             break label$161
            }
            if (!(Math_fround(HEAPF32[($4 + 3524 | 0) >> 2]) >= Math_fround(-256.0e3))) {
             break label$161
            }
            $4 = HEAP32[($7 + 44 | 0) >> 2] | 0;
            if (!$4) {
             break label$151
            }
            if ((HEAP32[($4 + 108 | 0) >> 2] | 0 | 0) != ($7 | 0)) {
             break label$149
            }
            $21 = ImGui__AddUpdateViewport_28ImGuiWindow__2c_20unsigned_20int_2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20int_29($7 | 0, HEAP32[($7 + 4 | 0) >> 2] | 0 | 0, $7 + 64 | 0 | 0, $7 + 72 | 0 | 0, 0 | 0) | 0;
            HEAP32[($7 + 44 | 0) >> 2] = $21;
            break label$152;
           }
           $21 = HEAP32[($7 + 44 | 0) >> 2] | 0;
           if (!$21) {
            break label$151
           }
           if ((HEAP32[($21 + 108 | 0) >> 2] | 0 | 0) != ($7 | 0)) {
            break label$149
           }
           label$162 : {
            if (!(HEAP32[($6 + 16192 | 0) >> 2] | 0)) {
             break label$162
            }
            if (!(HEAPU8[($6 + 16205 | 0) >> 0] | 0)) {
             break label$149
            }
           }
           ImGui__UpdateTryMergeWindowIntoHostViewport_28ImGuiWindow__2c_20ImGuiViewportP__29($7 | 0, HEAP32[(HEAP32[($4 + 18584 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
           $21 = HEAP32[($7 + 44 | 0) >> 2] | 0;
          }
          if ($21) {
           break label$150
          }
         }
         if (ImGui__UpdateTryMergeWindowIntoHostViewport_28ImGuiWindow__2c_20ImGuiViewportP__29($7 | 0, $2 | 0) | 0) {
          break label$150
         }
         (wasm2js_i32$0 = $7, wasm2js_i32$1 = ImGui__AddUpdateViewport_28ImGuiWindow__2c_20unsigned_20int_2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20int_29($7 | 0, HEAP32[($7 + 4 | 0) >> 2] | 0 | 0, $7 + 64 | 0 | 0, $7 + 72 | 0 | 0, 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 44 | 0) >> 2] = wasm2js_i32$1;
        }
        if ($28) {
         break label$117
        }
       }
       label$163 : {
        if (!$30) {
         break label$163
        }
        label$164 : {
         label$165 : {
          if (!($26 & 33554432 | 0)) {
           break label$165
          }
          $4 = $6 + 3520 | 0;
          break label$164;
         }
         $4 = (Math_imul(HEAP32[($6 + 18560 | 0) >> 2] | 0, 40) + (HEAP32[($6 + 18568 | 0) >> 2] | 0) | 0) + -8 | 0;
        }
        $2 = 0;
        label$166 : {
         if (HEAPU8[($6 + 18710 | 0) >> 0] | 0) {
          break label$166
         }
         if (!(HEAPU8[($6 + 18711 | 0) >> 0] | 0)) {
          break label$166
         }
         $2 = (HEAP32[($6 + 18648 | 0) >> 2] | 0 | 0) != (0 | 0);
        }
        label$167 : {
         if (!(HEAPU8[($7 + 225 | 0) >> 0] | 0 | ($26 & 301989888 | 0) | 0)) {
          break label$167
         }
         $13 = Math_fround(HEAPF32[$4 >> 2]);
         $37 = Math_fround(HEAPF32[($4 + 4 | 0) >> 2]);
         $6 = $13 >= Math_fround(-256.0e3) & $37 >= Math_fround(-256.0e3) | 0;
         if (!($6 | $2 | 0)) {
          break label$167
         }
         label$168 : {
          if (($2 | ($6 ^ 1 | 0) | 0 | 0) != (1 | 0)) {
           break label$168
          }
          ImGui__NavCalcPreferredRefPos_28_29($3 + 256 | 0 | 0);
          $37 = Math_fround(HEAPF32[($3 + 260 | 0) >> 2]);
          $13 = Math_fround(HEAPF32[($3 + 256 | 0) >> 2]);
         }
         $6 = 0;
         label$169 : {
          $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
          $2 = HEAP32[($4 + 14348 | 0) >> 2] | 0;
          if (($2 | 0) < (1 | 0)) {
           break label$169
          }
          $21 = HEAP32[($4 + 14356 | 0) >> 2] | 0;
          label$170 : while (1) {
           label$171 : {
            $4 = $21 + Math_imul($6, 36) | 0;
            $15 = Math_fround(HEAPF32[$4 >> 2]);
            if (!($15 <= $13)) {
             break label$171
            }
            $36 = Math_fround(HEAPF32[($4 + 4 | 0) >> 2]);
            if (!($36 <= $37)) {
             break label$171
            }
            if (!(Math_fround($15 + Math_fround(HEAPF32[($4 + 8 | 0) >> 2])) > $13)) {
             break label$171
            }
            if (!(Math_fround($36 + Math_fround(HEAPF32[($4 + 12 | 0) >> 2])) > $37)) {
             break label$171
            }
            HEAP32[($7 + 60 | 0) >> 2] = $6;
            break label$117;
           }
           $6 = $6 + 1 | 0;
           if (($6 | 0) != ($2 | 0)) {
            continue label$170
           }
           break label$170;
          };
         }
         HEAP32[($7 + 60 | 0) >> 2] = -1;
         break label$117;
        }
        HEAP32[($7 + 60 | 0) >> 2] = HEAP16[((HEAP32[($7 + 44 | 0) >> 2] | 0) + 104 | 0) >> 1] | 0;
        break label$117;
       }
       label$172 : {
        $2 = HEAP32[($7 + 44 | 0) >> 2] | 0;
        if ($2) {
         break label$172
        }
        $4 = $26 & 16777216 | 0;
        break label$118;
       }
       $4 = $26 & 16777216 | 0;
       $21 = HEAP32[($2 + 108 | 0) >> 2] | 0;
       if (($21 | 0) == ($7 | 0)) {
        break label$118
       }
       if (!$21) {
        break label$118
       }
       if ($4) {
        break label$118
       }
       $4 = 0;
       if (HEAP32[($7 + 932 | 0) >> 2] | 0) {
        break label$118
       }
       label$173 : {
        if (!((HEAPU8[($7 + 11 | 0) >> 0] | 0) & 32 | 0)) {
         break label$173
        }
        if ((HEAP32[($2 + 76 | 0) >> 2] | 0 | 0) >= (HEAP32[($6 + 16016 | 0) >> 2] | 0 | 0)) {
         break label$173
        }
        if (((HEAPU8[($7 + 905 | 0) >> 0] | 0) & 5 | 0 | 0) == (1 | 0)) {
         break label$173
        }
        label$174 : {
         if (!((HEAPU8[($6 + 23536 | 0) >> 0] | 0) & 128 | 0)) {
          break label$174
         }
         $6 = HEAP32[$7 >> 2] | 0;
         $4 = HEAP32[$2 >> 2] | 0;
         HEAP32[($3 + 56 | 0) >> 2] = HEAP32[$21 >> 2] | 0;
         HEAP32[($3 + 52 | 0) >> 2] = $4;
         HEAP32[($3 + 48 | 0) >> 2] = $6;
         ImGui__DebugLog_28char_20const__2c_20____29(70159 | 0, $3 + 48 | 0 | 0);
         $2 = HEAP32[($7 + 44 | 0) >> 2] | 0;
        }
        HEAP32[($2 + 108 | 0) >> 2] = $7;
        $6 = HEAP32[($7 + 4 | 0) >> 2] | 0;
        HEAP32[($2 + 84 | 0) >> 2] = 0;
        HEAP32[$2 >> 2] = $6;
        break label$117;
       }
       if (ImGui__UpdateTryMergeWindowIntoHostViewport_28ImGuiWindow__2c_20ImGuiViewportP__29($7 | 0, HEAP32[(HEAP32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 18584 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0) {
        break label$117
       }
       (wasm2js_i32$0 = $7, wasm2js_i32$1 = ImGui__AddUpdateViewport_28ImGuiWindow__2c_20unsigned_20int_2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20int_29($7 | 0, HEAP32[($7 + 4 | 0) >> 2] | 0 | 0, $7 + 64 | 0 | 0, $7 + 72 | 0 | 0, 32 | 0) | 0), HEAP32[(wasm2js_i32$0 + 44 | 0) >> 2] = wasm2js_i32$1;
       break label$117;
      }
      $6 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      label$175 : {
       label$176 : {
        $4 = HEAP32[($7 + 44 | 0) >> 2] | 0;
        if ($4) {
         break label$176
        }
        if (!(HEAP32[($6 + 18592 | 0) >> 2] | 0)) {
         break label$175
        }
        i64toi32_i32$2 = $6;
        i64toi32_i32$1 = 0;
        HEAP32[($6 + 18588 | 0) >> 2] = 1065353216;
        HEAP32[($6 + 18592 | 0) >> 2] = i64toi32_i32$1;
        break label$175;
       }
       HEAP32[($4 + 76 | 0) >> 2] = HEAP32[($6 + 16016 | 0) >> 2] | 0;
       if ((HEAP32[($6 + 18592 | 0) >> 2] | 0 | 0) == ($4 | 0)) {
        break label$175
       }
       $13 = Math_fround(HEAPF32[($4 + 40 | 0) >> 2]);
       HEAP32[($6 + 18592 | 0) >> 2] = $4;
       HEAPF32[($6 + 18588 | 0) >> 2] = $13;
       $2 = HEAP32[($6 + 14320 | 0) >> 2] | 0;
       if (!$2) {
        break label$175
       }
       FUNCTION_TABLE[$2 | 0]($4);
       $6 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      }
      HEAP32[($6 + 16116 | 0) >> 2] = $7;
      label$177 : {
       label$178 : {
        $4 = HEAP32[($7 + 456 | 0) >> 2] | 0;
        if (($4 | 0) != (-1 | 0)) {
         break label$178
        }
        $4 = 0;
        break label$177;
       }
       $4 = (HEAP32[($6 + 19228 | 0) >> 2] | 0) + Math_imul($4, 488) | 0;
      }
      HEAP32[($6 + 19200 | 0) >> 2] = $4;
      $13 = Math_fround(Math_fround(Math_fround(HEAPF32[($6 + 15492 | 0) >> 2]) * Math_fround(HEAPF32[($7 + 660 | 0) >> 2])) * Math_fround(HEAPF32[($7 + 664 | 0) >> 2]));
      label$179 : {
       $4 = HEAP32[($7 + 820 | 0) >> 2] | 0;
       if (!$4) {
        break label$179
       }
       $13 = Math_fround($13 * Math_fround(HEAPF32[($4 + 660 | 0) >> 2]));
      }
      HEAPF32[($6 + 15488 | 0) >> 2] = $13;
      HEAPF32[($6 + 15508 | 0) >> 2] = $13;
      $6 = $8;
      break label$115;
     }
     if ((HEAP32[($7 + 60 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
      break label$117
     }
     if ($4) {
      break label$117
     }
     HEAP32[($7 + 60 | 0) >> 2] = HEAP16[($2 + 104 | 0) >> 1] | 0;
    }
    $2 = HEAP32[($7 + 44 | 0) >> 2] | 0;
    HEAP8[($7 + 218 | 0) >> 0] = (HEAP32[($2 + 108 | 0) >> 2] | 0 | 0) == ($7 | 0);
    HEAP32[($7 + 48 | 0) >> 2] = HEAP32[$2 >> 2] | 0;
    $6 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   }
   HEAP32[($2 + 76 | 0) >> 2] = HEAP32[($6 + 16016 | 0) >> 2] | 0;
   label$180 : {
    if ((HEAP32[($6 + 18592 | 0) >> 2] | 0 | 0) == ($2 | 0)) {
     break label$180
    }
    $13 = Math_fround(HEAPF32[($2 + 40 | 0) >> 2]);
    HEAP32[($6 + 18592 | 0) >> 2] = $2;
    HEAPF32[($6 + 18588 | 0) >> 2] = $13;
    $6 = HEAP32[($6 + 14320 | 0) >> 2] | 0;
    if (!$6) {
     break label$180
    }
    FUNCTION_TABLE[$6 | 0]($2);
   }
   $13 = Math_fround(1.0);
   label$181 : {
    if (!((HEAPU8[($5 + 9 | 0) >> 0] | 0) & 128 | 0)) {
     break label$181
    }
    $13 = Math_fround(HEAPF32[((HEAP32[($7 + 44 | 0) >> 2] | 0) + 40 | 0) >> 2]);
   }
   HEAPF32[($7 + 664 | 0) >> 2] = $13;
   $6 = 0;
   $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   HEAP32[($4 + 16116 | 0) >> 2] = $7;
   label$182 : {
    $2 = HEAP32[($7 + 456 | 0) >> 2] | 0;
    if (($2 | 0) == (-1 | 0)) {
     break label$182
    }
    $6 = (HEAP32[($4 + 19228 | 0) >> 2] | 0) + Math_imul($2, 488) | 0;
   }
   HEAP32[($4 + 19200 | 0) >> 2] = $6;
   $36 = Math_fround(HEAPF32[($7 + 660 | 0) >> 2]);
   $15 = Math_fround($13 * Math_fround(Math_fround(HEAPF32[($4 + 15492 | 0) >> 2]) * $36));
   label$183 : {
    $21 = HEAP32[($7 + 820 | 0) >> 2] | 0;
    if (!$21) {
     break label$183
    }
    $15 = Math_fround($15 * Math_fround(HEAPF32[($21 + 660 | 0) >> 2]));
   }
   HEAPF32[($4 + 15488 | 0) >> 2] = $15;
   HEAPF32[($4 + 15508 | 0) >> 2] = $15;
   label$184 : {
    label$185 : {
     $6 = HEAP32[($7 + 8 | 0) >> 2] | 0;
     $2 = $6 & 16777216 | 0;
     if (!$2) {
      break label$185
     }
     $23 = $5 + 14444 | 0;
     break label$184;
    }
    $23 = $5 + 14416 | 0;
    $23 = $6 & 100663296 | 0 ? ($6 & 134217728 | 0 ? $23 : $5 + 14452 | 0) : $23;
   }
   $15 = Math_fround(HEAPF32[$23 >> 2]);
   HEAPF32[($7 + 124 | 0) >> 2] = $15;
   $16 = (HEAPU8[($7 + 905 | 0) >> 0] | 0) & 1 | 0;
   label$186 : {
    label$187 : {
     if (!$2) {
      break label$187
     }
     if ($16) {
      break label$187
     }
     if ($6 & 67174400 | 0) {
      break label$187
     }
     $37 = Math_fround(0.0);
     if ($15 != Math_fround(0.0)) {
      break label$187
     }
     label$188 : {
      if (!($6 & 1024 | 0)) {
       break label$188
      }
      $37 = Math_fround(HEAPF32[($5 + 14408 | 0) >> 2]);
     }
     HEAP32[($7 + 112 | 0) >> 2] = 0;
     HEAPF32[($7 + 116 | 0) >> 2] = $37;
     $15 = Math_fround(0.0);
     break label$186;
    }
    i64toi32_i32$0 = $5 + 14404 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $14 = i64toi32_i32$1;
    $14$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $7;
    HEAP32[($7 + 112 | 0) >> 2] = $14;
    HEAP32[($7 + 116 | 0) >> 2] = i64toi32_i32$2;
    $15 = (wasm2js_scratch_store_i32(2, $14), wasm2js_scratch_load_f32());
   }
   $37 = Math_fround(HEAPF32[($5 + 14472 | 0) >> 2]);
   $15 = $15 >= $37 ? $15 : $37;
   $37 = Math_fround(HEAPF32[($5 + 18468 | 0) >> 2]);
   HEAPF32[($7 + 392 | 0) >> 2] = $15 >= $37 ? $15 : $37;
   $38 = Math_fround(HEAPF32[($5 + 18472 | 0) >> 2]);
   HEAPF32[($7 + 396 | 0) >> 2] = $38;
   $23 = $6 & 1 | 0;
   label$189 : {
    label$190 : {
     if ($6 & 33 | 0) {
      break label$190
     }
     if ($16) {
      break label$190
     }
     $37 = Math_fround(HEAPF32[($7 + 68 | 0) >> 2]);
     $39 = Math_fround(HEAPF32[($7 + 80 | 0) >> 2]);
     $40 = Math_fround(HEAPF32[($7 + 64 | 0) >> 2]);
     $15 = Math_fround(0.0);
     label$191 : {
      if ($23) {
       break label$191
      }
      $15 = Math_fround($13 * Math_fround($36 * Math_fround(HEAPF32[($4 + 15492 | 0) >> 2])));
      label$192 : {
       if (!$21) {
        break label$192
       }
       $15 = Math_fround($15 * Math_fround(HEAPF32[($21 + 660 | 0) >> 2]));
      }
      $41 = Math_fround(HEAPF32[($4 + 14460 | 0) >> 2]);
      $15 = Math_fround(Math_fround($41 + $41) + $15);
     }
     i64toi32_i32$0 = $7;
     i64toi32_i32$2 = HEAP32[($7 + 64 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($7 + 68 | 0) >> 2] | 0;
     $14 = i64toi32_i32$2;
     $14$hi = i64toi32_i32$1;
     HEAPF32[($3 + 268 | 0) >> 2] = Math_fround($37 + $15);
     HEAPF32[($3 + 264 | 0) >> 2] = Math_fround($40 + $39);
     i64toi32_i32$2 = $3;
     HEAP32[($3 + 256 | 0) >> 2] = $14;
     HEAP32[($3 + 260 | 0) >> 2] = i64toi32_i32$1;
     label$193 : {
      if ((HEAP32[($5 + 16120 | 0) >> 2] | 0 | 0) != ($7 | 0)) {
       break label$193
      }
      if (HEAP32[($5 + 16172 | 0) >> 2] | 0) {
       break label$193
      }
      if (HEAP32[($5 + 16176 | 0) >> 2] | 0) {
       break label$193
      }
      if (!(ImGui__IsMouseHoveringRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20bool_29($3 + 256 | 0 | 0, $3 + 264 | 0 | 0, 1 | 0) | 0)) {
       break label$193
      }
      if ((HEAPU16[($5 + 14090 | 0) >> 1] | 0 | 0) != (2 | 0)) {
       break label$193
      }
      HEAP8[($7 + 223 | 0) >> 0] = 1;
     }
     $16 = $10;
     if (!(HEAPU8[($7 + 223 | 0) >> 0] | 0)) {
      break label$189
     }
     $16 = HEAPU8[($7 + 222 | 0) >> 0] | 0;
     HEAP8[($7 + 222 | 0) >> 0] = $16 ^ 1 | 0;
     $16 = $10 | ($16 | 0) != (0 | 0) | 0;
     if ($6 & 256 | 0) {
      break label$189
     }
     if (!(Math_fround(HEAPF32[($4 + 23384 | 0) >> 2]) <= Math_fround(0.0))) {
      break label$189
     }
     HEAPF32[($4 + 23384 | 0) >> 2] = Math_fround(HEAPF32[($4 + 28 | 0) >> 2]);
     break label$189;
    }
    HEAP8[($7 + 222 | 0) >> 0] = 0;
    $16 = $10;
   }
   HEAP8[($7 + 223 | 0) >> 0] = 0;
   HEAP32[($7 + 136 | 0) >> 2] = 0;
   HEAP32[($7 + 128 | 0) >> 2] = 0;
   $15 = Math_fround(0.0);
   $37 = Math_fround(0.0);
   label$194 : {
    if ($23) {
     break label$194
    }
    $37 = Math_fround(Math_fround($36 * Math_fround(HEAPF32[($4 + 15492 | 0) >> 2])) * $13);
    label$195 : {
     if (!$21) {
      break label$195
     }
     $37 = Math_fround($37 * Math_fround(HEAPF32[($21 + 660 | 0) >> 2]));
    }
    $39 = Math_fround(HEAPF32[($4 + 14460 | 0) >> 2]);
    $37 = Math_fround(Math_fround($39 + $39) + $37);
   }
   $22 = $7 + 212 | 0;
   label$196 : {
    if (!($6 & 1024 | 0)) {
     break label$196
    }
    $13 = Math_fround(Math_fround($36 * Math_fround(HEAPF32[($4 + 15492 | 0) >> 2])) * $13);
    label$197 : {
     if (!$21) {
      break label$197
     }
     $13 = Math_fround($13 * Math_fround(HEAPF32[($21 + 660 | 0) >> 2]));
    }
    $15 = Math_fround(HEAPF32[($4 + 14460 | 0) >> 2]);
    $15 = Math_fround(Math_fround($15 + $15) + Math_fround($38 + $13));
   }
   $42 = Math_fround(HEAPF32[$22 >> 2]);
   $43 = Math_fround(HEAPF32[($7 + 208 | 0) >> 2]);
   i64toi32_i32$2 = $7;
   i64toi32_i32$1 = 0;
   HEAP32[($7 + 208 | 0) >> 2] = 0;
   HEAP32[($7 + 212 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($7 + 140 | 0) >> 2] = 0;
   HEAPF32[($7 + 132 | 0) >> 2] = Math_fround($37 + $15);
   CalcWindowAutoFitSize_28ImGuiWindow__2c_20ImVec2_20const__29($3 + 136 | 0 | 0, $7 | 0, $25 | 0);
   label$198 : {
    label$199 : {
     if (!($6 & 64 | 0)) {
      break label$199
     }
     if (HEAPU8[($7 + 222 | 0) >> 0] | 0) {
      break label$199
     }
     $22 = $10;
     label$200 : {
      if ($20) {
       break label$200
      }
      HEAPF32[($7 + 80 | 0) >> 2] = Math_fround(HEAPF32[($3 + 136 | 0) >> 2]);
      $22 = 1;
     }
     if ($19) {
      break label$198
     }
     HEAPF32[($7 + 84 | 0) >> 2] = Math_fround(HEAPF32[($3 + 140 | 0) >> 2]);
     $16 = 1;
     break label$198;
    }
    label$201 : {
     label$202 : {
      if ((HEAP8[($7 + 248 | 0) >> 0] | 0 | 0) > (0 | 0)) {
       break label$202
      }
      $22 = $10;
      if ((HEAP8[($7 + 249 | 0) >> 0] | 0 | 0) > (0 | 0)) {
       break label$201
      }
      $22 = $10;
      break label$198;
     }
     $22 = $10;
     if ($20) {
      break label$201
     }
     label$203 : {
      label$204 : {
       if (!(HEAPU8[($7 + 251 | 0) >> 0] | 0)) {
        break label$204
       }
       $13 = Math_fround(HEAPF32[($7 + 80 | 0) >> 2]);
       $15 = Math_fround(HEAPF32[($3 + 136 | 0) >> 2]);
       $13 = $13 >= $15 ? $13 : $15;
       break label$203;
      }
      $13 = Math_fround(HEAPF32[($3 + 136 | 0) >> 2]);
     }
     HEAPF32[($7 + 80 | 0) >> 2] = $13;
     $22 = 1;
    }
    label$205 : {
     if ($19) {
      break label$205
     }
     if ((HEAP8[($7 + 249 | 0) >> 0] | 0 | 0) < (1 | 0)) {
      break label$205
     }
     label$206 : {
      label$207 : {
       if (!(HEAPU8[($7 + 251 | 0) >> 0] | 0)) {
        break label$207
       }
       $13 = Math_fround(HEAPF32[($7 + 84 | 0) >> 2]);
       $15 = Math_fround(HEAPF32[($3 + 140 | 0) >> 2]);
       $13 = $13 >= $15 ? $13 : $15;
       break label$206;
      }
      $13 = Math_fround(HEAPF32[($3 + 140 | 0) >> 2]);
     }
     HEAPF32[($7 + 84 | 0) >> 2] = $13;
     $16 = 1;
    }
    if (HEAPU8[($7 + 222 | 0) >> 0] | 0) {
     break label$198
    }
    if ((HEAPU8[($7 + 9 | 0) >> 0] | 0) & 1 | 0) {
     break label$198
    }
    $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!(Math_fround(HEAPF32[($4 + 23384 | 0) >> 2]) <= Math_fround(0.0))) {
     break label$198
    }
    HEAPF32[($4 + 23384 | 0) >> 2] = Math_fround(HEAPF32[($4 + 28 | 0) >> 2]);
   }
   i64toi32_i32$0 = $7;
   i64toi32_i32$1 = HEAP32[($7 + 80 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[($7 + 84 | 0) >> 2] | 0;
   CalcWindowSizeAfterConstraint_28ImGuiWindow__2c_20ImVec2_20const__29($3 + 256 | 0 | 0, $7 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 | 0);
   i64toi32_i32$0 = $3;
   i64toi32_i32$2 = HEAP32[($3 + 256 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($3 + 260 | 0) >> 2] | 0;
   $14 = i64toi32_i32$2;
   $14$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $7;
   HEAP32[($7 + 80 | 0) >> 2] = $14;
   HEAP32[($7 + 84 | 0) >> 2] = i64toi32_i32$1;
   $13 = (wasm2js_scratch_store_i32(2, $14), wasm2js_scratch_load_f32());
   label$208 : {
    label$209 : {
     if ($2) {
      break label$209
     }
     if (!((HEAPU8[($7 + 222 | 0) >> 0] | 0) & 255 | 0)) {
      break label$209
     }
     $15 = Math_fround(HEAPF32[($7 + 68 | 0) >> 2]);
     $37 = Math_fround(HEAPF32[($7 + 64 | 0) >> 2]);
     $36 = Math_fround(0.0);
     label$210 : {
      if ((HEAPU8[($7 + 8 | 0) >> 0] | 0) & 1 | 0) {
       break label$210
      }
      $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      $36 = Math_fround(Math_fround(Math_fround(HEAPF32[($4 + 15492 | 0) >> 2]) * Math_fround(HEAPF32[($7 + 660 | 0) >> 2])) * Math_fround(HEAPF32[($7 + 664 | 0) >> 2]));
      label$211 : {
       $19 = HEAP32[($7 + 820 | 0) >> 2] | 0;
       if (!$19) {
        break label$211
       }
       $36 = Math_fround($36 * Math_fround(HEAPF32[($19 + 660 | 0) >> 2]));
      }
      $38 = Math_fround(HEAPF32[($4 + 14460 | 0) >> 2]);
      $36 = Math_fround(Math_fround($38 + $38) + $36);
     }
     $15 = Math_fround(Math_fround($15 + $36) - $15);
     $13 = Math_fround(Math_fround($37 + $13) - $37);
     break label$208;
    }
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$0 = $14;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $162 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $162 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $15 = (wasm2js_scratch_store_i32(2, $162), wasm2js_scratch_load_f32());
   }
   HEAPF32[($7 + 76 | 0) >> 2] = $15;
   $28 = $7 + 72 | 0;
   HEAPF32[$28 >> 2] = $13;
   label$212 : {
    if (!$12) {
     break label$212
    }
    HEAP32[($7 + 252 | 0) >> 2] = -1;
    if ($11 | ($6 & 201326592 | 0 | 0) != (67108864 | 0) | 0) {
     break label$212
    }
    i64toi32_i32$1 = (Math_imul(HEAP32[($5 + 18560 | 0) >> 2] | 0, 40) + (HEAP32[($5 + 18568 | 0) >> 2] | 0) | 0) + -16 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $2832 = i64toi32_i32$2;
    i64toi32_i32$2 = $7;
    HEAP32[($7 + 64 | 0) >> 2] = $2832;
    HEAP32[($7 + 68 | 0) >> 2] = i64toi32_i32$0;
   }
   $21 = $8 & 50331648 | 0;
   label$213 : {
    if (!$2) {
     break label$213
    }
    $8 = HEAP32[($9 + 436 | 0) >> 2] | 0;
    HEAP16[($7 + 236 | 0) >> 1] = $8;
    label$214 : {
     if (($8 | 0) != (HEAP32[($9 + 440 | 0) >> 2] | 0 | 0)) {
      break label$214
     }
     $4 = $8 + 1 | 0;
     label$215 : {
      label$216 : {
       if ($8) {
        break label$216
       }
       $19 = 8;
       break label$215;
      }
      $19 = (($8 | 0) / (2 | 0) | 0) + $8 | 0;
     }
     $4 = ($19 | 0) > ($4 | 0) ? $19 : $4;
     if (($8 | 0) >= ($4 | 0)) {
      break label$214
     }
     $8 = $4 << 2 | 0;
     label$217 : {
      $19 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$19) {
       break label$217
      }
      $19 = $19 + 184 | 0;
      HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1 | 0;
     }
     $8 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($8, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
     label$218 : {
      $19 = HEAP32[($9 + 444 | 0) >> 2] | 0;
      if (!$19) {
       break label$218
      }
      __memcpy($8 | 0, $19 | 0, (HEAP32[($9 + 436 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
      label$219 : {
       $19 = HEAP32[($9 + 444 | 0) >> 2] | 0;
       if (!$19) {
        break label$219
       }
       $20 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
       if (!$20) {
        break label$219
       }
       $20 = $20 + 184 | 0;
       HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) + -1 | 0;
      }
      FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($19, HEAP32[(0 + 92728 | 0) >> 2] | 0);
     }
     HEAP32[($9 + 440 | 0) >> 2] = $4;
     HEAP32[($9 + 444 | 0) >> 2] = $8;
     $8 = HEAP32[($9 + 436 | 0) >> 2] | 0;
    }
    HEAP32[((HEAP32[($9 + 444 | 0) >> 2] | 0) + ($8 << 2 | 0) | 0) >> 2] = $7;
    HEAP32[($9 + 436 | 0) >> 2] = (HEAP32[($9 + 436 | 0) >> 2] | 0) + 1 | 0;
    if ($11 | (($6 & 67108864 | 0) >>> 26 | 0) | 0) {
     break label$213
    }
    if (($21 | 0) == (50331648 | 0)) {
     break label$213
    }
    i64toi32_i32$1 = $9;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 292 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 296 | 0) >> 2] | 0;
    $2931 = i64toi32_i32$0;
    i64toi32_i32$0 = $7;
    HEAP32[($7 + 64 | 0) >> 2] = $2931;
    HEAP32[($7 + 68 | 0) >> 2] = i64toi32_i32$2;
   }
   label$220 : {
    label$221 : {
     $13 = Math_fround(HEAPF32[($7 + 264 | 0) >> 2]);
     if ($13 == Math_fround(3402823466385288598117041.0e14)) {
      break label$221
     }
     if (HEAPU8[($7 + 257 | 0) >> 0] | 0) {
      break label$221
     }
     $15 = Math_fround(HEAPF32[($7 + 268 | 0) >> 2]);
     i64toi32_i32$0 = $7 + 264 | 0;
     i64toi32_i32$2 = 2139095039;
     HEAP32[i64toi32_i32$0 >> 2] = 2139095039;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
     HEAP32[($7 + 260 | 0) >> 2] = (HEAP32[($7 + 260 | 0) >> 2] | 0) & -15 | 0;
     label$222 : {
      label$223 : {
       $13 = Math_fround($13 - Math_fround(Math_fround(HEAPF32[($7 + 72 | 0) >> 2]) * Math_fround(HEAPF32[($7 + 272 | 0) >> 2])));
       if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
        break label$223
       }
       $8 = ~~$13;
       break label$222;
      }
      $8 = -2147483648;
     }
     $37 = Math_fround(HEAPF32[($7 + 64 | 0) >> 2]);
     $36 = Math_fround($8 | 0);
     HEAPF32[($7 + 64 | 0) >> 2] = $36;
     label$224 : {
      label$225 : {
       $13 = Math_fround($15 - Math_fround(Math_fround(HEAPF32[($7 + 76 | 0) >> 2]) * Math_fround(HEAPF32[($7 + 276 | 0) >> 2])));
       if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
        break label$225
       }
       $4 = ~~$13;
       break label$224;
      }
      $4 = -2147483648;
     }
     $8 = $7 + 68 | 0;
     $13 = Math_fround(HEAPF32[$8 >> 2]);
     $15 = Math_fround($4 | 0);
     HEAPF32[$8 >> 2] = $15;
     $13 = Math_fround($15 - $13);
     label$226 : {
      $15 = Math_fround($36 - $37);
      if ($15 != Math_fround(0.0)) {
       break label$226
      }
      if ($13 == Math_fround(0.0)) {
       break label$220
      }
     }
     label$227 : {
      if ((HEAPU8[($7 + 9 | 0) >> 0] | 0) & 1 | 0) {
       break label$227
      }
      $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!(Math_fround(HEAPF32[($8 + 23384 | 0) >> 2]) <= Math_fround(0.0))) {
       break label$227
      }
      HEAPF32[($8 + 23384 | 0) >> 2] = Math_fround(HEAPF32[($8 + 28 | 0) >> 2]);
     }
     HEAPF32[($7 + 292 | 0) >> 2] = Math_fround($15 + Math_fround(HEAPF32[($7 + 292 | 0) >> 2]));
     $8 = $7 + 296 | 0;
     HEAPF32[$8 >> 2] = Math_fround($13 + Math_fround(HEAPF32[$8 >> 2]));
     $8 = $7 + 316 | 0;
     HEAPF32[$8 >> 2] = Math_fround($15 + Math_fround(HEAPF32[$8 >> 2]));
     $8 = $7 + 320 | 0;
     HEAPF32[$8 >> 2] = Math_fround($13 + Math_fround(HEAPF32[$8 >> 2]));
     $8 = $7 + 324 | 0;
     HEAPF32[$8 >> 2] = Math_fround($15 + Math_fround(HEAPF32[$8 >> 2]));
     $8 = $7 + 328 | 0;
     HEAPF32[$8 >> 2] = Math_fround($13 + Math_fround(HEAPF32[$8 >> 2]));
     $8 = $7 + 308 | 0;
     HEAPF32[$8 >> 2] = Math_fround($15 + Math_fround(HEAPF32[$8 >> 2]));
     $8 = $7 + 312 | 0;
     HEAPF32[$8 >> 2] = Math_fround($13 + Math_fround(HEAPF32[$8 >> 2]));
     break label$220;
    }
    label$228 : {
     if (!($6 & 268435456 | 0)) {
      break label$228
     }
     ImGui__FindBestWindowPosForPopup_28ImGuiWindow__29($3 + 256 | 0 | 0, $7 | 0);
     i64toi32_i32$1 = $3;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 256 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 260 | 0) >> 2] | 0;
     $3075 = i64toi32_i32$2;
     i64toi32_i32$2 = $7;
     HEAP32[($7 + 64 | 0) >> 2] = $3075;
     HEAP32[($7 + 68 | 0) >> 2] = i64toi32_i32$0;
     break label$220;
    }
    label$229 : {
     if ($11 | !($6 & 67108864 | 0) | 0) {
      break label$229
     }
     if (($29 | 0) < (1 | 0)) {
      break label$229
     }
     ImGui__FindBestWindowPosForPopup_28ImGuiWindow__29($3 + 256 | 0 | 0, $7 | 0);
     i64toi32_i32$1 = $3;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 256 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 260 | 0) >> 2] | 0;
     $3088 = i64toi32_i32$0;
     i64toi32_i32$0 = $7;
     HEAP32[($7 + 64 | 0) >> 2] = $3088;
     HEAP32[($7 + 68 | 0) >> 2] = i64toi32_i32$2;
     break label$220;
    }
    if ($11 | !($6 & 33554432 | 0) | 0) {
     break label$220
    }
    if (($21 | 0) == (50331648 | 0)) {
     break label$220
    }
    ImGui__FindBestWindowPosForPopup_28ImGuiWindow__29($3 + 256 | 0 | 0, $7 | 0);
    i64toi32_i32$1 = $3;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 256 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 260 | 0) >> 2] | 0;
    $3101 = i64toi32_i32$2;
    i64toi32_i32$2 = $7;
    HEAP32[($7 + 64 | 0) >> 2] = $3101;
    HEAP32[($7 + 68 | 0) >> 2] = i64toi32_i32$0;
   }
   $20 = ($2 | 0) != (0 | 0);
   $4 = 0;
   $8 = HEAP32[($7 + 44 | 0) >> 2] | 0;
   $19 = HEAPU8[($7 + 218 | 0) >> 0] | 0;
   label$230 : {
    label$231 : {
     label$232 : {
      if ((HEAP32[($7 + 60 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$232
      }
      if ($19 & 255 | 0) {
       break label$231
      }
      if ((HEAPU8[($8 + 5 | 0) >> 0] | 0) & 4 | 0) {
       break label$230
      }
      label$233 : {
       $13 = Math_fround(HEAPF32[($7 + 64 | 0) >> 2]);
       $15 = Math_fround(HEAPF32[($8 + 8 | 0) >> 2]);
       if (!($13 >= $15)) {
        break label$233
       }
       $37 = Math_fround(HEAPF32[($7 + 68 | 0) >> 2]);
       $36 = Math_fround(HEAPF32[($8 + 12 | 0) >> 2]);
       if (!($37 >= $36)) {
        break label$233
       }
       if (!(Math_fround($13 + Math_fround(HEAPF32[($7 + 72 | 0) >> 2])) <= Math_fround($15 + Math_fround(HEAPF32[($8 + 16 | 0) >> 2])))) {
        break label$233
       }
       if (Math_fround($37 + Math_fround(HEAPF32[($7 + 76 | 0) >> 2])) <= Math_fround($36 + Math_fround(HEAPF32[($8 + 20 | 0) >> 2]))) {
        break label$230
       }
      }
      $8 = ImGui__AddUpdateViewport_28ImGuiWindow__2c_20unsigned_20int_2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20int_29($7 | 0, HEAP32[($7 + 4 | 0) >> 2] | 0 | 0, $7 + 64 | 0 | 0, $28 | 0, 32 | 0) | 0;
      HEAP32[($7 + 44 | 0) >> 2] = $8;
      $19 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      label$234 : {
       label$235 : {
        if ($8) {
         break label$235
        }
        if (!(HEAP32[($19 + 18592 | 0) >> 2] | 0)) {
         break label$234
        }
        i64toi32_i32$2 = $19;
        i64toi32_i32$0 = 0;
        HEAP32[(i64toi32_i32$2 + 18588 | 0) >> 2] = 1065353216;
        HEAP32[(i64toi32_i32$2 + 18592 | 0) >> 2] = i64toi32_i32$0;
        break label$234;
       }
       HEAP32[($8 + 76 | 0) >> 2] = HEAP32[($19 + 16016 | 0) >> 2] | 0;
       if ((HEAP32[($19 + 18592 | 0) >> 2] | 0 | 0) == ($8 | 0)) {
        break label$234
       }
       $13 = Math_fround(HEAPF32[($8 + 40 | 0) >> 2]);
       HEAP32[($19 + 18592 | 0) >> 2] = $8;
       HEAPF32[($19 + 18588 | 0) >> 2] = $13;
       $19 = HEAP32[($19 + 14320 | 0) >> 2] | 0;
       if (!$19) {
        break label$234
       }
       FUNCTION_TABLE[$19 | 0]($8);
      }
      $13 = Math_fround(1.0);
      label$236 : {
       if (!((HEAPU8[($5 + 9 | 0) >> 0] | 0) & 128 | 0)) {
        break label$236
       }
       $13 = Math_fround(HEAPF32[((HEAP32[($7 + 44 | 0) >> 2] | 0) + 40 | 0) >> 2]);
      }
      HEAPF32[($7 + 664 | 0) >> 2] = $13;
      $19 = 0;
      $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      HEAP32[($8 + 16116 | 0) >> 2] = $7;
      label$237 : {
       $25 = HEAP32[($7 + 456 | 0) >> 2] | 0;
       if (($25 | 0) == (-1 | 0)) {
        break label$237
       }
       $19 = (HEAP32[($8 + 19228 | 0) >> 2] | 0) + Math_imul($25, 488) | 0;
      }
      HEAP32[($8 + 19200 | 0) >> 2] = $19;
      $13 = Math_fround($13 * Math_fround(Math_fround(HEAPF32[($8 + 15492 | 0) >> 2]) * Math_fround(HEAPF32[($7 + 660 | 0) >> 2])));
      label$238 : {
       $19 = HEAP32[($7 + 820 | 0) >> 2] | 0;
       if (!$19) {
        break label$238
       }
       $13 = Math_fround($13 * Math_fround(HEAPF32[($19 + 660 | 0) >> 2]));
      }
      HEAPF32[($8 + 15488 | 0) >> 2] = $13;
      HEAPF32[($8 + 15508 | 0) >> 2] = $13;
      $8 = HEAP32[($7 + 44 | 0) >> 2] | 0;
      $19 = HEAPU8[($7 + 218 | 0) >> 0] | 0;
     }
     if (!($19 & 255 | 0)) {
      break label$230
     }
    }
    $19 = $8 + 8 | 0;
    $25 = 0;
    $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    label$239 : {
     label$240 : {
      if (!(HEAPU8[($8 + 69 | 0) >> 0] | 0)) {
       break label$240
      }
      i64toi32_i32$1 = $19;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $3251 = i64toi32_i32$0;
      i64toi32_i32$0 = $7;
      HEAP32[($7 + 64 | 0) >> 2] = $3251;
      HEAP32[($7 + 68 | 0) >> 2] = i64toi32_i32$2;
      if ((HEAPU8[($7 + 9 | 0) >> 0] | 0) & 1 | 0) {
       break label$239
      }
      if (!(Math_fround(HEAPF32[($4 + 23384 | 0) >> 2]) <= Math_fround(0.0))) {
       break label$239
      }
      HEAPF32[($4 + 23384 | 0) >> 2] = Math_fround(HEAPF32[($4 + 28 | 0) >> 2]);
      break label$239;
     }
     i64toi32_i32$1 = $19;
     i64toi32_i32$2 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     i64toi32_i32$0 = HEAPU8[(i64toi32_i32$1 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     $3265 = i64toi32_i32$2;
     $3265$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $7 + 64 | 0;
     i64toi32_i32$0 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     i64toi32_i32$2 = HEAPU8[(i64toi32_i32$1 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     $3268 = i64toi32_i32$0;
     $3268$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3265$hi;
     i64toi32_i32$1 = $3265;
     i64toi32_i32$0 = $3268$hi;
     i64toi32_i32$3 = $3268;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0) {
      break label$239
     }
     i64toi32_i32$3 = $7;
     i64toi32_i32$1 = HEAP32[($7 + 64 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7 + 68 | 0) >> 2] | 0;
     $3272 = i64toi32_i32$1;
     i64toi32_i32$1 = $19;
     HEAP32[i64toi32_i32$1 >> 2] = $3272;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
     $8 = HEAP32[($7 + 44 | 0) >> 2] | 0;
     $25 = 1;
    }
    $19 = $8 + 16 | 0;
    label$241 : {
     label$242 : {
      label$243 : {
       label$244 : {
        if (!(HEAPU8[($8 + 70 | 0) >> 0] | 0)) {
         break label$244
        }
        i64toi32_i32$3 = $19;
        i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
        $14 = i64toi32_i32$2;
        $14$hi = i64toi32_i32$1;
        i64toi32_i32$2 = $7;
        HEAP32[($7 + 72 | 0) >> 2] = $14;
        HEAP32[($7 + 76 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = $7;
        HEAP32[($7 + 80 | 0) >> 2] = $14;
        HEAP32[($7 + 84 | 0) >> 2] = i64toi32_i32$1;
        if ((HEAPU8[($7 + 9 | 0) >> 0] | 0) & 1 | 0) {
         break label$243
        }
        if (!(Math_fround(HEAPF32[($4 + 23384 | 0) >> 2]) <= Math_fround(0.0))) {
         break label$243
        }
        HEAPF32[($4 + 23384 | 0) >> 2] = Math_fround(HEAPF32[($4 + 28 | 0) >> 2]);
        break label$243;
       }
       i64toi32_i32$3 = $19;
       i64toi32_i32$1 = HEAPU8[i64toi32_i32$3 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$3 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$3 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$3 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       i64toi32_i32$2 = HEAPU8[(i64toi32_i32$3 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$3 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$3 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$3 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       $3299 = i64toi32_i32$1;
       $3299$hi = i64toi32_i32$2;
       i64toi32_i32$3 = $28;
       i64toi32_i32$2 = HEAPU8[i64toi32_i32$3 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$3 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$3 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$3 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       i64toi32_i32$1 = HEAPU8[(i64toi32_i32$3 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$3 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$3 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$3 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       $3301 = i64toi32_i32$2;
       $3301$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $3299$hi;
       i64toi32_i32$3 = $3299;
       i64toi32_i32$2 = $3301$hi;
       i64toi32_i32$0 = $3301;
       if ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) | 0) {
        break label$243
       }
       i64toi32_i32$0 = $7;
       i64toi32_i32$3 = HEAP32[($7 + 72 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($7 + 76 | 0) >> 2] | 0;
       $3305 = i64toi32_i32$3;
       i64toi32_i32$3 = $19;
       HEAP32[i64toi32_i32$3 >> 2] = $3305;
       HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$1;
       $8 = HEAP32[($7 + 44 | 0) >> 2] | 0;
       $13 = Math_fround(HEAPF32[($8 + 224 | 0) >> 2]);
       HEAPF32[($8 + 24 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8 + 8 | 0) >> 2]) + $13);
       $15 = Math_fround(HEAPF32[($8 + 228 | 0) >> 2]);
       HEAPF32[($8 + 28 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8 + 12 | 0) >> 2]) + $15);
       $13 = Math_fround(Math_fround(Math_fround(HEAPF32[($8 + 16 | 0) >> 2]) - $13) + Math_fround(HEAPF32[($8 + 232 | 0) >> 2]));
       HEAPF32[($8 + 32 | 0) >> 2] = $13 <= Math_fround(0.0) ? Math_fround(0.0) : $13;
       $13 = Math_fround(Math_fround(Math_fround(HEAPF32[($8 + 20 | 0) >> 2]) - $15) + Math_fround(HEAPF32[($8 + 236 | 0) >> 2]));
       HEAPF32[($8 + 36 | 0) >> 2] = $13 <= Math_fround(0.0) ? Math_fround(0.0) : $13;
       break label$242;
      }
      $13 = Math_fround(HEAPF32[($8 + 224 | 0) >> 2]);
      HEAPF32[($8 + 24 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8 + 8 | 0) >> 2]) + $13);
      $15 = Math_fround(HEAPF32[($8 + 228 | 0) >> 2]);
      HEAPF32[($8 + 28 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8 + 12 | 0) >> 2]) + $15);
      $13 = Math_fround(Math_fround(Math_fround(HEAPF32[($8 + 16 | 0) >> 2]) - $13) + Math_fround(HEAPF32[($8 + 232 | 0) >> 2]));
      HEAPF32[($8 + 32 | 0) >> 2] = $13 <= Math_fround(0.0) ? Math_fround(0.0) : $13;
      $13 = Math_fround(Math_fround(Math_fround(HEAPF32[($8 + 20 | 0) >> 2]) - $15) + Math_fround(HEAPF32[($8 + 236 | 0) >> 2]));
      HEAPF32[($8 + 36 | 0) >> 2] = $13 <= Math_fround(0.0) ? Math_fround(0.0) : $13;
      if (!$25) {
       break label$241
      }
     }
     ImGui__UpdateViewportPlatformMonitor_28ImGuiViewportP__29(HEAP32[($7 + 44 | 0) >> 2] | 0 | 0);
    }
    $8 = HEAP32[($7 + 44 | 0) >> 2] | 0;
    $19 = HEAP32[($7 + 8 | 0) >> 2] | 0;
    $25 = ($19 >>> 16 | 0) & 512 | 0 | ((HEAP32[($8 + 4 | 0) >> 2] | 0) & -793 | 0) | 0;
    $29 = $19 & 134217728 | 0;
    $30 = $29 ? $25 : $25 | 16 | 0;
    $26 = $19 & 369098752 | 0;
    $25 = HEAPU8[($4 + 101 | 0) >> 0] | 0 ? $30 : $26 ? $30 : $25;
    $30 = $25 | 8 | 0;
    $25 = HEAPU8[($4 + 102 | 0) >> 0] | 0 ? $30 : $26 ? $30 : $25;
    HEAP32[($8 + 4 | 0) >> 2] = (($26 ? ($29 ? $25 : $25 | 96 | 0) : $25) | (HEAP32[($7 + 24 | 0) >> 2] | 0) | 0) & ((HEAP32[($7 + 28 | 0) >> 2] | 0) ^ -1 | 0) | 0 | ((($19 ^ -1 | 0) << 1 | 0) & 256 | 0) | 0;
    label$245 : {
     $25 = HEAP32[($7 + 20 | 0) >> 2] | 0;
     if (($25 | 0) != (-1 | 0)) {
      break label$245
     }
     label$246 : {
      if (!$18) {
       break label$246
      }
      if (!($19 & 100663296 | 0)) {
       break label$246
      }
      label$247 : {
       if (!(HEAPU8[($18 + 227 | 0) >> 0] | 0)) {
        break label$247
       }
       if (!(HEAPU8[($18 + 220 | 0) >> 0] | 0)) {
        break label$246
       }
      }
      $25 = HEAP32[(HEAP32[($18 + 44 | 0) >> 2] | 0) >> 2] | 0;
      break label$245;
     }
     $25 = HEAPU8[($4 + 103 | 0) >> 0] | 0 ? 0 : 286331153;
    }
    HEAP32[($8 + 44 | 0) >> 2] = $25;
    $4 = HEAPU8[($7 + 218 | 0) >> 0] | 0;
   }
   $15 = Math_fround(HEAPF32[($8 + 16 | 0) >> 2]);
   $13 = Math_fround(HEAPF32[($8 + 8 | 0) >> 2]);
   $36 = Math_fround(HEAPF32[($8 + 12 | 0) >> 2]);
   $44 = Math_fround($36 + Math_fround(HEAPF32[($8 + 20 | 0) >> 2]));
   HEAPF32[(($3 + 120 | 0) + 12 | 0) >> 2] = $44;
   $45 = Math_fround($13 + $15);
   HEAPF32[($3 + 128 | 0) >> 2] = $45;
   HEAPF32[($3 + 124 | 0) >> 2] = $36;
   HEAPF32[($3 + 120 | 0) >> 2] = $13;
   $38 = Math_fround(HEAPF32[($8 + 28 | 0) >> 2]);
   $15 = Math_fround(HEAPF32[($5 + 14568 | 0) >> 2]);
   $37 = Math_fround(HEAPF32[($5 + 14576 | 0) >> 2]);
   $15 = $15 >= $37 ? $15 : $37;
   $41 = Math_fround(Math_fround($38 + Math_fround(HEAPF32[($8 + 36 | 0) >> 2])) - $15);
   $39 = Math_fround(HEAPF32[($8 + 24 | 0) >> 2]);
   $37 = Math_fround(HEAPF32[($5 + 14564 | 0) >> 2]);
   $40 = Math_fround(HEAPF32[($5 + 14572 | 0) >> 2]);
   $37 = $37 >= $40 ? $37 : $40;
   $40 = Math_fround(Math_fround($39 + Math_fround(HEAPF32[($8 + 32 | 0) >> 2])) - $37);
   $38 = Math_fround($38 + $15);
   $39 = Math_fround($39 + $37);
   label$248 : {
    if ($11 | $20 | 0) {
     break label$248
    }
    label$249 : {
     if ($4 & 255 | 0) {
      break label$249
     }
     if (!(Math_fround($45 - $13) > Math_fround(0.0))) {
      break label$248
     }
     if (!(Math_fround($44 - $36) > Math_fround(0.0))) {
      break label$248
     }
     $13 = Math_fround(HEAPF32[($7 + 76 | 0) >> 2]);
     $15 = Math_fround(HEAPF32[($7 + 72 | 0) >> 2]);
     label$250 : {
      $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!(HEAPU8[($8 + 111 | 0) >> 0] | 0)) {
       break label$250
      }
      label$251 : {
       if (!((HEAPU8[($7 + 8 | 0) >> 0] | 0) & 1 | 0)) {
        break label$251
       }
       if (!(HEAP32[($7 + 936 | 0) >> 2] | 0)) {
        break label$250
       }
      }
      $13 = Math_fround(HEAPF32[($8 + 14460 | 0) >> 2]);
      $13 = Math_fround(Math_fround($13 + $13) + Math_fround(HEAPF32[($8 + 15488 | 0) >> 2]));
     }
     $8 = $7 + 68 | 0;
     $37 = Math_fround($38 - $13);
     $13 = Math_fround(HEAPF32[$8 >> 2]);
     HEAPF32[$8 >> 2] = $13 < $37 ? $37 : $13 > $41 ? $41 : $13;
     $8 = $7 + 64 | 0;
     $15 = Math_fround($39 - $15);
     $13 = Math_fround(HEAPF32[$8 >> 2]);
     HEAPF32[$8 >> 2] = $13 < $15 ? $15 : $13 > $40 ? $40 : $13;
     break label$248;
    }
    if ((HEAP32[($5 + 14348 | 0) >> 2] | 0 | 0) < (1 | 0)) {
     break label$248
    }
    $11 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    label$252 : {
     label$253 : {
      $8 = HEAP16[($8 + 104 | 0) >> 1] | 0;
      if (($8 | 0) < (0 | 0)) {
       break label$253
      }
      if ((HEAP32[($11 + 14348 | 0) >> 2] | 0 | 0) <= ($8 | 0)) {
       break label$253
      }
      $8 = (HEAP32[($11 + 14356 | 0) >> 2] | 0) + Math_imul($8, 36) | 0;
      break label$252;
     }
     $8 = $11 + 18608 | 0;
    }
    $13 = Math_fround(HEAPF32[($8 + 20 | 0) >> 2]);
    $41 = Math_fround(Math_fround($13 + Math_fround(HEAPF32[($8 + 28 | 0) >> 2])) - $15);
    $36 = Math_fround(HEAPF32[($8 + 16 | 0) >> 2]);
    $40 = Math_fround(Math_fround($36 + Math_fround(HEAPF32[($8 + 24 | 0) >> 2])) - $37);
    $38 = Math_fround($15 + $13);
    $39 = Math_fround($37 + $36);
    $13 = Math_fround(HEAPF32[($7 + 76 | 0) >> 2]);
    $15 = Math_fround(HEAPF32[($7 + 72 | 0) >> 2]);
    label$254 : {
     if (!(HEAPU8[($11 + 111 | 0) >> 0] | 0)) {
      break label$254
     }
     label$255 : {
      if (!((HEAPU8[($7 + 8 | 0) >> 0] | 0) & 1 | 0)) {
       break label$255
      }
      if (!(HEAP32[($7 + 936 | 0) >> 2] | 0)) {
       break label$254
      }
     }
     $13 = Math_fround(HEAPF32[($11 + 14460 | 0) >> 2]);
     $13 = Math_fround(Math_fround($13 + $13) + Math_fround(HEAPF32[($11 + 15488 | 0) >> 2]));
    }
    $8 = $7 + 68 | 0;
    $37 = Math_fround($38 - $13);
    $13 = Math_fround(HEAPF32[$8 >> 2]);
    HEAPF32[$8 >> 2] = $13 < $37 ? $37 : $13 > $41 ? $41 : $13;
    $8 = $7 + 64 | 0;
    $15 = Math_fround($39 - $15);
    $13 = Math_fround(HEAPF32[$8 >> 2]);
    HEAPF32[$8 >> 2] = $13 < $15 ? $15 : $13 > $40 ? $40 : $13;
   }
   label$256 : {
    label$257 : {
     $8 = $7 + 68 | 0;
     $13 = Math_fround(HEAPF32[$8 >> 2]);
     if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
      break label$257
     }
     $11 = ~~$13;
     break label$256;
    }
    $11 = -2147483648;
   }
   HEAPF32[$8 >> 2] = Math_fround($11 | 0);
   label$258 : {
    label$259 : {
     $8 = $7 + 64 | 0;
     $13 = Math_fround(HEAPF32[$8 >> 2]);
     if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
      break label$259
     }
     $11 = ~~$13;
     break label$258;
    }
    $11 = -2147483648;
   }
   HEAPF32[$8 >> 2] = Math_fround($11 | 0);
   $13 = Math_fround(0.0);
   label$260 : {
    if ($4 & 255 | 0) {
     break label$260
    }
    if ((HEAPU8[($7 + 905 | 0) >> 0] | 0) & 1 | 0) {
     break label$260
    }
    label$261 : {
     label$262 : {
      if (!$2) {
       break label$262
      }
      $8 = $5 + 14440 | 0;
      break label$261;
     }
     label$263 : {
      if (($6 & 201326592 | 0 | 0) != (67108864 | 0)) {
       break label$263
      }
      $8 = $5 + 14448 | 0;
      break label$261;
     }
     $8 = $5 + 14412 | 0;
    }
    $13 = Math_fround(HEAPF32[$8 >> 2]);
   }
   HEAPF32[($7 + 120 | 0) >> 2] = $13;
   $20 = 1;
   $19 = 0;
   label$264 : {
    if (($12 & !($6 & 4096 | 0) | 0 | 0) != (1 | 0)) {
     break label$264
    }
    $19 = 1;
    label$265 : {
     if ($6 & 67108864 | 0) {
      break label$265
     }
     $19 = (!$2 | (HEAPU8[($7 + 905 | 0) >> 0] | 0) | 0) & !($6 & 33554432 | 0) | 0;
    }
    $25 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    $18 = HEAP32[($25 + 18548 | 0) >> 2] | 0;
    if (($18 | 0) < (1 | 0)) {
     break label$264
    }
    $11 = HEAP32[($25 + 18556 | 0) >> 2] | 0;
    $8 = $18;
    label$266 : {
     label$267 : while (1) {
      label$268 : {
       $4 = $8 + -1 | 0;
       $2 = HEAP32[(($11 + Math_imul($4, 40) | 0) + 4 | 0) >> 2] | 0;
       if (!$2) {
        break label$268
       }
       if ((HEAPU8[($2 + 11 | 0) >> 0] | 0) & 8 | 0) {
        break label$266
       }
      }
      $2 = $8 >>> 0 < 2 >>> 0;
      $8 = $4;
      if (!$2) {
       continue label$267
      }
      break label$264;
     };
    }
    $4 = HEAP32[($7 + 828 | 0) >> 2] | 0;
    if (($4 | 0) == ($2 | 0)) {
     break label$264
    }
    $8 = $7;
    label$269 : while (1) {
     if (($8 | 0) == ($2 | 0)) {
      break label$264
     }
     $8 = HEAP32[($8 + 824 | 0) >> 2] | 0;
     if ($8) {
      continue label$269
     }
     break label$269;
    };
    $19 = 0;
    if (($7 | 0) != ($4 | 0)) {
     break label$264
    }
    label$270 : while (1) {
     $18 = $18 + -1 | 0;
     $2 = HEAP32[(($11 + Math_imul($18, 40) | 0) + 4 | 0) >> 2] | 0;
     if (!$2) {
      continue label$270
     }
     if (!((HEAPU8[($2 + 11 | 0) >> 0] | 0) & 8 | 0)) {
      continue label$270
     }
     label$271 : {
      if (HEAPU8[($2 + 219 | 0) >> 0] | 0) {
       break label$271
      }
      if (!(HEAPU8[($2 + 220 | 0) >> 0] | 0)) {
       continue label$270
      }
     }
     $4 = HEAP32[((HEAP32[($2 + 824 | 0) >> 2] | 0) + 828 | 0) >> 2] | 0;
     if (!$4) {
      continue label$270
     }
     label$272 : {
      label$273 : while (1) {
       $8 = $7;
       if (($7 | 0) == ($4 | 0)) {
        break label$272
       }
       label$274 : while (1) {
        if (($8 | 0) == ($4 | 0)) {
         break label$272
        }
        $8 = HEAP32[($8 + 824 | 0) >> 2] | 0;
        if ($8) {
         continue label$274
        }
        break label$274;
       };
       $4 = HEAP32[((HEAP32[($4 + 824 | 0) >> 2] | 0) + 828 | 0) >> 2] | 0;
       if (!$4) {
        continue label$270
       }
       continue label$273;
      };
     }
     break label$270;
    };
    $11 = HEAP32[($25 + 16052 | 0) >> 2] | 0;
    $18 = 0;
    label$275 : {
     label$276 : {
      $8 = HEAP32[($25 + 16044 | 0) >> 2] | 0;
      if (($8 | 0) <= (0 | 0)) {
       break label$276
      }
      $4 = $11 + ($8 << 2 | 0) | 0;
      $2 = HEAP32[($2 + 828 | 0) >> 2] | 0;
      $8 = $11;
      label$277 : {
       label$278 : while (1) {
        if ((HEAP32[$8 >> 2] | 0 | 0) == ($7 | 0)) {
         break label$277
        }
        $8 = $8 + 4 | 0;
        if ($8 >>> 0 < $4 >>> 0) {
         continue label$278
        }
        break label$278;
       };
      }
      $18 = ($8 - $11 | 0) >> 2 | 0;
      $8 = $11;
      label$279 : while (1) {
       if ((HEAP32[$8 >> 2] | 0 | 0) == ($2 | 0)) {
        break label$275
       }
       $8 = $8 + 4 | 0;
       if ($8 >>> 0 < $4 >>> 0) {
        continue label$279
       }
       break label$275;
      };
     }
     $8 = $11;
    }
    label$280 : {
     label$281 : {
      $8 = ($8 - $11 | 0) >> 2 | 0;
      if (($18 | 0) >= ($8 | 0)) {
       break label$281
      }
      $4 = $11 + ($18 << 2 | 0) | 0;
      memmove($4 | 0, $4 + 4 | 0 | 0, ($8 + ($18 ^ -1 | 0) | 0) << 2 | 0 | 0) | 0;
      $8 = $8 + -1 | 0;
      break label$280;
     }
     $4 = $11 + ($8 << 2 | 0) | 0;
     memmove($4 + 4 | 0 | 0, $4 | 0, ($18 - $8 | 0) << 2 | 0 | 0) | 0;
    }
    HEAP32[((HEAP32[($25 + 16052 | 0) >> 2] | 0) + ($8 << 2 | 0) | 0) >> 2] = $7;
    $19 = 0;
   }
   label$282 : {
    if (HEAP32[($7 + 936 | 0) >> 2] | 0) {
     break label$282
    }
    $20 = !((HEAPU8[($7 + 905 | 0) >> 0] | 0) & 1 | 0);
   }
   i64toi32_i32$3 = $3;
   i64toi32_i32$1 = 0;
   HEAP32[($3 + 104 | 0) >> 2] = 0;
   HEAP32[($3 + 108 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$3 = $3;
   i64toi32_i32$1 = 0;
   HEAP32[($3 + 96 | 0) >> 2] = 0;
   HEAP32[($3 + 100 | 0) >> 2] = i64toi32_i32$1;
   label$283 : {
    label$284 : {
     $13 = Math_fround(HEAPF32[($5 + 15488 | 0) >> 2]);
     $15 = Math_fround($13 * Math_fround(1.100000023841858));
     $37 = Math_fround(Math_fround(HEAPF32[($7 + 120 | 0) >> 2]) + Math_fround(1.0));
     $13 = Math_fround(Math_fround($13 * Math_fround(.20000000298023224)) + $37);
     $13 = $15 >= $13 ? $15 : $13;
     if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
      break label$284
     }
     $25 = ~~$13;
     break label$283;
    }
    $25 = -2147483648;
   }
   $18 = HEAPU8[($5 + 110 | 0) >> 0] | 0 ? 2 : 1;
   $8 = -1;
   label$285 : {
    if (!$20) {
     break label$285
    }
    if (HEAPU8[($7 + 222 | 0) >> 0] | 0) {
     break label$285
    }
    $8 = -1;
    label$286 : {
     label$287 : {
      if (!((HEAPU8[($7 + 8 | 0) >> 0] | 0) & 66 | 0)) {
       break label$287
      }
      $2 = 0;
      break label$286;
     }
     $2 = 0;
     if ((HEAP8[($7 + 248 | 0) >> 0] | 0 | 0) > (0 | 0)) {
      break label$286
     }
     $2 = 0;
     if ((HEAP8[($7 + 249 | 0) >> 0] | 0 | 0) > (0 | 0)) {
      break label$286
     }
     if (!(HEAPU8[($7 + 220 | 0) >> 0] | 0)) {
      break label$286
     }
     label$288 : {
      label$289 : {
       $29 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
       $13 = Math_fround(HEAPF32[($29 + 15488 | 0) >> 2]);
       $15 = Math_fround($13 * Math_fround(1.350000023841858));
       $13 = Math_fround(Math_fround($13 * Math_fround(.20000000298023224)) + $37);
       $13 = $15 >= $13 ? $15 : $13;
       if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
        break label$289
       }
       $8 = ~~$13;
       break label$288;
      }
      $8 = -2147483648;
     }
     label$290 : {
      label$291 : {
       $13 = Math_fround(Math_fround($8 | 0) * Math_fround(.75));
       if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
        break label$291
       }
       $8 = ~~$13;
       break label$290;
      }
      $8 = -2147483648;
     }
     $15 = Math_fround($8 | 0);
     $46 = HEAPU8[($29 + 110 | 0) >> 0] | 0;
     label$292 : {
      label$293 : {
       label$294 : {
        if ((HEAPU8[($29 + 13 | 0) >> 0] | 0) & 8 | 0) {
         break label$294
        }
        $8 = HEAP32[($7 + 44 | 0) >> 2] | 0;
        break label$293;
       }
       $8 = HEAP32[($7 + 44 | 0) >> 2] | 0;
       if ((HEAP32[($29 + 3544 | 0) >> 2] | 0 | 0) != (HEAP32[($7 + 48 | 0) >> 2] | 0 | 0)) {
        break label$293
       }
       if ((HEAPU8[($8 + 4 | 0) >> 0] | 0) & 8 | 0) {
        break label$292
       }
      }
      $37 = Math_fround(HEAPF32[($8 + 20 | 0) >> 2]);
      $13 = Math_fround(HEAPF32[($8 + 12 | 0) >> 2]);
      $36 = Math_fround(HEAPF32[($8 + 8 | 0) >> 2]);
      HEAPF32[($7 + 588 | 0) >> 2] = Math_fround($36 + Math_fround(HEAPF32[($8 + 16 | 0) >> 2]));
      HEAPF32[($7 + 584 | 0) >> 2] = $13;
      HEAPF32[($7 + 580 | 0) >> 2] = $36;
      HEAPF32[($7 + 592 | 0) >> 2] = Math_fround($13 + $37);
     }
     $47 = $46 ? Math_fround(4.0) : Math_fround(0.0);
     HEAP32[($7 + 380 | 0) >> 2] = 1;
     ImGui__PushID_28char_20const__29(67624 | 0);
     $33 = $29 + 16212 | 0;
     $34 = $29 + 3520 | 0;
     $48 = Math_fround(-$15);
     i64toi32_i32$0 = $3;
     i64toi32_i32$1 = HEAP32[($3 + 136 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[($3 + 140 | 0) >> 2] | 0;
     $14 = i64toi32_i32$1;
     $14$hi = i64toi32_i32$3;
     $26 = $7 + 76 | 0;
     $30 = $7 + 68 | 0;
     $35 = $29 + 16216 | 0;
     $49 = $29 + 3524 | 0;
     $2 = 0;
     $8 = 0;
     $50 = Math_fround(3402823466385288598117041.0e14);
     $51 = Math_fround(3402823466385288598117041.0e14);
     $52 = Math_fround(3402823466385288598117041.0e14);
     $53 = Math_fround(3402823466385288598117041.0e14);
     label$295 : while (1) {
      $45 = Math_fround(HEAPF32[$26 >> 2]);
      $13 = Math_fround(HEAPF32[$30 >> 2]);
      $37 = Math_fround(HEAPF32[($7 + 64 | 0) >> 2]);
      $4 = Math_imul($8, 24);
      $54 = Math_fround(HEAPF32[($4 + 72608 | 0) >> 2]);
      $36 = Math_fround(Math_fround(Math_fround(Math_fround($37 + Math_fround(HEAPF32[($7 + 72 | 0) >> 2])) - $37) * $54) + $37);
      $44 = Math_fround(HEAPF32[($4 + 72616 | 0) >> 2]);
      $37 = Math_fround($36 + Math_fround($44 * $15));
      HEAPF32[($3 + 264 | 0) >> 2] = $37;
      $55 = Math_fround($47 * $44);
      $36 = Math_fround($36 - $55);
      HEAPF32[($3 + 256 | 0) >> 2] = $36;
      $56 = Math_fround(HEAPF32[($4 + 72612 | 0) >> 2]);
      $45 = Math_fround($13 + Math_fround(Math_fround(Math_fround($13 + $45) - $13) * $56));
      $57 = Math_fround(HEAPF32[($4 + 72620 | 0) >> 2]);
      $13 = Math_fround($45 + Math_fround($57 * $15));
      HEAPF32[($3 + 268 | 0) >> 2] = $13;
      $58 = Math_fround($47 * $57);
      $45 = Math_fround($45 - $58);
      HEAPF32[($3 + 260 | 0) >> 2] = $45;
      label$296 : {
       if (!($36 > $37)) {
        break label$296
       }
       HEAPF32[($3 + 264 | 0) >> 2] = $36;
       HEAPF32[($3 + 256 | 0) >> 2] = $37;
      }
      label$297 : {
       if (!($45 > $13)) {
        break label$297
       }
       HEAPF32[($3 + 268 | 0) >> 2] = $45;
       HEAPF32[($3 + 260 | 0) >> 2] = $13;
      }
      label$298 : {
       $4 = (HEAP32[((((HEAP32[($7 + 280 | 0) >> 2] | 0) << 2 | 0) + (HEAP32[($7 + 288 | 0) >> 2] | 0) | 0) + -4 | 0) >> 2] | 0) ^ -1 | 0;
       $4 = (HEAP32[(((($8 ^ $4 | 0) & 255 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) ^ ($4 >>> 8 | 0) | 0;
       $4 = ($4 >>> 8 | 0) ^ (HEAP32[(((($4 ^ ($8 >>> 8 | 0) | 0) & 255 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
       $4 = ($4 >>> 8 | 0) ^ (HEAP32[(((($4 ^ ($8 >>> 16 | 0) | 0) & 255 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
       $4 = ((HEAP32[(((($4 & 255 | 0) ^ ($8 >>> 24 | 0) | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) ^ ($4 >>> 8 | 0) | 0) ^ -1 | 0;
       if ((HEAP32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 16168 | 0) >> 2] | 0 | 0) != ($4 | 0)) {
        break label$298
       }
       ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($4 | 0, 4 | 0, $8 | 0, 0 | 0);
      }
      ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($3 + 256 | 0 | 0, $4 | 0, 0 | 0, 8 | 0) | 0;
      ImGui__ButtonBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20bool__2c_20bool__2c_20int_29($3 + 256 | 0 | 0, $4 | 0, $3 + 80 | 0 | 0, $3 + 64 | 0 | 0, 264192 | 0) | 0;
      label$299 : {
       $4 = HEAPU8[($3 + 64 | 0) >> 0] | 0;
       if (!((HEAPU8[($3 + 80 | 0) >> 0] | 0 | $4 | 0) & 255 | 0)) {
        break label$299
       }
       HEAP32[($29 + 19036 | 0) >> 2] = $8 & 1 | 0 ? 5 : 6;
       if (!($4 & 255 | 0)) {
        break label$299
       }
       label$300 : {
        if ((HEAPU16[($29 + 14090 | 0) >> 1] | 0 | 0) != (2 | 0)) {
         break label$300
        }
        if ($8) {
         break label$300
        }
        i64toi32_i32$3 = $14$hi;
        CalcWindowSizeAfterConstraint_28ImGuiWindow__2c_20ImVec2_20const__29($3 + 240 | 0 | 0, $7 | 0, $14 | 0, i64toi32_i32$3 | 0);
        $52 = Math_fround(HEAPF32[($3 + 244 | 0) >> 2]);
        $53 = Math_fround(HEAPF32[($3 + 240 | 0) >> 2]);
        ImGui__SetActiveID_28unsigned_20int_2c_20ImGuiWindow__29(0 | 0, 0 | 0);
        $2 = 1;
        break label$299;
       }
       $4304 = $3 + 240 | 0;
       $4305 = $7;
       $37 = $56 == Math_fround(1.0) ? $38 : Math_fround(-3402823466385288598117041.0e14);
       $4 = $56 == Math_fround(0.0);
       $36 = $4 ? $41 : Math_fround(3402823466385288598117041.0e14);
       $13 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($57 * $48) - $58) * $56) + $58) + Math_fround(Math_fround(HEAPF32[$49 >> 2]) - Math_fround(HEAPF32[$35 >> 2])));
       $13 = $13 < $37 ? $37 : $13 > $36 ? $36 : $13;
       $37 = Math_fround(HEAPF32[$30 >> 2]);
       $36 = Math_fround($37 + Math_fround(HEAPF32[$26 >> 2]));
       $37 = Math_fround(Math_fround(Math_fround($37 - $13) * $56) + $13);
       $36 = Math_fround(Math_fround(Math_fround(Math_fround($13 - $36) * $56) + $36) - $37);
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = (wasm2js_scratch_store_f32($36), wasm2js_scratch_load_i32(2));
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = 32;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        $163 = 0;
       } else {
        i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
        $163 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
       }
       $4366$hi = i64toi32_i32$1;
       $45 = $54 == Math_fround(1.0) ? $39 : Math_fround(-3402823466385288598117041.0e14);
       $11 = $54 == Math_fround(0.0);
       $57 = $11 ? $40 : Math_fround(3402823466385288598117041.0e14);
       $13 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($44 * $48) - $55) * $54) + $55) + Math_fround(Math_fround(HEAPF32[($29 + 3520 | 0) >> 2]) - Math_fround(HEAPF32[($29 + 16212 | 0) >> 2])));
       $13 = $13 < $45 ? $45 : $13 > $57 ? $57 : $13;
       $45 = Math_fround(HEAPF32[($7 + 64 | 0) >> 2]);
       $44 = Math_fround($45 + Math_fround(HEAPF32[($7 + 72 | 0) >> 2]));
       $4414 = Math_fround(Math_fround(Math_fround($13 - $44) * $54) + $44);
       $13 = Math_fround(Math_fround(Math_fround($45 - $13) * $54) + $13);
       $45 = Math_fround($4414 - $13);
       i64toi32_i32$1 = 0;
       $4426$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $4366$hi;
       i64toi32_i32$3 = $163;
       i64toi32_i32$0 = $4426$hi;
       i64toi32_i32$2 = (wasm2js_scratch_store_f32($45), wasm2js_scratch_load_i32(2));
       i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
       CalcWindowSizeAfterConstraint_28ImGuiWindow__2c_20ImVec2_20const__29($4304 | 0, $4305 | 0, i64toi32_i32$3 | i64toi32_i32$2 | 0 | 0, i64toi32_i32$0 | 0);
       $52 = Math_fround(HEAPF32[($3 + 244 | 0) >> 2]);
       $50 = Math_fround($37 - ($4 ? Math_fround($52 - $36) : Math_fround(0.0)));
       $53 = Math_fround(HEAPF32[($3 + 240 | 0) >> 2]);
       $51 = Math_fround($13 - ($11 ? Math_fround($53 - $45) : Math_fround(0.0)));
      }
      $11 = HEAPU8[($3 + 80 | 0) >> 0] | 0;
      $4 = HEAPU8[($3 + 64 | 0) >> 0] | 0;
      label$301 : {
       label$302 : {
        if (!$8) {
         break label$302
        }
        if ($4 & 255 | 0) {
         break label$302
        }
        if (!($11 & 255 | 0)) {
         break label$301
        }
       }
       label$303 : {
        label$304 : {
         $31 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
         $4 = ($31 + 14396 | 0) + (($4 & 255 | 0 ? 32 : $11 & 255 | 0 ? 31 : 30) << 4 | 0) | 0;
         $13 = Math_fround(HEAPF32[($4 + 204 | 0) >> 2]);
         $13 = Math_fround(Math_fround(($13 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($13, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
         if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
          break label$304
         }
         $11 = ~~$13;
         break label$303;
        }
        $11 = -2147483648;
       }
       $11 = $11 << 8 | 0;
       label$305 : {
        label$306 : {
         $13 = Math_fround(HEAPF32[($4 + 200 | 0) >> 2]);
         $13 = Math_fround(Math_fround(($13 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($13, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
         if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
          break label$306
         }
         $32 = ~~$13;
         break label$305;
        }
        $32 = -2147483648;
       }
       $11 = $11 | $32 | 0;
       label$307 : {
        label$308 : {
         $13 = Math_fround(HEAPF32[($4 + 208 | 0) >> 2]);
         $13 = Math_fround(Math_fround(($13 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($13, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
         if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
          break label$308
         }
         $32 = ~~$13;
         break label$307;
        }
        $32 = -2147483648;
       }
       $11 = $11 | ($32 << 16 | 0) | 0;
       label$309 : {
        label$310 : {
         $13 = Math_fround(Math_fround(HEAPF32[($4 + 212 | 0) >> 2]) * Math_fround(HEAPF32[($31 + 14396 | 0) >> 2]));
         $13 = Math_fround(Math_fround(($13 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($13, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
         if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
          break label$310
         }
         $4 = ~~$13;
         break label$309;
        }
        $4 = -2147483648;
       }
       HEAP32[(($3 + 96 | 0) + ($8 << 2 | 0) | 0) >> 2] = $11 | ($4 << 24 | 0) | 0;
      }
      $8 = $8 + 1 | 0;
      if (($8 | 0) != ($18 | 0)) {
       continue label$295
      }
      break label$295;
     };
     label$311 : {
      label$312 : {
       if ($46) {
        break label$312
       }
       $8 = -1;
       break label$311;
      }
      $30 = $7 + 76 | 0;
      $31 = $7 + 68 | 0;
      $32 = ($3 + 256 | 0) + 8 | 0;
      $8 = -1;
      $4 = 0;
      label$313 : while (1) {
       $13 = Math_fround(HEAPF32[$31 >> 2]);
       $37 = Math_fround($13 + Math_fround(HEAPF32[$30 >> 2]));
       $36 = Math_fround(HEAPF32[($7 + 64 | 0) >> 2]);
       $45 = Math_fround($36 + Math_fround(HEAPF32[($7 + 72 | 0) >> 2]));
       label$314 : {
        label$315 : {
         switch ($4 | 0) {
         case 0:
          HEAPF32[($3 + 268 | 0) >> 2] = Math_fround($37 - $15);
          HEAPF32[($3 + 264 | 0) >> 2] = Math_fround($36 + Math_fround(4.0));
          HEAPF32[($3 + 260 | 0) >> 2] = Math_fround($13 + $15);
          HEAPF32[($3 + 256 | 0) >> 2] = Math_fround($36 + Math_fround(-4.0));
          break label$314;
         case 1:
          HEAPF32[($3 + 268 | 0) >> 2] = Math_fround($37 - $15);
          HEAPF32[($3 + 264 | 0) >> 2] = Math_fround($45 + Math_fround(4.0));
          HEAPF32[($3 + 260 | 0) >> 2] = Math_fround($13 + $15);
          HEAPF32[($3 + 256 | 0) >> 2] = Math_fround($45 + Math_fround(-4.0));
          break label$314;
         case 2:
          HEAPF32[($3 + 268 | 0) >> 2] = Math_fround($13 + Math_fround(4.0));
          HEAPF32[($3 + 264 | 0) >> 2] = Math_fround($45 - $15);
          HEAPF32[($3 + 260 | 0) >> 2] = Math_fround($13 + Math_fround(-4.0));
          HEAPF32[($3 + 256 | 0) >> 2] = Math_fround($36 + $15);
          break label$314;
         case 3:
          HEAPF32[($3 + 268 | 0) >> 2] = Math_fround($37 + Math_fround(4.0));
          HEAPF32[($3 + 264 | 0) >> 2] = Math_fround($45 - $15);
          HEAPF32[($3 + 260 | 0) >> 2] = Math_fround($37 + Math_fround(-4.0));
          HEAPF32[($3 + 256 | 0) >> 2] = Math_fround($36 + $15);
          break label$314;
         default:
          break label$315;
         };
        }
        i64toi32_i32$3 = $32;
        i64toi32_i32$0 = 0;
        HEAP32[i64toi32_i32$3 >> 2] = 0;
        HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$3 = $3;
        i64toi32_i32$0 = 0;
        HEAP32[($3 + 256 | 0) >> 2] = 0;
        HEAP32[($3 + 260 | 0) >> 2] = i64toi32_i32$0;
       }
       label$320 : {
        $11 = $4 + 4 | 0;
        $26 = (HEAP32[((((HEAP32[($7 + 280 | 0) >> 2] | 0) << 2 | 0) + (HEAP32[($7 + 288 | 0) >> 2] | 0) | 0) + -4 | 0) >> 2] | 0) ^ -1 | 0;
        $26 = (HEAP32[(((($11 ^ $26 | 0) & 255 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) ^ ($26 >>> 8 | 0) | 0;
        $26 = ($26 >>> 8 | 0) ^ (HEAP32[(((($26 ^ ($11 >>> 8 | 0) | 0) & 255 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
        $26 = ($26 >>> 8 | 0) ^ (HEAP32[(((($26 ^ ($11 >>> 16 | 0) | 0) & 255 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
        $26 = ((HEAP32[(((($26 & 255 | 0) ^ ($11 >>> 24 | 0) | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) ^ ($26 >>> 8 | 0) | 0) ^ -1 | 0;
        if ((HEAP32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 16168 | 0) >> 2] | 0 | 0) != ($26 | 0)) {
         break label$320
        }
        ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($26 | 0, 4 | 0, $11 | 0, 0 | 0);
       }
       $11 = $4 >>> 0 > 1 >>> 0;
       ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($3 + 256 | 0 | 0, $26 | 0, 0 | 0, 8 | 0) | 0;
       ImGui__ButtonBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20bool__2c_20bool__2c_20int_29($3 + 256 | 0 | 0, $26 | 0, $3 + 64 | 0 | 0, $3 + 232 | 0 | 0, 264192 | 0) | 0;
       label$321 : {
        label$322 : {
         label$323 : {
          if (!(HEAPU8[($3 + 64 | 0) >> 0] | 0)) {
           break label$323
          }
          $26 = HEAPU8[($3 + 232 | 0) >> 0] | 0;
          label$324 : {
           if (Math_fround(HEAPF32[($29 + 16184 | 0) >> 2]) > Math_fround(.03999999910593033)) {
            break label$324
           }
           if (!($26 & 255 | 0)) {
            break label$321
           }
          }
          HEAP32[($29 + 19036 | 0) >> 2] = $11 ? 3 : 4;
          if ($26 & 255 | 0) {
           break label$322
          }
          break label$321;
         }
         if (!(HEAPU8[($3 + 232 | 0) >> 0] | 0)) {
          break label$321
         }
         HEAP32[($29 + 19036 | 0) >> 2] = $11 ? 3 : 4;
        }
        i64toi32_i32$1 = $7;
        i64toi32_i32$0 = HEAP32[($7 + 64 | 0) >> 2] | 0;
        i64toi32_i32$3 = HEAP32[($7 + 68 | 0) >> 2] | 0;
        $14 = i64toi32_i32$0;
        $14$hi = i64toi32_i32$3;
        i64toi32_i32$0 = $3;
        HEAP32[($3 + 80 | 0) >> 2] = $14;
        HEAP32[($3 + 84 | 0) >> 2] = i64toi32_i32$3;
        $8 = $11 << 2 | 0;
        HEAPF32[($3 + 80 | 0 | $8 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($34 + $8 | 0) >> 2]) - Math_fround(HEAPF32[($33 + $8 | 0) >> 2])) + Math_fround(4.0));
        $4755 = $3 + 240 | 0;
        $4756 = $7;
        $37 = ($4 | 0) == (3 | 0) ? $38 : Math_fround(-3402823466385288598117041.0e14);
        $36 = ($4 | 0) == (2 | 0) ? $41 : Math_fround(3402823466385288598117041.0e14);
        $13 = Math_fround(HEAPF32[($3 + 84 | 0) >> 2]);
        $13 = $13 < $37 ? $37 : $13 > $36 ? $36 : $13;
        $4778 = $13;
        $4780 = Math_fround(HEAPF32[$30 >> 2]);
        i64toi32_i32$1 = $14;
        i64toi32_i32$0 = 0;
        i64toi32_i32$2 = 32;
        i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
         i64toi32_i32$0 = 0;
         $164 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
        } else {
         i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
         $164 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
        }
        $36 = (wasm2js_scratch_store_i32(2, $164), wasm2js_scratch_load_f32());
        $45 = Math_fround($4780 + $36);
        $8 = Math_imul($4, 28);
        $37 = Math_fround(HEAPF32[($8 + 72716 | 0) >> 2]);
        $44 = Math_fround(HEAPF32[($8 + 72724 | 0) >> 2]);
        $37 = $37 < $44 ? $37 : $44;
        $4806 = Math_fround(Math_fround(Math_fround($4778 - $45) * $37) + $45);
        $45 = Math_fround(Math_fround(Math_fround($36 - $13) * $37) + $13);
        $44 = Math_fround($4806 - $45);
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = (wasm2js_scratch_store_f32($44), wasm2js_scratch_load_i32(2));
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = 32;
        i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
         $165 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
         $165 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
        }
        $4819$hi = i64toi32_i32$1;
        $36 = ($4 | 0) == (1 | 0) ? $39 : Math_fround(-3402823466385288598117041.0e14);
        $57 = $4 ? Math_fround(3402823466385288598117041.0e14) : $40;
        $13 = Math_fround(HEAPF32[($3 + 80 | 0) >> 2]);
        $13 = $13 < $36 ? $36 : $13 > $57 ? $57 : $13;
        i64toi32_i32$1 = $14$hi;
        $57 = (wasm2js_scratch_store_i32(2, $14), wasm2js_scratch_load_f32());
        $47 = Math_fround(Math_fround(HEAPF32[($7 + 72 | 0) >> 2]) + $57);
        $36 = Math_fround(HEAPF32[($8 + 72712 | 0) >> 2]);
        $54 = Math_fround(HEAPF32[($8 + 72720 | 0) >> 2]);
        $36 = $36 < $54 ? $36 : $54;
        $4865 = Math_fround(Math_fround(Math_fround($13 - $47) * $36) + $47);
        $13 = Math_fround(Math_fround(Math_fround($57 - $13) * $36) + $13);
        $57 = Math_fround($4865 - $13);
        i64toi32_i32$1 = 0;
        $4877$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $4819$hi;
        i64toi32_i32$0 = $165;
        i64toi32_i32$3 = $4877$hi;
        i64toi32_i32$2 = (wasm2js_scratch_store_f32($57), wasm2js_scratch_load_i32(2));
        i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
        CalcWindowSizeAfterConstraint_28ImGuiWindow__2c_20ImVec2_20const__29($4755 | 0, $4756 | 0, i64toi32_i32$0 | i64toi32_i32$2 | 0 | 0, i64toi32_i32$3 | 0);
        $53 = Math_fround(HEAPF32[($3 + 240 | 0) >> 2]);
        $51 = Math_fround($13 - ($36 == Math_fround(0.0) ? Math_fround($53 - $57) : Math_fround(0.0)));
        $52 = Math_fround(HEAPF32[($3 + 244 | 0) >> 2]);
        $50 = Math_fround($45 - ($37 == Math_fround(0.0) ? Math_fround($52 - $44) : Math_fround(0.0)));
        $8 = $4;
       }
       $4 = $4 + 1 | 0;
       if (($4 | 0) != (4 | 0)) {
        continue label$313
       }
       break label$313;
      };
     }
     $11 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     $4 = HEAP32[($11 + 16116 | 0) >> 2] | 0;
     HEAP32[($4 + 280 | 0) >> 2] = (HEAP32[($4 + 280 | 0) >> 2] | 0) + -1 | 0;
     HEAP32[($7 + 380 | 0) >> 2] = 0;
     label$325 : {
      $4 = HEAP32[($29 + 18992 | 0) >> 2] | 0;
      if (!$4) {
       break label$325
      }
      if ((HEAP32[($4 + 836 | 0) >> 2] | 0 | 0) != ($7 | 0)) {
       break label$325
      }
      $13 = Math_fround(0.0);
      $15 = Math_fround(0.0);
      label$326 : {
       label$327 : {
        label$328 : {
         switch ((HEAP32[($29 + 18700 | 0) >> 2] | 0) + -2 | 0 | 0) {
         case 0:
          $13 = Math_fround(0.0);
          $15 = Math_fround(0.0);
          if (!(HEAPU8[($29 + 3549 | 0) >> 0] | 0)) {
           break label$326
          }
          $13 = Math_fround(Math_fround(HEAPF32[($11 + 11792 | 0) >> 2]) - Math_fround(HEAPF32[($11 + 11776 | 0) >> 2]));
          $4 = $11 + 11808 | 0;
          $11 = $11 + 11824 | 0;
          break label$327;
         case 1:
          break label$328;
         default:
          break label$326;
         };
        }
        $13 = Math_fround(Math_fround(HEAPF32[($11 + 13552 | 0) >> 2]) - Math_fround(HEAPF32[($11 + 13536 | 0) >> 2]));
        $4 = $11 + 13568 | 0;
        $11 = $11 + 13584 | 0;
       }
       $15 = Math_fround(Math_fround(HEAPF32[$11 >> 2]) - Math_fround(HEAPF32[$4 >> 2]));
      }
      label$330 : {
       if ($13 != Math_fround(0.0)) {
        break label$330
       }
       if ($15 == Math_fround(0.0)) {
        break label$325
       }
      }
      $4 = $29 + 19024 | 0;
      $37 = Math_fround(HEAPF32[($29 + 88 | 0) >> 2]);
      $36 = Math_fround(HEAPF32[($29 + 92 | 0) >> 2]);
      $37 = Math_fround(Math_fround(Math_fround(HEAPF32[($29 + 24 | 0) >> 2]) * Math_fround(600.0)) * ($37 < $36 ? $37 : $36));
      $13 = Math_fround(Math_fround(HEAPF32[$4 >> 2]) + Math_fround($13 * $37));
      HEAPF32[$4 >> 2] = $13;
      $11 = $29 + 19028 | 0;
      $15 = Math_fround(Math_fround(HEAPF32[$11 >> 2]) + Math_fround($15 * $37));
      HEAPF32[$11 >> 2] = $15;
      $37 = Math_fround(HEAPF32[($7 + 76 | 0) >> 2]);
      $36 = Math_fround(HEAPF32[($7 + 68 | 0) >> 2]);
      $40 = Math_fround(HEAPF32[($7 + 72 | 0) >> 2]);
      $41 = Math_fround(HEAPF32[($7 + 64 | 0) >> 2]);
      HEAP8[($29 + 19012 | 0) >> 0] = 0;
      HEAP8[($29 + 18711 | 0) >> 0] = 1;
      $37 = Math_fround(Math_fround($38 - $36) - $37);
      HEAPF32[$11 >> 2] = $15 >= $37 ? $15 : $37;
      $15 = Math_fround(Math_fround($39 - $41) - $40);
      HEAPF32[$4 >> 2] = $13 >= $15 ? $13 : $15;
      (wasm2js_i32$0 = $3, wasm2js_i32$1 = ImGui__GetColorU32_28int_2c_20float_29(32 | 0, Math_fround(Math_fround(1.0))) | 0), HEAP32[(wasm2js_i32$0 + 96 | 0) >> 2] = wasm2js_i32$1;
      label$331 : {
       label$332 : {
        $13 = Math_fround(HEAPF32[$11 >> 2]);
        if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
         break label$332
        }
        $11 = ~~$13;
        break label$331;
       }
       $11 = -2147483648;
      }
      label$333 : {
       label$334 : {
        $13 = Math_fround(HEAPF32[$4 >> 2]);
        if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
         break label$334
        }
        $4 = ~~$13;
        break label$333;
       }
       $4 = -2147483648;
      }
      if (!($4 | $11 | 0)) {
       break label$325
      }
      $5054 = $3 + 256 | 0;
      $5055 = $7;
      $13 = Math_fround($11 | 0);
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(HEAPF32[($7 + 84 | 0) >> 2]) + $13)), wasm2js_scratch_load_i32(2));
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       $166 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
       $166 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      }
      $5065$hi = i64toi32_i32$0;
      $15 = Math_fround($4 | 0);
      i64toi32_i32$0 = 0;
      $5074$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $5065$hi;
      i64toi32_i32$3 = $166;
      i64toi32_i32$1 = $5074$hi;
      i64toi32_i32$2 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(HEAPF32[($7 + 80 | 0) >> 2]) + $15)), wasm2js_scratch_load_i32(2));
      i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
      CalcWindowSizeAfterConstraint_28ImGuiWindow__2c_20ImVec2_20const__29($5054 | 0, $5055 | 0, i64toi32_i32$3 | i64toi32_i32$2 | 0 | 0, i64toi32_i32$1 | 0);
      $52 = Math_fround(HEAPF32[($3 + 260 | 0) >> 2]);
      $53 = Math_fround(HEAPF32[($3 + 256 | 0) >> 2]);
      HEAPF32[($29 + 19024 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($29 + 19024 | 0) >> 2]) - $15);
      $4 = $29 + 19028 | 0;
      HEAPF32[$4 >> 2] = Math_fround(Math_fround(HEAPF32[$4 >> 2]) - $13);
     }
     label$335 : {
      if ($53 == Math_fround(3402823466385288598117041.0e14)) {
       break label$335
      }
      HEAPF32[($7 + 80 | 0) >> 2] = $53;
      HEAPF32[($7 + 84 | 0) >> 2] = $52;
      if ((HEAPU8[($7 + 9 | 0) >> 0] | 0) & 1 | 0) {
       break label$335
      }
      $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!(Math_fround(HEAPF32[($4 + 23384 | 0) >> 2]) <= Math_fround(0.0))) {
       break label$335
      }
      HEAPF32[($4 + 23384 | 0) >> 2] = Math_fround(HEAPF32[($4 + 28 | 0) >> 2]);
     }
     label$336 : {
      if ($51 == Math_fround(3402823466385288598117041.0e14)) {
       break label$336
      }
      $4 = $7 + 68 | 0;
      label$337 : {
       label$338 : {
        if (!(Math_fround(Math_abs($50)) < Math_fround(2147483648.0))) {
         break label$338
        }
        $11 = ~~$50;
        break label$337;
       }
       $11 = -2147483648;
      }
      HEAPF32[$4 >> 2] = Math_fround($11 | 0);
      label$339 : {
       label$340 : {
        if (!(Math_fround(Math_abs($51)) < Math_fround(2147483648.0))) {
         break label$340
        }
        $4 = ~~$51;
        break label$339;
       }
       $4 = -2147483648;
      }
      HEAPF32[($7 + 64 | 0) >> 2] = Math_fround($4 | 0);
      if ((HEAPU8[($7 + 9 | 0) >> 0] | 0) & 1 | 0) {
       break label$336
      }
      $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!(Math_fround(HEAPF32[($4 + 23384 | 0) >> 2]) <= Math_fround(0.0))) {
       break label$336
      }
      HEAPF32[($4 + 23384 | 0) >> 2] = Math_fround(HEAPF32[($4 + 28 | 0) >> 2]);
     }
     i64toi32_i32$0 = $7;
     i64toi32_i32$1 = HEAP32[($7 + 80 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[($7 + 84 | 0) >> 2] | 0;
     $5149 = i64toi32_i32$1;
     i64toi32_i32$1 = $7;
     HEAP32[($7 + 72 | 0) >> 2] = $5149;
     HEAP32[($7 + 76 | 0) >> 2] = i64toi32_i32$3;
    }
    $22 = $22 | $2 | 0;
    $16 = $16 | $2 | 0;
   }
   HEAP8[($7 + 230 | 0) >> 0] = $8;
   $8 = HEAP32[($7 + 44 | 0) >> 2] | 0;
   label$341 : {
    if (!(HEAPU8[($7 + 218 | 0) >> 0] | 0)) {
     break label$341
    }
    label$342 : {
     if (HEAPU8[($8 + 69 | 0) >> 0] | 0) {
      break label$342
     }
     i64toi32_i32$0 = $7;
     i64toi32_i32$3 = HEAP32[($7 + 64 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($7 + 68 | 0) >> 2] | 0;
     $5167 = i64toi32_i32$3;
     i64toi32_i32$3 = $8;
     HEAP32[($8 + 8 | 0) >> 2] = $5167;
     HEAP32[($8 + 12 | 0) >> 2] = i64toi32_i32$1;
     $8 = HEAP32[($7 + 44 | 0) >> 2] | 0;
    }
    label$343 : {
     if (HEAPU8[($8 + 70 | 0) >> 0] | 0) {
      break label$343
     }
     i64toi32_i32$0 = $7;
     i64toi32_i32$1 = HEAP32[($7 + 72 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[($7 + 76 | 0) >> 2] | 0;
     $5174 = i64toi32_i32$1;
     i64toi32_i32$1 = $8;
     HEAP32[($8 + 16 | 0) >> 2] = $5174;
     HEAP32[($8 + 20 | 0) >> 2] = i64toi32_i32$3;
     $8 = HEAP32[($7 + 44 | 0) >> 2] | 0;
    }
    $13 = Math_fround(HEAPF32[($8 + 224 | 0) >> 2]);
    HEAPF32[($8 + 24 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8 + 8 | 0) >> 2]) + $13);
    $15 = Math_fround(HEAPF32[($8 + 228 | 0) >> 2]);
    HEAPF32[($8 + 28 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8 + 12 | 0) >> 2]) + $15);
    $13 = Math_fround(Math_fround(Math_fround(HEAPF32[($8 + 16 | 0) >> 2]) - $13) + Math_fround(HEAPF32[($8 + 232 | 0) >> 2]));
    HEAPF32[($8 + 32 | 0) >> 2] = $13 <= Math_fround(0.0) ? Math_fround(0.0) : $13;
    $13 = Math_fround(Math_fround(Math_fround(HEAPF32[($8 + 20 | 0) >> 2]) - $15) + Math_fround(HEAPF32[($8 + 236 | 0) >> 2]));
    HEAPF32[($8 + 36 | 0) >> 2] = $13 <= Math_fround(0.0) ? Math_fround(0.0) : $13;
    $8 = HEAP32[($7 + 44 | 0) >> 2] | 0;
    $15 = Math_fround(HEAPF32[($8 + 20 | 0) >> 2]);
    $13 = Math_fround(HEAPF32[($8 + 12 | 0) >> 2]);
    $37 = Math_fround(HEAPF32[($8 + 8 | 0) >> 2]);
    HEAPF32[($3 + 128 | 0) >> 2] = Math_fround($37 + Math_fround(HEAPF32[($8 + 16 | 0) >> 2]));
    HEAPF32[($3 + 124 | 0) >> 2] = $13;
    HEAPF32[($3 + 120 | 0) >> 2] = $37;
    HEAPF32[($3 + 132 | 0) >> 2] = Math_fround($13 + $15);
   }
   i64toi32_i32$0 = $8;
   i64toi32_i32$3 = HEAP32[($8 + 8 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($8 + 12 | 0) >> 2] | 0;
   $5246 = i64toi32_i32$3;
   i64toi32_i32$3 = $7;
   HEAP32[($7 + 52 | 0) >> 2] = $5246;
   HEAP32[($7 + 56 | 0) >> 2] = i64toi32_i32$1;
   $40 = Math_fround(HEAPF32[($7 + 80 | 0) >> 2]);
   label$344 : {
    if (HEAPU8[($7 + 222 | 0) >> 0] | 0) {
     break label$344
    }
    $37 = Math_fround(HEAPF32[($7 + 140 | 0) >> 2]);
    $15 = Math_fround(Math_fround(HEAPF32[($7 + 84 | 0) >> 2]) - Math_fround(Math_fround(HEAPF32[($7 + 132 | 0) >> 2]) + $37));
    $36 = Math_fround($42 + Math_fround(Math_fround(HEAPF32[($7 + 528 | 0) >> 2]) - Math_fround(HEAPF32[($7 + 520 | 0) >> 2])));
    $8 = $7 + 524 | 0;
    $38 = Math_fround(0.0);
    $13 = Math_fround(0.0);
    label$345 : {
     if ($10) {
      break label$345
     }
     $13 = Math_fround(HEAPF32[($7 + 116 | 0) >> 2]);
     $13 = Math_fround(Math_fround($13 + $13) + Math_fround(HEAPF32[($7 + 92 | 0) >> 2]));
     $38 = Math_fround(HEAPF32[($7 + 112 | 0) >> 2]);
     $38 = Math_fround(Math_fround($38 + $38) + Math_fround(HEAPF32[($7 + 88 | 0) >> 2]));
    }
    $39 = Math_fround(HEAPF32[$8 >> 2]);
    $41 = Math_fround(HEAPF32[($7 + 516 | 0) >> 2]);
    $15 = $16 & 1 | 0 ? $15 : $36;
    label$346 : {
     label$347 : {
      label$348 : {
       label$349 : {
        label$350 : {
         label$351 : {
          label$352 : {
           label$353 : {
            label$354 : {
             label$355 : {
              if ($6 & 16384 | 0) {
               break label$355
              }
              $2 = $6 & 8 | 0;
              $10 = $13 > $15 & !$2 | 0;
              HEAP8[($7 + 217 | 0) >> 0] = $10;
              $11 = $7 + 217 | 0;
              if (!($6 & 32768 | 0)) {
               break label$354
              }
              $8 = 1;
              HEAP8[($7 + 216 | 0) >> 0] = 1;
              if (!$10) {
               break label$349
              }
              break label$347;
             }
             HEAP8[($7 + 217 | 0) >> 0] = 1;
             if ($6 & 32768 | 0) {
              break label$352
             }
             $11 = $7 + 217 | 0;
             $2 = $6 & 8 | 0;
             break label$353;
            }
            $4 = 0;
            if (!$10) {
             break label$351
            }
            $2 = 0;
           }
           $36 = Math_fround(HEAPF32[($5 + 14512 | 0) >> 2]);
           $4 = 1;
           break label$350;
          }
          $8 = 1;
          HEAP8[($7 + 216 | 0) >> 0] = 1;
          break label$347;
         }
         $36 = Math_fround(0.0);
        }
        label$356 : {
         label$357 : {
          if (!($38 > Math_fround(($22 & 1 | 0 ? $40 : Math_fround($43 + Math_fround($39 - $41))) - $36))) {
           break label$357
          }
          if (!$2) {
           break label$356
          }
         }
         $8 = 0;
         HEAP8[($7 + 216 | 0) >> 0] = 0;
         break label$348;
        }
        $10 = $6 & 2048 | 0;
        $8 = $10 >>> 11 | 0;
        HEAP8[($7 + 216 | 0) >> 0] = $8;
        $2 = 0;
        if (!$10 | $4 | 0) {
         break label$348
        }
       }
       $4 = $13 > $15 & !$2 | 0;
       HEAP8[$11 >> 0] = $4;
       $8 = 1;
      }
      if ($4) {
       break label$347
      }
      $13 = Math_fround(0.0);
      break label$346;
     }
     $13 = Math_fround(HEAPF32[($5 + 14512 | 0) >> 2]);
    }
    label$358 : {
     label$359 : {
      if ($8) {
       break label$359
      }
      $15 = Math_fround(0.0);
      break label$358;
     }
     $15 = Math_fround(HEAPF32[($5 + 14512 | 0) >> 2]);
    }
    HEAPF32[($7 + 212 | 0) >> 2] = $15;
    HEAPF32[($7 + 208 | 0) >> 2] = $13;
    HEAPF32[($7 + 140 | 0) >> 2] = Math_fround($37 + $15);
    HEAPF32[($7 + 136 | 0) >> 2] = Math_fround($13 + Math_fround(HEAPF32[($7 + 136 | 0) >> 2]));
   }
   $11 = ($6 & 83886080 | 0 | 0) != (16777216 | 0) | ($21 | 0) == (50331648 | 0) | 0;
   $8 = $11 ? $3 + 120 | 0 : $9 + 580 | 0;
   i64toi32_i32$0 = $8 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $5408 = i64toi32_i32$1;
   i64toi32_i32$1 = ($3 + 80 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $5408;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$3;
   i64toi32_i32$0 = $8;
   i64toi32_i32$3 = HEAP32[$8 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($8 + 4 | 0) >> 2] | 0;
   $5411 = i64toi32_i32$3;
   i64toi32_i32$3 = $3;
   HEAP32[($3 + 80 | 0) >> 2] = $5411;
   HEAP32[($3 + 84 | 0) >> 2] = i64toi32_i32$1;
   $13 = Math_fround(HEAPF32[($7 + 68 | 0) >> 2]);
   $37 = Math_fround($13 + Math_fround(HEAPF32[($7 + 76 | 0) >> 2]));
   $15 = Math_fround(HEAPF32[($7 + 64 | 0) >> 2]);
   $38 = Math_fround(HEAPF32[($7 + 72 | 0) >> 2]);
   $36 = Math_fround($15 + $38);
   $39 = Math_fround(0.0);
   label$360 : {
    if ((HEAPU8[($7 + 8 | 0) >> 0] | 0) & 1 | 0) {
     break label$360
    }
    $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    $39 = Math_fround(Math_fround(Math_fround(HEAPF32[($8 + 15492 | 0) >> 2]) * Math_fround(HEAPF32[($7 + 660 | 0) >> 2])) * Math_fround(HEAPF32[($7 + 664 | 0) >> 2]));
    label$361 : {
     $4 = HEAP32[($7 + 820 | 0) >> 2] | 0;
     if (!$4) {
      break label$361
     }
     $39 = Math_fround($39 * Math_fround(HEAPF32[($4 + 660 | 0) >> 2]));
    }
    $41 = Math_fround(HEAPF32[($8 + 14460 | 0) >> 2]);
    $39 = Math_fround(Math_fround($41 + $41) + $39);
   }
   $4 = $7 + 124 | 0;
   i64toi32_i32$0 = $7;
   i64toi32_i32$1 = HEAP32[($7 + 64 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[($7 + 68 | 0) >> 2] | 0;
   $14 = i64toi32_i32$1;
   $14$hi = i64toi32_i32$3;
   HEAPF32[(($3 + 64 | 0) + 12 | 0) >> 2] = Math_fround($13 + $39);
   HEAPF32[($3 + 72 | 0) >> 2] = Math_fround($40 + $15);
   i64toi32_i32$1 = $3;
   HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = $14;
   HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = i64toi32_i32$3;
   $2 = $7 + 512 | 0;
   HEAPF32[$2 >> 2] = $37;
   HEAPF32[($7 + 508 | 0) >> 2] = $36;
   HEAPF32[($7 + 504 | 0) >> 2] = $13;
   HEAPF32[($7 + 500 | 0) >> 2] = $15;
   $39 = (wasm2js_scratch_store_i32(2, $14), wasm2js_scratch_load_f32());
   label$362 : {
    if (!((HEAPU8[($7 + 905 | 0) >> 0] | 0) & 1 | 0)) {
     break label$362
    }
    $40 = Math_fround(0.0);
    label$363 : {
     if ((HEAPU8[($7 + 8 | 0) >> 0] | 0) & 1 | 0) {
      break label$363
     }
     $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     $40 = Math_fround(Math_fround(Math_fround(HEAPF32[($8 + 15492 | 0) >> 2]) * Math_fround(HEAPF32[($7 + 660 | 0) >> 2])) * Math_fround(HEAPF32[($7 + 664 | 0) >> 2]));
     label$364 : {
      $10 = HEAP32[($7 + 820 | 0) >> 2] | 0;
      if (!$10) {
       break label$364
      }
      $40 = Math_fround($40 * Math_fround(HEAPF32[($10 + 660 | 0) >> 2]));
     }
     $41 = Math_fround(HEAPF32[($8 + 14460 | 0) >> 2]);
     $40 = Math_fround(Math_fround($41 + $41) + $40);
    }
    $13 = Math_fround($13 + $40);
   }
   $40 = Math_fround(HEAPF32[($3 + 80 | 0) >> 2]);
   $41 = Math_fround(HEAPF32[($3 + 84 | 0) >> 2]);
   HEAPF32[($7 + 504 | 0) >> 2] = $13 >= $41 ? $13 : $41;
   HEAPF32[($7 + 500 | 0) >> 2] = $15 >= $40 ? $15 : $40;
   $8 = ($3 + 80 | 0) + 12 | 0;
   $13 = Math_fround(HEAPF32[$8 >> 2]);
   $15 = Math_fround(HEAPF32[($3 + 88 | 0) >> 2]);
   $40 = Math_fround(Math_fround(HEAPF32[($7 + 128 | 0) >> 2]) + $39);
   HEAPF32[($7 + 516 | 0) >> 2] = $40;
   $42 = Math_fround(HEAPF32[($7 + 68 | 0) >> 2]);
   $41 = Math_fround($42 + Math_fround(HEAPF32[($7 + 132 | 0) >> 2]));
   HEAPF32[($7 + 520 | 0) >> 2] = $41;
   $39 = Math_fround(Math_fround($38 + $39) - Math_fround(HEAPF32[($7 + 136 | 0) >> 2]));
   HEAPF32[($7 + 524 | 0) >> 2] = $39;
   $42 = Math_fround(Math_fround($42 + Math_fround(HEAPF32[($7 + 76 | 0) >> 2])) - Math_fround(HEAPF32[($7 + 140 | 0) >> 2]));
   HEAPF32[($7 + 528 | 0) >> 2] = $42;
   HEAPF32[$2 >> 2] = $37 < $13 ? $37 : $13;
   HEAPF32[($7 + 508 | 0) >> 2] = $36 < $15 ? $36 : $15;
   label$365 : {
    label$366 : {
     $13 = Math_fround(Math_fround($41 + Math_fround(.5)) + Math_fround(HEAPF32[(($6 & 1025 | 0 | 0) == (1 | 0) ? $4 : $5 + 14468 | 0) >> 2]));
     if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
      break label$366
     }
     $4 = ~~$13;
     break label$365;
    }
    $4 = -2147483648;
   }
   $2 = $7 + 536 | 0;
   $13 = Math_fround($4 | 0);
   HEAPF32[$2 >> 2] = $13;
   label$367 : {
    label$368 : {
     $37 = Math_fround(HEAPF32[($7 + 124 | 0) >> 2]);
     $15 = Math_fround(Math_fround($42 + Math_fround(.5)) - $37);
     if (!(Math_fround(Math_abs($15)) < Math_fround(2147483648.0))) {
      break label$368
     }
     $4 = ~~$15;
     break label$367;
    }
    $4 = -2147483648;
   }
   $10 = $7 + 544 | 0;
   $15 = Math_fround($4 | 0);
   HEAPF32[$10 >> 2] = $15;
   $36 = Math_fround(HEAPF32[($3 + 80 | 0) >> 2]);
   $43 = Math_fround(HEAPF32[($3 + 88 | 0) >> 2]);
   $45 = Math_fround(HEAPF32[($3 + 84 | 0) >> 2]);
   $44 = Math_fround(HEAPF32[$8 >> 2]);
   HEAPF32[$2 >> 2] = $45 > $13 ? $45 : $44 < $13 ? $44 : $13;
   label$369 : {
    label$370 : {
     $13 = Math_fround(HEAPF32[($7 + 112 | 0) >> 2]);
     $45 = Math_fround($13 * Math_fround(.5));
     if (!(Math_fround(Math_abs($45)) < Math_fround(2147483648.0))) {
      break label$370
     }
     $4 = ~~$45;
     break label$369;
    }
    $4 = -2147483648;
   }
   label$371 : {
    label$372 : {
     $45 = Math_fround($4 | 0);
     $45 = $37 <= $45 ? $45 : $37;
     $37 = Math_fround(Math_fround($40 + Math_fround(.5)) + $45);
     if (!(Math_fround(Math_abs($37)) < Math_fround(2147483648.0))) {
      break label$372
     }
     $4 = ~~$37;
     break label$371;
    }
    $4 = -2147483648;
   }
   $37 = Math_fround($4 | 0);
   HEAPF32[($7 + 532 | 0) >> 2] = $36 > $37 ? $36 : $43 < $37 ? $43 : $37;
   $37 = Math_fround(HEAPF32[($3 + 80 | 0) >> 2]);
   $36 = Math_fround(HEAPF32[($3 + 88 | 0) >> 2]);
   $43 = Math_fround(HEAPF32[($3 + 84 | 0) >> 2]);
   $44 = Math_fround(HEAPF32[$8 >> 2]);
   HEAPF32[$10 >> 2] = $43 > $15 ? $43 : $44 < $15 ? $44 : $15;
   label$373 : {
    label$374 : {
     $15 = Math_fround(Math_fround($39 + Math_fround(.5)) - $45);
     if (!(Math_fround(Math_abs($15)) < Math_fround(2147483648.0))) {
      break label$374
     }
     $8 = ~~$15;
     break label$373;
    }
    $8 = -2147483648;
   }
   $15 = Math_fround($8 | 0);
   HEAPF32[($7 + 540 | 0) >> 2] = $37 > $15 ? $37 : $36 < $15 ? $36 : $15;
   label$375 : {
    label$376 : {
     if (!($38 > Math_fround(0.0))) {
      break label$376
     }
     if ($6 & 33554496 | 0) {
      break label$376
     }
     $15 = Math_fround($38 * Math_fround(.6499999761581421));
     break label$375;
    }
    $15 = Math_fround(Math_fround(HEAPF32[($5 + 15488 | 0) >> 2]) * Math_fround(16.0));
   }
   $4 = $3 + 88 | 0;
   label$377 : {
    label$378 : {
     if (!(Math_fround(Math_abs($15)) < Math_fround(2147483648.0))) {
      break label$378
     }
     $8 = ~~$15;
     break label$377;
    }
    $8 = -2147483648;
   }
   HEAPF32[($7 + 632 | 0) >> 2] = Math_fround($8 | 0);
   $13 = Math_fround(Math_fround(Math_fround($13 + $13) + Math_fround(HEAPF32[($7 + 88 | 0) >> 2])) - Math_fround($39 - $40));
   HEAPF32[($7 + 176 | 0) >> 2] = $13 <= Math_fround(0.0) ? Math_fround(0.0) : $13;
   $13 = Math_fround(HEAPF32[($7 + 116 | 0) >> 2]);
   $13 = Math_fround(Math_fround(Math_fround($13 + $13) + Math_fround(HEAPF32[($7 + 92 | 0) >> 2])) - Math_fround($42 - $41));
   HEAPF32[($7 + 180 | 0) >> 2] = $13 <= Math_fround(0.0) ? Math_fround(0.0) : $13;
   CalcNextScrollFromScrollTargetAndClamp_28ImGuiWindow__29($3 + 256 | 0 | 0, $7 | 0);
   i64toi32_i32$0 = $3;
   i64toi32_i32$3 = HEAP32[($3 + 256 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($3 + 260 | 0) >> 2] | 0;
   $5807 = i64toi32_i32$3;
   i64toi32_i32$3 = $7;
   HEAP32[($7 + 168 | 0) >> 2] = $5807;
   HEAP32[($7 + 172 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$3 = $7;
   i64toi32_i32$1 = 2139095039;
   HEAP32[($7 + 184 | 0) >> 2] = 2139095039;
   HEAP32[($7 + 188 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$3 = $7;
   i64toi32_i32$1 = 0;
   HEAP32[($7 + 144 | 0) >> 2] = 0;
   HEAP32[($7 + 148 | 0) >> 2] = i64toi32_i32$1;
   ImDrawList__PushTextureID_28void__29(HEAP32[($7 + 672 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[((HEAP32[($5 + 15484 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
   $22 = 0;
   $8 = HEAP32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 16116 | 0) >> 2] | 0;
   HEAP8[($8 + 221 | 0) >> 0] = 1;
   ImDrawList__PushClipRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20bool_29(HEAP32[($8 + 672 | 0) >> 2] | 0 | 0, $3 + 80 | 0 | 0, $4 | 0, 0 | 0);
   $4 = HEAP32[($8 + 672 | 0) >> 2] | 0;
   $4 = (((HEAP32[($4 + 60 | 0) >> 2] | 0) << 4 | 0) + (HEAP32[($4 + 68 | 0) >> 2] | 0) | 0) + -16 | 0;
   i64toi32_i32$0 = $4;
   i64toi32_i32$1 = HEAP32[$4 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[($4 + 4 | 0) >> 2] | 0;
   $14 = i64toi32_i32$1;
   $14$hi = i64toi32_i32$3;
   i64toi32_i32$0 = $4;
   i64toi32_i32$3 = HEAP32[($4 + 8 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($4 + 12 | 0) >> 2] | 0;
   $5839 = i64toi32_i32$3;
   i64toi32_i32$3 = $8 + 588 | 0;
   HEAP32[i64toi32_i32$3 >> 2] = $5839;
   HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $14$hi;
   i64toi32_i32$3 = $8;
   HEAP32[($8 + 580 | 0) >> 2] = $14;
   HEAP32[($8 + 584 | 0) >> 2] = i64toi32_i32$1;
   label$379 : {
    $4 = HEAPU8[($7 + 905 | 0) >> 0] | 0;
    if (($4 & 5 | 0 | 0) == (1 | 0)) {
     break label$379
    }
    label$380 : {
     if ($11) {
      break label$380
     }
     $22 = 0;
     $8 = 0;
     label$381 : {
      $2 = HEAP32[($9 + 436 | 0) >> 2] | 0;
      if (($2 | 0) < (2 | 0)) {
       break label$381
      }
      $8 = 0;
      $2 = HEAP32[((($2 << 2 | 0) + (HEAP32[($9 + 444 | 0) >> 2] | 0) | 0) + -8 | 0) >> 2] | 0;
      if (!$2) {
       break label$381
      }
      $8 = 0;
      $13 = Math_fround(HEAPF32[($7 + 68 | 0) >> 2]);
      $15 = Math_fround(HEAPF32[($2 + 68 | 0) >> 2]);
      if (!($13 < Math_fround($15 + Math_fround(HEAPF32[($2 + 76 | 0) >> 2])))) {
       break label$381
      }
      $8 = 0;
      if (!(Math_fround($13 + Math_fround(HEAPF32[($7 + 76 | 0) >> 2])) > $15)) {
       break label$381
      }
      $8 = 0;
      $13 = Math_fround(HEAPF32[($7 + 64 | 0) >> 2]);
      $15 = Math_fround(HEAPF32[($2 + 64 | 0) >> 2]);
      if (!($13 < Math_fround($15 + Math_fround(HEAPF32[($2 + 72 | 0) >> 2])))) {
       break label$381
      }
      $8 = Math_fround($13 + Math_fround(HEAPF32[$28 >> 2])) > $15;
     }
     $2 = HEAP32[($7 + 672 | 0) >> 2] | 0;
     if (HEAP32[((Math_imul(HEAP32[$2 >> 2] | 0, 40) + (HEAP32[($2 + 8 | 0) >> 2] | 0) | 0) + -12 | 0) >> 2] | 0) {
      break label$380
     }
     $2 = HEAP32[($9 + 672 | 0) >> 2] | 0;
     if ((HEAP32[($2 + 24 | 0) >> 2] | 0 | 0) < (1 | 0)) {
      break label$380
     }
     if ($8) {
      break label$380
     }
     HEAP32[($7 + 672 | 0) >> 2] = $2;
     $22 = 1;
    }
    label$382 : {
     $8 = HEAP32[($5 + 18992 | 0) >> 2] | 0;
     if ($8) {
      break label$382
     }
     $8 = HEAP32[($5 + 18648 | 0) >> 2] | 0;
    }
    $10 = 1;
    label$383 : {
     if ($19) {
      break label$383
     }
     label$384 : {
      if ($8) {
       break label$384
      }
      $10 = 0;
      break label$383;
     }
     if ((HEAP32[($7 + 840 | 0) >> 2] | 0 | 0) == (HEAP32[($8 + 840 | 0) >> 2] | 0 | 0)) {
      break label$383
     }
     $10 = 0;
     $2 = HEAP32[($7 + 932 | 0) >> 2] | 0;
     if (!$2) {
      break label$383
     }
     $10 = ($2 | 0) == (HEAP32[($8 + 932 | 0) >> 2] | 0 | 0);
    }
    $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    HEAP8[($7 + 224 | 0) >> 0] = 0;
    $38 = Math_fround(HEAPF32[($7 + 124 | 0) >> 2]);
    $44 = Math_fround(HEAPF32[($7 + 120 | 0) >> 2]);
    label$385 : {
     label$386 : {
      if (!(HEAPU8[($7 + 222 | 0) >> 0] | 0)) {
       break label$386
      }
      $4 = $8 + 14468 | 0;
      $36 = Math_fround(HEAPF32[$4 >> 2]);
      HEAPF32[$4 >> 2] = $38;
      $4 = 12;
      label$387 : {
       if (!$10) {
        break label$387
       }
       $4 = HEAPU8[($8 + 18710 | 0) >> 0] | 0 ? 12 : 11;
      }
      $4 = ($8 + 14396 | 0) + ($4 << 4 | 0) | 0;
      $38 = Math_fround(HEAPF32[($4 + 212 | 0) >> 2]);
      $13 = Math_fround(HEAPF32[($4 + 208 | 0) >> 2]);
      $15 = Math_fround(HEAPF32[($4 + 200 | 0) >> 2]);
      $37 = Math_fround(HEAPF32[($4 + 204 | 0) >> 2]);
      $4 = HEAPU8[($7 + 218 | 0) >> 0] | 0;
      $39 = Math_fround(HEAPF32[($8 + 14396 | 0) >> 2]);
      i64toi32_i32$0 = $3;
      i64toi32_i32$1 = HEAP32[($3 + 64 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[($3 + 68 | 0) >> 2] | 0;
      $14 = i64toi32_i32$1;
      $14$hi = i64toi32_i32$3;
      i64toi32_i32$1 = $3;
      HEAP32[(i64toi32_i32$1 + 256 | 0) >> 2] = $14;
      HEAP32[(i64toi32_i32$1 + 260 | 0) >> 2] = i64toi32_i32$3;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] | 0;
      $59 = i64toi32_i32$3;
      $59$hi = i64toi32_i32$1;
      i64toi32_i32$3 = $3;
      HEAP32[($3 + 240 | 0) >> 2] = $59;
      HEAP32[($3 + 244 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$1 = $14$hi;
      i64toi32_i32$3 = $3;
      HEAP32[($3 + 40 | 0) >> 2] = $14;
      HEAP32[($3 + 44 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$1 = $59$hi;
      i64toi32_i32$3 = $3;
      HEAP32[($3 + 32 | 0) >> 2] = $59;
      HEAP32[($3 + 36 | 0) >> 2] = i64toi32_i32$1;
      label$388 : {
       label$389 : {
        $37 = Math_fround(Math_fround(($37 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($37, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($37)) < Math_fround(2147483648.0))) {
         break label$389
        }
        $2 = ~~$37;
        break label$388;
       }
       $2 = -2147483648;
      }
      $2 = $2 << 8 | 0;
      label$390 : {
       label$391 : {
        $15 = Math_fround(Math_fround(($15 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($15, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($15)) < Math_fround(2147483648.0))) {
         break label$391
        }
        $10 = ~~$15;
        break label$390;
       }
       $10 = -2147483648;
      }
      $2 = $2 | $10 | 0;
      label$392 : {
       label$393 : {
        $13 = Math_fround(Math_fround(($13 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($13, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
         break label$393
        }
        $10 = ~~$13;
        break label$392;
       }
       $10 = -2147483648;
      }
      $2 = $2 | ($10 << 16 | 0) | 0;
      label$394 : {
       label$395 : {
        $13 = Math_fround($38 * $39);
        $13 = Math_fround(Math_fround(($13 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($13, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
         break label$395
        }
        $10 = ~~$13;
        break label$394;
       }
       $10 = -2147483648;
      }
      ImGui__RenderFrame_28ImVec2_2c_20ImVec2_2c_20unsigned_20int_2c_20bool_2c_20float_29($3 + 40 | 0 | 0, $3 + 32 | 0 | 0, $2 | ($4 ? -16777216 : $10 << 24 | 0) | 0 | 0, 1 | 0, Math_fround($44));
      HEAPF32[($8 + 14468 | 0) >> 2] = $36;
      break label$385;
     }
     label$396 : {
      $2 = HEAP32[($7 + 8 | 0) >> 2] | 0;
      if ($2 & 128 | 0) {
       break label$396
      }
      $16 = 0;
      label$397 : {
       if (!(HEAPU8[($8 + 19040 | 0) >> 0] | 0)) {
        break label$397
       }
       if (((HEAP32[($8 + 16016 | 0) >> 2] | 0) - (HEAP32[($8 + 19148 | 0) >> 2] | 0) | 0 | 0) > (1 | 0)) {
        break label$397
       }
       if (!(HEAPU8[($8 + 99 | 0) >> 0] | 0)) {
        break label$397
       }
       if ((HEAP32[($8 + 19072 | 0) >> 2] | 0 | 0) == (-1 | 0)) {
        break label$397
       }
       if (strcmp(67565 | 0, $8 + 19076 | 0 | 0) | 0) {
        break label$397
       }
       $16 = (HEAP32[(HEAP32[($8 + 19056 | 0) >> 2] | 0) >> 2] | 0 | 0) == ($7 | 0);
      }
      $11 = 4;
      label$398 : {
       if ($2 & 100663296 | 0) {
        break label$398
       }
       $11 = ($2 & 16777216 | 0) >>> 24 | 0 ? ($4 & 1 | 0 ? 2 : 3) : 2;
      }
      label$399 : {
       label$400 : {
        $11 = ($8 + 14396 | 0) + ($11 << 4 | 0) | 0;
        $13 = Math_fround(HEAPF32[($11 + 204 | 0) >> 2]);
        $13 = Math_fround(Math_fround(($13 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($13, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
         break label$400
        }
        $21 = ~~$13;
        break label$399;
       }
       $21 = -2147483648;
      }
      label$401 : {
       label$402 : {
        $13 = Math_fround(HEAPF32[($11 + 200 | 0) >> 2]);
        $13 = Math_fround(Math_fround(($13 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($13, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
         break label$402
        }
        $26 = ~~$13;
        break label$401;
       }
       $26 = -2147483648;
      }
      $21 = $21 << 8 | 0;
      label$403 : {
       label$404 : {
        $13 = Math_fround(HEAPF32[($11 + 208 | 0) >> 2]);
        $13 = Math_fround(Math_fround(($13 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($13, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
         break label$404
        }
        $28 = ~~$13;
        break label$403;
       }
       $28 = -2147483648;
      }
      $21 = $21 | $26 | 0;
      $26 = $28 << 16 | 0;
      label$405 : {
       label$406 : {
        $13 = Math_fround(Math_fround(HEAPF32[($11 + 212 | 0) >> 2]) * Math_fround(HEAPF32[($8 + 14396 | 0) >> 2]));
        $13 = Math_fround(Math_fround(($13 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($13, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
         break label$406
        }
        $28 = ~~$13;
        break label$405;
       }
       $28 = -2147483648;
      }
      $11 = $21 | $26 | 0;
      label$407 : {
       label$408 : {
        if (!(HEAPU8[($7 + 218 | 0) >> 0] | 0)) {
         break label$408
        }
        $21 = $11 | -16777216 | 0;
        if (!$16) {
         break label$407
        }
        $4 = HEAP32[($7 + 44 | 0) >> 2] | 0;
        HEAPF32[($4 + 96 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4 + 96 | 0) >> 2]) * Math_fround(.5));
        $4 = HEAPU8[($7 + 905 | 0) >> 0] | 0;
        break label$407;
       }
       label$409 : {
        label$410 : {
         if (!((HEAPU8[($8 + 18340 | 0) >> 0] | 0) & 64 | 0)) {
          break label$410
         }
         $13 = Math_fround(HEAPF32[($8 + 18428 | 0) >> 2]);
         $13 = $16 ? Math_fround($13 * Math_fround(.5)) : $13;
         break label$409;
        }
        $13 = Math_fround(.5);
        if ($16) {
         break label$409
        }
        $21 = $28 << 24 | 0 | $11 | 0;
        break label$407;
       }
       label$411 : {
        label$412 : {
         $13 = Math_fround(Math_fround(($13 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($13, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
         if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
          break label$412
         }
         $21 = ~~$13;
         break label$411;
        }
        $21 = -2147483648;
       }
       $21 = $21 << 24 | 0 | ($11 & 16777215 | 0) | 0;
      }
      label$413 : {
       if (!($4 & 1 | 0)) {
        break label$413
       }
       HEAP32[((HEAP32[($7 + 932 | 0) >> 2] | 0) + 108 | 0) >> 2] = $21;
       $4 = HEAPU8[($7 + 905 | 0) >> 0] | 0;
      }
      label$414 : {
       label$415 : {
        label$416 : {
         if (!($4 & 1 | 0)) {
          break label$416
         }
         $26 = !($2 & 536870912 | 0);
         $11 = HEAP32[((HEAP32[((HEAP32[($7 + 932 | 0) >> 2] | 0) + 112 | 0) >> 2] | 0) + 672 | 0) >> 2] | 0;
         break label$415;
        }
        $11 = HEAP32[($7 + 672 | 0) >> 2] | 0;
        $26 = 0;
        $16 = 1;
        $4 = $2;
        if (!($4 & 536870912 | 0)) {
         break label$414
        }
       }
       ImDrawListSplitter__SetCurrentChannel_28ImDrawList__2c_20int_29($11 + 120 | 0 | 0, $11 | 0, 0 | 0);
       $4 = HEAP32[($7 + 8 | 0) >> 2] | 0;
       $16 = $26;
      }
      $15 = Math_fround(0.0);
      label$417 : {
       if ($4 & 1 | 0) {
        break label$417
       }
       $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
       $13 = Math_fround(Math_fround(Math_fround(HEAPF32[($4 + 15492 | 0) >> 2]) * Math_fround(HEAPF32[($7 + 660 | 0) >> 2])) * Math_fround(HEAPF32[($7 + 664 | 0) >> 2]));
       label$418 : {
        $26 = HEAP32[($7 + 820 | 0) >> 2] | 0;
        if (!$26) {
         break label$418
        }
        $13 = Math_fround($13 * Math_fround(HEAPF32[($26 + 660 | 0) >> 2]));
       }
       $15 = Math_fround(HEAPF32[($4 + 14460 | 0) >> 2]);
       $15 = Math_fround(Math_fround($15 + $15) + $13);
      }
      $13 = Math_fround(HEAPF32[($7 + 68 | 0) >> 2]);
      $37 = Math_fround(HEAPF32[($7 + 64 | 0) >> 2]);
      HEAPF32[($3 + 256 | 0) >> 2] = Math_fround($37 + Math_fround(0.0));
      HEAPF32[($3 + 260 | 0) >> 2] = Math_fround($15 + $13);
      $15 = Math_fround(HEAPF32[($7 + 72 | 0) >> 2]);
      HEAPF32[($3 + 244 | 0) >> 2] = Math_fround($13 + Math_fround(HEAPF32[($7 + 76 | 0) >> 2]));
      HEAPF32[($3 + 240 | 0) >> 2] = Math_fround($37 + $15);
      ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29($11 | 0, $3 + 256 | 0 | 0, $3 + 240 | 0 | 0, $21 | 0, Math_fround($44), ($2 & 1 | 0 ? 0 : 192) | 0);
      $4 = HEAPU8[($7 + 905 | 0) >> 0] | 0;
      if (!($4 & 1 | 0) & $16 | 0) {
       break label$396
      }
      ImDrawListSplitter__SetCurrentChannel_28ImDrawList__2c_20int_29($11 + 120 | 0 | 0, $11 | 0, 1 | 0);
      $4 = HEAPU8[($7 + 905 | 0) >> 0] | 0;
     }
     label$419 : {
      if (!($4 & 1 | 0)) {
       break label$419
      }
      $4 = HEAP32[($7 + 932 | 0) >> 2] | 0;
      HEAP16[($4 + 156 | 0) >> 1] = HEAPU16[($4 + 156 | 0) >> 1] | 0 | 2048 | 0;
     }
     label$420 : {
      $11 = $2 & 1 | 0;
      if ($11) {
       break label$420
      }
      if ((HEAPU8[($7 + 905 | 0) >> 0] | 0) & 1 | 0) {
       break label$420
      }
      label$421 : {
       label$422 : {
        $21 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
        $4 = ($21 + 14396 | 0) + ($10 ? 176 : 160) | 0;
        $13 = Math_fround(HEAPF32[($4 + 204 | 0) >> 2]);
        $13 = Math_fround(Math_fround(($13 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($13, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
         break label$422
        }
        $10 = ~~$13;
        break label$421;
       }
       $10 = -2147483648;
      }
      $10 = $10 << 8 | 0;
      label$423 : {
       label$424 : {
        $13 = Math_fround(HEAPF32[($4 + 200 | 0) >> 2]);
        $13 = Math_fround(Math_fround(($13 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($13, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
         break label$424
        }
        $16 = ~~$13;
        break label$423;
       }
       $16 = -2147483648;
      }
      $10 = $10 | $16 | 0;
      label$425 : {
       label$426 : {
        $13 = Math_fround(HEAPF32[($4 + 208 | 0) >> 2]);
        $13 = Math_fround(Math_fround(($13 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($13, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
         break label$426
        }
        $16 = ~~$13;
        break label$425;
       }
       $16 = -2147483648;
      }
      $26 = ($3 + 64 | 0) + 8 | 0;
      $10 = $10 | ($16 << 16 | 0) | 0;
      label$427 : {
       label$428 : {
        $13 = Math_fround(Math_fround(HEAPF32[($4 + 212 | 0) >> 2]) * Math_fround(HEAPF32[($21 + 14396 | 0) >> 2]));
        $13 = Math_fround(Math_fround(($13 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($13, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
         break label$428
        }
        $4 = ~~$13;
        break label$427;
       }
       $4 = -2147483648;
      }
      ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29(HEAP32[($7 + 672 | 0) >> 2] | 0 | 0, $3 + 64 | 0 | 0, $26 | 0, $10 | ($4 << 24 | 0) | 0 | 0, Math_fround($44), 48 | 0);
     }
     label$429 : {
      if (!($2 & 1024 | 0)) {
       break label$429
      }
      $10 = $7 + 68 | 0;
      $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      $36 = Math_fround(0.0);
      $37 = Math_fround(0.0);
      label$430 : {
       $21 = HEAP32[($7 + 8 | 0) >> 2] | 0;
       if ($21 & 1 | 0) {
        break label$430
       }
       $13 = Math_fround(Math_fround(Math_fround(HEAPF32[($4 + 15492 | 0) >> 2]) * Math_fround(HEAPF32[($7 + 660 | 0) >> 2])) * Math_fround(HEAPF32[($7 + 664 | 0) >> 2]));
       label$431 : {
        $16 = HEAP32[($7 + 820 | 0) >> 2] | 0;
        if (!$16) {
         break label$431
        }
        $13 = Math_fround($13 * Math_fround(HEAPF32[($16 + 660 | 0) >> 2]));
       }
       $15 = Math_fround(HEAPF32[($4 + 14460 | 0) >> 2]);
       $37 = Math_fround(Math_fround($15 + $15) + $13);
      }
      $13 = Math_fround(HEAPF32[$10 >> 2]);
      $39 = Math_fround(HEAPF32[($7 + 80 | 0) >> 2]);
      $15 = Math_fround(HEAPF32[($7 + 64 | 0) >> 2]);
      label$432 : {
       if (!($21 & 1024 | 0)) {
        break label$432
       }
       $36 = Math_fround(Math_fround(Math_fround(HEAPF32[($4 + 15492 | 0) >> 2]) * Math_fround(HEAPF32[($7 + 660 | 0) >> 2])) * Math_fround(HEAPF32[($7 + 664 | 0) >> 2]));
       $40 = Math_fround(HEAPF32[($7 + 396 | 0) >> 2]);
       label$433 : {
        $10 = HEAP32[($7 + 820 | 0) >> 2] | 0;
        if (!$10) {
         break label$433
        }
        $36 = Math_fround($36 * Math_fround(HEAPF32[($10 + 660 | 0) >> 2]));
       }
       $41 = Math_fround(HEAPF32[($4 + 14460 | 0) >> 2]);
       $36 = Math_fround(Math_fround($41 + $41) + Math_fround($40 + $36));
      }
      $40 = Math_fround(HEAPF32[($7 + 76 | 0) >> 2]);
      $10 = HEAP32[($7 + 672 | 0) >> 2] | 0;
      $41 = Math_fround(HEAPF32[($7 + 72 | 0) >> 2]);
      HEAPF32[($3 + 256 | 0) >> 2] = Math_fround($38 + $15);
      $37 = Math_fround($13 + $37);
      HEAPF32[($3 + 260 | 0) >> 2] = Math_fround(($37 >= $13 ? $37 : $13) + Math_fround(0.0));
      $37 = Math_fround($37 + $36);
      $13 = Math_fround($13 + $40);
      $36 = $37 < $13 ? $37 : $13;
      HEAPF32[($3 + 244 | 0) >> 2] = $36;
      $13 = Math_fround($15 + $39);
      $37 = Math_fround($15 + $41);
      $37 = $13 < $37 ? $13 : $37;
      HEAPF32[($3 + 240 | 0) >> 2] = Math_fround($37 - $38);
      label$434 : {
       label$435 : {
        $13 = Math_fround(HEAPF32[($4 + 14808 | 0) >> 2]);
        $13 = Math_fround(Math_fround(($13 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($13, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
         break label$435
        }
        $21 = ~~$13;
        break label$434;
       }
       $21 = -2147483648;
      }
      $21 = $21 << 8 | 0;
      label$436 : {
       label$437 : {
        $13 = Math_fround(HEAPF32[($4 + 14804 | 0) >> 2]);
        $13 = Math_fround(Math_fround(($13 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($13, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
         break label$437
        }
        $16 = ~~$13;
        break label$436;
       }
       $16 = -2147483648;
      }
      $21 = $21 | $16 | 0;
      label$438 : {
       label$439 : {
        $13 = Math_fround(HEAPF32[($4 + 14812 | 0) >> 2]);
        $13 = Math_fround(Math_fround(($13 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($13, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
         break label$439
        }
        $16 = ~~$13;
        break label$438;
       }
       $16 = -2147483648;
      }
      $21 = $21 | ($16 << 16 | 0) | 0;
      label$440 : {
       label$441 : {
        $13 = Math_fround(Math_fround(HEAPF32[($4 + 14816 | 0) >> 2]) * Math_fround(HEAPF32[($4 + 14396 | 0) >> 2]));
        $13 = Math_fround(Math_fround(($13 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($13, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
         break label$441
        }
        $4 = ~~$13;
        break label$440;
       }
       $4 = -2147483648;
      }
      ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29($10 | 0, $3 + 256 | 0 | 0, $3 + 240 | 0 | 0, $21 | ($4 << 24 | 0) | 0 | 0, Math_fround($11 ? $44 : Math_fround(0.0)), 48 | 0);
      $13 = Math_fround(HEAPF32[($8 + 14468 | 0) >> 2]);
      if (!($13 > Math_fround(0.0))) {
       break label$429
      }
      if (!($36 < Math_fround(Math_fround(HEAPF32[($7 + 68 | 0) >> 2]) + Math_fround(HEAPF32[($7 + 76 | 0) >> 2])))) {
       break label$429
      }
      $10 = HEAP32[($7 + 672 | 0) >> 2] | 0;
      HEAPF32[($3 + 260 | 0) >> 2] = $36;
      HEAPF32[($3 + 256 | 0) >> 2] = $15;
      HEAPF32[($3 + 244 | 0) >> 2] = $36;
      HEAPF32[($3 + 240 | 0) >> 2] = $37;
      label$442 : {
       label$443 : {
        $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
        $15 = Math_fround(HEAPF32[($4 + 14680 | 0) >> 2]);
        $15 = Math_fround(Math_fround(($15 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($15, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($15)) < Math_fround(2147483648.0))) {
         break label$443
        }
        $11 = ~~$15;
        break label$442;
       }
       $11 = -2147483648;
      }
      $11 = $11 << 8 | 0;
      label$444 : {
       label$445 : {
        $15 = Math_fround(HEAPF32[($4 + 14676 | 0) >> 2]);
        $15 = Math_fround(Math_fround(($15 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($15, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($15)) < Math_fround(2147483648.0))) {
         break label$445
        }
        $21 = ~~$15;
        break label$444;
       }
       $21 = -2147483648;
      }
      $11 = $11 | $21 | 0;
      label$446 : {
       label$447 : {
        $15 = Math_fround(HEAPF32[($4 + 14684 | 0) >> 2]);
        $15 = Math_fround(Math_fround(($15 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($15, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($15)) < Math_fround(2147483648.0))) {
         break label$447
        }
        $21 = ~~$15;
        break label$446;
       }
       $21 = -2147483648;
      }
      $11 = $11 | ($21 << 16 | 0) | 0;
      label$448 : {
       label$449 : {
        $15 = Math_fround(Math_fround(HEAPF32[($4 + 14688 | 0) >> 2]) * Math_fround(HEAPF32[($4 + 14396 | 0) >> 2]));
        $15 = Math_fround(Math_fround(($15 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($15, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($15)) < Math_fround(2147483648.0))) {
         break label$449
        }
        $4 = ~~$15;
        break label$448;
       }
       $4 = -2147483648;
      }
      ImDrawList__AddLine_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_29($10 | 0, $3 + 256 | 0 | 0, $3 + 240 | 0 | 0, $11 | ($4 << 24 | 0) | 0 | 0, Math_fround($13));
     }
     label$450 : {
      if (!((HEAPU8[($7 + 905 | 0) >> 0] | 0) & 1 | 0)) {
       break label$450
      }
      $4 = HEAP32[($7 + 932 | 0) >> 2] | 0;
      if (((HEAP32[($4 + 16 | 0) >> 2] | 0) & 12288 | 0 | 0) != (8192 | 0)) {
       break label$450
      }
      $13 = Math_fround(HEAPF32[($8 + 15488 | 0) >> 2]);
      i64toi32_i32$0 = $4;
      i64toi32_i32$1 = HEAP32[($4 + 52 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[($4 + 56 | 0) >> 2] | 0;
      $14 = i64toi32_i32$1;
      $14$hi = i64toi32_i32$3;
      i64toi32_i32$1 = $3;
      HEAP32[($3 + 240 | 0) >> 2] = $14;
      HEAP32[($3 + 244 | 0) >> 2] = i64toi32_i32$3;
      label$451 : {
       label$452 : {
        $15 = Math_fround($13 * Math_fround(.550000011920929));
        if (!(Math_fround(Math_abs($15)) < Math_fround(2147483648.0))) {
         break label$452
        }
        $8 = ~~$15;
        break label$451;
       }
       $8 = -2147483648;
      }
      $6802 = $3 + 268 | 0;
      $15 = Math_fround($8 | 0);
      $6805 = $15;
      i64toi32_i32$3 = $14$hi;
      i64toi32_i32$0 = $14;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $167 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       $167 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
      }
      HEAPF32[$6802 >> 2] = Math_fround($6805 + (wasm2js_scratch_store_i32(2, $167), wasm2js_scratch_load_f32()));
      i64toi32_i32$1 = $14$hi;
      i64toi32_i32$0 = $3;
      HEAP32[($3 + 256 | 0) >> 2] = $14;
      HEAP32[($3 + 260 | 0) >> 2] = i64toi32_i32$1;
      HEAPF32[($3 + 264 | 0) >> 2] = Math_fround($15 + (wasm2js_scratch_store_i32(2, $14), wasm2js_scratch_load_f32()));
      $10 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      $8 = HEAP32[((((HEAP32[($7 + 280 | 0) >> 2] | 0) << 2 | 0) + (HEAP32[($7 + 288 | 0) >> 2] | 0) | 0) + -4 | 0) >> 2] | 0;
      $8 = (($8 ^ -1 | 0) >>> 8 | 0) ^ (HEAP32[(((($8 & 255 | 0) ^ 220 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
      $8 = ($8 >>> 8 | 0) ^ (HEAP32[(((($8 & 255 | 0) ^ 85 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
      $8 = ($8 >>> 8 | 0) ^ (HEAP32[(((($8 & 255 | 0) ^ 78 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
      $8 = ($8 >>> 8 | 0) ^ (HEAP32[(((($8 & 255 | 0) ^ 72 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
      $8 = ($8 >>> 8 | 0) ^ (HEAP32[(((($8 & 255 | 0) ^ 73 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
      $8 = ($8 >>> 8 | 0) ^ (HEAP32[(((($8 & 255 | 0) ^ 68 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
      $8 = ((HEAP32[(((($8 & 255 | 0) ^ 69 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) ^ ($8 >>> 8 | 0) | 0) ^ -1 | 0;
      $11 = (HEAP32[($10 + 16168 | 0) >> 2] | 0 | 0) != ($8 | 0);
      label$453 : {
       label$454 : {
        $13 = Math_fround($13 * Math_fround(.699999988079071));
        if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
         break label$454
        }
        $21 = ~~$13;
        break label$453;
       }
       $21 = -2147483648;
      }
      label$455 : {
       if ($11) {
        break label$455
       }
       ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($8 | 0, 11 | 0, 67655 | 0, 0 | 0);
       $10 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      }
      label$456 : {
       if ((HEAP32[($10 + 16192 | 0) >> 2] | 0 | 0) != ($8 | 0)) {
        break label$456
       }
       HEAP32[($10 + 16196 | 0) >> 2] = $8;
      }
      label$457 : {
       if ((HEAP32[($10 + 16232 | 0) >> 2] | 0 | 0) != ($8 | 0)) {
        break label$457
       }
       HEAP8[($10 + 16236 | 0) >> 0] = 1;
      }
      label$458 : {
       label$459 : {
        if (!(ImGui__ButtonBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20bool__2c_20bool__2c_20int_29($3 + 256 | 0 | 0, $8 | 0, $3 + 216 | 0 | 0, $3 + 208 | 0 | 0, 2048 | 0) | 0)) {
         break label$459
        }
        $8 = $4 + 158 | 0;
        HEAP8[$8 >> 0] = (HEAPU16[($4 + 156 | 0) >> 1] | 0 | ((HEAPU8[$8 >> 0] | 0) << 16 | 0) | 0 | 524288 | 0) >>> 16 | 0;
        break label$458;
       }
       if (!(HEAPU8[($3 + 208 | 0) >> 0] | 0)) {
        break label$458
       }
       $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
       if (!(HEAPU8[($8 + 3528 | 0) >> 0] | 0)) {
        break label$458
       }
       $13 = Math_fround(HEAPF32[($8 + 48 | 0) >> 2]);
       if (!(Math_fround(HEAPF32[($8 + 14208 | 0) >> 2]) >= Math_fround($13 * $13))) {
        break label$458
       }
       ImGui__StartMouseMovingWindowOrNode_28ImGuiWindow__2c_20ImGuiDockNode__2c_20bool_29($7 | 0, $4 | 0, 1 | 0);
      }
      $13 = Math_fround($21 | 0);
      $8 = HEAPU8[($3 + 216 | 0) >> 0] | 0;
      label$460 : {
       label$461 : {
        if (!(HEAPU8[($3 + 208 | 0) >> 0] | 0)) {
         break label$461
        }
        $10 = 23;
        if ($8 & 255 | 0) {
         break label$460
        }
       }
       $10 = (wasm2js_i32$0 = 22, wasm2js_i32$1 = (HEAPU16[($4 + 156 | 0) >> 1] | 0) & 1024 | 0 ? 23 : 21, wasm2js_i32$2 = $8 & 255 | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
      }
      $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      $8 = ($4 + 14396 | 0) + ($10 << 4 | 0) | 0;
      $39 = Math_fround(HEAPF32[($8 + 212 | 0) >> 2]);
      $15 = Math_fround(HEAPF32[($8 + 208 | 0) >> 2]);
      $37 = Math_fround(HEAPF32[($8 + 200 | 0) >> 2]);
      $36 = Math_fround(HEAPF32[($8 + 204 | 0) >> 2]);
      $8 = HEAP32[($7 + 672 | 0) >> 2] | 0;
      $40 = Math_fround(HEAPF32[($4 + 14396 | 0) >> 2]);
      $41 = Math_fround(HEAPF32[($3 + 244 | 0) >> 2]);
      HEAPF32[($3 + 236 | 0) >> 2] = Math_fround($41 + Math_fround(0.0));
      $42 = Math_fround(HEAPF32[($3 + 240 | 0) >> 2]);
      HEAPF32[($3 + 232 | 0) >> 2] = Math_fround($42 + $13);
      HEAPF32[($3 + 228 | 0) >> 2] = Math_fround($41 + $13);
      HEAPF32[($3 + 224 | 0) >> 2] = Math_fround($42 + Math_fround(0.0));
      label$462 : {
       label$463 : {
        $13 = Math_fround(Math_fround(($36 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($36, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
         break label$463
        }
        $4 = ~~$13;
        break label$462;
       }
       $4 = -2147483648;
      }
      $4 = $4 << 8 | 0;
      label$464 : {
       label$465 : {
        $13 = Math_fround(Math_fround(($37 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($37, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
         break label$465
        }
        $10 = ~~$13;
        break label$464;
       }
       $10 = -2147483648;
      }
      $4 = $4 | $10 | 0;
      label$466 : {
       label$467 : {
        $13 = Math_fround(Math_fround(($15 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($15, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
         break label$467
        }
        $10 = ~~$13;
        break label$466;
       }
       $10 = -2147483648;
      }
      $4 = $4 | ($10 << 16 | 0) | 0;
      label$468 : {
       label$469 : {
        $13 = Math_fround($39 * $40);
        $13 = Math_fround(Math_fround(($13 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($13, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
         break label$469
        }
        $10 = ~~$13;
        break label$468;
       }
       $10 = -2147483648;
      }
      ImDrawList__AddTriangleFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_29($8 | 0, $3 + 240 | 0 | 0, $3 + 232 | 0 | 0, $3 + 224 | 0 | 0, $4 | ($10 << 24 | 0) | 0 | 0);
     }
     label$470 : {
      if (!(HEAPU8[($7 + 216 | 0) >> 0] | 0)) {
       break label$470
      }
      ImGui__Scrollbar_28ImGuiAxis_29(0 | 0);
     }
     label$471 : {
      if (!(HEAPU8[($7 + 217 | 0) >> 0] | 0)) {
       break label$471
      }
      ImGui__Scrollbar_28ImGuiAxis_29(1 | 0);
     }
     label$472 : {
      if (($20 & !($2 & 2 | 0) | 0 | 0) != (1 | 0)) {
       break label$472
      }
      $39 = Math_fround($25 | 0);
      $40 = Math_fround($44 + $38);
      $25 = $7 + 76 | 0;
      $26 = $7 + 68 | 0;
      $8 = 0;
      label$473 : while (1) {
       label$474 : {
        $11 = HEAP32[(($3 + 96 | 0) + ($8 << 2 | 0) | 0) >> 2] | 0;
        if ($11 >>> 0 < 16777216 >>> 0) {
         break label$474
        }
        $13 = Math_fround(HEAPF32[($7 + 64 | 0) >> 2]);
        $2 = Math_imul($8, 24);
        $13 = Math_fround(Math_fround(Math_fround(Math_fround($13 + Math_fround(HEAPF32[($7 + 72 | 0) >> 2])) - $13) * Math_fround(HEAPF32[($2 + 72608 | 0) >> 2])) + $13);
        $4 = $8 & 1 | 0;
        $41 = $4 ? $38 : $39;
        $15 = Math_fround(HEAPF32[($2 + 72616 | 0) >> 2]);
        $42 = Math_fround($13 + Math_fround($41 * $15));
        $37 = Math_fround(HEAPF32[$26 >> 2]);
        $37 = Math_fround(Math_fround(Math_fround(Math_fround($37 + Math_fround(HEAPF32[$25 >> 2])) - $37) * Math_fround(HEAPF32[($2 + 72612 | 0) >> 2])) + $37);
        $43 = $4 ? $39 : $38;
        $36 = Math_fround(HEAPF32[($2 + 72620 | 0) >> 2]);
        $45 = Math_fround($37 + Math_fround($43 * $36));
        label$475 : {
         $4 = HEAP32[($7 + 672 | 0) >> 2] | 0;
         $10 = HEAP32[($4 + 84 | 0) >> 2] | 0;
         if (($10 | 0) != (HEAP32[($4 + 88 | 0) >> 2] | 0 | 0)) {
          break label$475
         }
         $21 = $10 + 1 | 0;
         label$476 : {
          label$477 : {
           if ($10) {
            break label$477
           }
           $16 = 8;
           break label$476;
          }
          $16 = (($10 | 0) / (2 | 0) | 0) + $10 | 0;
         }
         $21 = ($16 | 0) > ($21 | 0) ? $16 : $21;
         if (($10 | 0) >= ($21 | 0)) {
          break label$475
         }
         $10 = $21 << 3 | 0;
         label$478 : {
          $16 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
          if (!$16) {
           break label$478
          }
          $16 = $16 + 184 | 0;
          HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) + 1 | 0;
         }
         $10 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($10, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
         label$479 : {
          $16 = HEAP32[($4 + 92 | 0) >> 2] | 0;
          if (!$16) {
           break label$479
          }
          __memcpy($10 | 0, $16 | 0, (HEAP32[($4 + 84 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
          label$480 : {
           $16 = HEAP32[($4 + 92 | 0) >> 2] | 0;
           if (!$16) {
            break label$480
           }
           $28 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
           if (!$28) {
            break label$480
           }
           $28 = $28 + 184 | 0;
           HEAP32[$28 >> 2] = (HEAP32[$28 >> 2] | 0) + -1 | 0;
          }
          FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($16, HEAP32[(0 + 92728 | 0) >> 2] | 0);
         }
         HEAP32[($4 + 88 | 0) >> 2] = $21;
         HEAP32[($4 + 92 | 0) >> 2] = $10;
         $10 = HEAP32[($4 + 84 | 0) >> 2] | 0;
        }
        $10 = (HEAP32[($4 + 92 | 0) >> 2] | 0) + ($10 << 3 | 0) | 0;
        HEAPF32[($10 + 4 | 0) >> 2] = $45;
        HEAPF32[$10 >> 2] = $42;
        HEAP32[($4 + 84 | 0) >> 2] = (HEAP32[($4 + 84 | 0) >> 2] | 0) + 1 | 0;
        $41 = Math_fround($37 + Math_fround($41 * $36));
        $42 = Math_fround($13 + Math_fround($43 * $15));
        label$481 : {
         $4 = HEAP32[($7 + 672 | 0) >> 2] | 0;
         $10 = HEAP32[($4 + 84 | 0) >> 2] | 0;
         if (($10 | 0) != (HEAP32[($4 + 88 | 0) >> 2] | 0 | 0)) {
          break label$481
         }
         $21 = $10 + 1 | 0;
         label$482 : {
          label$483 : {
           if ($10) {
            break label$483
           }
           $16 = 8;
           break label$482;
          }
          $16 = (($10 | 0) / (2 | 0) | 0) + $10 | 0;
         }
         $21 = ($16 | 0) > ($21 | 0) ? $16 : $21;
         if (($10 | 0) >= ($21 | 0)) {
          break label$481
         }
         $10 = $21 << 3 | 0;
         label$484 : {
          $16 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
          if (!$16) {
           break label$484
          }
          $16 = $16 + 184 | 0;
          HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) + 1 | 0;
         }
         $10 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($10, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
         label$485 : {
          $16 = HEAP32[($4 + 92 | 0) >> 2] | 0;
          if (!$16) {
           break label$485
          }
          __memcpy($10 | 0, $16 | 0, (HEAP32[($4 + 84 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
          label$486 : {
           $16 = HEAP32[($4 + 92 | 0) >> 2] | 0;
           if (!$16) {
            break label$486
           }
           $28 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
           if (!$28) {
            break label$486
           }
           $28 = $28 + 184 | 0;
           HEAP32[$28 >> 2] = (HEAP32[$28 >> 2] | 0) + -1 | 0;
          }
          FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($16, HEAP32[(0 + 92728 | 0) >> 2] | 0);
         }
         HEAP32[($4 + 88 | 0) >> 2] = $21;
         HEAP32[($4 + 92 | 0) >> 2] = $10;
         $10 = HEAP32[($4 + 84 | 0) >> 2] | 0;
        }
        $10 = (HEAP32[($4 + 92 | 0) >> 2] | 0) + ($10 << 3 | 0) | 0;
        HEAPF32[($10 + 4 | 0) >> 2] = $41;
        HEAPF32[$10 >> 2] = $42;
        HEAP32[($4 + 84 | 0) >> 2] = (HEAP32[($4 + 84 | 0) >> 2] | 0) + 1 | 0;
        $4 = HEAP32[($7 + 672 | 0) >> 2] | 0;
        HEAPF32[($3 + 260 | 0) >> 2] = Math_fround(Math_fround($36 * $40) + $37);
        HEAPF32[($3 + 256 | 0) >> 2] = Math_fround(Math_fround($15 * $40) + $13);
        ImDrawList__PathArcToFast_28ImVec2_20const__2c_20float_2c_20int_2c_20int_29($4 | 0, $3 + 256 | 0 | 0, Math_fround($44), HEAP32[($2 + 72624 | 0) >> 2] | 0 | 0, HEAP32[($2 + 72628 | 0) >> 2] | 0 | 0);
        $4 = HEAP32[($7 + 672 | 0) >> 2] | 0;
        ImDrawList__AddConvexPolyFilled_28ImVec2_20const__2c_20int_2c_20unsigned_20int_29($4 | 0, HEAP32[($4 + 92 | 0) >> 2] | 0 | 0, HEAP32[($4 + 84 | 0) >> 2] | 0 | 0, $11 | 0);
        HEAP32[($4 + 84 | 0) >> 2] = 0;
       }
       $8 = $8 + 1 | 0;
       if (($8 | 0) != ($18 | 0)) {
        continue label$473
       }
       break label$473;
      };
     }
     if (!$20) {
      break label$385
     }
     if (HEAP32[($7 + 936 | 0) >> 2] | 0) {
      break label$385
     }
     ImGui__RenderWindowOuterBorders_28ImGuiWindow__29($7 | 0);
    }
    if (!$22) {
     break label$379
    }
    HEAP32[($7 + 672 | 0) >> 2] = $7 + 676 | 0;
   }
   $37 = Math_fround(HEAPF32[($7 + 104 | 0) >> 2]);
   $42 = $37;
   label$487 : {
    if ($37 != Math_fround(0.0)) {
     break label$487
    }
    $13 = Math_fround(0.0);
    label$488 : {
     if (($6 & 2056 | 0 | 0) != (2048 | 0)) {
      break label$488
     }
     $13 = Math_fround(HEAPF32[$27 >> 2]);
    }
    $15 = Math_fround(HEAPF32[($7 + 112 | 0) >> 2]);
    $15 = Math_fround(Math_fround(Math_fround(HEAPF32[($7 + 72 | 0) >> 2]) - Math_fround($15 + $15)) - Math_fround(Math_fround(HEAPF32[($7 + 128 | 0) >> 2]) + Math_fround(HEAPF32[($7 + 136 | 0) >> 2])));
    $42 = $13 >= $15 ? $13 : $15;
   }
   $15 = Math_fround(0.0);
   label$489 : {
    label$490 : {
     $39 = Math_fround(HEAPF32[($7 + 108 | 0) >> 2]);
     if ($39 == Math_fround(0.0)) {
      break label$490
     }
     $40 = Math_fround(HEAPF32[($7 + 132 | 0) >> 2]);
     $13 = Math_fround(HEAPF32[($7 + 116 | 0) >> 2]);
     $45 = $39;
     break label$489;
    }
    label$491 : {
     if ($6 & 8 | 0) {
      break label$491
     }
     $15 = Math_fround(HEAPF32[($7 + 92 | 0) >> 2]);
    }
    $13 = Math_fround(HEAPF32[($7 + 116 | 0) >> 2]);
    $40 = Math_fround(HEAPF32[($7 + 132 | 0) >> 2]);
    $36 = Math_fround(Math_fround(Math_fround(HEAPF32[($7 + 76 | 0) >> 2]) - Math_fround($13 + $13)) - Math_fround($40 + Math_fround(HEAPF32[($7 + 140 | 0) >> 2])));
    $45 = $15 >= $36 ? $15 : $36;
   }
   label$492 : {
    label$493 : {
     $36 = Math_fround(HEAPF32[($7 + 168 | 0) >> 2]);
     $15 = Math_fround(HEAPF32[($7 + 112 | 0) >> 2]);
     $38 = Math_fround(HEAPF32[($7 + 124 | 0) >> 2]);
     $41 = Math_fround(Math_fround(Math_fround(HEAPF32[($7 + 516 | 0) >> 2]) - $36) + ($15 >= $38 ? $15 : $38));
     if (!(Math_fround(Math_abs($41)) < Math_fround(2147483648.0))) {
      break label$493
     }
     $8 = ~~$41;
     break label$492;
    }
    $8 = -2147483648;
   }
   $43 = Math_fround($8 | 0);
   HEAPF32[($7 + 548 | 0) >> 2] = $43;
   label$494 : {
    label$495 : {
     $41 = Math_fround(HEAPF32[($7 + 172 | 0) >> 2]);
     $38 = Math_fround(($13 >= $38 ? $13 : $38) + Math_fround(Math_fround(HEAPF32[($7 + 520 | 0) >> 2]) - $41));
     if (!(Math_fround(Math_abs($38)) < Math_fround(2147483648.0))) {
      break label$495
     }
     $8 = ~~$38;
     break label$494;
    }
    $8 = -2147483648;
   }
   $38 = Math_fround($8 | 0);
   HEAPF32[($7 + 552 | 0) >> 2] = $38;
   HEAPF32[($7 + 560 | 0) >> 2] = Math_fround($45 + $38);
   $8 = $7 + 556 | 0;
   HEAPF32[$8 >> 2] = Math_fround($42 + $43);
   i64toi32_i32$3 = $7;
   i64toi32_i32$1 = HEAP32[($7 + 548 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($7 + 552 | 0) >> 2] | 0;
   $7541 = i64toi32_i32$1;
   i64toi32_i32$1 = $7;
   HEAP32[($7 + 564 | 0) >> 2] = $7541;
   HEAP32[($7 + 568 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$3 = $8;
   i64toi32_i32$0 = HEAP32[$8 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($8 + 4 | 0) >> 2] | 0;
   $7545 = i64toi32_i32$0;
   i64toi32_i32$0 = $7 + 572 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $7545;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $38 = Math_fround(HEAPF32[($7 + 128 | 0) >> 2]);
   $42 = Math_fround(HEAPF32[($7 + 64 | 0) >> 2]);
   $43 = Math_fround($38 + Math_fround($15 + Math_fround($42 - $36)));
   HEAPF32[($7 + 596 | 0) >> 2] = $43;
   $45 = Math_fround(HEAPF32[($7 + 68 | 0) >> 2]);
   $44 = Math_fround($40 + Math_fround($13 + Math_fround($45 - $41)));
   HEAPF32[($7 + 600 | 0) >> 2] = $44;
   label$496 : {
    if ($37 != Math_fround(0.0)) {
     break label$496
    }
    $37 = Math_fround(Math_fround(Math_fround(HEAPF32[($7 + 72 | 0) >> 2]) - Math_fround($15 + $15)) - Math_fround($38 + Math_fround(HEAPF32[($7 + 136 | 0) >> 2])));
   }
   HEAPF32[($7 + 604 | 0) >> 2] = Math_fround($43 + $37);
   label$497 : {
    if ($39 != Math_fround(0.0)) {
     break label$497
    }
    $39 = Math_fround(Math_fround(Math_fround(HEAPF32[($7 + 76 | 0) >> 2]) - Math_fround($13 + $13)) - Math_fround($40 + Math_fround(HEAPF32[($7 + 140 | 0) >> 2])));
   }
   $24 = +$13 + +$45 - +$41 + +$40;
   $13 = Math_fround($24);
   HEAPF32[($7 + 312 | 0) >> 2] = $13;
   $8 = $7 + 308 | 0;
   $60 = +$15 + +$42 - +$36 + +$38 + 0.0;
   $37 = Math_fround($60);
   HEAPF32[$8 >> 2] = $37;
   HEAPF32[($7 + 608 | 0) >> 2] = Math_fround($44 + $39);
   i64toi32_i32$0 = $7 + 364 | 0;
   i64toi32_i32$1 = 0;
   HEAP32[i64toi32_i32$0 >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($7 + 380 | 0) >> 2] = 0;
   i64toi32_i32$0 = $7 + 332 | 0;
   i64toi32_i32$1 = 0;
   HEAP32[i64toi32_i32$0 >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$0 = $7 + 340 | 0;
   i64toi32_i32$1 = 0;
   HEAP32[i64toi32_i32$0 >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$0 = $7 + 348 | 0;
   i64toi32_i32$1 = 0;
   HEAP32[i64toi32_i32$0 >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP16[($7 + 356 | 0) >> 1] = 0;
   HEAPF32[($7 + 360 | 0) >> 2] = Math_fround(Math_fround($15 + $38) - $36);
   HEAPF32[($7 + 376 | 0) >> 2] = Math_fround($24 - +$13);
   i64toi32_i32$3 = $8;
   i64toi32_i32$1 = HEAP32[$8 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($8 + 4 | 0) >> 2] | 0;
   $14 = i64toi32_i32$1;
   $14$hi = i64toi32_i32$0;
   i64toi32_i32$1 = $7 + 324 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $14;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $7 + 316 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $14;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $7 + 300 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $14;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $7;
   HEAP32[($7 + 292 | 0) >> 2] = $14;
   HEAP32[($7 + 296 | 0) >> 2] = i64toi32_i32$0;
   HEAPF32[($7 + 372 | 0) >> 2] = Math_fround($60 - +$37);
   $8 = $7 + 386 | 0;
   $4 = HEAPU16[$8 >> 1] | 0;
   HEAP8[($7 + 388 | 0) >> 0] = 0;
   HEAP16[$8 >> 1] = 0;
   HEAP16[($7 + 384 | 0) >> 1] = $4;
   $13 = Math_fround(HEAPF32[($7 + 180 | 0) >> 2]);
   HEAP8[($7 + 390 | 0) >> 0] = 0;
   HEAP8[($7 + 389 | 0) >> 0] = $13 > Math_fround(0.0);
   ImGuiMenuColumns__Update_28float_2c_20bool_29($7 + 400 | 0 | 0, Math_fround(Math_fround(HEAPF32[($5 + 14472 | 0) >> 2])), $12 | 0);
   i64toi32_i32$1 = $7 + 428 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   label$498 : {
    if ((HEAP32[($7 + 440 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$498
    }
    label$499 : {
     $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$8) {
      break label$499
     }
     $8 = $8 + 184 | 0;
     HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 1 | 0;
    }
    $8 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](0, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
    label$500 : {
     $4 = HEAP32[($7 + 444 | 0) >> 2] | 0;
     if (!$4) {
      break label$500
     }
     __memcpy($8 | 0, $4 | 0, (HEAP32[($7 + 436 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
     label$501 : {
      $4 = HEAP32[($7 + 444 | 0) >> 2] | 0;
      if (!$4) {
       break label$501
      }
      $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$2) {
       break label$501
      }
      $2 = $2 + 184 | 0;
      HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1 | 0;
     }
     FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($4, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    }
    HEAP32[($7 + 440 | 0) >> 2] = 0;
    HEAP32[($7 + 444 | 0) >> 2] = $8;
   }
   HEAP32[($7 + 436 | 0) >> 2] = 0;
   $8 = 1;
   HEAP32[($7 + 460 | 0) >> 2] = 1;
   HEAP32[($7 + 452 | 0) >> 2] = 0;
   HEAP32[($7 + 448 | 0) >> 2] = $7 + 636 | 0;
   label$502 : {
    if (!$9) {
     break label$502
    }
    $8 = HEAP32[($9 + 460 | 0) >> 2] | 0;
   }
   HEAP32[($7 + 464 | 0) >> 2] = $8;
   HEAP32[($7 + 472 | 0) >> 2] = -1082130432;
   HEAPF32[($7 + 468 | 0) >> 2] = Math_fround(HEAPF32[($7 + 632 | 0) >> 2]);
   label$503 : {
    if ((HEAP32[($7 + 480 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$503
    }
    label$504 : {
     $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$8) {
      break label$504
     }
     $8 = $8 + 184 | 0;
     HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 1 | 0;
    }
    $8 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](0, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
    label$505 : {
     $4 = HEAP32[($7 + 484 | 0) >> 2] | 0;
     if (!$4) {
      break label$505
     }
     __memcpy($8 | 0, $4 | 0, (HEAP32[($7 + 476 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
     label$506 : {
      $4 = HEAP32[($7 + 484 | 0) >> 2] | 0;
      if (!$4) {
       break label$506
      }
      $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$2) {
       break label$506
      }
      $2 = $2 + 184 | 0;
      HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1 | 0;
     }
     FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($4, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    }
    HEAP32[($7 + 480 | 0) >> 2] = 0;
    HEAP32[($7 + 484 | 0) >> 2] = $8;
   }
   HEAP32[($7 + 476 | 0) >> 2] = 0;
   label$507 : {
    if ((HEAP32[($7 + 492 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$507
    }
    label$508 : {
     $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$8) {
      break label$508
     }
     $8 = $8 + 184 | 0;
     HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 1 | 0;
    }
    $8 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](0, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
    label$509 : {
     $4 = HEAP32[($7 + 496 | 0) >> 2] | 0;
     if (!$4) {
      break label$509
     }
     __memcpy($8 | 0, $4 | 0, (HEAP32[($7 + 488 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
     label$510 : {
      $4 = HEAP32[($7 + 496 | 0) >> 2] | 0;
      if (!$4) {
       break label$510
      }
      $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$2) {
       break label$510
      }
      $2 = $2 + 184 | 0;
      HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1 | 0;
     }
     FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($4, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    }
    HEAP32[($7 + 492 | 0) >> 2] = 0;
    HEAP32[($7 + 496 | 0) >> 2] = $8;
   }
   HEAP32[($7 + 488 | 0) >> 2] = 0;
   label$511 : {
    $8 = HEAP8[($7 + 248 | 0) >> 0] | 0;
    if (($8 | 0) < (1 | 0)) {
     break label$511
    }
    HEAP8[($7 + 248 | 0) >> 0] = $8 + -1 | 0;
   }
   label$512 : {
    $8 = HEAP8[($7 + 249 | 0) >> 0] | 0;
    if (($8 | 0) < (1 | 0)) {
     break label$512
    }
    HEAP8[($7 + 249 | 0) >> 0] = $8 + -1 | 0;
   }
   label$513 : {
    if (!$19) {
     break label$513
    }
    ImGui__FocusWindow_28ImGuiWindow__29($7 | 0);
    ImGui__NavInitWindow_28ImGuiWindow__2c_20bool_29($7 | 0, 0 | 0);
   }
   label$514 : {
    if (!$1) {
     break label$514
    }
    $8 = HEAP32[($7 + 44 | 0) >> 2] | 0;
    if (!(HEAPU8[($8 + 71 | 0) >> 0] | 0)) {
     break label$514
    }
    if (($8 | 0) == (HEAP32[(HEAP32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 18584 | 0) >> 2] | 0) >> 2] | 0 | 0)) {
     break label$514
    }
    if (((HEAPU8[($7 + 905 | 0) >> 0] | 0) & 5 | 0 | 0) == (1 | 0)) {
     break label$514
    }
    HEAP8[($8 + 71 | 0) >> 0] = 0;
    HEAP8[($5 + 19012 | 0) >> 0] = 0;
    label$515 : {
     if (!((HEAPU8[($5 + 23536 | 0) >> 0] | 0) & 128 | 0)) {
      break label$515
     }
     HEAP32[($3 + 16 | 0) >> 2] = HEAP32[$7 >> 2] | 0;
     ImGui__DebugLog_28char_20const__2c_20____29(68419 | 0, $3 + 16 | 0 | 0);
    }
    HEAP8[$1 >> 0] = 0;
   }
   label$516 : {
    if ($23) {
     break label$516
    }
    if ((HEAPU8[($7 + 905 | 0) >> 0] | 0) & 1 | 0) {
     break label$516
    }
    $39 = Math_fround(HEAPF32[($7 + 124 | 0) >> 2]);
    $13 = Math_fround(HEAPF32[($3 + 72 | 0) >> 2]);
    $8 = 0;
    $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    label$517 : {
     $4 = HEAP32[($7 + 8 | 0) >> 2] | 0;
     if ($4 & 32 | 0) {
      break label$517
     }
     $8 = (HEAP32[($2 + 14436 | 0) >> 2] | 0 | 0) != (-1 | 0);
    }
    $41 = Math_fround(HEAPF32[($3 + 64 | 0) >> 2]);
    $37 = Math_fround($13 - $39);
    $38 = Math_fround(HEAPF32[($3 + 76 | 0) >> 2]);
    $36 = Math_fround(HEAPF32[($3 + 68 | 0) >> 2]);
    $10 = HEAP32[($2 + 18252 | 0) >> 2] | 0;
    HEAP32[($2 + 18252 | 0) >> 2] = $10 | 16 | 0;
    HEAP32[($7 + 380 | 0) >> 2] = 1;
    $13 = Math_fround(HEAPF32[($2 + 14456 | 0) >> 2]);
    $40 = Math_fround(HEAPF32[($2 + 15488 | 0) >> 2]);
    i64toi32_i32$1 = $3;
    i64toi32_i32$0 = 0;
    HEAP32[($3 + 232 | 0) >> 2] = 0;
    HEAP32[($3 + 236 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $3;
    i64toi32_i32$0 = 0;
    HEAP32[($3 + 224 | 0) >> 2] = 0;
    HEAP32[($3 + 228 | 0) >> 2] = i64toi32_i32$0;
    $15 = $13;
    label$518 : {
     if (!$1) {
      break label$518
     }
     HEAPF32[($3 + 236 | 0) >> 2] = $36;
     $15 = Math_fround($13 + $40);
     HEAPF32[($3 + 232 | 0) >> 2] = Math_fround(Math_fround($37 - $15) - $13);
    }
    $41 = Math_fround($41 + $39);
    label$519 : {
     if (!$8) {
      break label$519
     }
     label$520 : {
      label$521 : {
       switch (HEAP32[($2 + 14436 | 0) >> 2] | 0 | 0) {
       case 1:
        HEAPF32[($3 + 228 | 0) >> 2] = $36;
        $15 = Math_fround($40 + $15);
        HEAPF32[($3 + 224 | 0) >> 2] = Math_fround(Math_fround($37 - $15) - $13);
        break label$520;
       case 0:
        break label$521;
       default:
        break label$520;
       };
      }
      HEAPF32[($3 + 228 | 0) >> 2] = $36;
      HEAPF32[($3 + 224 | 0) >> 2] = Math_fround(Math_fround($41 + $13) - $13);
      $13 = Math_fround($13 + $40);
     }
     label$523 : {
      $8 = HEAP32[((((HEAP32[($7 + 280 | 0) >> 2] | 0) << 2 | 0) + (HEAP32[($7 + 288 | 0) >> 2] | 0) | 0) + -4 | 0) >> 2] | 0;
      $8 = (($8 ^ -1 | 0) >>> 8 | 0) ^ (HEAP32[(((($8 & 255 | 0) ^ 220 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
      $8 = ($8 >>> 8 | 0) ^ (HEAP32[(((($8 & 255 | 0) ^ 67 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
      $8 = ($8 >>> 8 | 0) ^ (HEAP32[(((($8 & 255 | 0) ^ 79 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
      $8 = ($8 >>> 8 | 0) ^ (HEAP32[(((($8 & 255 | 0) ^ 76 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
      $8 = ($8 >>> 8 | 0) ^ (HEAP32[(((($8 & 255 | 0) ^ 76 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
      $8 = ($8 >>> 8 | 0) ^ (HEAP32[(((($8 & 255 | 0) ^ 65 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
      $8 = ($8 >>> 8 | 0) ^ (HEAP32[(((($8 & 255 | 0) ^ 80 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
      $8 = ($8 >>> 8 | 0) ^ (HEAP32[(((($8 & 255 | 0) ^ 83 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
      $8 = ((HEAP32[(((($8 & 255 | 0) ^ 69 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) ^ ($8 >>> 8 | 0) | 0) ^ -1 | 0;
      if ((HEAP32[($2 + 16168 | 0) >> 2] | 0 | 0) != ($8 | 0)) {
       break label$523
      }
      ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($8 | 0, 11 | 0, 67638 | 0, 0 | 0);
     }
     if (!(ImGui__CollapseButton_28unsigned_20int_2c_20ImVec2_20const__2c_20ImGuiDockNode__29($8 | 0, $3 + 224 | 0 | 0, 0 | 0) | 0)) {
      break label$519
     }
     HEAP8[($7 + 223 | 0) >> 0] = 1;
    }
    label$524 : {
     if (!$1) {
      break label$524
     }
     label$525 : {
      $8 = HEAP32[((((HEAP32[($7 + 280 | 0) >> 2] | 0) << 2 | 0) + (HEAP32[($7 + 288 | 0) >> 2] | 0) | 0) + -4 | 0) >> 2] | 0;
      $8 = (($8 ^ -1 | 0) >>> 8 | 0) ^ (HEAP32[(((($8 & 255 | 0) ^ 220 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
      $8 = ($8 >>> 8 | 0) ^ (HEAP32[(((($8 & 255 | 0) ^ 67 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
      $8 = ($8 >>> 8 | 0) ^ (HEAP32[(((($8 & 255 | 0) ^ 76 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
      $8 = ($8 >>> 8 | 0) ^ (HEAP32[(((($8 & 255 | 0) ^ 79 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
      $8 = ($8 >>> 8 | 0) ^ (HEAP32[(((($8 & 255 | 0) ^ 83 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
      $8 = ((HEAP32[(((($8 & 255 | 0) ^ 69 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) ^ ($8 >>> 8 | 0) | 0) ^ -1 | 0;
      if ((HEAP32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 16168 | 0) >> 2] | 0 | 0) != ($8 | 0)) {
       break label$525
      }
      ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($8 | 0, 11 | 0, 67648 | 0, 0 | 0);
     }
     if (!(ImGui__CloseButton_28unsigned_20int_2c_20ImVec2_20const__29($8 | 0, $3 + 232 | 0 | 0) | 0)) {
      break label$524
     }
     HEAP8[$1 >> 0] = 0;
    }
    HEAP32[($7 + 380 | 0) >> 2] = 0;
    HEAP32[($2 + 18252 | 0) >> 2] = $10;
    $42 = Math_fround(0.0);
    $12 = $4 & 1048576 | 0;
    $43 = $12 ? Math_fround($40 * Math_fround(.800000011920929)) : Math_fround(0.0);
    $10 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    label$526 : {
     label$527 : {
      if (($0 | 0) == (-1 | 0)) {
       break label$527
      }
      $8 = $0;
      label$528 : {
       label$529 : while (1) {
        label$530 : {
         label$531 : {
          $4 = HEAPU8[$8 >> 0] | 0;
          if (($4 | 0) == (35 | 0)) {
           break label$531
          }
          if ($4) {
           break label$530
          }
          $4 = $8;
          break label$528;
         }
         if ((HEAPU8[($8 + 1 | 0) >> 0] | 0 | 0) != (35 | 0)) {
          break label$530
         }
         $4 = $8;
         break label$528;
        }
        $4 = -1;
        $8 = $8 + 1 | 0;
        if (($8 | 0) != (-1 | 0)) {
         continue label$529
        }
        break label$529;
       };
      }
      $39 = Math_fround(HEAPF32[($10 + 15488 | 0) >> 2]);
      label$532 : {
       if (($4 | 0) != ($0 | 0)) {
        break label$532
       }
       $42 = Math_fround(0.0);
       break label$526;
      }
      ImFont__CalcTextSizeA_28float_2c_20float_2c_20float_2c_20char_20const__2c_20char_20const__2c_20char_20const___29_20const($3 + 256 | 0 | 0, HEAP32[($10 + 15484 | 0) >> 2] | 0 | 0, Math_fround($39), Math_fround(Math_fround(3402823466385288598117041.0e14)), Math_fround(Math_fround(-1.0)), $0 | 0, $4 | 0, 0 | 0);
      label$533 : {
       label$534 : {
        $39 = Math_fround(Math_fround(HEAPF32[($3 + 256 | 0) >> 2]) + Math_fround(.9999899864196777));
        if (!(Math_fround(Math_abs($39)) < Math_fround(2147483648.0))) {
         break label$534
        }
        $8 = ~~$39;
        break label$533;
       }
       $8 = -2147483648;
      }
      $42 = Math_fround($8 | 0);
      $39 = Math_fround(HEAPF32[($3 + 260 | 0) >> 2]);
      break label$526;
     }
     $39 = Math_fround(HEAPF32[($10 + 15488 | 0) >> 2]);
    }
    HEAPF32[($3 + 220 | 0) >> 2] = Math_fround($39 + Math_fround(0.0));
    $40 = Math_fround($43 + $42);
    HEAPF32[($3 + 216 | 0) >> 2] = $40;
    label$535 : {
     $39 = Math_fround(HEAPF32[($2 + 14456 | 0) >> 2]);
     if (!($13 > $39)) {
      break label$535
     }
     $13 = Math_fround($13 + Math_fround(HEAPF32[($2 + 14480 | 0) >> 2]));
    }
    label$536 : {
     if (!($15 > $39)) {
      break label$536
     }
     $15 = Math_fround($15 + Math_fround(HEAPF32[($2 + 14480 | 0) >> 2]));
    }
    label$537 : {
     $10 = $2 + 14428 | 0;
     $39 = Math_fround(HEAPF32[$10 >> 2]);
     if (!($39 > Math_fround(0.0))) {
      break label$537
     }
     if (!($39 < Math_fround(1.0))) {
      break label$537
     }
     $42 = $13 >= $15 ? $13 : $15;
     $45 = Math_fround(Math_fround(Math_fround(Math_fround($37 - $41) - $13) - $15) - $40);
     $8301 = $42 < $45 ? $42 : $45;
     $42 = Math_fround(Math_abs(Math_fround($39 + Math_fround(-.5))));
     $42 = Math_fround(Math_fround(1.0) - Math_fround($42 + $42));
     $42 = Math_fround($8301 * ($42 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($42, Math_fround(1.0)))));
     $15 = $15 >= $42 ? $15 : $42;
     $13 = $13 >= $42 ? $13 : $42;
    }
    HEAPF32[(($3 + 256 | 0) + 12 | 0) >> 2] = $38;
    HEAPF32[($3 + 260 | 0) >> 2] = $36;
    $15 = Math_fround($37 - $15);
    HEAPF32[($3 + 264 | 0) >> 2] = $15;
    $13 = Math_fround($41 + $13);
    HEAPF32[($3 + 256 | 0) >> 2] = $13;
    $41 = Math_fround(HEAPF32[($2 + 14480 | 0) >> 2]);
    HEAPF32[(($3 + 240 | 0) + 12 | 0) >> 2] = $38;
    HEAPF32[($3 + 244 | 0) >> 2] = $36;
    HEAPF32[($3 + 240 | 0) >> 2] = $13;
    $41 = Math_fround($15 + $41);
    $37 = $41 < $37 ? $41 : $37;
    HEAPF32[($3 + 248 | 0) >> 2] = $37;
    label$538 : {
     if (!$12) {
      break label$538
     }
     $39 = Math_fround($40 + Math_fround(Math_fround(Math_fround(Math_fround($15 - $13) - $40) * $39) + $13));
     $15 = $39 < $13 ? $13 : $39 > $15 ? $15 : $39;
     if (!($15 > $13)) {
      break label$538
     }
     $4 = HEAP32[($7 + 672 | 0) >> 2] | 0;
     HEAPF32[($3 + 212 | 0) >> 2] = Math_fround(Math_fround($36 + $38) * Math_fround(.5));
     $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     HEAPF32[($3 + 208 | 0) >> 2] = $15;
     $39 = Math_fround(HEAPF32[($8 + 14608 | 0) >> 2]);
     $13 = Math_fround(HEAPF32[($8 + 14604 | 0) >> 2]);
     $36 = Math_fround(HEAPF32[($8 + 14596 | 0) >> 2]);
     $38 = Math_fround(HEAPF32[($8 + 14600 | 0) >> 2]);
     $40 = Math_fround(HEAPF32[($8 + 14396 | 0) >> 2]);
     i64toi32_i32$3 = $3;
     i64toi32_i32$0 = HEAP32[($3 + 208 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($3 + 212 | 0) >> 2] | 0;
     $8418 = i64toi32_i32$0;
     i64toi32_i32$0 = $3;
     HEAP32[($3 + 8 | 0) >> 2] = $8418;
     HEAP32[($3 + 12 | 0) >> 2] = i64toi32_i32$1;
     label$539 : {
      label$540 : {
       $38 = Math_fround(Math_fround(($38 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($38, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($38)) < Math_fround(2147483648.0))) {
        break label$540
       }
       $8 = ~~$38;
       break label$539;
      }
      $8 = -2147483648;
     }
     $8 = $8 << 8 | 0;
     label$541 : {
      label$542 : {
       $36 = Math_fround(Math_fround(($36 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($36, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($36)) < Math_fround(2147483648.0))) {
        break label$542
       }
       $2 = ~~$36;
       break label$541;
      }
      $2 = -2147483648;
     }
     $8 = $8 | $2 | 0;
     label$543 : {
      label$544 : {
       $13 = Math_fround(Math_fround(($13 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($13, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
        break label$544
       }
       $2 = ~~$13;
       break label$543;
      }
      $2 = -2147483648;
     }
     $8 = $8 | ($2 << 16 | 0) | 0;
     label$545 : {
      label$546 : {
       $13 = Math_fround($39 * $40);
       $13 = Math_fround(Math_fround(($13 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($13, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
        break label$546
       }
       $2 = ~~$13;
       break label$545;
      }
      $2 = -2147483648;
     }
     ImGui__RenderBullet_28ImDrawList__2c_20ImVec2_2c_20unsigned_20int_29($4 | 0, $3 + 8 | 0 | 0, $8 | ($2 << 24 | 0) | 0 | 0);
     label$547 : {
      label$548 : {
       $13 = Math_fround($43 * Math_fround(.5));
       if (!(Math_fround(Math_abs($13)) < Math_fround(2147483648.0))) {
        break label$548
       }
       $8 = ~~$13;
       break label$547;
      }
      $8 = -2147483648;
     }
     $13 = Math_fround($15 - Math_fround($8 | 0));
     HEAPF32[($3 + 248 | 0) >> 2] = $37 < $13 ? $37 : $13;
    }
    if (($0 | 0) == (-1 | 0)) {
     break label$516
    }
    $2 = $3 + 264 | 0;
    $8 = $0;
    label$549 : {
     label$550 : while (1) {
      label$551 : {
       label$552 : {
        $4 = HEAPU8[$8 >> 0] | 0;
        if (($4 | 0) == (35 | 0)) {
         break label$552
        }
        if ($4) {
         break label$551
        }
        $4 = $8;
        break label$549;
       }
       if ((HEAPU8[($8 + 1 | 0) >> 0] | 0 | 0) != (35 | 0)) {
        break label$551
       }
       $4 = $8;
       break label$549;
      }
      $4 = -1;
      $8 = $8 + 1 | 0;
      if (($8 | 0) != (-1 | 0)) {
       continue label$550
      }
      break label$550;
     };
    }
    if (($4 | 0) == ($0 | 0)) {
     break label$516
    }
    $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    ImGui__RenderTextClippedEx_28ImDrawList__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20char_20const__2c_20char_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImRect_20const__29(HEAP32[((HEAP32[($8 + 16116 | 0) >> 2] | 0) + 672 | 0) >> 2] | 0 | 0, $3 + 256 | 0 | 0, $2 | 0, $0 | 0, $4 | 0, $3 + 216 | 0 | 0, $10 | 0, $3 + 240 | 0 | 0);
    if (!(HEAPU8[($8 + 23484 | 0) >> 0] | 0)) {
     break label$516
    }
    ImGui__LogRenderedText_28ImVec2_20const__2c_20char_20const__2c_20char_20const__29($3 + 256 | 0 | 0, $0 | 0, $4 | 0);
   }
   HEAP32[($7 + 612 | 0) >> 2] = 0;
   label$553 : {
    if (!((HEAPU8[($5 + 8 | 0) >> 0] | 0) & 64 | 0)) {
     break label$553
    }
    label$554 : {
     if ((HEAP32[($5 + 16128 | 0) >> 2] | 0 | 0) != ($7 | 0)) {
      break label$554
     }
     if ((HEAPU8[($5 + 97 | 0) >> 0] | 0 | 0) != (HEAPU8[($5 + 3549 | 0) >> 0] | 0 | 0)) {
      break label$554
     }
     if ((HEAPU8[((HEAP32[($7 + 836 | 0) >> 2] | 0) + 10 | 0) >> 0] | 0) & 32 | 0) {
      break label$554
     }
     ImGui__BeginDockableDragDropSource_28ImGuiWindow__29($7 | 0);
    }
    if (!(HEAPU8[($5 + 19040 | 0) >> 0] | 0)) {
     break label$553
    }
    if ($6 & 2097152 | 0) {
     break label$553
    }
    label$555 : {
     $8 = HEAP32[($5 + 16128 | 0) >> 2] | 0;
     if (!$8) {
      break label$555
     }
     if ((HEAP32[($8 + 836 | 0) >> 2] | 0 | 0) == ($7 | 0)) {
      break label$553
     }
    }
    if (($7 | 0) != (HEAP32[($7 + 836 | 0) >> 2] | 0 | 0)) {
     break label$553
    }
    if ((HEAPU8[($7 + 11 | 0) >> 0] | 0) & 32 | 0) {
     break label$553
    }
    ImGui__BeginDockableDragDropTarget_28ImGuiWindow__29($7 | 0);
   }
   $4 = HEAP32[($5 + 18252 | 0) >> 2] | 0;
   $2 = HEAP32[($7 + 156 | 0) >> 2] | 0;
   label$556 : {
    label$557 : {
     if (!((HEAPU8[($7 + 905 | 0) >> 0] | 0) & 1 | 0)) {
      break label$557
     }
     $0 = HEAP32[($7 + 944 | 0) >> 2] | 0;
     $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     HEAP32[($8 + 18280 | 0) >> 2] = $2;
     HEAP32[($8 + 18288 | 0) >> 2] = $0;
     HEAP32[($8 + 18284 | 0) >> 2] = $4;
     i64toi32_i32$3 = $7;
     i64toi32_i32$1 = HEAP32[($7 + 948 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($7 + 952 | 0) >> 2] | 0;
     $8618 = i64toi32_i32$1;
     i64toi32_i32$1 = $8 + 18292 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $8618;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$3 = $7 + 956 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $8623 = i64toi32_i32$0;
     i64toi32_i32$0 = $8 + 18300 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $8623;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     break label$556;
    }
    $0 = 0;
    label$558 : {
     $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     $13 = Math_fround(HEAPF32[($8 + 3520 | 0) >> 2]);
     $37 = Math_fround(HEAPF32[($3 + 64 | 0) >> 2]);
     $15 = Math_fround(HEAPF32[($8 + 14496 | 0) >> 2]);
     if (!($13 >= Math_fround($37 - $15))) {
      break label$558
     }
     $36 = Math_fround(HEAPF32[($8 + 3524 | 0) >> 2]);
     $39 = Math_fround(HEAPF32[($3 + 68 | 0) >> 2]);
     $38 = Math_fround(HEAPF32[($8 + 14500 | 0) >> 2]);
     if (!($36 >= Math_fround($39 - $38))) {
      break label$558
     }
     $40 = Math_fround(HEAPF32[($3 + 72 | 0) >> 2]);
     if (!($13 < Math_fround($40 + $15))) {
      break label$558
     }
     $13 = Math_fround(HEAPF32[($3 + 76 | 0) >> 2]);
     if (!($36 < Math_fround($13 + $38))) {
      break label$558
     }
     $0 = HEAP32[($8 + 18596 | 0) >> 2] | 0;
     $15 = Math_fround(HEAPF32[($0 + 12 | 0) >> 2]);
     $8684 = $39 < Math_fround($15 + Math_fround(HEAPF32[($0 + 20 | 0) >> 2])) & $13 > $15 | 0;
     $13 = Math_fround(HEAPF32[($0 + 8 | 0) >> 2]);
     $0 = ($8684 & $37 < Math_fround($13 + Math_fround(HEAPF32[($0 + 16 | 0) >> 2])) | 0) & $40 > $13 | 0;
    }
    HEAP32[($8 + 18280 | 0) >> 2] = $2;
    HEAP32[($8 + 18288 | 0) >> 2] = $0;
    HEAP32[($8 + 18284 | 0) >> 2] = $4;
    i64toi32_i32$3 = $3;
    i64toi32_i32$1 = HEAP32[($3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($3 + 68 | 0) >> 2] | 0;
    $8709 = i64toi32_i32$1;
    i64toi32_i32$1 = $8 + 18292 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $8709;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$3 = $3 + 72 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $8714 = i64toi32_i32$0;
    i64toi32_i32$0 = $8 + 18300 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $8714;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   }
   $4 = HEAP32[($5 + 18256 | 0) >> 2] | 0;
   if (!$4) {
    break label$115
   }
   label$559 : {
    if ((HEAP32[($7 + 4 | 0) >> 2] | 0 | 0) == ($4 | 0)) {
     break label$559
    }
    if ((HEAP32[($7 + 156 | 0) >> 2] | 0 | 0) != ($4 | 0)) {
     break label$115
    }
   }
   HEAP32[($3 + 312 | 0) >> 2] = HEAP32[($8 + 18336 | 0) >> 2] | 0;
   i64toi32_i32$3 = $8 + 18328 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   $8736 = i64toi32_i32$1;
   i64toi32_i32$1 = $3 + 304 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $8736;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$3 = $8 + 18320 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   $8741 = i64toi32_i32$0;
   i64toi32_i32$0 = $3 + 296 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $8741;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$3 = $8 + 18312 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   $8746 = i64toi32_i32$1;
   i64toi32_i32$1 = $3 + 288 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $8746;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$3 = $8 + 18304 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   $8751 = i64toi32_i32$0;
   i64toi32_i32$0 = $3 + 280 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $8751;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$3 = $8 + 18296 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   $8756 = i64toi32_i32$1;
   i64toi32_i32$1 = $3 + 272 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $8756;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$3 = $8 + 18288 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   $8762 = i64toi32_i32$0;
   i64toi32_i32$0 = ($3 + 256 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $8762;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$3 = $8;
   i64toi32_i32$1 = HEAP32[($8 + 18280 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($8 + 18284 | 0) >> 2] | 0;
   $8765 = i64toi32_i32$1;
   i64toi32_i32$1 = $3;
   HEAP32[($3 + 256 | 0) >> 2] = $8765;
   HEAP32[($3 + 260 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($8 + 18256 | 0) >> 2] = 0;
   $2 = GetViewportDrawList_28ImGuiViewportP__2c_20unsigned_20long_2c_20char_20const__29(HEAP32[((HEAP32[($8 + 16116 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0 | 0, 1 | 0, 67101 | 0) | 0;
   $4 = ($3 + 240 | 0) + 8 | 0;
   i64toi32_i32$3 = $3 + 276 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   $8777 = i64toi32_i32$0;
   i64toi32_i32$0 = $4;
   HEAP32[$4 >> 2] = $8777;
   HEAP32[($4 + 4 | 0) >> 2] = i64toi32_i32$1;
   $13 = Math_fround(Math_fround(HEAPF32[$4 >> 2]) + Math_fround(3.0));
   HEAPF32[$4 >> 2] = $13;
   $0 = $3 + 252 | 0;
   $15 = Math_fround(Math_fround(HEAPF32[$0 >> 2]) + Math_fround(3.0));
   HEAPF32[$0 >> 2] = $15;
   i64toi32_i32$3 = $3;
   i64toi32_i32$1 = HEAP32[($3 + 268 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($3 + 272 | 0) >> 2] | 0;
   $8792 = i64toi32_i32$1;
   i64toi32_i32$1 = $3;
   HEAP32[($3 + 240 | 0) >> 2] = $8792;
   HEAP32[($3 + 244 | 0) >> 2] = i64toi32_i32$0;
   $37 = Math_fround(Math_fround(HEAPF32[($3 + 244 | 0) >> 2]) + Math_fround(-3.0));
   HEAPF32[($3 + 244 | 0) >> 2] = $37;
   $36 = Math_fround(Math_fround(HEAPF32[($3 + 240 | 0) >> 2]) + Math_fround(-3.0));
   HEAPF32[($3 + 240 | 0) >> 2] = $36;
   i64toi32_i32$3 = $8 + 3520 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   $14 = i64toi32_i32$0;
   $14$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $3;
   HEAP32[($3 + 232 | 0) >> 2] = $14;
   HEAP32[($3 + 236 | 0) >> 2] = i64toi32_i32$1;
   $38 = (wasm2js_scratch_store_i32(2, $14), wasm2js_scratch_load_f32());
   HEAPF32[($3 + 224 | 0) >> 2] = $36 > $38 ? $36 : $13 < $38 ? $13 : $38;
   $8823 = $3;
   $8824 = $37;
   $8825 = $15;
   i64toi32_i32$3 = $14;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = 32;
   i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $168 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $168 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
   }
   $13 = (wasm2js_scratch_store_i32(2, $168), wasm2js_scratch_load_f32());
   HEAPF32[($8823 + 228 | 0) >> 2] = $37 > $13 ? $8824 : $15 < $13 ? $8825 : $13;
   ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29($2 | 0, $3 + 240 | 0 | 0, $4 | 0, -16711936 | 0, Math_fround(Math_fround(0.0)), 0 | 0, Math_fround(Math_fround(1.0)));
   ImDrawList__AddLine_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_29($2 | 0, $3 + 232 | 0 | 0, $3 + 224 | 0 | 0, -16711936 | 0, Math_fround(Math_fround(1.0)));
  }
  label$560 : {
   if ($6 & 536870912 | 0) {
    break label$560
   }
   $8 = HEAP32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 16116 | 0) >> 2] | 0;
   HEAP8[($8 + 221 | 0) >> 0] = 1;
   ImDrawList__PushClipRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20bool_29(HEAP32[($8 + 672 | 0) >> 2] | 0 | 0, $7 + 532 | 0 | 0, $7 + 540 | 0 | 0, 1 | 0);
   $4 = HEAP32[($8 + 672 | 0) >> 2] | 0;
   $4 = (((HEAP32[($4 + 60 | 0) >> 2] | 0) << 4 | 0) + (HEAP32[($4 + 68 | 0) >> 2] | 0) | 0) + -16 | 0;
   i64toi32_i32$1 = $4;
   i64toi32_i32$0 = HEAP32[$4 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[($4 + 4 | 0) >> 2] | 0;
   $14 = i64toi32_i32$0;
   $14$hi = i64toi32_i32$3;
   i64toi32_i32$1 = $4;
   i64toi32_i32$3 = HEAP32[($4 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($4 + 12 | 0) >> 2] | 0;
   $8874 = i64toi32_i32$3;
   i64toi32_i32$3 = $8 + 588 | 0;
   HEAP32[i64toi32_i32$3 >> 2] = $8874;
   HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $14$hi;
   i64toi32_i32$3 = $8;
   HEAP32[($8 + 580 | 0) >> 2] = $14;
   HEAP32[($8 + 584 | 0) >> 2] = i64toi32_i32$0;
  }
  HEAP8[($7 + 221 | 0) >> 0] = 0;
  HEAP16[($7 + 232 | 0) >> 1] = (HEAPU16[($7 + 232 | 0) >> 1] | 0) + 1 | 0;
  HEAP32[($5 + 18340 | 0) >> 2] = 0;
  label$561 : {
   label$562 : {
    if ($17) {
     break label$562
    }
    $6 = !(HEAPU8[($7 + 224 | 0) >> 0] | 0);
    break label$561;
   }
   label$563 : {
    if (((HEAPU8[($7 + 905 | 0) >> 0] | 0) & 5 | 0 | 0) != (1 | 0)) {
     break label$563
    }
    label$564 : {
     if ((HEAP32[($7 + 624 | 0) >> 2] | 0 | 0) != (HEAP32[($5 + 16016 | 0) >> 2] | 0 | 0)) {
      break label$564
     }
     HEAP8[($7 + 257 | 0) >> 0] = 1;
     break label$563;
    }
    HEAP8[($7 + 256 | 0) >> 0] = 1;
   }
   label$565 : {
    if (!($6 & 16777216 | 0)) {
     break label$565
    }
    label$566 : {
     if ($6 & 64 | 0) {
      break label$566
     }
     if ((HEAP8[($7 + 248 | 0) >> 0] | 0 | 0) > (0 | 0)) {
      break label$566
     }
     if ((HEAP8[($7 + 249 | 0) >> 0] | 0 | 0) > (0 | 0)) {
      break label$566
     }
     $8 = 0;
     label$567 : {
      if (!($6 & 8388608 | 0)) {
       break label$567
      }
      if (!(HEAPU8[($5 + 18712 | 0) >> 0] | 0)) {
       break label$567
      }
      $6 = HEAP32[($5 + 18648 | 0) >> 2] | 0;
      if (!$6) {
       break label$567
      }
      $8 = (HEAP32[($6 + 844 | 0) >> 2] | 0 | 0) == (HEAP32[($7 + 844 | 0) >> 2] | 0 | 0);
     }
     if (HEAPU8[($5 + 23484 | 0) >> 0] | 0) {
      break label$566
     }
     if ($8) {
      break label$566
     }
     label$568 : {
      if (Math_fround(HEAPF32[($7 + 500 | 0) >> 2]) >= Math_fround(HEAPF32[($7 + 508 | 0) >> 2])) {
       break label$568
      }
      if (!(Math_fround(HEAPF32[($7 + 504 | 0) >> 2]) >= Math_fround(HEAPF32[($7 + 512 | 0) >> 2]))) {
       break label$566
      }
     }
     HEAP8[($7 + 256 | 0) >> 0] = 1;
    }
    if (!$9) {
     break label$565
    }
    label$569 : {
     label$570 : {
      if (HEAPU8[($9 + 222 | 0) >> 0] | 0) {
       break label$570
      }
      label$571 : {
       if ((HEAP8[($9 + 256 | 0) >> 0] | 0 | 0) < (1 | 0)) {
        break label$571
       }
       HEAP8[($7 + 256 | 0) >> 0] = 1;
      }
      if ((HEAP8[($9 + 257 | 0) >> 0] | 0 | 0) < (1 | 0)) {
       break label$565
      }
      break label$569;
     }
     HEAP8[($7 + 256 | 0) >> 0] = 1;
    }
    HEAP8[($7 + 257 | 0) >> 0] = 1;
   }
   label$572 : {
    label$573 : {
     if (!(Math_fround(HEAPF32[($5 + 14396 | 0) >> 2]) <= Math_fround(0.0))) {
      break label$573
     }
     $8 = 1;
     HEAP8[($7 + 256 | 0) >> 0] = 1;
     $6 = 1;
     break label$572;
    }
    $8 = 1;
    label$574 : {
     if ((HEAP8[($7 + 256 | 0) >> 0] | 0 | 0) <= (0 | 0)) {
      break label$574
     }
     $6 = 1;
     break label$572;
    }
    $6 = 1;
    if ((HEAP8[($7 + 257 | 0) >> 0] | 0 | 0) > (0 | 0)) {
     break label$572
    }
    $8 = 0;
    $6 = (HEAP8[($7 + 258 | 0) >> 0] | 0 | 0) > (0 | 0);
   }
   HEAP8[($7 + 226 | 0) >> 0] = $6;
   label$575 : {
    $6 = HEAP8[($7 + 259 | 0) >> 0] | 0;
    if (($6 | 0) < (1 | 0)) {
     break label$575
    }
    HEAP8[($7 + 259 | 0) >> 0] = $6 + -1 | 0;
    HEAP32[($7 + 8 | 0) >> 2] = HEAP32[($7 + 8 | 0) >> 2] | 0 | 786944 | 0;
   }
   label$576 : {
    label$577 : {
     label$578 : {
      if (HEAPU8[($7 + 222 | 0) >> 0] | 0) {
       break label$578
      }
      if (($8 ^ -1 | 0) & (HEAPU8[($7 + 219 | 0) >> 0] | 0 | 0) != (0 | 0) | 0) {
       break label$577
      }
     }
     if ((HEAP8[($7 + 248 | 0) >> 0] | 0 | 0) > (0 | 0)) {
      break label$577
     }
     $6 = 1;
     if ((HEAP8[($7 + 249 | 0) >> 0] | 0 | 0) < (1 | 0)) {
      break label$576
     }
    }
    HEAP8[($7 + 224 | 0) >> 0] = 0;
    $6 = 1;
    break label$561;
   }
   $8 = HEAP8[($7 + 257 | 0) >> 0] | 0;
   HEAP8[($7 + 224 | 0) >> 0] = ($8 | 0) < (1 | 0);
   if (($8 | 0) > (0 | 0)) {
    break label$561
   }
   HEAP16[($7 + 386 | 0) >> 1] = HEAPU16[($7 + 384 | 0) >> 1] | 0;
   $6 = 0;
  }
  __stack_pointer = $3 + 320 | 0;
  return $6 | 0;
 }
 
 function ImGui__SetKeyOwner_28ImGuiKey_2c_20unsigned_20int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  label$1 : {
   label$2 : {
    if (!($0 & 63488 | 0)) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if (($0 | 0) > (8191 | 0)) {
       break label$4
      }
      if (($0 | 0) == (2048 | 0)) {
       break label$3
      }
      $3 = 648;
      if (($0 | 0) == (4096 | 0)) {
       break label$1
      }
      break label$2;
     }
     label$5 : {
      if (($0 | 0) == (32768 | 0)) {
       break label$5
      }
      label$6 : {
       if (($0 | 0) == (16384 | 0)) {
        break label$6
       }
       if (($0 | 0) != (8192 | 0)) {
        break label$2
       }
       $3 = 649;
       break label$1;
      }
      $3 = 650;
      break label$1;
     }
     $3 = 651;
     break label$1;
    }
    $3 = HEAPU8[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 105 | 0) >> 0] | 0 ? 651 : 648;
    break label$1;
   }
   $3 = $0;
  }
  $0 = Math_imul($3, 12) + (HEAP32[(0 + 92720 | 0) >> 2] | 0) | 0;
  HEAP8[($0 + 10117 | 0) >> 0] = ($2 & 128 | 0) >>> 7 | 0;
  HEAP32[($0 + 10108 | 0) >> 2] = $1;
  HEAP32[($0 + 10112 | 0) >> 2] = $1;
  HEAP8[($0 + 10116 | 0) >> 0] = ($2 & 192 | 0 | 0) != (0 | 0);
 }
 
 function ImGui__DockContextProcessUndockWindow_28ImGuiContext__2c_20ImGuiWindow__2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $6 = Math_fround(0), $3 = 0, $5 = Math_fround(0), $7 = Math_fround(0);
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  label$1 : {
   if (!($0 & 64 | 0)) {
    break label$1
   }
   $0 = HEAP32[$1 >> 2] | 0;
   HEAP32[($3 + 4 | 0) >> 2] = $2;
   HEAP32[$3 >> 2] = $0;
   ImGui__DebugLog_28char_20const__2c_20____29(69005 | 0, $3 | 0);
  }
  label$2 : {
   label$3 : {
    $0 = HEAP32[($1 + 932 | 0) >> 2] | 0;
    if (!$0) {
     break label$3
    }
    $4 = 0;
    label$4 : {
     if ($2) {
      break label$4
     }
     $4 = HEAP32[($1 + 940 | 0) >> 2] | 0;
    }
    ImGui__DockNodeRemoveWindow_28ImGuiDockNode__2c_20ImGuiWindow__2c_20unsigned_20int_29($0 | 0, $1 | 0, $4 | 0);
    break label$2;
   }
   HEAP32[($1 + 940 | 0) >> 2] = 0;
  }
  HEAP8[($1 + 222 | 0) >> 0] = 0;
  HEAP8[($1 + 905 | 0) >> 0] = (HEAPU8[($1 + 905 | 0) >> 0] | 0) & 248 | 0;
  label$5 : {
   label$6 : {
    $0 = HEAP32[($1 + 44 | 0) >> 2] | 0;
    if ($0) {
     break label$6
    }
    $0 = HEAP32[($1 + 84 | 0) >> 2] | 0;
    $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    $4 = HEAP32[($1 + 80 | 0) >> 2] | 0;
    break label$5;
   }
   label$7 : {
    label$8 : {
     $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if ((HEAPU8[($2 + 15477 | 0) >> 0] | 0) & 4 | 0) {
      break label$8
     }
     $4 = $0 + 36 | 0;
     $0 = $0 + 32 | 0;
     break label$7;
    }
    label$9 : {
     label$10 : {
      $0 = HEAP16[($0 + 104 | 0) >> 1] | 0;
      if (($0 | 0) < (0 | 0)) {
       break label$10
      }
      if ((HEAP32[($2 + 14348 | 0) >> 2] | 0 | 0) <= ($0 | 0)) {
       break label$10
      }
      $0 = (HEAP32[($2 + 14356 | 0) >> 2] | 0) + Math_imul($0, 36) | 0;
      break label$9;
     }
     $0 = $2 + 18608 | 0;
    }
    $4 = $0 + 28 | 0;
    $0 = $0 + 24 | 0;
   }
   $5 = Math_fround(HEAPF32[($1 + 84 | 0) >> 2]);
   label$11 : {
    label$12 : {
     $6 = Math_fround(Math_fround(HEAPF32[$4 >> 2]) * Math_fround(.8999999761581421));
     if (!(Math_fround(Math_abs($6)) < Math_fround(2147483648.0))) {
      break label$12
     }
     $4 = ~~$6;
     break label$11;
    }
    $4 = -2147483648;
   }
   $6 = Math_fround($4 | 0);
   $6 = $5 < $6 ? $5 : $6;
   $5 = Math_fround(HEAPF32[($1 + 80 | 0) >> 2]);
   label$13 : {
    label$14 : {
     $7 = Math_fround(Math_fround(HEAPF32[$0 >> 2]) * Math_fround(.8999999761581421));
     if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
      break label$14
     }
     $4 = ~~$7;
     break label$13;
    }
    $4 = -2147483648;
   }
   $0 = (wasm2js_scratch_store_f32($6), wasm2js_scratch_load_i32(2));
   $6 = Math_fround($4 | 0);
   $4 = (wasm2js_scratch_store_f32($5 < $6 ? $5 : $6), wasm2js_scratch_load_i32(2));
  }
  HEAP32[($1 + 80 | 0) >> 2] = $4;
  HEAP32[($1 + 72 | 0) >> 2] = $4;
  HEAP32[($1 + 84 | 0) >> 2] = $0;
  HEAP32[($1 + 76 | 0) >> 2] = $0;
  label$15 : {
   if (!(Math_fround(HEAPF32[($2 + 23384 | 0) >> 2]) <= Math_fround(0.0))) {
    break label$15
   }
   HEAPF32[($2 + 23384 | 0) >> 2] = Math_fround(HEAPF32[($2 + 28 | 0) >> 2]);
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function ImGui__DockBuilderRemoveNodeChildNodes_28unsigned_20int_29($0) {
  $0 = $0 | 0;
  var $9 = 0, $2 = 0, $12 = 0, $4 = 0, $11 = 0, $3 = 0, $10 = 0, $6 = 0, $19 = 0, $8 = 0, $18 = 0, $1 = 0, $17 = 0, $14 = 0, $15 = 0, $16 = 0, $20 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5 = 0, $7 = 0, $13 = 0, $45 = 0, $21 = 0, $22 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  $2 = 0;
  $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $4 = HEAP32[($3 + 23340 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($0) {
      break label$3
     }
     $5 = 0;
     $6 = 0;
     $7 = 0;
     break label$2;
    }
    $8 = HEAP32[($3 + 23348 | 0) >> 2] | 0;
    $9 = $8;
    label$4 : {
     if (!$4) {
      break label$4
     }
     $9 = $8;
     $10 = $4;
     label$5 : while (1) {
      $11 = $10 >>> 1 | 0;
      $12 = $9 + ($11 << 3 | 0) | 0;
      $45 = $12 + 8 | 0;
      $12 = (HEAP32[$12 >> 2] | 0) >>> 0 < $0 >>> 0;
      $9 = $12 ? $45 : $9;
      $10 = $12 ? $10 + ($11 ^ -1 | 0) | 0 : $11;
      if ($10) {
       continue label$5
      }
      break label$5;
     };
    }
    if (($9 | 0) == ($8 + ($4 << 3 | 0) | 0 | 0)) {
     break label$1
    }
    if ((HEAP32[$9 >> 2] | 0 | 0) != ($0 | 0)) {
     break label$1
    }
    $6 = HEAP32[($9 + 4 | 0) >> 2] | 0;
    if (!$6) {
     break label$1
    }
    $9 = HEAPU16[($6 + 156 | 0) >> 1] | 0;
    $7 = (($9 << 26 | 0) >> 29 | 0) & 16777215 | 0;
    $5 = (($9 << 29 | 0) >> 29 | 0) & 16777215 | 0;
   }
   $13 = $3 + 23340 | 0;
   label$6 : {
    label$7 : {
     if (($4 | 0) >= (1 | 0)) {
      break label$7
     }
     $10 = 0;
     $14 = 0;
     break label$6;
    }
    $14 = 0;
    $8 = 0;
    $10 = 0;
    $2 = 0;
    $15 = 0;
    label$8 : while (1) {
     $12 = $2;
     label$9 : {
      label$10 : {
       $11 = HEAP32[(((HEAP32[($3 + 23348 | 0) >> 2] | 0) + ($8 << 3 | 0) | 0) + 4 | 0) >> 2] | 0;
       if ($11) {
        break label$10
       }
       $2 = $12;
       break label$9;
      }
      label$11 : {
       label$12 : {
        if ($0) {
         break label$12
        }
        $14 = ((HEAPU8[($11 + 17 | 0) >> 0] | 0) & 8 | 0) >>> 3 | 0 | $14 | 0;
        break label$11;
       }
       $9 = $11;
       label$13 : {
        if ((HEAP32[$9 >> 2] | 0 | 0) != ($0 | 0)) {
         break label$13
        }
        $2 = $12;
        break label$9;
       }
       label$14 : while (1) {
        $2 = $9;
        $9 = HEAP32[($9 + 24 | 0) >> 2] | 0;
        if ($9) {
         continue label$14
        }
        break label$14;
       };
       label$15 : {
        if ((HEAP32[$2 >> 2] | 0 | 0) == ($0 | 0)) {
         break label$15
        }
        $2 = $12;
        break label$9;
       }
       $16 = ((HEAPU8[($11 + 17 | 0) >> 0] | 0) & 8 | 0) >>> 3 | 0;
       label$16 : {
        $4 = HEAP32[($3 + 23352 | 0) >> 2] | 0;
        if (($4 | 0) < (1 | 0)) {
         break label$16
        }
        $17 = $4 & 1 | 0;
        $2 = HEAP32[($3 + 23360 | 0) >> 2] | 0;
        $9 = 0;
        label$17 : {
         if (($4 | 0) == (1 | 0)) {
          break label$17
         }
         $18 = $4 & -2 | 0;
         $9 = 0;
         $4 = 0;
         label$18 : while (1) {
          label$19 : {
           $19 = $2 + Math_imul($9, 36) | 0;
           if ((HEAP32[($19 + 8 | 0) >> 2] | 0 | 0) != ($11 | 0)) {
            break label$19
           }
           HEAP32[$19 >> 2] = 0;
          }
          label$20 : {
           $19 = $2 + Math_imul($9 | 1 | 0, 36) | 0;
           if ((HEAP32[($19 + 8 | 0) >> 2] | 0 | 0) != ($11 | 0)) {
            break label$20
           }
           HEAP32[$19 >> 2] = 0;
          }
          $9 = $9 + 2 | 0;
          $4 = $4 + 2 | 0;
          if (($4 | 0) != ($18 | 0)) {
           continue label$18
          }
          break label$18;
         };
        }
        if (!$17) {
         break label$16
        }
        $9 = $2 + Math_imul($9, 36) | 0;
        if ((HEAP32[($9 + 8 | 0) >> 2] | 0 | 0) != ($11 | 0)) {
         break label$16
        }
        HEAP32[$9 >> 2] = 0;
       }
       $14 = $16 | $14 | 0;
       if (!$0) {
        break label$11
       }
       ImGui__DockNodeMoveWindows_28ImGuiDockNode__2c_20ImGuiDockNode__29($6 | 0, $11 | 0);
       $17 = HEAP32[$6 >> 2] | 0;
       $2 = HEAP32[$11 >> 2] | 0;
       label$21 : {
        $20 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
        if (!((HEAPU8[($20 + 23536 | 0) >> 0] | 0) & 64 | 0)) {
         break label$21
        }
        HEAP32[($1 + 20 | 0) >> 2] = $17;
        HEAP32[($1 + 16 | 0) >> 2] = $2;
        ImGui__DebugLog_28char_20const__2c_20____29(69253 | 0, $1 + 16 | 0 | 0);
       }
       label$22 : {
        $19 = HEAP32[($20 + 16044 | 0) >> 2] | 0;
        if (($19 | 0) < (1 | 0)) {
         break label$22
        }
        $21 = $19 & 1 | 0;
        $4 = HEAP32[($20 + 16052 | 0) >> 2] | 0;
        $9 = 0;
        label$23 : {
         if (($19 | 0) == (1 | 0)) {
          break label$23
         }
         $22 = $19 & -2 | 0;
         $9 = 0;
         $19 = 0;
         label$24 : while (1) {
          label$25 : {
           $18 = $9 << 2 | 0;
           $16 = HEAP32[($4 + $18 | 0) >> 2] | 0;
           if ((HEAP32[($16 + 940 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
            break label$25
           }
           if (HEAP32[($16 + 932 | 0) >> 2] | 0) {
            break label$25
           }
           HEAP32[($16 + 940 | 0) >> 2] = $17;
          }
          label$26 : {
           $18 = HEAP32[($4 + ($18 | 4 | 0) | 0) >> 2] | 0;
           if ((HEAP32[($18 + 940 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
            break label$26
           }
           if (HEAP32[($18 + 932 | 0) >> 2] | 0) {
            break label$26
           }
           HEAP32[($18 + 940 | 0) >> 2] = $17;
          }
          $9 = $9 + 2 | 0;
          $19 = $19 + 2 | 0;
          if (($19 | 0) != ($22 | 0)) {
           continue label$24
          }
          break label$24;
         };
        }
        if (!$21) {
         break label$22
        }
        $9 = HEAP32[($4 + ($9 << 2 | 0) | 0) >> 2] | 0;
        if ((HEAP32[($9 + 940 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
         break label$22
        }
        if (HEAP32[($9 + 932 | 0) >> 2] | 0) {
         break label$22
        }
        HEAP32[($9 + 940 | 0) >> 2] = $17;
       }
       $9 = HEAP32[($20 + 23420 | 0) >> 2] | 0;
       if (!$9) {
        break label$11
       }
       $9 = $9 + 4 | 0;
       $4 = $9 + (HEAP32[($20 + 23412 | 0) >> 2] | 0) | 0;
       label$27 : while (1) {
        label$28 : {
         if ((HEAP32[($9 + 20 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
          break label$28
         }
         HEAP32[($9 + 20 | 0) >> 2] = $17;
        }
        $9 = $9 + (HEAP32[($9 + -4 | 0) >> 2] | 0) | 0;
        if (($9 | 0) != ($4 | 0)) {
         continue label$27
        }
        break label$27;
       };
      }
      $2 = $12 + 1 | 0;
      label$29 : {
       if (($12 | 0) != ($15 | 0)) {
        break label$29
       }
       label$30 : {
        label$31 : {
         if ($12) {
          break label$31
         }
         $9 = 8;
         break label$30;
        }
        $9 = (($12 | 0) / (2 | 0) | 0) + $12 | 0;
       }
       label$32 : {
        $15 = ($9 | 0) > ($2 | 0) ? $9 : $2;
        if (($12 | 0) < ($15 | 0)) {
         break label$32
        }
        $15 = $12;
        break label$29;
       }
       $9 = $15 << 2 | 0;
       label$33 : {
        $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
        if (!$4) {
         break label$33
        }
        $4 = $4 + 184 | 0;
        HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
       }
       $9 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($9, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
       label$34 : {
        if (!$10) {
         break label$34
        }
        __memcpy($9 | 0, $10 | 0, $12 << 2 | 0 | 0) | 0;
        label$35 : {
         $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
         if (!$4) {
          break label$35
         }
         $4 = $4 + 184 | 0;
         HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + -1 | 0;
        }
        FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($10, HEAP32[(0 + 92728 | 0) >> 2] | 0);
       }
       $10 = $9;
      }
      HEAP32[($10 + ($12 << 2 | 0) | 0) >> 2] = $11;
      $4 = HEAP32[$13 >> 2] | 0;
     }
     $8 = $8 + 1 | 0;
     if (($8 | 0) < ($4 | 0)) {
      continue label$8
     }
     break label$8;
    };
   }
   label$36 : {
    if (!$0) {
     break label$36
    }
    HEAP16[($6 + 156 | 0) >> 1] = ($7 << 3 | 0) & 56 | 0 | ($5 & 7 | 0) | 0 | ((HEAPU16[($6 + 156 | 0) >> 1] | 0) & 65472 | 0) | 0;
   }
   label$37 : {
    $9 = HEAP32[($3 + 23420 | 0) >> 2] | 0;
    if (!$9) {
     break label$37
    }
    $11 = $9 + 4 | 0;
    $8 = $11 + (HEAP32[($3 + 23412 | 0) >> 2] | 0) | 0;
    label$38 : {
     if (($2 | 0) < (1 | 0)) {
      break label$38
     }
     label$39 : while (1) {
      $9 = 0;
      label$40 : {
       $12 = $11;
       $11 = HEAP32[($12 + 20 | 0) >> 2] | 0;
       if (!$11) {
        break label$40
       }
       label$41 : {
        label$42 : while (1) {
         if ((HEAP32[(HEAP32[($10 + ($9 << 2 | 0) | 0) >> 2] | 0) >> 2] | 0 | 0) == ($11 | 0)) {
          break label$41
         }
         $9 = $9 + 1 | 0;
         if (($9 | 0) == ($2 | 0)) {
          break label$40
         }
         continue label$42;
        };
       }
       HEAP32[($12 + 20 | 0) >> 2] = $0;
      }
      $11 = $12 + (HEAP32[($12 + -4 | 0) >> 2] | 0) | 0;
      if (($11 | 0) == ($8 | 0)) {
       break label$37
      }
      if ($12) {
       continue label$39
      }
      break label$37;
     };
    }
    label$43 : while (1) {
     $9 = $11;
     $11 = $9 + (HEAP32[($9 + -4 | 0) >> 2] | 0) | 0;
     if (($11 | 0) == ($8 | 0)) {
      break label$37
     }
     if ($9) {
      continue label$43
     }
     break label$43;
    };
   }
   label$44 : {
    label$45 : {
     label$46 : {
      if (($2 | 0) <= (1 | 0)) {
       break label$46
      }
      qsort($10 | 0, $2 | 0, 4 | 0, 14 | 0);
      break label$45;
     }
     if (($2 | 0) != (1 | 0)) {
      break label$44
     }
    }
    $11 = 0;
    label$47 : while (1) {
     $9 = HEAP32[($10 + ($11 << 2 | 0) | 0) >> 2] | 0;
     label$48 : {
      if (!((HEAPU8[($3 + 23536 | 0) >> 0] | 0) & 64 | 0)) {
       break label$48
      }
      HEAP32[$1 >> 2] = HEAP32[$9 >> 2] | 0;
      ImGui__DebugLog_28char_20const__2c_20____29(69384 | 0, $1 | 0);
     }
     label$49 : {
      $12 = HEAP32[($9 + 112 | 0) >> 2] | 0;
      if (!$12) {
       break label$49
      }
      HEAP32[($12 + 936 | 0) >> 2] = 0;
     }
     label$50 : {
      $12 = HEAP32[($9 + 24 | 0) >> 2] | 0;
      if (!$12) {
       break label$50
      }
      label$51 : {
       if ((HEAP32[($12 + 28 | 0) >> 2] | 0 | 0) != ($9 | 0)) {
        break label$51
       }
       HEAP32[($12 + 28 | 0) >> 2] = 0;
      }
      if ((HEAP32[($12 + 32 | 0) >> 2] | 0 | 0) != ($9 | 0)) {
       break label$50
      }
      HEAP32[((HEAP32[($9 + 24 | 0) >> 2] | 0) + 32 | 0) >> 2] = 0;
     }
     ImGuiStorage__SetVoidPtr_28unsigned_20int_2c_20void__29($13 | 0, HEAP32[$9 >> 2] | 0 | 0, 0 | 0);
     ImGuiDockNode___ImGuiDockNode_28_29($9 | 0) | 0;
     label$52 : {
      $12 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$12) {
       break label$52
      }
      $12 = $12 + 184 | 0;
      HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + -1 | 0;
     }
     FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($9, HEAP32[(0 + 92728 | 0) >> 2] | 0);
     $11 = $11 + 1 | 0;
     if (($11 | 0) != ($2 | 0)) {
      continue label$47
     }
     break label$47;
    };
   }
   label$53 : {
    label$54 : {
     if ($0) {
      break label$54
     }
     label$55 : {
      $9 = HEAP32[($3 + 23348 | 0) >> 2] | 0;
      if (!$9) {
       break label$55
      }
      i64toi32_i32$1 = $3;
      i64toi32_i32$0 = 0;
      HEAP32[($3 + 23340 | 0) >> 2] = 0;
      HEAP32[($3 + 23344 | 0) >> 2] = i64toi32_i32$0;
      label$56 : {
       $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
       if (!$2) {
        break label$56
       }
       $2 = $2 + 184 | 0;
       HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1 | 0;
      }
      FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($9, HEAP32[(0 + 92728 | 0) >> 2] | 0);
      HEAP32[($3 + 23348 | 0) >> 2] = 0;
     }
     $9 = HEAP32[($3 + 23360 | 0) >> 2] | 0;
     if (!$9) {
      break label$53
     }
     i64toi32_i32$1 = $3 + 23352 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     label$57 : {
      $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$2) {
       break label$57
      }
      $2 = $2 + 184 | 0;
      HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1 | 0;
     }
     FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($9, HEAP32[(0 + 92728 | 0) >> 2] | 0);
     HEAP32[($3 + 23360 | 0) >> 2] = 0;
     break label$53;
    }
    if (!($14 & 1 | 0)) {
     break label$53
    }
    $9 = HEAP32[($6 + 8 | 0) >> 2] | 0 | 2048 | 0;
    HEAP32[($6 + 8 | 0) >> 2] = $9;
    HEAP32[($6 + 16 | 0) >> 2] = HEAP32[($6 + 4 | 0) >> 2] | 0 | (HEAP32[($6 + 12 | 0) >> 2] | 0) | 0 | $9 | 0;
    HEAP32[($6 + 120 | 0) >> 2] = $6;
   }
   if (!$10) {
    break label$1
   }
   label$58 : {
    $9 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$9) {
     break label$58
    }
    $9 = $9 + 184 | 0;
    HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + -1 | 0;
   }
   FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($10, HEAP32[(0 + 92728 | 0) >> 2] | 0);
  }
  __stack_pointer = $1 + 32 | 0;
 }
 
 function ImGui__DockContextRebuildNodes_28ImGuiContext__29($0) {
  $0 = $0 | 0;
  var $3 = 0, $1 = 0, $2 = 0, $10 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $5 = 0, $82 = 0;
  label$1 : {
   if (!((HEAPU8[($0 + 23536 | 0) >> 0] | 0) & 64 | 0)) {
    break label$1
   }
   ImGui__DebugLog_28char_20const__2c_20____29(68279 | 0, 0 | 0);
  }
  ImGui__SaveIniSettingsToMemory_28unsigned_20long__29(0 | 0) | 0;
  label$2 : {
   $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   if ((HEAP32[($1 + 16044 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$2
   }
   $2 = $1 + 23536 | 0;
   $3 = 0;
   label$3 : while (1) {
    ImGui__DockContextProcessUndockWindow_28ImGuiContext__2c_20ImGuiWindow__2c_20bool_29(HEAP32[$2 >> 2] | 0 | 0, HEAP32[((HEAP32[($1 + 16052 | 0) >> 2] | 0) + ($3 << 2 | 0) | 0) >> 2] | 0 | 0, 0 | 0);
    $3 = $3 + 1 | 0;
    if (($3 | 0) < (HEAP32[($1 + 16044 | 0) >> 2] | 0 | 0)) {
     continue label$3
    }
    break label$3;
   };
  }
  ImGui__DockBuilderRemoveNodeChildNodes_28unsigned_20int_29(0 | 0);
  ImGui__DockContextBuildNodesFromSettings_28ImGuiContext__2c_20ImGuiDockNodeSettings__2c_20int_29($0 | 0, HEAP32[($0 + 23372 | 0) >> 2] | 0 | 0, HEAP32[($0 + 23364 | 0) >> 2] | 0 | 0);
  label$4 : {
   $3 = HEAP32[($0 + 16044 | 0) >> 2] | 0;
   if (($3 | 0) < (1 | 0)) {
    break label$4
   }
   $4 = 0;
   $5 = $0 + 23348 | 0;
   label$5 : while (1) {
    label$6 : {
     $6 = HEAP32[((HEAP32[($0 + 16052 | 0) >> 2] | 0) + ($4 << 2 | 0) | 0) >> 2] | 0;
     $7 = HEAP32[($6 + 940 | 0) >> 2] | 0;
     if (!$7) {
      break label$6
     }
     if ((HEAP32[($6 + 620 | 0) >> 2] | 0 | 0) < ((HEAP32[($0 + 16016 | 0) >> 2] | 0) + -1 | 0 | 0)) {
      break label$6
     }
     if (HEAP32[($6 + 932 | 0) >> 2] | 0) {
      break label$6
     }
     $8 = HEAP32[$5 >> 2] | 0;
     $3 = $8;
     $9 = HEAP32[($0 + 23340 | 0) >> 2] | 0;
     $1 = $9;
     label$7 : {
      if (!$1) {
       break label$7
      }
      label$8 : while (1) {
       $2 = $1 >>> 1 | 0;
       $10 = $3 + ($2 << 3 | 0) | 0;
       $82 = $10 + 8 | 0;
       $10 = (HEAP32[$10 >> 2] | 0) >>> 0 < $7 >>> 0;
       $3 = $10 ? $82 : $3;
       $1 = $10 ? $1 + ($2 ^ -1 | 0) | 0 : $2;
       if ($1) {
        continue label$8
       }
       break label$8;
      };
     }
     $1 = 0;
     label$9 : {
      if (($3 | 0) == ($8 + ($9 << 3 | 0) | 0 | 0)) {
       break label$9
      }
      if ((HEAP32[$3 >> 2] | 0 | 0) != ($7 | 0)) {
       break label$9
      }
      $1 = HEAP32[($3 + 4 | 0) >> 2] | 0;
     }
     ImGui__DockNodeAddWindow_28ImGuiDockNode__2c_20ImGuiWindow__2c_20bool_29($1 | 0, $6 | 0, 1 | 0);
     $3 = HEAP32[($0 + 16044 | 0) >> 2] | 0;
    }
    $4 = $4 + 1 | 0;
    if (($4 | 0) < ($3 | 0)) {
     continue label$5
    }
    break label$5;
   };
  }
 }
 
 function ImGui__DockContextAddNode_28ImGuiContext__2c_20unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $6 = 0, $9 = 0, $2 = 0, $7 = 0, $3 = 0, $8 = 0, $4 = 0, $5 = 0, $35 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  label$1 : {
   if ($1) {
    break label$1
   }
   $1 = 1;
   $3 = HEAP32[($0 + 23340 | 0) >> 2] | 0;
   if (!$3) {
    break label$1
   }
   $4 = HEAP32[($0 + 23348 | 0) >> 2] | 0;
   $5 = $4 + ($3 << 3 | 0) | 0;
   label$2 : while (1) {
    $6 = $4;
    $7 = $3;
    label$3 : while (1) {
     $8 = $7 >>> 1 | 0;
     $9 = $6 + ($8 << 3 | 0) | 0;
     $35 = $9 + 8 | 0;
     $9 = (HEAP32[$9 >> 2] | 0) >>> 0 < $1 >>> 0;
     $6 = $9 ? $35 : $6;
     $7 = $9 ? $7 + ($8 ^ -1 | 0) | 0 : $8;
     if ($7) {
      continue label$3
     }
     break label$3;
    };
    if (($6 | 0) == ($5 | 0)) {
     break label$1
    }
    if ((HEAP32[$6 >> 2] | 0 | 0) != ($1 | 0)) {
     break label$1
    }
    if (!(HEAP32[($6 + 4 | 0) >> 2] | 0)) {
     break label$1
    }
    $1 = $1 + 1 | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!((HEAPU8[($0 + 23536 | 0) >> 0] | 0) & 64 | 0)) {
    break label$4
   }
   HEAP32[$2 >> 2] = $1;
   ImGui__DebugLog_28char_20const__2c_20____29(69424 | 0, $2 | 0);
  }
  label$5 : {
   $6 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   if (!$6) {
    break label$5
   }
   $6 = $6 + 184 | 0;
   HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1 | 0;
  }
  $6 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](160, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
  ImGuiDockNode__ImGuiDockNode_28unsigned_20int_29($6 | 0, $1 | 0) | 0;
  ImGuiStorage__SetVoidPtr_28unsigned_20int_2c_20void__29($0 + 23340 | 0 | 0, HEAP32[$6 >> 2] | 0 | 0, $6 | 0);
  __stack_pointer = $2 + 16 | 0;
  return $6 | 0;
 }
 
 function ImGui__DockNodeMoveWindows_28ImGuiDockNode__2c_20ImGuiDockNode__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $3 = 0, $2 = 0, $5 = 0, $6 = 0;
  $2 = 0;
  label$1 : {
   $3 = HEAP32[($1 + 48 | 0) >> 2] | 0;
   if (!$3) {
    break label$1
   }
   if (HEAP32[($0 + 48 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[($0 + 48 | 0) >> 2] = $3;
   HEAP32[($1 + 48 | 0) >> 2] = 0;
   $2 = 1;
  }
  $4 = HEAP32[($1 + 44 | 0) >> 2] | 0;
  label$2 : {
   $3 = HEAP32[($1 + 36 | 0) >> 2] | 0;
   if (!$3) {
    break label$2
   }
   $5 = $4 + ($3 << 2 | 0) | 0;
   $6 = $2 ^ 1 | 0;
   label$3 : while (1) {
    $3 = HEAP32[$4 >> 2] | 0;
    HEAP32[($3 + 932 | 0) >> 2] = 0;
    HEAP8[($3 + 905 | 0) >> 0] = (HEAPU8[($3 + 905 | 0) >> 0] | 0) & 254 | 0;
    ImGui__DockNodeAddWindow_28ImGuiDockNode__2c_20ImGuiWindow__2c_20bool_29($0 | 0, $3 | 0, $6 | 0);
    $4 = $4 + 4 | 0;
    if (($4 | 0) != ($5 | 0)) {
     continue label$3
    }
    break label$3;
   };
   $4 = HEAP32[($1 + 44 | 0) >> 2] | 0;
  }
  label$4 : {
   if (!$4) {
    break label$4
   }
   HEAP32[($1 + 36 | 0) >> 2] = 0;
   HEAP32[($1 + 40 | 0) >> 2] = 0;
   label$5 : {
    $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$3) {
     break label$5
    }
    $3 = $3 + 184 | 0;
    HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1 | 0;
   }
   FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($4, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   HEAP32[($1 + 44 | 0) >> 2] = 0;
  }
  label$6 : {
   if ($2) {
    break label$6
   }
   $3 = HEAP32[($1 + 48 | 0) >> 2] | 0;
   if (!$3) {
    break label$6
   }
   label$7 : {
    $4 = HEAP32[($0 + 48 | 0) >> 2] | 0;
    if (!$4) {
     break label$7
    }
    HEAP32[($4 + 20 | 0) >> 2] = HEAP32[($3 + 20 | 0) >> 2] | 0;
   }
   label$8 : {
    $4 = HEAP32[($3 + 140 | 0) >> 2] | 0;
    if (!$4) {
     break label$8
    }
    label$9 : {
     $0 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$0) {
      break label$9
     }
     $0 = $0 + 184 | 0;
     HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($4, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   label$10 : {
    $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
    if (!$4) {
     break label$10
    }
    label$11 : {
     $0 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$0) {
      break label$11
     }
     $0 = $0 + 184 | 0;
     HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($4, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   label$12 : {
    $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$4) {
     break label$12
    }
    $4 = $4 + 184 | 0;
    HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + -1 | 0;
   }
   FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($3, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   HEAP32[($1 + 48 | 0) >> 2] = 0;
  }
 }
 
 function ImGui__DockNodeTreeMerge_28ImGuiContext__2c_20ImGuiDockNode__2c_20ImGuiDockNode__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $7 = 0, $13 = 0, $11 = 0, $15 = 0, $5 = 0, $6 = 0, $3 = 0, $9 = 0, $10 = 0, i64toi32_i32$0 = 0, $16 = 0, $17 = Math_fround(0), $18 = Math_fround(0), i64toi32_i32$1 = 0, $12 = 0, $14 = 0, $19 = Math_fround(0), $20 = Math_fround(0), $8 = 0, $8$hi = 0, $75 = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  $4 = 0;
  $5 = HEAP32[($1 + 32 | 0) >> 2] | 0;
  $6 = HEAP32[($1 + 28 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAPU8[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 23536 | 0) >> 0] | 0) & 64 | 0)) {
    break label$1
   }
   label$2 : {
    if (!$6) {
     break label$2
    }
    $4 = HEAP32[$6 >> 2] | 0;
   }
   label$3 : {
    label$4 : {
     if ($5) {
      break label$4
     }
     $7 = 0;
     break label$3;
    }
    $7 = HEAP32[$5 >> 2] | 0;
   }
   HEAP32[($3 + 40 | 0) >> 2] = HEAP32[$1 >> 2] | 0;
   HEAP32[($3 + 36 | 0) >> 2] = $7;
   HEAP32[($3 + 32 | 0) >> 2] = $4;
   ImGui__DebugLog_28char_20const__2c_20____29(69183 | 0, $3 + 32 | 0 | 0);
  }
  $7 = HEAP32[($2 + 28 | 0) >> 2] | 0;
  HEAP32[($1 + 28 | 0) >> 2] = $7;
  $4 = HEAP32[($2 + 32 | 0) >> 2] | 0;
  HEAP32[($1 + 32 | 0) >> 2] = $4;
  i64toi32_i32$0 = HEAP32[($1 + 68 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1 + 72 | 0) >> 2] | 0;
  $8 = i64toi32_i32$0;
  $8$hi = i64toi32_i32$1;
  label$5 : {
   if (!$7) {
    break label$5
   }
   HEAP32[($7 + 24 | 0) >> 2] = $1;
   $4 = HEAP32[($1 + 32 | 0) >> 2] | 0;
  }
  label$6 : {
   if (!$4) {
    break label$6
   }
   HEAP32[($4 + 24 | 0) >> 2] = $1;
  }
  HEAP32[($1 + 76 | 0) >> 2] = HEAP32[($2 + 76 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2 + 68 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2 + 72 | 0) >> 2] | 0;
  $75 = i64toi32_i32$1;
  i64toi32_i32$1 = $1;
  HEAP32[($1 + 68 | 0) >> 2] = $75;
  HEAP32[($1 + 72 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2;
  i64toi32_i32$0 = 0;
  HEAP32[($2 + 28 | 0) >> 2] = 0;
  HEAP32[($2 + 32 | 0) >> 2] = i64toi32_i32$0;
  label$7 : {
   if (!$6) {
    break label$7
   }
   ImGui__DockNodeMoveWindows_28ImGuiDockNode__2c_20ImGuiDockNode__29($1 | 0, $6 | 0);
   $9 = HEAP32[$1 >> 2] | 0;
   $7 = HEAP32[$6 >> 2] | 0;
   label$8 : {
    $10 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!((HEAPU8[($10 + 23536 | 0) >> 0] | 0) & 64 | 0)) {
     break label$8
    }
    HEAP32[($3 + 20 | 0) >> 2] = $9;
    HEAP32[($3 + 16 | 0) >> 2] = $7;
    ImGui__DebugLog_28char_20const__2c_20____29(69253 | 0, $3 + 16 | 0 | 0);
   }
   label$9 : {
    $11 = HEAP32[($10 + 16044 | 0) >> 2] | 0;
    if (($11 | 0) < (1 | 0)) {
     break label$9
    }
    $12 = $11 & 1 | 0;
    $13 = HEAP32[($10 + 16052 | 0) >> 2] | 0;
    $4 = 0;
    label$10 : {
     if (($11 | 0) == (1 | 0)) {
      break label$10
     }
     $14 = $11 & -2 | 0;
     $4 = 0;
     $11 = 0;
     label$11 : while (1) {
      label$12 : {
       $15 = $4 << 2 | 0;
       $16 = HEAP32[($13 + $15 | 0) >> 2] | 0;
       if ((HEAP32[($16 + 940 | 0) >> 2] | 0 | 0) != ($7 | 0)) {
        break label$12
       }
       if (HEAP32[($16 + 932 | 0) >> 2] | 0) {
        break label$12
       }
       HEAP32[($16 + 940 | 0) >> 2] = $9;
      }
      label$13 : {
       $15 = HEAP32[($13 + ($15 | 4 | 0) | 0) >> 2] | 0;
       if ((HEAP32[($15 + 940 | 0) >> 2] | 0 | 0) != ($7 | 0)) {
        break label$13
       }
       if (HEAP32[($15 + 932 | 0) >> 2] | 0) {
        break label$13
       }
       HEAP32[($15 + 940 | 0) >> 2] = $9;
      }
      $4 = $4 + 2 | 0;
      $11 = $11 + 2 | 0;
      if (($11 | 0) != ($14 | 0)) {
       continue label$11
      }
      break label$11;
     };
    }
    if (!$12) {
     break label$9
    }
    $4 = HEAP32[($13 + ($4 << 2 | 0) | 0) >> 2] | 0;
    if ((HEAP32[($4 + 940 | 0) >> 2] | 0 | 0) != ($7 | 0)) {
     break label$9
    }
    if (HEAP32[($4 + 932 | 0) >> 2] | 0) {
     break label$9
    }
    HEAP32[($4 + 940 | 0) >> 2] = $9;
   }
   $4 = HEAP32[($10 + 23420 | 0) >> 2] | 0;
   if (!$4) {
    break label$7
   }
   $4 = $4 + 4 | 0;
   $13 = $4 + (HEAP32[($10 + 23412 | 0) >> 2] | 0) | 0;
   label$14 : while (1) {
    label$15 : {
     if ((HEAP32[($4 + 20 | 0) >> 2] | 0 | 0) != ($7 | 0)) {
      break label$15
     }
     HEAP32[($4 + 20 | 0) >> 2] = $9;
    }
    $4 = $4 + (HEAP32[($4 + -4 | 0) >> 2] | 0) | 0;
    if (($4 | 0) != ($13 | 0)) {
     continue label$14
    }
    break label$14;
   };
  }
  label$16 : {
   if (!$5) {
    break label$16
   }
   ImGui__DockNodeMoveWindows_28ImGuiDockNode__2c_20ImGuiDockNode__29($1 | 0, $5 | 0);
   $9 = HEAP32[$1 >> 2] | 0;
   $7 = HEAP32[$5 >> 2] | 0;
   label$17 : {
    $10 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!((HEAPU8[($10 + 23536 | 0) >> 0] | 0) & 64 | 0)) {
     break label$17
    }
    HEAP32[($3 + 4 | 0) >> 2] = $9;
    HEAP32[$3 >> 2] = $7;
    ImGui__DebugLog_28char_20const__2c_20____29(69253 | 0, $3 | 0);
   }
   label$18 : {
    $11 = HEAP32[($10 + 16044 | 0) >> 2] | 0;
    if (($11 | 0) < (1 | 0)) {
     break label$18
    }
    $12 = $11 & 1 | 0;
    $13 = HEAP32[($10 + 16052 | 0) >> 2] | 0;
    $4 = 0;
    label$19 : {
     if (($11 | 0) == (1 | 0)) {
      break label$19
     }
     $14 = $11 & -2 | 0;
     $4 = 0;
     $11 = 0;
     label$20 : while (1) {
      label$21 : {
       $15 = $4 << 2 | 0;
       $16 = HEAP32[($13 + $15 | 0) >> 2] | 0;
       if ((HEAP32[($16 + 940 | 0) >> 2] | 0 | 0) != ($7 | 0)) {
        break label$21
       }
       if (HEAP32[($16 + 932 | 0) >> 2] | 0) {
        break label$21
       }
       HEAP32[($16 + 940 | 0) >> 2] = $9;
      }
      label$22 : {
       $15 = HEAP32[($13 + ($15 | 4 | 0) | 0) >> 2] | 0;
       if ((HEAP32[($15 + 940 | 0) >> 2] | 0 | 0) != ($7 | 0)) {
        break label$22
       }
       if (HEAP32[($15 + 932 | 0) >> 2] | 0) {
        break label$22
       }
       HEAP32[($15 + 940 | 0) >> 2] = $9;
      }
      $4 = $4 + 2 | 0;
      $11 = $11 + 2 | 0;
      if (($11 | 0) != ($14 | 0)) {
       continue label$20
      }
      break label$20;
     };
    }
    if (!$12) {
     break label$18
    }
    $4 = HEAP32[($13 + ($4 << 2 | 0) | 0) >> 2] | 0;
    if ((HEAP32[($4 + 940 | 0) >> 2] | 0 | 0) != ($7 | 0)) {
     break label$18
    }
    if (HEAP32[($4 + 932 | 0) >> 2] | 0) {
     break label$18
    }
    HEAP32[($4 + 940 | 0) >> 2] = $9;
   }
   $4 = HEAP32[($10 + 23420 | 0) >> 2] | 0;
   if (!$4) {
    break label$16
   }
   $4 = $4 + 4 | 0;
   $13 = $4 + (HEAP32[($10 + 23412 | 0) >> 2] | 0) | 0;
   label$23 : while (1) {
    label$24 : {
     if ((HEAP32[($4 + 20 | 0) >> 2] | 0 | 0) != ($7 | 0)) {
      break label$24
     }
     HEAP32[($4 + 20 | 0) >> 2] = $9;
    }
    $4 = $4 + (HEAP32[($4 + -4 | 0) >> 2] | 0) | 0;
    if (($4 | 0) != ($13 | 0)) {
     continue label$23
    }
    break label$23;
   };
  }
  label$25 : {
   if ((HEAP32[($1 + 36 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$25
   }
   $11 = $1 + 52 | 0;
   $7 = 0;
   label$26 : while (1) {
    $4 = $7 << 2 | 0;
    ImGui__SetWindowPos_28ImGuiWindow__2c_20ImVec2_20const__2c_20int_29(HEAP32[((HEAP32[($1 + 44 | 0) >> 2] | 0) + $4 | 0) >> 2] | 0 | 0, $11 | 0, 1 | 0);
    label$27 : {
     $4 = HEAP32[((HEAP32[($1 + 44 | 0) >> 2] | 0) + $4 | 0) >> 2] | 0;
     $13 = HEAP32[($4 + 260 | 0) >> 2] | 0;
     if (!($13 & 256 | 0)) {
      break label$27
     }
     HEAP32[($4 + 260 | 0) >> 2] = $13 & -3585 | 0;
     $17 = Math_fround(HEAPF32[($1 + 60 | 0) >> 2]);
     $13 = $17 <= Math_fround(0.0);
     HEAP8[($4 + 248 | 0) >> 0] = $13 << 1 | 0;
     $18 = Math_fround(HEAPF32[($1 + 64 | 0) >> 2]);
     $15 = $18 <= Math_fround(0.0);
     HEAP8[($4 + 249 | 0) >> 0] = $15 << 1 | 0;
     $19 = Math_fround(HEAPF32[($4 + 84 | 0) >> 2]);
     $20 = Math_fround(HEAPF32[($4 + 80 | 0) >> 2]);
     label$28 : {
      label$29 : {
       if (!$13) {
        break label$29
       }
       HEAP8[($4 + 251 | 0) >> 0] = 0;
       $17 = $20;
       break label$28;
      }
      label$30 : {
       label$31 : {
        if (!(Math_fround(Math_abs($17)) < Math_fround(2147483648.0))) {
         break label$31
        }
        $13 = ~~$17;
        break label$30;
       }
       $13 = -2147483648;
      }
      $17 = Math_fround($13 | 0);
      HEAPF32[($4 + 80 | 0) >> 2] = $17;
     }
     label$32 : {
      label$33 : {
       if (!$15) {
        break label$33
       }
       HEAP8[($4 + 251 | 0) >> 0] = 0;
       $18 = $19;
       break label$32;
      }
      label$34 : {
       label$35 : {
        if (!(Math_fround(Math_abs($18)) < Math_fround(2147483648.0))) {
         break label$35
        }
        $13 = ~~$18;
        break label$34;
       }
       $13 = -2147483648;
      }
      $18 = Math_fround($13 | 0);
      HEAPF32[($4 + 84 | 0) >> 2] = $18;
     }
     label$36 : {
      if ($20 != $17) {
       break label$36
      }
      if ($19 == $18) {
       break label$27
      }
     }
     if ((HEAPU8[($4 + 9 | 0) >> 0] | 0) & 1 | 0) {
      break label$27
     }
     $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!(Math_fround(HEAPF32[($4 + 23384 | 0) >> 2]) <= Math_fround(0.0))) {
      break label$27
     }
     HEAPF32[($4 + 23384 | 0) >> 2] = Math_fround(HEAPF32[($4 + 28 | 0) >> 2]);
    }
    $7 = $7 + 1 | 0;
    if (($7 | 0) < (HEAP32[($1 + 36 | 0) >> 2] | 0 | 0)) {
     continue label$26
    }
    break label$26;
   };
  }
  HEAP16[($1 + 156 | 0) >> 1] = (HEAPU16[($1 + 156 | 0) >> 1] | 0) & 65024 | 0;
  $4 = HEAP32[($2 + 116 | 0) >> 2] | 0;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$1 = $1;
  HEAP32[($1 + 68 | 0) >> 2] = $8;
  HEAP32[($1 + 72 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1 + 116 | 0) >> 2] = $4;
  $13 = (HEAP32[($1 + 8 | 0) >> 2] | 0) & -12712049 | 0;
  HEAP32[($1 + 8 | 0) >> 2] = $13;
  $4 = 0;
  $7 = 0;
  label$37 : {
   if (!$6) {
    break label$37
   }
   $7 = (HEAP32[($6 + 8 | 0) >> 2] | 0) & 12712048 | 0;
  }
  $7 = $7 | $13 | 0;
  HEAP32[($1 + 8 | 0) >> 2] = $7;
  label$38 : {
   if (!$5) {
    break label$38
   }
   $4 = (HEAP32[($5 + 8 | 0) >> 2] | 0) & 12712048 | 0;
  }
  $13 = $4 | $7 | 0;
  HEAP32[($1 + 8 | 0) >> 2] = $13;
  $4 = 0;
  $7 = 0;
  label$39 : {
   if (!$6) {
    break label$39
   }
   $7 = HEAP32[($6 + 12 | 0) >> 2] | 0;
  }
  label$40 : {
   if (!$5) {
    break label$40
   }
   $4 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  }
  $4 = $4 | $7 | 0;
  HEAP32[($1 + 12 | 0) >> 2] = $4;
  HEAP32[($1 + 16 | 0) >> 2] = $13 | (HEAP32[($1 + 4 | 0) >> 2] | 0) | 0 | $4 | 0;
  label$41 : {
   if (!$6) {
    break label$41
   }
   ImGuiStorage__SetVoidPtr_28unsigned_20int_2c_20void__29($0 + 23340 | 0 | 0, HEAP32[$6 >> 2] | 0 | 0, 0 | 0);
   ImGuiDockNode___ImGuiDockNode_28_29($6 | 0) | 0;
   label$42 : {
    $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$1) {
     break label$42
    }
    $1 = $1 + 184 | 0;
    HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + -1 | 0;
   }
   FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($6, HEAP32[(0 + 92728 | 0) >> 2] | 0);
  }
  label$43 : {
   if (!$5) {
    break label$43
   }
   ImGuiStorage__SetVoidPtr_28unsigned_20int_2c_20void__29($0 + 23340 | 0 | 0, HEAP32[$5 >> 2] | 0 | 0, 0 | 0);
   ImGuiDockNode___ImGuiDockNode_28_29($5 | 0) | 0;
   label$44 : {
    $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$1) {
     break label$44
    }
    $1 = $1 + 184 | 0;
    HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + -1 | 0;
   }
   FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($5, HEAP32[(0 + 92728 | 0) >> 2] | 0);
  }
  __stack_pointer = $3 + 48 | 0;
 }
 
 function ImGui__FocusTopMostWindowUnderOne_28ImGuiWindow__2c_20ImGuiWindow__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $2 = 0, $3 = 0;
  $2 = 0;
  $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $4 = -1;
  label$1 : {
   label$2 : {
    if ($0) {
     break label$2
    }
    $4 = (HEAP32[($3 + 16056 | 0) >> 2] | 0) + -1 | 0;
    break label$1;
   }
   label$3 : {
    if (!((HEAPU8[($0 + 11 | 0) >> 0] | 0) & 1 | 0)) {
     break label$3
    }
    label$4 : while (1) {
     $0 = HEAP32[($0 + 820 | 0) >> 2] | 0;
     if ((HEAPU8[($0 + 11 | 0) >> 0] | 0) & 1 | 0) {
      continue label$4
     }
     break label$4;
    };
    $4 = 0;
   }
   $4 = $4 + (HEAP16[($0 + 240 | 0) >> 1] | 0) | 0;
  }
  label$5 : {
   if (($4 | 0) < (0 | 0)) {
    break label$5
   }
   $3 = HEAP32[($3 + 16064 | 0) >> 2] | 0;
   label$6 : while (1) {
    label$7 : {
     $0 = $4;
     $4 = HEAP32[($3 + ($0 << 2 | 0) | 0) >> 2] | 0;
     if (($4 | 0) == ($1 | 0)) {
      break label$7
     }
     if (!(HEAPU8[($4 + 220 | 0) >> 0] | 0)) {
      break label$7
     }
     if (((HEAP32[($4 + 8 | 0) >> 2] | 0) & 262656 | 0 | 0) == (262656 | 0)) {
      break label$7
     }
     label$8 : {
      $2 = HEAP32[($4 + 848 | 0) >> 2] | 0;
      if (!$2) {
       break label$8
      }
      if (HEAPU8[($2 + 220 | 0) >> 0] | 0) {
       break label$5
      }
     }
     label$9 : {
      $0 = HEAP32[($4 + 936 | 0) >> 2] | 0;
      if ($0) {
       break label$9
      }
      ImGui__FocusWindow_28ImGuiWindow__29($4 | 0);
      return;
     }
     label$10 : {
      $0 = HEAP32[($0 + 48 | 0) >> 2] | 0;
      if ($0) {
       break label$10
      }
      ImGui__FocusWindow_28ImGuiWindow__29($4 | 0);
      return;
     }
     $2 = $4;
     $0 = ImGui__TabBarFindMostRecentlySelectedTabForActiveWindow_28ImGuiTabBar__29($0 | 0) | 0;
     if (!$0) {
      break label$5
     }
     ImGui__FocusWindow_28ImGuiWindow__29(HEAP32[($0 + 8 | 0) >> 2] | 0 | 0);
     return;
    }
    $4 = $0 + -1 | 0;
    $2 = 0;
    if (($0 | 0) > (0 | 0)) {
     continue label$6
    }
    break label$6;
   };
  }
  ImGui__FocusWindow_28ImGuiWindow__29($2 | 0);
 }
 
 function ImGui__DockNodeTreeFindVisibleNodeByPos_28ImGuiDockNode__2c_20ImVec2_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2 = 0, $8 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8$hi = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  $3 = 0;
  label$1 : {
   if (!((HEAPU16[($0 + 156 | 0) >> 1] | 0) & 512 | 0)) {
    break label$1
   }
   $4 = Math_fround(HEAPF32[$1 >> 2]);
   $5 = Math_fround(HEAPF32[($0 + 52 | 0) >> 2]);
   if (!($4 >= $5)) {
    break label$1
   }
   $6 = Math_fround(HEAPF32[($1 + 4 | 0) >> 2]);
   $7 = Math_fround(HEAPF32[($0 + 56 | 0) >> 2]);
   if (!($6 >= $7)) {
    break label$1
   }
   if (!($4 < Math_fround(Math_fround($5 + Math_fround(HEAPF32[($0 + 60 | 0) >> 2])) + Math_fround(0.0)))) {
    break label$1
   }
   if (!($6 < Math_fround(Math_fround($7 + Math_fround(HEAPF32[($0 + 64 | 0) >> 2])) + Math_fround(0.0)))) {
    break label$1
   }
   label$2 : {
    $3 = HEAP32[($0 + 28 | 0) >> 2] | 0;
    if ($3) {
     break label$2
    }
    $3 = $0;
    break label$1;
   }
   i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
   $8 = i64toi32_i32$0;
   $8$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $2;
   HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $8;
   HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = $8;
   HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] = i64toi32_i32$1;
   $3 = ImGui__DockNodeTreeFindVisibleNodeByPos_28ImGuiDockNode__2c_20ImVec2_29($3 | 0, i64toi32_i32$0 + 8 | 0 | 0) | 0;
   if ($3) {
    break label$1
   }
   $3 = HEAP32[($0 + 32 | 0) >> 2] | 0;
   i64toi32_i32$1 = $8$hi;
   i64toi32_i32$0 = $2;
   HEAP32[i64toi32_i32$0 >> 2] = $8;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = $8;
   HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$1;
   $3 = ImGui__DockNodeTreeFindVisibleNodeByPos_28ImGuiDockNode__2c_20ImVec2_29($3 | 0, i64toi32_i32$0 | 0) | 0;
   $3 = $3 ? $3 : $0;
  }
  __stack_pointer = $2 + 32 | 0;
  return $3 | 0;
 }
 
 function ImGui__DockContextProcessDock_28ImGuiContext__2c_20ImGuiDockRequest__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $5 = 0, $4 = 0, $3 = 0, $7 = 0, $8 = 0, $2 = 0, $9 = 0, $19 = 0, i64toi32_i32$0 = 0, $13 = 0, i64toi32_i32$1 = 0, $23 = 0, $12 = 0, $17 = Math_fround(0), $22 = 0, $14 = 0, $6 = 0, $10 = 0, $11 = Math_fround(0), $20 = 0, $16 = Math_fround(0), $18 = 0, $15 = 0, $18$hi = 0, $24 = 0, $94 = 0, $97 = 0, $174 = 0, $21 = 0, $638 = 0, $724 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2 = __stack_pointer - 112 | 0;
  __stack_pointer = $2;
  $3 = (HEAP32[($0 + 23536 | 0) >> 2] | 0) & 64 | 0;
  $4 = HEAP32[($1 + 8 | 0) >> 2] | 0;
  $5 = HEAP32[($1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $6 = HEAP32[($1 + 12 | 0) >> 2] | 0;
     if (!$6) {
      break label$3
     }
     label$4 : {
      if (!$3) {
       break label$4
      }
      label$5 : {
       label$6 : {
        if ($4) {
         break label$6
        }
        $7 = 0;
        break label$5;
       }
       $7 = HEAP32[$4 >> 2] | 0;
      }
      label$7 : {
       label$8 : {
        if ($5) {
         break label$8
        }
        $8 = 67605;
        break label$7;
       }
       $8 = HEAP32[$5 >> 2] | 0;
      }
      $3 = HEAP32[$6 >> 2] | 0;
      HEAP32[($2 + 92 | 0) >> 2] = HEAP32[($1 + 16 | 0) >> 2] | 0;
      HEAP32[($2 + 88 | 0) >> 2] = $3;
      HEAP32[($2 + 84 | 0) >> 2] = $8;
      HEAP32[($2 + 80 | 0) >> 2] = $7;
      ImGui__DebugLog_28char_20const__2c_20____29(68798 | 0, $2 + 80 | 0 | 0);
     }
     $9 = HEAP32[($6 + 936 | 0) >> 2] | 0;
     $10 = 0;
     HEAP32[($6 + 936 | 0) >> 2] = 0;
     if (!$9) {
      break label$2
     }
     if (HEAP32[($9 + 28 | 0) >> 2] | 0) {
      break label$1
     }
     $3 = HEAP32[($9 + 48 | 0) >> 2] | 0;
     $10 = HEAP32[($3 + 24 | 0) >> 2] | 0;
     if ($10) {
      break label$1
     }
     $10 = HEAP32[($3 + 20 | 0) >> 2] | 0;
     break label$1;
    }
    $9 = 0;
    $10 = 0;
    if (!$3) {
     break label$1
    }
    $9 = 0;
    $3 = 0;
    label$9 : {
     if (!$4) {
      break label$9
     }
     $3 = HEAP32[$4 >> 2] | 0;
    }
    HEAP32[($2 + 68 | 0) >> 2] = HEAP32[($1 + 16 | 0) >> 2] | 0;
    HEAP32[($2 + 64 | 0) >> 2] = $3;
    ImGui__DebugLog_28char_20const__2c_20____29(68738 | 0, $2 + 64 | 0 | 0);
    $10 = 0;
    break label$1;
   }
   $10 = HEAP32[($6 + 160 | 0) >> 2] | 0;
   $9 = 0;
  }
  label$10 : {
   if ($4) {
    break label$10
   }
   $4 = ImGui__DockContextAddNode_28ImGuiContext__2c_20unsigned_20int_29($0 | 0, 0 | 0) | 0;
   i64toi32_i32$0 = HEAP32[($5 + 64 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($5 + 68 | 0) >> 2] | 0;
   $94 = i64toi32_i32$0;
   i64toi32_i32$0 = $4;
   HEAP32[($4 + 52 | 0) >> 2] = $94;
   HEAP32[($4 + 56 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[($5 + 72 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($5 + 76 | 0) >> 2] | 0;
   $97 = i64toi32_i32$1;
   i64toi32_i32$1 = $4;
   HEAP32[($4 + 60 | 0) >> 2] = $97;
   HEAP32[($4 + 64 | 0) >> 2] = i64toi32_i32$0;
   if (HEAP32[($5 + 936 | 0) >> 2] | 0) {
    break label$10
   }
   ImGui__DockNodeAddWindow_28ImGuiDockNode__2c_20ImGuiWindow__2c_20bool_29($4 | 0, $5 | 0, 1 | 0);
   $3 = HEAP32[((HEAP32[($4 + 48 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
   HEAP32[($3 + 4 | 0) >> 2] = (HEAP32[($3 + 4 | 0) >> 2] | 0) & -4194305 | 0;
   HEAP8[($5 + 905 | 0) >> 0] = HEAPU8[($5 + 905 | 0) >> 0] | 0 | 1 | 0;
  }
  label$11 : {
   label$12 : {
    $3 = HEAP32[($1 + 16 | 0) >> 2] | 0;
    if (($3 | 0) != (-1 | 0)) {
     break label$12
    }
    $1 = $4;
    break label$11;
   }
   $5 = $3 & -3 | 0;
   $11 = Math_fround(HEAPF32[($1 + 20 | 0) >> 2]);
   $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   label$13 : {
    label$14 : {
     label$15 : {
      if (!$9) {
       break label$15
      }
      if ($5) {
       break label$15
      }
      HEAP32[($9 + 24 | 0) >> 2] = $4;
      $12 = $9;
      break label$14;
     }
     $12 = ImGui__DockContextAddNode_28ImGuiContext__2c_20unsigned_20int_29($0 | 0, 0 | 0) | 0;
     HEAP32[($12 + 24 | 0) >> 2] = $4;
     if (!$9) {
      break label$14
     }
     $13 = $9;
     if ($5) {
      break label$13
     }
    }
    $13 = ImGui__DockContextAddNode_28ImGuiContext__2c_20unsigned_20int_29($0 | 0, 0 | 0) | 0;
   }
   HEAP32[($13 + 24 | 0) >> 2] = $4;
   $14 = $5 ? $12 : $13;
   $7 = HEAP32[($4 + 28 | 0) >> 2] | 0;
   HEAP32[($14 + 28 | 0) >> 2] = $7;
   $1 = HEAP32[($4 + 32 | 0) >> 2] | 0;
   HEAP32[($14 + 32 | 0) >> 2] = $1;
   label$16 : {
    if (!$7) {
     break label$16
    }
    HEAP32[($7 + 24 | 0) >> 2] = $14;
    $1 = HEAP32[($14 + 32 | 0) >> 2] | 0;
   }
   $3 = $3 >>> 0 > 1 >>> 0;
   $15 = !$5;
   label$17 : {
    if (!$1) {
     break label$17
    }
    HEAP32[($1 + 24 | 0) >> 2] = $14;
   }
   HEAP32[($14 + 76 | 0) >> 2] = HEAP32[($4 + 76 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($4 + 68 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($4 + 72 | 0) >> 2] | 0;
   $174 = i64toi32_i32$0;
   i64toi32_i32$0 = $14;
   HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] = $174;
   HEAP32[(i64toi32_i32$0 + 72 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($4 + 32 | 0) >> 2] = $13;
   HEAP32[($4 + 28 | 0) >> 2] = $12;
   $5 = ($4 + 28 | 0) + ($15 << 2 | 0) | 0;
   HEAP32[((HEAP32[$5 >> 2] | 0) + 116 | 0) >> 2] = HEAP32[($4 + 116 | 0) >> 2] | 0;
   HEAP32[($4 + 116 | 0) >> 2] = 0;
   HEAP32[($4 + 76 | 0) >> 2] = $3;
   HEAP16[($4 + 156 | 0) >> 1] = (HEAPU16[($4 + 156 | 0) >> 1] | 0) & 65472 | 0 | 9 | 0;
   $1 = $3 << 2 | 0;
   $16 = Math_fround(HEAPF32[(($4 + 60 | 0) + $1 | 0) >> 2]);
   $17 = Math_fround(HEAPF32[(($8 + $1 | 0) + 14420 | 0) >> 2]);
   i64toi32_i32$1 = HEAP32[($4 + 60 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($4 + 64 | 0) >> 2] | 0;
   $18 = i64toi32_i32$1;
   $18$hi = i64toi32_i32$0;
   i64toi32_i32$1 = $13;
   HEAP32[($13 + 68 | 0) >> 2] = $18;
   HEAP32[($13 + 72 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $12;
   HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = $18;
   HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] = i64toi32_i32$0;
   label$18 : {
    label$19 : {
     $16 = Math_fround($16 + Math_fround(-2.0));
     $17 = Math_fround($17 + $17);
     $17 = $16 >= $17 ? $16 : $17;
     $11 = Math_fround($11 * $17);
     if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
      break label$19
     }
     $3 = ~~$11;
     break label$18;
    }
    $3 = -2147483648;
   }
   $11 = Math_fround($3 | 0);
   HEAPF32[(($12 + 68 | 0) + $1 | 0) >> 2] = $11;
   label$20 : {
    label$21 : {
     $17 = Math_fround($17 - $11);
     if (!(Math_fround(Math_abs($17)) < Math_fround(2147483648.0))) {
      break label$21
     }
     $3 = ~~$17;
     break label$20;
    }
    $3 = -2147483648;
   }
   HEAPF32[(($13 + 68 | 0) + $1 | 0) >> 2] = Math_fround($3 | 0);
   ImGui__DockNodeMoveWindows_28ImGuiDockNode__2c_20ImGuiDockNode__29(HEAP32[$5 >> 2] | 0 | 0, $4 | 0);
   $19 = HEAP32[(HEAP32[$5 >> 2] | 0) >> 2] | 0;
   $5 = HEAP32[$4 >> 2] | 0;
   label$22 : {
    $20 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!((HEAPU8[($20 + 23536 | 0) >> 0] | 0) & 64 | 0)) {
     break label$22
    }
    HEAP32[($2 + 52 | 0) >> 2] = $19;
    HEAP32[($2 + 48 | 0) >> 2] = $5;
    ImGui__DebugLog_28char_20const__2c_20____29(69253 | 0, $2 + 48 | 0 | 0);
   }
   label$23 : {
    $7 = HEAP32[($20 + 16044 | 0) >> 2] | 0;
    if (($7 | 0) < (1 | 0)) {
     break label$23
    }
    $21 = $7 & 1 | 0;
    $3 = HEAP32[($20 + 16052 | 0) >> 2] | 0;
    $1 = 0;
    label$24 : {
     if (($7 | 0) == (1 | 0)) {
      break label$24
     }
     $22 = $7 & -2 | 0;
     $1 = 0;
     $7 = 0;
     label$25 : while (1) {
      label$26 : {
       $8 = $1 << 2 | 0;
       $23 = HEAP32[($3 + $8 | 0) >> 2] | 0;
       if ((HEAP32[($23 + 940 | 0) >> 2] | 0 | 0) != ($5 | 0)) {
        break label$26
       }
       if (HEAP32[($23 + 932 | 0) >> 2] | 0) {
        break label$26
       }
       HEAP32[($23 + 940 | 0) >> 2] = $19;
      }
      label$27 : {
       $8 = HEAP32[($3 + ($8 | 4 | 0) | 0) >> 2] | 0;
       if ((HEAP32[($8 + 940 | 0) >> 2] | 0 | 0) != ($5 | 0)) {
        break label$27
       }
       if (HEAP32[($8 + 932 | 0) >> 2] | 0) {
        break label$27
       }
       HEAP32[($8 + 940 | 0) >> 2] = $19;
      }
      $1 = $1 + 2 | 0;
      $7 = $7 + 2 | 0;
      if (($7 | 0) != ($22 | 0)) {
       continue label$25
      }
      break label$25;
     };
    }
    if (!$21) {
     break label$23
    }
    $1 = HEAP32[($3 + ($1 << 2 | 0) | 0) >> 2] | 0;
    if ((HEAP32[($1 + 940 | 0) >> 2] | 0 | 0) != ($5 | 0)) {
     break label$23
    }
    if (HEAP32[($1 + 932 | 0) >> 2] | 0) {
     break label$23
    }
    HEAP32[($1 + 940 | 0) >> 2] = $19;
   }
   label$28 : {
    $1 = HEAP32[($20 + 23420 | 0) >> 2] | 0;
    if (!$1) {
     break label$28
    }
    $1 = $1 + 4 | 0;
    $3 = $1 + (HEAP32[($20 + 23412 | 0) >> 2] | 0) | 0;
    label$29 : while (1) {
     label$30 : {
      if ((HEAP32[($1 + 20 | 0) >> 2] | 0 | 0) != ($5 | 0)) {
       break label$30
      }
      HEAP32[($1 + 20 | 0) >> 2] = $19;
     }
     $1 = $1 + (HEAP32[($1 + -4 | 0) >> 2] | 0) | 0;
     if (($1 | 0) != ($3 | 0)) {
      continue label$29
     }
     break label$29;
    };
   }
   $1 = $4;
   label$31 : while (1) {
    $5 = $1;
    $1 = HEAP32[($5 + 24 | 0) >> 2] | 0;
    if ($1) {
     continue label$31
    }
    break label$31;
   };
   ImGui__DockNodeUpdateHasCentralNodeChild_28ImGuiDockNode__29($5 | 0);
   i64toi32_i32$0 = HEAP32[($4 + 52 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($4 + 56 | 0) >> 2] | 0;
   $18 = i64toi32_i32$0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[($4 + 60 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($4 + 64 | 0) >> 2] | 0;
   $24 = i64toi32_i32$1;
   i64toi32_i32$1 = $2;
   HEAP32[($2 + 40 | 0) >> 2] = $24;
   HEAP32[($2 + 44 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $2;
   HEAP32[($2 + 104 | 0) >> 2] = $24;
   HEAP32[($2 + 108 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $18$hi;
   ImGui__DockNodeTreeUpdatePosSize_28ImGuiDockNode__2c_20ImVec2_2c_20ImVec2_2c_20ImGuiDockNode__29($4 | 0, $18 | 0, i64toi32_i32$0 | 0, $2 + 40 | 0 | 0, 0 | 0);
   HEAP32[($12 + 4 | 0) >> 2] = HEAP32[($4 + 4 | 0) >> 2] | 0;
   $1 = HEAP32[($4 + 4 | 0) >> 2] | 0;
   HEAP32[($13 + 4 | 0) >> 2] = $1;
   HEAP32[($14 + 8 | 0) >> 2] = (HEAP32[($4 + 8 | 0) >> 2] | 0) & 12712048 | 0;
   $5 = (HEAP32[($4 + 8 | 0) >> 2] | 0) & -12712049 | 0;
   HEAP32[($4 + 8 | 0) >> 2] = $5;
   HEAP32[($12 + 16 | 0) >> 2] = HEAP32[($12 + 8 | 0) >> 2] | 0 | (HEAP32[($12 + 4 | 0) >> 2] | 0) | 0 | (HEAP32[($12 + 12 | 0) >> 2] | 0) | 0;
   HEAP32[($13 + 16 | 0) >> 2] = $1 | (HEAP32[($13 + 8 | 0) >> 2] | 0 | (HEAP32[($13 + 12 | 0) >> 2] | 0) | 0) | 0;
   HEAP32[($4 + 16 | 0) >> 2] = HEAP32[($4 + 4 | 0) >> 2] | 0 | (HEAP32[($4 + 12 | 0) >> 2] | 0) | 0 | $5 | 0;
   label$32 : {
    if (!((HEAPU8[($14 + 17 | 0) >> 0] | 0) & 8 | 0)) {
     break label$32
    }
    $1 = $4;
    label$33 : while (1) {
     $5 = $1;
     $1 = HEAP32[($5 + 24 | 0) >> 2] | 0;
     if ($1) {
      continue label$33
     }
     break label$33;
    };
    HEAP32[($5 + 120 | 0) >> 2] = $14;
   }
   $1 = HEAP32[(($4 + (($15 ^ 1 | 0) << 2 | 0) | 0) + 28 | 0) >> 2] | 0;
   HEAP32[($1 + 112 | 0) >> 2] = HEAP32[($4 + 112 | 0) >> 2] | 0;
  }
  $5 = (HEAP32[($1 + 8 | 0) >> 2] | 0) & -8193 | 0;
  HEAP32[($1 + 8 | 0) >> 2] = $5;
  HEAP32[($1 + 16 | 0) >> 2] = HEAP32[($1 + 4 | 0) >> 2] | 0 | (HEAP32[($1 + 12 | 0) >> 2] | 0) | 0 | $5 | 0;
  label$34 : {
   label$35 : {
    if (($1 | 0) == ($9 | 0)) {
     break label$35
    }
    label$36 : {
     $4 = HEAP32[($1 + 36 | 0) >> 2] | 0;
     if (($4 | 0) < (1 | 0)) {
      break label$36
     }
     if (HEAP32[($1 + 48 | 0) >> 2] | 0) {
      break label$36
     }
     label$37 : {
      $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$5) {
       break label$37
      }
      $5 = $5 + 184 | 0;
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1 | 0;
     }
     (wasm2js_i32$0 = $1, wasm2js_i32$1 = ImGuiTabBar__ImGuiTabBar_28_29(FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](144, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 48 | 0) >> 2] = wasm2js_i32$1;
     $4 = HEAP32[($1 + 36 | 0) >> 2] | 0;
     if (($4 | 0) < (1 | 0)) {
      break label$36
     }
     $5 = 0;
     label$38 : while (1) {
      ImGui__TabBarAddTab_28ImGuiTabBar__2c_20int_2c_20ImGuiWindow__29(HEAP32[($1 + 48 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[((HEAP32[($1 + 44 | 0) >> 2] | 0) + ($5 << 2 | 0) | 0) >> 2] | 0 | 0);
      $5 = $5 + 1 | 0;
      $4 = HEAP32[($1 + 36 | 0) >> 2] | 0;
      if (($5 | 0) < ($4 | 0)) {
       continue label$38
      }
      break label$38;
     };
    }
    label$39 : {
     if (!$9) {
      break label$39
     }
     label$40 : {
      label$41 : {
       if (!(HEAP32[($9 + 28 | 0) >> 2] | 0)) {
        break label$41
       }
       label$42 : {
        if (($4 | 0) < (1 | 0)) {
         break label$42
        }
        $5 = HEAP32[($9 + 124 | 0) >> 2] | 0;
        ImGui__DockNodeMoveWindows_28ImGuiDockNode__2c_20ImGuiDockNode__29($1 | 0, $5 | 0);
        ImGui__DockNodeMoveWindows_28ImGuiDockNode__2c_20ImGuiDockNode__29($5 | 0, $1 | 0);
        $19 = HEAP32[$5 >> 2] | 0;
        $4 = HEAP32[$1 >> 2] | 0;
        label$43 : {
         $13 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
         if (!((HEAPU8[($13 + 23536 | 0) >> 0] | 0) & 64 | 0)) {
          break label$43
         }
         HEAP32[($2 + 36 | 0) >> 2] = $19;
         HEAP32[($2 + 32 | 0) >> 2] = $4;
         ImGui__DebugLog_28char_20const__2c_20____29(69253 | 0, $2 + 32 | 0 | 0);
        }
        label$44 : {
         $7 = HEAP32[($13 + 16044 | 0) >> 2] | 0;
         if (($7 | 0) < (1 | 0)) {
          break label$44
         }
         $12 = $7 & 1 | 0;
         $3 = HEAP32[($13 + 16052 | 0) >> 2] | 0;
         $5 = 0;
         label$45 : {
          if (($7 | 0) == (1 | 0)) {
           break label$45
          }
          $22 = $7 & -2 | 0;
          $5 = 0;
          $7 = 0;
          label$46 : while (1) {
           label$47 : {
            $8 = $5 << 2 | 0;
            $23 = HEAP32[($3 + $8 | 0) >> 2] | 0;
            if ((HEAP32[($23 + 940 | 0) >> 2] | 0 | 0) != ($4 | 0)) {
             break label$47
            }
            if (HEAP32[($23 + 932 | 0) >> 2] | 0) {
             break label$47
            }
            HEAP32[($23 + 940 | 0) >> 2] = $19;
           }
           label$48 : {
            $8 = HEAP32[($3 + ($8 | 4 | 0) | 0) >> 2] | 0;
            if ((HEAP32[($8 + 940 | 0) >> 2] | 0 | 0) != ($4 | 0)) {
             break label$48
            }
            if (HEAP32[($8 + 932 | 0) >> 2] | 0) {
             break label$48
            }
            HEAP32[($8 + 940 | 0) >> 2] = $19;
           }
           $5 = $5 + 2 | 0;
           $7 = $7 + 2 | 0;
           if (($7 | 0) != ($22 | 0)) {
            continue label$46
           }
           break label$46;
          };
         }
         if (!$12) {
          break label$44
         }
         $5 = HEAP32[($3 + ($5 << 2 | 0) | 0) >> 2] | 0;
         if ((HEAP32[($5 + 940 | 0) >> 2] | 0 | 0) != ($4 | 0)) {
          break label$44
         }
         if (HEAP32[($5 + 932 | 0) >> 2] | 0) {
          break label$44
         }
         HEAP32[($5 + 940 | 0) >> 2] = $19;
        }
        $5 = HEAP32[($13 + 23420 | 0) >> 2] | 0;
        if (!$5) {
         break label$42
        }
        $5 = $5 + 4 | 0;
        $3 = $5 + (HEAP32[($13 + 23412 | 0) >> 2] | 0) | 0;
        label$49 : while (1) {
         label$50 : {
          if ((HEAP32[($5 + 20 | 0) >> 2] | 0 | 0) != ($4 | 0)) {
           break label$50
          }
          HEAP32[($5 + 20 | 0) >> 2] = $19;
         }
         $5 = $5 + (HEAP32[($5 + -4 | 0) >> 2] | 0) | 0;
         if (($5 | 0) != ($3 | 0)) {
          continue label$49
         }
         break label$49;
        };
       }
       label$51 : {
        if (!((HEAPU8[($1 + 17 | 0) >> 0] | 0) & 8 | 0)) {
         break label$51
        }
        $8 = HEAP32[($9 + 144 | 0) >> 2] | 0;
        $23 = HEAP32[($0 + 23348 | 0) >> 2] | 0;
        $5 = $23;
        label$52 : {
         $19 = HEAP32[($0 + 23340 | 0) >> 2] | 0;
         if (!$19) {
          break label$52
         }
         $5 = $23;
         $4 = $19;
         label$53 : while (1) {
          $3 = $4 >>> 1 | 0;
          $7 = $5 + ($3 << 3 | 0) | 0;
          $638 = $7 + 8 | 0;
          $7 = (HEAP32[$7 >> 2] | 0) >>> 0 < $8 >>> 0;
          $5 = $7 ? $638 : $5;
          $4 = $7 ? $4 + ($3 ^ -1 | 0) | 0 : $3;
          if ($4) {
           continue label$53
          }
          break label$53;
         };
        }
        $3 = 0;
        label$54 : {
         if (($5 | 0) == ($23 + ($19 << 3 | 0) | 0 | 0)) {
          break label$54
         }
         if ((HEAP32[$5 >> 2] | 0 | 0) != ($8 | 0)) {
          break label$54
         }
         $3 = HEAP32[($5 + 4 | 0) >> 2] | 0;
        }
        $5 = $3;
        label$55 : while (1) {
         $4 = $5;
         $5 = HEAP32[($5 + 24 | 0) >> 2] | 0;
         if ($5) {
          continue label$55
         }
         break label$55;
        };
        $5 = HEAP32[($3 + 8 | 0) >> 2] | 0 | 2048 | 0;
        HEAP32[($3 + 8 | 0) >> 2] = $5;
        HEAP32[($3 + 16 | 0) >> 2] = HEAP32[($3 + 4 | 0) >> 2] | 0 | (HEAP32[($3 + 12 | 0) >> 2] | 0) | 0 | $5 | 0;
        $5 = (HEAP32[($1 + 8 | 0) >> 2] | 0) & -2049 | 0;
        HEAP32[($1 + 8 | 0) >> 2] = $5;
        HEAP32[($1 + 16 | 0) >> 2] = HEAP32[($1 + 4 | 0) >> 2] | 0 | (HEAP32[($1 + 12 | 0) >> 2] | 0) | 0 | $5 | 0;
        HEAP32[($4 + 120 | 0) >> 2] = $3;
       }
       $4 = HEAP32[($9 + 28 | 0) >> 2] | 0;
       HEAP32[($1 + 28 | 0) >> 2] = $4;
       $5 = HEAP32[($9 + 32 | 0) >> 2] | 0;
       HEAP32[($1 + 32 | 0) >> 2] = $5;
       label$56 : {
        if (!$4) {
         break label$56
        }
        HEAP32[($4 + 24 | 0) >> 2] = $1;
        $5 = HEAP32[($1 + 32 | 0) >> 2] | 0;
       }
       label$57 : {
        if (!$5) {
         break label$57
        }
        HEAP32[($5 + 24 | 0) >> 2] = $1;
       }
       HEAP32[($1 + 76 | 0) >> 2] = HEAP32[($9 + 76 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($9 + 68 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($9 + 72 | 0) >> 2] | 0;
       $724 = i64toi32_i32$0;
       i64toi32_i32$0 = $1;
       HEAP32[($1 + 68 | 0) >> 2] = $724;
       HEAP32[($1 + 72 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$0 = $9;
       i64toi32_i32$1 = 0;
       HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] = 0;
       HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] = i64toi32_i32$1;
       break label$40;
      }
      $4 = HEAP32[$9 >> 2] | 0;
      ImGui__DockNodeMoveWindows_28ImGuiDockNode__2c_20ImGuiDockNode__29($1 | 0, $9 | 0);
      $19 = HEAP32[$1 >> 2] | 0;
      label$58 : {
       $13 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
       if (!((HEAPU8[($13 + 23536 | 0) >> 0] | 0) & 64 | 0)) {
        break label$58
       }
       HEAP32[($2 + 20 | 0) >> 2] = $19;
       HEAP32[($2 + 16 | 0) >> 2] = $4;
       ImGui__DebugLog_28char_20const__2c_20____29(69253 | 0, $2 + 16 | 0 | 0);
      }
      label$59 : {
       $7 = HEAP32[($13 + 16044 | 0) >> 2] | 0;
       if (($7 | 0) < (1 | 0)) {
        break label$59
       }
       $12 = $7 & 1 | 0;
       $3 = HEAP32[($13 + 16052 | 0) >> 2] | 0;
       $5 = 0;
       label$60 : {
        if (($7 | 0) == (1 | 0)) {
         break label$60
        }
        $22 = $7 & -2 | 0;
        $5 = 0;
        $7 = 0;
        label$61 : while (1) {
         label$62 : {
          $8 = $5 << 2 | 0;
          $23 = HEAP32[($3 + $8 | 0) >> 2] | 0;
          if ((HEAP32[($23 + 940 | 0) >> 2] | 0 | 0) != ($4 | 0)) {
           break label$62
          }
          if (HEAP32[($23 + 932 | 0) >> 2] | 0) {
           break label$62
          }
          HEAP32[($23 + 940 | 0) >> 2] = $19;
         }
         label$63 : {
          $8 = HEAP32[($3 + ($8 | 4 | 0) | 0) >> 2] | 0;
          if ((HEAP32[($8 + 940 | 0) >> 2] | 0 | 0) != ($4 | 0)) {
           break label$63
          }
          if (HEAP32[($8 + 932 | 0) >> 2] | 0) {
           break label$63
          }
          HEAP32[($8 + 940 | 0) >> 2] = $19;
         }
         $5 = $5 + 2 | 0;
         $7 = $7 + 2 | 0;
         if (($7 | 0) != ($22 | 0)) {
          continue label$61
         }
         break label$61;
        };
       }
       if (!$12) {
        break label$59
       }
       $5 = HEAP32[($3 + ($5 << 2 | 0) | 0) >> 2] | 0;
       if ((HEAP32[($5 + 940 | 0) >> 2] | 0 | 0) != ($4 | 0)) {
        break label$59
       }
       if (HEAP32[($5 + 932 | 0) >> 2] | 0) {
        break label$59
       }
       HEAP32[($5 + 940 | 0) >> 2] = $19;
      }
      $5 = HEAP32[($13 + 23420 | 0) >> 2] | 0;
      if (!$5) {
       break label$40
      }
      $5 = $5 + 4 | 0;
      $3 = $5 + (HEAP32[($13 + 23412 | 0) >> 2] | 0) | 0;
      label$64 : while (1) {
       label$65 : {
        if ((HEAP32[($5 + 20 | 0) >> 2] | 0 | 0) != ($4 | 0)) {
         break label$65
        }
        HEAP32[($5 + 20 | 0) >> 2] = $19;
       }
       $5 = $5 + (HEAP32[($5 + -4 | 0) >> 2] | 0) | 0;
       if (($5 | 0) != ($3 | 0)) {
        continue label$64
       }
       break label$64;
      };
     }
     ImGui__DockContextRemoveNode_28ImGuiContext__2c_20ImGuiDockNode__2c_20bool_29($0 | 0, $9 | 0, 1 | 0);
     break label$34;
    }
    if (!$6) {
     break label$34
    }
    $4 = HEAP32[($6 + 940 | 0) >> 2] | 0;
    HEAP32[($1 + 116 | 0) >> 2] = $6;
    ImGui__DockNodeAddWindow_28ImGuiDockNode__2c_20ImGuiWindow__2c_20bool_29($1 | 0, $6 | 0, 1 | 0);
    if (!$4) {
     break label$34
    }
    $19 = HEAP32[$1 >> 2] | 0;
    label$66 : {
     $22 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!((HEAPU8[($22 + 23536 | 0) >> 0] | 0) & 64 | 0)) {
      break label$66
     }
     HEAP32[($2 + 4 | 0) >> 2] = $19;
     HEAP32[$2 >> 2] = $4;
     ImGui__DebugLog_28char_20const__2c_20____29(69253 | 0, $2 | 0);
    }
    label$67 : {
     $7 = HEAP32[($22 + 16044 | 0) >> 2] | 0;
     if (($7 | 0) < (1 | 0)) {
      break label$67
     }
     $13 = $7 & 1 | 0;
     $3 = HEAP32[($22 + 16052 | 0) >> 2] | 0;
     $5 = 0;
     label$68 : {
      if (($7 | 0) == (1 | 0)) {
       break label$68
      }
      $9 = $7 & -2 | 0;
      $5 = 0;
      $7 = 0;
      label$69 : while (1) {
       label$70 : {
        $8 = $5 << 2 | 0;
        $23 = HEAP32[($3 + $8 | 0) >> 2] | 0;
        if ((HEAP32[($23 + 940 | 0) >> 2] | 0 | 0) != ($4 | 0)) {
         break label$70
        }
        if (HEAP32[($23 + 932 | 0) >> 2] | 0) {
         break label$70
        }
        HEAP32[($23 + 940 | 0) >> 2] = $19;
       }
       label$71 : {
        $8 = HEAP32[($3 + ($8 | 4 | 0) | 0) >> 2] | 0;
        if ((HEAP32[($8 + 940 | 0) >> 2] | 0 | 0) != ($4 | 0)) {
         break label$71
        }
        if (HEAP32[($8 + 932 | 0) >> 2] | 0) {
         break label$71
        }
        HEAP32[($8 + 940 | 0) >> 2] = $19;
       }
       $5 = $5 + 2 | 0;
       $7 = $7 + 2 | 0;
       if (($7 | 0) != ($9 | 0)) {
        continue label$69
       }
       break label$69;
      };
     }
     if (!$13) {
      break label$67
     }
     $5 = HEAP32[($3 + ($5 << 2 | 0) | 0) >> 2] | 0;
     if ((HEAP32[($5 + 940 | 0) >> 2] | 0 | 0) != ($4 | 0)) {
      break label$67
     }
     if (HEAP32[($5 + 932 | 0) >> 2] | 0) {
      break label$67
     }
     HEAP32[($5 + 940 | 0) >> 2] = $19;
    }
    $5 = HEAP32[($22 + 23420 | 0) >> 2] | 0;
    if (!$5) {
     break label$34
    }
    $5 = $5 + 4 | 0;
    $3 = $5 + (HEAP32[($22 + 23412 | 0) >> 2] | 0) | 0;
    label$72 : while (1) {
     label$73 : {
      if ((HEAP32[($5 + 20 | 0) >> 2] | 0 | 0) != ($4 | 0)) {
       break label$73
      }
      HEAP32[($5 + 20 | 0) >> 2] = $19;
     }
     $5 = $5 + (HEAP32[($5 + -4 | 0) >> 2] | 0) | 0;
     if (($5 | 0) != ($3 | 0)) {
      continue label$72
     }
     break label$34;
    };
   }
   $5 = $9 + 158 | 0;
   HEAP8[$5 >> 0] = (HEAPU16[($9 + 156 | 0) >> 1] | 0 | ((HEAPU8[$5 >> 0] | 0) << 16 | 0) | 0 | 262144 | 0) >>> 16 | 0;
  }
  label$74 : {
   $1 = HEAP32[($1 + 48 | 0) >> 2] | 0;
   if (!$1) {
    break label$74
   }
   HEAP32[($1 + 24 | 0) >> 2] = $10;
  }
  label$75 : {
   $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   if (!(Math_fround(HEAPF32[($1 + 23384 | 0) >> 2]) <= Math_fround(0.0))) {
    break label$75
   }
   HEAPF32[($1 + 23384 | 0) >> 2] = Math_fround(HEAPF32[($1 + 28 | 0) >> 2]);
  }
  __stack_pointer = $2 + 112 | 0;
 }
 
 function ImGui__DockNodeUpdate_28ImGuiDockNode__29($0) {
  $0 = $0 | 0;
  var $5 = 0, $4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $11 = Math_fround(0), $3 = 0, $9 = 0, $6 = 0, $13 = 0, $1 = 0, $8 = 0, $12 = Math_fround(0), $15 = Math_fround(0), $28 = 0, $27 = 0, $7 = 0, $29 = 0, $16 = Math_fround(0), $23 = 0, $17 = Math_fround(0), $10 = 0, $2 = 0, $14 = 0, $31 = Math_fround(0), $26 = 0, $10$hi = 0, $22 = 0, i64toi32_i32$4 = 0, $32 = 0, $25 = 0, $30 = Math_fround(0), i64toi32_i32$3 = 0, $19 = 0, $20 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $18 = 0, $100 = 0, $33 = Math_fround(0), $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $96 = 0, $106 = 0, $111 = 0, $136 = 0, $146 = 0, $151 = 0, $252 = 0, $607 = 0, $612 = 0, $617 = 0, $724 = 0, $21 = 0, $24 = 0, $1837 = 0, $2027 = 0, $2184 = 0, $2187$hi = 0, $2190$hi = 0, $2191 = 0, $2613 = 0, $2618 = 0, $2624 = 0, $2629 = 0, $2634 = 0, $2639 = 0, $2644 = 0, $2649 = 0, $2654 = 0, $2659 = 0, $2664 = 0, $2669 = 0, $2922 = 0, $2925 = 0, $2949 = 0, $2953 = 0, $2958 = 0, $2961 = 0, $2966 = 0, $2969 = 0, $2974 = 0, $2977 = 0, $2982 = 0, $2985 = 0, $2990 = 0, $2993 = 0, $3116 = 0, $3120 = 0, $3201 = 0, $3204 = 0, $3335 = 0, $3339 = 0, $3359 = 0;
  $1 = __stack_pointer - 224 | 0;
  __stack_pointer = $1;
  $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  HEAP32[($0 + 132 | 0) >> 2] = HEAP32[($2 + 16016 | 0) >> 2] | 0;
  HEAP16[($0 + 156 | 0) >> 1] = (HEAPU16[($0 + 156 | 0) >> 1] | 0) & 63487 | 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[($0 + 120 | 0) >> 2] = 0;
  HEAP32[($0 + 124 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   if (HEAP32[($0 + 24 | 0) >> 2] | 0) {
    break label$1
   }
   ImGui__DockNodeUpdateFlagsAndCollapse_28ImGuiDockNode__29($0 | 0);
   $3 = $1 + 72 | 0;
   HEAP32[$3 >> 2] = 0;
   i64toi32_i32$1 = $1;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = i64toi32_i32$0;
   DockNodeFindInfo_28ImGuiDockNode__2c_20ImGuiDockNodeTreeInfo__29($0 | 0, i64toi32_i32$1 + 64 | 0 | 0);
   $4 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
   HEAP32[($0 + 120 | 0) >> 2] = $4;
   $5 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
   $3 = HEAP32[$3 >> 2] | 0;
   HEAP32[($0 + 128 | 0) >> 2] = $3;
   HEAP32[($0 + 124 | 0) >> 2] = ($3 | 0) == (1 | 0) ? $5 : 0;
   label$2 : {
    label$3 : {
     label$4 : {
      if (HEAP32[($0 + 144 | 0) >> 2] | 0) {
       break label$4
      }
      if (!$5) {
       break label$4
      }
      HEAP32[($0 + 144 | 0) >> 2] = HEAP32[$5 >> 2] | 0;
      break label$3;
     }
     if (!$5) {
      break label$2
     }
    }
    $3 = HEAP32[(HEAP32[($5 + 44 | 0) >> 2] | 0) >> 2] | 0;
    i64toi32_i32$2 = $3;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $96 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[($0 + 80 | 0) >> 2] = $96;
    HEAP32[($0 + 84 | 0) >> 2] = i64toi32_i32$1;
    HEAP16[($0 + 104 | 0) >> 1] = HEAPU16[(i64toi32_i32$2 + 40 | 0) >> 1] | 0;
    i64toi32_i32$2 = i64toi32_i32$2 + 32 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $106 = i64toi32_i32$1;
    i64toi32_i32$1 = $0 + 96 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $106;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $3 + 24 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $111 = i64toi32_i32$0;
    i64toi32_i32$0 = $0 + 88 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $111;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $6 = HEAP32[($5 + 36 | 0) >> 2] | 0;
    if (($6 | 0) < (2 | 0)) {
     break label$2
    }
    $7 = $0 + 80 | 0;
    $8 = HEAP32[($5 + 44 | 0) >> 2] | 0;
    $5 = 1;
    label$5 : {
     label$6 : while (1) {
      $3 = HEAP32[($8 + ($5 << 2 | 0) | 0) >> 2] | 0;
      if (!(HEAPU8[($3 + 41 | 0) >> 0] | 0)) {
       break label$5
      }
      $5 = $5 + 1 | 0;
      if (($5 | 0) == ($6 | 0)) {
       break label$2
      }
      continue label$6;
     };
    }
    i64toi32_i32$2 = $3;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $136 = i64toi32_i32$1;
    i64toi32_i32$1 = $7;
    HEAP32[i64toi32_i32$1 >> 2] = $136;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP16[(i64toi32_i32$1 + 24 | 0) >> 1] = HEAPU16[(i64toi32_i32$2 + 40 | 0) >> 1] | 0;
    i64toi32_i32$2 = i64toi32_i32$2 + 32 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $146 = i64toi32_i32$0;
    i64toi32_i32$0 = $7 + 16 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $146;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $3 + 24 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $151 = i64toi32_i32$1;
    i64toi32_i32$1 = $7 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $151;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   }
   if (!$4) {
    break label$1
   }
   label$7 : while (1) {
    HEAP16[($4 + 156 | 0) >> 1] = HEAPU16[($4 + 156 | 0) >> 1] | 0 | 16384 | 0;
    $4 = HEAP32[($4 + 24 | 0) >> 2] | 0;
    if ($4) {
     continue label$7
    }
    break label$7;
   };
  }
  label$8 : {
   $4 = HEAP32[($0 + 48 | 0) >> 2] | 0;
   if (!$4) {
    break label$8
   }
   if (!((HEAPU8[($0 + 17 | 0) >> 0] | 0) & 16 | 0)) {
    break label$8
   }
   $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   label$9 : {
    $3 = HEAP32[($4 + 140 | 0) >> 2] | 0;
    if (!$3) {
     break label$9
    }
    label$10 : {
     if (!$5) {
      break label$10
     }
     $5 = $5 + 184 | 0;
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($3, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   }
   label$11 : {
    $3 = HEAP32[($4 + 8 | 0) >> 2] | 0;
    if (!$3) {
     break label$11
    }
    label$12 : {
     if (!$5) {
      break label$12
     }
     $5 = $5 + 184 | 0;
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($3, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   }
   label$13 : {
    if (!$5) {
     break label$13
    }
    $5 = $5 + 184 | 0;
    HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1 | 0;
   }
   FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($4, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   HEAP32[($0 + 48 | 0) >> 2] = 0;
  }
  label$14 : {
   label$15 : {
    $9 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    $4 = HEAP32[($0 + 24 | 0) >> 2] | 0 | ($9 & 1024 | 0) | 0;
    if ($4) {
     break label$15
    }
    label$16 : {
     label$17 : {
      label$18 : {
       $5 = HEAP32[($0 + 36 | 0) >> 2] | 0;
       if (($5 | 0) > (1 | 0)) {
        break label$18
       }
       if (HEAP32[($0 + 28 | 0) >> 2] | 0) {
        break label$18
       }
       if (HEAPU8[($2 + 98 | 0) >> 0] | 0) {
        break label$18
       }
       if (!$5) {
        break label$16
       }
       if (!(HEAPU8[((HEAP32[(HEAP32[($0 + 44 | 0) >> 2] | 0) >> 2] | 0) + 40 | 0) >> 0] | 0)) {
        break label$17
       }
      }
      if (HEAP32[($0 + 128 | 0) >> 2] | 0) {
       break label$15
      }
     }
     if (($5 | 0) != (1 | 0)) {
      break label$16
     }
     $4 = HEAP32[(HEAP32[($0 + 44 | 0) >> 2] | 0) >> 2] | 0;
     i64toi32_i32$2 = $4;
     i64toi32_i32$0 = HEAP32[($4 + 64 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($4 + 68 | 0) >> 2] | 0;
     $252 = i64toi32_i32$0;
     i64toi32_i32$0 = $0;
     HEAP32[($0 + 52 | 0) >> 2] = $252;
     HEAP32[($0 + 56 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $4;
     i64toi32_i32$1 = HEAP32[($4 + 80 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($4 + 84 | 0) >> 2] | 0;
     $10 = i64toi32_i32$1;
     $10$hi = i64toi32_i32$0;
     HEAP16[($0 + 156 | 0) >> 1] = (HEAPU16[($0 + 156 | 0) >> 1] | 0) & 65024 | 0 | 146 | 0;
     i64toi32_i32$1 = $0;
     HEAP32[($0 + 60 | 0) >> 2] = $10;
     HEAP32[($0 + 64 | 0) >> 2] = i64toi32_i32$0;
     $5 = HEAP32[($0 + 112 | 0) >> 2] | 0;
     if (!$5) {
      break label$16
     }
     label$19 : {
      if ((HEAP32[($2 + 18648 | 0) >> 2] | 0 | 0) != ($5 | 0)) {
       break label$19
      }
      ImGui__FocusWindow_28ImGuiWindow__29($4 | 0);
      $5 = HEAP32[($0 + 112 | 0) >> 2] | 0;
      if (!$5) {
       break label$16
      }
     }
     $3 = HEAP32[($5 + 44 | 0) >> 2] | 0;
     HEAP32[($4 + 44 | 0) >> 2] = $3;
     HEAP32[($4 + 48 | 0) >> 2] = HEAP32[($5 + 48 | 0) >> 2] | 0;
     if (!(HEAPU8[($5 + 218 | 0) >> 0] | 0)) {
      break label$16
     }
     HEAP32[($3 + 108 | 0) >> 2] = $4;
     HEAP8[($4 + 218 | 0) >> 0] = 1;
    }
    ImGui__DockNodeHideHostWindow_28ImGuiDockNode__29($0 | 0);
    HEAP32[($0 + 20 | 0) >> 2] = 1;
    HEAP32[($0 + 152 | 0) >> 2] = 0;
    HEAP16[($0 + 156 | 0) >> 1] = (HEAPU16[($0 + 156 | 0) >> 1] | 0) & 20479 | 0;
    HEAP32[($0 + 136 | 0) >> 2] = HEAP32[($2 + 16016 | 0) >> 2] | 0;
    if (!(((HEAPU8[($0 + 158 | 0) >> 0] | 0) << 16 | 0) & 131072 | 0)) {
     break label$14
    }
    if ((HEAP32[($0 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$14
    }
    $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    $5 = HEAP32[(HEAP32[($0 + 44 | 0) >> 2] | 0) >> 2] | 0;
    ImGui__StartMouseMovingWindow_28ImGuiWindow__29($5 | 0);
    $11 = Math_fround(HEAPF32[($0 + 52 | 0) >> 2]);
    $12 = Math_fround(HEAPF32[($0 + 56 | 0) >> 2]);
    HEAP32[($4 + 16128 | 0) >> 2] = $5;
    HEAPF32[($4 + 16216 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4 + 14004 | 0) >> 2]) - $12);
    HEAPF32[($4 + 16212 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4 + 14e3 | 0) >> 2]) - $11);
    $0 = $0 + 158 | 0;
    HEAP8[$0 >> 0] = (HEAPU8[$0 >> 0] | 0) & 253 | 0;
    break label$14;
   }
   label$20 : {
    $7 = $0 + 156 | 0;
    $5 = HEAPU16[$7 >> 1] | 0 | ((HEAPU8[($7 + 2 | 0) >> 0] | 0) << 16 | 0) | 0;
    if (!($5 & 512 | 0)) {
     break label$20
    }
    if (($4 | 0) != (0 | 0) | (HEAP32[($0 + 112 | 0) >> 2] | 0 | 0) != (0 | 0) | 0) {
     break label$20
    }
    if (HEAP32[($0 + 28 | 0) >> 2] | 0) {
     break label$20
    }
    label$21 : {
     label$22 : {
      $6 = HEAP32[($0 + 148 | 0) >> 2] | 0;
      if (!$6) {
       break label$22
      }
      $8 = HEAP32[($0 + 36 | 0) >> 2] | 0;
      if (($8 | 0) < (1 | 0)) {
       break label$22
      }
      $13 = HEAP32[($0 + 44 | 0) >> 2] | 0;
      $4 = 0;
      label$23 : while (1) {
       $3 = HEAP32[($13 + ($4 << 2 | 0) | 0) >> 2] | 0;
       if ((HEAP32[($3 + 4 | 0) >> 2] | 0 | 0) == ($6 | 0)) {
        break label$21
       }
       $4 = $4 + 1 | 0;
       if (($4 | 0) != ($8 | 0)) {
        continue label$23
       }
       break label$23;
      };
     }
     $3 = HEAP32[(HEAP32[($0 + 44 | 0) >> 2] | 0) >> 2] | 0;
    }
    label$24 : {
     if ((HEAP8[($3 + 248 | 0) >> 0] | 0 | 0) > (0 | 0)) {
      break label$24
     }
     if ((HEAP8[($3 + 249 | 0) >> 0] | 0 | 0) < (1 | 0)) {
      break label$20
     }
    }
    HEAP32[($0 + 20 | 0) >> 2] = 2;
    break label$14;
   }
   $6 = $0 + 158 | 0;
   HEAP8[$6 >> 0] = $5 >>> 16 | 0;
   $4 = 0;
   $3 = HEAP32[($0 + 36 | 0) >> 2] | 0;
   HEAP16[($0 + 156 | 0) >> 1] = (($3 | 0) > (0 | 0) ? !($9 & 16384 | 0) << 13 | 0 : 0) | ($5 & 53247 | 0) | 0;
   label$25 : {
    if (($3 | 0) < (1 | 0)) {
     break label$25
    }
    label$26 : while (1) {
     $5 = HEAP32[((HEAP32[($0 + 44 | 0) >> 2] | 0) + ($4 << 2 | 0) | 0) >> 2] | 0;
     $8 = (HEAPU8[($5 + 229 | 0) >> 0] | 0) << 12 | 0 | (HEAPU16[($0 + 156 | 0) >> 1] | 0 | ((HEAPU8[$6 >> 0] | 0) << 16 | 0) | 0) | 0;
     HEAP16[($0 + 156 | 0) >> 1] = $8;
     HEAP8[$6 >> 0] = $8 >>> 16 | 0;
     HEAP8[($5 + 905 | 0) >> 0] = (HEAPU8[($5 + 905 | 0) >> 0] | 0) & 254 | 0 | ($3 | 0) > (1 | 0) | 0;
     $4 = $4 + 1 | 0;
     $3 = HEAP32[($0 + 36 | 0) >> 2] | 0;
     if (($4 | 0) < ($3 | 0)) {
      continue label$26
     }
     break label$26;
    };
   }
   label$27 : {
    if (!($9 & 32768 | 0)) {
     break label$27
    }
    HEAP16[$7 >> 1] = (HEAPU16[$7 >> 1] | 0) & 61439 | 0;
   }
   label$28 : {
    label$29 : {
     if (!((HEAPU8[($0 + 17 | 0) >> 0] | 0) & 4 | 0)) {
      break label$29
     }
     $8 = HEAP32[($0 + 112 | 0) >> 2] | 0;
     $14 = 0;
     break label$28;
    }
    label$30 : {
     label$31 : {
      label$32 : {
       label$33 : {
        label$34 : {
         $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
         if ($4) {
          break label$34
         }
         $14 = 0;
         label$35 : {
          $4 = HEAPU16[$7 >> 1] | 0 | ((HEAPU8[($7 + 2 | 0) >> 0] | 0) << 16 | 0) | 0;
          if ($4 & 512 | 0) {
           break label$35
          }
          $8 = 0;
          break label$30;
         }
         $5 = 0;
         label$36 : {
          if (($3 | 0) > (0 | 0)) {
           break label$36
          }
          $4 = $4 << 21 | 0;
          $3 = 0;
          break label$33;
         }
         $3 = HEAP32[(HEAP32[($0 + 44 | 0) >> 2] | 0) >> 2] | 0;
         $5 = ($3 | 0) != (0 | 0);
         $4 = $4 << 21 | 0;
         if (($4 & 14680064 | 0 | 0) != (4194304 | 0)) {
          break label$33
         }
         if (!$3) {
          break label$33
         }
         $6 = $3 + 64 | 0;
         $5 = 1;
         break label$32;
        }
        $8 = HEAP32[($4 + 112 | 0) >> 2] | 0;
        HEAP32[($0 + 112 | 0) >> 2] = $8;
        $4 = (HEAPU16[($0 + 156 | 0) >> 1] | 0 | ((HEAPU8[($0 + 158 | 0) >> 0] | 0) << 16 | 0) | 0) & 16776704 | 0;
        HEAP16[($0 + 156 | 0) >> 1] = $4;
        $14 = 0;
        break label$30;
       }
       if (($4 & 16777215 | 0 | 0) != (2097152 | 0)) {
        break label$31
       }
       $6 = $0 + 52 | 0;
      }
      $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      HEAP32[($4 + 18340 | 0) >> 2] = HEAP32[($4 + 18340 | 0) >> 2] | 0 | 1 | 0;
      i64toi32_i32$2 = $6;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $10 = i64toi32_i32$0;
      $10$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $4 + 18368 | 0;
      i64toi32_i32$1 = 0;
      HEAP32[i64toi32_i32$0 >> 2] = 0;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$1 = $10$hi;
      i64toi32_i32$0 = $4 + 18360 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $10;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      HEAP8[($4 + 18400 | 0) >> 0] = 1;
      HEAP32[($4 + 18344 | 0) >> 2] = 1;
     }
     $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     label$37 : {
      label$38 : {
       label$39 : {
        $6 = ((HEAPU16[$7 >> 1] | 0) << 26 | 0) >> 29 | 0;
        if (($6 | 0) != (2 | 0)) {
         break label$39
        }
        if (!$5) {
         break label$39
        }
        $6 = $3 + 80 | 0;
        break label$38;
       }
       if (($6 | 0) != (1 | 0)) {
        break label$37
       }
       $6 = $0 + 60 | 0;
      }
      HEAP32[($4 + 18340 | 0) >> 2] = HEAP32[($4 + 18340 | 0) >> 2] | 0 | 2 | 0;
      i64toi32_i32$2 = $6;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $10 = i64toi32_i32$1;
      $10$hi = i64toi32_i32$0;
      HEAP32[($4 + 18348 | 0) >> 2] = 1;
      i64toi32_i32$1 = $4 + 18376 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $10;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     }
     label$40 : {
      $8 = $7 + 2 | 0;
      $6 = HEAPU16[$7 >> 1] | 0 | ((HEAPU8[$8 >> 0] | 0) << 16 | 0) | 0;
      if ((($6 & 56 | 0 | 0) == (16 | 0) & $5 | 0 | 0) != (1 | 0)) {
       break label$40
      }
      HEAP8[($4 + 18401 | 0) >> 0] = HEAPU8[($3 + 222 | 0) >> 0] | 0;
      HEAP32[($4 + 18352 | 0) >> 2] = 1;
      HEAP32[($4 + 18340 | 0) >> 2] = HEAP32[($4 + 18340 | 0) >> 2] | 0 | 8 | 0;
      $6 = HEAPU16[$7 >> 1] | 0 | ((HEAPU8[$8 >> 0] | 0) << 16 | 0) | 0;
     }
     label$41 : {
      label$42 : {
       if (($6 & 448 | 0 | 0) == (128 | 0) & $5 | 0) {
        break label$42
       }
       $5 = HEAP32[($4 + 18340 | 0) >> 2] | 0;
       break label$41;
      }
      HEAP32[($4 + 18432 | 0) >> 2] = HEAP32[($3 + 48 | 0) >> 2] | 0;
      $5 = HEAP32[($4 + 18340 | 0) >> 2] | 0 | 256 | 0;
     }
     HEAP32[($4 + 18340 | 0) >> 2] = $5 | 1024 | 0;
     i64toi32_i32$2 = $0;
     i64toi32_i32$0 = HEAP32[($0 + 80 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($0 + 84 | 0) >> 2] | 0;
     $607 = i64toi32_i32$0;
     i64toi32_i32$0 = $4 + 18440 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $607;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $0 + 88 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $612 = i64toi32_i32$1;
     i64toi32_i32$1 = $4 + 18448 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $612;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $0 + 96 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $617 = i64toi32_i32$0;
     i64toi32_i32$0 = $4 + 18456 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $617;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     HEAP16[($4 + 18464 | 0) >> 1] = HEAPU16[($0 + 104 | 0) >> 1] | 0;
     HEAP32[($1 + 48 | 0) >> 2] = HEAP32[$0 >> 2] | 0;
     ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($1 + 64 | 0 | 0, 20 | 0, 67524 | 0, $1 + 48 | 0 | 0) | 0;
     $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     HEAP32[($4 + 18428 | 0) >> 2] = 0;
     HEAP32[($4 + 18340 | 0) >> 2] = HEAP32[($4 + 18340 | 0) >> 2] | 0 | 64 | 0;
     i64toi32_i32$0 = $1;
     i64toi32_i32$1 = 0;
     HEAP32[(i64toi32_i32$0 + 208 | 0) >> 2] = 0;
     HEAP32[(i64toi32_i32$0 + 212 | 0) >> 2] = i64toi32_i32$1;
     ImGui__PushStyleVar_28int_2c_20ImVec2_20const__29(2 | 0, i64toi32_i32$0 + 208 | 0 | 0);
     ImGui__Begin_28char_20const__2c_20bool__2c_20int_29(i64toi32_i32$0 + 64 | 0 | 0, 0 | 0, 537399609 | 0) | 0;
     label$43 : {
      $6 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      $4 = HEAP32[($6 + 18488 | 0) >> 2] | 0;
      if (($4 | 0) < (1 | 0)) {
       break label$43
      }
      label$44 : {
       $8 = HEAP32[($6 + 18496 | 0) >> 2] | 0;
       $4 = $4 + -1 | 0;
       $5 = HEAP32[($8 + Math_imul($4, 12) | 0) >> 2] | 0;
       $3 = Math_imul($5, 12);
       if ((HEAP32[($3 + 72304 | 0) >> 2] | 0 | 0) != (8 | 0)) {
        break label$44
       }
       $3 = ($6 + (HEAP32[($3 + 72312 | 0) >> 2] | 0) | 0) + 14396 | 0;
       label$45 : {
        if (!((8206235 >>> $5 | 0) & 1 | 0)) {
         break label$45
        }
        HEAPF32[$3 >> 2] = Math_fround(HEAPF32[(($8 + Math_imul($4, 12) | 0) + 4 | 0) >> 2]);
        break label$44;
       }
       if (!((25348196 >>> $5 | 0) & 1 | 0)) {
        break label$44
       }
       $5 = $8 + Math_imul($4, 12) | 0;
       HEAPF32[$3 >> 2] = Math_fround(HEAPF32[($5 + 4 | 0) >> 2]);
       HEAPF32[($3 + 4 | 0) >> 2] = Math_fround(HEAPF32[($5 + 8 | 0) >> 2]);
      }
      HEAP32[($6 + 18488 | 0) >> 2] = $4;
     }
     $8 = HEAP32[($2 + 16116 | 0) >> 2] | 0;
     label$46 : {
      $4 = HEAP32[($0 + 112 | 0) >> 2] | 0;
      if (!$4) {
       break label$46
      }
      if (($4 | 0) == ($8 | 0)) {
       break label$46
      }
      if ((HEAP32[($4 + 936 | 0) >> 2] | 0 | 0) != ($0 | 0)) {
       break label$46
      }
      HEAP32[($4 + 936 | 0) >> 2] = 0;
     }
     HEAP32[($8 + 936 | 0) >> 2] = $0;
     HEAP32[($0 + 112 | 0) >> 2] = $8;
     i64toi32_i32$2 = $8;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] | 0;
     $10 = i64toi32_i32$1;
     $10$hi = i64toi32_i32$0;
     i64toi32_i32$1 = i64toi32_i32$2;
     HEAP32[(i64toi32_i32$1 + 292 | 0) >> 2] = $10;
     HEAP32[(i64toi32_i32$1 + 296 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $0;
     HEAP32[($0 + 52 | 0) >> 2] = $10;
     HEAP32[($0 + 56 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 72 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 76 | 0) >> 2] | 0;
     $724 = i64toi32_i32$0;
     i64toi32_i32$0 = $0;
     HEAP32[($0 + 60 | 0) >> 2] = $724;
     HEAP32[($0 + 64 | 0) >> 2] = i64toi32_i32$1;
     label$47 : {
      $3 = HEAP32[($0 + 112 | 0) >> 2] | 0;
      if (!(HEAPU8[($3 + 225 | 0) >> 0] | 0)) {
       break label$47
      }
      $14 = HEAP32[($6 + 16044 | 0) >> 2] | 0;
      $13 = HEAP32[($6 + 16052 | 0) >> 2] | 0;
      $4 = HEAP32[((($14 << 2 | 0) + $13 | 0) + -4 | 0) >> 2] | 0;
      if (($4 | 0) == ($3 | 0)) {
       break label$47
      }
      if ((HEAP32[($4 + 836 | 0) >> 2] | 0 | 0) == ($3 | 0)) {
       break label$47
      }
      if (($14 | 0) < (2 | 0)) {
       break label$47
      }
      $4 = $14 + -2 | 0;
      label$48 : while (1) {
       label$49 : {
        $5 = $13 + ($4 << 2 | 0) | 0;
        if ((HEAP32[$5 >> 2] | 0 | 0) != ($3 | 0)) {
         break label$49
        }
        memmove($5 | 0, (($4 << 2 | 0) + $13 | 0) + 4 | 0 | 0, ($14 + ($4 ^ -1 | 0) | 0) << 2 | 0 | 0) | 0;
        HEAP32[((((HEAP32[($6 + 16044 | 0) >> 2] | 0) << 2 | 0) + (HEAP32[($6 + 16052 | 0) >> 2] | 0) | 0) + -4 | 0) >> 2] = $3;
        break label$47;
       }
       $5 = ($4 | 0) > (0 | 0);
       $4 = $4 + -1 | 0;
       if ($5) {
        continue label$48
       }
       break label$48;
      };
     }
     $4 = (HEAPU16[$7 >> 1] | 0 | ((HEAPU8[($7 + 2 | 0) >> 0] | 0) << 16 | 0) | 0) & 16776704 | 0;
     HEAP16[$7 >> 1] = $4;
     $14 = 1;
    }
    if (!($4 & 131072 | 0)) {
     break label$28
    }
    $5 = HEAP32[($0 + 112 | 0) >> 2] | 0;
    if (!$5) {
     break label$28
    }
    $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    ImGui__StartMouseMovingWindow_28ImGuiWindow__29($5 | 0);
    $11 = Math_fround(HEAPF32[($0 + 52 | 0) >> 2]);
    $12 = Math_fround(HEAPF32[($0 + 56 | 0) >> 2]);
    HEAP32[($4 + 16128 | 0) >> 2] = $5;
    HEAPF32[($4 + 16216 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4 + 14004 | 0) >> 2]) - $12);
    HEAPF32[($4 + 16212 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4 + 14e3 | 0) >> 2]) - $11);
    $4 = $0 + 158 | 0;
    HEAP8[$4 >> 0] = (HEAPU8[$4 >> 0] | 0) & 253 | 0;
   }
   label$50 : {
    label$51 : {
     label$52 : {
      label$53 : {
       label$54 : {
        label$55 : {
         label$56 : {
          label$57 : {
           label$58 : {
            label$59 : {
             if (!(HEAP32[($0 + 24 | 0) >> 2] | 0)) {
              break label$59
             }
             $5 = 0;
             $4 = ($8 | 0) != (0 | 0);
             $3 = HEAP32[($0 + 120 | 0) >> 2] | 0;
             break label$58;
            }
            label$60 : {
             $4 = HEAP32[($2 + 18648 | 0) >> 2] | 0;
             if (!$4) {
              break label$60
             }
             $4 = HEAP32[($4 + 828 | 0) >> 2] | 0;
             if (!$4) {
              break label$60
             }
             label$61 : while (1) {
              $3 = HEAP32[($4 + 932 | 0) >> 2] | 0;
              $4 = $3;
              if (!$4) {
               break label$60
              }
              label$62 : while (1) {
               $5 = $4;
               $4 = HEAP32[($5 + 24 | 0) >> 2] | 0;
               if ($4) {
                continue label$62
               }
               break label$62;
              };
              label$63 : {
               if (($5 | 0) != ($0 | 0)) {
                break label$63
               }
               HEAP32[($0 + 144 | 0) >> 2] = HEAP32[$3 >> 2] | 0;
               break label$60;
              }
              $4 = HEAP32[($5 + 112 | 0) >> 2] | 0;
              if (!$4) {
               break label$60
              }
              $4 = HEAP32[($4 + 828 | 0) >> 2] | 0;
              if ($4) {
               continue label$61
              }
              break label$61;
             };
            }
            if (!$8) {
             break label$57
            }
            $3 = HEAP32[($0 + 120 | 0) >> 2] | 0;
            $5 = 0;
            $4 = 1;
            if (!($9 & 8 | 0)) {
             break label$58
            }
            if (!$3) {
             break label$58
            }
            if (HEAP32[($3 + 28 | 0) >> 2] | 0) {
             break label$58
            }
            if (HEAP32[($3 + 36 | 0) >> 2] | 0) {
             break label$58
            }
            label$64 : {
             label$65 : {
              $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
              if (!(HEAPU8[($5 + 19040 | 0) >> 0] | 0)) {
               break label$65
              }
              if ((HEAP32[($5 + 19072 | 0) >> 2] | 0 | 0) == (-1 | 0)) {
               break label$65
              }
              if (strcmp(67565 | 0, $5 + 19076 | 0 | 0) | 0) {
               break label$65
              }
              $4 = 1;
              if (ImGui__DockNodeIsDropAllowed_28ImGuiWindow__2c_20ImGuiWindow__29($8 | 0, HEAP32[(HEAP32[($5 + 19056 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0) {
               break label$64
              }
             }
             $4 = $3;
             label$66 : while (1) {
              $5 = $4;
              $4 = HEAP32[($5 + 24 | 0) >> 2] | 0;
              if ($4) {
               continue label$66
              }
              break label$66;
             };
             $4 = 1;
             $11 = Math_fround(HEAPF32[($3 + 52 | 0) >> 2]);
             $15 = Math_fround(HEAPF32[($5 + 52 | 0) >> 2]);
             $12 = $11 > $15 ? Math_fround($11 + Math_fround(4.0)) : $11;
             $11 = Math_fround($11 + Math_fround(HEAPF32[($3 + 60 | 0) >> 2]));
             $16 = $11 < Math_fround($15 + Math_fround(HEAPF32[($5 + 60 | 0) >> 2])) ? Math_fround($11 + Math_fround(-4.0)) : $11;
             if ($12 > $16) {
              break label$64
             }
             $11 = Math_fround(HEAPF32[($3 + 56 | 0) >> 2]);
             $17 = Math_fround(HEAPF32[($5 + 56 | 0) >> 2]);
             $15 = $11 > $17 ? Math_fround($11 + Math_fround(4.0)) : $11;
             $11 = Math_fround($11 + Math_fround(HEAPF32[($3 + 64 | 0) >> 2]));
             $11 = $11 < Math_fround($17 + Math_fround(HEAPF32[($5 + 64 | 0) >> 2])) ? Math_fround($11 + Math_fround(-4.0)) : $11;
             if ($15 > $11) {
              break label$64
             }
             label$67 : {
              label$68 : {
               $16 = Math_fround($16 - $12);
               if (!(Math_fround(Math_abs($16)) < Math_fround(2147483648.0))) {
                break label$68
               }
               $5 = ~~$16;
               break label$67;
              }
              $5 = -2147483648;
             }
             $5 = $5 & 65535 | 0;
             label$69 : {
              label$70 : {
               $11 = Math_fround($11 - $15);
               if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
                break label$70
               }
               $6 = ~~$11;
               break label$69;
              }
              $6 = -2147483648;
             }
             $13 = $6 << 16 | 0 | $5 | 0;
             HEAP32[($8 + 612 | 0) >> 2] = $13;
             label$71 : {
              label$72 : {
               $11 = Math_fround($12 - Math_fround(HEAPF32[($8 + 64 | 0) >> 2]));
               if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
                break label$72
               }
               $5 = ~~$11;
               break label$71;
              }
              $5 = -2147483648;
             }
             $5 = $5 & 65535 | 0;
             label$73 : {
              label$74 : {
               $11 = Math_fround($15 - Math_fround(HEAPF32[($8 + 68 | 0) >> 2]));
               if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
                break label$74
               }
               $6 = ~~$11;
               break label$73;
              }
              $6 = -2147483648;
             }
             HEAP32[($8 + 616 | 0) >> 2] = $6 << 16 | 0 | $5 | 0;
             $5 = HEAP32[($8 + 820 | 0) >> 2] | 0;
             if (!$5) {
              break label$64
             }
             HEAP32[($5 + 612 | 0) >> 2] = $13;
             label$75 : {
              label$76 : {
               $11 = Math_fround($12 - Math_fround(HEAPF32[($5 + 64 | 0) >> 2]));
               if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
                break label$76
               }
               $6 = ~~$11;
               break label$75;
              }
              $6 = -2147483648;
             }
             $6 = $6 & 65535 | 0;
             label$77 : {
              label$78 : {
               $11 = Math_fround($15 - Math_fround(HEAPF32[($5 + 68 | 0) >> 2]));
               if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
                break label$78
               }
               $13 = ~~$11;
               break label$77;
              }
              $13 = -2147483648;
             }
             HEAP32[($5 + 616 | 0) >> 2] = $13 << 16 | 0 | $6 | 0;
            }
            $5 = 1;
           }
           label$79 : {
            if (HEAP32[($0 + 24 | 0) >> 2] | 0) {
             break label$79
            }
            if (!$4) {
             break label$79
            }
            i64toi32_i32$2 = $8;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] | 0;
            $10 = i64toi32_i32$1;
            $10$hi = i64toi32_i32$0;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 72 | 0) >> 2] | 0;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 76 | 0) >> 2] | 0;
            $18 = i64toi32_i32$0;
            i64toi32_i32$0 = $1;
            HEAP32[(i64toi32_i32$0 + 40 | 0) >> 2] = $18;
            HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] = i64toi32_i32$1;
            HEAP32[(i64toi32_i32$0 + 56 | 0) >> 2] = $18;
            HEAP32[(i64toi32_i32$0 + 60 | 0) >> 2] = i64toi32_i32$1;
            i64toi32_i32$1 = $10$hi;
            ImGui__DockNodeTreeUpdatePosSize_28ImGuiDockNode__2c_20ImVec2_2c_20ImVec2_2c_20ImGuiDockNode__29($0 | 0, $10 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 + 40 | 0 | 0, 0 | 0);
            ImGui__DockNodeTreeUpdateSplitter_28ImGuiDockNode__29($0 | 0);
           }
           if ($4) {
            break label$56
           }
          }
          $6 = HEAPU16[$7 >> 1] | 0 | ((HEAPU8[($7 + 2 | 0) >> 0] | 0) << 16 | 0) | 0;
          $4 = 0;
          break label$55;
         }
         label$80 : {
          if (HEAP32[($0 + 28 | 0) >> 2] | 0) {
           break label$80
          }
          if (HEAP32[($0 + 36 | 0) >> 2] | 0) {
           break label$80
          }
          if (!((HEAPU16[$7 >> 1] | 0) & 512 | 0)) {
           break label$80
          }
          $4 = HEAP32[($8 + 672 | 0) >> 2] | 0;
          ImDrawListSplitter__SetCurrentChannel_28ImDrawList__2c_20int_29($4 + 120 | 0 | 0, $4 | 0, 0 | 0);
          label$81 : {
           label$82 : {
            if (!($9 & 8 | 0)) {
             break label$82
            }
            HEAP32[($0 + 108 | 0) >> 2] = 0;
            break label$81;
           }
           label$83 : {
            label$84 : {
             $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
             $11 = Math_fround(HEAPF32[($4 + 15224 | 0) >> 2]);
             $11 = Math_fround(Math_fround(($11 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($11, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
             if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
              break label$84
             }
             $6 = ~~$11;
             break label$83;
            }
            $6 = -2147483648;
           }
           $6 = $6 << 8 | 0;
           label$85 : {
            label$86 : {
             $11 = Math_fround(HEAPF32[($4 + 15220 | 0) >> 2]);
             $11 = Math_fround(Math_fround(($11 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($11, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
             if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
              break label$86
             }
             $13 = ~~$11;
             break label$85;
            }
            $13 = -2147483648;
           }
           $6 = $6 | $13 | 0;
           label$87 : {
            label$88 : {
             $11 = Math_fround(HEAPF32[($4 + 15228 | 0) >> 2]);
             $11 = Math_fround(Math_fround(($11 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($11, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
             if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
              break label$88
             }
             $13 = ~~$11;
             break label$87;
            }
            $13 = -2147483648;
           }
           $6 = $6 | ($13 << 16 | 0) | 0;
           label$89 : {
            label$90 : {
             $11 = Math_fround(Math_fround(HEAPF32[($4 + 15232 | 0) >> 2]) * Math_fround(HEAPF32[($4 + 14396 | 0) >> 2]));
             $11 = Math_fround(Math_fround(($11 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($11, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
             if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
              break label$90
             }
             $4 = ~~$11;
             break label$89;
            }
            $4 = -2147483648;
           }
           $4 = $6 | ($4 << 24 | 0) | 0;
           HEAP32[($0 + 108 | 0) >> 2] = $4;
           if (!$4) {
            break label$81
           }
           $6 = HEAP32[($8 + 672 | 0) >> 2] | 0;
           $11 = Math_fround(HEAPF32[($0 + 60 | 0) >> 2]);
           $13 = $0 + 52 | 0;
           $12 = Math_fround(HEAPF32[$13 >> 2]);
           HEAPF32[($1 + 68 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($0 + 56 | 0) >> 2]) + Math_fround(HEAPF32[($0 + 64 | 0) >> 2]));
           HEAPF32[($1 + 64 | 0) >> 2] = Math_fround($12 + $11);
           ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29($6 | 0, $13 | 0, $1 + 64 | 0 | 0, $4 | 0, Math_fround(Math_fround(0.0)), 0 | 0);
          }
          HEAP16[$7 >> 1] = HEAPU16[$7 >> 1] | 0 | 2048 | 0;
         }
         label$91 : {
          if (HEAP32[($0 + 24 | 0) >> 2] | 0) {
           break label$91
          }
          if (!($9 & 8 | 0)) {
           break label$91
          }
          if (!((HEAPU16[$7 >> 1] | 0) & 512 | 0)) {
           break label$91
          }
          $4 = HEAP32[($8 + 672 | 0) >> 2] | 0;
          ImDrawListSplitter__SetCurrentChannel_28ImDrawList__2c_20int_29($4 + 120 | 0 | 0, $4 | 0, 0 | 0);
          $6 = HEAP32[($8 + 672 | 0) >> 2] | 0;
          label$92 : {
           if (!$5) {
            break label$92
           }
           $12 = Math_fround(HEAPF32[($0 + 60 | 0) >> 2]);
           $11 = Math_fround(HEAPF32[($0 + 52 | 0) >> 2]);
           $15 = Math_fround(HEAPF32[($0 + 56 | 0) >> 2]);
           HEAPF32[(($1 + 64 | 0) + 12 | 0) >> 2] = Math_fround($15 + Math_fround(HEAPF32[($0 + 64 | 0) >> 2]));
           HEAPF32[($1 + 72 | 0) >> 2] = Math_fround($11 + $12);
           HEAPF32[($1 + 68 | 0) >> 2] = $15;
           HEAPF32[($1 + 64 | 0) >> 2] = $11;
           $12 = Math_fround(HEAPF32[($3 + 60 | 0) >> 2]);
           $11 = Math_fround(HEAPF32[($3 + 52 | 0) >> 2]);
           $15 = Math_fround(HEAPF32[($3 + 56 | 0) >> 2]);
           HEAPF32[(($1 + 208 | 0) + 12 | 0) >> 2] = Math_fround($15 + Math_fround(HEAPF32[($3 + 64 | 0) >> 2]));
           HEAPF32[($1 + 212 | 0) >> 2] = $15;
           HEAPF32[($1 + 208 | 0) >> 2] = $11;
           HEAPF32[($1 + 216 | 0) >> 2] = Math_fround($11 + $12);
           label$93 : {
            label$94 : {
             $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
             $11 = Math_fround(HEAPF32[($4 + 14632 | 0) >> 2]);
             $11 = Math_fround(Math_fround(($11 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($11, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
             if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
              break label$94
             }
             $5 = ~~$11;
             break label$93;
            }
            $5 = -2147483648;
           }
           $5 = $5 << 8 | 0;
           label$95 : {
            label$96 : {
             $11 = Math_fround(HEAPF32[($4 + 14628 | 0) >> 2]);
             $11 = Math_fround(Math_fround(($11 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($11, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
             if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
              break label$96
             }
             $3 = ~~$11;
             break label$95;
            }
            $3 = -2147483648;
           }
           $5 = $5 | $3 | 0;
           label$97 : {
            label$98 : {
             $11 = Math_fround(HEAPF32[($4 + 14636 | 0) >> 2]);
             $11 = Math_fround(Math_fround(($11 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($11, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
             if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
              break label$98
             }
             $3 = ~~$11;
             break label$97;
            }
            $3 = -2147483648;
           }
           $5 = $5 | ($3 << 16 | 0) | 0;
           label$99 : {
            label$100 : {
             $11 = Math_fround(Math_fround(HEAPF32[($4 + 14640 | 0) >> 2]) * Math_fround(HEAPF32[($4 + 14396 | 0) >> 2]));
             $11 = Math_fround(Math_fround(($11 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($11, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
             if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
              break label$100
             }
             $4 = ~~$11;
             break label$99;
            }
            $4 = -2147483648;
           }
           ImGui__RenderRectFilledWithHole_28ImDrawList__2c_20ImRect_20const__2c_20ImRect_20const__2c_20unsigned_20int_2c_20float_29($6 | 0, $1 + 64 | 0 | 0, $1 + 208 | 0 | 0, $5 | ($4 << 24 | 0) | 0 | 0, Math_fround(Math_fround(0.0)));
           break label$91;
          }
          $11 = Math_fround(HEAPF32[($0 + 60 | 0) >> 2]);
          $12 = Math_fround(HEAPF32[($0 + 52 | 0) >> 2]);
          HEAPF32[($1 + 68 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($0 + 56 | 0) >> 2]) + Math_fround(HEAPF32[($0 + 64 | 0) >> 2]));
          HEAPF32[($1 + 64 | 0) >> 2] = Math_fround($12 + $11);
          label$101 : {
           label$102 : {
            $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
            $11 = Math_fround(HEAPF32[($4 + 14632 | 0) >> 2]);
            $11 = Math_fround(Math_fround(($11 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($11, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
            if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
             break label$102
            }
            $5 = ~~$11;
            break label$101;
           }
           $5 = -2147483648;
          }
          $5 = $5 << 8 | 0;
          label$103 : {
           label$104 : {
            $11 = Math_fround(HEAPF32[($4 + 14628 | 0) >> 2]);
            $11 = Math_fround(Math_fround(($11 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($11, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
            if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
             break label$104
            }
            $3 = ~~$11;
            break label$103;
           }
           $3 = -2147483648;
          }
          $5 = $5 | $3 | 0;
          label$105 : {
           label$106 : {
            $11 = Math_fround(HEAPF32[($4 + 14636 | 0) >> 2]);
            $11 = Math_fround(Math_fround(($11 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($11, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
            if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
             break label$106
            }
            $3 = ~~$11;
            break label$105;
           }
           $3 = -2147483648;
          }
          $5 = $5 | ($3 << 16 | 0) | 0;
          label$107 : {
           label$108 : {
            $11 = Math_fround(Math_fround(HEAPF32[($4 + 14640 | 0) >> 2]) * Math_fround(HEAPF32[($4 + 14396 | 0) >> 2]));
            $11 = Math_fround(Math_fround(($11 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($11, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
            if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
             break label$108
            }
            $4 = ~~$11;
            break label$107;
           }
           $4 = -2147483648;
          }
          ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29($6 | 0, $0 + 52 | 0 | 0, $1 + 64 | 0 | 0, $5 | ($4 << 24 | 0) | 0 | 0, Math_fround(Math_fround(0.0)), 0 | 0);
         }
         $4 = 1;
         $5 = HEAP32[($8 + 672 | 0) >> 2] | 0;
         ImDrawListSplitter__SetCurrentChannel_28ImDrawList__2c_20int_29($5 + 120 | 0 | 0, $5 | 0, 1 | 0);
         $5 = $0 + 158 | 0;
         $6 = HEAPU16[($0 + 156 | 0) >> 1] | 0 | ((HEAPU8[$5 >> 0] | 0) << 16 | 0) | 0;
         if ((HEAP32[($0 + 36 | 0) >> 2] | 0 | 0) < (1 | 0)) {
          break label$55
         }
         $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
         $19 = HEAP32[($4 + 16016 | 0) >> 2] | 0;
         HEAP8[$5 >> 0] = $6 >>> 16 | 0;
         HEAP16[($0 + 156 | 0) >> 1] = $6 & 32767 | 0;
         $20 = HEAP32[($0 + 152 | 0) >> 2] | 0;
         HEAP32[($0 + 152 | 0) >> 2] = 0;
         $21 = $6 & 32768 | 0;
         $22 = HEAP32[($0 + 136 | 0) >> 2] | 0;
         $5 = $0;
         label$109 : while (1) {
          $3 = $5;
          $5 = HEAP32[($5 + 24 | 0) >> 2] | 0;
          if ($5) {
           continue label$109
          }
          break label$109;
         };
         label$110 : {
          label$111 : {
           $5 = HEAP32[($4 + 18992 | 0) >> 2] | 0;
           if (!$5) {
            break label$111
           }
           $23 = (HEAP32[($5 + 932 | 0) >> 2] | 0 | 0) == ($0 | 0);
           break label$110;
          }
          $23 = 0;
          $5 = HEAP32[($4 + 18648 | 0) >> 2] | 0;
          if (!$5) {
           break label$110
          }
          $23 = 0;
          if ((HEAP32[($3 + 144 | 0) >> 2] | 0 | 0) != (HEAP32[$0 >> 2] | 0 | 0)) {
           break label$110
          }
          label$112 : {
           $9 = HEAP32[($5 + 828 | 0) >> 2] | 0;
           if (!((HEAPU8[($9 + 11 | 0) >> 0] | 0) & 16 | 0)) {
            break label$112
           }
           label$113 : while (1) {
            $9 = HEAP32[((HEAP32[($9 + 820 | 0) >> 2] | 0) + 828 | 0) >> 2] | 0;
            if ((HEAPU8[($9 + 11 | 0) >> 0] | 0) & 16 | 0) {
             continue label$113
            }
            break label$113;
           };
          }
          label$114 : {
           $5 = HEAP32[($9 + 936 | 0) >> 2] | 0;
           if ($5) {
            break label$114
           }
           $23 = 0;
           $5 = HEAP32[($9 + 932 | 0) >> 2] | 0;
           if (!$5) {
            break label$110
           }
          }
          label$115 : while (1) {
           $9 = $5;
           $5 = HEAP32[($5 + 24 | 0) >> 2] | 0;
           if ($5) {
            continue label$115
           }
           $23 = ($9 | 0) == ($3 | 0);
           if ($23) {
            break label$110
           }
           $5 = HEAP32[($9 + 112 | 0) >> 2] | 0;
           if (!$5) {
            break label$110
           }
           $5 = HEAP32[((HEAP32[($5 + 828 | 0) >> 2] | 0) + 932 | 0) >> 2] | 0;
           if ($5) {
            continue label$115
           }
           break label$115;
          };
         }
         label$116 : {
          label$117 : {
           $5 = HEAP32[($0 + 16 | 0) >> 2] | 0;
           if (!($5 & 12288 | 0)) {
            break label$117
           }
           $5 = HEAP32[(HEAP32[($0 + 44 | 0) >> 2] | 0) >> 2] | 0;
           HEAP8[($0 + 158 | 0) >> 0] = $6 >>> 16 | 0;
           HEAP16[($0 + 156 | 0) >> 1] = ($23 ? 1024 : 0) | ($6 & 31743 | 0) | 0;
           HEAP32[($0 + 116 | 0) >> 2] = $5;
           label$118 : {
            label$119 : {
             label$120 : {
              if (!$23) {
               break label$120
              }
              HEAP32[($0 + 140 | 0) >> 2] = HEAP32[($4 + 16016 | 0) >> 2] | 0;
              if ($5) {
               break label$119
              }
              break label$116;
             }
             if (!$5) {
              break label$116
             }
             if (HEAP32[($3 + 116 | 0) >> 2] | 0) {
              break label$118
             }
            }
            HEAP32[($3 + 116 | 0) >> 2] = $5;
           }
           label$121 : {
            $4 = HEAP32[($0 + 48 | 0) >> 2] | 0;
            if ($4) {
             break label$121
            }
            $4 = 1;
            break label$53;
           }
           HEAP32[($4 + 28 | 0) >> 2] = HEAP32[((HEAP32[($0 + 116 | 0) >> 2] | 0) + 160 | 0) >> 2] | 0;
           break label$116;
          }
          $24 = HEAPU8[($8 + 224 | 0) >> 0] | 0;
          label$122 : {
           if ($5 & 1024 | 0) {
            break label$122
           }
           HEAP8[($8 + 224 | 0) >> 0] = 0;
           HEAP32[($8 + 380 | 0) >> 2] = 1;
          }
          ImGui__PushOverrideID_28unsigned_20int_29(HEAP32[$0 >> 2] | 0 | 0);
          $25 = HEAP32[($0 + 48 | 0) >> 2] | 0;
          $6 = $25;
          label$123 : {
           if ($6) {
            break label$123
           }
           label$124 : {
            $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
            if (!$5) {
             break label$124
            }
            $5 = $5 + 184 | 0;
            HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1 | 0;
           }
           $6 = ImGuiTabBar__ImGuiTabBar_28_29(FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](144, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0 | 0) | 0;
           HEAP32[($0 + 48 | 0) >> 2] = $6;
          }
          HEAP16[($0 + 156 | 0) >> 1] = (HEAPU16[($0 + 156 | 0) >> 1] | 0) & 64511 | 0 | ($23 ? 1024 : 0) | 0;
          label$125 : {
           label$126 : {
            label$127 : {
             if ((HEAPU8[($0 + 17 | 0) >> 0] | 0) & 64 | 0) {
              break label$127
             }
             if ((HEAP32[($4 + 14436 | 0) >> 2] | 0 | 0) != (-1 | 0)) {
              break label$126
             }
            }
            $13 = 0;
            $26 = 0;
            break label$125;
           }
           $26 = 0;
           label$128 : {
            $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
            $9 = HEAP32[($5 + 16116 | 0) >> 2] | 0;
            $9 = HEAP32[((((HEAP32[($9 + 280 | 0) >> 2] | 0) << 2 | 0) + (HEAP32[($9 + 288 | 0) >> 2] | 0) | 0) + -4 | 0) >> 2] | 0;
            $9 = (($9 ^ -1 | 0) >>> 8 | 0) ^ (HEAP32[(((($9 & 255 | 0) ^ 220 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
            $9 = ($9 >>> 8 | 0) ^ (HEAP32[(((($9 & 255 | 0) ^ 87 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
            $9 = ($9 >>> 8 | 0) ^ (HEAP32[(((($9 & 255 | 0) ^ 105 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
            $9 = ($9 >>> 8 | 0) ^ (HEAP32[(((($9 & 255 | 0) ^ 110 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
            $9 = ($9 >>> 8 | 0) ^ (HEAP32[(((($9 & 255 | 0) ^ 100 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
            $9 = ($9 >>> 8 | 0) ^ (HEAP32[(((($9 & 255 | 0) ^ 111 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
            $9 = ($9 >>> 8 | 0) ^ (HEAP32[(((($9 & 255 | 0) ^ 119 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
            $9 = ($9 >>> 8 | 0) ^ (HEAP32[(((($9 & 255 | 0) ^ 77 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
            $9 = ($9 >>> 8 | 0) ^ (HEAP32[(((($9 & 255 | 0) ^ 101 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
            $9 = ($9 >>> 8 | 0) ^ (HEAP32[(((($9 & 255 | 0) ^ 110 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
            $9 = ((HEAP32[(((($9 & 255 | 0) ^ 117 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) ^ ($9 >>> 8 | 0) | 0) ^ -1 | 0;
            if ((HEAP32[($5 + 16168 | 0) >> 2] | 0 | 0) != ($9 | 0)) {
             break label$128
            }
            ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($9 | 0, 11 | 0, 65678 | 0, 0 | 0);
            $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
           }
           $13 = 1;
           $27 = HEAP32[($5 + 18560 | 0) >> 2] | 0;
           if ((HEAP32[($5 + 18548 | 0) >> 2] | 0 | 0) <= ($27 | 0)) {
            break label$125
           }
           if ((HEAP32[((HEAP32[($5 + 18556 | 0) >> 2] | 0) + Math_imul($27, 40) | 0) >> 2] | 0 | 0) != ($9 | 0)) {
            break label$125
           }
           label$129 : {
            label$130 : {
             if (HEAP32[($5 + 14436 | 0) >> 2] | 0) {
              break label$130
             }
             $11 = Math_fround(HEAPF32[($0 + 56 | 0) >> 2]);
             HEAP32[($5 + 18360 | 0) >> 2] = HEAP32[($0 + 52 | 0) >> 2] | 0;
             HEAP32[($5 + 18340 | 0) >> 2] = HEAP32[($5 + 18340 | 0) >> 2] | 0 | 1 | 0;
             $12 = Math_fround(HEAPF32[($5 + 14460 | 0) >> 2]);
             $11 = Math_fround($11 + Math_fround(Math_fround($12 + $12) + Math_fround(HEAPF32[($5 + 15488 | 0) >> 2])));
             $9 = 0;
             break label$129;
            }
            $11 = Math_fround(HEAPF32[($0 + 56 | 0) >> 2]);
            HEAPF32[($5 + 18360 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($0 + 52 | 0) >> 2]) + Math_fround(HEAPF32[($0 + 60 | 0) >> 2]));
            HEAP32[($5 + 18340 | 0) >> 2] = HEAP32[($5 + 18340 | 0) >> 2] | 0 | 1 | 0;
            $12 = Math_fround(HEAPF32[($5 + 14460 | 0) >> 2]);
            $11 = Math_fround($11 + Math_fround(Math_fround($12 + $12) + Math_fround(HEAPF32[($5 + 15488 | 0) >> 2])));
            $9 = 1065353216;
           }
           $26 = 0;
           HEAP32[($5 + 18372 | 0) >> 2] = 0;
           HEAP32[($5 + 18368 | 0) >> 2] = $9;
           HEAPF32[($5 + 18364 | 0) >> 2] = $11;
           HEAP8[($5 + 18400 | 0) >> 0] = 1;
           HEAP32[($5 + 18344 | 0) >> 2] = 1;
           label$131 : {
            $1837 = HEAP32[($5 + 16168 | 0) >> 2] | 0;
            $5 = HEAP32[($5 + 16116 | 0) >> 2] | 0;
            $5 = HEAP32[((((HEAP32[($5 + 280 | 0) >> 2] | 0) << 2 | 0) + (HEAP32[($5 + 288 | 0) >> 2] | 0) | 0) + -4 | 0) >> 2] | 0;
            $5 = (($5 ^ -1 | 0) >>> 8 | 0) ^ (HEAP32[(((($5 & 255 | 0) ^ 220 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
            $5 = ($5 >>> 8 | 0) ^ (HEAP32[(((($5 & 255 | 0) ^ 87 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
            $5 = ($5 >>> 8 | 0) ^ (HEAP32[(((($5 & 255 | 0) ^ 105 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
            $5 = ($5 >>> 8 | 0) ^ (HEAP32[(((($5 & 255 | 0) ^ 110 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
            $5 = ($5 >>> 8 | 0) ^ (HEAP32[(((($5 & 255 | 0) ^ 100 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
            $5 = ($5 >>> 8 | 0) ^ (HEAP32[(((($5 & 255 | 0) ^ 111 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
            $5 = ($5 >>> 8 | 0) ^ (HEAP32[(((($5 & 255 | 0) ^ 119 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
            $5 = ($5 >>> 8 | 0) ^ (HEAP32[(((($5 & 255 | 0) ^ 77 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
            $5 = ($5 >>> 8 | 0) ^ (HEAP32[(((($5 & 255 | 0) ^ 101 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
            $5 = ($5 >>> 8 | 0) ^ (HEAP32[(((($5 & 255 | 0) ^ 110 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
            $5 = ((HEAP32[(((($5 & 255 | 0) ^ 117 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) ^ ($5 >>> 8 | 0) | 0) ^ -1 | 0;
            if (($1837 | 0) != ($5 | 0)) {
             break label$131
            }
            ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($5 | 0, 11 | 0, 65678 | 0, 0 | 0);
           }
           label$132 : {
            if (!(ImGui__BeginPopupEx_28unsigned_20int_2c_20int_29($5 | 0, 321 | 0) | 0)) {
             break label$132
            }
            HEAP16[$7 >> 1] = HEAPU16[$7 >> 1] | 0 | 1024 | 0;
            label$133 : {
             label$134 : {
              label$135 : {
               $13 = HEAP32[$6 >> 2] | 0;
               if (($13 | 0) == (1 | 0)) {
                break label$135
               }
               if (($13 | 0) >= (1 | 0)) {
                break label$134
               }
               $27 = 0;
               break label$133;
              }
              $27 = 0;
              $5 = HEAP32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 23480 | 0) >> 2] | 0;
              if (!(ImGui__MenuItem_28char_20const__2c_20char_20const__2c_20bool_2c_20bool_29(($5 ? $5 : 68076) | 0, 0 | 0, ((HEAP32[($0 + 16 | 0) >> 2] | 0) & 8192 | 0) >>> 13 | 0 | 0, 1 | 0) | 0)) {
               break label$133
              }
              $5 = $7 + 2 | 0;
              HEAP8[$5 >> 0] = HEAPU8[$5 >> 0] | 0 | 8 | 0;
              break label$133;
             }
             $27 = 0;
             $5 = 0;
             label$136 : while (1) {
              label$137 : {
               $9 = (HEAP32[($6 + 8 | 0) >> 2] | 0) + Math_imul($5, 48) | 0;
               if ((HEAPU8[($9 + 6 | 0) >> 0] | 0) & 32 | 0) {
                break label$137
               }
               $13 = ImGui__TabBarGetTabName_28ImGuiTabBar__2c_20ImGuiTabItem__29($6 | 0, $9 | 0) | 0;
               $28 = HEAP32[$9 >> 2] | 0;
               $29 = HEAP32[($6 + 20 | 0) >> 2] | 0;
               i64toi32_i32$0 = $1;
               i64toi32_i32$1 = 0;
               HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] = 0;
               HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] = i64toi32_i32$1;
               $13 = ImGui__Selectable_28char_20const__2c_20bool_2c_20int_2c_20ImVec2_20const__29($13 | 0, ($28 | 0) == ($29 | 0) | 0, 0 | 0, i64toi32_i32$0 + 64 | 0 | 0) | 0;
               $28 = HEAP32[$9 >> 2] | 0;
               label$138 : {
                $29 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
                $9 = HEAP32[($29 + 16116 | 0) >> 2] | 0;
                if (HEAPU8[($9 + 224 | 0) >> 0] | 0) {
                 break label$138
                }
                $11 = Math_fround(HEAPF32[($29 + 14472 | 0) >> 2]);
                HEAPF32[($9 + 296 | 0) >> 2] = Math_fround(HEAPF32[($9 + 304 | 0) >> 2]);
                i64toi32_i32$2 = $9 + 340 | 0;
                i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                $2027 = i64toi32_i32$1;
                i64toi32_i32$1 = $9 + 332 | 0;
                HEAP32[i64toi32_i32$1 >> 2] = $2027;
                HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                HEAP8[($9 + 356 | 0) >> 0] = 1;
                HEAPF32[($9 + 348 | 0) >> 2] = Math_fround(HEAPF32[($9 + 352 | 0) >> 2]);
                HEAPF32[($9 + 292 | 0) >> 2] = Math_fround($11 + Math_fround(HEAPF32[($9 + 300 | 0) >> 2]));
               }
               $27 = $13 ? $28 : $27;
               ImGui__Text_28char_20const__2c_20____29(68240 | 0, 0 | 0);
               $13 = HEAP32[$6 >> 2] | 0;
              }
              $5 = $5 + 1 | 0;
              if (($5 | 0) < ($13 | 0)) {
               continue label$136
              }
              break label$136;
             };
            }
            label$139 : {
             $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
             $9 = HEAP32[($5 + 16116 | 0) >> 2] | 0;
             if ((HEAP32[($5 + 18648 | 0) >> 2] | 0 | 0) != ($9 | 0)) {
              break label$139
             }
             if (!(HEAPU8[($5 + 18737 | 0) >> 0] | 0)) {
              break label$139
             }
             if (HEAP32[($5 + 18704 | 0) >> 2] | 0) {
              break label$139
             }
             HEAP32[($5 + 18740 | 0) >> 2] = HEAP32[($5 + 18740 | 0) >> 2] | 0 | 2 | 0;
            }
            label$140 : {
             if (!((HEAPU8[($9 + 11 | 0) >> 0] | 0) & 1 | 0)) {
              break label$140
             }
             HEAP8[($5 + 16034 | 0) >> 0] = 1;
            }
            ImGui__End_28_29();
            $26 = 0;
            HEAP8[($5 + 16034 | 0) >> 0] = 0;
            if (!$27) {
             break label$132
            }
            HEAP32[($6 + 24 | 0) >> 2] = $27;
            $26 = $27;
           }
           $13 = 1;
           $23 = (((HEAPU16[$7 >> 1] | 0) >>> 10 | 0) & 1 | 0 | $23 | 0 | 0) != (0 | 0);
          }
          i64toi32_i32$1 = $1;
          i64toi32_i32$0 = 0;
          HEAP32[(i64toi32_i32$1 + 160 | 0) >> 2] = 0;
          HEAP32[(i64toi32_i32$1 + 164 | 0) >> 2] = i64toi32_i32$0;
          $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
          $15 = Math_fround(HEAPF32[($5 + 14460 | 0) >> 2]);
          $17 = Math_fround(HEAPF32[($0 + 60 | 0) >> 2]);
          $16 = Math_fround(HEAPF32[($5 + 15488 | 0) >> 2]);
          $12 = Math_fround(HEAPF32[($0 + 52 | 0) >> 2]);
          $11 = Math_fround(HEAPF32[($0 + 56 | 0) >> 2]);
          HEAPF32[(i64toi32_i32$1 + 196 | 0) >> 2] = $11;
          HEAPF32[(i64toi32_i32$1 + 192 | 0) >> 2] = $12;
          $30 = Math_fround(Math_fround($15 + $15) + Math_fround($11 + $16));
          HEAPF32[(i64toi32_i32$1 + 204 | 0) >> 2] = $30;
          $15 = Math_fround($12 + $17);
          HEAPF32[(i64toi32_i32$1 + 200 | 0) >> 2] = $15;
          $31 = Math_fround(HEAPF32[($5 + 14416 | 0) >> 2]);
          $17 = Math_fround(HEAPF32[($5 + 14456 | 0) >> 2]);
          $15 = Math_fround(Math_fround($15 - $31) - $17);
          $12 = Math_fround($12 + $31);
          label$141 : {
           $9 = HEAPU16[($0 + 156 | 0) >> 1] | 0 | ((HEAPU8[($0 + 158 | 0) >> 0] | 0) << 16 | 0) | 0;
           if (!($9 & 4096 | 0)) {
            break label$141
           }
           HEAPF32[($1 + 164 | 0) >> 2] = $11;
           $15 = Math_fround($15 - $16);
           HEAPF32[($1 + 160 | 0) >> 2] = Math_fround($15 - $17);
          }
          $31 = Math_fround($12 + $17);
          $27 = (wasm2js_scratch_store_f32($11), wasm2js_scratch_load_i32(2));
          label$142 : {
           if (!($9 & 8192 | 0)) {
            break label$142
           }
           label$143 : {
            switch (HEAP32[($5 + 14436 | 0) >> 2] | 0 | 0) {
            case 0:
             $31 = Math_fround($31 + Math_fround($16 + Math_fround(HEAPF32[($5 + 14480 | 0) >> 2])));
             break label$142;
            case 1:
             break label$143;
            default:
             break label$142;
            };
           }
           $12 = Math_fround($15 - Math_fround($16 + $17));
           $15 = $12;
          }
          HEAPF32[($1 + 188 | 0) >> 2] = $30;
          HEAPF32[($1 + 184 | 0) >> 2] = $15;
          HEAPF32[($1 + 180 | 0) >> 2] = $11;
          HEAPF32[($1 + 176 | 0) >> 2] = $31;
          $2184 = $1;
          i64toi32_i32$0 = 0;
          i64toi32_i32$2 = $27;
          i64toi32_i32$1 = 0;
          i64toi32_i32$3 = 32;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
           i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
           $100 = 0;
          } else {
           i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
           $100 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
          }
          $2187$hi = i64toi32_i32$1;
          i64toi32_i32$1 = 0;
          $2190$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $2187$hi;
          i64toi32_i32$0 = $100;
          i64toi32_i32$2 = $2190$hi;
          i64toi32_i32$3 = (wasm2js_scratch_store_f32($12), wasm2js_scratch_load_i32(2));
          i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
          $2191 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
          i64toi32_i32$0 = $2184;
          HEAP32[(i64toi32_i32$0 + 168 | 0) >> 2] = $2191;
          HEAP32[(i64toi32_i32$0 + 172 | 0) >> 2] = i64toi32_i32$2;
          $32 = HEAP32[$6 >> 2] | 0;
          label$145 : {
           if ((HEAP32[($0 + 36 | 0) >> 2] | 0 | 0) < (1 | 0)) {
            break label$145
           }
           $5 = 0;
           label$146 : while (1) {
            label$147 : {
             $9 = HEAP32[((HEAP32[($0 + 44 | 0) >> 2] | 0) + ($5 << 2 | 0) | 0) >> 2] | 0;
             if (ImGui__TabBarFindTabByID_28ImGuiTabBar__2c_20unsigned_20int_29($6 | 0, HEAP32[($9 + 160 | 0) >> 2] | 0 | 0) | 0) {
              break label$147
             }
             ImGui__TabBarAddTab_28ImGuiTabBar__2c_20int_2c_20ImGuiWindow__29($6 | 0, 4194304 | 0, $9 | 0);
            }
            $5 = $5 + 1 | 0;
            if (($5 | 0) < (HEAP32[($0 + 36 | 0) >> 2] | 0 | 0)) {
             continue label$146
            }
            break label$146;
           };
          }
          $5 = 10;
          label$148 : {
           if (!$23) {
            break label$148
           }
           HEAP32[($0 + 140 | 0) >> 2] = HEAP32[($4 + 16016 | 0) >> 2] | 0;
           $5 = 11;
          }
          $9 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
          $5 = ($9 + 14396 | 0) + ((HEAPU8[($8 + 222 | 0) >> 0] | 0 ? 12 : $5) << 4 | 0) | 0;
          $17 = Math_fround(HEAPF32[($5 + 212 | 0) >> 2]);
          $11 = Math_fround(HEAPF32[($5 + 208 | 0) >> 2]);
          $12 = Math_fround(HEAPF32[($5 + 200 | 0) >> 2]);
          $15 = Math_fround(HEAPF32[($5 + 204 | 0) >> 2]);
          $31 = Math_fround(HEAPF32[($9 + 14396 | 0) >> 2]);
          $30 = Math_fround(HEAPF32[($8 + 72 | 0) >> 2]);
          $16 = Math_fround(HEAPF32[($8 + 64 | 0) >> 2]);
          $33 = Math_fround(HEAPF32[($8 + 68 | 0) >> 2]);
          HEAPF32[(($1 + 64 | 0) + 12 | 0) >> 2] = Math_fround($33 + Math_fround(HEAPF32[($8 + 76 | 0) >> 2]));
          HEAPF32[($1 + 68 | 0) >> 2] = $33;
          HEAPF32[($1 + 64 | 0) >> 2] = $16;
          HEAPF32[($1 + 72 | 0) >> 2] = Math_fround($16 + $30);
          label$149 : {
           label$150 : {
            $15 = Math_fround(Math_fround(($15 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($15, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
            if (!(Math_fround(Math_abs($15)) < Math_fround(2147483648.0))) {
             break label$150
            }
            $5 = ~~$15;
            break label$149;
           }
           $5 = -2147483648;
          }
          $5 = $5 << 8 | 0;
          label$151 : {
           label$152 : {
            $12 = Math_fround(Math_fround(($12 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($12, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
            if (!(Math_fround(Math_abs($12)) < Math_fround(2147483648.0))) {
             break label$152
            }
            $9 = ~~$12;
            break label$151;
           }
           $9 = -2147483648;
          }
          $5 = $5 | $9 | 0;
          label$153 : {
           label$154 : {
            $11 = Math_fround(Math_fround(($11 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($11, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
            if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
             break label$154
            }
            $9 = ~~$11;
            break label$153;
           }
           $9 = -2147483648;
          }
          $27 = $1 + 200 | 0;
          $5 = $5 | ($9 << 16 | 0) | 0;
          label$155 : {
           label$156 : {
            $11 = Math_fround($17 * $31);
            $11 = Math_fround(Math_fround(($11 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($11, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
            if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
             break label$156
            }
            $9 = ~~$11;
            break label$155;
           }
           $9 = -2147483648;
          }
          $28 = ImGui__CalcRoundingFlagsForRectInRect_28ImRect_20const__2c_20ImRect_20const__2c_20float_29($1 + 192 | 0 | 0, $1 + 64 | 0 | 0, Math_fround(Math_fround(2.0))) | 0;
          ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29(HEAP32[($8 + 672 | 0) >> 2] | 0 | 0, $1 + 192 | 0 | 0, $27 | 0, $5 | ($9 << 24 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($8 + 120 | 0) >> 2])), $28 | 0);
          label$157 : {
           if (!$13) {
            break label$157
           }
           label$158 : {
            $5 = HEAP32[((((HEAP32[($8 + 280 | 0) >> 2] | 0) << 2 | 0) + (HEAP32[($8 + 288 | 0) >> 2] | 0) | 0) + -4 | 0) >> 2] | 0;
            $5 = (($5 ^ -1 | 0) >>> 8 | 0) ^ (HEAP32[(((($5 & 255 | 0) ^ 220 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
            $5 = ($5 >>> 8 | 0) ^ (HEAP32[(((($5 & 255 | 0) ^ 67 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
            $5 = ($5 >>> 8 | 0) ^ (HEAP32[(((($5 & 255 | 0) ^ 79 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
            $5 = ($5 >>> 8 | 0) ^ (HEAP32[(((($5 & 255 | 0) ^ 76 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
            $5 = ($5 >>> 8 | 0) ^ (HEAP32[(((($5 & 255 | 0) ^ 76 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
            $5 = ($5 >>> 8 | 0) ^ (HEAP32[(((($5 & 255 | 0) ^ 65 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
            $5 = ($5 >>> 8 | 0) ^ (HEAP32[(((($5 & 255 | 0) ^ 80 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
            $5 = ($5 >>> 8 | 0) ^ (HEAP32[(((($5 & 255 | 0) ^ 83 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
            $5 = ((HEAP32[(((($5 & 255 | 0) ^ 69 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) ^ ($5 >>> 8 | 0) | 0) ^ -1 | 0;
            if ((HEAP32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 16168 | 0) >> 2] | 0 | 0) != ($5 | 0)) {
             break label$158
            }
            ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($5 | 0, 11 | 0, 67638 | 0, 0 | 0);
           }
           label$159 : {
            if (!(ImGui__CollapseButton_28unsigned_20int_2c_20ImVec2_20const__2c_20ImGuiDockNode__29($5 | 0, $1 + 168 | 0 | 0, $0 | 0) | 0)) {
             break label$159
            }
            ImGui__OpenPopup_28char_20const__2c_20int_29(65678 | 0, 0 | 0);
           }
           $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
           $9 = HEAP32[($5 + 16192 | 0) >> 2] | 0;
           if (!$9) {
            break label$157
           }
           if (($9 | 0) != (HEAP32[($5 + 18280 | 0) >> 2] | 0 | 0)) {
            break label$157
           }
           $26 = HEAP32[($6 + 20 | 0) >> 2] | 0;
          }
          label$160 : {
           $28 = HEAP32[$6 >> 2] | 0;
           if (($28 | 0) < (1 | 0)) {
            break label$160
           }
           $29 = HEAP32[($6 + 8 | 0) >> 2] | 0;
           $5 = $28;
           label$161 : {
            label$162 : while (1) {
             $9 = $5 + -1 | 0;
             $13 = $29 + Math_imul($9, 48) | 0;
             $27 = HEAP32[($13 + 4 | 0) >> 2] | 0;
             if (!($27 & 4194304 | 0)) {
              break label$161
             }
             HEAP32[($13 + 4 | 0) >> 2] = $27 & -4194305 | 0;
             $13 = $5 >>> 0 > 1 >>> 0;
             $5 = $9;
             if ($13) {
              continue label$162
             }
             break label$162;
            };
            $5 = 0;
           }
           if (($28 | 0) <= ($5 | 0)) {
            break label$160
           }
           label$163 : {
            if (!((HEAPU8[($4 + 23536 | 0) >> 0] | 0) & 64 | 0)) {
             break label$163
            }
            $9 = HEAP32[$0 >> 2] | 0;
            HEAP32[($1 + 20 | 0) >> 2] = $28 - $5 | 0;
            HEAP32[($1 + 16 | 0) >> 2] = $9;
            HEAP32[($1 + 24 | 0) >> 2] = ($28 | 0) > ($5 + 1 | 0 | 0) ? 68091 : 70527;
            ImGui__DebugLog_28char_20const__2c_20____29(68314 | 0, $1 + 16 | 0 | 0);
            $28 = HEAP32[$6 >> 2] | 0;
           }
           label$164 : {
            if (($5 | 0) >= ($28 | 0)) {
             break label$164
            }
            $9 = $5;
            label$165 : while (1) {
             label$166 : {
              if (!((HEAPU8[($4 + 23536 | 0) >> 0] | 0) & 64 | 0)) {
               break label$166
              }
              $13 = HEAP32[(((HEAP32[($6 + 8 | 0) >> 2] | 0) + Math_imul($9, 48) | 0) + 8 | 0) >> 2] | 0;
              $27 = HEAP32[$13 >> 2] | 0;
              HEAP32[($1 + 4 | 0) >> 2] = HEAP16[($13 + 906 | 0) >> 1] | 0;
              HEAP32[$1 >> 2] = $27;
              ImGui__DebugLog_28char_20const__2c_20____29(68887 | 0, $1 | 0);
              $28 = HEAP32[$6 >> 2] | 0;
             }
             $9 = $9 + 1 | 0;
             if (($9 | 0) < ($28 | 0)) {
              continue label$165
             }
             break label$165;
            };
           }
           if (($28 | 0) <= ($5 + 1 | 0 | 0)) {
            break label$160
           }
           $9 = $28 - $5 | 0;
           if ($9 >>> 0 < 2 >>> 0) {
            break label$160
           }
           qsort((HEAP32[($6 + 8 | 0) >> 2] | 0) + Math_imul($5, 48) | 0 | 0, $9 | 0, 48 | 0, 15 | 0);
          }
          label$167 : {
           $5 = HEAP32[($4 + 18648 | 0) >> 2] | 0;
           if (!$5) {
            break label$167
           }
           $5 = HEAP32[($5 + 828 | 0) >> 2] | 0;
           if ((HEAP32[($5 + 932 | 0) >> 2] | 0 | 0) != ($0 | 0)) {
            break label$167
           }
           HEAP32[($6 + 20 | 0) >> 2] = HEAP32[($5 + 160 | 0) >> 2] | 0;
          }
          label$168 : {
           label$169 : {
            label$170 : {
             if ($25) {
              break label$170
             }
             if (!(ImGui__TabBarFindTabByID_28ImGuiTabBar__2c_20unsigned_20int_29($6 | 0, HEAP32[($0 + 148 | 0) >> 2] | 0 | 0) | 0)) {
              break label$170
             }
             $5 = $0 + 148 | 0;
             break label$169;
            }
            $5 = HEAP32[$6 >> 2] | 0;
            if (($5 | 0) <= ($32 | 0)) {
             break label$168
            }
            $5 = (HEAP32[((Math_imul($5, 48) + (HEAP32[($6 + 8 | 0) >> 2] | 0) | 0) + -40 | 0) >> 2] | 0) + 160 | 0;
           }
           $5 = HEAP32[$5 >> 2] | 0;
           HEAP32[($6 + 20 | 0) >> 2] = $5;
           HEAP32[($6 + 24 | 0) >> 2] = $5;
          }
          ImGui__BeginTabBarEx_28ImGuiTabBar__2c_20ImRect_20const__2c_20int_2c_20ImGuiDockNode__29($6 | 0, $1 + 176 | 0 | 0, (HEAPU8[($8 + 222 | 0) >> 0] | 0 ? 5242883 : $23 ? 7340035 : 5242883) | 0, $0 | 0) | 0;
          i64toi32_i32$1 = $4 + 14604 | 0;
          i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $2613 = i64toi32_i32$2;
          i64toi32_i32$2 = $1;
          HEAP32[(i64toi32_i32$2 + 72 | 0) >> 2] = $2613;
          HEAP32[(i64toi32_i32$2 + 76 | 0) >> 2] = i64toi32_i32$0;
          $32 = $4 + 14596 | 0;
          i64toi32_i32$1 = $32;
          i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $2618 = i64toi32_i32$0;
          i64toi32_i32$0 = $1;
          HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] = $2618;
          HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] = i64toi32_i32$2;
          i64toi32_i32$1 = $4 + 15132 | 0;
          i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $2624 = i64toi32_i32$2;
          i64toi32_i32$2 = ($1 + 64 | 0) + 24 | 0;
          HEAP32[i64toi32_i32$2 >> 2] = $2624;
          HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
          $34 = $4 + 15124 | 0;
          i64toi32_i32$1 = $34;
          i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $2629 = i64toi32_i32$0;
          i64toi32_i32$0 = $1;
          HEAP32[(i64toi32_i32$0 + 80 | 0) >> 2] = $2629;
          HEAP32[(i64toi32_i32$0 + 84 | 0) >> 2] = i64toi32_i32$2;
          i64toi32_i32$1 = $4 + 15148 | 0;
          i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $2634 = i64toi32_i32$2;
          i64toi32_i32$2 = $1 + 104 | 0;
          HEAP32[i64toi32_i32$2 >> 2] = $2634;
          HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
          $35 = $4 + 15140 | 0;
          i64toi32_i32$1 = $35;
          i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $2639 = i64toi32_i32$0;
          i64toi32_i32$0 = $1;
          HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] = $2639;
          HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] = i64toi32_i32$2;
          i64toi32_i32$1 = $4 + 15164 | 0;
          i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $2644 = i64toi32_i32$2;
          i64toi32_i32$2 = $1 + 120 | 0;
          HEAP32[i64toi32_i32$2 >> 2] = $2644;
          HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
          $36 = $4 + 15156 | 0;
          i64toi32_i32$1 = $36;
          i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $2649 = i64toi32_i32$0;
          i64toi32_i32$0 = $1;
          HEAP32[(i64toi32_i32$0 + 112 | 0) >> 2] = $2649;
          HEAP32[(i64toi32_i32$0 + 116 | 0) >> 2] = i64toi32_i32$2;
          i64toi32_i32$1 = $4 + 15180 | 0;
          i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $2654 = i64toi32_i32$2;
          i64toi32_i32$2 = $1 + 136 | 0;
          HEAP32[i64toi32_i32$2 >> 2] = $2654;
          HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
          $37 = $4 + 15172 | 0;
          i64toi32_i32$1 = $37;
          i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $2659 = i64toi32_i32$0;
          i64toi32_i32$0 = $1;
          HEAP32[(i64toi32_i32$0 + 128 | 0) >> 2] = $2659;
          HEAP32[(i64toi32_i32$0 + 132 | 0) >> 2] = i64toi32_i32$2;
          i64toi32_i32$1 = $4 + 15196 | 0;
          i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $2664 = i64toi32_i32$2;
          i64toi32_i32$2 = $1 + 152 | 0;
          HEAP32[i64toi32_i32$2 >> 2] = $2664;
          HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
          $38 = $4 + 15188 | 0;
          i64toi32_i32$1 = $38;
          i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $2669 = i64toi32_i32$0;
          i64toi32_i32$0 = $1;
          HEAP32[(i64toi32_i32$0 + 144 | 0) >> 2] = $2669;
          HEAP32[(i64toi32_i32$0 + 148 | 0) >> 2] = i64toi32_i32$2;
          HEAP32[($0 + 116 | 0) >> 2] = 0;
          $39 = i64toi32_i32$0 + 144 | 0;
          $40 = i64toi32_i32$0 + 128 | 0;
          $41 = i64toi32_i32$0 + 112 | 0;
          $42 = (i64toi32_i32$0 + 64 | 0) + 32 | 0;
          $43 = (i64toi32_i32$0 + 64 | 0) + 16 | 0;
          label$171 : {
           $13 = HEAP32[($0 + 36 | 0) >> 2] | 0;
           if (($13 | 0) < (1 | 0)) {
            break label$171
           }
           $22 = ($22 + 1 | 0 | 0) == ($19 | 0);
           $25 = ($20 | 0) != (0 | 0) & $22 | 0;
           $27 = ($21 | 0) != (0 | 0) & $22 | 0;
           $28 = $4 + 18292 | 0;
           $9 = 0;
           label$172 : while (1) {
            $5 = HEAP32[((HEAP32[($0 + 44 | 0) >> 2] | 0) + ($9 << 2 | 0) | 0) >> 2] | 0;
            label$173 : {
             label$174 : {
              label$175 : {
               if ($27) {
                break label$175
               }
               if ((HEAP32[($5 + 160 | 0) >> 2] | 0 | 0) != ($25 | 0)) {
                break label$174
               }
              }
              if (!(HEAPU8[($5 + 229 | 0) >> 0] | 0)) {
               break label$174
              }
              if (!((HEAPU8[($5 + 10 | 0) >> 0] | 0) & 16 | 0)) {
               break label$173
              }
             }
             label$176 : {
              if (((HEAP32[($5 + 620 | 0) >> 2] | 0) + 1 | 0 | 0) >= (HEAP32[($4 + 16016 | 0) >> 2] | 0 | 0)) {
               break label$176
              }
              if ($22) {
               break label$173
              }
             }
             $29 = HEAP32[($5 + 32 | 0) >> 2] | 0;
             $19 = HEAP32[($6 + 12 | 0) >> 2] | 0;
             $20 = HEAP32[($5 + 8 | 0) >> 2] | 0;
             $13 = HEAP32[($5 + 908 | 0) >> 2] | 0;
             HEAPF32[($4 + 14608 | 0) >> 2] = Math_fround(Math_fround(($13 >>> 24 | 0) >>> 0) * Math_fround(.003921568859368563));
             HEAPF32[($4 + 14596 | 0) >> 2] = Math_fround(Math_fround(($13 & 255 | 0) >>> 0) * Math_fround(.003921568859368563));
             HEAPF32[($4 + 14604 | 0) >> 2] = Math_fround(Math_fround((($13 >>> 16 | 0) & 255 | 0) >>> 0) * Math_fround(.003921568859368563));
             HEAPF32[($4 + 14600 | 0) >> 2] = Math_fround(Math_fround((($13 >>> 8 | 0) & 255 | 0) >>> 0) * Math_fround(.003921568859368563));
             $13 = HEAP32[($5 + 912 | 0) >> 2] | 0;
             HEAPF32[($4 + 15136 | 0) >> 2] = Math_fround(Math_fround(($13 >>> 24 | 0) >>> 0) * Math_fround(.003921568859368563));
             HEAPF32[($4 + 15124 | 0) >> 2] = Math_fround(Math_fround(($13 & 255 | 0) >>> 0) * Math_fround(.003921568859368563));
             HEAPF32[($4 + 15132 | 0) >> 2] = Math_fround(Math_fround((($13 >>> 16 | 0) & 255 | 0) >>> 0) * Math_fround(.003921568859368563));
             HEAPF32[($4 + 15128 | 0) >> 2] = Math_fround(Math_fround((($13 >>> 8 | 0) & 255 | 0) >>> 0) * Math_fround(.003921568859368563));
             $13 = HEAP32[($5 + 916 | 0) >> 2] | 0;
             HEAPF32[($4 + 15152 | 0) >> 2] = Math_fround(Math_fround(($13 >>> 24 | 0) >>> 0) * Math_fround(.003921568859368563));
             HEAPF32[($4 + 15140 | 0) >> 2] = Math_fround(Math_fround(($13 & 255 | 0) >>> 0) * Math_fround(.003921568859368563));
             HEAPF32[($4 + 15148 | 0) >> 2] = Math_fround(Math_fround((($13 >>> 16 | 0) & 255 | 0) >>> 0) * Math_fround(.003921568859368563));
             HEAPF32[($4 + 15144 | 0) >> 2] = Math_fround(Math_fround((($13 >>> 8 | 0) & 255 | 0) >>> 0) * Math_fround(.003921568859368563));
             $13 = HEAP32[($5 + 920 | 0) >> 2] | 0;
             HEAPF32[($4 + 15168 | 0) >> 2] = Math_fround(Math_fround(($13 >>> 24 | 0) >>> 0) * Math_fround(.003921568859368563));
             HEAPF32[($4 + 15156 | 0) >> 2] = Math_fround(Math_fround(($13 & 255 | 0) >>> 0) * Math_fround(.003921568859368563));
             HEAPF32[($4 + 15164 | 0) >> 2] = Math_fround(Math_fround((($13 >>> 16 | 0) & 255 | 0) >>> 0) * Math_fround(.003921568859368563));
             HEAPF32[($4 + 15160 | 0) >> 2] = Math_fround(Math_fround((($13 >>> 8 | 0) & 255 | 0) >>> 0) * Math_fround(.003921568859368563));
             $13 = HEAP32[($5 + 924 | 0) >> 2] | 0;
             HEAPF32[($4 + 15184 | 0) >> 2] = Math_fround(Math_fround(($13 >>> 24 | 0) >>> 0) * Math_fround(.003921568859368563));
             HEAPF32[($4 + 15172 | 0) >> 2] = Math_fround(Math_fround(($13 & 255 | 0) >>> 0) * Math_fround(.003921568859368563));
             HEAPF32[($4 + 15180 | 0) >> 2] = Math_fround(Math_fround((($13 >>> 16 | 0) & 255 | 0) >>> 0) * Math_fround(.003921568859368563));
             HEAPF32[($4 + 15176 | 0) >> 2] = Math_fround(Math_fround((($13 >>> 8 | 0) & 255 | 0) >>> 0) * Math_fround(.003921568859368563));
             $13 = HEAP32[($5 + 928 | 0) >> 2] | 0;
             HEAPF32[($4 + 15200 | 0) >> 2] = Math_fround(Math_fround(($13 >>> 24 | 0) >>> 0) * Math_fround(.003921568859368563));
             HEAPF32[($4 + 15188 | 0) >> 2] = Math_fround(Math_fround(($13 & 255 | 0) >>> 0) * Math_fround(.003921568859368563));
             HEAPF32[($4 + 15196 | 0) >> 2] = Math_fround(Math_fround((($13 >>> 16 | 0) & 255 | 0) >>> 0) * Math_fround(.003921568859368563));
             HEAPF32[($4 + 15192 | 0) >> 2] = Math_fround(Math_fround((($13 >>> 8 | 0) & 255 | 0) >>> 0) * Math_fround(.003921568859368563));
             HEAP8[($1 + 208 | 0) >> 0] = 1;
             ImGui__TabItemEx_28ImGuiTabBar__2c_20char_20const__2c_20bool__2c_20int_2c_20ImGuiWindow__29($6 | 0, HEAP32[$5 >> 2] | 0 | 0, (HEAPU8[($5 + 229 | 0) >> 0] | 0 ? $1 + 208 | 0 : 0) | 0, $29 | (($20 >>> 20 | 0) & 1 | 0) | 0 | (($19 >>> 1 | 0) & 4 | 0) | 0 | 0, $5 | 0) | 0;
             $13 = HEAP32[($5 + 160 | 0) >> 2] | 0;
             label$177 : {
              if (HEAPU8[($1 + 208 | 0) >> 0] | 0) {
               break label$177
              }
              HEAP32[($0 + 152 | 0) >> 2] = $13;
             }
             label$178 : {
              if ((HEAP32[($6 + 28 | 0) >> 2] | 0 | 0) != ($13 | 0)) {
               break label$178
              }
              HEAP32[($0 + 116 | 0) >> 2] = $5;
             }
             HEAP32[($5 + 944 | 0) >> 2] = HEAP32[($4 + 18288 | 0) >> 2] | 0;
             i64toi32_i32$1 = $28 + 8 | 0;
             i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
             i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
             $2922 = i64toi32_i32$2;
             i64toi32_i32$2 = $5 + 956 | 0;
             HEAP32[i64toi32_i32$2 >> 2] = $2922;
             HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
             i64toi32_i32$1 = $28;
             i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
             i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
             $2925 = i64toi32_i32$0;
             i64toi32_i32$0 = $5;
             HEAP32[($5 + 948 | 0) >> 2] = $2925;
             HEAP32[($5 + 952 | 0) >> 2] = i64toi32_i32$2;
             label$179 : {
              $29 = HEAP32[($4 + 18648 | 0) >> 2] | 0;
              if (!$29) {
               break label$179
              }
              if ((HEAP32[($29 + 828 | 0) >> 2] | 0 | 0) != ($5 | 0)) {
               break label$179
              }
              if ((HEAPU8[($5 + 384 | 0) >> 0] | 0) & 2 | 0) {
               break label$179
              }
              HEAP32[($8 + 856 | 0) >> 2] = $13;
             }
             $13 = HEAP32[($0 + 36 | 0) >> 2] | 0;
            }
            $9 = $9 + 1 | 0;
            if (($9 | 0) < ($13 | 0)) {
             continue label$172
            }
            break label$172;
           };
          }
          i64toi32_i32$1 = $1;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
          $2949 = i64toi32_i32$2;
          i64toi32_i32$2 = $32;
          HEAP32[i64toi32_i32$2 >> 2] = $2949;
          HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] | 0;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] | 0;
          $2953 = i64toi32_i32$0;
          i64toi32_i32$0 = $32 + 8 | 0;
          HEAP32[i64toi32_i32$0 >> 2] = $2953;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
          i64toi32_i32$1 = $43 + 8 | 0;
          i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $2958 = i64toi32_i32$2;
          i64toi32_i32$2 = $34 + 8 | 0;
          HEAP32[i64toi32_i32$2 >> 2] = $2958;
          HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
          i64toi32_i32$1 = $43;
          i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $2961 = i64toi32_i32$0;
          i64toi32_i32$0 = $34;
          HEAP32[i64toi32_i32$0 >> 2] = $2961;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
          i64toi32_i32$1 = $42 + 8 | 0;
          i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $2966 = i64toi32_i32$2;
          i64toi32_i32$2 = $35 + 8 | 0;
          HEAP32[i64toi32_i32$2 >> 2] = $2966;
          HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
          i64toi32_i32$1 = $42;
          i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $2969 = i64toi32_i32$0;
          i64toi32_i32$0 = $35;
          HEAP32[i64toi32_i32$0 >> 2] = $2969;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
          i64toi32_i32$1 = $41 + 8 | 0;
          i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $2974 = i64toi32_i32$2;
          i64toi32_i32$2 = $36 + 8 | 0;
          HEAP32[i64toi32_i32$2 >> 2] = $2974;
          HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
          i64toi32_i32$1 = $41;
          i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $2977 = i64toi32_i32$0;
          i64toi32_i32$0 = $36;
          HEAP32[i64toi32_i32$0 >> 2] = $2977;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
          i64toi32_i32$1 = $40 + 8 | 0;
          i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $2982 = i64toi32_i32$2;
          i64toi32_i32$2 = $37 + 8 | 0;
          HEAP32[i64toi32_i32$2 >> 2] = $2982;
          HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
          i64toi32_i32$1 = $40;
          i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $2985 = i64toi32_i32$0;
          i64toi32_i32$0 = $37;
          HEAP32[i64toi32_i32$0 >> 2] = $2985;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
          i64toi32_i32$1 = $39 + 8 | 0;
          i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $2990 = i64toi32_i32$2;
          i64toi32_i32$2 = $38 + 8 | 0;
          HEAP32[i64toi32_i32$2 >> 2] = $2990;
          HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
          i64toi32_i32$1 = $39;
          i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $2993 = i64toi32_i32$0;
          i64toi32_i32$0 = $38;
          HEAP32[i64toi32_i32$0 >> 2] = $2993;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
          label$180 : {
           $5 = HEAP32[($0 + 116 | 0) >> 2] | 0;
           if (!$5) {
            break label$180
           }
           label$181 : {
            if ($23) {
             break label$181
            }
            if (HEAP32[($3 + 116 | 0) >> 2] | 0) {
             break label$180
            }
           }
           HEAP32[($3 + 116 | 0) >> 2] = $5;
          }
          label$182 : {
           label$183 : {
            if ((HEAPU16[$7 >> 1] | 0) & 4096 | 0) {
             break label$183
            }
            $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
            break label$182;
           }
           label$184 : {
            label$185 : {
             $5 = HEAP32[($0 + 116 | 0) >> 2] | 0;
             if (!$5) {
              break label$185
             }
             $9 = 1;
             if (HEAPU8[($5 + 229 | 0) >> 0] | 0) {
              break label$184
             }
            }
            $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
            $9 = HEAP32[($5 + 18252 | 0) >> 2] | 0 | 4 | 0;
            HEAP32[($5 + 18252 | 0) >> 2] = $9;
            label$186 : {
             $3 = HEAP32[($5 + 18524 | 0) >> 2] | 0;
             if (($3 | 0) != (HEAP32[($5 + 18528 | 0) >> 2] | 0 | 0)) {
              break label$186
             }
             $13 = $3 + 1 | 0;
             label$187 : {
              label$188 : {
               if ($3) {
                break label$188
               }
               $27 = 8;
               break label$187;
              }
              $27 = (($3 | 0) / (2 | 0) | 0) + $3 | 0;
             }
             $13 = ($27 | 0) > ($13 | 0) ? $27 : $13;
             if (($3 | 0) >= ($13 | 0)) {
              break label$186
             }
             $3 = $5 + 184 | 0;
             HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1 | 0;
             $3 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($13 << 2 | 0, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
             label$189 : {
              $27 = HEAP32[($5 + 18532 | 0) >> 2] | 0;
              if (!$27) {
               break label$189
              }
              __memcpy($3 | 0, $27 | 0, (HEAP32[($5 + 18524 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
              label$190 : {
               $27 = HEAP32[($5 + 18532 | 0) >> 2] | 0;
               if (!$27) {
                break label$190
               }
               $28 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
               if (!$28) {
                break label$190
               }
               $28 = $28 + 184 | 0;
               HEAP32[$28 >> 2] = (HEAP32[$28 >> 2] | 0) + -1 | 0;
              }
              FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($27, HEAP32[(0 + 92728 | 0) >> 2] | 0);
             }
             HEAP32[($5 + 18528 | 0) >> 2] = $13;
             HEAP32[($5 + 18532 | 0) >> 2] = $3;
             $3 = HEAP32[($5 + 18524 | 0) >> 2] | 0;
            }
            HEAP32[((HEAP32[($5 + 18532 | 0) >> 2] | 0) + ($3 << 2 | 0) | 0) >> 2] = $9;
            HEAP32[($5 + 18524 | 0) >> 2] = (HEAP32[($5 + 18524 | 0) >> 2] | 0) + 1 | 0;
            $11 = Math_fround(HEAPF32[($4 + 14604 | 0) >> 2]);
            $12 = Math_fround(HEAPF32[($4 + 14600 | 0) >> 2]);
            $15 = Math_fround(HEAPF32[($4 + 14608 | 0) >> 2]);
            $16 = Math_fround(HEAPF32[($4 + 14596 | 0) >> 2]);
            $9 = 8;
            $13 = ($1 + 208 | 0) + 8 | 0;
            $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
            $27 = $5 + 14604 | 0;
            i64toi32_i32$1 = $27;
            i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
            $3116 = i64toi32_i32$2;
            i64toi32_i32$2 = $13;
            HEAP32[i64toi32_i32$2 >> 2] = $3116;
            HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
            i64toi32_i32$1 = $5 + 14596 | 0;
            i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
            i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
            $3120 = i64toi32_i32$0;
            i64toi32_i32$0 = $1;
            HEAP32[(i64toi32_i32$0 + 208 | 0) >> 2] = $3120;
            HEAP32[(i64toi32_i32$0 + 212 | 0) >> 2] = i64toi32_i32$2;
            $15 = Math_fround($15 * Math_fround(.4000000059604645));
            label$191 : {
             $3 = HEAP32[($5 + 18476 | 0) >> 2] | 0;
             if (($3 | 0) != (HEAP32[($5 + 18480 | 0) >> 2] | 0 | 0)) {
              break label$191
             }
             $28 = $3 + 1 | 0;
             label$192 : {
              if (!$3) {
               break label$192
              }
              $9 = (($3 | 0) / (2 | 0) | 0) + $3 | 0;
             }
             $9 = ($9 | 0) > ($28 | 0) ? $9 : $28;
             if (($3 | 0) >= ($9 | 0)) {
              break label$191
             }
             $3 = $5 + 184 | 0;
             HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1 | 0;
             $3 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](Math_imul($9, 20), HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
             label$193 : {
              $28 = HEAP32[($5 + 18484 | 0) >> 2] | 0;
              if (!$28) {
               break label$193
              }
              __memcpy($3 | 0, $28 | 0, Math_imul(HEAP32[($5 + 18476 | 0) >> 2] | 0, 20) | 0) | 0;
              label$194 : {
               $28 = HEAP32[($5 + 18484 | 0) >> 2] | 0;
               if (!$28) {
                break label$194
               }
               $29 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
               if (!$29) {
                break label$194
               }
               $29 = $29 + 184 | 0;
               HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + -1 | 0;
              }
              FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($28, HEAP32[(0 + 92728 | 0) >> 2] | 0);
             }
             HEAP32[($5 + 18480 | 0) >> 2] = $9;
             HEAP32[($5 + 18484 | 0) >> 2] = $3;
             $3 = HEAP32[($5 + 18476 | 0) >> 2] | 0;
            }
            $9 = 0;
            $3 = (HEAP32[($5 + 18484 | 0) >> 2] | 0) + Math_imul($3, 20) | 0;
            HEAP32[$3 >> 2] = 0;
            i64toi32_i32$1 = $13;
            i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
            $3201 = i64toi32_i32$2;
            i64toi32_i32$2 = $3 + 12 | 0;
            HEAP32[i64toi32_i32$2 >> 2] = $3201;
            HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
            i64toi32_i32$1 = $1;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 208 | 0) >> 2] | 0;
            i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 212 | 0) >> 2] | 0;
            $3204 = i64toi32_i32$0;
            i64toi32_i32$0 = $3;
            HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = $3204;
            HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = i64toi32_i32$2;
            HEAPF32[$27 >> 2] = $11;
            HEAPF32[($5 + 14600 | 0) >> 2] = $12;
            HEAPF32[($5 + 14596 | 0) >> 2] = $16;
            HEAPF32[($5 + 14608 | 0) >> 2] = $15;
            HEAP32[($5 + 18476 | 0) >> 2] = (HEAP32[($5 + 18476 | 0) >> 2] | 0) + 1 | 0;
           }
           label$195 : {
            $5 = HEAP32[((((HEAP32[($8 + 280 | 0) >> 2] | 0) << 2 | 0) + (HEAP32[($8 + 288 | 0) >> 2] | 0) | 0) + -4 | 0) >> 2] | 0;
            $5 = (($5 ^ -1 | 0) >>> 8 | 0) ^ (HEAP32[(((($5 & 255 | 0) ^ 220 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
            $5 = ($5 >>> 8 | 0) ^ (HEAP32[(((($5 & 255 | 0) ^ 67 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
            $5 = ($5 >>> 8 | 0) ^ (HEAP32[(((($5 & 255 | 0) ^ 76 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
            $5 = ($5 >>> 8 | 0) ^ (HEAP32[(((($5 & 255 | 0) ^ 79 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
            $5 = ($5 >>> 8 | 0) ^ (HEAP32[(((($5 & 255 | 0) ^ 83 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
            $5 = ((HEAP32[(((($5 & 255 | 0) ^ 69 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) ^ ($5 >>> 8 | 0) | 0) ^ -1 | 0;
            if ((HEAP32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 16168 | 0) >> 2] | 0 | 0) != ($5 | 0)) {
             break label$195
            }
            ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($5 | 0, 11 | 0, 67648 | 0, 0 | 0);
           }
           label$196 : {
            if (!(ImGui__CloseButton_28unsigned_20int_2c_20ImVec2_20const__29($5 | 0, $1 + 160 | 0 | 0) | 0)) {
             break label$196
            }
            HEAP16[$7 >> 1] = HEAPU16[$7 >> 1] | 0 | 32768 | 0;
            if ((HEAP32[$6 >> 2] | 0 | 0) < (1 | 0)) {
             break label$196
            }
            $5 = 0;
            label$197 : while (1) {
             ImGui__TabBarCloseTab_28ImGuiTabBar__2c_20ImGuiTabItem__29($6 | 0, (HEAP32[($6 + 8 | 0) >> 2] | 0) + Math_imul($5, 48) | 0 | 0);
             $5 = $5 + 1 | 0;
             if (($5 | 0) < (HEAP32[$6 >> 2] | 0 | 0)) {
              continue label$197
             }
             break label$197;
            };
           }
           $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
           if ($9) {
            break label$182
           }
           label$198 : {
            $3 = HEAP32[($5 + 18476 | 0) >> 2] | 0;
            if (($3 | 0) < (1 | 0)) {
             break label$198
            }
            $3 = (Math_imul($3, 20) + (HEAP32[($5 + 18484 | 0) >> 2] | 0) | 0) + -20 | 0;
            $9 = $5 + ((HEAP32[$3 >> 2] | 0) << 4 | 0) | 0;
            i64toi32_i32$1 = $3 + 12 | 0;
            i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
            $3335 = i64toi32_i32$2;
            i64toi32_i32$2 = $9 + 14604 | 0;
            HEAP32[i64toi32_i32$2 >> 2] = $3335;
            HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
            i64toi32_i32$1 = $3;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
            i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
            $3339 = i64toi32_i32$0;
            i64toi32_i32$0 = $9 + 14596 | 0;
            HEAP32[i64toi32_i32$0 >> 2] = $3339;
            HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
            HEAP32[($5 + 18476 | 0) >> 2] = (HEAP32[($5 + 18476 | 0) >> 2] | 0) + -1 | 0;
           }
           $3 = HEAP32[($5 + 18524 | 0) >> 2] | 0;
           HEAP32[($5 + 18524 | 0) >> 2] = $3 + -1 | 0;
           HEAP32[($5 + 18252 | 0) >> 2] = HEAP32[((($3 << 2 | 0) + (HEAP32[($5 + 18532 | 0) >> 2] | 0) | 0) + -8 | 0) >> 2] | 0;
          }
          label$199 : {
           $3359 = HEAP32[($5 + 16168 | 0) >> 2] | 0;
           $5 = HEAP32[((((HEAP32[($8 + 280 | 0) >> 2] | 0) << 2 | 0) + (HEAP32[($8 + 288 | 0) >> 2] | 0) | 0) + -4 | 0) >> 2] | 0;
           $5 = (($5 ^ -1 | 0) >>> 8 | 0) ^ (HEAP32[(((($5 & 255 | 0) ^ 220 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
           $5 = ($5 >>> 8 | 0) ^ (HEAP32[(((($5 & 255 | 0) ^ 84 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
           $5 = ($5 >>> 8 | 0) ^ (HEAP32[(((($5 & 255 | 0) ^ 73 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
           $5 = ($5 >>> 8 | 0) ^ (HEAP32[(((($5 & 255 | 0) ^ 84 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
           $5 = ($5 >>> 8 | 0) ^ (HEAP32[(((($5 & 255 | 0) ^ 76 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
           $5 = ($5 >>> 8 | 0) ^ (HEAP32[(((($5 & 255 | 0) ^ 69 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
           $5 = ($5 >>> 8 | 0) ^ (HEAP32[(((($5 & 255 | 0) ^ 66 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
           $5 = ($5 >>> 8 | 0) ^ (HEAP32[(((($5 & 255 | 0) ^ 65 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
           $5 = ((HEAP32[(((($5 & 255 | 0) ^ 82 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) ^ ($5 >>> 8 | 0) | 0) ^ -1 | 0;
           if (($3359 | 0) != ($5 | 0)) {
            break label$199
           }
           ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($5 | 0, 11 | 0, 67583 | 0, 0 | 0);
          }
          label$200 : {
           label$201 : {
            $3 = HEAP32[($4 + 16172 | 0) >> 2] | 0;
            if (!$3) {
             break label$201
            }
            if (($3 | 0) == ($5 | 0)) {
             break label$201
            }
            if ((HEAP32[($4 + 16192 | 0) >> 2] | 0 | 0) != ($5 | 0)) {
             break label$200
            }
           }
           ImGui__ButtonBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20bool__2c_20bool__2c_20int_29($1 + 192 | 0 | 0, $5 | 0, 0 | 0, $1 + 208 | 0 | 0, 4096 | 0) | 0;
           label$202 : {
            if ((HEAP32[($4 + 16172 | 0) >> 2] | 0 | 0) != ($5 | 0)) {
             break label$202
            }
            HEAP32[($4 + 18280 | 0) >> 2] = $5;
            label$203 : {
             $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
             $5 = HEAP32[($4 + 18280 | 0) >> 2] | 0;
             if ((HEAP32[($4 + 16172 | 0) >> 2] | 0 | 0) != ($5 | 0)) {
              break label$203
             }
             HEAP8[($4 + 16180 | 0) >> 0] = 1;
            }
            if ((HEAP32[($4 + 16192 | 0) >> 2] | 0 | 0) != ($5 | 0)) {
             break label$202
            }
            HEAP8[($4 + 16205 | 0) >> 0] = 1;
           }
           if (!(HEAPU8[($1 + 208 | 0) >> 0] | 0)) {
            break label$200
           }
           label$204 : {
            $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
            if (!(HEAPU8[($4 + 3528 | 0) >> 0] | 0)) {
             break label$204
            }
            if (Math_fround(HEAPF32[($4 + 14128 | 0) >> 2]) != Math_fround(0.0)) {
             break label$204
            }
            if (HEAPU8[($4 + 17808 | 0) >> 0] | 0) {
             break label$204
            }
            $26 = HEAP32[($6 + 20 | 0) >> 2] | 0;
           }
           $4 = ImGui__TabBarFindTabByID_28ImGuiTabBar__2c_20unsigned_20int_29($6 | 0, HEAP32[($6 + 20 | 0) >> 2] | 0 | 0) | 0;
           if (!$4) {
            break label$200
           }
           label$205 : {
            $4 = HEAP32[($4 + 8 | 0) >> 2] | 0;
            if ($4) {
             break label$205
            }
            $4 = HEAP32[($0 + 112 | 0) >> 2] | 0;
           }
           ImGui__StartMouseMovingWindowOrNode_28ImGuiWindow__2c_20ImGuiDockNode__2c_20bool_29($4 | 0, $0 | 0, 0 | 0);
          }
          label$206 : {
           $4 = HEAP32[($6 + 24 | 0) >> 2] | 0;
           $4 = $4 ? $4 : $26;
           if (!$4) {
            break label$206
           }
           $4 = ImGui__TabBarFindTabByID_28ImGuiTabBar__2c_20unsigned_20int_29($6 | 0, $4 | 0) | 0;
           if (!$4) {
            break label$206
           }
           $5 = HEAP32[($4 + 8 | 0) >> 2] | 0;
           if (!$5) {
            break label$206
           }
           ImGui__FocusWindow_28ImGuiWindow__29($5 | 0);
           ImGui__NavInitWindow_28ImGuiWindow__2c_20bool_29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0, 0 | 0);
          }
          ImGui__EndTabBar_28_29();
          $4 = HEAP32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 16116 | 0) >> 2] | 0;
          HEAP32[($4 + 280 | 0) >> 2] = (HEAP32[($4 + 280 | 0) >> 2] | 0) + -1 | 0;
          if ((HEAPU8[($0 + 17 | 0) >> 0] | 0) & 4 | 0) {
           break label$116
          }
          HEAP8[($8 + 224 | 0) >> 0] = $24;
          HEAP32[($8 + 380 | 0) >> 2] = 0;
         }
         $4 = 1;
         break label$54;
        }
        HEAP32[($0 + 152 | 0) >> 2] = 0;
        HEAP8[($0 + 158 | 0) >> 0] = $6 >>> 16 | 0;
        HEAP16[($0 + 156 | 0) >> 1] = $6 & 31743 | 0;
       }
       $5 = HEAP32[($0 + 48 | 0) >> 2] | 0;
       if (!$5) {
        break label$53
       }
       $5 = HEAP32[($5 + 20 | 0) >> 2] | 0;
       if (!$5) {
        break label$53
       }
       HEAP32[($0 + 148 | 0) >> 2] = $5;
       if ($4) {
        break label$52
       }
       break label$51;
      }
      label$207 : {
       if ((HEAP32[($0 + 36 | 0) >> 2] | 0 | 0) < (1 | 0)) {
        break label$207
       }
       HEAP32[($0 + 148 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[($0 + 44 | 0) >> 2] | 0) >> 2] | 0) + 160 | 0) >> 2] | 0;
      }
      if (!$4) {
       break label$51
      }
     }
     label$208 : {
      if (!((HEAPU16[$7 >> 1] | 0) & 512 | 0)) {
       break label$208
      }
      if (HEAP32[($0 + 24 | 0) >> 2] | 0) {
       break label$208
      }
      label$209 : {
       $4 = HEAP32[($2 + 16128 | 0) >> 2] | 0;
       if (!$4) {
        break label$209
       }
       if ((HEAP32[($4 + 836 | 0) >> 2] | 0 | 0) == ($8 | 0)) {
        break label$208
       }
      }
      ImGui__BeginDockableDragDropTarget_28ImGuiWindow__29($8 | 0);
     }
     HEAP32[($0 + 136 | 0) >> 2] = HEAP32[($2 + 16016 | 0) >> 2] | 0;
     label$210 : {
      $4 = HEAP32[($0 + 28 | 0) >> 2] | 0;
      if (!$4) {
       break label$210
      }
      ImGui__DockNodeUpdate_28ImGuiDockNode__29($4 | 0);
     }
     label$211 : {
      $4 = HEAP32[($0 + 32 | 0) >> 2] | 0;
      if (!$4) {
       break label$211
      }
      ImGui__DockNodeUpdate_28ImGuiDockNode__29($4 | 0);
     }
     if (HEAP32[($0 + 24 | 0) >> 2] | 0) {
      break label$50
     }
     ImGui__RenderWindowOuterBorders_28ImGuiWindow__29($8 | 0);
     break label$50;
    }
    HEAP32[($0 + 136 | 0) >> 2] = HEAP32[($2 + 16016 | 0) >> 2] | 0;
   }
   if (!$14) {
    break label$14
   }
   ImGui__End_28_29();
  }
  __stack_pointer = $1 + 224 | 0;
 }
 
 function ImGui__SetNextWindowSize_28ImVec2_20const__2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $18 = 0;
  $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  HEAP32[($2 + 18340 | 0) >> 2] = HEAP32[($2 + 18340 | 0) >> 2] | 0 | 2 | 0;
  i64toi32_i32$2 = $0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  HEAP32[($2 + 18348 | 0) >> 2] = $1 ? $1 : 1;
  $18 = i64toi32_i32$0;
  i64toi32_i32$0 = $2 + 18376 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $18;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function ImVector_ImGuiWindow____push_front_28ImGuiWindow__20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  label$1 : {
   label$2 : {
    $2 = HEAP32[$0 >> 2] | 0;
    if ($2) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if (!(HEAP32[($0 + 4 | 0) >> 2] | 0)) {
       break label$4
      }
      $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      $3 = 0;
      break label$3;
     }
     label$5 : {
      $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$2) {
       break label$5
      }
      $2 = $2 + 184 | 0;
      HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1 | 0;
     }
     $2 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](32, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
     label$6 : {
      $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      if (!$3) {
       break label$6
      }
      __memcpy($2 | 0, $3 | 0, (HEAP32[$0 >> 2] | 0) << 2 | 0 | 0) | 0;
      label$7 : {
       $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       if (!$3) {
        break label$7
       }
       $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
       if (!$4) {
        break label$7
       }
       $4 = $4 + 184 | 0;
       HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + -1 | 0;
      }
      FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($3, HEAP32[(0 + 92728 | 0) >> 2] | 0);
     }
     HEAP32[($0 + 4 | 0) >> 2] = 8;
     HEAP32[($0 + 8 | 0) >> 2] = $2;
     $3 = HEAP32[$0 >> 2] | 0;
    }
    $3 = $2 + ($3 << 2 | 0) | 0;
    break label$1;
   }
   $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   label$8 : {
    if (($2 | 0) != (HEAP32[($0 + 4 | 0) >> 2] | 0 | 0)) {
     break label$8
    }
    $4 = (($2 | 0) / (2 | 0) | 0) + $2 | 0;
    $5 = $2 + 1 | 0;
    $4 = ($4 | 0) > ($5 | 0) ? $4 : $5;
    if (($2 | 0) >= ($4 | 0)) {
     break label$8
    }
    $2 = $4 << 2 | 0;
    label$9 : {
     $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$3) {
      break label$9
     }
     $3 = $3 + 184 | 0;
     HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1 | 0;
    }
    $3 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($2, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
    label$10 : {
     $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     if (!$2) {
      break label$10
     }
     __memcpy($3 | 0, $2 | 0, (HEAP32[$0 >> 2] | 0) << 2 | 0 | 0) | 0;
     label$11 : {
      $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      if (!$2) {
       break label$11
      }
      $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$5) {
       break label$11
      }
      $5 = $5 + 184 | 0;
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1 | 0;
     }
     FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($2, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    }
    HEAP32[($0 + 4 | 0) >> 2] = $4;
    HEAP32[($0 + 8 | 0) >> 2] = $3;
    $2 = HEAP32[$0 >> 2] | 0;
   }
   if (($2 | 0) < (1 | 0)) {
    break label$1
   }
   memmove($3 + 4 | 0 | 0, $3 | 0, $2 << 2 | 0 | 0) | 0;
   $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$3 >> 2] = HEAP32[$1 >> 2] | 0;
  HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 1 | 0;
 }
 
 function ImGui__SetWindowDock_28ImGuiWindow__2c_20unsigned_20int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $8 = 0, $5 = 0, $6 = 0, $7 = 0, $4 = 0, $45 = 0;
  $3 = HEAP32[($0 + 260 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!$2) {
     break label$2
    }
    if (!(($3 >> 24 | 0) & $2 | 0)) {
     break label$1
    }
   }
   HEAP32[($0 + 260 | 0) >> 2] = $3 & -234881025 | 0;
   $4 = HEAP32[($0 + 940 | 0) >> 2] | 0;
   if (($4 | 0) == ($1 | 0)) {
    break label$1
   }
   $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $5 = HEAP32[($3 + 23348 | 0) >> 2] | 0;
   $2 = $5;
   label$3 : {
    $6 = HEAP32[($3 + 23340 | 0) >> 2] | 0;
    if (!$6) {
     break label$3
    }
    $2 = $5;
    $3 = $6;
    label$4 : while (1) {
     $7 = $3 >>> 1 | 0;
     $8 = $2 + ($7 << 3 | 0) | 0;
     $45 = $8 + 8 | 0;
     $8 = (HEAP32[$8 >> 2] | 0) >>> 0 < $1 >>> 0;
     $2 = $8 ? $45 : $2;
     $3 = $8 ? $3 + ($7 ^ -1 | 0) | 0 : $7;
     if ($3) {
      continue label$4
     }
     break label$4;
    };
   }
   label$5 : {
    if (($2 | 0) == ($5 + ($6 << 3 | 0) | 0 | 0)) {
     break label$5
    }
    if ((HEAP32[$2 >> 2] | 0 | 0) != ($1 | 0)) {
     break label$5
    }
    $2 = HEAP32[($2 + 4 | 0) >> 2] | 0;
    if (!$2) {
     break label$5
    }
    if (!(HEAP32[($2 + 28 | 0) >> 2] | 0)) {
     break label$5
    }
    label$6 : while (1) {
     $3 = $2;
     $2 = HEAP32[($2 + 24 | 0) >> 2] | 0;
     if ($2) {
      continue label$6
     }
     break label$6;
    };
    $2 = HEAP32[($3 + 120 | 0) >> 2] | 0;
    $1 = HEAP32[($2 ? $2 : $3 + 144 | 0) >> 2] | 0;
   }
   if (($4 | 0) == ($1 | 0)) {
    break label$1
   }
   label$7 : {
    $2 = HEAP32[($0 + 932 | 0) >> 2] | 0;
    if (!$2) {
     break label$7
    }
    ImGui__DockNodeRemoveWindow_28ImGuiDockNode__2c_20ImGuiWindow__2c_20unsigned_20int_29($2 | 0, $0 | 0, 0 | 0);
   }
   HEAP32[($0 + 940 | 0) >> 2] = $1;
  }
 }
 
 function ImGui__BeginDocked_28ImGuiWindow__2c_20bool__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $14 = Math_fround(0), $9 = 0, $10 = 0, $4 = 0, $3 = 0, i64toi32_i32$1 = 0, $11 = 0, i64toi32_i32$0 = 0, $5 = 0, $6 = 0, $7 = 0, $12 = 0, $12$hi = 0, $2 = 0, $13 = 0, $8 = 0, $61 = 0, $140 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  HEAP8[($0 + 905 | 0) >> 0] = (HEAPU8[($0 + 905 | 0) >> 0] | 0) & 248 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (HEAPU8[($3 + 98 | 0) >> 0] | 0) {
       break label$4
      }
      if (HEAPU8[($0 + 40 | 0) >> 0] | 0) {
       break label$4
      }
      $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      break label$3;
     }
     $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     if ($4 & 18874369 | 0) {
      break label$3
     }
     if (HEAPU8[($0 + 227 | 0) >> 0] | 0) {
      break label$3
     }
     $5 = HEAP32[($0 + 940 | 0) >> 2] | 0;
     if ($5) {
      break label$2
     }
     $5 = 1;
     label$5 : {
      $6 = HEAP32[($3 + 23340 | 0) >> 2] | 0;
      if (!$6) {
       break label$5
      }
      $7 = HEAP32[($3 + 23348 | 0) >> 2] | 0;
      $8 = $7 + ($6 << 3 | 0) | 0;
      label$6 : while (1) {
       $4 = $7;
       $9 = $6;
       label$7 : while (1) {
        $10 = $9 >>> 1 | 0;
        $11 = $4 + ($10 << 3 | 0) | 0;
        $61 = $11 + 8 | 0;
        $11 = (HEAP32[$11 >> 2] | 0) >>> 0 < $5 >>> 0;
        $4 = $11 ? $61 : $4;
        $9 = $11 ? $9 + ($10 ^ -1 | 0) | 0 : $10;
        if ($9) {
         continue label$7
        }
        break label$7;
       };
       if (($4 | 0) == ($8 | 0)) {
        break label$5
       }
       if ((HEAP32[$4 >> 2] | 0 | 0) != ($5 | 0)) {
        break label$5
       }
       if (!(HEAP32[($4 + 4 | 0) >> 2] | 0)) {
        break label$5
       }
       $5 = $5 + 1 | 0;
       continue label$6;
      };
     }
     HEAP32[($0 + 940 | 0) >> 2] = $5;
     break label$2;
    }
    $9 = $4 >>> 21 | 0;
    $4 = 0;
    label$8 : {
     if (!((HEAPU8[($3 + 18340 | 0) >> 0] | 0) & 1 | 0)) {
      break label$8
     }
     if (!((HEAP8[($0 + 260 | 0) >> 0] | 0) & (HEAP32[($3 + 18344 | 0) >> 2] | 0) | 0)) {
      break label$8
     }
     $4 = HEAPU8[($3 + 18400 | 0) >> 0] | 0;
    }
    label$9 : {
     if (($4 | $9 | 0) & 1 | 0) {
      break label$9
     }
     $5 = HEAP32[($0 + 940 | 0) >> 2] | 0;
     break label$2;
    }
    ImGui__DockContextProcessUndockWindow_28ImGuiContext__2c_20ImGuiWindow__2c_20bool_29(HEAP32[($3 + 23536 | 0) >> 2] | 0 | 0, $0 | 0, 1 | 0);
    break label$1;
   }
   $4 = HEAP32[($0 + 932 | 0) >> 2] | 0;
   label$10 : {
    if (!$5) {
     break label$10
    }
    if ($4) {
     break label$10
    }
    $6 = HEAP32[($3 + 23348 | 0) >> 2] | 0;
    $4 = $6;
    label$11 : {
     $7 = HEAP32[($3 + 23340 | 0) >> 2] | 0;
     if (!$7) {
      break label$11
     }
     $4 = $6;
     $9 = $7;
     label$12 : while (1) {
      $10 = $9 >>> 1 | 0;
      $11 = $4 + ($10 << 3 | 0) | 0;
      $140 = $11 + 8 | 0;
      $11 = (HEAP32[$11 >> 2] | 0) >>> 0 < $5 >>> 0;
      $4 = $11 ? $140 : $4;
      $9 = $11 ? $9 + ($10 ^ -1 | 0) | 0 : $10;
      if ($9) {
       continue label$12
      }
      break label$12;
     };
    }
    label$13 : {
     label$14 : {
      if (($4 | 0) == ($6 + ($7 << 3 | 0) | 0 | 0)) {
       break label$14
      }
      if ((HEAP32[$4 >> 2] | 0 | 0) != ($5 | 0)) {
       break label$14
      }
      $4 = HEAP32[($4 + 4 | 0) >> 2] | 0;
      if (!$4) {
       break label$14
      }
      label$15 : {
       if (HEAP32[($4 + 28 | 0) >> 2] | 0) {
        break label$15
       }
       $9 = HEAPU16[($4 + 156 | 0) >> 1] | 0 | ((HEAPU8[($4 + 158 | 0) >> 0] | 0) << 16 | 0) | 0;
       break label$13;
      }
      ImGui__DockContextProcessUndockWindow_28ImGuiContext__2c_20ImGuiWindow__2c_20bool_29(HEAP32[($3 + 23536 | 0) >> 2] | 0 | 0, $0 | 0, 1 | 0);
      break label$1;
     }
     $4 = ImGui__DockContextAddNode_28ImGuiContext__2c_20unsigned_20int_29($3 | 0, $5 | 0) | 0;
     $9 = (HEAPU16[($4 + 156 | 0) >> 1] | 0 | ((HEAPU8[($4 + 158 | 0) >> 0] | 0) << 16 | 0) | 0) & 16776704 | 0 | 146 | 0;
     HEAP16[($4 + 156 | 0) >> 1] = $9;
     HEAP32[($4 + 132 | 0) >> 2] = HEAP32[($3 + 16016 | 0) >> 2] | 0;
    }
    label$16 : {
     $9 = $9 & 512 | 0;
     if ($9) {
      break label$16
     }
     $9 = $4;
     label$17 : {
      label$18 : while (1) {
       $10 = $9;
       if ((HEAPU16[($9 + 156 | 0) >> 1] | 0) & 512 | 0) {
        break label$17
       }
       $9 = HEAP32[($10 + 24 | 0) >> 2] | 0;
       if ($9) {
        continue label$18
       }
       break label$18;
      };
     }
     $9 = $10;
     label$19 : while (1) {
      $11 = $9;
      $9 = HEAP32[($9 + 24 | 0) >> 2] | 0;
      if ($9) {
       continue label$19
      }
      break label$19;
     };
     ImGui__DockNodeUpdateHasCentralNodeChild_28ImGuiDockNode__29($11 | 0);
     i64toi32_i32$0 = HEAP32[($10 + 52 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($10 + 56 | 0) >> 2] | 0;
     $12 = i64toi32_i32$0;
     $12$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[($10 + 60 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($10 + 64 | 0) >> 2] | 0;
     $13 = i64toi32_i32$1;
     i64toi32_i32$1 = $2;
     HEAP32[i64toi32_i32$1 >> 2] = $13;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $13;
     HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = $12$hi;
     ImGui__DockNodeTreeUpdatePosSize_28ImGuiDockNode__2c_20ImVec2_2c_20ImVec2_2c_20ImGuiDockNode__29($10 | 0, $12 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $4 | 0);
     $9 = (HEAPU16[($4 + 156 | 0) >> 1] | 0) & 512 | 0;
    }
    ImGui__DockNodeAddWindow_28ImGuiDockNode__2c_20ImGuiWindow__2c_20bool_29($4 | 0, $0 | 0, 1 | 0);
    HEAP16[($4 + 156 | 0) >> 1] = (HEAPU16[($4 + 156 | 0) >> 1] | 0) & 65023 | 0 | $9 | 0;
   }
   label$20 : {
    label$21 : {
     $10 = HEAP32[($3 + 16016 | 0) >> 2] | 0;
     if ((HEAP32[($4 + 132 | 0) >> 2] | 0 | 0) < ($10 | 0)) {
      break label$21
     }
     label$22 : {
      label$23 : {
       $14 = Math_fround(HEAPF32[($3 + 14600 | 0) >> 2]);
       $14 = Math_fround(Math_fround(($14 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($14, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($14)) < Math_fround(2147483648.0))) {
        break label$23
       }
       $9 = ~~$14;
       break label$22;
      }
      $9 = -2147483648;
     }
     $9 = $9 << 8 | 0;
     label$24 : {
      label$25 : {
       $14 = Math_fround(HEAPF32[($3 + 14596 | 0) >> 2]);
       $14 = Math_fround(Math_fround(($14 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($14, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($14)) < Math_fround(2147483648.0))) {
        break label$25
       }
       $10 = ~~$14;
       break label$24;
      }
      $10 = -2147483648;
     }
     $9 = $9 | $10 | 0;
     label$26 : {
      label$27 : {
       $14 = Math_fround(HEAPF32[($3 + 14604 | 0) >> 2]);
       $14 = Math_fround(Math_fround(($14 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($14, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($14)) < Math_fround(2147483648.0))) {
        break label$27
       }
       $10 = ~~$14;
       break label$26;
      }
      $10 = -2147483648;
     }
     $9 = $9 | ($10 << 16 | 0) | 0;
     label$28 : {
      label$29 : {
       $14 = Math_fround(HEAPF32[($3 + 14608 | 0) >> 2]);
       $14 = Math_fround(Math_fround(($14 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($14, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($14)) < Math_fround(2147483648.0))) {
        break label$29
       }
       $10 = ~~$14;
       break label$28;
      }
      $10 = -2147483648;
     }
     HEAP32[($0 + 908 | 0) >> 2] = $9 | ($10 << 24 | 0) | 0;
     label$30 : {
      label$31 : {
       $14 = Math_fround(HEAPF32[($3 + 15128 | 0) >> 2]);
       $14 = Math_fround(Math_fround(($14 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($14, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($14)) < Math_fround(2147483648.0))) {
        break label$31
       }
       $9 = ~~$14;
       break label$30;
      }
      $9 = -2147483648;
     }
     $9 = $9 << 8 | 0;
     label$32 : {
      label$33 : {
       $14 = Math_fround(HEAPF32[($3 + 15124 | 0) >> 2]);
       $14 = Math_fround(Math_fround(($14 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($14, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($14)) < Math_fround(2147483648.0))) {
        break label$33
       }
       $10 = ~~$14;
       break label$32;
      }
      $10 = -2147483648;
     }
     $9 = $9 | $10 | 0;
     label$34 : {
      label$35 : {
       $14 = Math_fround(HEAPF32[($3 + 15132 | 0) >> 2]);
       $14 = Math_fround(Math_fround(($14 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($14, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($14)) < Math_fround(2147483648.0))) {
        break label$35
       }
       $10 = ~~$14;
       break label$34;
      }
      $10 = -2147483648;
     }
     $9 = $9 | ($10 << 16 | 0) | 0;
     label$36 : {
      label$37 : {
       $14 = Math_fround(HEAPF32[($3 + 15136 | 0) >> 2]);
       $14 = Math_fround(Math_fround(($14 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($14, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($14)) < Math_fround(2147483648.0))) {
        break label$37
       }
       $10 = ~~$14;
       break label$36;
      }
      $10 = -2147483648;
     }
     HEAP32[($0 + 912 | 0) >> 2] = $9 | ($10 << 24 | 0) | 0;
     label$38 : {
      label$39 : {
       $14 = Math_fround(HEAPF32[($3 + 15144 | 0) >> 2]);
       $14 = Math_fround(Math_fround(($14 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($14, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($14)) < Math_fround(2147483648.0))) {
        break label$39
       }
       $9 = ~~$14;
       break label$38;
      }
      $9 = -2147483648;
     }
     $9 = $9 << 8 | 0;
     label$40 : {
      label$41 : {
       $14 = Math_fround(HEAPF32[($3 + 15140 | 0) >> 2]);
       $14 = Math_fround(Math_fround(($14 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($14, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($14)) < Math_fround(2147483648.0))) {
        break label$41
       }
       $10 = ~~$14;
       break label$40;
      }
      $10 = -2147483648;
     }
     $9 = $9 | $10 | 0;
     label$42 : {
      label$43 : {
       $14 = Math_fround(HEAPF32[($3 + 15148 | 0) >> 2]);
       $14 = Math_fround(Math_fround(($14 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($14, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($14)) < Math_fround(2147483648.0))) {
        break label$43
       }
       $10 = ~~$14;
       break label$42;
      }
      $10 = -2147483648;
     }
     $9 = $9 | ($10 << 16 | 0) | 0;
     label$44 : {
      label$45 : {
       $14 = Math_fround(HEAPF32[($3 + 15152 | 0) >> 2]);
       $14 = Math_fround(Math_fround(($14 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($14, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($14)) < Math_fround(2147483648.0))) {
        break label$45
       }
       $10 = ~~$14;
       break label$44;
      }
      $10 = -2147483648;
     }
     HEAP32[($0 + 916 | 0) >> 2] = $9 | ($10 << 24 | 0) | 0;
     label$46 : {
      label$47 : {
       $14 = Math_fround(HEAPF32[($3 + 15160 | 0) >> 2]);
       $14 = Math_fround(Math_fround(($14 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($14, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($14)) < Math_fround(2147483648.0))) {
        break label$47
       }
       $9 = ~~$14;
       break label$46;
      }
      $9 = -2147483648;
     }
     $9 = $9 << 8 | 0;
     label$48 : {
      label$49 : {
       $14 = Math_fround(HEAPF32[($3 + 15156 | 0) >> 2]);
       $14 = Math_fround(Math_fround(($14 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($14, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($14)) < Math_fround(2147483648.0))) {
        break label$49
       }
       $10 = ~~$14;
       break label$48;
      }
      $10 = -2147483648;
     }
     $9 = $9 | $10 | 0;
     label$50 : {
      label$51 : {
       $14 = Math_fround(HEAPF32[($3 + 15164 | 0) >> 2]);
       $14 = Math_fround(Math_fround(($14 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($14, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($14)) < Math_fround(2147483648.0))) {
        break label$51
       }
       $10 = ~~$14;
       break label$50;
      }
      $10 = -2147483648;
     }
     $9 = $9 | ($10 << 16 | 0) | 0;
     label$52 : {
      label$53 : {
       $14 = Math_fround(HEAPF32[($3 + 15168 | 0) >> 2]);
       $14 = Math_fround(Math_fround(($14 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($14, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($14)) < Math_fround(2147483648.0))) {
        break label$53
       }
       $10 = ~~$14;
       break label$52;
      }
      $10 = -2147483648;
     }
     HEAP32[($0 + 920 | 0) >> 2] = $9 | ($10 << 24 | 0) | 0;
     label$54 : {
      label$55 : {
       $14 = Math_fround(HEAPF32[($3 + 15176 | 0) >> 2]);
       $14 = Math_fround(Math_fround(($14 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($14, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($14)) < Math_fround(2147483648.0))) {
        break label$55
       }
       $9 = ~~$14;
       break label$54;
      }
      $9 = -2147483648;
     }
     $9 = $9 << 8 | 0;
     label$56 : {
      label$57 : {
       $14 = Math_fround(HEAPF32[($3 + 15172 | 0) >> 2]);
       $14 = Math_fround(Math_fround(($14 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($14, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($14)) < Math_fround(2147483648.0))) {
        break label$57
       }
       $10 = ~~$14;
       break label$56;
      }
      $10 = -2147483648;
     }
     $9 = $9 | $10 | 0;
     label$58 : {
      label$59 : {
       $14 = Math_fround(HEAPF32[($3 + 15180 | 0) >> 2]);
       $14 = Math_fround(Math_fround(($14 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($14, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($14)) < Math_fround(2147483648.0))) {
        break label$59
       }
       $10 = ~~$14;
       break label$58;
      }
      $10 = -2147483648;
     }
     $9 = $9 | ($10 << 16 | 0) | 0;
     label$60 : {
      label$61 : {
       $14 = Math_fround(HEAPF32[($3 + 15184 | 0) >> 2]);
       $14 = Math_fround(Math_fround(($14 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($14, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($14)) < Math_fround(2147483648.0))) {
        break label$61
       }
       $10 = ~~$14;
       break label$60;
      }
      $10 = -2147483648;
     }
     HEAP32[($0 + 924 | 0) >> 2] = $9 | ($10 << 24 | 0) | 0;
     label$62 : {
      label$63 : {
       $14 = Math_fround(HEAPF32[($3 + 15192 | 0) >> 2]);
       $14 = Math_fround(Math_fround(($14 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($14, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($14)) < Math_fround(2147483648.0))) {
        break label$63
       }
       $9 = ~~$14;
       break label$62;
      }
      $9 = -2147483648;
     }
     $9 = $9 << 8 | 0;
     label$64 : {
      label$65 : {
       $14 = Math_fround(HEAPF32[($3 + 15188 | 0) >> 2]);
       $14 = Math_fround(Math_fround(($14 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($14, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($14)) < Math_fround(2147483648.0))) {
        break label$65
       }
       $10 = ~~$14;
       break label$64;
      }
      $10 = -2147483648;
     }
     $9 = $9 | $10 | 0;
     label$66 : {
      label$67 : {
       $14 = Math_fround(HEAPF32[($3 + 15196 | 0) >> 2]);
       $14 = Math_fround(Math_fround(($14 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($14, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($14)) < Math_fround(2147483648.0))) {
        break label$67
       }
       $10 = ~~$14;
       break label$66;
      }
      $10 = -2147483648;
     }
     $9 = $9 | ($10 << 16 | 0) | 0;
     label$68 : {
      label$69 : {
       $14 = Math_fround(HEAPF32[($3 + 15200 | 0) >> 2]);
       $14 = Math_fround(Math_fround(($14 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($14, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($14)) < Math_fround(2147483648.0))) {
        break label$69
       }
       $10 = ~~$14;
       break label$68;
      }
      $10 = -2147483648;
     }
     HEAP32[($0 + 928 | 0) >> 2] = $9 | ($10 << 24 | 0) | 0;
     $9 = HEAP32[($4 + 112 | 0) >> 2] | 0;
     if ($9) {
      break label$20
     }
     label$70 : {
      if ((HEAP32[($4 + 20 | 0) >> 2] | 0 | 0) != (2 | 0)) {
       break label$70
      }
      HEAP8[($0 + 905 | 0) >> 0] = HEAPU8[($0 + 905 | 0) >> 0] | 0 | 1 | 0;
     }
     if ((HEAP32[($4 + 36 | 0) >> 2] | 0 | 0) < (2 | 0)) {
      break label$1
     }
     HEAP8[($0 + 226 | 0) >> 0] = 1;
     HEAP8[($0 + 256 | 0) >> 0] = HEAPU8[($0 + 219 | 0) >> 0] | 0 ? 1 : 2;
     break label$1;
    }
    label$71 : while (1) {
     $9 = $4;
     $4 = HEAP32[($9 + 24 | 0) >> 2] | 0;
     if ($4) {
      continue label$71
     }
     break label$71;
    };
    label$72 : {
     if ((HEAP32[($9 + 132 | 0) >> 2] | 0 | 0) >= ($10 | 0)) {
      break label$72
     }
     ImGui__DockContextProcessUndockWindow_28ImGuiContext__2c_20ImGuiWindow__2c_20bool_29(HEAP32[($3 + 23536 | 0) >> 2] | 0 | 0, $0 | 0, 1 | 0);
     break label$1;
    }
    HEAP8[($0 + 905 | 0) >> 0] = HEAPU8[($0 + 905 | 0) >> 0] | 0 | 1 | 0;
    break label$1;
   }
   HEAP32[($4 + 20 | 0) >> 2] = 3;
   label$73 : {
    if ((HEAPU8[($4 + 16 | 0) >> 0] | 0) & 1 | 0) {
     break label$73
    }
    if ((HEAP16[($0 + 238 | 0) >> 1] | 0 | 0) >= (HEAP16[($9 + 238 | 0) >> 1] | 0 | 0)) {
     break label$73
    }
    ImGui__DockContextProcessUndockWindow_28ImGuiContext__2c_20ImGuiWindow__2c_20bool_29(HEAP32[($3 + 23536 | 0) >> 2] | 0 | 0, $0 | 0, 1 | 0);
    break label$1;
   }
   $9 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $10 = HEAP32[($9 + 18340 | 0) >> 2] | 0;
   HEAP32[($9 + 18340 | 0) >> 2] = $10 | 1 | 0;
   i64toi32_i32$0 = HEAP32[($4 + 52 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($4 + 56 | 0) >> 2] | 0;
   $12 = i64toi32_i32$0;
   $12$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $9 + 18368 | 0;
   i64toi32_i32$1 = 0;
   HEAP32[i64toi32_i32$0 >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $12$hi;
   i64toi32_i32$0 = $9 + 18360 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $12;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP8[($9 + 18400 | 0) >> 0] = 1;
   HEAP32[($9 + 18344 | 0) >> 2] = 1;
   HEAP32[($9 + 18340 | 0) >> 2] = $10 | 3 | 0;
   i64toi32_i32$1 = HEAP32[($4 + 60 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($4 + 64 | 0) >> 2] | 0;
   $12 = i64toi32_i32$1;
   $12$hi = i64toi32_i32$0;
   HEAP32[($9 + 18348 | 0) >> 2] = 1;
   i64toi32_i32$1 = $9 + 18376 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $12;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP8[($3 + 18400 | 0) >> 0] = 0;
   $10 = HEAPU8[($0 + 905 | 0) >> 0] | 0;
   HEAP8[($0 + 905 | 0) >> 0] = $10 & 248 | 0 | 3 | 0;
   $9 = HEAP32[($4 + 16 | 0) >> 2] | 0;
   if ($9 & 1 | 0) {
    break label$1
   }
   label$74 : {
    if ((HEAP32[($4 + 116 | 0) >> 2] | 0 | 0) != ($0 | 0)) {
     break label$74
    }
    HEAP8[($0 + 905 | 0) >> 0] = $10 | 7 | 0;
    $9 = HEAP32[($4 + 16 | 0) >> 2] | 0;
   }
   $10 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   HEAP32[($0 + 8 | 0) >> 2] = $9 & 12288 | 0 ? $10 | 16842755 | 0 : $10 & -16842756 | 0 | 16842754 | 0;
   label$75 : {
    if (!(HEAP32[($4 + 48 | 0) >> 2] | 0)) {
     break label$75
    }
    if (!(HEAPU8[($0 + 220 | 0) >> 0] | 0)) {
     break label$75
    }
    $9 = 65535;
    label$76 : {
     $10 = HEAP32[((HEAP32[($0 + 932 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     if (!$10) {
      break label$76
     }
     $11 = ImGui__TabBarFindTabByID_28ImGuiTabBar__2c_20unsigned_20int_29($10 | 0, HEAP32[($0 + 160 | 0) >> 2] | 0 | 0) | 0;
     if (!$11) {
      break label$76
     }
     $9 = ($11 - (HEAP32[($10 + 8 | 0) >> 2] | 0) | 0 | 0) / (48 | 0) | 0;
    }
    HEAP16[($0 + 906 | 0) >> 1] = $9;
   }
   label$77 : {
    label$78 : {
     label$79 : {
      if ((HEAPU16[($4 + 156 | 0) >> 1] | 0) & 32768 | 0) {
       break label$79
      }
      if (!$1) {
       break label$77
      }
      if ((HEAP32[($4 + 152 | 0) >> 2] | 0 | 0) == (HEAP32[($0 + 160 | 0) >> 2] | 0 | 0)) {
       break label$78
      }
      break label$77;
     }
     if (!$1) {
      break label$77
     }
    }
    HEAP8[$1 >> 0] = 0;
   }
   $4 = HEAP32[((HEAP32[($0 + 932 | 0) >> 2] | 0) + 112 | 0) >> 2] | 0;
   $4 = HEAP32[((((HEAP32[($4 + 280 | 0) >> 2] | 0) << 2 | 0) + (HEAP32[($4 + 288 | 0) >> 2] | 0) | 0) + -4 | 0) >> 2] | 0;
   label$80 : {
    $3 = HEAP32[$0 >> 2] | 0;
    $9 = HEAPU8[$3 >> 0] | 0;
    if (!$9) {
     break label$80
    }
    $5 = $4 ^ -1 | 0;
    $4 = $5;
    $10 = $3;
    label$81 : while (1) {
     $11 = $9 & 255 | 0;
     $9 = HEAPU8[($10 + 1 | 0) >> 0] | 0;
     label$82 : {
      if (($11 | 0) != (35 | 0)) {
       break label$82
      }
      if (($9 & 255 | 0 | 0) != (35 | 0)) {
       break label$82
      }
      $4 = (HEAPU8[($10 + 2 | 0) >> 0] | 0 | 0) == (35 | 0) ? $5 : $4;
     }
     $10 = $10 + 1 | 0;
     $4 = ($4 >>> 8 | 0) ^ (HEAP32[(((($4 & 255 | 0) ^ $11 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
     if ($9 & 255 | 0) {
      continue label$81
     }
     break label$81;
    };
    $4 = $4 ^ -1 | 0;
   }
   label$83 : {
    if ((HEAP32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 16168 | 0) >> 2] | 0 | 0) != ($4 | 0)) {
     break label$83
    }
    ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($4 | 0, 11 | 0, $3 | 0, 0 | 0);
   }
   HEAP32[($0 + 164 | 0) >> 2] = $4;
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function CalcWindowContentSizes_28ImGuiWindow__2c_20ImVec2__2c_20ImVec2__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = Math_fround(0), i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4 = 0, $5 = Math_fround(0), $25 = 0, $28 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!(HEAPU8[($0 + 222 | 0) >> 0] | 0)) {
      break label$3
     }
     if ((HEAP8[($0 + 248 | 0) >> 0] | 0 | 0) > (0 | 0)) {
      break label$3
     }
     if ((HEAP8[($0 + 249 | 0) >> 0] | 0 | 0) < (1 | 0)) {
      break label$2
     }
    }
    if (!(HEAPU8[($0 + 226 | 0) >> 0] | 0)) {
     break label$1
    }
    if (HEAPU8[($0 + 257 | 0) >> 0] | 0) {
     break label$1
    }
    if ((HEAP8[($0 + 256 | 0) >> 0] | 0 | 0) < (1 | 0)) {
     break label$1
    }
   }
   i64toi32_i32$0 = HEAP32[($0 + 88 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0 + 92 | 0) >> 2] | 0;
   $25 = i64toi32_i32$0;
   i64toi32_i32$0 = $1;
   HEAP32[i64toi32_i32$0 >> 2] = $25;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[($0 + 96 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0 + 100 | 0) >> 2] | 0;
   $28 = i64toi32_i32$1;
   i64toi32_i32$1 = $2;
   HEAP32[i64toi32_i32$1 >> 2] = $28;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   return;
  }
  label$4 : {
   $3 = Math_fround(HEAPF32[($0 + 104 | 0) >> 2]);
   if ($3 != Math_fround(0.0)) {
    break label$4
   }
   label$5 : {
    label$6 : {
     $3 = Math_fround(Math_fround(HEAPF32[($0 + 316 | 0) >> 2]) - Math_fround(HEAPF32[($0 + 308 | 0) >> 2]));
     if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
      break label$6
     }
     $4 = ~~$3;
     break label$5;
    }
    $4 = -2147483648;
   }
   $3 = Math_fround($4 | 0);
  }
  HEAPF32[$1 >> 2] = $3;
  label$7 : {
   $3 = Math_fround(HEAPF32[($0 + 108 | 0) >> 2]);
   if ($3 != Math_fround(0.0)) {
    break label$7
   }
   label$8 : {
    label$9 : {
     $3 = Math_fround(Math_fround(HEAPF32[($0 + 320 | 0) >> 2]) - Math_fround(HEAPF32[($0 + 312 | 0) >> 2]));
     if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
      break label$9
     }
     $4 = ~~$3;
     break label$8;
    }
    $4 = -2147483648;
   }
   $3 = Math_fround($4 | 0);
  }
  HEAPF32[($1 + 4 | 0) >> 2] = $3;
  label$10 : {
   $3 = Math_fround(HEAPF32[($0 + 104 | 0) >> 2]);
   if ($3 != Math_fround(0.0)) {
    break label$10
   }
   label$11 : {
    label$12 : {
     $3 = Math_fround(HEAPF32[($0 + 316 | 0) >> 2]);
     $5 = Math_fround(HEAPF32[($0 + 324 | 0) >> 2]);
     $3 = Math_fround(($3 >= $5 ? $3 : $5) - Math_fround(HEAPF32[($0 + 308 | 0) >> 2]));
     if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
      break label$12
     }
     $1 = ~~$3;
     break label$11;
    }
    $1 = -2147483648;
   }
   $3 = Math_fround($1 | 0);
  }
  HEAPF32[$2 >> 2] = $3;
  label$13 : {
   $3 = Math_fround(HEAPF32[($0 + 108 | 0) >> 2]);
   if ($3 != Math_fround(0.0)) {
    break label$13
   }
   label$14 : {
    label$15 : {
     $3 = Math_fround(HEAPF32[($0 + 320 | 0) >> 2]);
     $5 = Math_fround(HEAPF32[($0 + 328 | 0) >> 2]);
     $3 = Math_fround(($3 >= $5 ? $3 : $5) - Math_fround(HEAPF32[($0 + 312 | 0) >> 2]));
     if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
      break label$15
     }
     $0 = ~~$3;
     break label$14;
    }
    $0 = -2147483648;
   }
   $3 = Math_fround($0 | 0);
  }
  HEAPF32[($2 + 4 | 0) >> 2] = $3;
 }
 
 function CalcWindowAutoFitSize_28ImGuiWindow__2c_20ImVec2_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $10 = 0, $5 = Math_fround(0), $15 = Math_fround(0), $14 = 0, $16 = Math_fround(0), $17 = Math_fround(0), $8 = Math_fround(0), $3 = 0, i64toi32_i32$1 = 0, $4 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $9 = Math_fround(0), $11 = 0, $12 = 0, $13 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = 0, $20$hi = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_f32$1 = Math_fround(0), wasm2js_i32$0 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $4 = Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 132 | 0) >> 2]) + Math_fround(HEAPF32[($1 + 140 | 0) >> 2])) - Math_fround(HEAPF32[($1 + 212 | 0) >> 2]));
  $5 = Math_fround(HEAPF32[($1 + 116 | 0) >> 2]);
  $6 = Math_fround($5 + $5);
  $5 = Math_fround($4 + Math_fround($6 + Math_fround(HEAPF32[($2 + 4 | 0) >> 2])));
  $7 = Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 128 | 0) >> 2]) + Math_fround(HEAPF32[($1 + 136 | 0) >> 2])) - Math_fround(HEAPF32[($1 + 208 | 0) >> 2]));
  $8 = Math_fround(HEAPF32[($1 + 112 | 0) >> 2]);
  $9 = Math_fround($8 + $8);
  $8 = Math_fround($7 + Math_fround($9 + Math_fround(HEAPF32[$2 >> 2])));
  label$1 : {
   label$2 : {
    $10 = HEAP32[($1 + 8 | 0) >> 2] | 0;
    if (!($10 & 33554432 | 0)) {
     break label$2
    }
    HEAPF32[($0 + 4 | 0) >> 2] = $5;
    HEAPF32[$0 >> 2] = $8;
    break label$1;
   }
   $11 = HEAP32[($1 + 44 | 0) >> 2] | 0;
   $12 = HEAPU8[($1 + 218 | 0) >> 0] | 0;
   $13 = (wasm2js_f32$0 = Math_fround(3402823466385288598117041.0e14), wasm2js_f32$1 = Math_fround(HEAPF32[($11 + 32 | 0) >> 2]), wasm2js_i32$0 = $12, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
   $14 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $15 = Math_fround(HEAPF32[($14 + 14424 | 0) >> 2]);
   $10 = $10 & 335544320 | 0;
   $15 = $10 ? ($15 < Math_fround(4.0) ? $15 : Math_fround(4.0)) : $15;
   $16 = Math_fround(HEAPF32[($14 + 14420 | 0) >> 2]);
   $16 = $10 ? ($16 < Math_fround(4.0) ? $16 : Math_fround(4.0)) : $16;
   $17 = (wasm2js_f32$0 = Math_fround(3402823466385288598117041.0e14), wasm2js_f32$1 = Math_fround(HEAPF32[($11 + 36 | 0) >> 2]), wasm2js_i32$0 = $12, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
   label$3 : {
    $10 = HEAP32[($1 + 60 | 0) >> 2] | 0;
    if (($10 | 0) < (0 | 0)) {
     break label$3
    }
    if (($10 | 0) >= (HEAP32[($14 + 14348 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    $10 = (HEAP32[($14 + 14356 | 0) >> 2] | 0) + Math_imul($10, 36) | 0;
    $13 = Math_fround(HEAPF32[($10 + 24 | 0) >> 2]);
    $17 = Math_fround(HEAPF32[($10 + 28 | 0) >> 2]);
   }
   $18 = Math_fround(HEAPF32[($14 + 14572 | 0) >> 2]);
   $19 = Math_fround(HEAPF32[($14 + 14576 | 0) >> 2]);
   $17 = Math_fround($17 - Math_fround($19 + $19));
   $17 = $15 >= $17 ? $15 : $17;
   $15 = $5 < $15 ? $15 : $5 > $17 ? $17 : $5;
   HEAPF32[($0 + 4 | 0) >> 2] = $15;
   $5 = Math_fround($13 - Math_fround($18 + $18));
   $5 = $16 >= $5 ? $16 : $5;
   HEAPF32[$0 >> 2] = $8 < $16 ? $16 : $8 > $5 ? $5 : $8;
   i64toi32_i32$1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $20 = HEAP32[$0 >> 2] | 0;
   $20$hi = i64toi32_i32$1;
   CalcWindowSizeAfterConstraint_28ImGuiWindow__2c_20ImVec2_20const__29($3 + 8 | 0 | 0, $1 | 0, $20 | 0, i64toi32_i32$1 | 0);
   $1 = HEAP32[($1 + 8 | 0) >> 2] | 0;
   label$4 : {
    label$5 : {
     if (!(Math_fround(Math_fround(Math_fround(HEAPF32[($3 + 8 | 0) >> 2]) - $9) - $7) < Math_fround(HEAPF32[$2 >> 2]))) {
      break label$5
     }
     $10 = 1;
     if (($1 & 2056 | 0 | 0) == (2048 | 0)) {
      break label$4
     }
    }
    $10 = ($1 & 32768 | 0) >>> 15 | 0;
   }
   label$6 : {
    label$7 : {
     if (!(Math_fround(Math_fround(Math_fround(HEAPF32[($3 + 12 | 0) >> 2]) - $6) - $4) < Math_fround(HEAPF32[($2 + 4 | 0) >> 2]))) {
      break label$7
     }
     $2 = 1;
     if (!($1 & 8 | 0)) {
      break label$6
     }
    }
    $2 = ($1 & 16384 | 0) >>> 14 | 0;
   }
   label$8 : {
    if (!$10) {
     break label$8
    }
    HEAPF32[($0 + 4 | 0) >> 2] = Math_fround($15 + Math_fround(HEAPF32[($14 + 14512 | 0) >> 2]));
   }
   if (!$2) {
    break label$1
   }
   i64toi32_i32$1 = $20$hi;
   HEAPF32[$0 >> 2] = Math_fround(Math_fround(HEAPF32[($14 + 14512 | 0) >> 2]) + (wasm2js_scratch_store_i32(2, $20), wasm2js_scratch_load_f32()));
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function CalcWindowSizeAfterConstraint_28ImGuiWindow__2c_20ImVec2_20const__29($0, $1, $2, $2$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  var $6 = Math_fround(0), i64toi32_i32$1 = 0, $7 = 0, i64toi32_i32$2 = 0, $5 = Math_fround(0), $9 = Math_fround(0), i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $4 = 0, $10 = Math_fround(0), $8 = Math_fround(0), $3 = 0, i64toi32_i32$3 = 0, $24 = 0, $25 = 0, $11 = 0, $12 = 0, $13 = 0, $99 = 0, $102 = 0, $105 = 0, $235 = Math_fround(0);
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$1 = $0;
  HEAP32[i64toi32_i32$1 >> 2] = $2;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $24 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $24 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $5 = (wasm2js_scratch_store_i32(2, $24), wasm2js_scratch_load_f32());
  i64toi32_i32$1 = $2$hi;
  $6 = (wasm2js_scratch_store_i32(2, $2), wasm2js_scratch_load_f32());
  label$1 : {
   if (!((HEAPU8[($4 + 18340 | 0) >> 0] | 0) & 16 | 0)) {
    break label$1
   }
   $7 = $4 + 18416 | 0;
   $8 = Math_fround(HEAPF32[($4 + 18408 | 0) >> 2]);
   label$2 : {
    label$3 : {
     $9 = Math_fround(HEAPF32[($4 + 18404 | 0) >> 2]);
     if (!($9 >= Math_fround(0.0))) {
      break label$3
     }
     $10 = Math_fround(HEAPF32[($4 + 18412 | 0) >> 2]);
     if (!($10 >= Math_fround(0.0))) {
      break label$3
     }
     $9 = $9 > $6 ? $9 : $10 < $6 ? $10 : $6;
     break label$2;
    }
    $9 = Math_fround(HEAPF32[($1 + 80 | 0) >> 2]);
   }
   $6 = Math_fround(HEAPF32[$7 >> 2]);
   HEAPF32[$0 >> 2] = $9;
   label$4 : {
    label$5 : {
     if (!($8 >= Math_fround(0.0))) {
      break label$5
     }
     if (!($6 >= Math_fround(0.0))) {
      break label$5
     }
     $5 = $8 > $5 ? $8 : $6 < $5 ? $6 : $5;
     break label$4;
    }
    $5 = Math_fround(HEAPF32[($1 + 84 | 0) >> 2]);
   }
   HEAPF32[($0 + 4 | 0) >> 2] = $5;
   label$6 : {
    label$7 : {
     $7 = HEAP32[($4 + 18420 | 0) >> 2] | 0;
     if ($7) {
      break label$7
     }
     $6 = Math_fround(HEAPF32[$0 >> 2]);
     break label$6;
    }
    HEAP32[$3 >> 2] = HEAP32[($4 + 18424 | 0) >> 2] | 0;
    i64toi32_i32$0 = $1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
    $99 = i64toi32_i32$1;
    i64toi32_i32$1 = $3;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = $99;
    HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 80 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 84 | 0) >> 2] | 0;
    $102 = i64toi32_i32$2;
    i64toi32_i32$2 = $3;
    HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = $102;
    HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$0 = $0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $105 = i64toi32_i32$1;
    i64toi32_i32$1 = $3;
    HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = $105;
    HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$2;
    FUNCTION_TABLE[$7 | 0](i64toi32_i32$1);
    i64toi32_i32$0 = i64toi32_i32$1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
    $2 = i64toi32_i32$2;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $25 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $25 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $5 = (wasm2js_scratch_store_i32(2, $25), wasm2js_scratch_load_f32());
    i64toi32_i32$2 = $2$hi;
    $6 = (wasm2js_scratch_store_i32(2, $2), wasm2js_scratch_load_f32());
   }
   label$8 : {
    label$9 : {
     if (!(Math_fround(Math_abs($5)) < Math_fround(2147483648.0))) {
      break label$9
     }
     $7 = ~~$5;
     break label$8;
    }
    $7 = -2147483648;
   }
   $5 = Math_fround($7 | 0);
   HEAPF32[($0 + 4 | 0) >> 2] = $5;
   label$10 : {
    label$11 : {
     if (!(Math_fround(Math_abs($6)) < Math_fround(2147483648.0))) {
      break label$11
     }
     $7 = ~~$6;
     break label$10;
    }
    $7 = -2147483648;
   }
   $6 = Math_fround($7 | 0);
   HEAPF32[$0 >> 2] = $6;
  }
  label$12 : {
   if ((HEAP32[($1 + 8 | 0) >> 2] | 0) & 16777280 | 0) {
    break label$12
   }
   label$13 : {
    label$14 : {
     $7 = HEAP32[($1 + 936 | 0) >> 2] | 0;
     if (!$7) {
      break label$14
     }
     $7 = HEAP32[($7 + 116 | 0) >> 2] | 0;
     if ($7) {
      break label$13
     }
    }
    $7 = $1;
   }
   $8 = Math_fround(HEAPF32[($4 + 14424 | 0) >> 2]);
   $9 = Math_fround(HEAPF32[($4 + 14420 | 0) >> 2]);
   HEAPF32[$0 >> 2] = $6 >= $9 ? $6 : $9;
   $1 = $5 >= $8;
   $6 = Math_fround(0.0);
   $9 = Math_fround(0.0);
   label$15 : {
    $11 = HEAP32[($7 + 8 | 0) >> 2] | 0;
    if ($11 & 1 | 0) {
     break label$15
    }
    $12 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    $9 = Math_fround(Math_fround(Math_fround(HEAPF32[($12 + 15492 | 0) >> 2]) * Math_fround(HEAPF32[($7 + 660 | 0) >> 2])) * Math_fround(HEAPF32[($7 + 664 | 0) >> 2]));
    label$16 : {
     $13 = HEAP32[($7 + 820 | 0) >> 2] | 0;
     if (!$13) {
      break label$16
     }
     $9 = Math_fround($9 * Math_fround(HEAPF32[($13 + 660 | 0) >> 2]));
    }
    $10 = Math_fround(HEAPF32[($12 + 14460 | 0) >> 2]);
    $9 = Math_fround(Math_fround($10 + $10) + $9);
   }
   $5 = $1 ? $5 : $8;
   label$17 : {
    if (!($11 & 1024 | 0)) {
     break label$17
    }
    $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    $6 = Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 15492 | 0) >> 2]) * Math_fround(HEAPF32[($7 + 660 | 0) >> 2])) * Math_fround(HEAPF32[($7 + 664 | 0) >> 2]));
    $8 = Math_fround(HEAPF32[($7 + 396 | 0) >> 2]);
    label$18 : {
     $7 = HEAP32[($7 + 820 | 0) >> 2] | 0;
     if (!$7) {
      break label$18
     }
     $6 = Math_fround($6 * Math_fround(HEAPF32[($7 + 660 | 0) >> 2]));
    }
    $10 = Math_fround(HEAPF32[($1 + 14460 | 0) >> 2]);
    $6 = Math_fround(Math_fround($10 + $10) + Math_fround($8 + $6));
   }
   $235 = Math_fround($9 + $6);
   $6 = Math_fround(Math_fround(HEAPF32[($4 + 14412 | 0) >> 2]) + Math_fround(-1.0));
   $6 = Math_fround($235 + ($6 <= Math_fround(0.0) ? Math_fround(0.0) : $6));
   HEAPF32[($0 + 4 | 0) >> 2] = $5 >= $6 ? $5 : $6;
  }
  __stack_pointer = $3 + 32 | 0;
 }
 
 function ImGui__FindBestWindowPosForPopup_28ImGuiWindow__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $4 = 0, $10 = Math_fround(0), i64toi32_i32$0 = 0, $11 = Math_fround(0), i64toi32_i32$2 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $8 = Math_fround(0), $5 = 0, $9 = Math_fround(0), i64toi32_i32$3 = 0, $19 = 0, $37 = Math_fround(0), $238 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $4 = HEAP32[($1 + 60 | 0) >> 2] | 0;
    if (($4 | 0) < (0 | 0)) {
     break label$2
    }
    $4 = (HEAP32[($3 + 14356 | 0) >> 2] | 0) + Math_imul($4, 36) | 0;
    i64toi32_i32$2 = $4;
    i64toi32_i32$0 = HEAP32[($4 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($4 + 20 | 0) >> 2] | 0;
    $5 = i64toi32_i32$0;
    $6 = (wasm2js_scratch_store_i32(2, i64toi32_i32$0), wasm2js_scratch_load_f32());
    $7 = Math_fround(Math_fround(HEAPF32[($4 + 24 | 0) >> 2]) + $6);
    $37 = Math_fround(HEAPF32[($4 + 28 | 0) >> 2]);
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $19 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $19 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $8 = (wasm2js_scratch_store_i32(2, $19), wasm2js_scratch_load_f32());
    $9 = Math_fround($37 + $8);
    break label$1;
   }
   $4 = HEAP32[($1 + 44 | 0) >> 2] | 0;
   $8 = Math_fround(HEAPF32[($4 + 12 | 0) >> 2]);
   $9 = Math_fround($8 + Math_fround(HEAPF32[($4 + 20 | 0) >> 2]));
   $6 = Math_fround(HEAPF32[($4 + 8 | 0) >> 2]);
   $7 = Math_fround($6 + Math_fround(HEAPF32[($4 + 16 | 0) >> 2]));
  }
  $10 = Math_fround(HEAPF32[($3 + 14572 | 0) >> 2]);
  $11 = Math_fround(HEAPF32[($3 + 14576 | 0) >> 2]);
  $11 = Math_fround($9 - $8) > Math_fround($11 + $11) ? Math_fround(-$11) : Math_fround(0.0);
  HEAPF32[($2 + 44 | 0) >> 2] = Math_fround($9 + $11);
  $10 = Math_fround($7 - $6) > Math_fround($10 + $10) ? Math_fround(-$10) : Math_fround(0.0);
  HEAPF32[($2 + 40 | 0) >> 2] = Math_fround($7 + $10);
  HEAPF32[($2 + 36 | 0) >> 2] = Math_fround($8 - $11);
  HEAPF32[($2 + 32 | 0) >> 2] = Math_fround($6 - $10);
  label$3 : {
   label$4 : {
    $4 = HEAP32[($1 + 8 | 0) >> 2] | 0;
    if (!($4 & 268435456 | 0)) {
     break label$4
    }
    label$5 : {
     label$6 : {
      $4 = HEAP32[($1 + 820 | 0) >> 2] | 0;
      if (!(HEAPU8[($4 + 390 | 0) >> 0] | 0)) {
       break label$6
      }
      $10 = Math_fround(HEAPF32[($4 + 592 | 0) >> 2]);
      $11 = Math_fround(HEAPF32[($4 + 584 | 0) >> 2]);
      $6 = Math_fround(3402823466385288598117041.0e14);
      $7 = Math_fround(-3402823466385288598117041.0e14);
      break label$5;
     }
     $10 = Math_fround(HEAPF32[($3 + 14480 | 0) >> 2]);
     $11 = Math_fround(HEAPF32[($4 + 64 | 0) >> 2]);
     $7 = Math_fround($10 + $11);
     $6 = Math_fround(Math_fround(Math_fround($11 + Math_fround(HEAPF32[($4 + 72 | 0) >> 2])) - $10) - Math_fround(HEAPF32[($4 + 208 | 0) >> 2]));
     $10 = Math_fround(3402823466385288598117041.0e14);
     $11 = Math_fround(-3402823466385288598117041.0e14);
    }
    HEAPF32[($2 + 28 | 0) >> 2] = $10;
    HEAPF32[($2 + 24 | 0) >> 2] = $6;
    HEAPF32[($2 + 20 | 0) >> 2] = $11;
    HEAPF32[($2 + 16 | 0) >> 2] = $7;
    ImGui__FindBestWindowPosForPopupEx_28ImVec2_20const__2c_20ImVec2_20const__2c_20int__2c_20ImRect_20const__2c_20ImRect_20const__2c_20ImGuiPopupPositionPolicy_29($0 | 0, $1 + 64 | 0 | 0, $1 + 72 | 0 | 0, $1 + 252 | 0 | 0, $2 + 32 | 0 | 0, $2 + 16 | 0 | 0, 0 | 0);
    break label$3;
   }
   label$7 : {
    if (!($4 & 67108864 | 0)) {
     break label$7
    }
    i64toi32_i32$1 = $1;
    i64toi32_i32$0 = HEAP32[($1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($1 + 68 | 0) >> 2] | 0;
    $5 = i64toi32_i32$0;
    i64toi32_i32$0 = $2;
    HEAP32[($2 + 24 | 0) >> 2] = $5;
    HEAP32[($2 + 28 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $2;
    HEAP32[($2 + 16 | 0) >> 2] = $5;
    HEAP32[($2 + 20 | 0) >> 2] = i64toi32_i32$2;
    ImGui__FindBestWindowPosForPopupEx_28ImVec2_20const__2c_20ImVec2_20const__2c_20int__2c_20ImRect_20const__2c_20ImRect_20const__2c_20ImGuiPopupPositionPolicy_29($0 | 0, $1 + 64 | 0 | 0, $1 + 72 | 0 | 0, $1 + 252 | 0 | 0, $2 + 32 | 0 | 0, $2 + 16 | 0 | 0, 0 | 0);
    break label$3;
   }
   label$8 : {
    if (!($4 & 33554432 | 0)) {
     break label$8
    }
    $10 = Math_fround(HEAPF32[($3 + 14580 | 0) >> 2]);
    ImGui__NavCalcPreferredRefPos_28_29($2 + 8 | 0 | 0);
    i64toi32_i32$0 = $2 + 24 | 0;
    i64toi32_i32$2 = 0;
    HEAP32[i64toi32_i32$0 >> 2] = 0;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $2;
    i64toi32_i32$2 = 0;
    HEAP32[($2 + 16 | 0) >> 2] = 0;
    HEAP32[($2 + 20 | 0) >> 2] = i64toi32_i32$2;
    label$9 : {
     label$10 : {
      if (HEAPU8[($3 + 18710 | 0) >> 0] | 0) {
       break label$10
      }
      if (!(HEAPU8[($3 + 18711 | 0) >> 0] | 0)) {
       break label$10
      }
      if ((HEAPU8[($3 + 8 | 0) >> 0] | 0) & 4 | 0) {
       break label$10
      }
      $10 = Math_fround(HEAPF32[($2 + 12 | 0) >> 2]);
      $11 = Math_fround($10 + Math_fround(8.0));
      $6 = Math_fround(HEAPF32[($2 + 8 | 0) >> 2]);
      $7 = Math_fround($6 + Math_fround(16.0));
      break label$9;
     }
     $7 = Math_fround($10 * Math_fround(24.0));
     $10 = Math_fround(HEAPF32[($2 + 12 | 0) >> 2]);
     $11 = Math_fround($7 + $10);
     $6 = Math_fround(HEAPF32[($2 + 8 | 0) >> 2]);
     $7 = Math_fround($7 + $6);
    }
    HEAPF32[($2 + 28 | 0) >> 2] = $11;
    HEAPF32[($2 + 24 | 0) >> 2] = $7;
    HEAPF32[($2 + 20 | 0) >> 2] = Math_fround($10 + Math_fround(-8.0));
    HEAPF32[($2 + 16 | 0) >> 2] = Math_fround($6 + Math_fround(-16.0));
    ImGui__FindBestWindowPosForPopupEx_28ImVec2_20const__2c_20ImVec2_20const__2c_20int__2c_20ImRect_20const__2c_20ImRect_20const__2c_20ImGuiPopupPositionPolicy_29($0 | 0, $2 + 8 | 0 | 0, $1 + 72 | 0 | 0, $1 + 252 | 0 | 0, $2 + 32 | 0 | 0, $2 + 16 | 0 | 0, 2 | 0);
    break label$3;
   }
   i64toi32_i32$1 = $1;
   i64toi32_i32$2 = HEAP32[($1 + 64 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($1 + 68 | 0) >> 2] | 0;
   $238 = i64toi32_i32$2;
   i64toi32_i32$2 = $0;
   HEAP32[i64toi32_i32$2 >> 2] = $238;
   HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
  __stack_pointer = $2 + 48 | 0;
 }
 
 function ImGui__PushID_28char_20const__29($0) {
  $0 = $0 | 0;
  var $8 = 0, $2 = 0, $7 = 0, $4 = 0, $5 = 0, $3 = 0, $6 = 0, $1 = 0;
  $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $2 = HEAP32[($1 + 16116 | 0) >> 2] | 0;
  $3 = HEAP32[($2 + 280 | 0) >> 2] | 0;
  $4 = HEAP32[((($3 << 2 | 0) + (HEAP32[($2 + 288 | 0) >> 2] | 0) | 0) + -4 | 0) >> 2] | 0;
  label$1 : {
   $5 = HEAPU8[$0 >> 0] | 0;
   if (!$5) {
    break label$1
   }
   $6 = $4 ^ -1 | 0;
   $4 = $6;
   $7 = $0;
   label$2 : while (1) {
    $8 = $5 & 255 | 0;
    $5 = HEAPU8[($7 + 1 | 0) >> 0] | 0;
    label$3 : {
     if (($8 | 0) != (35 | 0)) {
      break label$3
     }
     if (($5 & 255 | 0 | 0) != (35 | 0)) {
      break label$3
     }
     $4 = (HEAPU8[($7 + 2 | 0) >> 0] | 0 | 0) == (35 | 0) ? $6 : $4;
    }
    $7 = $7 + 1 | 0;
    $4 = ($4 >>> 8 | 0) ^ (HEAP32[(((($4 & 255 | 0) ^ $8 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
    if ($5 & 255 | 0) {
     continue label$2
    }
    break label$2;
   };
   $4 = $4 ^ -1 | 0;
  }
  label$4 : {
   if ((HEAP32[($1 + 16168 | 0) >> 2] | 0 | 0) != ($4 | 0)) {
    break label$4
   }
   ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($4 | 0, 11 | 0, $0 | 0, 0 | 0);
   $3 = HEAP32[($2 + 280 | 0) >> 2] | 0;
  }
  label$5 : {
   if (($3 | 0) != (HEAP32[($2 + 284 | 0) >> 2] | 0 | 0)) {
    break label$5
   }
   $5 = $3 + 1 | 0;
   label$6 : {
    label$7 : {
     if ($3) {
      break label$7
     }
     $7 = 8;
     break label$6;
    }
    $7 = (($3 | 0) / (2 | 0) | 0) + $3 | 0;
   }
   $5 = ($7 | 0) > ($5 | 0) ? $7 : $5;
   if (($3 | 0) >= ($5 | 0)) {
    break label$5
   }
   $7 = $5 << 2 | 0;
   label$8 : {
    $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$8) {
     break label$8
    }
    $8 = $8 + 184 | 0;
    HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 1 | 0;
   }
   $7 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($7, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$9 : {
    $8 = HEAP32[($2 + 288 | 0) >> 2] | 0;
    if (!$8) {
     break label$9
    }
    __memcpy($7 | 0, $8 | 0, (HEAP32[($2 + 280 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
    label$10 : {
     $8 = HEAP32[($2 + 288 | 0) >> 2] | 0;
     if (!$8) {
      break label$10
     }
     $6 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$6) {
      break label$10
     }
     $6 = $6 + 184 | 0;
     HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($8, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($2 + 284 | 0) >> 2] = $5;
   HEAP32[($2 + 288 | 0) >> 2] = $7;
   $3 = HEAP32[($2 + 280 | 0) >> 2] | 0;
  }
  HEAP32[((HEAP32[($2 + 288 | 0) >> 2] | 0) + ($3 << 2 | 0) | 0) >> 2] = $4;
  HEAP32[($2 + 280 | 0) >> 2] = (HEAP32[($2 + 280 | 0) >> 2] | 0) + 1 | 0;
 }
 
 function ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $17 = Math_fround(0), $8 = 0, $14 = Math_fround(0), $18 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $15 = Math_fround(0), $4 = 0, $9 = 0, $6 = 0, $16 = 0, i64toi32_i32$4 = 0, $10 = 0, $19 = Math_fround(0), $20 = Math_fround(0), $11 = 0, $6$hi = 0, $21 = Math_fround(0), i64toi32_i32$3 = 0, $42 = 0, $31 = 0, $36 = 0, $57 = 0, $636 = 0, $641 = 0, $646 = 0, $651 = 0, $656 = 0, $662 = 0, $665 = 0, $677 = 0, $692 = 0, $723 = 0, $724 = Math_fround(0), $725 = Math_fround(0);
  $4 = __stack_pointer - 112 | 0;
  __stack_pointer = $4;
  $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  HEAP32[($5 + 18280 | 0) >> 2] = $1;
  i64toi32_i32$2 = $0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $31 = i64toi32_i32$0;
  i64toi32_i32$0 = $5 + 18292 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $31;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $36 = i64toi32_i32$1;
  i64toi32_i32$1 = $5 + 18300 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $36;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $2 = $2 ? $2 : $0;
  i64toi32_i32$2 = $2;
  i64toi32_i32$0 = HEAP32[$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2 + 4 | 0) >> 2] | 0;
  $6 = i64toi32_i32$0;
  $6$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $3 = HEAP32[($5 + 18252 | 0) >> 2] | 0 | $3 | 0;
  HEAP32[($5 + 18284 | 0) >> 2] = $3;
  HEAP32[($5 + 18288 | 0) >> 2] = 0;
  $57 = i64toi32_i32$1;
  i64toi32_i32$1 = $5 + 18316 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $57;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$1 = $5 + 18308 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $6;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $2 = HEAP32[($5 + 16116 | 0) >> 2] | 0;
  label$1 : {
   if (!$1) {
    break label$1
   }
   label$2 : {
    if ((HEAP32[($5 + 16192 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
     break label$2
    }
    HEAP32[($5 + 16196 | 0) >> 2] = $1;
   }
   label$3 : {
    if ((HEAP32[($5 + 16232 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
     break label$3
    }
    HEAP8[($5 + 16236 | 0) >> 0] = 1;
   }
   if ($3 & 8 | 0) {
    break label$1
   }
   $8 = $2 + 386 | 0;
   $9 = HEAP32[($2 + 380 | 0) >> 2] | 0;
   HEAP16[$8 >> 1] = HEAPU16[$8 >> 1] | 0 | (1 << $9 | 0) | 0;
   label$4 : {
    $10 = HEAP32[($5 + 18652 | 0) >> 2] | 0;
    if (($10 | 0) == ($1 | 0)) {
     break label$4
    }
    if (!(HEAPU8[($5 + 18712 | 0) >> 0] | 0)) {
     break label$1
    }
   }
   $8 = HEAP32[($5 + 18648 | 0) >> 2] | 0;
   if ((HEAP32[($8 + 844 | 0) >> 2] | 0 | 0) != (HEAP32[($2 + 844 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   label$5 : {
    $11 = ($2 | 0) == ($8 | 0);
    if ($11) {
     break label$5
    }
    if (!((HEAP32[($8 + 8 | 0) >> 2] | 0 | (HEAP32[($2 + 8 | 0) >> 2] | 0) | 0) & 8388608 | 0)) {
     break label$1
    }
   }
   $12 = Math_fround(HEAPF32[($5 + 18320 | 0) >> 2]);
   $13 = Math_fround(HEAPF32[($5 + 18316 | 0) >> 2]);
   $14 = Math_fround(HEAPF32[($5 + 18312 | 0) >> 2]);
   $15 = Math_fround(HEAPF32[($5 + 18308 | 0) >> 2]);
   label$6 : {
    label$7 : {
     if (HEAPU8[($5 + 18713 | 0) >> 0] | 0) {
      break label$7
     }
     $16 = 0;
     break label$6;
    }
    $16 = 1;
    if ((HEAP32[($5 + 18704 | 0) >> 2] | 0 | 0) != ($9 | 0)) {
     break label$6
    }
    if ($3 & 4 | 0) {
     break label$6
    }
    label$8 : {
     $8 = $3 & 16 | 0;
     if (!$8) {
      break label$8
     }
     if (HEAP32[($5 + 18716 | 0) >> 2] | 0) {
      break label$6
     }
    }
    HEAP32[($5 + 18716 | 0) >> 2] = $1;
    $17 = Math_fround(HEAPF32[($2 + 308 | 0) >> 2]);
    $18 = Math_fround(HEAPF32[($2 + 312 | 0) >> 2]);
    HEAPF32[($5 + 18732 | 0) >> 2] = Math_fround($12 - $18);
    HEAPF32[($5 + 18728 | 0) >> 2] = Math_fround($13 - $17);
    HEAPF32[($5 + 18724 | 0) >> 2] = Math_fround($14 - $18);
    HEAPF32[($5 + 18720 | 0) >> 2] = Math_fround($15 - $17);
    if ($8) {
     break label$6
    }
    $16 = 0;
    HEAP8[($5 + 18713 | 0) >> 0] = 0;
    HEAP8[($5 + 18712 | 0) >> 0] = HEAPU8[($5 + 18737 | 0) >> 0] | 0;
   }
   label$9 : {
    if (!(HEAPU8[($5 + 18737 | 0) >> 0] | 0)) {
     break label$9
    }
    label$10 : {
     $8 = HEAP32[($5 + 18740 | 0) >> 2] | 0;
     if (!($8 & 1024 | 0)) {
      break label$10
     }
     label$11 : {
      if (($3 & 1029 | 0 | 0) == (1024 | 0)) {
       break label$11
      }
      if (!($8 & 512 | 0)) {
       break label$9
      }
     }
     label$12 : {
      switch ((HEAP32[($5 + 18800 | 0) >> 2] | 0) + 1 | 0 | 0) {
      case 2:
       label$15 : {
        if (HEAP32[($5 + 18944 | 0) >> 2] | 0) {
         break label$15
        }
        HEAP32[($5 + 18944 | 0) >> 2] = $1;
        HEAP32[($5 + 18940 | 0) >> 2] = $2;
        HEAP32[($5 + 18968 | 0) >> 2] = $3;
        HEAP32[($5 + 18948 | 0) >> 2] = HEAP32[($5 + 18248 | 0) >> 2] | 0;
        $17 = Math_fround(HEAPF32[($2 + 308 | 0) >> 2]);
        $18 = Math_fround(HEAPF32[($2 + 312 | 0) >> 2]);
        HEAPF32[($5 + 18964 | 0) >> 2] = Math_fround($12 - $18);
        HEAPF32[($5 + 18960 | 0) >> 2] = Math_fround($13 - $17);
        HEAPF32[($5 + 18956 | 0) >> 2] = Math_fround($14 - $18);
        HEAPF32[($5 + 18952 | 0) >> 2] = Math_fround($15 - $17);
       }
       $8 = (HEAP32[($5 + 18804 | 0) >> 2] | 0) + -1 | 0;
       HEAP32[($5 + 18804 | 0) >> 2] = $8;
       label$16 : {
        if ($8) {
         break label$16
        }
        HEAP32[($5 + 18808 | 0) >> 2] = $2;
        HEAP8[($5 + 18737 | 0) >> 0] = 0;
        HEAP32[($5 + 18812 | 0) >> 2] = $1;
        HEAP32[($5 + 18836 | 0) >> 2] = $3;
        HEAP32[($5 + 18816 | 0) >> 2] = HEAP32[($5 + 18248 | 0) >> 2] | 0;
        $17 = Math_fround(HEAPF32[($2 + 308 | 0) >> 2]);
        $18 = Math_fround(HEAPF32[($2 + 312 | 0) >> 2]);
        HEAP8[($5 + 18712 | 0) >> 0] = $16;
        HEAPF32[($5 + 18832 | 0) >> 2] = Math_fround($12 - $18);
        HEAPF32[($5 + 18828 | 0) >> 2] = Math_fround($13 - $17);
        HEAPF32[($5 + 18824 | 0) >> 2] = Math_fround($14 - $18);
        HEAPF32[($5 + 18820 | 0) >> 2] = Math_fround($15 - $17);
        break label$9;
       }
       if (($10 | 0) != ($1 | 0)) {
        break label$9
       }
       HEAP32[($5 + 18804 | 0) >> 2] = 1;
       break label$9;
      case 0:
       label$17 : {
        if (($10 | 0) != ($1 | 0)) {
         break label$17
        }
        if (!(HEAP32[($5 + 18812 | 0) >> 2] | 0)) {
         break label$9
        }
        HEAP8[($5 + 18712 | 0) >> 0] = $16;
        HEAP8[($5 + 18737 | 0) >> 0] = 0;
        break label$9;
       }
       HEAP32[($5 + 18808 | 0) >> 2] = $2;
       HEAP32[($5 + 18812 | 0) >> 2] = $1;
       HEAP32[($5 + 18836 | 0) >> 2] = $3;
       HEAP32[($5 + 18816 | 0) >> 2] = HEAP32[($5 + 18248 | 0) >> 2] | 0;
       $17 = Math_fround(HEAPF32[($2 + 308 | 0) >> 2]);
       $18 = Math_fround(HEAPF32[($2 + 312 | 0) >> 2]);
       HEAPF32[($5 + 18832 | 0) >> 2] = Math_fround($12 - $18);
       HEAPF32[($5 + 18828 | 0) >> 2] = Math_fround($13 - $17);
       HEAPF32[($5 + 18824 | 0) >> 2] = Math_fround($14 - $18);
       HEAPF32[($5 + 18820 | 0) >> 2] = Math_fround($15 - $17);
       break label$9;
      case 1:
       break label$12;
      default:
       break label$9;
      };
     }
     if (HEAP32[($5 + 18944 | 0) >> 2] | 0) {
      break label$9
     }
     HEAP32[($5 + 18944 | 0) >> 2] = $1;
     HEAP32[($5 + 18940 | 0) >> 2] = $2;
     HEAP8[($5 + 18737 | 0) >> 0] = 0;
     HEAP32[($5 + 18968 | 0) >> 2] = $3;
     HEAP32[($5 + 18948 | 0) >> 2] = HEAP32[($5 + 18248 | 0) >> 2] | 0;
     $17 = Math_fround(HEAPF32[($2 + 308 | 0) >> 2]);
     $18 = Math_fround(HEAPF32[($2 + 312 | 0) >> 2]);
     HEAP8[($5 + 18712 | 0) >> 0] = $16;
     HEAPF32[($5 + 18964 | 0) >> 2] = Math_fround($12 - $18);
     HEAPF32[($5 + 18960 | 0) >> 2] = Math_fround($13 - $17);
     HEAPF32[($5 + 18956 | 0) >> 2] = Math_fround($14 - $18);
     HEAPF32[($5 + 18952 | 0) >> 2] = Math_fround($15 - $17);
     break label$9;
    }
    if ((($10 | 0) != ($1 | 0) | (($8 & 16 | 0) >>> 4 | 0) | 0 | 0) != (1 | 0)) {
     break label$9
    }
    if ($3 & 4 | 0) {
     break label$9
    }
    label$18 : {
     $3 = $11 ? $5 + 18808 | 0 : $5 + 18896 | 0;
     if (!(ImGui__NavScoreItem_28ImGuiNavItemData__29($3 | 0) | 0)) {
      break label$18
     }
     $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     $9 = HEAP32[($8 + 16116 | 0) >> 2] | 0;
     HEAP32[($5 + ($11 ? 18808 : 18896) | 0) >> 2] = $9;
     HEAP32[($3 + 4 | 0) >> 2] = HEAP32[($8 + 18280 | 0) >> 2] | 0;
     HEAP32[($3 + 8 | 0) >> 2] = HEAP32[($8 + 18248 | 0) >> 2] | 0;
     HEAP32[($3 + 28 | 0) >> 2] = HEAP32[($8 + 18284 | 0) >> 2] | 0;
     $18 = Math_fround(HEAPF32[($8 + 18308 | 0) >> 2]);
     $19 = Math_fround(HEAPF32[($8 + 18312 | 0) >> 2]);
     $20 = Math_fround(HEAPF32[($8 + 18316 | 0) >> 2]);
     $17 = Math_fround(HEAPF32[($9 + 308 | 0) >> 2]);
     $21 = Math_fround(HEAPF32[($9 + 312 | 0) >> 2]);
     HEAPF32[($3 + 24 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8 + 18320 | 0) >> 2]) - $21);
     HEAPF32[($3 + 20 | 0) >> 2] = Math_fround($20 - $17);
     HEAPF32[($3 + 16 | 0) >> 2] = Math_fround($19 - $21);
     HEAPF32[($3 + 12 | 0) >> 2] = Math_fround($18 - $17);
    }
    if (!((HEAPU8[($5 + 18740 | 0) >> 0] | 0) & 32 | 0)) {
     break label$9
    }
    $17 = Math_fround(HEAPF32[($2 + 592 | 0) >> 2]);
    if (!($14 < $17)) {
     break label$9
    }
    $18 = Math_fround(HEAPF32[($2 + 584 | 0) >> 2]);
    if (!($12 > $18)) {
     break label$9
    }
    if (!($15 < Math_fround(HEAPF32[($2 + 588 | 0) >> 2]))) {
     break label$9
    }
    if (!($13 > Math_fround(HEAPF32[($2 + 580 | 0) >> 2]))) {
     break label$9
    }
    if (!(Math_fround(($12 < $18 ? $18 : $12 > $17 ? $17 : $12) - ($14 < $18 ? $18 : $14 > $17 ? $17 : $14)) >= Math_fround(Math_fround($12 - $14) * Math_fround(.699999988079071)))) {
     break label$9
    }
    $3 = $5 + 18852 | 0;
    if (!(ImGui__NavScoreItem_28ImGuiNavItemData__29($3 | 0) | 0)) {
     break label$9
    }
    ImGui__NavApplyItemToResult_28ImGuiNavItemData__29($3 | 0);
   }
   if ((HEAP32[($5 + 18652 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
    break label$1
   }
   label$19 : {
    if ((HEAP32[($5 + 18648 | 0) >> 2] | 0 | 0) == ($2 | 0)) {
     break label$19
    }
    $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    $8 = $3;
    label$20 : {
     if ((HEAP32[($3 + 18648 | 0) >> 2] | 0 | 0) == ($2 | 0)) {
      break label$20
     }
     $8 = $3;
     label$21 : {
      if (!((HEAPU8[($3 + 23536 | 0) >> 0] | 0) & 2 | 0)) {
       break label$21
      }
      HEAP32[$4 >> 2] = HEAP32[$2 >> 2] | 0;
      ImGui__DebugLog_28char_20const__2c_20____29(69806 | 0, $4 | 0);
      $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     }
     HEAP32[($3 + 18648 | 0) >> 2] = $2;
    }
    HEAP16[($3 + 18736 | 0) >> 1] = 0;
    HEAP8[($3 + 18713 | 0) >> 0] = 0;
    $3 = 1;
    label$22 : {
     if (HEAPU8[($8 + 18737 | 0) >> 0] | 0) {
      break label$22
     }
     $3 = (HEAPU8[($8 + 18713 | 0) >> 0] | 0 | 0) != (0 | 0);
    }
    HEAP8[($8 + 18712 | 0) >> 0] = $3;
   }
   $3 = HEAP32[($2 + 380 | 0) >> 2] | 0;
   HEAP8[($5 + 18708 | 0) >> 0] = 1;
   HEAP32[($5 + 18656 | 0) >> 2] = HEAP32[($5 + 18248 | 0) >> 2] | 0;
   HEAP32[($5 + 18704 | 0) >> 2] = $3;
   $17 = Math_fround(HEAPF32[($2 + 308 | 0) >> 2]);
   $3 = $2 + ($3 << 4 | 0) | 0;
   $18 = Math_fround(HEAPF32[($2 + 312 | 0) >> 2]);
   HEAPF32[($3 + 872 | 0) >> 2] = Math_fround($12 - $18);
   HEAPF32[($3 + 868 | 0) >> 2] = Math_fround($13 - $17);
   HEAPF32[($3 + 864 | 0) >> 2] = Math_fround($14 - $18);
   HEAPF32[($3 + 860 | 0) >> 2] = Math_fround($15 - $17);
  }
  HEAP32[($5 + 18260 | 0) >> 2] = 0;
  label$23 : {
   label$24 : {
    label$25 : {
     label$26 : {
      label$27 : {
       if (!(Math_fround(HEAPF32[($2 + 584 | 0) >> 2]) < Math_fround(HEAPF32[($0 + 12 | 0) >> 2]))) {
        break label$27
       }
       if (!(Math_fround(HEAPF32[($2 + 592 | 0) >> 2]) > Math_fround(HEAPF32[($0 + 4 | 0) >> 2]))) {
        break label$27
       }
       if (!(Math_fround(HEAPF32[($2 + 580 | 0) >> 2]) < Math_fround(HEAPF32[($0 + 8 | 0) >> 2]))) {
        break label$27
       }
       $3 = 1;
       if (Math_fround(HEAPF32[($2 + 588 | 0) >> 2]) > Math_fround(HEAPF32[$0 >> 2])) {
        break label$26
       }
      }
      label$28 : {
       if (!$1) {
        break label$28
       }
       $3 = 0;
       if ((HEAP32[($5 + 16192 | 0) >> 2] | 0 | 0) == ($1 | 0)) {
        break label$25
       }
       if ((HEAP32[($5 + 18652 | 0) >> 2] | 0 | 0) == ($1 | 0)) {
        break label$25
       }
      }
      $3 = 0;
      if (!(HEAPU8[($5 + 23484 | 0) >> 0] | 0)) {
       break label$23
      }
     }
     if (!$1) {
      break label$24
     }
    }
    if ((HEAP32[($5 + 18256 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
     break label$24
    }
    $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    HEAP32[($4 + 104 | 0) >> 2] = HEAP32[($1 + 18336 | 0) >> 2] | 0;
    i64toi32_i32$2 = $1 + 18328 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $636 = i64toi32_i32$0;
    i64toi32_i32$0 = $4 + 96 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $636;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $1 + 18320 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $641 = i64toi32_i32$1;
    i64toi32_i32$1 = $4 + 88 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $641;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $1 + 18312 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $646 = i64toi32_i32$0;
    i64toi32_i32$0 = $4 + 80 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $646;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $1 + 18304 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $651 = i64toi32_i32$1;
    i64toi32_i32$1 = $4 + 72 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $651;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $1 + 18296 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $656 = i64toi32_i32$0;
    i64toi32_i32$0 = $4 + 64 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $656;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $1 + 18288 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $662 = i64toi32_i32$1;
    i64toi32_i32$1 = ($4 + 48 | 0) + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $662;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $1;
    i64toi32_i32$0 = HEAP32[($1 + 18280 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1 + 18284 | 0) >> 2] | 0;
    $665 = i64toi32_i32$0;
    i64toi32_i32$0 = $4;
    HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] = $665;
    HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[($1 + 18256 | 0) >> 2] = 0;
    $8 = GetViewportDrawList_28ImGuiViewportP__2c_20unsigned_20long_2c_20char_20const__29(HEAP32[((HEAP32[($1 + 16116 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0 | 0, 1 | 0, 67101 | 0) | 0;
    $2 = (i64toi32_i32$0 + 32 | 0) + 8 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 + 68 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $677 = i64toi32_i32$1;
    i64toi32_i32$1 = $2;
    HEAP32[$2 >> 2] = $677;
    HEAP32[($2 + 4 | 0) >> 2] = i64toi32_i32$0;
    $14 = Math_fround(Math_fround(HEAPF32[$2 >> 2]) + Math_fround(3.0));
    HEAPF32[$2 >> 2] = $14;
    $9 = $4 + 44 | 0;
    $12 = Math_fround(Math_fround(HEAPF32[$9 >> 2]) + Math_fround(3.0));
    HEAPF32[$9 >> 2] = $12;
    i64toi32_i32$2 = $4;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 60 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
    $692 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] = $692;
    HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] = i64toi32_i32$1;
    $15 = Math_fround(Math_fround(HEAPF32[(i64toi32_i32$0 + 36 | 0) >> 2]) + Math_fround(-3.0));
    HEAPF32[(i64toi32_i32$0 + 36 | 0) >> 2] = $15;
    $13 = Math_fround(Math_fround(HEAPF32[(i64toi32_i32$0 + 32 | 0) >> 2]) + Math_fround(-3.0));
    HEAPF32[(i64toi32_i32$0 + 32 | 0) >> 2] = $13;
    i64toi32_i32$2 = $1 + 3520 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $6 = i64toi32_i32$1;
    $6$hi = i64toi32_i32$0;
    i64toi32_i32$1 = $4;
    HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = $6;
    HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = i64toi32_i32$0;
    $17 = (wasm2js_scratch_store_i32(2, $6), wasm2js_scratch_load_f32());
    HEAPF32[(i64toi32_i32$1 + 16 | 0) >> 2] = $13 > $17 ? $13 : $14 < $17 ? $14 : $17;
    $723 = i64toi32_i32$1;
    $724 = $15;
    $725 = $12;
    i64toi32_i32$2 = $6;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $42 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $42 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $14 = (wasm2js_scratch_store_i32(2, $42), wasm2js_scratch_load_f32());
    HEAPF32[($723 + 20 | 0) >> 2] = $15 > $14 ? $724 : $12 < $14 ? $725 : $14;
    ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29($8 | 0, $4 + 32 | 0 | 0, $2 | 0, -16711936 | 0, Math_fround(Math_fround(0.0)), 0 | 0, Math_fround(Math_fround(1.0)));
    ImDrawList__AddLine_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_29($8 | 0, $4 + 24 | 0 | 0, $4 + 16 | 0 | 0, -16711936 | 0, Math_fround(Math_fround(1.0)));
   }
   label$29 : {
    if (!$3) {
     break label$29
    }
    HEAP32[($5 + 18288 | 0) >> 2] = HEAP32[($5 + 18288 | 0) >> 2] | 0 | 512 | 0;
   }
   $3 = 1;
   $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $15 = Math_fround(HEAPF32[($1 + 3520 | 0) >> 2]);
   $14 = Math_fround(HEAPF32[$0 >> 2]);
   $2 = HEAP32[($1 + 16116 | 0) >> 2] | 0;
   $12 = Math_fround(HEAPF32[($2 + 580 | 0) >> 2]);
   $12 = $14 >= $12 ? $14 : $12;
   $14 = Math_fround(HEAPF32[($1 + 14496 | 0) >> 2]);
   if (!($15 >= Math_fround($12 - $14))) {
    break label$23
   }
   $18 = Math_fround(HEAPF32[($1 + 3524 | 0) >> 2]);
   $13 = Math_fround(HEAPF32[($0 + 4 | 0) >> 2]);
   $17 = Math_fround(HEAPF32[($2 + 584 | 0) >> 2]);
   $20 = $13 >= $17 ? $13 : $17;
   $19 = Math_fround(HEAPF32[($1 + 14500 | 0) >> 2]);
   if (!($18 >= Math_fround($20 - $19))) {
    break label$23
   }
   $13 = Math_fround(HEAPF32[($0 + 8 | 0) >> 2]);
   $17 = Math_fround(HEAPF32[($2 + 588 | 0) >> 2]);
   $13 = $13 < $17 ? $13 : $17;
   if (!($15 < Math_fround($13 + $14))) {
    break label$23
   }
   $14 = Math_fround(HEAPF32[($0 + 12 | 0) >> 2]);
   $15 = Math_fround(HEAPF32[($2 + 592 | 0) >> 2]);
   $14 = $14 < $15 ? $14 : $15;
   if (!($18 < Math_fround($14 + $19))) {
    break label$23
   }
   $1 = HEAP32[($1 + 18596 | 0) >> 2] | 0;
   $15 = Math_fround(HEAPF32[($1 + 12 | 0) >> 2]);
   if (!($20 < Math_fround($15 + Math_fround(HEAPF32[($1 + 20 | 0) >> 2])))) {
    break label$23
   }
   if (!($14 > $15)) {
    break label$23
   }
   $14 = Math_fround(HEAPF32[($1 + 8 | 0) >> 2]);
   if (!($12 < Math_fround($14 + Math_fround(HEAPF32[($1 + 16 | 0) >> 2])))) {
    break label$23
   }
   if (!($13 > $14)) {
    break label$23
   }
   $3 = 1;
   HEAP32[($5 + 18288 | 0) >> 2] = HEAP32[($5 + 18288 | 0) >> 2] | 0 | 1 | 0;
  }
  __stack_pointer = $4 + 112 | 0;
  return $3 | 0;
 }
 
 function CalcNextScrollFromScrollTargetAndClamp_28ImGuiWindow__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $5 = Math_fround(0), $4 = Math_fround(0), i64toi32_i32$1 = 0, $8 = Math_fround(0), $10 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $2 = 0, $2$hi = 0, $9 = 0, i64toi32_i32$3 = 0, $17 = 0;
  i64toi32_i32$2 = $1;
  i64toi32_i32$0 = HEAP32[($1 + 168 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1 + 172 | 0) >> 2] | 0;
  $2 = i64toi32_i32$0;
  $2$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    $3 = Math_fround(HEAPF32[($1 + 184 | 0) >> 2]);
    if ($3 < Math_fround(3402823466385288598117041.0e14)) {
     break label$2
    }
    i64toi32_i32$1 = $2$hi;
    $3 = (wasm2js_scratch_store_i32(2, $2), wasm2js_scratch_load_f32());
    break label$1;
   }
   $4 = Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 128 | 0) >> 2]) + Math_fround(HEAPF32[($1 + 144 | 0) >> 2])) + Math_fround(HEAPF32[($1 + 136 | 0) >> 2]));
   $5 = Math_fround(HEAPF32[($1 + 80 | 0) >> 2]);
   $6 = Math_fround(HEAPF32[($1 + 192 | 0) >> 2]);
   label$3 : {
    $7 = Math_fround(HEAPF32[($1 + 200 | 0) >> 2]);
    if (!($7 > Math_fround(0.0))) {
     break label$3
    }
    label$4 : {
     if (!(Math_fround($7 + Math_fround(0.0)) >= $3)) {
      break label$4
     }
     $3 = Math_fround(Math_fround($3 * $6) + Math_fround(0.0));
     break label$3;
    }
    $8 = Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 176 | 0) >> 2]) + $5) - $4);
    if (!(Math_fround($8 - $7) <= $3)) {
     break label$3
    }
    $3 = Math_fround(Math_fround(Math_fround($8 - $3) * $6) + $3);
   }
   $3 = Math_fround($3 - Math_fround($6 * Math_fround($5 - $4)));
  }
  $6 = Math_fround(HEAPF32[($1 + 148 | 0) >> 2]);
  $4 = Math_fround(HEAPF32[($1 + 132 | 0) >> 2]);
  $5 = Math_fround(HEAPF32[($1 + 140 | 0) >> 2]);
  $9 = HEAPU8[($1 + 222 | 0) >> 0] | 0;
  label$5 : {
   label$6 : {
    $3 = $3 >= Math_fround(0.0) ? $3 : Math_fround(0.0);
    if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
     break label$6
    }
    $10 = ~~$3;
    break label$5;
   }
   $10 = -2147483648;
  }
  $3 = Math_fround($10 | 0);
  HEAPF32[$0 >> 2] = $3;
  label$7 : {
   if ($9 & 255 | 0) {
    break label$7
   }
   if (HEAPU8[($1 + 224 | 0) >> 0] | 0) {
    break label$7
   }
   $7 = Math_fround(HEAPF32[($1 + 176 | 0) >> 2]);
   HEAPF32[$0 >> 2] = $7 > $3 ? $3 : $7;
  }
  label$8 : {
   label$9 : {
    $3 = Math_fround(HEAPF32[($1 + 188 | 0) >> 2]);
    if ($3 < Math_fround(3402823466385288598117041.0e14)) {
     break label$9
    }
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $2;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $17 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $17 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3 = (wasm2js_scratch_store_i32(2, $17), wasm2js_scratch_load_f32());
    break label$8;
   }
   $4 = Math_fround(Math_fround($4 + $6) + $5);
   $6 = Math_fround(HEAPF32[($1 + 196 | 0) >> 2]);
   label$10 : {
    label$11 : {
     $7 = Math_fround(HEAPF32[($1 + 204 | 0) >> 2]);
     if ($7 > Math_fround(0.0)) {
      break label$11
     }
     $5 = Math_fround(HEAPF32[($1 + 84 | 0) >> 2]);
     break label$10;
    }
    $5 = Math_fround(HEAPF32[($1 + 84 | 0) >> 2]);
    label$12 : {
     if (!(Math_fround($7 + Math_fround(0.0)) >= $3)) {
      break label$12
     }
     $3 = Math_fround(Math_fround($3 * $6) + Math_fround(0.0));
     break label$10;
    }
    $8 = Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 180 | 0) >> 2]) + $5) - $4);
    if (!(Math_fround($8 - $7) <= $3)) {
     break label$10
    }
    $3 = Math_fround(Math_fround(Math_fround($8 - $3) * $6) + $3);
   }
   $3 = Math_fround($3 - Math_fround($6 * Math_fround($5 - $4)));
  }
  label$13 : {
   label$14 : {
    $3 = $3 >= Math_fround(0.0) ? $3 : Math_fround(0.0);
    if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
     break label$14
    }
    $10 = ~~$3;
    break label$13;
   }
   $10 = -2147483648;
  }
  $3 = Math_fround($10 | 0);
  HEAPF32[($0 + 4 | 0) >> 2] = $3;
  label$15 : {
   if ($9 & 255 | 0) {
    break label$15
   }
   if (HEAPU8[($1 + 224 | 0) >> 0] | 0) {
    break label$15
   }
   $6 = Math_fround(HEAPF32[($1 + 180 | 0) >> 2]);
   HEAPF32[($0 + 4 | 0) >> 2] = $6 > $3 ? $3 : $6;
  }
 }
 
 function ImGui__RenderWindowOuterBorders_28ImGuiWindow__29($0) {
  $0 = $0 | 0;
  var $6 = Math_fround(0), $2 = Math_fround(0), $5 = 0, $7 = 0, $9 = 0, $1 = 0, $8 = Math_fround(0), $15 = Math_fround(0), $3 = 0, $16 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $13 = Math_fround(0), $12 = Math_fround(0), $4 = Math_fround(0), $14 = Math_fround(0);
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = Math_fround(HEAPF32[($0 + 120 | 0) >> 2]);
  $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  label$1 : {
   $4 = Math_fround(HEAPF32[($0 + 124 | 0) >> 2]);
   if (!($4 > Math_fround(0.0))) {
    break label$1
   }
   if ((HEAPU8[($0 + 8 | 0) >> 0] | 0) & 128 | 0) {
    break label$1
   }
   $5 = HEAP32[($0 + 672 | 0) >> 2] | 0;
   $6 = Math_fround(HEAPF32[($0 + 72 | 0) >> 2]);
   $7 = $0 + 64 | 0;
   $8 = Math_fround(HEAPF32[$7 >> 2]);
   HEAPF32[($1 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($0 + 68 | 0) >> 2]) + Math_fround(HEAPF32[($0 + 76 | 0) >> 2]));
   HEAPF32[($1 + 8 | 0) >> 2] = Math_fround($8 + $6);
   label$2 : {
    label$3 : {
     $6 = Math_fround(HEAPF32[($3 + 14680 | 0) >> 2]);
     $6 = Math_fround(Math_fround(($6 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($6, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($6)) < Math_fround(2147483648.0))) {
      break label$3
     }
     $9 = ~~$6;
     break label$2;
    }
    $9 = -2147483648;
   }
   $9 = $9 << 8 | 0;
   label$4 : {
    label$5 : {
     $6 = Math_fround(HEAPF32[($3 + 14676 | 0) >> 2]);
     $6 = Math_fround(Math_fround(($6 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($6, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($6)) < Math_fround(2147483648.0))) {
      break label$5
     }
     $10 = ~~$6;
     break label$4;
    }
    $10 = -2147483648;
   }
   $9 = $9 | $10 | 0;
   label$6 : {
    label$7 : {
     $6 = Math_fround(HEAPF32[($3 + 14684 | 0) >> 2]);
     $6 = Math_fround(Math_fround(($6 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($6, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($6)) < Math_fround(2147483648.0))) {
      break label$7
     }
     $10 = ~~$6;
     break label$6;
    }
    $10 = -2147483648;
   }
   $9 = $9 | ($10 << 16 | 0) | 0;
   label$8 : {
    label$9 : {
     $6 = Math_fround(Math_fround(HEAPF32[($3 + 14688 | 0) >> 2]) * Math_fround(HEAPF32[($3 + 14396 | 0) >> 2]));
     $6 = Math_fround(Math_fround(($6 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($6, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($6)) < Math_fround(2147483648.0))) {
      break label$9
     }
     $10 = ~~$6;
     break label$8;
    }
    $10 = -2147483648;
   }
   ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29($5 | 0, $7 | 0, $1 + 8 | 0 | 0, $9 | ($10 << 24 | 0) | 0 | 0, Math_fround($2), 0 | 0, Math_fround($4));
  }
  label$10 : {
   $7 = HEAP8[($0 + 230 | 0) >> 0] | 0;
   if (($7 | 0) == (-1 | 0)) {
    break label$10
   }
   $11 = Math_fround(HEAPF32[($0 + 68 | 0) >> 2]);
   $12 = Math_fround(Math_fround($11 + Math_fround(HEAPF32[($0 + 76 | 0) >> 2])) + Math_fround(-1.0));
   $5 = Math_imul($7, 28);
   $9 = $5 + 72704 | 0;
   $13 = Math_fround(HEAPF32[($0 + 64 | 0) >> 2]);
   $14 = Math_fround(Math_fround($13 + Math_fround(HEAPF32[($0 + 72 | 0) >> 2])) + Math_fround(-1.0));
   $15 = Math_fround(0.0);
   $16 = Math_fround(0.0);
   $6 = Math_fround(0.0);
   $8 = Math_fround(0.0);
   label$11 : {
    label$12 : {
     switch ($7 | 0) {
     case 0:
      $15 = Math_fround($12 - $2);
      $16 = Math_fround($13 + Math_fround(0.0));
      $6 = Math_fround($2 + $11);
      $8 = $13;
      break label$11;
     case 1:
      $15 = Math_fround($12 - $2);
      $16 = Math_fround($14 + Math_fround(0.0));
      $6 = Math_fround($2 + $11);
      $8 = $14;
      break label$11;
     case 2:
      $15 = Math_fround($11 + Math_fround(0.0));
      $16 = Math_fround($14 - $2);
      $8 = Math_fround($2 + $13);
      $6 = $11;
      break label$11;
     case 3:
      break label$12;
     default:
      break label$11;
     };
    }
    $15 = Math_fround($12 + Math_fround(0.0));
    $16 = Math_fround($14 - $2);
    $8 = Math_fround($2 + $13);
    $6 = $12;
   }
   $7 = HEAP32[($0 + 672 | 0) >> 2] | 0;
   $11 = Math_fround($15 - $6);
   $12 = Math_fround($2 * Math_fround(HEAPF32[($9 + 4 | 0) >> 2]));
   HEAPF32[($1 + 12 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($11 * Math_fround(HEAPF32[($5 + 72716 | 0) >> 2])) + $6) + Math_fround(.5)) + $12);
   $16 = Math_fround($16 - $8);
   $13 = Math_fround($2 * Math_fround(HEAPF32[$9 >> 2]));
   HEAPF32[($1 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($16 * Math_fround(HEAPF32[($5 + 72712 | 0) >> 2])) + $8) + Math_fround(.5)) + $13);
   $15 = Math_fround(HEAPF32[($5 + 72728 | 0) >> 2]);
   ImDrawList__PathArcTo_28ImVec2_20const__2c_20float_2c_20float_2c_20float_2c_20int_29($7 | 0, $1 + 8 | 0 | 0, Math_fround($2), Math_fround(Math_fround($15 + Math_fround(-.7853981852531433))), Math_fround($15), 0 | 0);
   $7 = HEAP32[($0 + 672 | 0) >> 2] | 0;
   HEAPF32[($1 + 12 | 0) >> 2] = Math_fround($12 + Math_fround(Math_fround(Math_fround($11 * Math_fround(HEAPF32[($5 + 72724 | 0) >> 2])) + $6) + Math_fround(.5)));
   HEAPF32[($1 + 8 | 0) >> 2] = Math_fround($13 + Math_fround(Math_fround(Math_fround($16 * Math_fround(HEAPF32[($5 + 72720 | 0) >> 2])) + $8) + Math_fround(.5)));
   ImDrawList__PathArcTo_28ImVec2_20const__2c_20float_2c_20float_2c_20float_2c_20int_29($7 | 0, $1 + 8 | 0 | 0, Math_fround($2), Math_fround($15), Math_fround(Math_fround($15 + Math_fround(.7853981852531433))), 0 | 0);
   label$16 : {
    label$17 : {
     $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     $2 = Math_fround(HEAPF32[($5 + 15064 | 0) >> 2]);
     $2 = Math_fround(Math_fround(($2 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($2, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($2)) < Math_fround(2147483648.0))) {
      break label$17
     }
     $7 = ~~$2;
     break label$16;
    }
    $7 = -2147483648;
   }
   $7 = $7 << 8 | 0;
   label$18 : {
    label$19 : {
     $2 = Math_fround(HEAPF32[($5 + 15060 | 0) >> 2]);
     $2 = Math_fround(Math_fround(($2 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($2, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($2)) < Math_fround(2147483648.0))) {
      break label$19
     }
     $9 = ~~$2;
     break label$18;
    }
    $9 = -2147483648;
   }
   $7 = $7 | $9 | 0;
   label$20 : {
    label$21 : {
     $2 = Math_fround(HEAPF32[($5 + 15068 | 0) >> 2]);
     $2 = Math_fround(Math_fround(($2 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($2, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($2)) < Math_fround(2147483648.0))) {
      break label$21
     }
     $9 = ~~$2;
     break label$20;
    }
    $9 = -2147483648;
   }
   $7 = $7 | ($9 << 16 | 0) | 0;
   label$22 : {
    label$23 : {
     $2 = Math_fround(Math_fround(HEAPF32[($5 + 15072 | 0) >> 2]) * Math_fround(HEAPF32[($5 + 14396 | 0) >> 2]));
     $2 = Math_fround(Math_fround(($2 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($2, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($2)) < Math_fround(2147483648.0))) {
      break label$23
     }
     $9 = ~~$2;
     break label$22;
    }
    $9 = -2147483648;
   }
   $5 = HEAP32[($0 + 672 | 0) >> 2] | 0;
   ImDrawList__AddPolyline_28ImVec2_20const__2c_20int_2c_20unsigned_20int_2c_20int_2c_20float_29($5 | 0, HEAP32[($5 + 92 | 0) >> 2] | 0 | 0, HEAP32[($5 + 84 | 0) >> 2] | 0 | 0, $7 | ($9 << 24 | 0) | 0 | 0, 0 | 0, Math_fround(Math_fround(Math_max($4, Math_fround(2.0)))));
   HEAP32[($5 + 84 | 0) >> 2] = 0;
  }
  label$24 : {
   $2 = Math_fround(HEAPF32[($3 + 14468 | 0) >> 2]);
   if (!($2 > Math_fround(0.0))) {
    break label$24
   }
   if ((HEAPU8[($0 + 8 | 0) >> 0] | 0) & 1 | 0) {
    break label$24
   }
   if ((HEAPU8[($0 + 905 | 0) >> 0] | 0) & 1 | 0) {
    break label$24
   }
   $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $6 = Math_fround(Math_fround(Math_fround(HEAPF32[($5 + 15492 | 0) >> 2]) * Math_fround(HEAPF32[($0 + 660 | 0) >> 2])) * Math_fround(HEAPF32[($0 + 664 | 0) >> 2]));
   $15 = Math_fround(HEAPF32[($0 + 68 | 0) >> 2]);
   label$25 : {
    $3 = HEAP32[($0 + 820 | 0) >> 2] | 0;
    if (!$3) {
     break label$25
    }
    $6 = Math_fround($6 * Math_fround(HEAPF32[($3 + 660 | 0) >> 2]));
   }
   $8 = Math_fround(HEAPF32[($5 + 14460 | 0) >> 2]);
   $3 = HEAP32[($0 + 672 | 0) >> 2] | 0;
   $16 = Math_fround(HEAPF32[($0 + 64 | 0) >> 2]);
   HEAPF32[($1 + 8 | 0) >> 2] = Math_fround($4 + $16);
   $6 = Math_fround(Math_fround($15 + Math_fround(Math_fround($8 + $8) + $6)) + Math_fround(-1.0));
   HEAPF32[($1 + 12 | 0) >> 2] = $6;
   $8 = Math_fround(HEAPF32[($0 + 72 | 0) >> 2]);
   HEAPF32[($1 + 4 | 0) >> 2] = $6;
   HEAPF32[$1 >> 2] = Math_fround(Math_fround($16 + $8) - $4);
   label$26 : {
    label$27 : {
     $6 = Math_fround(HEAPF32[($5 + 14680 | 0) >> 2]);
     $6 = Math_fround(Math_fround(($6 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($6, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($6)) < Math_fround(2147483648.0))) {
      break label$27
     }
     $0 = ~~$6;
     break label$26;
    }
    $0 = -2147483648;
   }
   $0 = $0 << 8 | 0;
   label$28 : {
    label$29 : {
     $6 = Math_fround(HEAPF32[($5 + 14676 | 0) >> 2]);
     $6 = Math_fround(Math_fround(($6 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($6, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($6)) < Math_fround(2147483648.0))) {
      break label$29
     }
     $7 = ~~$6;
     break label$28;
    }
    $7 = -2147483648;
   }
   $0 = $0 | $7 | 0;
   label$30 : {
    label$31 : {
     $6 = Math_fround(HEAPF32[($5 + 14684 | 0) >> 2]);
     $6 = Math_fround(Math_fround(($6 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($6, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($6)) < Math_fround(2147483648.0))) {
      break label$31
     }
     $7 = ~~$6;
     break label$30;
    }
    $7 = -2147483648;
   }
   $0 = $0 | ($7 << 16 | 0) | 0;
   label$32 : {
    label$33 : {
     $6 = Math_fround(Math_fround(HEAPF32[($5 + 14688 | 0) >> 2]) * Math_fround(HEAPF32[($5 + 14396 | 0) >> 2]));
     $6 = Math_fround(Math_fround(($6 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($6, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($6)) < Math_fround(2147483648.0))) {
      break label$33
     }
     $5 = ~~$6;
     break label$32;
    }
    $5 = -2147483648;
   }
   ImDrawList__AddLine_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_29($3 | 0, $1 + 8 | 0 | 0, $1 | 0, $0 | ($5 << 24 | 0) | 0 | 0, Math_fround($2));
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function ImGui__BeginDockableDragDropSource_28ImGuiWindow__29($0) {
  $0 = $0 | 0;
  var $3 = Math_fround(0), $5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $1 = 0, $2 = 0, $6 = 0, $7 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = Math_fround(0), $19 = 0, $20 = 0, $50 = 0, $53 = 0, $56 = 0, $59 = 0;
  $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  HEAP32[($1 + 18280 | 0) >> 2] = HEAP32[($0 + 156 | 0) >> 2] | 0;
  $2 = HEAP32[($0 + 836 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (HEAPU8[($1 + 97 | 0) >> 0] | 0) {
     break label$2
    }
    $3 = Math_fround(HEAPF32[($1 + 16212 | 0) >> 2]);
    if (!($3 >= Math_fround(0.0))) {
     break label$1
    }
    $4 = Math_fround(HEAPF32[($1 + 16216 | 0) >> 2]);
    if (!($4 >= Math_fround(0.0))) {
     break label$1
    }
    if (!($3 < Math_fround(HEAPF32[($2 + 80 | 0) >> 2]))) {
     break label$1
    }
    $3 = Math_fround(HEAPF32[($1 + 14460 | 0) >> 2]);
    if (!($4 < Math_fround(Math_fround($3 + $3) + Math_fround(HEAPF32[($1 + 15488 | 0) >> 2])))) {
     break label$1
    }
   }
   if (!(ImGui__BeginDragDropSource_28int_29(37 | 0) | 0)) {
    break label$1
   }
   $0 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 72852 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 72853 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 72854 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 72855 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 72856 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 72857 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 72858 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 72859 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $50 = i64toi32_i32$0;
   i64toi32_i32$0 = $0 + 19100 | 0;
   $15 = $50;
   HEAP8[i64toi32_i32$0 >> 0] = $15;
   HEAP8[(i64toi32_i32$0 + 1 | 0) >> 0] = $15 >>> 8 | 0;
   HEAP8[(i64toi32_i32$0 + 2 | 0) >> 0] = $15 >>> 16 | 0;
   HEAP8[(i64toi32_i32$0 + 3 | 0) >> 0] = $15 >>> 24 | 0;
   HEAP8[(i64toi32_i32$0 + 4 | 0) >> 0] = i64toi32_i32$1;
   HEAP8[(i64toi32_i32$0 + 5 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
   HEAP8[(i64toi32_i32$0 + 6 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
   HEAP8[(i64toi32_i32$0 + 7 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 72844 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 72845 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 72846 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 72847 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 72848 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 72849 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 72850 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 72851 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $53 = i64toi32_i32$1;
   i64toi32_i32$1 = $0 + 19092 | 0;
   $16 = $53;
   HEAP8[i64toi32_i32$1 >> 0] = $16;
   HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $16 >>> 8 | 0;
   HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $16 >>> 16 | 0;
   HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $16 >>> 24 | 0;
   HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
   HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
   HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
   HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 72836 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 72837 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 72838 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 72839 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 72840 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 72841 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 72842 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 72843 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $56 = i64toi32_i32$0;
   i64toi32_i32$0 = $0 + 19084 | 0;
   $17 = $56;
   HEAP8[i64toi32_i32$0 >> 0] = $17;
   HEAP8[(i64toi32_i32$0 + 1 | 0) >> 0] = $17 >>> 8 | 0;
   HEAP8[(i64toi32_i32$0 + 2 | 0) >> 0] = $17 >>> 16 | 0;
   HEAP8[(i64toi32_i32$0 + 3 | 0) >> 0] = $17 >>> 24 | 0;
   HEAP8[(i64toi32_i32$0 + 4 | 0) >> 0] = i64toi32_i32$1;
   HEAP8[(i64toi32_i32$0 + 5 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
   HEAP8[(i64toi32_i32$0 + 6 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
   HEAP8[(i64toi32_i32$0 + 7 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 72828 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 72829 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 72830 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 72831 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 72832 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 72833 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 72834 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 72835 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $59 = i64toi32_i32$1;
   i64toi32_i32$1 = $0 + 19076 | 0;
   $18 = $59;
   HEAP8[i64toi32_i32$1 >> 0] = $18;
   HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $18 >>> 8 | 0;
   HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $18 >>> 16 | 0;
   HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $18 >>> 24 | 0;
   HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
   HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
   HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
   HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
   HEAP8[($0 + 19108 | 0) >> 0] = 0;
   $5 = $0;
   label$3 : {
    if ((HEAP32[($0 + 19160 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$3
    }
    $5 = $0 + 184 | 0;
    HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1 | 0;
    $5 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](0, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
    label$4 : {
     $6 = HEAP32[($0 + 19164 | 0) >> 2] | 0;
     if (!$6) {
      break label$4
     }
     __memcpy($5 | 0, $6 | 0, HEAP32[($0 + 19156 | 0) >> 2] | 0 | 0) | 0;
     label$5 : {
      $6 = HEAP32[($0 + 19164 | 0) >> 2] | 0;
      if (!$6) {
       break label$5
      }
      $7 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$7) {
       break label$5
      }
      $7 = $7 + 184 | 0;
      HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1 | 0;
     }
     FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($6, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    }
    HEAP32[($0 + 19160 | 0) >> 2] = 0;
    HEAP32[($0 + 19164 | 0) >> 2] = $5;
    $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   }
   i64toi32_i32$1 = $0;
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 19168 | 0) >> 2] = 0;
   HEAP32[($0 + 19172 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($0 + 19156 | 0) >> 2] = 0;
   HEAP8[($0 + 19168 | 0) >> 0] = $2;
   HEAP8[($0 + 19169 | 0) >> 0] = $2 >>> 8 | 0;
   HEAP8[($0 + 19170 | 0) >> 0] = $2 >>> 16 | 0;
   HEAP8[($0 + 19171 | 0) >> 0] = $2 >>> 24 | 0;
   i64toi32_i32$1 = $0 + 19176 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($0 + 19056 | 0) >> 2] = $0 + 19168 | 0;
   HEAP32[($0 + 19060 | 0) >> 2] = 4;
   HEAP32[($0 + 19072 | 0) >> 2] = HEAP32[($0 + 16016 | 0) >> 2] | 0;
   label$6 : {
    if ((HEAPU8[($5 + 19044 | 0) >> 0] | 0) & 1 | 0) {
     break label$6
    }
    ImGui__End_28_29();
   }
   label$7 : {
    if ((HEAP32[($5 + 19072 | 0) >> 2] | 0 | 0) != (-1 | 0)) {
     break label$7
    }
    $0 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    HEAP8[($0 + 19040 | 0) >> 0] = 0;
    i64toi32_i32$1 = $0;
    i64toi32_i32$0 = 0;
    HEAP32[($0 + 19056 | 0) >> 2] = 0;
    HEAP32[($0 + 19060 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($0 + 19132 | 0) >> 2] = 0;
    i64toi32_i32$1 = $0;
    i64toi32_i32$0 = -1;
    HEAP32[($0 + 19144 | 0) >> 2] = 0;
    HEAP32[($0 + 19148 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0;
    i64toi32_i32$0 = 0;
    HEAP32[($0 + 19136 | 0) >> 2] = 2139095039;
    HEAP32[($0 + 19140 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0 + 19076 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0 + 19084 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0 + 19092 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0 + 19100 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP8[($0 + 19108 | 0) >> 0] = 0;
    i64toi32_i32$1 = $0 + 19064 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($0 + 19072 | 0) >> 2] = -1;
    $19 = $0 + 19109 | 0;
    $20 = 0;
    HEAP8[$19 >> 0] = $20;
    HEAP8[($19 + 1 | 0) >> 0] = $20 >>> 8 | 0;
    label$8 : {
     $6 = HEAP32[($0 + 19164 | 0) >> 2] | 0;
     if (!$6) {
      break label$8
     }
     i64toi32_i32$1 = $0;
     i64toi32_i32$0 = 0;
     HEAP32[($0 + 19156 | 0) >> 2] = 0;
     HEAP32[($0 + 19160 | 0) >> 2] = i64toi32_i32$0;
     $7 = $0 + 184 | 0;
     HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1 | 0;
     FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($6, HEAP32[(0 + 92728 | 0) >> 2] | 0);
     HEAP32[($0 + 19164 | 0) >> 2] = 0;
    }
    i64toi32_i32$1 = $0;
    i64toi32_i32$0 = 0;
    HEAP32[($0 + 19168 | 0) >> 2] = 0;
    HEAP32[($0 + 19172 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0 + 19176 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   }
   HEAP8[($5 + 19041 | 0) >> 0] = 0;
   label$9 : {
    label$10 : {
     $3 = Math_fround(HEAPF32[($1 + 14600 | 0) >> 2]);
     $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($3, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
      break label$10
     }
     $0 = ~~$3;
     break label$9;
    }
    $0 = -2147483648;
   }
   $0 = $0 << 8 | 0;
   label$11 : {
    label$12 : {
     $3 = Math_fround(HEAPF32[($1 + 14596 | 0) >> 2]);
     $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($3, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
      break label$12
     }
     $5 = ~~$3;
     break label$11;
    }
    $5 = -2147483648;
   }
   $0 = $0 | $5 | 0;
   label$13 : {
    label$14 : {
     $3 = Math_fround(HEAPF32[($1 + 14604 | 0) >> 2]);
     $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($3, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
      break label$14
     }
     $5 = ~~$3;
     break label$13;
    }
    $5 = -2147483648;
   }
   $0 = $0 | ($5 << 16 | 0) | 0;
   label$15 : {
    label$16 : {
     $3 = Math_fround(HEAPF32[($1 + 14608 | 0) >> 2]);
     $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($3, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
      break label$16
     }
     $5 = ~~$3;
     break label$15;
    }
    $5 = -2147483648;
   }
   HEAP32[($2 + 908 | 0) >> 2] = $0 | ($5 << 24 | 0) | 0;
   label$17 : {
    label$18 : {
     $3 = Math_fround(HEAPF32[($1 + 15128 | 0) >> 2]);
     $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($3, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
      break label$18
     }
     $0 = ~~$3;
     break label$17;
    }
    $0 = -2147483648;
   }
   $0 = $0 << 8 | 0;
   label$19 : {
    label$20 : {
     $3 = Math_fround(HEAPF32[($1 + 15124 | 0) >> 2]);
     $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($3, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
      break label$20
     }
     $5 = ~~$3;
     break label$19;
    }
    $5 = -2147483648;
   }
   $0 = $0 | $5 | 0;
   label$21 : {
    label$22 : {
     $3 = Math_fround(HEAPF32[($1 + 15132 | 0) >> 2]);
     $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($3, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
      break label$22
     }
     $5 = ~~$3;
     break label$21;
    }
    $5 = -2147483648;
   }
   $0 = $0 | ($5 << 16 | 0) | 0;
   label$23 : {
    label$24 : {
     $3 = Math_fround(HEAPF32[($1 + 15136 | 0) >> 2]);
     $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($3, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
      break label$24
     }
     $5 = ~~$3;
     break label$23;
    }
    $5 = -2147483648;
   }
   HEAP32[($2 + 912 | 0) >> 2] = $0 | ($5 << 24 | 0) | 0;
   label$25 : {
    label$26 : {
     $3 = Math_fround(HEAPF32[($1 + 15144 | 0) >> 2]);
     $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($3, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
      break label$26
     }
     $0 = ~~$3;
     break label$25;
    }
    $0 = -2147483648;
   }
   $0 = $0 << 8 | 0;
   label$27 : {
    label$28 : {
     $3 = Math_fround(HEAPF32[($1 + 15140 | 0) >> 2]);
     $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($3, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
      break label$28
     }
     $5 = ~~$3;
     break label$27;
    }
    $5 = -2147483648;
   }
   $0 = $0 | $5 | 0;
   label$29 : {
    label$30 : {
     $3 = Math_fround(HEAPF32[($1 + 15148 | 0) >> 2]);
     $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($3, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
      break label$30
     }
     $5 = ~~$3;
     break label$29;
    }
    $5 = -2147483648;
   }
   $0 = $0 | ($5 << 16 | 0) | 0;
   label$31 : {
    label$32 : {
     $3 = Math_fround(HEAPF32[($1 + 15152 | 0) >> 2]);
     $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($3, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
      break label$32
     }
     $5 = ~~$3;
     break label$31;
    }
    $5 = -2147483648;
   }
   HEAP32[($2 + 916 | 0) >> 2] = $0 | ($5 << 24 | 0) | 0;
   label$33 : {
    label$34 : {
     $3 = Math_fround(HEAPF32[($1 + 15160 | 0) >> 2]);
     $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($3, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
      break label$34
     }
     $0 = ~~$3;
     break label$33;
    }
    $0 = -2147483648;
   }
   $0 = $0 << 8 | 0;
   label$35 : {
    label$36 : {
     $3 = Math_fround(HEAPF32[($1 + 15156 | 0) >> 2]);
     $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($3, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
      break label$36
     }
     $5 = ~~$3;
     break label$35;
    }
    $5 = -2147483648;
   }
   $0 = $0 | $5 | 0;
   label$37 : {
    label$38 : {
     $3 = Math_fround(HEAPF32[($1 + 15164 | 0) >> 2]);
     $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($3, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
      break label$38
     }
     $5 = ~~$3;
     break label$37;
    }
    $5 = -2147483648;
   }
   $0 = $0 | ($5 << 16 | 0) | 0;
   label$39 : {
    label$40 : {
     $3 = Math_fround(HEAPF32[($1 + 15168 | 0) >> 2]);
     $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($3, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
      break label$40
     }
     $5 = ~~$3;
     break label$39;
    }
    $5 = -2147483648;
   }
   HEAP32[($2 + 920 | 0) >> 2] = $0 | ($5 << 24 | 0) | 0;
   label$41 : {
    label$42 : {
     $3 = Math_fround(HEAPF32[($1 + 15176 | 0) >> 2]);
     $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($3, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
      break label$42
     }
     $0 = ~~$3;
     break label$41;
    }
    $0 = -2147483648;
   }
   $0 = $0 << 8 | 0;
   label$43 : {
    label$44 : {
     $3 = Math_fround(HEAPF32[($1 + 15172 | 0) >> 2]);
     $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($3, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
      break label$44
     }
     $5 = ~~$3;
     break label$43;
    }
    $5 = -2147483648;
   }
   $0 = $0 | $5 | 0;
   label$45 : {
    label$46 : {
     $3 = Math_fround(HEAPF32[($1 + 15180 | 0) >> 2]);
     $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($3, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
      break label$46
     }
     $5 = ~~$3;
     break label$45;
    }
    $5 = -2147483648;
   }
   $0 = $0 | ($5 << 16 | 0) | 0;
   label$47 : {
    label$48 : {
     $3 = Math_fround(HEAPF32[($1 + 15184 | 0) >> 2]);
     $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($3, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
      break label$48
     }
     $5 = ~~$3;
     break label$47;
    }
    $5 = -2147483648;
   }
   HEAP32[($2 + 924 | 0) >> 2] = $0 | ($5 << 24 | 0) | 0;
   label$49 : {
    label$50 : {
     $3 = Math_fround(HEAPF32[($1 + 15192 | 0) >> 2]);
     $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($3, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
      break label$50
     }
     $0 = ~~$3;
     break label$49;
    }
    $0 = -2147483648;
   }
   $0 = $0 << 8 | 0;
   label$51 : {
    label$52 : {
     $3 = Math_fround(HEAPF32[($1 + 15188 | 0) >> 2]);
     $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($3, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
      break label$52
     }
     $5 = ~~$3;
     break label$51;
    }
    $5 = -2147483648;
   }
   $0 = $0 | $5 | 0;
   label$53 : {
    label$54 : {
     $3 = Math_fround(HEAPF32[($1 + 15196 | 0) >> 2]);
     $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($3, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
      break label$54
     }
     $5 = ~~$3;
     break label$53;
    }
    $5 = -2147483648;
   }
   $0 = $0 | ($5 << 16 | 0) | 0;
   label$55 : {
    label$56 : {
     $3 = Math_fround(HEAPF32[($1 + 15200 | 0) >> 2]);
     $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($3, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
     if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
      break label$56
     }
     $1 = ~~$3;
     break label$55;
    }
    $1 = -2147483648;
   }
   HEAP32[($2 + 928 | 0) >> 2] = $0 | ($1 << 24 | 0) | 0;
  }
 }
 
 function ImGui__BeginDockableDragDropTarget_28ImGuiWindow__29($0) {
  $0 = $0 | 0;
  var $1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $7 = 0, $10 = 0, $11 = 0, $9 = 0, $2 = 0, $6 = 0, i64toi32_i32$2 = 0, $5 = Math_fround(0), $3 = Math_fround(0), $8 = 0, $4 = Math_fround(0), $113 = 0, $116 = 0;
  $1 = __stack_pointer - 544 | 0;
  __stack_pointer = $1;
  label$1 : {
   $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   if (!(HEAPU8[($2 + 19040 | 0) >> 0] | 0)) {
    break label$1
   }
   $3 = Math_fround(HEAPF32[($0 + 64 | 0) >> 2]);
   $4 = Math_fround(HEAPF32[($0 + 72 | 0) >> 2]);
   $5 = Math_fround(HEAPF32[($0 + 68 | 0) >> 2]);
   HEAPF32[($1 + 276 | 0) >> 2] = Math_fround($5 + Math_fround(HEAPF32[($0 + 76 | 0) >> 2]));
   HEAPF32[($1 + 268 | 0) >> 2] = $5;
   HEAPF32[($1 + 264 | 0) >> 2] = $3;
   HEAPF32[($1 + 272 | 0) >> 2] = Math_fround($3 + $4);
   if (!(ImGui__BeginDragDropTargetCustom_28ImRect_20const__2c_20unsigned_20int_29($1 + 264 | 0 | 0, HEAP32[($0 + 4 | 0) >> 2] | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : {
    if ((HEAP32[($2 + 19072 | 0) >> 2] | 0 | 0) == (-1 | 0)) {
     break label$2
    }
    if (strcmp(67565 | 0, $2 + 19076 | 0 | 0) | 0) {
     break label$2
    }
    $6 = HEAP32[(HEAP32[($2 + 19056 | 0) >> 2] | 0) >> 2] | 0;
    if (!(ImGui__DockNodeIsDropAllowed_28ImGuiWindow__2c_20ImGuiWindow__29($0 | 0, $6 | 0) | 0)) {
     break label$2
    }
    if (!(ImGui__AcceptDragDropPayload_28char_20const__2c_20int_29(67565 | 0, 3072 | 0) | 0)) {
     break label$2
    }
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           $7 = HEAP32[($0 + 936 | 0) >> 2] | 0;
           if (!$7) {
            break label$9
           }
           i64toi32_i32$2 = $2 + 3520 | 0;
           i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
           $8 = i64toi32_i32$0;
           i64toi32_i32$0 = $1;
           HEAP32[$1 >> 2] = $8;
           HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$1;
           i64toi32_i32$0 = $1;
           HEAP32[($1 + 536 | 0) >> 2] = $8;
           HEAP32[($1 + 540 | 0) >> 2] = i64toi32_i32$1;
           label$10 : {
            $7 = ImGui__DockNodeTreeFindVisibleNodeByPos_28ImGuiDockNode__2c_20ImVec2_29($7 | 0, $1 | 0) | 0;
            if ($7) {
             break label$10
            }
            $9 = 0;
            $7 = 1;
            $10 = 0;
            break label$4;
           }
           if (!((HEAPU8[($7 + 17 | 0) >> 0] | 0) & 4 | 0)) {
            break label$7
           }
           if (HEAP32[($7 + 24 | 0) >> 2] | 0) {
            break label$7
           }
           label$11 : {
            $10 = HEAP32[($7 + 120 | 0) >> 2] | 0;
            if (!$10) {
             break label$11
            }
            if (!(HEAP32[($7 + 28 | 0) >> 2] | 0)) {
             break label$6
            }
           }
           $9 = 0;
           $10 = ImGui__DockNodeTreeFindFallbackLeafNode_28ImGuiDockNode__29($7 | 0) | 0;
           break label$8;
          }
          $10 = HEAP32[($0 + 932 | 0) >> 2] | 0;
          $9 = !$10;
         }
         if ($10) {
          break label$5
         }
         $10 = 0;
         $7 = 1;
         break label$4;
        }
        $10 = $7;
       }
       $9 = 0;
      }
      $7 = 0;
      $11 = HEAP32[($10 + 48 | 0) >> 2] | 0;
      if (!$11) {
       break label$4
      }
      if ((HEAPU8[($10 + 17 | 0) >> 0] | 0) & 48 | 0) {
       break label$4
      }
      i64toi32_i32$2 = $11 + 48 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $113 = i64toi32_i32$1;
      i64toi32_i32$1 = $1 + 528 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $113;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $11;
      i64toi32_i32$0 = HEAP32[($11 + 40 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($11 + 44 | 0) >> 2] | 0;
      $116 = i64toi32_i32$0;
      i64toi32_i32$0 = $1;
      HEAP32[($1 + 520 | 0) >> 2] = $116;
      HEAP32[($1 + 524 | 0) >> 2] = i64toi32_i32$1;
      $7 = 0;
      break label$3;
     }
     i64toi32_i32$2 = $0;
     i64toi32_i32$1 = HEAP32[($0 + 64 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($0 + 68 | 0) >> 2] | 0;
     $8 = i64toi32_i32$1;
     $3 = Math_fround(HEAPF32[($0 + 64 | 0) >> 2]);
     $4 = Math_fround(HEAPF32[($0 + 72 | 0) >> 2]);
     $11 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     $5 = Math_fround(HEAPF32[($11 + 14460 | 0) >> 2]);
     HEAPF32[($1 + 532 | 0) >> 2] = Math_fround(Math_fround(Math_fround($5 + $5) + Math_fround(HEAPF32[($11 + 15488 | 0) >> 2])) + Math_fround(HEAPF32[($0 + 68 | 0) >> 2]));
     HEAPF32[($1 + 528 | 0) >> 2] = Math_fround($4 + $3);
     i64toi32_i32$1 = $1;
     HEAP32[($1 + 520 | 0) >> 2] = $8;
     HEAP32[($1 + 524 | 0) >> 2] = i64toi32_i32$0;
    }
    $11 = 1;
    label$12 : {
     if (HEAPU8[($2 + 97 | 0) >> 0] | 0) {
      break label$12
     }
     $11 = ImGui__IsMouseHoveringRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20bool_29($1 + 520 | 0 | 0, $1 + 528 | 0 | 0, 1 | 0) | 0;
    }
    label$13 : {
     label$14 : {
      if (HEAPU8[($2 + 19109 | 0) >> 0] | 0) {
       break label$14
      }
      if (!(HEAPU8[($2 + 19110 | 0) >> 0] | 0)) {
       break label$2
      }
      if ($7 ^ 1 | 0 | $9 | 0) {
       break label$13
      }
      break label$2;
     }
     if (($7 ^ 1 | 0 | $9 | 0 | 0) != (1 | 0)) {
      break label$2
     }
    }
    $9 = 0;
    ImGuiDockNode__ImGuiDockNode_28unsigned_20int_29($1 + 264 | 0 | 0, 0 | 0) | 0;
    HEAP32[(($1 + 264 | 0) + 252 | 0) >> 2] = -8388609;
    i64toi32_i32$1 = ($1 + 264 | 0) + 244 | 0;
    i64toi32_i32$0 = -8388609;
    HEAP32[i64toi32_i32$1 >> 2] = 2139095039;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = ($1 + 264 | 0) + 236 | 0;
    i64toi32_i32$0 = 2139095039;
    HEAP32[i64toi32_i32$1 >> 2] = -8388609;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = ($1 + 264 | 0) + 228 | 0;
    i64toi32_i32$0 = -8388609;
    HEAP32[i64toi32_i32$1 >> 2] = 2139095039;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = ($1 + 264 | 0) + 220 | 0;
    i64toi32_i32$0 = 2139095039;
    HEAP32[i64toi32_i32$1 >> 2] = -8388609;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = ($1 + 264 | 0) + 212 | 0;
    i64toi32_i32$0 = -8388609;
    HEAP32[i64toi32_i32$1 >> 2] = 2139095039;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = ($1 + 264 | 0) + 204 | 0;
    i64toi32_i32$0 = 2139095039;
    HEAP32[i64toi32_i32$1 >> 2] = -8388609;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = ($1 + 264 | 0) + 196 | 0;
    i64toi32_i32$0 = -8388609;
    HEAP32[i64toi32_i32$1 >> 2] = 2139095039;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = ($1 + 264 | 0) + 188 | 0;
    i64toi32_i32$0 = 2139095039;
    HEAP32[i64toi32_i32$1 >> 2] = -8388609;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = ($1 + 264 | 0) + 180 | 0;
    i64toi32_i32$0 = -8388609;
    HEAP32[i64toi32_i32$1 >> 2] = 2139095039;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1;
    i64toi32_i32$0 = 2139095039;
    HEAP32[($1 + 436 | 0) >> 2] = 0;
    HEAP32[($1 + 440 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($1 + 432 | 0) >> 2] = -1;
    i64toi32_i32$1 = $1;
    i64toi32_i32$0 = 0;
    HEAP32[($1 + 424 | 0) >> 2] = 0;
    HEAP32[($1 + 428 | 0) >> 2] = i64toi32_i32$0;
    ImGuiDockNode__ImGuiDockNode_28unsigned_20int_29($1 + 8 | 0 | 0, 0 | 0) | 0;
    HEAP32[(($1 + 8 | 0) + 252 | 0) >> 2] = -8388609;
    i64toi32_i32$1 = ($1 + 8 | 0) + 244 | 0;
    i64toi32_i32$0 = -8388609;
    HEAP32[i64toi32_i32$1 >> 2] = 2139095039;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = ($1 + 8 | 0) + 236 | 0;
    i64toi32_i32$0 = 2139095039;
    HEAP32[i64toi32_i32$1 >> 2] = -8388609;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = ($1 + 8 | 0) + 228 | 0;
    i64toi32_i32$0 = -8388609;
    HEAP32[i64toi32_i32$1 >> 2] = 2139095039;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = ($1 + 8 | 0) + 220 | 0;
    i64toi32_i32$0 = 2139095039;
    HEAP32[i64toi32_i32$1 >> 2] = -8388609;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = ($1 + 8 | 0) + 212 | 0;
    i64toi32_i32$0 = -8388609;
    HEAP32[i64toi32_i32$1 >> 2] = 2139095039;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = ($1 + 8 | 0) + 204 | 0;
    i64toi32_i32$0 = 2139095039;
    HEAP32[i64toi32_i32$1 >> 2] = -8388609;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = ($1 + 8 | 0) + 196 | 0;
    i64toi32_i32$0 = -8388609;
    HEAP32[i64toi32_i32$1 >> 2] = 2139095039;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = ($1 + 8 | 0) + 188 | 0;
    i64toi32_i32$0 = 2139095039;
    HEAP32[i64toi32_i32$1 >> 2] = -8388609;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = ($1 + 8 | 0) + 180 | 0;
    i64toi32_i32$0 = -8388609;
    HEAP32[i64toi32_i32$1 >> 2] = 2139095039;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1;
    i64toi32_i32$0 = 2139095039;
    HEAP32[($1 + 180 | 0) >> 2] = 0;
    HEAP32[($1 + 184 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($1 + 176 | 0) >> 2] = -1;
    i64toi32_i32$1 = $1;
    i64toi32_i32$0 = 0;
    HEAP32[($1 + 168 | 0) >> 2] = 0;
    HEAP32[($1 + 172 | 0) >> 2] = i64toi32_i32$0;
    label$15 : {
     label$16 : {
      if ($7) {
       break label$16
      }
      label$17 : {
       label$18 : {
        label$19 : {
         if (HEAP32[($10 + 24 | 0) >> 2] | 0) {
          break label$19
         }
         if ((HEAPU8[($10 + 17 | 0) >> 0] | 0) & 8 | 0) {
          break label$19
         }
         if (HEAP32[($10 + 28 | 0) >> 2] | 0) {
          break label$19
         }
         $7 = $1 + 264 | 0;
         break label$18;
        }
        $7 = $10;
        label$20 : while (1) {
         $9 = $7;
         $7 = HEAP32[($7 + 24 | 0) >> 2] | 0;
         if ($7) {
          continue label$20
         }
         break label$20;
        };
        ImGui__DockNodePreviewDockSetup_28ImGuiWindow__2c_20ImGuiDockNode__2c_20ImGuiWindow__2c_20ImGuiDockNode__2c_20ImGuiDockPreviewData__2c_20bool_2c_20bool_29($0 | 0, $9 | 0, $6 | 0, 0 | 0, $1 + 8 | 0 | 0, $11 | 0, 1 | 0);
        $7 = HEAPU8[($1 + 171 | 0) >> 0] | 0 ? $1 + 8 | 0 : $1 + 264 | 0;
        if (HEAP32[($10 + 28 | 0) >> 2] | 0) {
         break label$17
        }
       }
       ImGui__DockNodePreviewDockSetup_28ImGuiWindow__2c_20ImGuiDockNode__2c_20ImGuiWindow__2c_20ImGuiDockNode__2c_20ImGuiDockPreviewData__2c_20bool_2c_20bool_29($0 | 0, $10 | 0, $6 | 0, 0 | 0, $1 + 264 | 0 | 0, $11 | 0, 0 | 0);
      }
      $9 = 0;
      if (($7 | 0) != ($1 + 8 | 0 | 0)) {
       break label$15
      }
      HEAP8[($1 + 424 | 0) >> 0] = 0;
      $9 = 1;
      break label$15;
     }
     ImGui__DockNodePreviewDockSetup_28ImGuiWindow__2c_20ImGuiDockNode__2c_20ImGuiWindow__2c_20ImGuiDockNode__2c_20ImGuiDockPreviewData__2c_20bool_2c_20bool_29($0 | 0, 0 | 0, $6 | 0, 0 | 0, $1 + 264 | 0 | 0, $11 | 0, 0 | 0);
     $7 = $1 + 264 | 0;
    }
    ImGui__DockNodePreviewDockRender_28ImGuiWindow__2c_20ImGuiDockNode__2c_20ImGuiWindow__2c_20ImGuiDockPreviewData_20const__29($0 | 0, $10 | 0, $6 | 0, $1 + 264 | 0 | 0);
    ImGui__DockNodePreviewDockRender_28ImGuiWindow__2c_20ImGuiDockNode__2c_20ImGuiWindow__2c_20ImGuiDockPreviewData_20const__29($0 | 0, $10 | 0, $6 | 0, $1 + 8 | 0 | 0);
    label$21 : {
     if (!(HEAPU8[($7 + 160 | 0) >> 0] | 0)) {
      break label$21
     }
     if (!(HEAPU8[($2 + 19110 | 0) >> 0] | 0)) {
      break label$21
     }
     ImGui__DockContextQueueDock_28ImGuiContext__2c_20ImGuiWindow__2c_20ImGuiDockNode__2c_20ImGuiWindow__2c_20int_2c_20float_2c_20bool_29($2 | 0, $0 | 0, HEAP32[($7 + 164 | 0) >> 2] | 0 | 0, $6 | 0, HEAP32[($7 + 168 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($7 + 172 | 0) >> 2])), $9 | 0);
    }
    ImGuiDockNode___ImGuiDockNode_28_29($1 + 8 | 0 | 0) | 0;
    ImGuiDockNode___ImGuiDockNode_28_29($1 + 264 | 0 | 0) | 0;
   }
   HEAP8[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 19042 | 0) >> 0] = 0;
  }
  __stack_pointer = $1 + 544 | 0;
 }
 
 function ImDrawDataBuilder__FlattenIntoSingleLayer_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $3 = 0;
  label$1 : {
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
   $3 = HEAP32[$0 >> 2] | 0;
   $4 = $2 + $3 | 0;
   if (($1 | 0) >= ($4 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($1) {
      break label$3
     }
     $5 = 8;
     break label$2;
    }
    $5 = (($1 | 0) / (2 | 0) | 0) + $1 | 0;
   }
   $5 = ($5 | 0) > ($4 | 0) ? $5 : $4;
   if (($1 | 0) >= ($5 | 0)) {
    break label$1
   }
   $2 = $5 << 2 | 0;
   label$4 : {
    $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$1) {
     break label$4
    }
    $1 = $1 + 184 | 0;
    HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1 | 0;
   }
   $2 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($2, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$5 : {
    $1 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    if (!$1) {
     break label$5
    }
    __memcpy($2 | 0, $1 | 0, (HEAP32[$0 >> 2] | 0) << 2 | 0 | 0) | 0;
    label$6 : {
     $1 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     if (!$1) {
      break label$6
     }
     $6 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$6) {
      break label$6
     }
     $6 = $6 + 184 | 0;
     HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($1, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($0 + 4 | 0) >> 2] = $5;
   HEAP32[($0 + 8 | 0) >> 2] = $2;
   $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
  }
  HEAP32[$0 >> 2] = $4;
  label$7 : {
   if (!$2) {
    break label$7
   }
   __memcpy((HEAP32[($0 + 8 | 0) >> 2] | 0) + ($3 << 2 | 0) | 0 | 0, HEAP32[($0 + 20 | 0) >> 2] | 0 | 0, $2 << 2 | 0 | 0) | 0;
   label$8 : {
    if ((HEAP32[($0 + 16 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$8
    }
    label$9 : {
     $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$4) {
      break label$9
     }
     $4 = $4 + 184 | 0;
     HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
    }
    $4 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](0, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
    label$10 : {
     $2 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     if (!$2) {
      break label$10
     }
     __memcpy($4 | 0, $2 | 0, (HEAP32[($0 + 12 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
     label$11 : {
      $2 = HEAP32[($0 + 20 | 0) >> 2] | 0;
      if (!$2) {
       break label$11
      }
      $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$1) {
       break label$11
      }
      $1 = $1 + 184 | 0;
      HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + -1 | 0;
     }
     FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($2, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    }
    HEAP32[($0 + 16 | 0) >> 2] = 0;
    HEAP32[($0 + 20 | 0) >> 2] = $4;
   }
   HEAP32[($0 + 12 | 0) >> 2] = 0;
  }
 }
 
 function ImGui__PushClipRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$1 = 0, $3 = 0, i64toi32_i32$0 = 0, $4 = 0, $4$hi = 0, $28 = 0;
  $3 = HEAP32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 16116 | 0) >> 2] | 0;
  HEAP8[($3 + 221 | 0) >> 0] = 1;
  ImDrawList__PushClipRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20bool_29(HEAP32[($3 + 672 | 0) >> 2] | 0 | 0, $0 | 0, $1 | 0, $2 | 0);
  $2 = HEAP32[($3 + 672 | 0) >> 2] | 0;
  $2 = (((HEAP32[($2 + 60 | 0) >> 2] | 0) << 4 | 0) + (HEAP32[($2 + 68 | 0) >> 2] | 0) | 0) + -16 | 0;
  i64toi32_i32$0 = HEAP32[$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2 + 4 | 0) >> 2] | 0;
  $4 = i64toi32_i32$0;
  $4$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2 + 12 | 0) >> 2] | 0;
  $28 = i64toi32_i32$1;
  i64toi32_i32$1 = $3 + 588 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $28;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = $3;
  HEAP32[(i64toi32_i32$1 + 580 | 0) >> 2] = $4;
  HEAP32[(i64toi32_i32$1 + 584 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function ImGui__PopClipRect_28_29() {
  var i64toi32_i32$1 = 0, $1 = 0, $0 = 0, i64toi32_i32$0 = 0, $2 = 0, $2$hi = 0, $23 = 0;
  $0 = HEAP32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 16116 | 0) >> 2] | 0;
  HEAP8[($0 + 221 | 0) >> 0] = 1;
  ImDrawList__PopClipRect_28_29(HEAP32[($0 + 672 | 0) >> 2] | 0 | 0);
  $1 = HEAP32[($0 + 672 | 0) >> 2] | 0;
  $1 = (((HEAP32[($1 + 60 | 0) >> 2] | 0) << 4 | 0) + (HEAP32[($1 + 68 | 0) >> 2] | 0) | 0) + -16 | 0;
  i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
  $2 = i64toi32_i32$0;
  $2$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($1 + 12 | 0) >> 2] | 0;
  $23 = i64toi32_i32$1;
  i64toi32_i32$1 = $0 + 588 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $23;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$1 = $0;
  HEAP32[(i64toi32_i32$1 + 580 | 0) >> 2] = $2;
  HEAP32[(i64toi32_i32$1 + 584 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function ImGui__EndFrame_28_29() {
  var $2 = 0, $3 = 0, $4 = 0, $7 = 0, $1 = 0, $8 = 0, $5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $6 = 0, $11 = Math_fround(0), $13 = Math_fround(0), $10 = Math_fround(0), $12 = Math_fround(0), $9 = 0, $0 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $164 = 0, $756 = 0, $856 = 0, $1120 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  label$1 : {
   $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   if ((HEAP32[($1 + 16020 | 0) >> 2] | 0 | 0) == (HEAP32[($1 + 16016 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $2 = $1;
   label$2 : {
    $3 = HEAP32[($2 + 23436 | 0) >> 2] | 0;
    if (($3 | 0) < (1 | 0)) {
     break label$2
    }
    $2 = 0;
    label$3 : while (1) {
     label$4 : {
      $4 = (HEAP32[($1 + 23444 | 0) >> 2] | 0) + Math_imul($2, 20) | 0;
      if ((HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) != (2 | 0)) {
       break label$4
      }
      FUNCTION_TABLE[HEAP32[($4 + 12 | 0) >> 2] | 0 | 0]($1, $4);
      $3 = HEAP32[($1 + 23436 | 0) >> 2] | 0;
     }
     $2 = $2 + 1 | 0;
     if (($2 | 0) < ($3 | 0)) {
      continue label$3
     }
     break label$3;
    };
    $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   }
   label$5 : {
    if ((HEAP32[($2 + 16080 | 0) >> 2] | 0 | 0) < (2 | 0)) {
     break label$5
    }
    label$6 : while (1) {
     ImGui__End_28_29();
     if ((HEAP32[($2 + 16080 | 0) >> 2] | 0 | 0) > (1 | 0)) {
      continue label$6
     }
     break label$6;
    };
   }
   label$7 : {
    $5 = HEAP32[($1 + 148 | 0) >> 2] | 0;
    if (!$5) {
     break label$7
    }
    $6 = $1 + 23300 | 0;
    if (!(memcmp($6 | 0, $1 + 23316 | 0 | 0, 16 | 0) | 0)) {
     break label$7
    }
    $2 = 0;
    $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    $4 = HEAP32[($3 + 18584 | 0) >> 2] | 0;
    label$8 : {
     label$9 : {
      $7 = HEAP32[($3 + 18576 | 0) >> 2] | 0;
      if (($7 | 0) <= (0 | 0)) {
       break label$9
      }
      $8 = HEAP32[($1 + 23332 | 0) >> 2] | 0;
      label$10 : while (1) {
       $3 = HEAP32[($4 + ($2 << 2 | 0) | 0) >> 2] | 0;
       if ((HEAP32[$3 >> 2] | 0 | 0) == ($8 | 0)) {
        break label$8
       }
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($7 | 0)) {
        continue label$10
       }
       break label$10;
      };
     }
     $3 = HEAP32[$4 >> 2] | 0;
    }
    FUNCTION_TABLE[$5 | 0]($3, $6);
   }
   HEAP8[($1 + 16033 | 0) >> 0] = 0;
   label$11 : {
    $2 = HEAP32[($1 + 16116 | 0) >> 2] | 0;
    if (!$2) {
     break label$11
    }
    if (HEAPU8[($2 + 221 | 0) >> 0] | 0) {
     break label$11
    }
    HEAP8[($2 + 219 | 0) >> 0] = 0;
   }
   ImGui__End_28_29();
   $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $2 = $3;
   label$12 : {
    if (!(HEAP32[($2 + 18992 | 0) >> 2] | 0)) {
     break label$12
    }
    $2 = $3;
    if (Math_fround(HEAPF32[($2 + 19004 | 0) >> 2]) < Math_fround(.15000000596046448)) {
     break label$12
    }
    label$13 : {
     if (HEAP32[($3 + 19e3 | 0) >> 2] | 0) {
      break label$13
     }
     $4 = 65707;
     $2 = -1;
     $8 = 35;
     label$14 : while (1) {
      $5 = $4;
      $4 = $4 + 1 | 0;
      $7 = $8 & 255 | 0;
      $8 = HEAPU8[($5 + 1 | 0) >> 0] | 0;
      label$15 : {
       if (($7 | 0) != (35 | 0)) {
        break label$15
       }
       if (($8 & 255 | 0 | 0) != (35 | 0)) {
        break label$15
       }
       $2 = (HEAPU8[($5 + 2 | 0) >> 0] | 0 | 0) == (35 | 0) ? -1 : $2;
      }
      $2 = ($2 >>> 8 | 0) ^ (HEAP32[(((($2 & 255 | 0) ^ $7 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
      if (($4 | 0) != (65726 | 0)) {
       continue label$14
      }
      break label$14;
     };
     $5 = $2 ^ -1 | 0;
     $6 = HEAP32[($3 + 16100 | 0) >> 2] | 0;
     $2 = $6;
     label$16 : {
      $9 = HEAP32[($3 + 16092 | 0) >> 2] | 0;
      if (!$9) {
       break label$16
      }
      $2 = $6;
      $4 = $9;
      label$17 : while (1) {
       $7 = $4 >>> 1 | 0;
       $8 = $2 + ($7 << 3 | 0) | 0;
       $164 = $8 + 8 | 0;
       $8 = (HEAP32[$8 >> 2] | 0) >>> 0 < $5 >>> 0;
       $2 = $8 ? $164 : $2;
       $4 = $8 ? $4 + ($7 ^ -1 | 0) | 0 : $7;
       if ($4) {
        continue label$17
       }
       break label$17;
      };
     }
     $4 = 0;
     label$18 : {
      if (($2 | 0) == ($6 + ($9 << 3 | 0) | 0 | 0)) {
       break label$18
      }
      if ((HEAP32[$2 >> 2] | 0 | 0) != ($5 | 0)) {
       break label$18
      }
      $4 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     }
     HEAP32[($3 + 19e3 | 0) >> 2] = $4;
    }
    $2 = HEAP32[(HEAP32[($3 + 18584 | 0) >> 2] | 0) >> 2] | 0;
    $4 = $2 + 20 | 0;
    $10 = Math_fround(HEAPF32[$4 >> 2]);
    $11 = Math_fround(HEAPF32[($2 + 16 | 0) >> 2]);
    i64toi32_i32$1 = $3 + 18420 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $3 + 18412 | 0;
    i64toi32_i32$0 = 2139095039;
    HEAP32[i64toi32_i32$1 >> 2] = 2139095039;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAPF32[($3 + 18404 | 0) >> 2] = Math_fround($11 * Math_fround(.20000000298023224));
    HEAPF32[($3 + 18408 | 0) >> 2] = Math_fround($10 * Math_fround(.20000000298023224));
    $10 = Math_fround(HEAPF32[($2 + 8 | 0) >> 2]);
    $11 = Math_fround(HEAPF32[($2 + 16 | 0) >> 2]);
    $12 = Math_fround(HEAPF32[($2 + 12 | 0) >> 2]);
    $13 = Math_fround(HEAPF32[$4 >> 2]);
    i64toi32_i32$1 = $3 + 18368 | 0;
    i64toi32_i32$0 = 1056964608;
    HEAP32[i64toi32_i32$1 >> 2] = 1056964608;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP8[($3 + 18400 | 0) >> 0] = 1;
    HEAP32[($3 + 18344 | 0) >> 2] = 1;
    HEAP32[($3 + 18340 | 0) >> 2] = HEAP32[($3 + 18340 | 0) >> 2] | 0 | 17 | 0;
    HEAPF32[($3 + 18364 | 0) >> 2] = Math_fround($12 + Math_fround($13 * Math_fround(.5)));
    HEAPF32[($3 + 18360 | 0) >> 2] = Math_fround($10 + Math_fround($11 * Math_fround(.5)));
    $10 = Math_fround(HEAPF32[($3 + 14404 | 0) >> 2]);
    $11 = Math_fround(HEAPF32[($3 + 14408 | 0) >> 2]);
    HEAPF32[($0 + 12 | 0) >> 2] = Math_fround($11 + $11);
    HEAPF32[($0 + 8 | 0) >> 2] = Math_fround($10 + $10);
    ImGui__PushStyleVar_28int_2c_20ImVec2_20const__29(2 | 0, $0 + 8 | 0 | 0);
    ImGui__Begin_28char_20const__2c_20bool__2c_20int_29(65707 | 0, 0 | 0, 791367 | 0) | 0;
    label$19 : {
     $7 = HEAP32[($3 + 16056 | 0) >> 2] | 0;
     if (($7 | 0) < (1 | 0)) {
      break label$19
     }
     label$20 : while (1) {
      label$21 : {
       $8 = $7;
       $7 = $7 + -1 | 0;
       $4 = HEAP32[((HEAP32[($3 + 16064 | 0) >> 2] | 0) + ($7 << 2 | 0) | 0) >> 2] | 0;
       if (!(HEAPU8[($4 + 220 | 0) >> 0] | 0)) {
        break label$21
       }
       if ((HEAP32[($4 + 828 | 0) >> 2] | 0 | 0) != ($4 | 0)) {
        break label$21
       }
       $9 = HEAP32[($4 + 8 | 0) >> 2] | 0;
       if ($9 & 524288 | 0) {
        break label$21
       }
       $6 = HEAP32[$4 >> 2] | 0;
       $2 = $6;
       label$22 : {
        label$23 : {
         if (($2 | 0) == (-1 | 0)) {
          break label$23
         }
         label$24 : {
          label$25 : while (1) {
           label$26 : {
            label$27 : {
             $5 = HEAPU8[$2 >> 0] | 0;
             if (($5 | 0) == (35 | 0)) {
              break label$27
             }
             if ($5) {
              break label$26
             }
             $5 = $2;
             break label$24;
            }
            if ((HEAPU8[($2 + 1 | 0) >> 0] | 0 | 0) != (35 | 0)) {
             break label$26
            }
            $5 = $2;
            break label$24;
           }
           $5 = -1;
           $2 = $2 + 1 | 0;
           if (($2 | 0) != (-1 | 0)) {
            continue label$25
           }
           break label$25;
          };
         }
         if (($6 | 0) != ($5 | 0)) {
          break label$22
         }
        }
        label$28 : {
         if (!($9 & 67108864 | 0)) {
          break label$28
         }
         $2 = HEAP32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 23472 | 0) >> 2] | 0;
         $6 = $2 ? $2 : 68076;
         break label$22;
        }
        label$29 : {
         if (!($9 & 1024 | 0)) {
          break label$29
         }
         if (strcmp($6 | 0, 66133 | 0) | 0) {
          break label$29
         }
         $2 = HEAP32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 23468 | 0) >> 2] | 0;
         $6 = $2 ? $2 : 68076;
         break label$22;
        }
        $6 = 68195;
        if (HEAP32[($4 + 936 | 0) >> 2] | 0) {
         break label$22
        }
        $2 = HEAP32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 23476 | 0) >> 2] | 0;
        $6 = $2 ? $2 : 68076;
       }
       $2 = HEAP32[($3 + 18992 | 0) >> 2] | 0;
       i64toi32_i32$1 = $0;
       i64toi32_i32$0 = 0;
       HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
       ImGui__Selectable_28char_20const__2c_20bool_2c_20int_2c_20ImVec2_20const__29($6 | 0, ($2 | 0) == ($4 | 0) | 0, 0 | 0, i64toi32_i32$1 + 8 | 0 | 0) | 0;
      }
      if (($8 | 0) > (1 | 0)) {
       continue label$20
      }
      break label$20;
     };
    }
    ImGui__End_28_29();
    $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    $4 = HEAP32[($2 + 18488 | 0) >> 2] | 0;
    if (($4 | 0) < (1 | 0)) {
     break label$12
    }
    label$30 : {
     $5 = HEAP32[($2 + 18496 | 0) >> 2] | 0;
     $4 = $4 + -1 | 0;
     $7 = HEAP32[($5 + Math_imul($4, 12) | 0) >> 2] | 0;
     $8 = Math_imul($7, 12);
     if ((HEAP32[($8 + 72304 | 0) >> 2] | 0 | 0) != (8 | 0)) {
      break label$30
     }
     $8 = ($2 + (HEAP32[($8 + 72312 | 0) >> 2] | 0) | 0) + 14396 | 0;
     label$31 : {
      if (!((8206235 >>> $7 | 0) & 1 | 0)) {
       break label$31
      }
      HEAPF32[$8 >> 2] = Math_fround(HEAPF32[(($5 + Math_imul($4, 12) | 0) + 4 | 0) >> 2]);
      break label$30;
     }
     if (!((25348196 >>> $7 | 0) & 1 | 0)) {
      break label$30
     }
     $7 = $5 + Math_imul($4, 12) | 0;
     HEAPF32[$8 >> 2] = Math_fround(HEAPF32[($7 + 4 | 0) >> 2]);
     HEAPF32[($8 + 4 | 0) >> 2] = Math_fround(HEAPF32[($7 + 8 | 0) >> 2]);
    }
    HEAP32[($2 + 18488 | 0) >> 2] = $4;
   }
   label$32 : {
    if (!(HEAP32[($3 + 18648 | 0) >> 2] | 0)) {
     break label$32
    }
    if (!(HEAPU8[($2 + 18737 | 0) >> 0] | 0)) {
     break label$32
    }
    if (HEAP32[($2 + 18812 | 0) >> 2] | 0) {
     break label$32
    }
    if (HEAP32[($2 + 18900 | 0) >> 2] | 0) {
     break label$32
    }
    $4 = HEAP32[($3 + 18740 | 0) >> 2] | 0;
    if (!($4 & 15 | 0)) {
     break label$32
    }
    if ($4 & 128 | 0) {
     break label$32
    }
    $8 = HEAP32[($2 + 18648 | 0) >> 2] | 0;
    $7 = $8 + ((HEAP32[($2 + 18704 | 0) >> 2] | 0) << 4 | 0) | 0;
    $12 = Math_fround(HEAPF32[($7 + 872 | 0) >> 2]);
    $10 = Math_fround(HEAPF32[($7 + 864 | 0) >> 2]);
    $4 = $7 + 860 | 0;
    $3 = HEAP32[($2 + 18740 | 0) >> 2] | 0;
    label$33 : {
     label$34 : {
      $5 = HEAP32[($2 + 18752 | 0) >> 2] | 0;
      if ($5) {
       break label$34
      }
      if (!($3 & 5 | 0)) {
       break label$32
      }
      $11 = Math_fround(Math_fround(HEAPF32[($8 + 88 | 0) >> 2]) + Math_fround(HEAPF32[($8 + 112 | 0) >> 2]));
      $7 = 0;
      label$35 : {
       if ($3 & 4 | 0) {
        break label$35
       }
       $13 = $11;
       break label$33;
      }
      $13 = Math_fround($12 - $10);
      $12 = Math_fround($12 - $13);
      $10 = Math_fround($10 - $13);
      $7 = 2;
      $13 = $11;
      break label$33;
     }
     $13 = Math_fround(HEAPF32[($7 + 868 | 0) >> 2]);
     $11 = Math_fround(HEAPF32[$4 >> 2]);
     label$36 : {
      if (($5 | 0) != (1 | 0)) {
       break label$36
      }
      if (!($3 & 5 | 0)) {
       break label$36
      }
      $11 = Math_fround(-Math_fround(HEAPF32[($8 + 112 | 0) >> 2]));
      $7 = 1;
      label$37 : {
       if ($3 & 4 | 0) {
        break label$37
       }
       $13 = $11;
       break label$33;
      }
      $13 = Math_fround($12 - $10);
      $12 = Math_fround($12 + $13);
      $10 = Math_fround($10 + $13);
      $7 = 3;
      $13 = $11;
      break label$33;
     }
     $7 = $3 & 10 | 0;
     label$38 : {
      label$39 : {
       if (($5 | 0) != (2 | 0)) {
        break label$39
       }
       if (!$7) {
        break label$39
       }
       $10 = Math_fround(Math_fround(HEAPF32[($8 + 92 | 0) >> 2]) + Math_fround(HEAPF32[($8 + 116 | 0) >> 2]));
       $7 = 2;
       if (!($3 & 8 | 0)) {
        break label$38
       }
       $12 = Math_fround($13 - $11);
       $13 = Math_fround($13 - $12);
       $11 = Math_fround($11 - $12);
       $7 = 0;
       break label$38;
      }
      if (($5 | 0) != (3 | 0)) {
       break label$32
      }
      if (!$7) {
       break label$32
      }
      $10 = Math_fround(-Math_fround(HEAPF32[($8 + 116 | 0) >> 2]));
      $7 = 3;
      if (!($3 & 8 | 0)) {
       break label$38
      }
      $12 = Math_fround($13 - $11);
      $13 = Math_fround($13 + $12);
      $11 = Math_fround($11 + $12);
      $7 = 1;
     }
     $12 = $10;
    }
    HEAPF32[($4 + 12 | 0) >> 2] = $12;
    HEAPF32[($4 + 8 | 0) >> 2] = $13;
    HEAPF32[($4 + 4 | 0) >> 2] = $10;
    HEAPF32[$4 >> 2] = $11;
    $4 = HEAP32[($2 + 18744 | 0) >> 2] | 0;
    $8 = HEAP32[($2 + 18752 | 0) >> 2] | 0;
    $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    HEAP8[($2 + 18736 | 0) >> 0] = 0;
    $20 = 256;
    HEAP8[($2 + 18737 | 0) >> 0] = $20;
    HEAP8[($2 + 18738 | 0) >> 0] = $20 >>> 8 | 0;
    HEAP32[($2 + 18760 | 0) >> 2] = $7;
    HEAP32[($2 + 18752 | 0) >> 2] = $8;
    HEAP32[($2 + 18744 | 0) >> 2] = $4;
    HEAP32[($2 + 18740 | 0) >> 2] = $3 | 128 | 0;
    HEAP8[($2 + 18712 | 0) >> 0] = HEAPU8[($2 + 18713 | 0) >> 0] | 0;
   }
   ImGui__DockContextEndFrame_28ImGuiContext__29($1 | 0);
   label$40 : {
    $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!(HEAP32[($2 + 18592 | 0) >> 2] | 0)) {
     break label$40
    }
    i64toi32_i32$1 = $2;
    i64toi32_i32$0 = 0;
    HEAP32[($2 + 18588 | 0) >> 2] = 1065353216;
    HEAP32[($2 + 18592 | 0) >> 2] = i64toi32_i32$0;
   }
   $4 = HEAP32[($1 + 16016 | 0) >> 2] | 0;
   label$41 : {
    if (!(HEAPU8[($1 + 19040 | 0) >> 0] | 0)) {
     break label$41
    }
    $7 = HEAPU8[($1 + 19110 | 0) >> 0] | 0;
    $3 = 0;
    label$42 : {
     label$43 : {
      label$44 : {
       if (((HEAP32[($1 + 19072 | 0) >> 2] | 0) + 1 | 0 | 0) >= ($4 | 0)) {
        break label$44
       }
       if ((HEAPU8[($1 + 19044 | 0) >> 0] | 0) & 32 | 0) {
        break label$43
       }
       label$45 : {
        label$46 : {
         $3 = HEAP32[($1 + 19052 | 0) >> 2] | 0;
         if (HEAPU8[(($2 + $3 | 0) + 3528 | 0) >> 0] | 0) {
          break label$46
         }
         $8 = 0;
         break label$45;
        }
        label$47 : {
         if (($3 + 129 | 0) >>> 0 < 140 >>> 0) {
          break label$47
         }
         $8 = 1;
         label$48 : {
          if (($3 | 0) > (7550 | 0)) {
           break label$48
          }
          if (($3 | 0) == (1407 | 0)) {
           break label$47
          }
          if (($3 | 0) == (3455 | 0)) {
           break label$47
          }
          break label$45;
         }
         if (($3 | 0) == (7551 | 0)) {
          break label$47
         }
         if (($3 | 0) == (32127 | 0)) {
          break label$47
         }
         if (($3 | 0) != (15743 | 0)) {
          break label$45
         }
        }
        label$49 : {
         label$50 : {
          $5 = $3 + 641 | 0;
          if (!($5 & 63488 | 0)) {
           break label$50
          }
          label$51 : {
           label$52 : {
            if (($3 | 0) > (7550 | 0)) {
             break label$52
            }
            if (($3 | 0) == (1407 | 0)) {
             break label$51
            }
            $8 = 648;
            if (($3 | 0) == (3455 | 0)) {
             break label$49
            }
            break label$50;
           }
           label$53 : {
            if (($3 | 0) == (32127 | 0)) {
             break label$53
            }
            label$54 : {
             if (($3 | 0) == (15743 | 0)) {
              break label$54
             }
             if (($3 | 0) != (7551 | 0)) {
              break label$50
             }
             $8 = 649;
             break label$49;
            }
            $8 = 650;
            break label$49;
           }
           $8 = 651;
           break label$49;
          }
          $8 = HEAPU8[($2 + 105 | 0) >> 0] | 0 ? 651 : 648;
          break label$49;
         }
         $8 = $5;
        }
        $8 = !(HEAPU8[((Math_imul($8, 12) + $2 | 0) + 10116 | 0) >> 0] | 0);
       }
       $3 = $8 ^ 1 | 0;
      }
      if ($7 & 255 | 0) {
       break label$43
      }
      if (!$3) {
       break label$42
      }
     }
     HEAP8[($2 + 19040 | 0) >> 0] = 0;
     i64toi32_i32$1 = $2;
     i64toi32_i32$0 = 0;
     HEAP32[($2 + 19056 | 0) >> 2] = 0;
     HEAP32[($2 + 19060 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($2 + 19132 | 0) >> 2] = 0;
     i64toi32_i32$1 = $2;
     i64toi32_i32$0 = -1;
     HEAP32[($2 + 19144 | 0) >> 2] = 0;
     HEAP32[($2 + 19148 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $2;
     i64toi32_i32$0 = 0;
     HEAP32[($2 + 19136 | 0) >> 2] = 2139095039;
     HEAP32[($2 + 19140 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $2 + 19076 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $2 + 19084 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $2 + 19092 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $2 + 19100 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAP8[($2 + 19108 | 0) >> 0] = 0;
     i64toi32_i32$1 = $2 + 19064 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($2 + 19072 | 0) >> 2] = -1;
     $21 = $2 + 19109 | 0;
     $22 = 0;
     HEAP8[$21 >> 0] = $22;
     HEAP8[($21 + 1 | 0) >> 0] = $22 >>> 8 | 0;
     label$55 : {
      $4 = HEAP32[($2 + 19164 | 0) >> 2] | 0;
      if (!$4) {
       break label$55
      }
      i64toi32_i32$1 = $2;
      i64toi32_i32$0 = 0;
      HEAP32[($2 + 19156 | 0) >> 2] = 0;
      HEAP32[($2 + 19160 | 0) >> 2] = i64toi32_i32$0;
      $3 = $2 + 184 | 0;
      HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1 | 0;
      FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($4, HEAP32[(0 + 92728 | 0) >> 2] | 0);
      HEAP32[($2 + 19164 | 0) >> 2] = 0;
     }
     i64toi32_i32$1 = $2;
     i64toi32_i32$0 = 0;
     HEAP32[($2 + 19168 | 0) >> 2] = 0;
     HEAP32[($2 + 19172 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $2 + 19176 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $4 = HEAP32[($1 + 16016 | 0) >> 2] | 0;
     if (!(HEAPU8[($1 + 19040 | 0) >> 0] | 0)) {
      break label$41
     }
    }
    if ((HEAP32[($1 + 19048 | 0) >> 2] | 0 | 0) >= ($4 | 0)) {
     break label$41
    }
    if ((HEAPU8[($1 + 19044 | 0) >> 0] | 0) & 1 | 0) {
     break label$41
    }
    HEAP8[($1 + 19041 | 0) >> 0] = 1;
    ImGui__SetTooltip_28char_20const__2c_20____29(68072 | 0, 0 | 0);
    HEAP8[($1 + 19041 | 0) >> 0] = 0;
    $4 = HEAP32[($1 + 16016 | 0) >> 2] | 0;
   }
   HEAP32[($1 + 16020 | 0) >> 2] = $4;
   HEAP8[($1 + 16032 | 0) >> 0] = 0;
   ImGui__UpdateMouseMovingWindowEndFrame_28_29();
   label$56 : {
    $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if ((HEAP32[($2 + 14364 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$56
    }
    $4 = $2 + 184 | 0;
    HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
    $4 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](0, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
    label$57 : {
     $3 = HEAP32[($2 + 14368 | 0) >> 2] | 0;
     if (!$3) {
      break label$57
     }
     __memcpy($4 | 0, $3 | 0, (HEAP32[($2 + 14360 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
     label$58 : {
      $3 = HEAP32[($2 + 14368 | 0) >> 2] | 0;
      if (!$3) {
       break label$58
      }
      $7 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$7) {
       break label$58
      }
      $7 = $7 + 184 | 0;
      HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1 | 0;
     }
     FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($3, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    }
    HEAP32[($2 + 14364 | 0) >> 2] = 0;
    HEAP32[($2 + 14368 | 0) >> 2] = $4;
   }
   HEAP32[($2 + 14360 | 0) >> 2] = 0;
   label$59 : {
    if ((HEAP32[($2 + 18576 | 0) >> 2] | 0 | 0) < (1 | 0)) {
     break label$59
    }
    $4 = HEAP32[(HEAP32[($2 + 18584 | 0) >> 2] | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($4 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($4 + 12 | 0) >> 2] | 0;
    $756 = i64toi32_i32$0;
    i64toi32_i32$0 = $4;
    HEAP32[($4 + 88 | 0) >> 2] = $756;
    HEAP32[($4 + 92 | 0) >> 2] = i64toi32_i32$1;
    label$60 : {
     label$61 : {
      $3 = HEAP32[($4 + 108 | 0) >> 2] | 0;
      if (!$3) {
       break label$61
      }
      if (!(HEAPU8[($3 + 219 | 0) >> 0] | 0)) {
       break label$60
      }
      if (HEAPU8[($3 + 226 | 0) >> 0] | 0) {
       break label$60
      }
     }
     label$62 : {
      $3 = HEAP32[($2 + 14360 | 0) >> 2] | 0;
      if (($3 | 0) != (HEAP32[($2 + 14364 | 0) >> 2] | 0 | 0)) {
       break label$62
      }
      $7 = $3 + 1 | 0;
      label$63 : {
       label$64 : {
        if ($3) {
         break label$64
        }
        $8 = 8;
        break label$63;
       }
       $8 = (($3 | 0) / (2 | 0) | 0) + $3 | 0;
      }
      $7 = ($8 | 0) > ($7 | 0) ? $8 : $7;
      if (($3 | 0) >= ($7 | 0)) {
       break label$62
      }
      $3 = $7 << 2 | 0;
      label$65 : {
       $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
       if (!$8) {
        break label$65
       }
       $8 = $8 + 184 | 0;
       HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 1 | 0;
      }
      $3 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($3, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
      label$66 : {
       $8 = HEAP32[($2 + 14368 | 0) >> 2] | 0;
       if (!$8) {
        break label$66
       }
       __memcpy($3 | 0, $8 | 0, (HEAP32[($2 + 14360 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
       label$67 : {
        $8 = HEAP32[($2 + 14368 | 0) >> 2] | 0;
        if (!$8) {
         break label$67
        }
        $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
        if (!$5) {
         break label$67
        }
        $5 = $5 + 184 | 0;
        HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1 | 0;
       }
       FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($8, HEAP32[(0 + 92728 | 0) >> 2] | 0);
      }
      HEAP32[($2 + 14364 | 0) >> 2] = $7;
      HEAP32[($2 + 14368 | 0) >> 2] = $3;
      $3 = HEAP32[($2 + 14360 | 0) >> 2] | 0;
     }
     HEAP32[((HEAP32[($2 + 14368 | 0) >> 2] | 0) + ($3 << 2 | 0) | 0) >> 2] = $4;
     HEAP32[($2 + 14360 | 0) >> 2] = (HEAP32[($2 + 14360 | 0) >> 2] | 0) + 1 | 0;
    }
    if ((HEAP32[($2 + 18576 | 0) >> 2] | 0 | 0) < (2 | 0)) {
     break label$59
    }
    $3 = 1;
    label$68 : while (1) {
     $4 = HEAP32[((HEAP32[($2 + 18584 | 0) >> 2] | 0) + ($3 << 2 | 0) | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($4 + 8 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($4 + 12 | 0) >> 2] | 0;
     $856 = i64toi32_i32$1;
     i64toi32_i32$1 = $4;
     HEAP32[($4 + 88 | 0) >> 2] = $856;
     HEAP32[($4 + 92 | 0) >> 2] = i64toi32_i32$0;
     label$69 : {
      if ((HEAP32[($4 + 76 | 0) >> 2] | 0 | 0) < (HEAP32[($2 + 16016 | 0) >> 2] | 0 | 0)) {
       break label$69
      }
      if (Math_fround(HEAPF32[($4 + 16 | 0) >> 2]) <= Math_fround(0.0)) {
       break label$69
      }
      if (Math_fround(HEAPF32[($4 + 20 | 0) >> 2]) <= Math_fround(0.0)) {
       break label$69
      }
      label$70 : {
       $7 = HEAP32[($4 + 108 | 0) >> 2] | 0;
       if (!$7) {
        break label$70
       }
       if (!(HEAPU8[($7 + 219 | 0) >> 0] | 0)) {
        break label$69
       }
       if (HEAPU8[($7 + 226 | 0) >> 0] | 0) {
        break label$69
       }
      }
      label$71 : {
       $7 = HEAP32[($2 + 14360 | 0) >> 2] | 0;
       if (($7 | 0) != (HEAP32[($2 + 14364 | 0) >> 2] | 0 | 0)) {
        break label$71
       }
       $8 = $7 + 1 | 0;
       label$72 : {
        label$73 : {
         if ($7) {
          break label$73
         }
         $5 = 8;
         break label$72;
        }
        $5 = (($7 | 0) / (2 | 0) | 0) + $7 | 0;
       }
       $8 = ($5 | 0) > ($8 | 0) ? $5 : $8;
       if (($7 | 0) >= ($8 | 0)) {
        break label$71
       }
       $7 = $8 << 2 | 0;
       label$74 : {
        $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
        if (!$5) {
         break label$74
        }
        $5 = $5 + 184 | 0;
        HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1 | 0;
       }
       $7 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($7, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
       label$75 : {
        $5 = HEAP32[($2 + 14368 | 0) >> 2] | 0;
        if (!$5) {
         break label$75
        }
        __memcpy($7 | 0, $5 | 0, (HEAP32[($2 + 14360 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
        label$76 : {
         $5 = HEAP32[($2 + 14368 | 0) >> 2] | 0;
         if (!$5) {
          break label$76
         }
         $6 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
         if (!$6) {
          break label$76
         }
         $6 = $6 + 184 | 0;
         HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1 | 0;
        }
        FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($5, HEAP32[(0 + 92728 | 0) >> 2] | 0);
       }
       HEAP32[($2 + 14364 | 0) >> 2] = $8;
       HEAP32[($2 + 14368 | 0) >> 2] = $7;
       $7 = HEAP32[($2 + 14360 | 0) >> 2] | 0;
      }
      HEAP32[((HEAP32[($2 + 14368 | 0) >> 2] | 0) + ($7 << 2 | 0) | 0) >> 2] = $4;
      HEAP32[($2 + 14360 | 0) >> 2] = (HEAP32[($2 + 14360 | 0) >> 2] | 0) + 1 | 0;
     }
     $3 = $3 + 1 | 0;
     if (($3 | 0) < (HEAP32[($2 + 18576 | 0) >> 2] | 0 | 0)) {
      continue label$68
     }
     break label$68;
    };
   }
   $2 = HEAP32[(HEAP32[($2 + 18584 | 0) >> 2] | 0) >> 2] | 0;
   HEAP8[($2 + 71 | 0) >> 0] = 0;
   $23 = 0;
   HEAP8[($2 + 69 | 0) >> 0] = $23;
   HEAP8[($2 + 70 | 0) >> 0] = $23 >>> 8 | 0;
   label$77 : {
    $2 = HEAP32[($1 + 16072 | 0) >> 2] | 0;
    if (($2 | 0) > (-1 | 0)) {
     break label$77
    }
    label$78 : {
     $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$2) {
      break label$78
     }
     $2 = $2 + 184 | 0;
     HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1 | 0;
    }
    $2 = 0;
    $4 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](0, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
    label$79 : {
     $3 = HEAP32[($1 + 16076 | 0) >> 2] | 0;
     if (!$3) {
      break label$79
     }
     __memcpy($4 | 0, $3 | 0, (HEAP32[($1 + 16068 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
     label$80 : {
      $3 = HEAP32[($1 + 16076 | 0) >> 2] | 0;
      if (!$3) {
       break label$80
      }
      $7 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$7) {
       break label$80
      }
      $7 = $7 + 184 | 0;
      HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1 | 0;
     }
     FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($3, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    }
    HEAP32[($1 + 16072 | 0) >> 2] = 0;
    HEAP32[($1 + 16076 | 0) >> 2] = $4;
   }
   HEAP32[($1 + 16068 | 0) >> 2] = 0;
   label$81 : {
    label$82 : {
     $4 = HEAP32[($1 + 16044 | 0) >> 2] | 0;
     if (($2 | 0) < ($4 | 0)) {
      break label$82
     }
     $3 = $4;
     break label$81;
    }
    $2 = $4 << 2 | 0;
    label$83 : {
     $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$3) {
      break label$83
     }
     $3 = $3 + 184 | 0;
     HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1 | 0;
    }
    $2 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($2, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
    label$84 : {
     $3 = HEAP32[($1 + 16076 | 0) >> 2] | 0;
     if (!$3) {
      break label$84
     }
     __memcpy($2 | 0, $3 | 0, (HEAP32[($1 + 16068 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
     label$85 : {
      $3 = HEAP32[($1 + 16076 | 0) >> 2] | 0;
      if (!$3) {
       break label$85
      }
      $7 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$7) {
       break label$85
      }
      $7 = $7 + 184 | 0;
      HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1 | 0;
     }
     FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($3, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    }
    HEAP32[($1 + 16072 | 0) >> 2] = $4;
    HEAP32[($1 + 16076 | 0) >> 2] = $2;
    $3 = HEAP32[($1 + 16044 | 0) >> 2] | 0;
    $2 = $4;
   }
   $4 = 0;
   label$86 : {
    if (!$3) {
     break label$86
    }
    $7 = $1 + 16068 | 0;
    $2 = 0;
    label$87 : while (1) {
     label$88 : {
      label$89 : {
       $4 = HEAP32[((HEAP32[($1 + 16052 | 0) >> 2] | 0) + ($2 << 2 | 0) | 0) >> 2] | 0;
       if (!(HEAPU8[($4 + 219 | 0) >> 0] | 0)) {
        break label$89
       }
       if ((HEAPU8[($4 + 11 | 0) >> 0] | 0) & 1 | 0) {
        break label$88
       }
      }
      AddWindowToSortBuffer_28ImVector_ImGuiWindow____2c_20ImGuiWindow__29($7 | 0, $4 | 0);
      $3 = HEAP32[($1 + 16044 | 0) >> 2] | 0;
     }
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($3 | 0)) {
      continue label$87
     }
     break label$87;
    };
    $2 = HEAP32[($1 + 16072 | 0) >> 2] | 0;
    $4 = $3;
   }
   HEAP32[($1 + 16044 | 0) >> 2] = HEAP32[($1 + 16068 | 0) >> 2] | 0;
   HEAP32[($1 + 16068 | 0) >> 2] = $4;
   HEAP32[($1 + 180 | 0) >> 2] = HEAP32[($1 + 16104 | 0) >> 2] | 0;
   $4 = $1 + 16048 | 0;
   i64toi32_i32$0 = HEAP32[$4 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($4 + 4 | 0) >> 2] | 0;
   HEAP32[$4 >> 2] = $2;
   $2 = HEAP32[($1 + 16076 | 0) >> 2] | 0;
   $1120 = i64toi32_i32$0;
   i64toi32_i32$0 = $1;
   HEAP32[($1 + 16072 | 0) >> 2] = $1120;
   HEAP32[($1 + 16076 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($1 + 16052 | 0) >> 2] = $2;
   HEAP8[((HEAP32[($1 + 72 | 0) >> 2] | 0) + 16 | 0) >> 0] = 0;
   HEAP8[($1 + 14232 | 0) >> 0] = 0;
   i64toi32_i32$0 = $1 + 3536 | 0;
   i64toi32_i32$1 = 0;
   HEAP32[i64toi32_i32$0 >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   label$90 : {
    if ((HEAP32[($1 + 14244 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$90
    }
    label$91 : {
     $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$2) {
      break label$91
     }
     $2 = $2 + 184 | 0;
     HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1 | 0;
    }
    $2 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](0, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
    label$92 : {
     $4 = HEAP32[($1 + 14248 | 0) >> 2] | 0;
     if (!$4) {
      break label$92
     }
     __memcpy($2 | 0, $4 | 0, (HEAP32[($1 + 14240 | 0) >> 2] | 0) << 1 | 0 | 0) | 0;
     label$93 : {
      $4 = HEAP32[($1 + 14248 | 0) >> 2] | 0;
      if (!$4) {
       break label$93
      }
      $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$3) {
       break label$93
      }
      $3 = $3 + 184 | 0;
      HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1 | 0;
     }
     FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($4, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    }
    HEAP32[($1 + 14244 | 0) >> 2] = 0;
    HEAP32[($1 + 14248 | 0) >> 2] = $2;
   }
   $2 = 0;
   HEAP32[($1 + 14240 | 0) >> 2] = 0;
   $3 = HEAP32[($1 + 23436 | 0) >> 2] | 0;
   if (($3 | 0) < (1 | 0)) {
    break label$1
   }
   label$94 : while (1) {
    label$95 : {
     $4 = (HEAP32[($1 + 23444 | 0) >> 2] | 0) + Math_imul($2, 20) | 0;
     if ((HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) != (3 | 0)) {
      break label$95
     }
     FUNCTION_TABLE[HEAP32[($4 + 12 | 0) >> 2] | 0 | 0]($1, $4);
     $3 = HEAP32[($1 + 23436 | 0) >> 2] | 0;
    }
    $2 = $2 + 1 | 0;
    if (($2 | 0) < ($3 | 0)) {
     continue label$94
    }
    break label$94;
   };
  }
  __stack_pointer = $0 + 16 | 0;
 }
 
 function ImGui__DockContextEndFrame_28ImGuiContext__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $5 = 0, $2 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $4 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $9 = Math_fround(0), $12 = Math_fround(0), $3 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  label$1 : {
   $2 = HEAP32[($0 + 23340 | 0) >> 2] | 0;
   if (($2 | 0) < (1 | 0)) {
    break label$1
   }
   $3 = $1 + 24 | 0;
   $4 = 0;
   label$2 : while (1) {
    label$3 : {
     $5 = HEAP32[(((HEAP32[($0 + 23348 | 0) >> 2] | 0) + ($4 << 3 | 0) | 0) + 4 | 0) >> 2] | 0;
     if (!$5) {
      break label$3
     }
     if ((HEAP32[($5 + 136 | 0) >> 2] | 0 | 0) != (HEAP32[($0 + 16016 | 0) >> 2] | 0 | 0)) {
      break label$3
     }
     $6 = HEAPU16[($5 + 156 | 0) >> 1] | 0 | ((HEAPU8[($5 + 158 | 0) >> 0] | 0) << 16 | 0) | 0;
     if (!($6 & 512 | 0)) {
      break label$3
     }
     $7 = HEAP32[($5 + 112 | 0) >> 2] | 0;
     if (!$7) {
      break label$3
     }
     if (HEAP32[($5 + 28 | 0) >> 2] | 0) {
      break label$3
     }
     if ($6 & 2048 | 0) {
      break label$3
     }
     $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     $8 = Math_fround(HEAPF32[($2 + 14460 | 0) >> 2]);
     $9 = Math_fround(HEAPF32[($5 + 60 | 0) >> 2]);
     $10 = Math_fround(HEAPF32[($5 + 52 | 0) >> 2]);
     $11 = Math_fround(HEAPF32[($2 + 15488 | 0) >> 2]);
     $12 = Math_fround(HEAPF32[($5 + 56 | 0) >> 2]);
     HEAPF32[($1 + 28 | 0) >> 2] = Math_fround($12 + Math_fround(HEAPF32[($5 + 64 | 0) >> 2]));
     HEAPF32[($1 + 24 | 0) >> 2] = Math_fround($10 + $9);
     HEAPF32[($1 + 16 | 0) >> 2] = Math_fround($10 + Math_fround(0.0));
     HEAPF32[($1 + 20 | 0) >> 2] = Math_fround($12 + Math_fround($11 + Math_fround($8 + $8)));
     $10 = Math_fround(HEAPF32[($7 + 76 | 0) >> 2]);
     $9 = Math_fround(HEAPF32[($7 + 72 | 0) >> 2]);
     $8 = Math_fround(HEAPF32[($7 + 64 | 0) >> 2]);
     $11 = Math_fround(HEAPF32[($7 + 68 | 0) >> 2]);
     HEAPF32[($1 + 4 | 0) >> 2] = $11;
     HEAPF32[$1 >> 2] = $8;
     HEAPF32[($1 + 12 | 0) >> 2] = Math_fround($11 + $10);
     HEAPF32[($1 + 8 | 0) >> 2] = Math_fround($8 + $9);
     $2 = ImGui__CalcRoundingFlagsForRectInRect_28ImRect_20const__2c_20ImRect_20const__2c_20float_29($1 + 16 | 0 | 0, $1 | 0, Math_fround(Math_fround(2.0))) | 0;
     $6 = HEAP32[((HEAP32[($5 + 112 | 0) >> 2] | 0) + 672 | 0) >> 2] | 0;
     ImDrawListSplitter__SetCurrentChannel_28ImDrawList__2c_20int_29($6 + 120 | 0 | 0, $6 | 0, 0 | 0);
     $6 = HEAP32[($5 + 112 | 0) >> 2] | 0;
     ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29(HEAP32[($6 + 672 | 0) >> 2] | 0 | 0, $1 + 16 | 0 | 0, $3 | 0, HEAP32[($5 + 108 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($6 + 120 | 0) >> 2])), $2 | 0);
     $2 = HEAP32[($0 + 23340 | 0) >> 2] | 0;
    }
    $4 = $4 + 1 | 0;
    if (($4 | 0) < ($2 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  __stack_pointer = $1 + 32 | 0;
 }
 
 function ImGui__SetTooltip_28char_20const__2c_20____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[($2 + 12 | 0) >> 2] = $1;
  ImGui__BeginTooltipEx_28int_2c_20int_29(1 | 0, 0 | 0);
  ImGui__TextV_28char_20const__2c_20void__29($0 | 0, $1 | 0);
  ImGui__End_28_29();
  __stack_pointer = $2 + 16 | 0;
 }
 
 function AddWindowToSortBuffer_28ImVector_ImGuiWindow____2c_20ImGuiWindow__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $2 = 0, $3 = 0, $5 = 0;
  label$1 : {
   $2 = HEAP32[$0 >> 2] | 0;
   if (($2 | 0) != (HEAP32[($0 + 4 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $3 = $2 + 1 | 0;
   label$2 : {
    label$3 : {
     if ($2) {
      break label$3
     }
     $4 = 8;
     break label$2;
    }
    $4 = (($2 | 0) / (2 | 0) | 0) + $2 | 0;
   }
   $3 = ($4 | 0) > ($3 | 0) ? $4 : $3;
   if (($2 | 0) >= ($3 | 0)) {
    break label$1
   }
   $2 = $3 << 2 | 0;
   label$4 : {
    $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$4) {
     break label$4
    }
    $4 = $4 + 184 | 0;
    HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
   }
   $2 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($2, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$5 : {
    $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    if (!$4) {
     break label$5
    }
    __memcpy($2 | 0, $4 | 0, (HEAP32[$0 >> 2] | 0) << 2 | 0 | 0) | 0;
    label$6 : {
     $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     if (!$4) {
      break label$6
     }
     $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$5) {
      break label$6
     }
     $5 = $5 + 184 | 0;
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($4, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($0 + 4 | 0) >> 2] = $3;
   HEAP32[($0 + 8 | 0) >> 2] = $2;
   $2 = HEAP32[$0 >> 2] | 0;
  }
  HEAP32[((HEAP32[($0 + 8 | 0) >> 2] | 0) + ($2 << 2 | 0) | 0) >> 2] = $1;
  HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 1 | 0;
  label$7 : {
   if (!(HEAPU8[($1 + 219 | 0) >> 0] | 0)) {
    break label$7
   }
   label$8 : {
    $4 = HEAP32[($1 + 436 | 0) >> 2] | 0;
    if ($4 >>> 0 < 2 >>> 0) {
     break label$8
    }
    qsort(HEAP32[($1 + 444 | 0) >> 2] | 0 | 0, $4 | 0, 4 | 0, 16 | 0);
   }
   if (($4 | 0) < (1 | 0)) {
    break label$7
   }
   $2 = 0;
   label$9 : while (1) {
    label$10 : {
     $3 = HEAP32[((HEAP32[($1 + 444 | 0) >> 2] | 0) + ($2 << 2 | 0) | 0) >> 2] | 0;
     if (!(HEAPU8[($3 + 219 | 0) >> 0] | 0)) {
      break label$10
     }
     AddWindowToSortBuffer_28ImVector_ImGuiWindow____2c_20ImGuiWindow__29($0 | 0, $3 | 0);
    }
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($4 | 0)) {
     continue label$9
    }
    break label$9;
   };
  }
 }
 
 function ImGui__LogFinish_28_29() {
  var $0 = 0, $1 = 0, $2 = 0, i64toi32_i32$0 = 0, $27 = 0;
  label$1 : {
   $0 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   if (!(HEAPU8[($0 + 23484 | 0) >> 0] | 0)) {
    break label$1
   }
   ImGui__LogText_28char_20const__2c_20____29(70526 | 0, 0 | 0);
   label$2 : {
    label$3 : {
     switch ((HEAP32[($0 + 23488 | 0) >> 2] | 0) + -1 | 0 | 0) {
     case 0:
      fflush(HEAP32[($0 + 23492 | 0) >> 2] | 0 | 0) | 0;
      break label$2;
     case 1:
      fclose(HEAP32[($0 + 23492 | 0) >> 2] | 0 | 0) | 0;
      break label$2;
     case 3:
      break label$3;
     default:
      break label$2;
     };
    }
    if ((HEAP32[($0 + 23496 | 0) >> 2] | 0 | 0) < (2 | 0)) {
     break label$2
    }
    $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    $2 = HEAP32[($1 + 140 | 0) >> 2] | 0;
    if (!$2) {
     break label$2
    }
    $27 = HEAP32[($1 + 144 | 0) >> 2] | 0;
    $1 = HEAP32[($0 + 23504 | 0) >> 2] | 0;
    FUNCTION_TABLE[$2 | 0]($27, $1 ? $1 : 92724);
   }
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 23488 | 0) >> 2] = 0;
   HEAP32[($0 + 23492 | 0) >> 2] = i64toi32_i32$0;
   HEAP8[($0 + 23484 | 0) >> 0] = 0;
   $1 = HEAP32[($0 + 23504 | 0) >> 2] | 0;
   if (!$1) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 23496 | 0) >> 2] = 0;
   HEAP32[($0 + 23500 | 0) >> 2] = i64toi32_i32$0;
   label$6 : {
    $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$2) {
     break label$6
    }
    $2 = $2 + 184 | 0;
    HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1 | 0;
   }
   FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($1, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   HEAP32[($0 + 23504 | 0) >> 2] = 0;
  }
 }
 
 function ChildWindowComparer_28void_20const__2c_20void_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  label$1 : {
   $2 = HEAP32[$0 >> 2] | 0;
   $0 = HEAP32[($2 + 8 | 0) >> 2] | 0;
   $3 = HEAP32[$1 >> 2] | 0;
   $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
   $1 = ($0 & 67108864 | 0) - ($4 & 67108864 | 0) | 0;
   if ($1) {
    break label$1
   }
   $1 = ($0 & 33554432 | 0) - ($4 & 33554432 | 0) | 0;
   if ($1) {
    break label$1
   }
   $1 = (HEAP16[($2 + 236 | 0) >> 1] | 0) - (HEAP16[($3 + 236 | 0) >> 1] | 0) | 0;
  }
  return $1 | 0;
 }
 
 function ImGui__Render_28_29() {
  var $10 = Math_fround(0), $6 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $1 = 0, $2 = 0, $0 = 0, $3 = 0, i64toi32_i32$0 = 0, $11 = 0, i64toi32_i32$1 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $12 = 0, $13 = Math_fround(0), i64toi32_i32$2 = 0, $16 = Math_fround(0), $17 = Math_fround(0), $19 = 0, $22 = 0, $18 = 0, $20 = Math_fround(0), $21 = Math_fround(0), $1018 = 0;
  $0 = __stack_pointer - 48 | 0;
  __stack_pointer = $0;
  label$1 : {
   $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $2 = HEAP32[($1 + 16020 | 0) >> 2] | 0;
   if (($2 | 0) == (HEAP32[($1 + 16016 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   ImGui__EndFrame_28_29();
   $2 = HEAP32[($1 + 16016 | 0) >> 2] | 0;
  }
  HEAP32[($1 + 176 | 0) >> 2] = 0;
  $3 = HEAP32[($1 + 16028 | 0) >> 2] | 0;
  HEAP32[($1 + 16028 | 0) >> 2] = $2;
  label$2 : {
   $4 = HEAP32[($1 + 23436 | 0) >> 2] | 0;
   if (($4 | 0) < (1 | 0)) {
    break label$2
   }
   $5 = 0;
   label$3 : while (1) {
    label$4 : {
     $6 = (HEAP32[($1 + 23444 | 0) >> 2] | 0) + Math_imul($5, 20) | 0;
     if ((HEAP32[($6 + 4 | 0) >> 2] | 0 | 0) != (4 | 0)) {
      break label$4
     }
     FUNCTION_TABLE[HEAP32[($6 + 12 | 0) >> 2] | 0 | 0]($1, $6);
     $4 = HEAP32[($1 + 23436 | 0) >> 2] | 0;
    }
    $5 = $5 + 1 | 0;
    if (($5 | 0) < ($4 | 0)) {
     continue label$3
    }
    break label$3;
   };
  }
  label$5 : {
   if (!(HEAP32[($1 + 18576 | 0) >> 2] | 0)) {
    break label$5
   }
   $5 = 0;
   label$6 : while (1) {
    $6 = HEAP32[((HEAP32[($1 + 18584 | 0) >> 2] | 0) + ($5 << 2 | 0) | 0) >> 2] | 0;
    $4 = $6 + 176 | 0;
    ImDrawDataBuilder__Clear_28_29($4 | 0);
    label$7 : {
     if (!(HEAP32[($6 + 120 | 0) >> 2] | 0)) {
      break label$7
     }
     AddDrawListToDrawData_28ImVector_ImDrawList____2c_20ImDrawList__29($4 | 0, GetViewportDrawList_28ImGuiViewportP__2c_20unsigned_20long_2c_20char_20const__29($6 | 0, 0 | 0, 67088 | 0) | 0 | 0);
    }
    $5 = $5 + 1 | 0;
    if (($5 | 0) != (HEAP32[($1 + 18576 | 0) >> 2] | 0 | 0)) {
     continue label$6
    }
    break label$6;
   };
  }
  label$8 : {
   label$9 : {
    $5 = HEAP32[($1 + 18992 | 0) >> 2] | 0;
    if ($5) {
     break label$9
    }
    $7 = 0;
    $8 = 0;
    break label$8;
   }
   $7 = 0;
   label$10 : {
    if ((HEAPU8[($5 + 9 | 0) >> 0] | 0) & 32 | 0) {
     break label$10
    }
    $7 = HEAP32[($5 + 836 | 0) >> 2] | 0;
   }
   $8 = HEAP32[($1 + 19e3 | 0) >> 2] | 0;
  }
  label$11 : {
   $4 = HEAP32[($1 + 16044 | 0) >> 2] | 0;
   if (!$4) {
    break label$11
   }
   $5 = 0;
   label$12 : while (1) {
    label$13 : {
     $6 = HEAP32[((HEAP32[($1 + 16052 | 0) >> 2] | 0) + ($5 << 2 | 0) | 0) >> 2] | 0;
     if (!(HEAPU8[($6 + 219 | 0) >> 0] | 0)) {
      break label$13
     }
     if (HEAPU8[($6 + 226 | 0) >> 0] | 0) {
      break label$13
     }
     $9 = HEAP32[($6 + 8 | 0) >> 2] | 0;
     if ($9 & 16777216 | 0) {
      break label$13
     }
     if (($6 | 0) == ($7 | 0)) {
      break label$13
     }
     if (($6 | 0) == ($8 | 0)) {
      break label$13
     }
     AddWindowToDrawData_28ImGuiWindow__2c_20int_29($6 | 0, ($9 >>> 25 | 0) & 1 | 0 | 0);
     $4 = HEAP32[($1 + 16044 | 0) >> 2] | 0;
    }
    $5 = $5 + 1 | 0;
    if (($5 | 0) != ($4 | 0)) {
     continue label$12
    }
    break label$12;
   };
  }
  label$14 : {
   if (!$7) {
    break label$14
   }
   if (!(HEAPU8[($7 + 219 | 0) >> 0] | 0)) {
    break label$14
   }
   if (HEAPU8[($7 + 226 | 0) >> 0] | 0) {
    break label$14
   }
   AddWindowToDrawData_28ImGuiWindow__2c_20int_29($7 | 0, ((HEAP32[($7 + 8 | 0) >> 2] | 0) >>> 25 | 0) & 1 | 0 | 0);
  }
  label$15 : {
   if (!$8) {
    break label$15
   }
   if (!(HEAPU8[($8 + 219 | 0) >> 0] | 0)) {
    break label$15
   }
   if (HEAPU8[($8 + 226 | 0) >> 0] | 0) {
    break label$15
   }
   AddWindowToDrawData_28ImGuiWindow__2c_20int_29($8 | 0, ((HEAP32[($8 + 8 | 0) >> 2] | 0) >>> 25 | 0) & 1 | 0 | 0);
  }
  label$16 : {
   if (($3 | 0) == ($2 | 0)) {
    break label$16
   }
   label$17 : {
    label$18 : {
     $9 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     $6 = HEAP32[($9 + 18548 | 0) >> 2] | 0;
     if (($6 | 0) < (1 | 0)) {
      break label$18
     }
     $7 = HEAP32[($9 + 18556 | 0) >> 2] | 0;
     label$19 : while (1) {
      label$20 : {
       $4 = $6;
       $6 = $6 + -1 | 0;
       $5 = HEAP32[(($7 + Math_imul($6, 40) | 0) + 4 | 0) >> 2] | 0;
       if (!$5) {
        break label$20
       }
       if (!((HEAPU8[($5 + 11 | 0) >> 0] | 0) & 8 | 0)) {
        break label$20
       }
       if (!(HEAPU8[($5 + 219 | 0) >> 0] | 0)) {
        break label$20
       }
       if (!(HEAPU8[($5 + 226 | 0) >> 0] | 0)) {
        break label$17
       }
      }
      if ($4 >>> 0 > 1 >>> 0) {
       continue label$19
      }
      break label$19;
     };
    }
    $5 = 0;
   }
   label$21 : {
    label$22 : {
     $10 = Math_fround(HEAPF32[($9 + 19032 | 0) >> 2]);
     if (!($10 <= Math_fround(0.0))) {
      break label$22
     }
     if (Math_fround(HEAPF32[($9 + 19008 | 0) >> 2]) <= Math_fround(0.0)) {
      break label$21
     }
    }
    label$23 : {
     label$24 : {
      $4 = HEAP32[($9 + 18996 | 0) >> 2] | 0;
      if ($4) {
       break label$24
      }
      $6 = 0;
      break label$23;
     }
     $6 = (HEAPU8[($4 + 219 | 0) >> 0] | 0 | 0) != (0 | 0);
    }
    label$25 : {
     if ($5) {
      break label$25
     }
     if (!$6) {
      break label$21
     }
    }
    label$26 : {
     label$27 : {
      if (!$5) {
       break label$27
      }
      $8 = HEAP32[($9 + 16052 | 0) >> 2] | 0;
      $6 = $8;
      label$28 : {
       $4 = HEAP32[($9 + 16044 | 0) >> 2] | 0;
       if (($4 | 0) < (1 | 0)) {
        break label$28
       }
       $4 = $8 + ($4 << 2 | 0) | 0;
       $6 = $8;
       label$29 : while (1) {
        if ((HEAP32[$6 >> 2] | 0 | 0) == ($5 | 0)) {
         break label$28
        }
        $6 = $6 + 4 | 0;
        if ($6 >>> 0 < $4 >>> 0) {
         continue label$29
        }
        break label$29;
       };
      }
      $3 = $5;
      label$30 : {
       $6 = $6 - $8 | 0;
       if (($6 | 0) < (-3 | 0)) {
        break label$30
       }
       $6 = $6 >> 2 | 0;
       $3 = $5;
       label$31 : while (1) {
        label$32 : {
         $4 = $6;
         $7 = HEAP32[($8 + ($6 << 2 | 0) | 0) >> 2] | 0;
         $2 = HEAP32[($7 + 8 | 0) >> 2] | 0;
         if ($2 & 16777216 | 0) {
          break label$32
         }
         $6 = $7;
         label$33 : {
          if ((HEAP32[($6 + 828 | 0) >> 2] | 0 | 0) == ($5 | 0)) {
           break label$33
          }
          label$34 : while (1) {
           if (($6 | 0) == ($5 | 0)) {
            break label$33
           }
           $6 = HEAP32[($6 + 824 | 0) >> 2] | 0;
           if ($6) {
            continue label$34
           }
           break label$30;
          };
         }
         if (!(HEAPU8[($7 + 219 | 0) >> 0] | 0)) {
          break label$32
         }
         if (HEAPU8[($7 + 226 | 0) >> 0] | 0) {
          break label$32
         }
         $3 = (($2 >>> 25 | 0) & 1 | 0) >>> 0 > (((HEAP32[($5 + 8 | 0) >> 2] | 0) >>> 25 | 0) & 1 | 0) >>> 0 ? $3 : $7;
        }
        $6 = $4 + -1 | 0;
        if (($4 | 0) > (0 | 0)) {
         continue label$31
        }
        break label$31;
       };
      }
      label$35 : {
       label$36 : {
        $10 = Math_fround(Math_fround(HEAPF32[($9 + 15472 | 0) >> 2]) * Math_fround($10 * Math_fround(HEAPF32[($9 + 14396 | 0) >> 2])));
        $10 = Math_fround(Math_fround(($10 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($10, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($10)) < Math_fround(2147483648.0))) {
         break label$36
        }
        $6 = ~~$10;
        break label$35;
       }
       $6 = -2147483648;
      }
      label$37 : {
       label$38 : {
        $10 = Math_fround(HEAPF32[($9 + 15464 | 0) >> 2]);
        $10 = Math_fround(Math_fround(($10 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($10, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($10)) < Math_fround(2147483648.0))) {
         break label$38
        }
        $4 = ~~$10;
        break label$37;
       }
       $4 = -2147483648;
      }
      $4 = $4 << 8 | 0;
      label$39 : {
       label$40 : {
        $10 = Math_fround(HEAPF32[($9 + 15460 | 0) >> 2]);
        $10 = Math_fround(Math_fround(($10 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($10, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($10)) < Math_fround(2147483648.0))) {
         break label$40
        }
        $7 = ~~$10;
        break label$39;
       }
       $7 = -2147483648;
      }
      $6 = $6 << 24 | 0;
      $4 = $4 | $7 | 0;
      label$41 : {
       label$42 : {
        $10 = Math_fround(HEAPF32[($9 + 15468 | 0) >> 2]);
        $10 = Math_fround(Math_fround(($10 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($10, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($10)) < Math_fround(2147483648.0))) {
         break label$42
        }
        $7 = ~~$10;
        break label$41;
       }
       $7 = -2147483648;
      }
      ImGui__RenderDimmedBackgroundBehindWindow_28ImGuiWindow__2c_20unsigned_20int_29($3 | 0, $4 | ($7 << 16 | 0) | 0 | $6 | 0 | 0);
      $11 = HEAP32[($5 + 44 | 0) >> 2] | 0;
      $12 = 0;
      break label$26;
     }
     $12 = 0;
     $11 = 0;
     if (!$6) {
      break label$26
     }
     label$43 : {
      label$44 : {
       $10 = Math_fround(Math_fround(HEAPF32[($9 + 15456 | 0) >> 2]) * Math_fround($10 * Math_fround(HEAPF32[($9 + 14396 | 0) >> 2])));
       $10 = Math_fround(Math_fround(($10 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($10, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($10)) < Math_fround(2147483648.0))) {
        break label$44
       }
       $7 = ~~$10;
       break label$43;
      }
      $7 = -2147483648;
     }
     label$45 : {
      label$46 : {
       $10 = Math_fround(HEAPF32[($9 + 15448 | 0) >> 2]);
       $10 = Math_fround(Math_fround(($10 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($10, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($10)) < Math_fround(2147483648.0))) {
        break label$46
       }
       $6 = ~~$10;
       break label$45;
      }
      $6 = -2147483648;
     }
     $6 = $6 << 8 | 0;
     label$47 : {
      label$48 : {
       $10 = Math_fround(HEAPF32[($9 + 15444 | 0) >> 2]);
       $10 = Math_fround(Math_fround(($10 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($10, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($10)) < Math_fround(2147483648.0))) {
        break label$48
       }
       $8 = ~~$10;
       break label$47;
      }
      $8 = -2147483648;
     }
     $7 = $7 << 24 | 0;
     $6 = $6 | $8 | 0;
     label$49 : {
      label$50 : {
       $10 = Math_fround(HEAPF32[($9 + 15452 | 0) >> 2]);
       $10 = Math_fround(Math_fround(($10 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($10, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($10)) < Math_fround(2147483648.0))) {
        break label$50
       }
       $8 = ~~$10;
       break label$49;
      }
      $8 = -2147483648;
     }
     ImGui__RenderDimmedBackgroundBehindWindow_28ImGuiWindow__2c_20unsigned_20int_29($4 | 0, $6 | ($8 << 16 | 0) | 0 | $7 | 0 | 0);
     label$51 : {
      label$52 : {
       $4 = HEAP32[($9 + 19e3 | 0) >> 2] | 0;
       if ($4) {
        break label$52
       }
       $6 = HEAP32[($9 + 18996 | 0) >> 2] | 0;
       $11 = HEAP32[($6 + 44 | 0) >> 2] | 0;
       $12 = 0;
       break label$51;
      }
      $6 = HEAP32[($9 + 18996 | 0) >> 2] | 0;
      $7 = HEAP32[($6 + 44 | 0) >> 2] | 0;
      label$53 : {
       $11 = HEAP32[($4 + 44 | 0) >> 2] | 0;
       if ($11) {
        break label$53
       }
       $12 = 0;
       $11 = $7;
       break label$51;
      }
      $12 = $11;
      if (($11 | 0) == ($7 | 0)) {
       break label$51
      }
      $12 = 0;
      label$54 : {
       label$55 : {
        $6 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
        $10 = Math_fround(Math_fround(HEAPF32[($6 + 15456 | 0) >> 2]) * Math_fround(Math_fround(HEAPF32[($9 + 19032 | 0) >> 2]) * Math_fround(HEAPF32[($6 + 14396 | 0) >> 2])));
        $10 = Math_fround(Math_fround(($10 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($10, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($10)) < Math_fround(2147483648.0))) {
         break label$55
        }
        $7 = ~~$10;
        break label$54;
       }
       $7 = -2147483648;
      }
      label$56 : {
       label$57 : {
        $10 = Math_fround(HEAPF32[($6 + 15448 | 0) >> 2]);
        $10 = Math_fround(Math_fround(($10 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($10, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($10)) < Math_fround(2147483648.0))) {
         break label$57
        }
        $8 = ~~$10;
        break label$56;
       }
       $8 = -2147483648;
      }
      $8 = $8 << 8 | 0;
      label$58 : {
       label$59 : {
        $10 = Math_fround(HEAPF32[($6 + 15444 | 0) >> 2]);
        $10 = Math_fround(Math_fround(($10 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($10, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($10)) < Math_fround(2147483648.0))) {
         break label$59
        }
        $2 = ~~$10;
        break label$58;
       }
       $2 = -2147483648;
      }
      $7 = $7 << 24 | 0;
      $8 = $8 | $2 | 0;
      label$60 : {
       label$61 : {
        $10 = Math_fround(HEAPF32[($6 + 15452 | 0) >> 2]);
        $10 = Math_fround(Math_fround(($10 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($10, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($10)) < Math_fround(2147483648.0))) {
         break label$61
        }
        $6 = ~~$10;
        break label$60;
       }
       $6 = -2147483648;
      }
      ImGui__RenderDimmedBackgroundBehindWindow_28ImGuiWindow__2c_20unsigned_20int_29($4 | 0, $8 | ($6 << 16 | 0) | 0 | $7 | 0 | 0);
      $6 = HEAP32[($9 + 18996 | 0) >> 2] | 0;
      $11 = HEAP32[($6 + 44 | 0) >> 2] | 0;
      $4 = HEAP32[($9 + 19e3 | 0) >> 2] | 0;
      if (!$4) {
       break label$51
      }
      $12 = HEAP32[($4 + 44 | 0) >> 2] | 0;
     }
     $13 = Math_fround(HEAPF32[($6 + 72 | 0) >> 2]);
     $14 = Math_fround(HEAPF32[($6 + 64 | 0) >> 2]);
     $10 = Math_fround(HEAPF32[($9 + 15488 | 0) >> 2]);
     $15 = Math_fround(HEAPF32[($6 + 68 | 0) >> 2]);
     $16 = Math_fround($10 + Math_fround($15 + Math_fround(HEAPF32[($6 + 76 | 0) >> 2])));
     HEAPF32[($0 + 44 | 0) >> 2] = $16;
     $17 = Math_fround($15 - $10);
     HEAPF32[($0 + 36 | 0) >> 2] = $17;
     $15 = Math_fround($14 - $10);
     HEAPF32[($0 + 32 | 0) >> 2] = $15;
     $13 = Math_fround($10 + Math_fround($14 + $13));
     HEAPF32[($0 + 40 | 0) >> 2] = $13;
     label$62 : {
      $14 = Math_fround(HEAPF32[($11 + 16 | 0) >> 2]);
      if (!(Math_fround($13 - $15) >= $14)) {
       break label$62
      }
      if (!(Math_fround($16 - $17) >= Math_fround(HEAPF32[($11 + 20 | 0) >> 2]))) {
       break label$62
      }
      $10 = Math_fround(Math_fround(-1.0) - $10);
      HEAPF32[($0 + 44 | 0) >> 2] = Math_fround($10 + $16);
      HEAPF32[($0 + 40 | 0) >> 2] = Math_fround($10 + $13);
      HEAPF32[($0 + 36 | 0) >> 2] = Math_fround($17 - $10);
      HEAPF32[($0 + 32 | 0) >> 2] = Math_fround($15 - $10);
     }
     label$63 : {
      $4 = HEAP32[($6 + 672 | 0) >> 2] | 0;
      if (HEAP32[$4 >> 2] | 0) {
       break label$63
      }
      ImDrawList__AddDrawCmd_28_29($4 | 0);
      $14 = Math_fround(HEAPF32[($11 + 16 | 0) >> 2]);
      $4 = HEAP32[($6 + 672 | 0) >> 2] | 0;
     }
     $7 = $11 + 8 | 0;
     $10 = Math_fround(HEAPF32[$7 >> 2]);
     HEAPF32[($0 + 28 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($11 + 12 | 0) >> 2]) + Math_fround(HEAPF32[($11 + 20 | 0) >> 2]));
     HEAPF32[($0 + 24 | 0) >> 2] = Math_fround($14 + $10);
     ImDrawList__PushClipRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20bool_29($4 | 0, $7 | 0, $0 + 24 | 0 | 0, 0 | 0);
     label$64 : {
      label$65 : {
       $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
       $10 = Math_fround(Math_fround(HEAPF32[($4 + 15440 | 0) >> 2]) * Math_fround(Math_fround(HEAPF32[($9 + 19008 | 0) >> 2]) * Math_fround(HEAPF32[($4 + 14396 | 0) >> 2])));
       $10 = Math_fround(Math_fround(($10 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($10, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($10)) < Math_fround(2147483648.0))) {
        break label$65
       }
       $2 = ~~$10;
       break label$64;
      }
      $2 = -2147483648;
     }
     label$66 : {
      label$67 : {
       $10 = Math_fround(HEAPF32[($4 + 15432 | 0) >> 2]);
       $10 = Math_fround(Math_fround(($10 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($10, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($10)) < Math_fround(2147483648.0))) {
        break label$67
       }
       $7 = ~~$10;
       break label$66;
      }
      $7 = -2147483648;
     }
     $7 = $7 << 8 | 0;
     label$68 : {
      label$69 : {
       $10 = Math_fround(HEAPF32[($4 + 15428 | 0) >> 2]);
       $10 = Math_fround(Math_fround(($10 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($10, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($10)) < Math_fround(2147483648.0))) {
        break label$69
       }
       $3 = ~~$10;
       break label$68;
      }
      $3 = -2147483648;
     }
     $8 = $0 + 40 | 0;
     $2 = $2 << 24 | 0;
     $7 = $7 | $3 | 0;
     label$70 : {
      label$71 : {
       $10 = Math_fround(HEAPF32[($4 + 15436 | 0) >> 2]);
       $10 = Math_fround(Math_fround(($10 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($10, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
       if (!(Math_fround(Math_abs($10)) < Math_fround(2147483648.0))) {
        break label$71
       }
       $4 = ~~$10;
       break label$70;
      }
      $4 = -2147483648;
     }
     ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29(HEAP32[($6 + 672 | 0) >> 2] | 0 | 0, $0 + 32 | 0 | 0, $8 | 0, $7 | ($4 << 16 | 0) | 0 | $2 | 0 | 0, Math_fround(Math_fround(HEAPF32[($6 + 120 | 0) >> 2])), 0 | 0, Math_fround(Math_fround(3.0)));
     ImDrawList__PopClipRect_28_29(HEAP32[($6 + 672 | 0) >> 2] | 0 | 0);
    }
    $3 = HEAP32[($9 + 18576 | 0) >> 2] | 0;
    if (($3 | 0) < (1 | 0)) {
     break label$21
    }
    $7 = 0;
    label$72 : while (1) {
     label$73 : {
      $6 = HEAP32[((HEAP32[($9 + 18584 | 0) >> 2] | 0) + ($7 << 2 | 0) | 0) >> 2] | 0;
      if (($6 | 0) == ($11 | 0)) {
       break label$73
      }
      if (($6 | 0) == ($12 | 0)) {
       break label$73
      }
      label$74 : {
       label$75 : {
        if ($5) {
         break label$75
        }
        $18 = 53;
        break label$74;
       }
       $18 = 54;
       $2 = HEAP32[($6 + 108 | 0) >> 2] | 0;
       if (!$2) {
        break label$74
       }
       label$76 : {
        $4 = ((HEAP32[($2 + 8 | 0) >> 2] | 0) >>> 25 | 0) & 1 | 0;
        $8 = ((HEAP32[($5 + 8 | 0) >> 2] | 0) >>> 25 | 0) & 1 | 0;
        if (($4 | 0) != ($8 | 0)) {
         break label$76
        }
        $19 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
        $4 = HEAP32[($19 + 16044 | 0) >> 2] | 0;
        label$77 : while (1) {
         if (($4 | 0) < (1 | 0)) {
          break label$74
         }
         $4 = $4 + -1 | 0;
         $8 = HEAP32[((HEAP32[($19 + 16052 | 0) >> 2] | 0) + ($4 << 2 | 0) | 0) >> 2] | 0;
         if (($8 | 0) == ($2 | 0)) {
          break label$73
         }
         if (($8 | 0) != ($5 | 0)) {
          continue label$77
         }
         break label$74;
        };
       }
       if ($4 >>> 0 > $8 >>> 0) {
        break label$73
       }
      }
      $8 = GetViewportDrawList_28ImGuiViewportP__2c_20unsigned_20long_2c_20char_20const__29($6 | 0, 1 | 0, 67101 | 0) | 0;
      $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      $4 = ($2 + 14396 | 0) + ($18 << 4 | 0) | 0;
      $13 = Math_fround(HEAPF32[($4 + 212 | 0) >> 2]);
      $10 = Math_fround(HEAPF32[($4 + 208 | 0) >> 2]);
      $14 = Math_fround(HEAPF32[($4 + 200 | 0) >> 2]);
      $15 = Math_fround(HEAPF32[($4 + 204 | 0) >> 2]);
      $16 = Math_fround(HEAPF32[($9 + 19032 | 0) >> 2]);
      $17 = Math_fround(HEAPF32[($2 + 14396 | 0) >> 2]);
      $20 = Math_fround(HEAPF32[($6 + 16 | 0) >> 2]);
      $4 = $6 + 8 | 0;
      $21 = Math_fround(HEAPF32[$4 >> 2]);
      HEAPF32[($0 + 36 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6 + 12 | 0) >> 2]) + Math_fround(HEAPF32[($6 + 20 | 0) >> 2]));
      HEAPF32[($0 + 32 | 0) >> 2] = Math_fround($21 + $20);
      label$78 : {
       label$79 : {
        $15 = Math_fround(Math_fround(($15 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($15, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($15)) < Math_fround(2147483648.0))) {
         break label$79
        }
        $6 = ~~$15;
        break label$78;
       }
       $6 = -2147483648;
      }
      $6 = $6 << 8 | 0;
      label$80 : {
       label$81 : {
        $14 = Math_fround(Math_fround(($14 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($14, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($14)) < Math_fround(2147483648.0))) {
         break label$81
        }
        $2 = ~~$14;
        break label$80;
       }
       $2 = -2147483648;
      }
      $6 = $6 | $2 | 0;
      label$82 : {
       label$83 : {
        $10 = Math_fround(Math_fround(($10 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($10, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($10)) < Math_fround(2147483648.0))) {
         break label$83
        }
        $2 = ~~$10;
        break label$82;
       }
       $2 = -2147483648;
      }
      $6 = $6 | ($2 << 16 | 0) | 0;
      label$84 : {
       label$85 : {
        $10 = Math_fround($13 * Math_fround($16 * $17));
        $10 = Math_fround(Math_fround(($10 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($10, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($10)) < Math_fround(2147483648.0))) {
         break label$85
        }
        $2 = ~~$10;
        break label$84;
       }
       $2 = -2147483648;
      }
      ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29($8 | 0, $4 | 0, $0 + 32 | 0 | 0, $6 | ($2 << 24 | 0) | 0 | 0, Math_fround(Math_fround(0.0)), 0 | 0);
      $3 = HEAP32[($9 + 18576 | 0) >> 2] | 0;
     }
     $7 = $7 + 1 | 0;
     if (($7 | 0) < ($3 | 0)) {
      continue label$72
     }
     break label$72;
    };
   }
   if (!(HEAPU8[($1 + 104 | 0) >> 0] | 0)) {
    break label$16
   }
   $5 = HEAP32[($1 + 19036 | 0) >> 2] | 0;
   if (($5 | 0) == (-1 | 0)) {
    break label$16
   }
   i64toi32_i32$2 = $1 + 3520 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $22 = i64toi32_i32$0;
   i64toi32_i32$0 = $0;
   HEAP32[($0 + 16 | 0) >> 2] = $22;
   HEAP32[($0 + 20 | 0) >> 2] = i64toi32_i32$1;
   $10 = Math_fround(HEAPF32[($1 + 14580 | 0) >> 2]);
   i64toi32_i32$0 = $0;
   HEAP32[($0 + 8 | 0) >> 2] = $22;
   HEAP32[($0 + 12 | 0) >> 2] = i64toi32_i32$1;
   ImGui__RenderMouseCursor_28ImVec2_2c_20float_2c_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_29($0 + 8 | 0 | 0, Math_fround($10), $5 | 0, -1 | 0, -16777216 | 0, 805306368 | 0);
  }
  i64toi32_i32$0 = $1 + 168 | 0;
  i64toi32_i32$1 = 0;
  HEAP32[i64toi32_i32$0 >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  label$86 : {
   if ((HEAP32[($1 + 18576 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$86
   }
   $7 = 0;
   label$87 : while (1) {
    $5 = HEAP32[((HEAP32[($1 + 18584 | 0) >> 2] | 0) + ($7 << 2 | 0) | 0) >> 2] | 0;
    $6 = $5 + 176 | 0;
    ImDrawDataBuilder__FlattenIntoSingleLayer_28_29($6 | 0);
    label$88 : {
     if (!(HEAP32[($5 + 124 | 0) >> 2] | 0)) {
      break label$88
     }
     AddDrawListToDrawData_28ImVector_ImDrawList____2c_20ImDrawList__29($6 | 0, GetViewportDrawList_28ImGuiViewportP__2c_20unsigned_20long_2c_20char_20const__29($5 | 0, 1 | 0, 67101 | 0) | 0 | 0);
    }
    $9 = 0;
    $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    HEAP8[($5 + 128 | 0) >> 0] = 1;
    $6 = $5 + 128 | 0;
    HEAP32[($5 + 48 | 0) >> 2] = $6;
    $2 = (HEAP32[($5 + 4 | 0) >> 2] | 0) & 1024 | 0;
    $4 = 0;
    label$89 : {
     $3 = HEAP32[($5 + 176 | 0) >> 2] | 0;
     $19 = ($3 | 0) < (1 | 0);
     if ($19) {
      break label$89
     }
     $4 = HEAP32[($5 + 184 | 0) >> 2] | 0;
    }
    i64toi32_i32$0 = $5 + 136 | 0;
    i64toi32_i32$1 = 0;
    HEAP32[i64toi32_i32$0 >> 2] = 0;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[($5 + 132 | 0) >> 2] = $3;
    HEAP32[($5 + 144 | 0) >> 2] = $4;
    i64toi32_i32$2 = $5;
    i64toi32_i32$1 = HEAP32[($5 + 8 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($5 + 12 | 0) >> 2] | 0;
    $1018 = i64toi32_i32$1;
    i64toi32_i32$1 = $5 + 148 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $1018;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $4 = 0;
    label$90 : {
     if ($2) {
      break label$90
     }
     $9 = HEAP32[($5 + 20 | 0) >> 2] | 0;
     $4 = HEAP32[($5 + 16 | 0) >> 2] | 0;
    }
    HEAP32[($5 + 160 | 0) >> 2] = $9;
    HEAP32[($5 + 156 | 0) >> 2] = $4;
    i64toi32_i32$2 = $8 + 88 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $22 = i64toi32_i32$0;
    HEAP32[($5 + 172 | 0) >> 2] = $5;
    i64toi32_i32$0 = $5 + 164 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $22;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    label$91 : {
     if ($19) {
      break label$91
     }
     $6 = 0;
     label$92 : while (1) {
      $4 = HEAP32[((HEAP32[($5 + 184 | 0) >> 2] | 0) + ($6 << 2 | 0) | 0) >> 2] | 0;
      ImDrawList___PopUnusedDrawCmd_28_29($4 | 0);
      HEAP32[($5 + 140 | 0) >> 2] = (HEAP32[($5 + 140 | 0) >> 2] | 0) + (HEAP32[($4 + 24 | 0) >> 2] | 0) | 0;
      HEAP32[($5 + 136 | 0) >> 2] = (HEAP32[($5 + 136 | 0) >> 2] | 0) + (HEAP32[($4 + 12 | 0) >> 2] | 0) | 0;
      $6 = $6 + 1 | 0;
      if (($6 | 0) < (HEAP32[($5 + 176 | 0) >> 2] | 0 | 0)) {
       continue label$92
      }
      break label$92;
     };
     $6 = HEAP32[($5 + 48 | 0) >> 2] | 0;
    }
    HEAP32[($1 + 168 | 0) >> 2] = (HEAP32[($1 + 168 | 0) >> 2] | 0) + (HEAP32[($6 + 12 | 0) >> 2] | 0) | 0;
    HEAP32[($1 + 172 | 0) >> 2] = (HEAP32[($1 + 172 | 0) >> 2] | 0) + (HEAP32[($6 + 8 | 0) >> 2] | 0) | 0;
    $7 = $7 + 1 | 0;
    if (($7 | 0) < (HEAP32[($1 + 18576 | 0) >> 2] | 0 | 0)) {
     continue label$87
    }
    break label$87;
   };
  }
  label$93 : {
   $4 = HEAP32[($1 + 23436 | 0) >> 2] | 0;
   if (($4 | 0) < (1 | 0)) {
    break label$93
   }
   $5 = 0;
   label$94 : while (1) {
    label$95 : {
     $6 = (HEAP32[($1 + 23444 | 0) >> 2] | 0) + Math_imul($5, 20) | 0;
     if ((HEAP32[($6 + 4 | 0) >> 2] | 0 | 0) != (5 | 0)) {
      break label$95
     }
     FUNCTION_TABLE[HEAP32[($6 + 12 | 0) >> 2] | 0 | 0]($1, $6);
     $4 = HEAP32[($1 + 23436 | 0) >> 2] | 0;
    }
    $5 = $5 + 1 | 0;
    if (($5 | 0) < ($4 | 0)) {
     continue label$94
    }
    break label$94;
   };
  }
  __stack_pointer = $0 + 48 | 0;
 }
 
 function ImDrawDataBuilder__Clear_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  label$1 : {
   if ((HEAP32[($0 + 4 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   label$2 : {
    $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$1) {
     break label$2
    }
    $1 = $1 + 184 | 0;
    HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1 | 0;
   }
   $1 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](0, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$3 : {
    $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    if (!$2) {
     break label$3
    }
    __memcpy($1 | 0, $2 | 0, (HEAP32[$0 >> 2] | 0) << 2 | 0 | 0) | 0;
    label$4 : {
     $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     if (!$2) {
      break label$4
     }
     $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$3) {
      break label$4
     }
     $3 = $3 + 184 | 0;
     HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($2, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($0 + 4 | 0) >> 2] = 0;
   HEAP32[($0 + 8 | 0) >> 2] = $1;
  }
  HEAP32[$0 >> 2] = 0;
  label$5 : {
   if ((HEAP32[($0 + 16 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$5
   }
   label$6 : {
    $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$1) {
     break label$6
    }
    $1 = $1 + 184 | 0;
    HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1 | 0;
   }
   $1 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](0, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$7 : {
    $2 = HEAP32[($0 + 20 | 0) >> 2] | 0;
    if (!$2) {
     break label$7
    }
    __memcpy($1 | 0, $2 | 0, (HEAP32[($0 + 12 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
    label$8 : {
     $2 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     if (!$2) {
      break label$8
     }
     $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$3) {
      break label$8
     }
     $3 = $3 + 184 | 0;
     HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($2, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($0 + 16 | 0) >> 2] = 0;
   HEAP32[($0 + 20 | 0) >> 2] = $1;
  }
  HEAP32[($0 + 12 | 0) >> 2] = 0;
 }
 
 function AddDrawListToDrawData_28ImVector_ImDrawList____2c_20ImDrawList__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $4 = 0, $3 = 0, $5 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     switch (HEAP32[$1 >> 2] | 0 | 0) {
     case 0:
      break label$1;
     case 1:
      break label$3;
     default:
      break label$2;
     };
    }
    $2 = HEAP32[($1 + 8 | 0) >> 2] | 0;
    if (HEAP32[($2 + 28 | 0) >> 2] | 0) {
     break label$2
    }
    if (!(HEAP32[($2 + 32 | 0) >> 2] | 0)) {
     break label$1
    }
   }
   label$4 : {
    $2 = HEAP32[$0 >> 2] | 0;
    if (($2 | 0) != (HEAP32[($0 + 4 | 0) >> 2] | 0 | 0)) {
     break label$4
    }
    $3 = $2 + 1 | 0;
    label$5 : {
     label$6 : {
      if ($2) {
       break label$6
      }
      $4 = 8;
      break label$5;
     }
     $4 = (($2 | 0) / (2 | 0) | 0) + $2 | 0;
    }
    $3 = ($4 | 0) > ($3 | 0) ? $4 : $3;
    if (($2 | 0) >= ($3 | 0)) {
     break label$4
    }
    $2 = $3 << 2 | 0;
    label$7 : {
     $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$4) {
      break label$7
     }
     $4 = $4 + 184 | 0;
     HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
    }
    $2 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($2, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
    label$8 : {
     $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     if (!$4) {
      break label$8
     }
     __memcpy($2 | 0, $4 | 0, (HEAP32[$0 >> 2] | 0) << 2 | 0 | 0) | 0;
     label$9 : {
      $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      if (!$4) {
       break label$9
      }
      $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$5) {
       break label$9
      }
      $5 = $5 + 184 | 0;
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1 | 0;
     }
     FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($4, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    }
    HEAP32[($0 + 4 | 0) >> 2] = $3;
    HEAP32[($0 + 8 | 0) >> 2] = $2;
    $2 = HEAP32[$0 >> 2] | 0;
   }
   HEAP32[((HEAP32[($0 + 8 | 0) >> 2] | 0) + ($2 << 2 | 0) | 0) >> 2] = $1;
   HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 1 | 0;
  }
 }
 
 function AddWindowToDrawData_28ImGuiWindow__2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0, $4 = 0;
  $2 = HEAP32[($0 + 44 | 0) >> 2] | 0;
  $3 = (HEAP32[(0 + 92720 | 0) >> 2] | 0) + 176 | 0;
  HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1 | 0;
  label$1 : {
   if (!((HEAPU8[($0 + 11 | 0) >> 0] | 0) & 32 | 0)) {
    break label$1
   }
   $3 = HEAP32[($0 + 672 | 0) >> 2] | 0;
   ImDrawListSplitter__Merge_28ImDrawList__29($3 + 120 | 0 | 0, $3 | 0);
  }
  AddDrawListToDrawData_28ImVector_ImDrawList____2c_20ImDrawList__29(($2 + Math_imul($1, 12) | 0) + 176 | 0 | 0, HEAP32[($0 + 672 | 0) >> 2] | 0 | 0);
  label$2 : {
   $4 = HEAP32[($0 + 436 | 0) >> 2] | 0;
   if (($4 | 0) < (1 | 0)) {
    break label$2
   }
   $2 = 0;
   label$3 : while (1) {
    label$4 : {
     $3 = HEAP32[((HEAP32[($0 + 444 | 0) >> 2] | 0) + ($2 << 2 | 0) | 0) >> 2] | 0;
     if (!(HEAPU8[($3 + 219 | 0) >> 0] | 0)) {
      break label$4
     }
     if (HEAPU8[($3 + 226 | 0) >> 0] | 0) {
      break label$4
     }
     AddWindowToDrawData_28ImGuiWindow__2c_20int_29($3 | 0, $1 | 0);
     $4 = HEAP32[($0 + 436 | 0) >> 2] | 0;
    }
    $2 = $2 + 1 | 0;
    if (($2 | 0) < ($4 | 0)) {
     continue label$3
    }
    break label$3;
   };
  }
 }
 
 function ImGui__RenderDimmedBackgroundBehindWindow_28ImGuiWindow__2c_20unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $9 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $10 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $88 = 0, $94 = 0, $100 = 0, $106 = 0, $109 = 0, $11 = 0, $12 = 0;
  $2 = __stack_pointer - 80 | 0;
  __stack_pointer = $2;
  label$1 : {
   if ($1 >>> 0 < 16777216 >>> 0) {
    break label$1
   }
   $3 = HEAP32[($0 + 44 | 0) >> 2] | 0;
   $4 = Math_fround(HEAPF32[($3 + 16 | 0) >> 2]);
   $5 = Math_fround(HEAPF32[($3 + 8 | 0) >> 2]);
   $6 = Math_fround(HEAPF32[($3 + 12 | 0) >> 2]);
   $7 = Math_fround($6 + Math_fround(HEAPF32[($3 + 20 | 0) >> 2]));
   HEAPF32[(($2 + 64 | 0) + 12 | 0) >> 2] = $7;
   HEAPF32[($2 + 68 | 0) >> 2] = $6;
   HEAPF32[($2 + 64 | 0) >> 2] = $5;
   $4 = Math_fround($5 + $4);
   HEAPF32[($2 + 72 | 0) >> 2] = $4;
   $8 = ($2 + 64 | 0) + 8 | 0;
   label$2 : {
    $3 = HEAP32[((HEAP32[($0 + 836 | 0) >> 2] | 0) + 672 | 0) >> 2] | 0;
    if (HEAP32[$3 >> 2] | 0) {
     break label$2
    }
    ImDrawList__AddDrawCmd_28_29($3 | 0);
   }
   HEAPF32[($2 + 28 | 0) >> 2] = Math_fround($6 + Math_fround(-1.0));
   HEAPF32[($2 + 24 | 0) >> 2] = Math_fround($5 + Math_fround(-1.0));
   HEAPF32[($2 + 12 | 0) >> 2] = Math_fround($7 + Math_fround(1.0));
   HEAPF32[($2 + 8 | 0) >> 2] = Math_fround($4 + Math_fround(1.0));
   ImDrawList__PushClipRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20bool_29($3 | 0, $2 + 24 | 0 | 0, $2 + 8 | 0 | 0, 0 | 0);
   ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29($3 | 0, $2 + 64 | 0 | 0, $8 | 0, $1 | 0, Math_fround(Math_fround(0.0)), 0 | 0);
   $9 = (Math_imul(HEAP32[$3 >> 2] | 0, 40) + (HEAP32[($3 + 8 | 0) >> 2] | 0) | 0) + -40 | 0;
   i64toi32_i32$2 = $9 + 32 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $88 = i64toi32_i32$0;
   i64toi32_i32$0 = ($2 + 24 | 0) + 32 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $88;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $9 + 24 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $94 = i64toi32_i32$1;
   i64toi32_i32$1 = ($2 + 24 | 0) + 24 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $94;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $9 + 16 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $100 = i64toi32_i32$0;
   i64toi32_i32$0 = ($2 + 24 | 0) + 16 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $100;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $9 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $106 = i64toi32_i32$1;
   i64toi32_i32$1 = ($2 + 24 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $106;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $9;
   i64toi32_i32$0 = HEAP32[$9 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($9 + 4 | 0) >> 2] | 0;
   $109 = i64toi32_i32$0;
   i64toi32_i32$0 = $2;
   HEAP32[($2 + 24 | 0) >> 2] = $109;
   HEAP32[($2 + 28 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1 | 0;
   ImVector_ImDrawCmd___push_front_28ImDrawCmd_20const__29($3 | 0, $2 + 24 | 0 | 0);
   ImDrawList__PopClipRect_28_29($3 | 0);
   ImDrawList__AddDrawCmd_28_29($3 | 0);
   if (!((HEAPU8[((HEAP32[($0 + 828 | 0) >> 2] | 0) + 905 | 0) >> 0] | 0) & 1 | 0)) {
    break label$1
   }
   label$3 : {
    $10 = HEAP32[($0 + 836 | 0) >> 2] | 0;
    $3 = HEAP32[($10 + 436 | 0) >> 2] | 0;
    if (($3 | 0) < (1 | 0)) {
     break label$3
    }
    label$4 : while (1) {
     $11 = $10;
     $12 = HEAP32[($10 + 444 | 0) >> 2] | 0;
     label$5 : {
      label$6 : while (1) {
       label$7 : {
        $9 = $3 + -1 | 0;
        $10 = HEAP32[($12 + ($9 << 2 | 0) | 0) >> 2] | 0;
        if (!(HEAPU8[($10 + 219 | 0) >> 0] | 0)) {
         break label$7
        }
        if (!(HEAPU8[($10 + 226 | 0) >> 0] | 0)) {
         break label$5
        }
       }
       $10 = $3 >>> 0 > 1 >>> 0;
       $3 = $9;
       if ($10) {
        continue label$6
       }
       break label$6;
      };
      $10 = $11;
      break label$3;
     }
     $3 = HEAP32[($10 + 436 | 0) >> 2] | 0;
     if (($3 | 0) >= (1 | 0)) {
      continue label$4
     }
     break label$4;
    };
   }
   label$8 : {
    $3 = HEAP32[($10 + 672 | 0) >> 2] | 0;
    if (HEAP32[$3 >> 2] | 0) {
     break label$8
    }
    ImDrawList__AddDrawCmd_28_29($3 | 0);
   }
   ImDrawList__PushClipRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20bool_29($3 | 0, $2 + 64 | 0 | 0, $8 | 0, 0 | 0);
   $9 = HEAP32[($0 + 836 | 0) >> 2] | 0;
   $6 = Math_fround(HEAPF32[($9 + 72 | 0) >> 2]);
   $5 = Math_fround(HEAPF32[($9 + 64 | 0) >> 2]);
   $4 = Math_fround(HEAPF32[($9 + 68 | 0) >> 2]);
   HEAPF32[(($2 + 24 | 0) + 12 | 0) >> 2] = Math_fround($4 + Math_fround(HEAPF32[($9 + 76 | 0) >> 2]));
   HEAPF32[($2 + 32 | 0) >> 2] = Math_fround($5 + $6);
   HEAPF32[($2 + 28 | 0) >> 2] = $4;
   HEAPF32[($2 + 24 | 0) >> 2] = $5;
   $9 = HEAP32[($0 + 828 | 0) >> 2] | 0;
   $6 = Math_fround(HEAPF32[($9 + 72 | 0) >> 2]);
   $5 = Math_fround(HEAPF32[($9 + 64 | 0) >> 2]);
   $4 = Math_fround(HEAPF32[($9 + 68 | 0) >> 2]);
   HEAPF32[(($2 + 8 | 0) + 12 | 0) >> 2] = Math_fround($4 + Math_fround(HEAPF32[($9 + 76 | 0) >> 2]));
   HEAPF32[($2 + 16 | 0) >> 2] = Math_fround($5 + $6);
   HEAPF32[($2 + 12 | 0) >> 2] = $4;
   HEAPF32[($2 + 8 | 0) >> 2] = $5;
   ImGui__RenderRectFilledWithHole_28ImDrawList__2c_20ImRect_20const__2c_20ImRect_20const__2c_20unsigned_20int_2c_20float_29($3 | 0, $2 + 24 | 0 | 0, $2 + 8 | 0 | 0, $1 | 0, Math_fround(Math_fround(0.0)));
   ImDrawList__PopClipRect_28_29($3 | 0);
  }
  __stack_pointer = $2 + 80 | 0;
 }
 
 function ImGui__IsItemActive_28_29() {
  var $0 = 0, $1 = 0, $2 = 0;
  $0 = 0;
  label$1 : {
   $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $2 = HEAP32[($1 + 16192 | 0) >> 2] | 0;
   if (!$2) {
    break label$1
   }
   $0 = ($2 | 0) == (HEAP32[($1 + 18280 | 0) >> 2] | 0 | 0);
  }
  return $0 | 0;
 }
 
 function ImGui__SetItemAllowOverlap_28_29() {
  var $0 = 0, $1 = 0;
  label$1 : {
   $0 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $1 = HEAP32[($0 + 18280 | 0) >> 2] | 0;
   if ((HEAP32[($0 + 16172 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
    break label$1
   }
   HEAP8[($0 + 16180 | 0) >> 0] = 1;
  }
  label$2 : {
   if ((HEAP32[($0 + 16192 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
    break label$2
   }
   HEAP8[($0 + 16205 | 0) >> 0] = 1;
  }
 }
 
 function ImGui__GetContentRegionAvail_28_29($0) {
  $0 = $0 | 0;
  var $2 = 0, $1 = 0, $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0);
  $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $2 = HEAP32[($1 + 16116 | 0) >> 2] | 0;
  $3 = Math_fround(HEAPF32[($2 + 608 | 0) >> 2]);
  label$1 : {
   label$2 : {
    if (HEAP32[($2 + 452 | 0) >> 2] | 0) {
     break label$2
    }
    if (HEAP32[($1 + 19200 | 0) >> 2] | 0) {
     break label$2
    }
    $1 = $2 + 604 | 0;
    break label$1;
   }
   $1 = $2 + 556 | 0;
  }
  $4 = Math_fround(HEAPF32[($2 + 292 | 0) >> 2]);
  $5 = Math_fround(HEAPF32[$1 >> 2]);
  HEAPF32[($0 + 4 | 0) >> 2] = Math_fround($3 - Math_fround(HEAPF32[($2 + 296 | 0) >> 2]));
  HEAPF32[$0 >> 2] = Math_fround($5 - $4);
 }
 
 function ImGui__ItemSize_28ImVec2_20const__2c_20float_29($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $3 = 0, $9 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $10 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), i64toi32_i32$0 = 0, $2 = 0, $11 = 0, $12 = Math_fround(0), $13 = 0, $14 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $167 = 0;
  label$1 : {
   $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $3 = HEAP32[($2 + 16116 | 0) >> 2] | 0;
   if (HEAPU8[($3 + 224 | 0) >> 0] | 0) {
    break label$1
   }
   $4 = Math_fround(HEAPF32[($0 + 4 | 0) >> 2]);
   $5 = Math_fround(HEAPF32[$0 >> 2]);
   $0 = $3 + 356 | 0;
   $6 = Math_fround(HEAPF32[($3 + (HEAPU8[$0 >> 0] | 0 ? 304 : 296) | 0) >> 2]);
   HEAPF32[($3 + 304 | 0) >> 2] = $6;
   $5 = Math_fround($5 + Math_fround(HEAPF32[($3 + 292 | 0) >> 2]));
   HEAPF32[($3 + 300 | 0) >> 2] = $5;
   label$2 : {
    label$3 : {
     $7 = Math_fround(Math_fround(Math_fround(HEAPF32[($3 + 64 | 0) >> 2]) + Math_fround(HEAPF32[($3 + 360 | 0) >> 2])) + Math_fround(HEAPF32[($3 + 364 | 0) >> 2]));
     if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
      break label$3
     }
     $8 = ~~$7;
     break label$2;
    }
    $8 = -2147483648;
   }
   HEAPF32[($3 + 292 | 0) >> 2] = Math_fround($8 | 0);
   $7 = Math_fround(HEAPF32[($2 + 14476 | 0) >> 2]);
   $8 = $3 + 316 | 0;
   $9 = Math_fround(HEAPF32[$8 >> 2]);
   HEAPF32[$8 >> 2] = $9 >= $5 ? $9 : $5;
   label$4 : {
    label$5 : {
     $8 = $3 + 336 | 0;
     $10 = Math_fround(HEAPF32[$8 >> 2]);
     $11 = $3 + 348 | 0;
     $9 = Math_fround(HEAPF32[$11 >> 2]);
     $12 = Math_fround($9 - $1);
     $13 = $3 + 296 | 0;
     $4 = Math_fround(($1 >= Math_fround(0.0) ? ($12 <= Math_fround(0.0) ? Math_fround(0.0) : $12) : Math_fround(0.0)) + Math_fround(Math_fround(Math_fround(HEAPF32[$13 >> 2]) - $6) + $4));
     $4 = $10 >= $4 ? $10 : $4;
     $10 = Math_fround($7 + Math_fround($6 + $4));
     if (!(Math_fround(Math_abs($10)) < Math_fround(2147483648.0))) {
      break label$5
     }
     $14 = ~~$10;
     break label$4;
    }
    $14 = -2147483648;
   }
   $10 = Math_fround($14 | 0);
   HEAPF32[$13 >> 2] = $10;
   HEAP32[$8 >> 2] = 0;
   $9 = $9 >= $1 ? $9 : $1;
   HEAPF32[($3 + 352 | 0) >> 2] = $9;
   HEAP32[$11 >> 2] = 0;
   HEAP16[$0 >> 1] = 0;
   HEAPF32[($3 + 344 | 0) >> 2] = $4;
   $0 = $3 + 320 | 0;
   $1 = Math_fround(HEAPF32[$0 >> 2]);
   $7 = Math_fround($10 - $7);
   HEAPF32[$0 >> 2] = $1 >= $7 ? $1 : $7;
   if (HEAP32[($3 + 460 | 0) >> 2] | 0) {
    break label$1
   }
   $1 = Math_fround(HEAPF32[($2 + 14472 | 0) >> 2]);
   HEAPF32[($3 + 296 | 0) >> 2] = $6;
   HEAP8[($3 + 356 | 0) >> 0] = 1;
   HEAPF32[($3 + 348 | 0) >> 2] = $9;
   i64toi32_i32$2 = $3 + 340 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $167 = i64toi32_i32$0;
   i64toi32_i32$0 = $3 + 332 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $167;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAPF32[($3 + 292 | 0) >> 2] = Math_fround($5 + $1);
  }
 }
 
 function ImGui__NavScoreItem_28ImGuiNavItemData__29($0) {
  $0 = $0 | 0;
  var $15 = Math_fround(0), $14 = Math_fround(0), $2 = 0, $10 = Math_fround(0), $9 = Math_fround(0), $4 = 0, $8 = Math_fround(0), $11 = Math_fround(0), $7 = Math_fround(0), $12 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $6 = Math_fround(0), $5 = Math_fround(0), $1 = 0, $3 = 0, $13 = 0, $18 = Math_fround(0);
  $1 = 0;
  label$1 : {
   $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $3 = HEAP32[($2 + 18704 | 0) >> 2] | 0;
   $4 = HEAP32[($2 + 16116 | 0) >> 2] | 0;
   if (($3 | 0) != (HEAP32[($4 + 380 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   HEAP32[($2 + 18796 | 0) >> 2] = (HEAP32[($2 + 18796 | 0) >> 2] | 0) + 1 | 0;
   $5 = Math_fround(HEAPF32[($2 + 18776 | 0) >> 2]);
   $6 = Math_fround(HEAPF32[($2 + 18772 | 0) >> 2]);
   $7 = Math_fround(HEAPF32[($2 + 18768 | 0) >> 2]);
   $8 = Math_fround(HEAPF32[($2 + 18320 | 0) >> 2]);
   $9 = Math_fround(HEAPF32[($2 + 18316 | 0) >> 2]);
   $10 = Math_fround(HEAPF32[($2 + 18312 | 0) >> 2]);
   $11 = Math_fround(HEAPF32[($2 + 18308 | 0) >> 2]);
   $12 = Math_fround(HEAPF32[($2 + 18764 | 0) >> 2]);
   label$2 : {
    $13 = HEAP32[($2 + 18648 | 0) >> 2] | 0;
    if ((HEAP32[($4 + 820 | 0) >> 2] | 0 | 0) != ($13 | 0)) {
     break label$2
    }
    $14 = Math_fround(HEAPF32[($4 + 592 | 0) >> 2]);
    if (!($10 < $14)) {
     break label$1
    }
    $15 = Math_fround(HEAPF32[($4 + 584 | 0) >> 2]);
    if (!($8 > $15)) {
     break label$1
    }
    $16 = Math_fround(HEAPF32[($4 + 588 | 0) >> 2]);
    if (!($11 < $16)) {
     break label$1
    }
    $17 = Math_fround(HEAPF32[($4 + 580 | 0) >> 2]);
    if (!($9 > $17)) {
     break label$1
    }
    $8 = $8 < $15 ? $15 : $8 > $14 ? $14 : $8;
    $9 = $9 < $17 ? $17 : $9 > $16 ? $16 : $9;
    $10 = $10 < $15 ? $15 : $10 > $14 ? $14 : $10;
    $11 = $11 < $17 ? $17 : $11 > $16 ? $16 : $11;
   }
   label$3 : {
    label$4 : {
     if ((HEAP32[($2 + 18760 | 0) >> 2] | 0) >>> 0 > 1 >>> 0) {
      break label$4
     }
     $14 = Math_fround(HEAPF32[($4 + 584 | 0) >> 2]);
     $15 = Math_fround(HEAPF32[($4 + 592 | 0) >> 2]);
     $8 = $8 < $14 ? $14 : $8 > $15 ? $15 : $8;
     $10 = $10 < $14 ? $14 : $10 > $15 ? $15 : $10;
     break label$3;
    }
    $14 = Math_fround(HEAPF32[($4 + 580 | 0) >> 2]);
    $15 = Math_fround(HEAPF32[($4 + 588 | 0) >> 2]);
    $9 = $9 < $14 ? $14 : $9 > $15 ? $15 : $9;
    $11 = $11 < $14 ? $14 : $11 > $15 ? $15 : $11;
   }
   label$5 : {
    label$6 : {
     if (!($9 < $12)) {
      break label$6
     }
     $14 = Math_fround($9 - $12);
     break label$5;
    }
    $14 = Math_fround(0.0);
    if (!($6 < $11)) {
     break label$5
    }
    $14 = Math_fround($11 - $6);
   }
   label$7 : {
    label$8 : {
     label$9 : {
      $15 = Math_fround($8 - $10);
      $16 = Math_fround(Math_fround($15 * Math_fround(.800000011920929)) + $10);
      $17 = Math_fround($5 - $7);
      $18 = Math_fround(Math_fround($17 * Math_fround(.20000000298023224)) + $7);
      if (!($16 < $18)) {
       break label$9
      }
      $15 = Math_fround($16 - $18);
      break label$8;
     }
     label$10 : {
      $16 = Math_fround(Math_fround($17 * Math_fround(.800000011920929)) + $7);
      $15 = Math_fround(Math_fround($15 * Math_fround(.20000000298023224)) + $10);
      if ($16 < $15) {
       break label$10
      }
      $15 = Math_fround(0.0);
      $4 = 0;
      break label$7;
     }
     $15 = Math_fround($15 - $16);
    }
    $4 = $15 != Math_fround(0.0);
    if ($14 == Math_fround(0.0)) {
     break label$7
    }
    if ($15 == Math_fround(0.0)) {
     break label$7
    }
    $14 = Math_fround(Math_fround($14 / Math_fround(1.0e3)) + ($14 > Math_fround(0.0) ? Math_fround(1.0) : Math_fround(-1.0)));
    $4 = 1;
   }
   $7 = Math_fround(Math_fround($8 + $10) - Math_fround($7 + $5));
   $5 = Math_fround(Math_abs($7));
   $10 = Math_fround(Math_fround($9 + $11) - Math_fround($12 + $6));
   $6 = Math_fround(Math_abs($10));
   $11 = Math_fround($5 + $6);
   $8 = Math_fround(Math_abs($15));
   $12 = Math_fround(Math_abs($14));
   $9 = Math_fround($8 + $12);
   label$11 : {
    label$12 : {
     label$13 : {
      if ($4) {
       break label$13
      }
      if ($14 == Math_fround(0.0)) {
       break label$12
      }
     }
     $4 = $12 > $8 ? $14 > Math_fround(0.0) : $15 > Math_fround(0.0) ? 3 : 2;
     $10 = $14;
     $7 = $15;
     $12 = $9;
     break label$11;
    }
    label$14 : {
     label$15 : {
      if ($10 != Math_fround(0.0)) {
       break label$15
      }
      $12 = Math_fround(0.0);
      if ($7 == Math_fround(0.0)) {
       break label$14
      }
     }
     $4 = $6 > $5 ? $10 > Math_fround(0.0) : $7 > Math_fround(0.0) ? 3 : 2;
     $12 = $11;
     break label$11;
    }
    $4 = (HEAP32[($2 + 18280 | 0) >> 2] | 0) >>> 0 >= (HEAP32[($2 + 18652 | 0) >> 2] | 0) >>> 0;
    $10 = Math_fround(0.0);
    $7 = Math_fround(0.0);
   }
   $8 = Math_fround(HEAPF32[($0 + 32 | 0) >> 2]);
   $1 = 0;
   label$16 : {
    label$17 : {
     $2 = HEAP32[($2 + 18752 | 0) >> 2] | 0;
     if (($4 | 0) != ($2 | 0)) {
      break label$17
     }
     label$18 : {
      if (!($9 < $8)) {
       break label$18
      }
      HEAPF32[($0 + 36 | 0) >> 2] = $11;
      HEAPF32[($0 + 32 | 0) >> 2] = $9;
      break label$16;
     }
     if ($9 != $8) {
      break label$17
     }
     label$19 : {
      label$20 : {
       $9 = Math_fround(HEAPF32[($0 + 36 | 0) >> 2]);
       if (!($11 < $9)) {
        break label$20
       }
       HEAPF32[($0 + 36 | 0) >> 2] = $11;
       break label$19;
      }
      if ($11 != $9) {
       break label$17
      }
      if (!(($4 >>> 1 | 0 ? $15 : $14) < Math_fround(0.0))) {
       break label$17
      }
     }
     $1 = 1;
    }
    if ($8 != Math_fround(3402823466385288598117041.0e14)) {
     break label$1
    }
    if (!($12 < Math_fround(HEAPF32[($0 + 40 | 0) >> 2]))) {
     break label$1
    }
    if (($3 | 0) != (1 | 0)) {
     break label$1
    }
    if ((HEAPU8[($13 + 11 | 0) >> 0] | 0) & 16 | 0) {
     break label$1
    }
    label$21 : {
     label$22 : {
      if ($2) {
       break label$22
      }
      if ($10 < Math_fround(0.0)) {
       break label$21
      }
     }
     label$23 : {
      if (($2 | 0) != (1 | 0)) {
       break label$23
      }
      if ($10 > Math_fround(0.0)) {
       break label$21
      }
     }
     label$24 : {
      if (($2 | 0) != (2 | 0)) {
       break label$24
      }
      if ($7 < Math_fround(0.0)) {
       break label$21
      }
     }
     if (($2 | 0) != (3 | 0)) {
      break label$1
     }
     if (!($7 > Math_fround(0.0))) {
      break label$1
     }
    }
    HEAPF32[($0 + 40 | 0) >> 2] = $12;
   }
   $1 = 1;
  }
  return $1 | 0;
 }
 
 function ImGui__NavApplyItemToResult_28ImGuiNavItemData__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0);
  $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $2 = HEAP32[($1 + 16116 | 0) >> 2] | 0;
  HEAP32[$0 >> 2] = $2;
  HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($1 + 18280 | 0) >> 2] | 0;
  HEAP32[($0 + 8 | 0) >> 2] = HEAP32[($1 + 18248 | 0) >> 2] | 0;
  HEAP32[($0 + 28 | 0) >> 2] = HEAP32[($1 + 18284 | 0) >> 2] | 0;
  $3 = Math_fround(HEAPF32[($1 + 18308 | 0) >> 2]);
  $4 = Math_fround(HEAPF32[($1 + 18312 | 0) >> 2]);
  $5 = Math_fround(HEAPF32[($1 + 18316 | 0) >> 2]);
  $6 = Math_fround(HEAPF32[($2 + 308 | 0) >> 2]);
  $7 = Math_fround(HEAPF32[($2 + 312 | 0) >> 2]);
  HEAPF32[($0 + 24 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($1 + 18320 | 0) >> 2]) - $7);
  HEAPF32[($0 + 20 | 0) >> 2] = Math_fround($5 - $6);
  HEAPF32[($0 + 16 | 0) >> 2] = Math_fround($4 - $7);
  HEAPF32[($0 + 12 | 0) >> 2] = Math_fround($3 - $6);
 }
 
 function ImGui__FindWindowByName_28char_20const__29($0) {
  $0 = $0 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $1 = 0, $5 = 0, $6 = 0, $60 = 0;
  $1 = 0;
  label$1 : {
   $2 = HEAPU8[$0 >> 0] | 0;
   if (!$2) {
    break label$1
   }
   $3 = -1;
   label$2 : while (1) {
    $4 = $2 & 255 | 0;
    $2 = HEAPU8[($0 + 1 | 0) >> 0] | 0;
    label$3 : {
     if (($4 | 0) != (35 | 0)) {
      break label$3
     }
     if (($2 & 255 | 0 | 0) != (35 | 0)) {
      break label$3
     }
     $3 = (HEAPU8[($0 + 2 | 0) >> 0] | 0 | 0) == (35 | 0) ? -1 : $3;
    }
    $0 = $0 + 1 | 0;
    $3 = ($3 >>> 8 | 0) ^ (HEAP32[(((($3 & 255 | 0) ^ $4 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
    if ($2 & 255 | 0) {
     continue label$2
    }
    break label$2;
   };
   $1 = $3 ^ -1 | 0;
  }
  $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $5 = HEAP32[($2 + 16100 | 0) >> 2] | 0;
  $3 = $5;
  label$4 : {
   $6 = HEAP32[($2 + 16092 | 0) >> 2] | 0;
   if (!$6) {
    break label$4
   }
   $3 = $5;
   $2 = $6;
   label$5 : while (1) {
    $0 = $2 >>> 1 | 0;
    $4 = $3 + ($0 << 3 | 0) | 0;
    $60 = $4 + 8 | 0;
    $4 = (HEAP32[$4 >> 2] | 0) >>> 0 < $1 >>> 0;
    $3 = $4 ? $60 : $3;
    $2 = $4 ? $2 + ($0 ^ -1 | 0) | 0 : $0;
    if ($2) {
     continue label$5
    }
    break label$5;
   };
  }
  $2 = 0;
  label$6 : {
   if (($3 | 0) == ($5 + ($6 << 3 | 0) | 0 | 0)) {
    break label$6
   }
   if ((HEAP32[$3 >> 2] | 0 | 0) != ($1 | 0)) {
    break label$6
   }
   $2 = HEAP32[($3 + 4 | 0) >> 2] | 0;
  }
  return $2 | 0;
 }
 
 function ImGui__CalcWindowNextAutoFitSize_28ImGuiWindow__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = Math_fround(0), $2 = 0, $3 = Math_fround(0), $6 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5 = Math_fround(0), $29 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (!(HEAPU8[($1 + 222 | 0) >> 0] | 0)) {
       break label$4
      }
      if ((HEAP8[($1 + 248 | 0) >> 0] | 0 | 0) > (0 | 0)) {
       break label$4
      }
      if ((HEAP8[($1 + 249 | 0) >> 0] | 0 | 0) < (1 | 0)) {
       break label$3
      }
     }
     if (!(HEAPU8[($1 + 226 | 0) >> 0] | 0)) {
      break label$2
     }
     if (HEAPU8[($1 + 257 | 0) >> 0] | 0) {
      break label$2
     }
     if ((HEAP8[($1 + 256 | 0) >> 0] | 0 | 0) < (1 | 0)) {
      break label$2
     }
    }
    i64toi32_i32$0 = HEAP32[($1 + 96 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1 + 100 | 0) >> 2] | 0;
    $29 = i64toi32_i32$0;
    i64toi32_i32$0 = $2;
    HEAP32[($2 + 8 | 0) >> 2] = $29;
    HEAP32[($2 + 12 | 0) >> 2] = i64toi32_i32$1;
    break label$1;
   }
   $3 = Math_fround(HEAPF32[($1 + 108 | 0) >> 2]);
   label$5 : {
    $4 = Math_fround(HEAPF32[($1 + 104 | 0) >> 2]);
    if ($4 != Math_fround(0.0)) {
     break label$5
    }
    label$6 : {
     label$7 : {
      $4 = Math_fround(HEAPF32[($1 + 316 | 0) >> 2]);
      $5 = Math_fround(HEAPF32[($1 + 324 | 0) >> 2]);
      $4 = Math_fround(($4 >= $5 ? $4 : $5) - Math_fround(HEAPF32[($1 + 308 | 0) >> 2]));
      if (!(Math_fround(Math_abs($4)) < Math_fround(2147483648.0))) {
       break label$7
      }
      $6 = ~~$4;
      break label$6;
     }
     $6 = -2147483648;
    }
    $4 = Math_fround($6 | 0);
   }
   HEAPF32[($2 + 8 | 0) >> 2] = $4;
   label$8 : {
    if ($3 != Math_fround(0.0)) {
     break label$8
    }
    label$9 : {
     label$10 : {
      $3 = Math_fround(HEAPF32[($1 + 320 | 0) >> 2]);
      $4 = Math_fround(HEAPF32[($1 + 328 | 0) >> 2]);
      $3 = Math_fround(($3 >= $4 ? $3 : $4) - Math_fround(HEAPF32[($1 + 312 | 0) >> 2]));
      if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
       break label$10
      }
      $6 = ~~$3;
      break label$9;
     }
     $6 = -2147483648;
    }
    $3 = Math_fround($6 | 0);
   }
   HEAPF32[($2 + 12 | 0) >> 2] = $3;
  }
  CalcWindowAutoFitSize_28ImGuiWindow__2c_20ImVec2_20const__29($2 | 0, $1 | 0, $2 + 8 | 0 | 0);
  i64toi32_i32$1 = HEAP32[$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2 + 4 | 0) >> 2] | 0;
  CalcWindowSizeAfterConstraint_28ImGuiWindow__2c_20ImVec2_20const__29($0 | 0, $1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function ImGui__DockNodeRemoveWindow_28ImGuiDockNode__2c_20ImGuiWindow__2c_20unsigned_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $7 = 0, $3 = 0, $6 = 0, $8 = 0, i64toi32_i32$0 = 0, $4 = 0, $9 = 0, i64toi32_i32$1 = 0, $14 = 0, $267 = 0, $319 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  label$1 : {
   $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   if (!((HEAPU8[($4 + 23536 | 0) >> 0] | 0) & 64 | 0)) {
    break label$1
   }
   $5 = HEAP32[$0 >> 2] | 0;
   HEAP32[($3 + 20 | 0) >> 2] = HEAP32[$1 >> 2] | 0;
   HEAP32[($3 + 16 | 0) >> 2] = $5;
   ImGui__DebugLog_28char_20const__2c_20____29(69983 | 0, $3 + 16 | 0 | 0);
  }
  HEAP32[($1 + 932 | 0) >> 2] = 0;
  HEAP32[($1 + 940 | 0) >> 2] = $2;
  HEAP8[($1 + 905 | 0) >> 0] = (HEAPU8[($1 + 905 | 0) >> 0] | 0) & 246 | 0;
  $6 = (HEAP32[($1 + 8 | 0) >> 2] | 0) & -16777217 | 0;
  HEAP32[($1 + 8 | 0) >> 2] = $6;
  label$2 : {
   $7 = HEAP32[($1 + 820 | 0) >> 2] | 0;
   if (!$7) {
    break label$2
   }
   $8 = HEAP32[($7 + 444 | 0) >> 2] | 0;
   $9 = HEAP32[($7 + 436 | 0) >> 2] | 0;
   $5 = $8 + ($9 << 2 | 0) | 0;
   $2 = $8;
   label$3 : {
    if (($9 | 0) < (1 | 0)) {
     break label$3
    }
    $2 = $8;
    label$4 : while (1) {
     if ((HEAP32[$2 >> 2] | 0 | 0) == ($1 | 0)) {
      break label$3
     }
     $2 = $2 + 4 | 0;
     if ($2 >>> 0 < $5 >>> 0) {
      continue label$4
     }
     break label$4;
    };
   }
   if ($2 >>> 0 >= $5 >>> 0) {
    break label$2
   }
   memmove($2 | 0, $2 + 4 | 0 | 0, ($9 + ((($2 - $8 | 0) ^ -1 | 0) >>> 2 | 0) | 0) << 2 | 0 | 0) | 0;
   HEAP32[($7 + 436 | 0) >> 2] = (HEAP32[($7 + 436 | 0) >> 2] | 0) + -1 | 0;
   $6 = HEAP32[($1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[($1 + 820 | 0) >> 2] = 0;
  HEAP32[($1 + 844 | 0) >> 2] = $1;
  HEAP32[($1 + 840 | 0) >> 2] = $1;
  HEAP32[($1 + 836 | 0) >> 2] = $1;
  HEAP32[($1 + 832 | 0) >> 2] = $1;
  HEAP32[($1 + 828 | 0) >> 2] = $1;
  label$5 : {
   if (!($6 & 8388608 | 0)) {
    break label$5
   }
   $2 = $1;
   label$6 : while (1) {
    $2 = HEAP32[($2 + 820 | 0) >> 2] | 0;
    if ((HEAPU8[($2 + 10 | 0) >> 0] | 0) & 128 | 0) {
     continue label$6
    }
    break label$6;
   };
   HEAP32[($1 + 844 | 0) >> 2] = $2;
  }
  label$7 : {
   $5 = HEAP32[($0 + 36 | 0) >> 2] | 0;
   if (($5 | 0) < (1 | 0)) {
    break label$7
   }
   $6 = HEAP32[($0 + 44 | 0) >> 2] | 0;
   $2 = 0;
   label$8 : while (1) {
    label$9 : {
     $7 = $6 + ($2 << 2 | 0) | 0;
     if ((HEAP32[$7 >> 2] | 0 | 0) != ($1 | 0)) {
      break label$9
     }
     memmove($7 | 0, $7 + 4 | 0 | 0, ($5 + ($2 ^ -1 | 0) | 0) << 2 | 0 | 0) | 0;
     $5 = (HEAP32[($0 + 36 | 0) >> 2] | 0) + -1 | 0;
     HEAP32[($0 + 36 | 0) >> 2] = $5;
     break label$7;
    }
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($5 | 0)) {
     continue label$8
    }
    break label$8;
   };
  }
  label$10 : {
   if ((HEAP32[($0 + 116 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
    break label$10
   }
   HEAP32[($0 + 116 | 0) >> 2] = 0;
  }
  $2 = $0 + 158 | 0;
  HEAP8[$2 >> 0] = HEAPU8[$2 >> 0] | 0 | 4 | 0;
  label$11 : {
   $2 = HEAP32[($0 + 48 | 0) >> 2] | 0;
   if (!$2) {
    break label$11
   }
   ImGui__TabBarRemoveTab_28ImGuiTabBar__2c_20unsigned_20int_29($2 | 0, HEAP32[($1 + 160 | 0) >> 2] | 0 | 0);
   $5 = HEAP32[($0 + 36 | 0) >> 2] | 0;
   if (($5 | 0) >= (((HEAPU8[($0 + 17 | 0) >> 0] | 0) & 8 | 0 ? 1 : 2) | 0)) {
    break label$11
   }
   $2 = HEAP32[($0 + 48 | 0) >> 2] | 0;
   if (!$2) {
    break label$11
   }
   label$12 : {
    $5 = HEAP32[($2 + 140 | 0) >> 2] | 0;
    if (!$5) {
     break label$12
    }
    label$13 : {
     $7 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$7) {
      break label$13
     }
     $7 = $7 + 184 | 0;
     HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($5, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   label$14 : {
    $5 = HEAP32[($2 + 8 | 0) >> 2] | 0;
    if (!$5) {
     break label$14
    }
    label$15 : {
     $7 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$7) {
      break label$15
     }
     $7 = $7 + 184 | 0;
     HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($5, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   label$16 : {
    $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$5) {
     break label$16
    }
    $5 = $5 + 184 | 0;
    HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1 | 0;
   }
   FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($2, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   HEAP32[($0 + 48 | 0) >> 2] = 0;
   $5 = HEAP32[($0 + 36 | 0) >> 2] | 0;
  }
  label$17 : {
   label$18 : {
    label$19 : {
     switch ($5 | 0) {
     case 0:
      $5 = 0;
      if ((HEAPU8[($0 + 17 | 0) >> 0] | 0) & 12 | 0) {
       break label$18
      }
      if ((HEAP32[($1 + 940 | 0) >> 2] | 0 | 0) == (HEAP32[$0 >> 2] | 0 | 0)) {
       break label$18
      }
      ImGui__DockContextRemoveNode_28ImGuiContext__2c_20ImGuiDockNode__2c_20bool_29($4 | 0, $0 | 0, 1 | 0);
      break label$17;
     case 1:
      break label$19;
     default:
      break label$18;
     };
    }
    $5 = 1;
    if ((HEAPU8[($0 + 17 | 0) >> 0] | 0) & 8 | 0) {
     break label$18
    }
    $1 = HEAP32[($0 + 112 | 0) >> 2] | 0;
    if (!$1) {
     break label$18
    }
    $2 = HEAP32[(HEAP32[($0 + 44 | 0) >> 2] | 0) >> 2] | 0;
    $5 = 1;
    label$21 : {
     if (!(HEAPU8[($1 + 218 | 0) >> 0] | 0)) {
      break label$21
     }
     if (HEAP32[($0 + 24 | 0) >> 2] | 0) {
      break label$21
     }
     $5 = 1;
     label$22 : {
      if (!((HEAPU8[($4 + 23536 | 0) >> 0] | 0) & 128 | 0)) {
       break label$22
      }
      $5 = HEAP32[$0 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($2 + 4 | 0) >> 2] | 0;
      HEAP32[($3 + 4 | 0) >> 2] = HEAP32[(HEAP32[($1 + 44 | 0) >> 2] | 0) >> 2] | 0;
      $14 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$0 = __wasm_rotl_i64($14 | 0, i64toi32_i32$1 | 0, 32 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $267 = i64toi32_i32$0;
      i64toi32_i32$0 = $3;
      HEAP32[($3 + 8 | 0) >> 2] = $267;
      HEAP32[($3 + 12 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[$3 >> 2] = $5;
      ImGui__DebugLog_28char_20const__2c_20____29(70092 | 0, $3 | 0);
      $5 = HEAP32[($0 + 36 | 0) >> 2] | 0;
      $1 = HEAP32[($0 + 112 | 0) >> 2] | 0;
     }
     $7 = HEAP32[($1 + 44 | 0) >> 2] | 0;
     HEAP32[($7 + 108 | 0) >> 2] = $2;
     HEAP32[$7 >> 2] = HEAP32[($2 + 4 | 0) >> 2] | 0;
    }
    HEAP8[($2 + 222 | 0) >> 0] = HEAPU8[($1 + 222 | 0) >> 0] | 0;
   }
   $1 = 0;
   $2 = 0;
   label$23 : {
    $7 = HEAP32[($0 + 28 | 0) >> 2] | 0;
    if (!$7) {
     break label$23
    }
    $2 = ((HEAPU16[($7 + 156 | 0) >> 1] | 0) >>> 9 | 0) & 1 | 0;
   }
   $7 = HEAP32[($0 + 16 | 0) >> 2] | 0;
   $6 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   label$24 : {
    $8 = HEAP32[($0 + 32 | 0) >> 2] | 0;
    if (!$8) {
     break label$24
    }
    $1 = ((HEAPU16[($8 + 156 | 0) >> 1] | 0) >>> 9 | 0) & 1 | 0;
   }
   $319 = ($1 | ($2 | (($5 | 0) > (0 | 0) | (($6 ? 2048 : 1024) & $7 | 0 | 0) != (0 | 0) | 0) | 0) | 0) << 9 | 0;
   $1 = $0 + 158 | 0;
   $2 = $319 | ((HEAPU16[($0 + 156 | 0) >> 1] | 0 | ((HEAPU8[$1 >> 0] | 0) << 16 | 0) | 0) & 16776703 | 0) | 0;
   HEAP16[($0 + 156 | 0) >> 1] = $2;
   HEAP8[$1 >> 0] = $2 >>> 16 | 0;
  }
  __stack_pointer = $3 + 32 | 0;
 }
 
 function ImGui__DockNodeUpdateHasCentralNodeChild_28ImGuiDockNode__29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP16[($0 + 156 | 0) >> 1] = (HEAPU16[($0 + 156 | 0) >> 1] | 0) & 49151 | 0;
  label$1 : {
   $1 = HEAP32[($0 + 28 | 0) >> 2] | 0;
   if (!$1) {
    break label$1
   }
   ImGui__DockNodeUpdateHasCentralNodeChild_28ImGuiDockNode__29($1 | 0);
  }
  label$2 : {
   $1 = HEAP32[($0 + 32 | 0) >> 2] | 0;
   if (!$1) {
    break label$2
   }
   ImGui__DockNodeUpdateHasCentralNodeChild_28ImGuiDockNode__29($1 | 0);
  }
  label$3 : {
   if (HEAP32[($0 + 24 | 0) >> 2] | 0) {
    break label$3
   }
   $0 = HEAP32[($0 + 120 | 0) >> 2] | 0;
   if (!$0) {
    break label$3
   }
   label$4 : while (1) {
    HEAP16[($0 + 156 | 0) >> 1] = HEAPU16[($0 + 156 | 0) >> 1] | 0 | 16384 | 0;
    $0 = HEAP32[($0 + 24 | 0) >> 2] | 0;
    if ($0) {
     continue label$4
    }
    break label$4;
   };
  }
 }
 
 function ImGui__DockNodeTreeUpdatePosSize_28ImGuiDockNode__2c_20ImVec2_2c_20ImVec2_2c_20ImGuiDockNode__29($0, $1, $1$hi, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $14 = Math_fround(0), $10 = 0, $4 = 0, $13 = Math_fround(0), i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $15 = Math_fround(0), $5 = 0, $6 = 0, $12 = 0, $11 = 0, $7 = 0, $9 = 0, $8 = 0, $16 = Math_fround(0), $29 = 0;
  $4 = __stack_pointer - 64 | 0;
  __stack_pointer = $4;
  label$1 : {
   label$2 : {
    if (!$3) {
     break label$2
    }
    if (($3 | 0) != ($0 | 0)) {
     break label$1
    }
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = $0;
   HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] = $1;
   HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = HEAP32[$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($2 + 4 | 0) >> 2] | 0;
   $29 = i64toi32_i32$0;
   i64toi32_i32$0 = $0;
   HEAP32[(i64toi32_i32$0 + 60 | 0) >> 2] = $29;
   HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] = i64toi32_i32$1;
  }
  label$3 : {
   $5 = HEAP32[($0 + 28 | 0) >> 2] | 0;
   if (!$5) {
    break label$3
   }
   $6 = HEAP32[($0 + 32 | 0) >> 2] | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $4;
   HEAP32[($4 + 56 | 0) >> 2] = $1;
   HEAP32[($4 + 60 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($2 + 4 | 0) >> 2] | 0;
   $7 = i64toi32_i32$1;
   i64toi32_i32$1 = $4;
   HEAP32[($4 + 48 | 0) >> 2] = $7;
   HEAP32[($4 + 52 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4;
   HEAP32[($4 + 40 | 0) >> 2] = $7;
   HEAP32[($4 + 44 | 0) >> 2] = i64toi32_i32$0;
   label$4 : {
    label$5 : {
     if ($3) {
      break label$5
     }
     $8 = 0;
     $9 = 0;
     break label$4;
    }
    $9 = 1;
    $8 = 1;
    label$6 : {
     if (($5 | 0) == ($3 | 0)) {
      break label$6
     }
     $10 = $3;
     label$7 : while (1) {
      $10 = HEAP32[($10 + 24 | 0) >> 2] | 0;
      $8 = ($10 | 0) != (0 | 0);
      if (($10 | 0) == ($5 | 0)) {
       break label$6
      }
      if ($10) {
       continue label$7
      }
      break label$7;
     };
    }
    if (($6 | 0) == ($3 | 0)) {
     break label$4
    }
    $10 = $3;
    label$8 : while (1) {
     $10 = HEAP32[($10 + 24 | 0) >> 2] | 0;
     $9 = ($10 | 0) != (0 | 0);
     if (($10 | 0) == ($6 | 0)) {
      break label$4
     }
     if ($10) {
      continue label$8
     }
     break label$8;
    };
   }
   $10 = HEAPU16[($5 + 156 | 0) >> 1] | 0 | ((HEAPU8[($5 + 158 | 0) >> 0] | 0) << 16 | 0) | 0;
   label$9 : {
    label$10 : {
     if ($8) {
      break label$10
     }
     if (!($10 & 512 | 0)) {
      break label$9
     }
    }
    $11 = HEAPU16[($6 + 156 | 0) >> 1] | 0 | ((HEAPU8[($6 + 158 | 0) >> 0] | 0) << 16 | 0) | 0;
    if (($9 ^ -1 | 0) & !($11 & 512 | 0) | 0) {
     break label$9
    }
    label$11 : {
     label$12 : {
      $0 = HEAP32[($0 + 76 | 0) >> 2] | 0;
      $12 = $0 << 2 | 0;
      $13 = Math_fround(Math_fround(HEAPF32[($2 + $12 | 0) >> 2]) + Math_fround(-2.0));
      $13 = $13 >= Math_fround(0.0) ? $13 : Math_fround(0.0);
      $14 = Math_fround(HEAPF32[(((HEAP32[(0 + 92720 | 0) >> 2] | 0) + $12 | 0) + 14420 | 0) >> 2]);
      $14 = Math_fround($14 + $14);
      $14 = Math_fround(($13 < $14 ? $13 : $14) * Math_fround(.5));
      if (!(Math_fround(Math_abs($14)) < Math_fround(2147483648.0))) {
       break label$12
      }
      $12 = ~~$14;
      break label$11;
     }
     $12 = -2147483648;
    }
    $2 = $11 & 65536 | 0;
    label$13 : {
     label$14 : {
      label$15 : {
       label$16 : {
        if (!($10 & 65536 | 0)) {
         break label$16
        }
        if ($2) {
         break label$15
        }
        $10 = $0 << 2 | 0;
        $2 = $5 + $10 | 0;
        $14 = Math_fround($13 + Math_fround(-1.0));
        $15 = Math_fround(HEAPF32[($2 + 60 | 0) >> 2]);
        $14 = $14 < $15 ? $14 : $15;
        HEAPF32[($2 + 68 | 0) >> 2] = $14;
        HEAPF32[(($4 + 48 | 0) + $10 | 0) >> 2] = $14;
        $13 = Math_fround($13 - $14);
        HEAPF32[(($6 + $10 | 0) + 68 | 0) >> 2] = $13;
        HEAPF32[(($4 + 40 | 0) + $10 | 0) >> 2] = $13;
        break label$13;
       }
       if (!$2) {
        break label$14
       }
       $10 = $0 << 2 | 0;
       $2 = $6 + $10 | 0;
       $14 = Math_fround($13 + Math_fround(-1.0));
       $15 = Math_fround(HEAPF32[($2 + 60 | 0) >> 2]);
       $14 = $14 < $15 ? $14 : $15;
       HEAPF32[($2 + 68 | 0) >> 2] = $14;
       HEAPF32[(($4 + 40 | 0) + $10 | 0) >> 2] = $14;
       $14 = Math_fround($13 - $14);
       HEAPF32[(($5 + $10 | 0) + 68 | 0) >> 2] = $14;
       HEAPF32[(($4 + 48 | 0) + $10 | 0) >> 2] = $14;
       break label$13;
      }
      label$17 : {
       label$18 : {
        $10 = $0 << 2 | 0;
        $2 = ($4 + 48 | 0) + $10 | 0;
        $14 = Math_fround(HEAPF32[$2 >> 2]);
        $11 = ($4 + 40 | 0) + $10 | 0;
        $14 = Math_fround($13 * Math_fround($14 / Math_fround($14 + Math_fround(HEAPF32[$11 >> 2]))));
        if (!(Math_fround(Math_abs($14)) < Math_fround(2147483648.0))) {
         break label$18
        }
        $12 = ~~$14;
        break label$17;
       }
       $12 = -2147483648;
      }
      $14 = Math_fround($12 | 0);
      HEAPF32[(($5 + $10 | 0) + 68 | 0) >> 2] = $14;
      HEAPF32[$2 >> 2] = $14;
      $13 = Math_fround($13 - $14);
      HEAPF32[(($6 + $10 | 0) + 68 | 0) >> 2] = $13;
      HEAPF32[$11 >> 2] = $13;
      break label$13;
     }
     $15 = Math_fround($12 | 0);
     label$19 : {
      $2 = $0 << 2 | 0;
      $14 = Math_fround(HEAPF32[(($5 + $2 | 0) + 68 | 0) >> 2]);
      if ($14 == Math_fround(0.0)) {
       break label$19
      }
      if (!($11 & 16384 | 0)) {
       break label$19
      }
      $10 = $0 << 2 | 0;
      $15 = Math_fround($13 - $15);
      $14 = $15 < $14 ? $15 : $14;
      HEAPF32[(($4 + 48 | 0) + $10 | 0) >> 2] = $14;
      HEAPF32[(($4 + 40 | 0) + $10 | 0) >> 2] = Math_fround($13 - $14);
      break label$13;
     }
     label$20 : {
      $16 = Math_fround(HEAPF32[(($6 + $2 | 0) + 68 | 0) >> 2]);
      if ($16 == Math_fround(0.0)) {
       break label$20
      }
      if (!($10 & 16384 | 0)) {
       break label$20
      }
      $10 = $0 << 2 | 0;
      $14 = Math_fround($13 - $15);
      $14 = $14 < $16 ? $14 : $16;
      HEAPF32[(($4 + 40 | 0) + $10 | 0) >> 2] = $14;
      $14 = Math_fround($13 - $14);
      HEAPF32[(($4 + 48 | 0) + $10 | 0) >> 2] = $14;
      break label$13;
     }
     label$21 : {
      label$22 : {
       $14 = Math_fround(Math_fround($13 * Math_fround($14 / Math_fround($14 + $16))) + Math_fround(.5));
       if (!(Math_fround(Math_abs($14)) < Math_fround(2147483648.0))) {
        break label$22
       }
       $10 = ~~$14;
       break label$21;
      }
      $10 = -2147483648;
     }
     $2 = $0 << 2 | 0;
     $14 = Math_fround($10 | 0);
     $14 = $15 >= $14 ? $15 : $14;
     HEAPF32[(($4 + 48 | 0) + $2 | 0) >> 2] = $14;
     HEAPF32[(($4 + 40 | 0) + $2 | 0) >> 2] = Math_fround($13 - $14);
    }
    $10 = ($4 + 56 | 0) + ($0 << 2 | 0) | 0;
    HEAPF32[$10 >> 2] = Math_fround(Math_fround(HEAPF32[$10 >> 2]) + Math_fround($14 + Math_fround(2.0)));
   }
   label$23 : {
    label$24 : {
     label$25 : {
      if ($3) {
       break label$25
      }
      $10 = $6 + 158 | 0;
      HEAP8[$10 >> 0] = (HEAPU8[$10 >> 0] | 0) & 254 | 0;
      $10 = $5 + 158 | 0;
      HEAP8[$10 >> 0] = (HEAPU8[$10 >> 0] | 0) & 254 | 0;
      $9 = ((HEAPU16[($6 + 156 | 0) >> 1] | 0) & 512 | 0) >>> 9 | 0;
      if ((HEAPU16[($5 + 156 | 0) >> 1] | 0) & 512 | 0) {
       break label$24
      }
      break label$23;
     }
     if (!$8) {
      break label$23
     }
    }
    i64toi32_i32$0 = HEAP32[($4 + 48 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($4 + 52 | 0) >> 2] | 0;
    $7 = i64toi32_i32$0;
    i64toi32_i32$0 = $4;
    HEAP32[($4 + 32 | 0) >> 2] = $7;
    HEAP32[($4 + 36 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$0 = $4;
    HEAP32[($4 + 16 | 0) >> 2] = $7;
    HEAP32[($4 + 20 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$1 = $1$hi;
    ImGui__DockNodeTreeUpdatePosSize_28ImGuiDockNode__2c_20ImVec2_2c_20ImVec2_2c_20ImGuiDockNode__29($5 | 0, $1 | 0, i64toi32_i32$1 | 0, $4 + 16 | 0 | 0, 0 | 0);
   }
   if (!$9) {
    break label$3
   }
   i64toi32_i32$1 = HEAP32[($4 + 40 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($4 + 44 | 0) >> 2] | 0;
   $1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$1 = $4;
   HEAP32[($4 + 24 | 0) >> 2] = $1;
   HEAP32[($4 + 28 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4;
   HEAP32[($4 + 8 | 0) >> 2] = $1;
   HEAP32[($4 + 12 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = HEAP32[($4 + 56 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($4 + 60 | 0) >> 2] | 0;
   ImGui__DockNodeTreeUpdatePosSize_28ImGuiDockNode__2c_20ImVec2_2c_20ImVec2_2c_20ImGuiDockNode__29($6 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $4 + 8 | 0 | 0, 0 | 0);
  }
  __stack_pointer = $4 + 64 | 0;
 }
 
 function ImGui__DockNodeAddWindow_28ImGuiDockNode__2c_20ImGuiWindow__2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $3 = 0, $8 = 0, $280 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  label$1 : {
   $5 = HEAP32[($1 + 932 | 0) >> 2] | 0;
   if (!$5) {
    break label$1
   }
   ImGui__DockNodeRemoveWindow_28ImGuiDockNode__2c_20ImGuiWindow__2c_20unsigned_20int_29($5 | 0, $1 | 0, 0 | 0);
  }
  label$2 : {
   if (!((HEAPU8[($4 + 23536 | 0) >> 0] | 0) & 64 | 0)) {
    break label$2
   }
   $4 = HEAP32[$0 >> 2] | 0;
   HEAP32[($3 + 4 | 0) >> 2] = HEAP32[$1 >> 2] | 0;
   HEAP32[$3 >> 2] = $4;
   ImGui__DebugLog_28char_20const__2c_20____29(70039 | 0, $3 | 0);
  }
  $4 = HEAP32[($0 + 36 | 0) >> 2] | 0;
  label$3 : {
   if (HEAP32[($0 + 112 | 0) >> 2] | 0) {
    break label$3
   }
   if (($4 | 0) != (1 | 0)) {
    break label$3
   }
   $4 = 1;
   $5 = HEAP32[(HEAP32[($0 + 44 | 0) >> 2] | 0) >> 2] | 0;
   if (HEAPU8[($5 + 220 | 0) >> 0] | 0) {
    break label$3
   }
   $4 = 1;
   HEAP8[($5 + 226 | 0) >> 0] = 1;
   HEAP8[($5 + 256 | 0) >> 0] = HEAPU8[($5 + 219 | 0) >> 0] | 0 ? 1 : 2;
  }
  label$4 : {
   if (($4 | 0) != (HEAP32[($0 + 40 | 0) >> 2] | 0 | 0)) {
    break label$4
   }
   $5 = $4 + 1 | 0;
   label$5 : {
    label$6 : {
     if ($4) {
      break label$6
     }
     $6 = 8;
     break label$5;
    }
    $6 = (($4 | 0) / (2 | 0) | 0) + $4 | 0;
   }
   $5 = ($6 | 0) > ($5 | 0) ? $6 : $5;
   if (($4 | 0) >= ($5 | 0)) {
    break label$4
   }
   $4 = $5 << 2 | 0;
   label$7 : {
    $6 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$6) {
     break label$7
    }
    $6 = $6 + 184 | 0;
    HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1 | 0;
   }
   $4 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($4, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$8 : {
    $6 = HEAP32[($0 + 44 | 0) >> 2] | 0;
    if (!$6) {
     break label$8
    }
    __memcpy($4 | 0, $6 | 0, (HEAP32[($0 + 36 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
    label$9 : {
     $6 = HEAP32[($0 + 44 | 0) >> 2] | 0;
     if (!$6) {
      break label$9
     }
     $7 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$7) {
      break label$9
     }
     $7 = $7 + 184 | 0;
     HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($6, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($0 + 40 | 0) >> 2] = $5;
   HEAP32[($0 + 44 | 0) >> 2] = $4;
   $4 = HEAP32[($0 + 36 | 0) >> 2] | 0;
  }
  HEAP32[((HEAP32[($0 + 44 | 0) >> 2] | 0) + ($4 << 2 | 0) | 0) >> 2] = $1;
  $4 = HEAP32[($0 + 36 | 0) >> 2] | 0;
  HEAP32[($0 + 36 | 0) >> 2] = $4 + 1 | 0;
  $5 = $0 + 158 | 0;
  HEAP8[$5 >> 0] = HEAPU8[$5 >> 0] | 0 | 4 | 0;
  HEAP32[($1 + 932 | 0) >> 2] = $0;
  HEAP32[($1 + 940 | 0) >> 2] = HEAP32[$0 >> 2] | 0;
  HEAP8[($1 + 905 | 0) >> 0] = (HEAPU8[($1 + 905 | 0) >> 0] | 0) & 246 | 0 | ($4 | 0) > (0 | 0) | 0;
  label$10 : {
   if (HEAP32[($0 + 112 | 0) >> 2] | 0) {
    break label$10
   }
   if (HEAP32[($0 + 24 | 0) >> 2] | 0) {
    break label$10
   }
   if ((HEAP32[($0 + 16 | 0) >> 2] | 0) & 1024 | 0) {
    break label$10
   }
   $8 = $0 + 158 | 0;
   $4 = HEAPU16[($0 + 156 | 0) >> 1] | 0 | ((HEAPU8[$8 >> 0] | 0) << 16 | 0) | 0;
   $5 = $4 & 7 | 0;
   $4 = $5 ? $4 : $4 & 16777208 | 0 | 2 | 0;
   $7 = $4 & 56 | 0;
   $6 = $7 ? $4 : $4 & 16777159 | 0 | 16 | 0;
   $4 = $6 & 448 | 0;
   label$11 : {
    if (!$5) {
     break label$11
    }
    if (!$7) {
     break label$11
    }
    if ($4) {
     break label$10
    }
   }
   $4 = $4 ? $6 : $6 & 16776767 | 0 | 128 | 0;
   HEAP16[($0 + 156 | 0) >> 1] = $4;
   HEAP8[$8 >> 0] = $4 >>> 16 | 0;
  }
  label$12 : {
   if (!$2) {
    break label$12
   }
   label$13 : {
    $2 = HEAP32[($0 + 48 | 0) >> 2] | 0;
    if ($2) {
     break label$13
    }
    $4 = 0;
    label$14 : {
     $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$2) {
      break label$14
     }
     $2 = $2 + 184 | 0;
     HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1 | 0;
    }
    $2 = ImGuiTabBar__ImGuiTabBar_28_29(FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](144, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0 | 0) | 0;
    HEAP32[($0 + 48 | 0) >> 2] = $2;
    $5 = HEAP32[($0 + 148 | 0) >> 2] | 0;
    HEAP32[($2 + 20 | 0) >> 2] = $5;
    HEAP32[($2 + 24 | 0) >> 2] = $5;
    if ((HEAP32[($0 + 36 | 0) >> 2] | 0 | 0) < (2 | 0)) {
     break label$13
    }
    label$15 : while (1) {
     ImGui__TabBarAddTab_28ImGuiTabBar__2c_20int_2c_20ImGuiWindow__29(HEAP32[($0 + 48 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[((HEAP32[($0 + 44 | 0) >> 2] | 0) + ($4 << 2 | 0) | 0) >> 2] | 0 | 0);
     $4 = $4 + 1 | 0;
     if (($4 | 0) < ((HEAP32[($0 + 36 | 0) >> 2] | 0) + -1 | 0 | 0)) {
      continue label$15
     }
     break label$15;
    };
    $2 = HEAP32[($0 + 48 | 0) >> 2] | 0;
   }
   ImGui__TabBarAddTab_28ImGuiTabBar__2c_20int_2c_20ImGuiWindow__29($2 | 0, 4194304 | 0, $1 | 0);
  }
  $4 = 0;
  $2 = 0;
  label$16 : {
   $5 = HEAP32[($0 + 28 | 0) >> 2] | 0;
   if (!$5) {
    break label$16
   }
   $2 = ((HEAPU16[($5 + 156 | 0) >> 1] | 0) >>> 9 | 0) & 1 | 0;
  }
  $5 = HEAP32[($0 + 36 | 0) >> 2] | 0;
  $6 = HEAP32[($0 + 16 | 0) >> 2] | 0;
  $7 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  label$17 : {
   $8 = HEAP32[($0 + 32 | 0) >> 2] | 0;
   if (!$8) {
    break label$17
   }
   $4 = ((HEAPU16[($8 + 156 | 0) >> 1] | 0) >>> 9 | 0) & 1 | 0;
  }
  $280 = ($4 | ($2 | (($5 | 0) > (0 | 0) | (($7 ? 2048 : 1024) & $6 | 0 | 0) != (0 | 0) | 0) | 0) | 0) << 9 | 0;
  $4 = $0 + 158 | 0;
  $2 = $280 | ((HEAPU16[($0 + 156 | 0) >> 1] | 0 | ((HEAPU8[$4 >> 0] | 0) << 16 | 0) | 0) & 16776703 | 0) | 0;
  HEAP16[($0 + 156 | 0) >> 1] = $2;
  HEAP8[$4 >> 0] = $2 >>> 16 | 0;
  label$18 : {
   $0 = HEAP32[($0 + 112 | 0) >> 2] | 0;
   if (!$0) {
    break label$18
   }
   HEAP32[($1 + 820 | 0) >> 2] = $0;
   HEAP32[($1 + 844 | 0) >> 2] = $1;
   HEAP32[($1 + 840 | 0) >> 2] = $1;
   HEAP32[($1 + 836 | 0) >> 2] = $1;
   HEAP32[($1 + 832 | 0) >> 2] = $1;
   HEAP32[($1 + 828 | 0) >> 2] = $1;
   label$19 : {
    $4 = HEAP32[($1 + 8 | 0) >> 2] | 0;
    if ($4 & 33554432 | 0) {
     break label$19
    }
    HEAP32[($1 + 836 | 0) >> 2] = HEAP32[($0 + 836 | 0) >> 2] | 0;
    if ((HEAPU8[($1 + 905 | 0) >> 0] | 0) & 1 | 0) {
     break label$19
    }
    if ((HEAPU8[($0 + 11 | 0) >> 0] | 0) & 32 | 0) {
     break label$19
    }
    HEAP32[($1 + 828 | 0) >> 2] = HEAP32[($0 + 828 | 0) >> 2] | 0;
   }
   label$20 : {
    if (!($4 & 67108864 | 0)) {
     break label$20
    }
    HEAP32[($1 + 832 | 0) >> 2] = HEAP32[($0 + 832 | 0) >> 2] | 0;
   }
   label$21 : {
    if ($4 & 134217728 | 0) {
     break label$21
    }
    HEAP32[($1 + 840 | 0) >> 2] = HEAP32[($0 + 840 | 0) >> 2] | 0;
   }
   if (!($4 & 8388608 | 0)) {
    break label$18
   }
   $0 = $1;
   label$22 : while (1) {
    $0 = HEAP32[($0 + 820 | 0) >> 2] | 0;
    if ((HEAPU8[($0 + 10 | 0) >> 0] | 0) & 128 | 0) {
     continue label$22
    }
    break label$22;
   };
   HEAP32[($1 + 844 | 0) >> 2] = $0;
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function ImGui__FindBestWindowPosForPopupEx_28ImVec2_20const__2c_20ImVec2_20const__2c_20int__2c_20ImRect_20const__2c_20ImRect_20const__2c_20ImGuiPopupPositionPolicy_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $23 = Math_fround(0), $24 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $14 = Math_fround(0), $8 = Math_fround(0), $12 = Math_fround(0), $15 = 0, $16 = 0, $21 = 0, $19 = 0, i64toi32_i32$0 = 0, $7 = Math_fround(0), $11 = Math_fround(0), $10 = Math_fround(0), $20 = Math_fround(0), $28 = 0, i64toi32_i32$1 = 0, $25 = 0, $27 = 0, $9 = Math_fround(0), $26 = 0, $22 = Math_fround(0), i64toi32_i32$4 = 0, $13 = Math_fround(0), i64toi32_i32$3 = 0, $36 = 0, $577 = 0, $578 = Math_fround(0), i64toi32_i32$2 = 0;
  $7 = Math_fround(HEAPF32[($2 + 4 | 0) >> 2]);
  $8 = Math_fround(HEAPF32[($4 + 12 | 0) >> 2]);
  $9 = Math_fround(HEAPF32[($1 + 4 | 0) >> 2]);
  $10 = Math_fround(HEAPF32[($4 + 4 | 0) >> 2]);
  $11 = Math_fround(HEAPF32[($4 + 8 | 0) >> 2]);
  $12 = Math_fround(HEAPF32[$2 >> 2]);
  $13 = Math_fround(HEAPF32[$1 >> 2]);
  $14 = Math_fround(HEAPF32[$4 >> 2]);
  label$1 : {
   label$2 : {
    if (($6 | 0) != (1 | 0)) {
     break label$2
    }
    $15 = HEAP32[$3 >> 2] | 0;
    $16 = ($15 | 0) != (-1 | 0);
    $2 = HEAP32[($16 ? $3 : ($16 ? -4 : 0) + 72272 | 0) >> 2] | 0;
    $17 = Math_fround(Math_fround(HEAPF32[($5 + 4 | 0) >> 2]) - $7);
    $18 = Math_fround(Math_fround(HEAPF32[($5 + 8 | 0) >> 2]) - $12);
    $19 = HEAP32[($5 + 12 | 0) >> 2] | 0;
    $20 = (wasm2js_scratch_store_i32(2, $19), wasm2js_scratch_load_f32());
    $21 = HEAP32[$5 >> 2] | 0;
    $22 = (wasm2js_scratch_store_i32(2, $21), wasm2js_scratch_load_f32());
    label$3 : {
     label$4 : {
      if ($16) {
       break label$4
      }
      if (($2 | 0) == (-1 | 0)) {
       break label$3
      }
     }
     i64toi32_i32$1 = $0;
     i64toi32_i32$0 = 0;
     HEAP32[$0 >> 2] = 0;
     HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
     $23 = Math_fround(0.0);
     $24 = Math_fround(0.0);
     label$5 : {
      label$6 : {
       label$7 : {
        switch ($2 | 0) {
        case 3:
         HEAP32[$0 >> 2] = $21;
         HEAP32[($0 + 4 | 0) >> 2] = $19;
         $23 = $20;
         $24 = $22;
         break label$5;
        case 1:
         HEAP32[$0 >> 2] = $21;
         HEAPF32[($0 + 4 | 0) >> 2] = $17;
         $23 = $17;
         $24 = $22;
         break label$5;
        case 0:
         HEAPF32[$0 >> 2] = $18;
         HEAP32[($0 + 4 | 0) >> 2] = $19;
         $23 = $20;
         break label$6;
        case 2:
         break label$7;
        default:
         break label$5;
        };
       }
       HEAPF32[$0 >> 2] = $18;
       HEAPF32[($0 + 4 | 0) >> 2] = $17;
       $23 = $17;
      }
      $24 = $18;
     }
     if (!($24 >= $14)) {
      break label$3
     }
     if (!($23 >= $10)) {
      break label$3
     }
     if (!(Math_fround($12 + $24) <= $11)) {
      break label$3
     }
     if (Math_fround($7 + $23) <= $8) {
      break label$1
     }
    }
    label$11 : {
     $2 = HEAP32[(((($15 | 0) == (-1 | 0)) << 2 | 0) + 72272 | 0) >> 2] | 0;
     if (($2 | 0) == ($15 | 0)) {
      break label$11
     }
     i64toi32_i32$1 = $0;
     i64toi32_i32$0 = 0;
     HEAP32[$0 >> 2] = 0;
     HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
     $23 = Math_fround(0.0);
     $24 = Math_fround(0.0);
     label$12 : {
      label$13 : {
       label$14 : {
        switch ($2 | 0) {
        case 2:
         HEAPF32[$0 >> 2] = $18;
         HEAPF32[($0 + 4 | 0) >> 2] = $17;
         $23 = $17;
         $24 = $18;
         break label$12;
        case 0:
         HEAPF32[$0 >> 2] = $18;
         HEAP32[($0 + 4 | 0) >> 2] = $19;
         $23 = $20;
         $24 = $18;
         break label$12;
        case 1:
         HEAP32[$0 >> 2] = $21;
         HEAPF32[($0 + 4 | 0) >> 2] = $17;
         $23 = $17;
         break label$13;
        case 3:
         break label$14;
        default:
         break label$12;
        };
       }
       HEAP32[$0 >> 2] = $21;
       HEAP32[($0 + 4 | 0) >> 2] = $19;
       $23 = $20;
      }
      $24 = $22;
     }
     if (!($24 >= $14)) {
      break label$11
     }
     if (!($23 >= $10)) {
      break label$11
     }
     if (!(Math_fround($12 + $24) <= $11)) {
      break label$11
     }
     if (Math_fround($7 + $23) <= $8) {
      break label$1
     }
    }
    label$18 : {
     $16 = ($15 | 0) != (-1 | 0) ? 1 : 2;
     $2 = HEAP32[(($16 << 2 | 0) + 72272 | 0) >> 2] | 0;
     if (($2 | 0) == ($15 | 0)) {
      break label$18
     }
     i64toi32_i32$1 = $0;
     i64toi32_i32$0 = 0;
     HEAP32[$0 >> 2] = 0;
     HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
     $23 = Math_fround(0.0);
     $24 = Math_fround(0.0);
     label$19 : {
      label$20 : {
       label$21 : {
        switch ($2 | 0) {
        case 2:
         HEAPF32[$0 >> 2] = $18;
         HEAPF32[($0 + 4 | 0) >> 2] = $17;
         $23 = $17;
         $24 = $18;
         break label$19;
        case 0:
         HEAPF32[$0 >> 2] = $18;
         HEAP32[($0 + 4 | 0) >> 2] = $19;
         $23 = $20;
         $24 = $18;
         break label$19;
        case 1:
         HEAP32[$0 >> 2] = $21;
         HEAPF32[($0 + 4 | 0) >> 2] = $17;
         $23 = $17;
         break label$20;
        case 3:
         break label$21;
        default:
         break label$19;
        };
       }
       HEAP32[$0 >> 2] = $21;
       HEAP32[($0 + 4 | 0) >> 2] = $19;
       $23 = $20;
      }
      $24 = $22;
     }
     if (!($24 >= $14)) {
      break label$18
     }
     if (!($23 >= $10)) {
      break label$18
     }
     if (!(Math_fround($12 + $24) <= $11)) {
      break label$18
     }
     if (Math_fround($7 + $23) <= $8) {
      break label$1
     }
    }
    $2 = $16 + 1 | 0;
    if (($2 | 0) == (4 | 0)) {
     break label$2
    }
    label$25 : {
     $2 = HEAP32[(($2 << 2 | 0) + 72272 | 0) >> 2] | 0;
     if (($2 | 0) == ($15 | 0)) {
      break label$25
     }
     i64toi32_i32$1 = $0;
     i64toi32_i32$0 = 0;
     HEAP32[$0 >> 2] = 0;
     HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
     $23 = Math_fround(0.0);
     $24 = Math_fround(0.0);
     label$26 : {
      label$27 : {
       label$28 : {
        switch ($2 | 0) {
        case 2:
         HEAPF32[$0 >> 2] = $18;
         HEAPF32[($0 + 4 | 0) >> 2] = $17;
         $23 = $17;
         $24 = $18;
         break label$26;
        case 0:
         HEAPF32[$0 >> 2] = $18;
         HEAP32[($0 + 4 | 0) >> 2] = $19;
         $23 = $20;
         $24 = $18;
         break label$26;
        case 1:
         HEAP32[$0 >> 2] = $21;
         HEAPF32[($0 + 4 | 0) >> 2] = $17;
         $23 = $17;
         break label$27;
        case 3:
         break label$28;
        default:
         break label$26;
        };
       }
       HEAP32[$0 >> 2] = $21;
       HEAP32[($0 + 4 | 0) >> 2] = $19;
       $23 = $20;
      }
      $24 = $22;
     }
     if (!($24 >= $14)) {
      break label$25
     }
     if (!($23 >= $10)) {
      break label$25
     }
     if (!(Math_fround($12 + $24) <= $11)) {
      break label$25
     }
     if (Math_fround($7 + $23) <= $8) {
      break label$1
     }
    }
    $2 = $16 + 2 | 0;
    if (($2 | 0) == (4 | 0)) {
     break label$2
    }
    $2 = HEAP32[(($2 << 2 | 0) + 72272 | 0) >> 2] | 0;
    if (($2 | 0) == ($15 | 0)) {
     break label$2
    }
    i64toi32_i32$1 = $0;
    i64toi32_i32$0 = 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
    $23 = Math_fround(0.0);
    $24 = Math_fround(0.0);
    label$32 : {
     label$33 : {
      label$34 : {
       switch ($2 | 0) {
       case 2:
        HEAPF32[$0 >> 2] = $18;
        HEAPF32[($0 + 4 | 0) >> 2] = $17;
        $23 = $17;
        $24 = $18;
        break label$32;
       case 0:
        HEAPF32[$0 >> 2] = $18;
        HEAP32[($0 + 4 | 0) >> 2] = $19;
        $23 = $20;
        $24 = $18;
        break label$32;
       case 1:
        HEAP32[$0 >> 2] = $21;
        HEAPF32[($0 + 4 | 0) >> 2] = $17;
        $23 = $17;
        break label$33;
       case 3:
        break label$34;
       default:
        break label$32;
       };
      }
      HEAP32[$0 >> 2] = $21;
      HEAP32[($0 + 4 | 0) >> 2] = $19;
      $23 = $20;
     }
     $24 = $22;
    }
    if (!($24 >= $14)) {
     break label$2
    }
    if (!($23 >= $10)) {
     break label$2
    }
    if (!(Math_fround($12 + $24) <= $11)) {
     break label$2
    }
    if (Math_fround($7 + $23) <= $8) {
     break label$1
    }
   }
   label$38 : {
    label$39 : {
     label$40 : {
      label$41 : {
       switch ($6 | 0) {
       case 0:
       case 2:
        break label$41;
       default:
        break label$40;
       };
      }
      $15 = HEAP32[$3 >> 2] | 0;
      $16 = ($15 | 0) != (-1 | 0);
      $2 = HEAP32[($16 ? $3 : ($16 ? -4 : 0) + 72288 | 0) >> 2] | 0;
      $19 = $5 + 8 | 0;
      $24 = Math_fround(HEAPF32[($5 + 4 | 0) >> 2]);
      $17 = Math_fround(HEAPF32[($5 + 8 | 0) >> 2]);
      $18 = Math_fround(HEAPF32[$5 >> 2]);
      label$42 : {
       label$43 : {
        if ($16) {
         break label$43
        }
        if (($2 | 0) == (-1 | 0)) {
         break label$42
        }
       }
       label$44 : {
        $25 = ($2 | 0) == (1 | 0);
        if (!(Math_fround(($2 ? $11 : $18) - ($25 ? $17 : $14)) < $12)) {
         break label$44
        }
        if ($2 >>> 0 < 2 >>> 0) {
         break label$42
        }
       }
       $26 = !$2;
       $27 = ($2 | 0) == (2 | 0);
       $28 = ($2 | 0) == (3 | 0);
       if (!(Math_fround(($27 ? $24 : $8) - Math_fround(HEAPF32[(($28 ? $19 : $4) + 4 | 0) >> 2])) < $7)) {
        break label$38
       }
       if (($2 & -2 | 0 | 0) != (2 | 0)) {
        break label$38
       }
      }
      label$45 : {
       $28 = ($15 | 0) == (-1 | 0);
       $2 = HEAP32[(($28 << 2 | 0) + 72288 | 0) >> 2] | 0;
       if (($2 | 0) == ($15 | 0)) {
        break label$45
       }
       label$46 : {
        if (!(Math_fround($11 - (($15 | 0) != (-1 | 0) ? $17 : $14)) < $12)) {
         break label$46
        }
        if (($15 | 0) != (-1 | 0)) {
         break label$45
        }
       }
       $27 = 0;
       $21 = ($15 | 0) != (-1 | 0);
       if (!(Math_fround($8 - Math_fround(HEAPF32[(($21 ? $4 : $19) + 4 | 0) >> 2])) < $7)) {
        break label$39
       }
       if ($21) {
        break label$39
       }
      }
      label$47 : {
       $21 = ($15 | 0) != (-1 | 0) ? 1 : 2;
       $2 = HEAP32[(($21 << 2 | 0) + 72288 | 0) >> 2] | 0;
       if (($2 | 0) == ($15 | 0)) {
        break label$47
       }
       $28 = ($15 | 0) != (-1 | 0);
       if (Math_fround(($28 ? $8 : $24) - Math_fround(HEAPF32[(($28 ? $19 : $4) + 4 | 0) >> 2])) < $7) {
        break label$47
       }
       $27 = ($15 | 0) == (-1 | 0);
       $26 = 0;
       $28 = $16;
       $25 = 0;
       break label$38;
      }
      $16 = $21 + 1 | 0;
      if (($16 | 0) == (4 | 0)) {
       break label$40
      }
      label$48 : {
       $2 = HEAP32[(($16 << 2 | 0) + 72288 | 0) >> 2] | 0;
       if (($2 | 0) == ($15 | 0)) {
        break label$48
       }
       label$49 : {
        $26 = ($16 | 0) == (3 | 0);
        if (!(Math_fround(($26 ? $18 : $11) - $14) < $12)) {
         break label$49
        }
        if (($16 | 0) == (3 | 0)) {
         break label$48
        }
       }
       $28 = 0;
       label$50 : {
        $27 = ($16 | 0) == (2 | 0);
        if (Math_fround(($27 ? $24 : $8) - Math_fround(HEAPF32[($4 + 4 | 0) >> 2])) < $7) {
         break label$50
        }
        $25 = 0;
        break label$38;
       }
       $25 = 0;
       if (($16 | 0) != (2 | 0)) {
        break label$38
       }
      }
      $4 = $21 + 2 | 0;
      if (($4 | 0) == (4 | 0)) {
       break label$40
      }
      $2 = HEAP32[(($4 << 2 | 0) + 72288 | 0) >> 2] | 0;
      if (($2 | 0) == ($15 | 0)) {
       break label$40
      }
      $28 = 0;
      label$51 : {
       $26 = ($4 | 0) == (3 | 0);
       if (Math_fround(($26 ? $18 : $11) - $14) < $12) {
        break label$51
       }
       $27 = 0;
       $25 = 0;
       break label$38;
      }
      $27 = 0;
      $25 = 0;
      if (($4 | 0) != (3 | 0)) {
       break label$38
      }
     }
     HEAP32[$3 >> 2] = -1;
     label$52 : {
      if (($6 | 0) != (2 | 0)) {
       break label$52
      }
      HEAPF32[($0 + 4 | 0) >> 2] = Math_fround($9 + Math_fround(2.0));
      HEAPF32[$0 >> 2] = Math_fround($13 + Math_fround(2.0));
      return;
     }
     i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
     $9 = Math_fround($12 + (wasm2js_scratch_store_i32(2, i64toi32_i32$0), wasm2js_scratch_load_f32()));
     $12 = Math_fround(($9 < $11 ? $9 : $11) - $12);
     HEAPF32[$0 >> 2] = $12 >= $14 ? $12 : $14;
     $577 = $0;
     $578 = $7;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $36 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $36 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     $14 = Math_fround($578 + (wasm2js_scratch_store_i32(2, $36), wasm2js_scratch_load_f32()));
     $14 = Math_fround(($14 < $8 ? $14 : $8) - $7);
     HEAPF32[($577 + 4 | 0) >> 2] = $14 >= $10 ? $14 : $10;
     return;
    }
    $26 = 0;
    $25 = $16;
   }
   $8 = Math_fround($8 - $7);
   $8 = $9 < $10 ? $10 : $9 > $8 ? $8 : $9;
   label$53 : {
    label$54 : {
     if (!$26) {
      break label$54
     }
     $17 = Math_fround($18 - $12);
     break label$53;
    }
    if ($25) {
     break label$53
    }
    $12 = Math_fround($11 - $12);
    $17 = $13 < $14 ? $14 : $13 > $12 ? $12 : $13;
    label$55 : {
     if (!$27) {
      break label$55
     }
     $8 = Math_fround($24 - $7);
     break label$53;
    }
    if (!$28) {
     break label$53
    }
    $8 = Math_fround(HEAPF32[($5 + 12 | 0) >> 2]);
   }
   HEAPF32[($0 + 4 | 0) >> 2] = $8 >= $10 ? $8 : $10;
   HEAPF32[$0 >> 2] = $17 >= $14 ? $17 : $14;
   HEAP32[$3 >> 2] = $2;
   return;
  }
  HEAP32[$3 >> 2] = $2;
 }
 
 function ImGui__BeginDragDropSource_28int_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2 = 0, $6 = 0, $1 = 0, $5 = 0, $8 = Math_fround(0), $12 = 0, $13 = 0, $9 = 0, $7 = Math_fround(0);
  $1 = 0;
  $2 = 1269019604;
  $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $4 = $3;
  $5 = 0;
  label$1 : {
   label$2 : {
    if ($0 & 16 | 0) {
     break label$2
    }
    $1 = HEAP32[($3 + 16116 | 0) >> 2] | 0;
    label$3 : {
     label$4 : {
      $2 = HEAP32[($3 + 18280 | 0) >> 2] | 0;
      if (!$2) {
       break label$4
      }
      $6 = 0;
      if ((HEAP32[($3 + 16192 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
       break label$1
      }
      $6 = 0;
      $4 = HEAP32[($3 + 16228 | 0) >> 2] | 0;
      $4 = ($4 | 0) == (-1 | 0) ? 0 : $4;
      if (!(HEAPU8[(($3 + $4 | 0) + 3528 | 0) >> 0] | 0)) {
       break label$1
      }
      $5 = 0;
      label$5 : {
       if (!(HEAPU8[($1 + 224 | 0) >> 0] | 0)) {
        break label$5
       }
       return 0 | 0;
      }
      $6 = $4;
      break label$3;
     }
     $6 = 0;
     if (!(HEAPU8[($3 + 3528 | 0) >> 0] | 0)) {
      break label$1
     }
     if (HEAPU8[($1 + 224 | 0) >> 0] | 0) {
      break label$1
     }
     label$6 : {
      label$7 : {
       if ((HEAPU8[($3 + 18288 | 0) >> 0] | 0) & 1 | 0) {
        break label$7
       }
       if (!(HEAP32[($3 + 16192 | 0) >> 2] | 0)) {
        break label$1
       }
       if (!($0 & 8 | 0)) {
        break label$1
       }
       if ((HEAP32[($3 + 16220 | 0) >> 2] | 0 | 0) == ($1 | 0)) {
        break label$6
       }
       break label$1;
      }
      if (!($0 & 8 | 0)) {
       break label$1
      }
     }
     $4 = $3 + 18292 | 0;
     $2 = ImGuiWindow__GetIDFromRectangle_28ImRect_20const__29($1 | 0, $4 | 0) | 0;
     HEAP32[($3 + 18280 | 0) >> 2] = $2;
     label$8 : {
      if (($2 | 0) != (HEAP32[($3 + 16192 | 0) >> 2] | 0 | 0)) {
       break label$8
      }
      HEAP32[($3 + 16196 | 0) >> 2] = $2;
     }
     label$9 : {
      if ((HEAP32[($3 + 16232 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
       break label$9
      }
      HEAP8[($3 + 16236 | 0) >> 0] = 1;
     }
     label$10 : {
      $5 = ImGui__ItemHoverable_28ImRect_20const__2c_20unsigned_20int_29($4 | 0, $2 | 0) | 0;
      if (!$5) {
       break label$10
      }
      if (!(HEAPU8[($3 + 14080 | 0) >> 0] | 0)) {
       break label$10
      }
      ImGui__SetActiveID_28unsigned_20int_2c_20ImGuiWindow__29($2 | 0, $1 | 0);
      ImGui__FocusWindow_28ImGuiWindow__29($1 | 0);
     }
     $6 = 0;
     if ((HEAP32[($3 + 16192 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
      break label$1
     }
    }
    HEAP8[($3 + 16205 | 0) >> 0] = $5;
    label$11 : {
     $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (HEAPU8[(($4 + $6 | 0) + 3528 | 0) >> 0] | 0) {
      break label$11
     }
     HEAP8[($4 + 18240 | 0) >> 0] = 1;
     HEAP32[($4 + 18236 | 0) >> 2] = 15;
     HEAP16[($4 + 18736 | 0) >> 1] = 0;
     HEAP8[($4 + 18712 | 0) >> 0] = HEAPU8[($4 + 18713 | 0) >> 0] | 0;
     return 0 | 0;
    }
    $5 = HEAP32[((((HEAP32[($1 + 280 | 0) >> 2] | 0) << 2 | 0) + (HEAP32[($1 + 288 | 0) >> 2] | 0) | 0) + -4 | 0) >> 2] | 0;
    $7 = Math_fround(HEAPF32[(($4 + ($6 << 2 | 0) | 0) + 14208 | 0) >> 2]);
    HEAP8[($4 + 18240 | 0) >> 0] = 1;
    HEAP32[($4 + 18236 | 0) >> 2] = 15;
    HEAP16[($4 + 18736 | 0) >> 1] = 0;
    HEAP8[($4 + 18712 | 0) >> 0] = HEAPU8[($4 + 18713 | 0) >> 0] | 0;
    $1 = $6;
    $6 = 0;
    $8 = Math_fround(HEAPF32[($4 + 48 | 0) >> 2]);
    if (!($7 >= Math_fround($8 * $8))) {
     break label$1
    }
   }
   label$12 : {
    if (HEAPU8[($3 + 19040 | 0) >> 0] | 0) {
     break label$12
    }
    HEAP8[($4 + 19040 | 0) >> 0] = 0;
    i64toi32_i32$1 = $4;
    i64toi32_i32$0 = 0;
    HEAP32[($4 + 19056 | 0) >> 2] = 0;
    HEAP32[($4 + 19060 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($4 + 19132 | 0) >> 2] = 0;
    i64toi32_i32$1 = $4;
    i64toi32_i32$0 = -1;
    HEAP32[($4 + 19144 | 0) >> 2] = 0;
    HEAP32[($4 + 19148 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $4;
    i64toi32_i32$0 = 0;
    HEAP32[($4 + 19136 | 0) >> 2] = 2139095039;
    HEAP32[($4 + 19140 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $4 + 19076 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $4 + 19084 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $4 + 19092 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $4 + 19100 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP8[($4 + 19108 | 0) >> 0] = 0;
    i64toi32_i32$1 = $4 + 19064 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($4 + 19072 | 0) >> 2] = -1;
    $12 = $4 + 19109 | 0;
    $13 = 0;
    HEAP8[$12 >> 0] = $13;
    HEAP8[($12 + 1 | 0) >> 0] = $13 >>> 8 | 0;
    label$13 : {
     $6 = HEAP32[($4 + 19164 | 0) >> 2] | 0;
     if (!$6) {
      break label$13
     }
     i64toi32_i32$1 = $4;
     i64toi32_i32$0 = 0;
     HEAP32[($4 + 19156 | 0) >> 2] = 0;
     HEAP32[($4 + 19160 | 0) >> 2] = i64toi32_i32$0;
     $9 = $4 + 184 | 0;
     HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + -1 | 0;
     FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($6, HEAP32[(0 + 92728 | 0) >> 2] | 0);
     HEAP32[($4 + 19164 | 0) >> 2] = 0;
    }
    i64toi32_i32$1 = $4;
    i64toi32_i32$0 = 0;
    HEAP32[($4 + 19168 | 0) >> 2] = 0;
    HEAP32[($4 + 19172 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $4 + 19176 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($3 + 19068 | 0) >> 2] = $5;
    HEAP32[($3 + 19064 | 0) >> 2] = $2;
    HEAP32[($3 + 19052 | 0) >> 2] = $1;
    HEAP32[($3 + 19044 | 0) >> 2] = $0;
    HEAP8[($3 + 19040 | 0) >> 0] = 1;
    if (($2 | 0) != (HEAP32[($3 + 16192 | 0) >> 2] | 0 | 0)) {
     break label$12
    }
    HEAP8[($3 + 16206 | 0) >> 0] = 1;
   }
   $6 = 1;
   HEAP8[($3 + 19041 | 0) >> 0] = 1;
   HEAP32[($3 + 19048 | 0) >> 2] = HEAP32[($3 + 16016 | 0) >> 2] | 0;
   label$14 : {
    if ($0 & 1 | 0) {
     break label$14
    }
    ImGui__BeginTooltipEx_28int_2c_20int_29(0 | 0, 0 | 0);
    if (!(HEAP32[($3 + 19144 | 0) >> 2] | 0)) {
     break label$14
    }
    if (!((HEAPU8[($3 + 19133 | 0) >> 0] | 0) & 16 | 0)) {
     break label$14
    }
    $4 = HEAP32[($3 + 16116 | 0) >> 2] | 0;
    HEAP8[($4 + 256 | 0) >> 0] = 1;
    HEAP8[($4 + 226 | 0) >> 0] = 1;
    HEAP8[($4 + 224 | 0) >> 0] = 1;
   }
   if ($0 & 18 | 0) {
    break label$1
   }
   $3 = $3 + 18288 | 0;
   HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) & -2 | 0;
  }
  return $6 | 0;
 }
 
 function ImGui__BeginDragDropTargetCustom_28ImRect_20const__2c_20unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $7 = Math_fround(0), $6 = Math_fround(0), $11 = Math_fround(0), $4 = 0, $5 = 0, i64toi32_i32$1 = 0, $8 = Math_fround(0), $10 = Math_fround(0), i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $2 = 0, $9 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $149 = 0, $154 = 0;
  $2 = 0;
  label$1 : {
   $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   if (!(HEAPU8[($3 + 19040 | 0) >> 0] | 0)) {
    break label$1
   }
   $4 = HEAP32[($3 + 16124 | 0) >> 2] | 0;
   if (!$4) {
    break label$1
   }
   $5 = HEAP32[($3 + 16116 | 0) >> 2] | 0;
   if ((HEAP32[($5 + 836 | 0) >> 2] | 0 | 0) != (HEAP32[($4 + 836 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $6 = Math_fround(HEAPF32[($3 + 3520 | 0) >> 2]);
   $7 = Math_fround(HEAPF32[$0 >> 2]);
   $8 = Math_fround(HEAPF32[($5 + 580 | 0) >> 2]);
   $8 = $7 >= $8 ? $7 : $8;
   $7 = Math_fround(HEAPF32[($3 + 14496 | 0) >> 2]);
   if (!($6 >= Math_fround($8 - $7))) {
    break label$1
   }
   $9 = Math_fround(HEAPF32[($3 + 3524 | 0) >> 2]);
   $10 = Math_fround(HEAPF32[($0 + 4 | 0) >> 2]);
   $11 = Math_fround(HEAPF32[($5 + 584 | 0) >> 2]);
   $12 = $10 >= $11 ? $10 : $11;
   $10 = Math_fround(HEAPF32[($3 + 14500 | 0) >> 2]);
   if (!($9 >= Math_fround($12 - $10))) {
    break label$1
   }
   $11 = Math_fround(HEAPF32[($0 + 8 | 0) >> 2]);
   $13 = Math_fround(HEAPF32[($5 + 588 | 0) >> 2]);
   $11 = $11 < $13 ? $11 : $13;
   if (!($6 < Math_fround($11 + $7))) {
    break label$1
   }
   $7 = Math_fround(HEAPF32[($0 + 12 | 0) >> 2]);
   $6 = Math_fround(HEAPF32[($5 + 592 | 0) >> 2]);
   $7 = $7 < $6 ? $7 : $6;
   if (!($9 < Math_fround($7 + $10))) {
    break label$1
   }
   $4 = HEAP32[($3 + 18596 | 0) >> 2] | 0;
   $6 = Math_fround(HEAPF32[($4 + 12 | 0) >> 2]);
   if (!($12 < Math_fround($6 + Math_fround(HEAPF32[($4 + 20 | 0) >> 2])))) {
    break label$1
   }
   if (!($7 > $6)) {
    break label$1
   }
   $7 = Math_fround(HEAPF32[($4 + 8 | 0) >> 2]);
   if (!($8 < Math_fround($7 + Math_fround(HEAPF32[($4 + 16 | 0) >> 2])))) {
    break label$1
   }
   if (!($11 > $7)) {
    break label$1
   }
   if ((HEAP32[($3 + 19064 | 0) >> 2] | 0 | 0) == ($1 | 0)) {
    break label$1
   }
   if (HEAPU8[($5 + 224 | 0) >> 0] | 0) {
    break label$1
   }
   i64toi32_i32$2 = $0;
   i64toi32_i32$0 = HEAP32[$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $149 = i64toi32_i32$0;
   i64toi32_i32$0 = $3;
   HEAP32[($3 + 19112 | 0) >> 2] = $149;
   HEAP32[($3 + 19116 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $154 = i64toi32_i32$1;
   i64toi32_i32$1 = $3 + 19120 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $154;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($3 + 19128 | 0) >> 2] = $1;
   $2 = 1;
   HEAP8[($3 + 19042 | 0) >> 0] = 1;
  }
  return $2 | 0;
 }
 
 function ImGui__DockNodeIsDropAllowed_28ImGuiWindow__2c_20ImGuiWindow__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $11 = 0, $12 = 0, $3 = 0, $10 = 0, $5 = 0, $7 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $15 = 0, $9 = 0, $14 = 0;
  $2 = 1;
  label$1 : {
   label$2 : {
    label$3 : {
     $3 = HEAP32[($1 + 936 | 0) >> 2] | 0;
     if (!$3) {
      break label$3
     }
     $4 = 1;
     if (HEAP32[($3 + 28 | 0) >> 2] | 0) {
      break label$1
     }
     $2 = HEAP32[($3 + 36 | 0) >> 2] | 0;
     if (($2 | 0) < (1 | 0)) {
      break label$2
     }
    }
    $5 = HEAP32[($0 + 936 | 0) >> 2] | 0;
    $6 = $5 ? $5 + 80 | 0 : $0 + 16 | 0;
    $7 = 0;
    $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    $9 = $5 + 17 | 0;
    label$4 : while (1) {
     $10 = $1;
     label$5 : {
      if (!$3) {
       break label$5
      }
      $10 = HEAP32[((HEAP32[($3 + 44 | 0) >> 2] | 0) + ($7 << 2 | 0) | 0) >> 2] | 0;
     }
     label$6 : {
      label$7 : {
       if (!$5) {
        break label$7
       }
       if (!((HEAPU8[$9 >> 0] | 0) & 4 | 0)) {
        break label$7
       }
       if ((HEAP16[($10 + 238 | 0) >> 1] | 0 | 0) < (HEAP16[($0 + 238 | 0) >> 1] | 0 | 0)) {
        break label$6
       }
      }
      label$8 : {
       $11 = HEAP32[$6 >> 2] | 0;
       $12 = HEAP32[($10 + 16 | 0) >> 2] | 0;
       if (($11 | 0) == ($12 | 0)) {
        break label$8
       }
       label$9 : {
        if (!$11) {
         break label$9
        }
        if (!(HEAPU8[($6 + 25 | 0) >> 0] | 0)) {
         break label$9
        }
        if ($12) {
         break label$9
        }
        return 1 | 0;
       }
       if (!$12) {
        break label$6
       }
       if ($11) {
        break label$6
       }
       if (!((HEAPU8[($10 + 41 | 0) >> 0] | 0) & 255 | 0)) {
        break label$6
       }
       return 1 | 0;
      }
      $4 = 1;
      $13 = HEAP32[($8 + 18548 | 0) >> 2] | 0;
      if (($13 | 0) < (1 | 0)) {
       break label$1
      }
      $14 = HEAP32[($8 + 18556 | 0) >> 2] | 0;
      label$10 : while (1) {
       label$11 : {
        $15 = $13 + -1 | 0;
        $12 = HEAP32[(($14 + Math_imul($15, 40) | 0) + 4 | 0) >> 2] | 0;
        if (!$12) {
         break label$11
        }
        $11 = $10;
        if ((HEAP32[($11 + 828 | 0) >> 2] | 0 | 0) == ($12 | 0)) {
         break label$6
        }
        label$12 : while (1) {
         if (($11 | 0) == ($12 | 0)) {
          break label$6
         }
         $11 = HEAP32[($11 + 824 | 0) >> 2] | 0;
         if ($11) {
          continue label$12
         }
         break label$12;
        };
       }
       $11 = ($13 | 0) < (2 | 0);
       $13 = $15;
       if (!$11) {
        continue label$10
       }
       break label$1;
      };
     }
     $7 = $7 + 1 | 0;
     if (($7 | 0) != ($2 | 0)) {
      continue label$4
     }
     break label$4;
    };
   }
   $4 = 0;
  }
  return $4 | 0;
 }
 
 function ImGui__AcceptDragDropPayload_28char_20const__2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = Math_fround(0), $3 = 0, $6 = 0, $2 = 0, $12 = 0, $5 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0);
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = 0;
  $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $5 = HEAP32[($4 + 16116 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!$0) {
     break label$2
    }
    if ((HEAP32[($4 + 19072 | 0) >> 2] | 0 | 0) == (-1 | 0)) {
     break label$1
    }
    if (strcmp($0 | 0, $4 + 19076 | 0 | 0) | 0) {
     break label$1
    }
   }
   $0 = HEAP32[($4 + 19144 | 0) >> 2] | 0;
   $3 = HEAP32[($4 + 19128 | 0) >> 2] | 0;
   $6 = ($0 | 0) == ($3 | 0);
   label$3 : {
    $7 = Math_fround(HEAPF32[($4 + 19120 | 0) >> 2]);
    $8 = Math_fround(HEAPF32[($4 + 19112 | 0) >> 2]);
    $9 = Math_fround(HEAPF32[($4 + 19124 | 0) >> 2]);
    $10 = Math_fround(HEAPF32[($4 + 19116 | 0) >> 2]);
    $11 = Math_fround(Math_fround($7 - $8) * Math_fround($9 - $10));
    if (!($11 <= Math_fround(HEAPF32[($4 + 19136 | 0) >> 2]))) {
     break label$3
    }
    HEAP32[($4 + 19140 | 0) >> 2] = $3;
    HEAP32[($4 + 19132 | 0) >> 2] = $1;
    HEAPF32[($4 + 19136 | 0) >> 2] = $11;
   }
   HEAP8[($4 + 19109 | 0) >> 0] = $6;
   label$4 : {
    if ((HEAP32[($4 + 19044 | 0) >> 2] | 0 | $1 | 0) & 2048 | 0) {
     break label$4
    }
    if (($0 | 0) != ($3 | 0)) {
     break label$4
    }
    $5 = HEAP32[($5 + 672 | 0) >> 2] | 0;
    HEAPF32[($2 + 12 | 0) >> 2] = Math_fround($10 + Math_fround(-3.5));
    HEAPF32[($2 + 8 | 0) >> 2] = Math_fround($8 + Math_fround(-3.5));
    HEAPF32[($2 + 4 | 0) >> 2] = Math_fround($9 + Math_fround(3.5));
    HEAPF32[$2 >> 2] = Math_fround($7 + Math_fround(3.5));
    label$5 : {
     label$6 : {
      $7 = Math_fround(HEAPF32[($4 + 15400 | 0) >> 2]);
      $7 = Math_fround(Math_fround(($7 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($7, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
      if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
       break label$6
      }
      $6 = ~~$7;
      break label$5;
     }
     $6 = -2147483648;
    }
    $6 = $6 << 8 | 0;
    label$7 : {
     label$8 : {
      $7 = Math_fround(HEAPF32[($4 + 15396 | 0) >> 2]);
      $7 = Math_fround(Math_fround(($7 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($7, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
      if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
       break label$8
      }
      $12 = ~~$7;
      break label$7;
     }
     $12 = -2147483648;
    }
    $6 = $6 | $12 | 0;
    label$9 : {
     label$10 : {
      $7 = Math_fround(HEAPF32[($4 + 15404 | 0) >> 2]);
      $7 = Math_fround(Math_fround(($7 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($7, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
      if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
       break label$10
      }
      $12 = ~~$7;
      break label$9;
     }
     $12 = -2147483648;
    }
    $6 = $6 | ($12 << 16 | 0) | 0;
    label$11 : {
     label$12 : {
      $7 = Math_fround(Math_fround(HEAPF32[($4 + 15408 | 0) >> 2]) * Math_fround(HEAPF32[($4 + 14396 | 0) >> 2]));
      $7 = Math_fround(Math_fround(($7 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($7, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
      if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
       break label$12
      }
      $12 = ~~$7;
      break label$11;
     }
     $12 = -2147483648;
    }
    ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29($5 | 0, $2 + 8 | 0 | 0, $2 | 0, $6 | ($12 << 24 | 0) | 0 | 0, Math_fround(Math_fround(0.0)), 0 | 0, Math_fround(Math_fround(2.0)));
   }
   HEAP32[($4 + 19148 | 0) >> 2] = HEAP32[($4 + 16016 | 0) >> 2] | 0;
   label$13 : {
    label$14 : {
     label$15 : {
      label$16 : {
       label$17 : {
        if (($0 | 0) != ($3 | 0)) {
         break label$17
        }
        label$18 : {
         $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
         $3 = HEAP32[($4 + 19052 | 0) >> 2] | 0;
         if (HEAPU8[(($5 + $3 | 0) + 3528 | 0) >> 0] | 0) {
          break label$18
         }
         HEAP8[($4 + 19110 | 0) >> 0] = 1;
         break label$13;
        }
        label$19 : {
         if (($3 + 129 | 0) >>> 0 < 140 >>> 0) {
          break label$19
         }
         $0 = 1;
         label$20 : {
          if (($3 | 0) > (7550 | 0)) {
           break label$20
          }
          if (($3 | 0) == (1407 | 0)) {
           break label$19
          }
          if (($3 | 0) == (3455 | 0)) {
           break label$19
          }
          break label$14;
         }
         if (($3 | 0) == (7551 | 0)) {
          break label$19
         }
         if (($3 | 0) == (32127 | 0)) {
          break label$19
         }
         if (($3 | 0) != (15743 | 0)) {
          break label$14
         }
        }
        $6 = $3 + 641 | 0;
        if (!($6 & 63488 | 0)) {
         break label$16
        }
        label$21 : {
         label$22 : {
          if (($3 | 0) > (7550 | 0)) {
           break label$22
          }
          if (($3 | 0) == (1407 | 0)) {
           break label$21
          }
          $0 = 648;
          if (($3 | 0) == (3455 | 0)) {
           break label$15
          }
          break label$16;
         }
         label$23 : {
          if (($3 | 0) == (32127 | 0)) {
           break label$23
          }
          label$24 : {
           if (($3 | 0) == (15743 | 0)) {
            break label$24
           }
           if (($3 | 0) != (7551 | 0)) {
            break label$16
           }
           $0 = 649;
           break label$15;
          }
          $0 = 650;
          break label$15;
         }
         $0 = 651;
         break label$15;
        }
        $0 = HEAPU8[($5 + 105 | 0) >> 0] | 0 ? 651 : 648;
        break label$15;
       }
       $3 = 0;
       HEAP8[($4 + 19110 | 0) >> 0] = 0;
       if (!($1 & 1024 | 0)) {
        break label$1
       }
       break label$13;
      }
      $0 = $6;
     }
     $0 = !(HEAPU8[((Math_imul($0, 12) + $5 | 0) + 10116 | 0) >> 0] | 0);
    }
    HEAP8[($4 + 19110 | 0) >> 0] = $0 ^ 1 | 0;
    if ($1 & 1024 | 0) {
     break label$13
    }
    $3 = 0;
    if ($0) {
     break label$1
    }
   }
   $3 = $4 + 19056 | 0;
  }
  __stack_pointer = $2 + 16 | 0;
  return $3 | 0;
 }
 
 function ImGui__DockNodeTreeFindFallbackLeafNode_28ImGuiDockNode__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  label$1 : {
   $1 = HEAP32[($0 + 28 | 0) >> 2] | 0;
   if ($1) {
    break label$1
   }
   return $0 | 0;
  }
  label$2 : {
   label$3 : while (1) {
    $2 = ImGui__DockNodeTreeFindFallbackLeafNode_28ImGuiDockNode__29($1 | 0) | 0;
    if ($2) {
     break label$2
    }
    $0 = HEAP32[($0 + 32 | 0) >> 2] | 0;
    $2 = $0;
    $1 = HEAP32[($0 + 28 | 0) >> 2] | 0;
    if ($1) {
     continue label$3
    }
    break label$3;
   };
  }
  return $2 | 0;
 }
 
 function ImGui__DockNodePreviewDockSetup_28ImGuiWindow__2c_20ImGuiDockNode__2c_20ImGuiWindow__2c_20ImGuiDockNode__2c_20ImGuiDockPreviewData__2c_20bool_2c_20bool_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $14 = Math_fround(0), $9 = 0, $8 = 0, $16 = Math_fround(0), $18 = Math_fround(0), i64toi32_i32$0 = 0, $15 = Math_fround(0), $19 = Math_fround(0), i64toi32_i32$1 = 0, $21 = Math_fround(0), $7 = 0, i64toi32_i32$2 = 0, $17 = Math_fround(0), $20 = Math_fround(0), $12 = 0, $22 = Math_fround(0), $11 = 0, $10 = 0, $23 = Math_fround(0), $203 = 0, $215 = 0, $582 = 0, $586 = 0, $589 = 0, $700 = 0, $703 = 0;
  $7 = __stack_pointer - 48 | 0;
  label$1 : {
   if ($3) {
    break label$1
   }
   $3 = HEAP32[($2 + 936 | 0) >> 2] | 0;
  }
  $8 = 0;
  label$2 : {
   if (!$1) {
    break label$2
   }
   $8 = $1;
   if ((HEAPU16[($1 + 156 | 0) >> 1] | 0) & 512 | 0) {
    break label$2
   }
   $9 = $1;
   label$3 : while (1) {
    $8 = $9;
    $9 = HEAP32[($9 + 24 | 0) >> 2] | 0;
    if ($9) {
     continue label$3
    }
    break label$3;
   };
  }
  $10 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $11 = HEAP32[($3 ? $3 + 16 | 0 : $2 + 36 | 0) >> 2] | 0;
  $12 = $1 + 16 | 0;
  $9 = HEAP32[($1 ? $12 : $0 + 36 | 0) >> 2] | 0;
  HEAP8[($4 + 161 | 0) >> 0] = 1;
  label$4 : {
   label$5 : {
    if ($6) {
     break label$5
    }
    if ($9 & 65536 | 0) {
     break label$5
    }
    label$6 : {
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : {
         label$11 : {
          if (!$1) {
           break label$11
          }
          if (!($9 & 4 | 0)) {
           break label$11
          }
          if (!((HEAPU8[($12 + 1 | 0) >> 0] | 0) & 8 | 0)) {
           break label$10
          }
          break label$5;
         }
         if (!$1) {
          break label$9
         }
        }
        if (!$3) {
         break label$7
        }
        if (HEAP32[($1 + 28 | 0) >> 2] | 0 | (HEAP32[($1 + 36 | 0) >> 2] | 0) | 0) {
         break label$8
        }
        break label$7;
       }
       if (!$3) {
        break label$7
       }
      }
      if (!(HEAP32[($3 + 28 | 0) >> 2] | 0)) {
       break label$7
      }
      if (!(HEAP32[($3 + 124 | 0) >> 2] | 0)) {
       break label$5
      }
      if ($9 & 524288 | 0) {
       break label$5
      }
      break label$6;
     }
     if ($9 & 524288 | 0) {
      break label$5
     }
    }
    label$12 : {
     if (!($11 & 1048576 | 0)) {
      break label$12
     }
     if (!$1) {
      break label$5
     }
     if (HEAP32[($1 + 28 | 0) >> 2] | 0) {
      break label$5
     }
     if (HEAP32[($1 + 36 | 0) >> 2] | 0) {
      break label$5
     }
    }
    if (!$1) {
     break label$4
    }
    if (!($11 & 2097152 | 0)) {
     break label$4
    }
    if (HEAP32[($1 + 28 | 0) >> 2] | 0) {
     break label$4
    }
    if (HEAP32[($1 + 36 | 0) >> 2] | 0) {
     break label$4
    }
   }
   HEAP8[($4 + 161 | 0) >> 0] = 0;
  }
  HEAP8[($4 + 162 | 0) >> 0] = 1;
  label$13 : {
   label$14 : {
    label$15 : {
     label$16 : {
      label$17 : {
       label$18 : {
        label$19 : {
         if ($9 & 16 | 0) {
          break label$19
         }
         if (HEAPU8[($10 + 96 | 0) >> 0] | 0) {
          break label$19
         }
         label$20 : {
          if (!$1) {
           break label$20
          }
          if ($6) {
           break label$20
          }
          if (HEAP32[($1 + 24 | 0) >> 2] | 0) {
           break label$20
          }
          if (!((HEAPU8[($12 + 1 | 0) >> 0] | 0) & 8 | 0)) {
           break label$20
          }
          HEAP8[($4 + 162 | 0) >> 0] = 0;
          break label$17;
         }
         if (!($9 & 131072 | 0 | ($11 & 262144 | 0) | 0)) {
          break label$18
         }
        }
        HEAP8[($4 + 162 | 0) >> 0] = 0;
       }
       if (!$1) {
        break label$16
       }
      }
      if (!((HEAPU16[($1 + 156 | 0) >> 1] | 0) & 4096 | 0)) {
       break label$15
      }
      $9 = HEAPU16[($4 + 156 | 0) >> 1] | 0 | ((HEAPU8[($4 + 158 | 0) >> 0] | 0) << 16 | 0) | 0 | 4096 | 0;
      HEAP16[($4 + 156 | 0) >> 1] = $9;
      $3 = 8192;
      break label$13;
     }
     if (!(HEAPU8[($0 + 229 | 0) >> 0] | 0)) {
      break label$15
     }
     $9 = HEAPU16[($4 + 156 | 0) >> 1] | 0 | ((HEAPU8[($4 + 158 | 0) >> 0] | 0) << 16 | 0) | 0 | 4096 | 0;
     HEAP16[($4 + 156 | 0) >> 1] = $9;
     break label$14;
    }
    $3 = $4 + 158 | 0;
    $9 = (HEAPU16[($4 + 156 | 0) >> 1] | 0 | ((HEAPU8[$3 >> 0] | 0) << 16 | 0) | 0) & -4097 | 0 | ((HEAPU8[($2 + 229 | 0) >> 0] | 0) << 12 | 0) | 0;
    HEAP16[($4 + 156 | 0) >> 1] = $9;
    HEAP8[$3 >> 0] = $9 >>> 16 | 0;
    $3 = 8192;
    if ($1) {
     break label$13
    }
   }
   $3 = (((HEAP32[($0 + 8 | 0) >> 2] | 0) & 32 | 0) << 8 | 0) ^ 8192 | 0;
  }
  HEAP8[($4 + 158 | 0) >> 0] = $9 >>> 16 | 0;
  HEAP16[($4 + 156 | 0) >> 1] = $3 | ($9 & 57343 | 0) | 0;
  i64toi32_i32$2 = $8 ? $8 + 52 | 0 : $0 + 64 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $203 = i64toi32_i32$0;
  i64toi32_i32$0 = $4;
  HEAP32[($4 + 52 | 0) >> 2] = $203;
  HEAP32[($4 + 56 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $8 ? $8 + 60 | 0 : $0 + 72 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $12 = -1;
  HEAP32[($4 + 168 | 0) >> 2] = -1;
  HEAP32[($4 + 164 | 0) >> 2] = $1;
  $215 = i64toi32_i32$1;
  i64toi32_i32$1 = $4;
  HEAP32[($4 + 60 | 0) >> 2] = $215;
  HEAP32[($4 + 64 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($4 + 163 | 0) >> 0] = 0;
  label$21 : {
   label$22 : {
    if (HEAPU8[($0 + 222 | 0) >> 0] | 0) {
     break label$22
    }
    $11 = $10 + 3524 | 0;
    $9 = -1;
    label$23 : while (1) {
     label$24 : {
      label$25 : {
       label$26 : {
        $1 = ($9 | 0) != (-1 | 0);
        if ($1) {
         break label$26
        }
        if (HEAPU8[($4 + 161 | 0) >> 0] | 0) {
         break label$25
        }
        break label$24;
       }
       if (!(HEAPU8[($4 + 162 | 0) >> 0] | 0)) {
        break label$24
       }
      }
      $14 = Math_fround(HEAPF32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 15488 | 0) >> 2]);
      $15 = Math_fround($14 * Math_fround(1.5));
      $14 = Math_fround($14 * Math_fround(.5));
      $16 = Math_fround(HEAPF32[($4 + 52 | 0) >> 2]);
      $17 = Math_fround($16 + Math_fround(HEAPF32[($4 + 60 | 0) >> 2]));
      $18 = Math_fround($17 - $16);
      $19 = Math_fround(HEAPF32[($4 + 56 | 0) >> 2]);
      $20 = Math_fround($19 + Math_fround(HEAPF32[($4 + 64 | 0) >> 2]));
      $21 = Math_fround($20 - $19);
      $22 = Math_fround(($18 < $21 ? $18 : $21) * Math_fround(.125));
      $14 = $14 >= $22 ? $14 : $22;
      $14 = $15 < $14 ? $15 : $14;
      label$27 : {
       label$28 : {
        if (!$6) {
         break label$28
        }
        $15 = Math_fround($21 * Math_fround(.5));
        label$29 : {
         label$30 : {
          $21 = Math_fround($14 * Math_fround(.800000011920929));
          if (!(Math_fround(Math_abs($21)) < Math_fround(2147483648.0))) {
           break label$30
          }
          $8 = ~~$21;
          break label$29;
         }
         $8 = -2147483648;
        }
        label$31 : {
         label$32 : {
          $21 = Math_fround($8 | 0);
          $15 = Math_fround($15 - $21);
          if (!(Math_fround(Math_abs($15)) < Math_fround(2147483648.0))) {
           break label$32
          }
          $8 = ~~$15;
          break label$31;
         }
         $8 = -2147483648;
        }
        label$33 : {
         label$34 : {
          $18 = Math_fround(Math_fround($18 * Math_fround(.5)) - $21);
          if (!(Math_fround(Math_abs($18)) < Math_fround(2147483648.0))) {
           break label$34
          }
          $0 = ~~$18;
          break label$33;
         }
         $0 = -2147483648;
        }
        $15 = Math_fround($8 | 0);
        $18 = Math_fround($0 | 0);
        label$35 : {
         $14 = Math_fround($14 * Math_fround(1.5));
         if (!(Math_fround(Math_abs($14)) < Math_fround(2147483648.0))) {
          break label$35
         }
         $14 = Math_fround(~~$14 | 0);
         break label$27;
        }
        $14 = Math_fround(-2147483648 | 0);
        break label$27;
       }
       label$36 : {
        label$37 : {
         $18 = Math_fround($14 * Math_fround(.8999999761581421));
         if (!(Math_fround(Math_abs($18)) < Math_fround(2147483648.0))) {
          break label$37
         }
         $8 = ~~$18;
         break label$36;
        }
        $8 = -2147483648;
       }
       label$38 : {
        label$39 : {
         if (!(Math_fround(Math_abs($14)) < Math_fround(2147483648.0))) {
          break label$39
         }
         $0 = ~~$14;
         break label$38;
        }
        $0 = -2147483648;
       }
       label$40 : {
        label$41 : {
         $14 = Math_fround($0 | 0);
         $18 = Math_fround($14 * Math_fround(2.4000000953674316));
         if (!(Math_fround(Math_abs($18)) < Math_fround(2147483648.0))) {
          break label$41
         }
         $0 = ~~$18;
         break label$40;
        }
        $0 = -2147483648;
       }
       $21 = Math_fround($8 | 0);
       $18 = Math_fround($0 | 0);
       $15 = $18;
      }
      $8 = $9 << 4 | 0;
      label$42 : {
       label$43 : {
        $19 = Math_fround(Math_fround($19 + $20) * Math_fround(.5));
        if (!(Math_fround(Math_abs($19)) < Math_fround(2147483648.0))) {
         break label$43
        }
        $0 = ~~$19;
        break label$42;
       }
       $0 = -2147483648;
      }
      $8 = $8 + $4 | 0;
      label$44 : {
       label$45 : {
        $16 = Math_fround(Math_fround($16 + $17) * Math_fround(.5));
        if (!(Math_fround(Math_abs($16)) < Math_fround(2147483648.0))) {
         break label$45
        }
        $3 = ~~$16;
        break label$44;
       }
       $3 = -2147483648;
      }
      $8 = $8 + 192 | 0;
      $16 = Math_fround($0 | 0);
      $19 = Math_fround($3 | 0);
      label$46 : {
       label$47 : {
        label$48 : {
         if ($1) {
          break label$48
         }
         $20 = Math_fround($14 + $16);
         $17 = Math_fround($14 + $19);
         $15 = Math_fround($16 - $14);
         $18 = Math_fround($19 - $14);
         break label$47;
        }
        label$49 : {
         switch ($9 | 0) {
         default:
          $20 = Math_fround(HEAPF32[($8 + 12 | 0) >> 2]);
          $17 = Math_fround(HEAPF32[($8 + 8 | 0) >> 2]);
          $15 = Math_fround(HEAPF32[($8 + 4 | 0) >> 2]);
          $18 = Math_fround(HEAPF32[$8 >> 2]);
          break label$46;
         case 2:
          $17 = Math_fround($14 + $19);
          $18 = Math_fround($19 - $14);
          $15 = Math_fround($16 - $15);
          $20 = Math_fround($15 + $21);
          $15 = Math_fround($15 - $21);
          break label$47;
         case 3:
          $17 = Math_fround($14 + $19);
          $18 = Math_fround($19 - $14);
          $15 = Math_fround($15 + $16);
          $20 = Math_fround($15 + $21);
          $15 = Math_fround($15 - $21);
          break label$47;
         case 0:
          $20 = Math_fround($14 + $16);
          $15 = Math_fround($16 - $14);
          $18 = Math_fround($19 - $18);
          $17 = Math_fround($18 + $21);
          $18 = Math_fround($18 - $21);
          break label$47;
         case 1:
          break label$49;
         };
        }
        $20 = Math_fround($14 + $16);
        $15 = Math_fround($16 - $14);
        $18 = Math_fround($18 + $19);
        $17 = Math_fround($18 + $21);
        $18 = Math_fround($18 - $21);
       }
       HEAPF32[($8 + 12 | 0) >> 2] = $20;
       HEAPF32[($8 + 8 | 0) >> 2] = $17;
       HEAPF32[($8 + 4 | 0) >> 2] = $15;
       HEAPF32[$8 >> 2] = $18;
      }
      $21 = Math_fround(HEAPF32[($10 + 3520 | 0) >> 2]);
      label$54 : {
       label$55 : {
        label$56 : {
         label$57 : {
          if ($6) {
           break label$57
          }
          $19 = Math_fround($21 - $19);
          $16 = Math_fround(Math_fround(HEAPF32[$11 >> 2]) - $16);
          $23 = Math_fround(Math_fround($19 * $19) + Math_fround($16 * $16));
          $22 = Math_fround($14 * Math_fround(1.399999976158142));
          if ($23 < Math_fround($22 * $22)) {
           break label$56
          }
          label$58 : {
           label$59 : {
            $22 = Math_fround($14 * Math_fround(.30000001192092896));
            if (!(Math_fround(Math_abs($22)) < Math_fround(2147483648.0))) {
             break label$59
            }
            $8 = ~~$22;
            break label$58;
           }
           $8 = -2147483648;
          }
          $14 = Math_fround($14 * Math_fround(2.5999999046325684));
          if ($23 < Math_fround($14 * $14)) {
           break label$55
          }
          $14 = Math_fround($8 | 0);
          $18 = Math_fround($18 - $14);
          $15 = Math_fround($15 - $14);
          $17 = Math_fround($17 + $14);
          $20 = Math_fround($20 + $14);
         }
         if (!($21 >= $18)) {
          break label$24
         }
         $14 = Math_fround(HEAPF32[$11 >> 2]);
         if (!($14 >= $15)) {
          break label$24
         }
         if (!($21 < $17)) {
          break label$24
         }
         if ($14 < $20) {
          break label$54
         }
         break label$24;
        }
        if ($1) {
         break label$24
        }
        break label$54;
       }
       if (((Math_fround(Math_abs($19)) > Math_fround(Math_abs($16)) ? $19 > Math_fround(0.0) : $16 > Math_fround(0.0) ? 3 : 2) | 0) != ($9 | 0)) {
        break label$24
       }
      }
      HEAP8[($4 + 163 | 0) >> 0] = 1;
      HEAP32[($4 + 168 | 0) >> 2] = $9;
     }
     $9 = $9 + 1 | 0;
     if (($9 | 0) != (4 | 0)) {
      continue label$23
     }
     break label$23;
    };
    $1 = HEAP32[($4 + 168 | 0) >> 2] | 0;
    if (($1 | 0) == (-1 | 0)) {
     break label$22
    }
    $9 = 1;
    $8 = 0;
    $12 = $1;
    break label$21;
   }
   $9 = (HEAPU8[($4 + 161 | 0) >> 0] | 0 | 0) != (0 | 0);
   $8 = 1;
  }
  HEAP8[($4 + 160 | 0) >> 0] = $9;
  label$60 : {
   if ($5) {
    break label$60
   }
   if (HEAPU8[($4 + 163 | 0) >> 0] | 0) {
    break label$60
   }
   if (HEAPU8[($10 + 97 | 0) >> 0] | 0) {
    break label$60
   }
   HEAP8[($4 + 160 | 0) >> 0] = 0;
  }
  HEAP32[($4 + 172 | 0) >> 2] = 0;
  label$61 : {
   if ($8) {
    break label$61
   }
   i64toi32_i32$1 = $7;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $4;
   i64toi32_i32$0 = HEAP32[($4 + 52 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($4 + 56 | 0) >> 2] | 0;
   $582 = i64toi32_i32$0;
   i64toi32_i32$0 = $7;
   HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = $582;
   HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $4;
   i64toi32_i32$1 = HEAP32[($4 + 60 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($4 + 64 | 0) >> 2] | 0;
   $586 = i64toi32_i32$1;
   i64toi32_i32$1 = $7;
   HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $586;
   HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $2;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 72 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 76 | 0) >> 2] | 0;
   $589 = i64toi32_i32$0;
   i64toi32_i32$0 = $7;
   HEAP32[(i64toi32_i32$0 + 40 | 0) >> 2] = $589;
   HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] = i64toi32_i32$1;
   $19 = Math_fround(HEAPF32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 14480 | 0) >> 2]);
   $9 = ($12 >>> 0 < 2 >>> 0) << 2 | 0;
   HEAPF32[(i64toi32_i32$0 + 32 | 0 | $9 | 0) >> 2] = Math_fround(HEAPF32[(i64toi32_i32$0 + 24 | 0 | $9 | 0) >> 2]);
   HEAPF32[(i64toi32_i32$0 + 16 | 0 | $9 | 0) >> 2] = Math_fround(HEAPF32[(i64toi32_i32$0 + 8 | 0 | $9 | 0) >> 2]);
   $9 = $12 >>> 0 > 1 >>> 0;
   $8 = $9 << 2 | 0;
   $14 = Math_fround(HEAPF32[(i64toi32_i32$0 + 40 | 0 | $8 | 0) >> 2]);
   $18 = Math_fround(Math_fround(HEAPF32[(i64toi32_i32$0 + 8 | 0 | $8 | 0) >> 2]) - $19);
   $16 = Math_fround($18 * Math_fround(.5));
   $1 = $14 <= $16;
   label$62 : {
    label$63 : {
     if (!(Math_fround(Math_abs($16)) < Math_fround(2147483648.0))) {
      break label$63
     }
     $0 = ~~$16;
     break label$62;
    }
    $0 = -2147483648;
   }
   $6 = $4 + 60 | 0;
   $16 = Math_fround($0 | 0);
   $14 = $14 > Math_fround(0.0) ? ($1 ? $14 : $16) : $16;
   HEAPF32[($7 + 16 | 0 | $8 | 0) >> 2] = $14;
   label$64 : {
    label$65 : {
     label$66 : {
      label$67 : {
       $8 = $12 & -3 | 0;
       switch ($8 | 0) {
       case 0:
        break label$66;
       case 1:
        break label$67;
       default:
        break label$64;
       };
      }
      label$68 : {
       label$69 : {
        $16 = Math_fround($18 - $14);
        if (!(Math_fround(Math_abs($16)) < Math_fround(2147483648.0))) {
         break label$69
        }
        $1 = ~~$16;
        break label$68;
       }
       $1 = -2147483648;
      }
      $16 = Math_fround($19 + Math_fround(Math_fround(HEAPF32[($7 + 24 | 0 | ($9 << 2 | 0) | 0) >> 2]) + Math_fround($1 | 0)));
      break label$65;
     }
     $16 = Math_fround(HEAPF32[($7 + 24 | 0 | ($9 << 2 | 0) | 0) >> 2]);
    }
    HEAPF32[($7 + 32 | 0 | ($9 << 2 | 0) | 0) >> 2] = $16;
   }
   $16 = Math_fround(HEAPF32[($6 + ($9 << 2 | 0) | 0) >> 2]);
   i64toi32_i32$2 = $7;
   i64toi32_i32$1 = HEAP32[($7 + 32 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($7 + 36 | 0) >> 2] | 0;
   $700 = i64toi32_i32$1;
   i64toi32_i32$1 = $4;
   HEAP32[($4 + 52 | 0) >> 2] = $700;
   HEAP32[($4 + 56 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $7;
   i64toi32_i32$0 = HEAP32[($7 + 16 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($7 + 20 | 0) >> 2] | 0;
   $703 = i64toi32_i32$0;
   i64toi32_i32$0 = $4;
   HEAP32[($4 + 60 | 0) >> 2] = $703;
   HEAP32[($4 + 64 | 0) >> 2] = i64toi32_i32$1;
   $14 = Math_fround($14 / $16);
   $14 = $14 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($14, Math_fround(1.0)));
   HEAPF32[($4 + 172 | 0) >> 2] = ($8 | 0) == (1 | 0) ? Math_fround(Math_fround(1.0) - $14) : $14;
  }
 }
 
 function ImGui__DockNodePreviewDockRender_28ImGuiWindow__2c_20ImGuiDockNode__2c_20ImGuiWindow__2c_20ImGuiDockPreviewData_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $8 = 0, $10 = Math_fround(0), $6 = 0, $15 = Math_fround(0), $9 = Math_fround(0), $12 = 0, $13 = 0, $17 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $24 = Math_fround(0), $18 = 0, $14 = 0, $25 = Math_fround(0), $11 = 0, i64toi32_i32$2 = 0, $5 = 0, $16 = 0, $7 = 0, $19 = 0, $28 = 0, $26 = Math_fround(0), $31 = 0, $22 = Math_fround(0), $29 = 0, $20 = 0, $21 = 0, $23 = Math_fround(0), $380 = Math_fround(0), $27 = Math_fround(0), $30 = 0, $775 = 0, $779 = 0, $833 = 0, $836 = 0, $839 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4 = __stack_pointer - 80 | 0;
  __stack_pointer = $4;
  $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $6 = HEAPU8[($5 + 99 | 0) >> 0] | 0;
  $7 = 1;
  (wasm2js_i32$0 = $4, wasm2js_i32$1 = GetViewportDrawList_28ImGuiViewportP__2c_20unsigned_20long_2c_20char_20const__29(HEAP32[($0 + 44 | 0) >> 2] | 0 | 0, 1 | 0, 67101 | 0) | 0), HEAP32[(wasm2js_i32$0 + 72 | 0) >> 2] = wasm2js_i32$1;
  label$1 : {
   if ($6) {
    break label$1
   }
   $8 = HEAP32[($2 + 44 | 0) >> 2] | 0;
   if ((HEAP32[($0 + 44 | 0) >> 2] | 0 | 0) == ($8 | 0)) {
    break label$1
   }
   (wasm2js_i32$0 = $4, wasm2js_i32$1 = GetViewportDrawList_28ImGuiViewportP__2c_20unsigned_20long_2c_20char_20const__29($8 | 0, 1 | 0, 67101 | 0) | 0), HEAP32[(wasm2js_i32$0 + 76 | 0) >> 2] = wasm2js_i32$1;
   $7 = 2;
  }
  label$2 : {
   label$3 : {
    $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    $9 = Math_fround(HEAPF32[($8 + 14396 | 0) >> 2]);
    $10 = Math_fround(Math_fround(($6 ? Math_fround(.800000011920929) : Math_fround(.6000000238418579)) * $9) * Math_fround(HEAPF32[($8 + 15440 | 0) >> 2]));
    $10 = Math_fround(Math_fround(($10 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($10, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
    if (!(Math_fround(Math_abs($10)) < Math_fround(2147483648.0))) {
     break label$3
    }
    $11 = ~~$10;
    break label$2;
   }
   $11 = -2147483648;
  }
  label$4 : {
   label$5 : {
    $10 = Math_fround(HEAPF32[($8 + 15432 | 0) >> 2]);
    $10 = Math_fround(Math_fround(($10 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($10, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
    if (!(Math_fround(Math_abs($10)) < Math_fround(2147483648.0))) {
     break label$5
    }
    $12 = ~~$10;
    break label$4;
   }
   $12 = -2147483648;
  }
  label$6 : {
   label$7 : {
    $10 = Math_fround(HEAPF32[($8 + 15428 | 0) >> 2]);
    $10 = Math_fround(Math_fround(($10 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($10, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
    if (!(Math_fround(Math_abs($10)) < Math_fround(2147483648.0))) {
     break label$7
    }
    $13 = ~~$10;
    break label$6;
   }
   $13 = -2147483648;
  }
  label$8 : {
   label$9 : {
    $10 = Math_fround(HEAPF32[($8 + 15436 | 0) >> 2]);
    $10 = Math_fround(Math_fround(($10 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($10, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
    if (!(Math_fround(Math_abs($10)) < Math_fround(2147483648.0))) {
     break label$9
    }
    $14 = ~~$10;
    break label$8;
   }
   $14 = -2147483648;
  }
  label$10 : {
   label$11 : {
    $10 = Math_fround(HEAPF32[($8 + 15216 | 0) >> 2]);
    $15 = Math_fround($10 * Math_fround(($6 ? Math_fround(.6000000238418579) : Math_fround(.4000000059604645)) * $9));
    $15 = Math_fround(Math_fround(($15 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($15, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
    if (!(Math_fround(Math_abs($15)) < Math_fround(2147483648.0))) {
     break label$11
    }
    $16 = ~~$15;
    break label$10;
   }
   $16 = -2147483648;
  }
  label$12 : {
   label$13 : {
    $15 = Math_fround(HEAPF32[($8 + 15208 | 0) >> 2]);
    $15 = Math_fround(Math_fround(($15 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($15, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
    if (!(Math_fround(Math_abs($15)) < Math_fround(2147483648.0))) {
     break label$13
    }
    $17 = ~~$15;
    break label$12;
   }
   $17 = -2147483648;
  }
  label$14 : {
   label$15 : {
    $15 = Math_fround(HEAPF32[($8 + 15204 | 0) >> 2]);
    $15 = Math_fround(Math_fround(($15 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($15, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
    if (!(Math_fround(Math_abs($15)) < Math_fround(2147483648.0))) {
     break label$15
    }
    $18 = ~~$15;
    break label$14;
   }
   $18 = -2147483648;
  }
  $12 = $12 << 8 | 0;
  $17 = $17 << 8 | 0;
  label$16 : {
   label$17 : {
    $15 = Math_fround(HEAPF32[($8 + 15212 | 0) >> 2]);
    $15 = Math_fround(Math_fround(($15 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($15, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
    if (!(Math_fround(Math_abs($15)) < Math_fround(2147483648.0))) {
     break label$17
    }
    $19 = ~~$15;
    break label$16;
   }
   $19 = -2147483648;
  }
  $12 = $12 | $13 | 0;
  $14 = $14 << 16 | 0;
  $17 = $17 | $18 | 0;
  $18 = $19 << 16 | 0;
  $15 = Math_fround($10 * Math_fround(($6 ? Math_fround(1.2000000476837158) : Math_fround(1.0)) * $9));
  $15 = $15 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($15, Math_fround(1.0)));
  $9 = Math_fround($10 * Math_fround(($6 ? Math_fround(.8999999761581421) : Math_fround(.699999988079071)) * $9));
  $9 = $9 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($9, Math_fround(1.0)));
  label$18 : {
   label$19 : {
    $6 = HEAP32[($2 + 936 | 0) >> 2] | 0;
    if ($6) {
     break label$19
    }
    $13 = 1;
    break label$18;
   }
   $13 = (HEAP32[($6 + 36 | 0) >> 2] | 0 | 0) > (0 | 0);
  }
  $20 = $11 << 24 | 0;
  $21 = $12 | $14 | 0;
  $19 = $17 | $18 | 0;
  $22 = Math_fround($15 * Math_fround(255.0));
  $23 = Math_fround($9 * Math_fround(255.0));
  label$20 : {
   if (!(HEAPU8[($3 + 160 | 0) >> 0] | 0)) {
    break label$20
   }
   $15 = Math_fround(HEAPF32[($3 + 60 | 0) >> 2]);
   $9 = Math_fround(HEAPF32[($3 + 52 | 0) >> 2]);
   $10 = Math_fround(HEAPF32[($3 + 56 | 0) >> 2]);
   HEAPF32[($4 + 68 | 0) >> 2] = Math_fround($10 + Math_fround(HEAPF32[($3 + 64 | 0) >> 2]));
   HEAPF32[($4 + 64 | 0) >> 2] = Math_fround($9 + $15);
   HEAPF32[($4 + 60 | 0) >> 2] = $10;
   HEAPF32[($4 + 56 | 0) >> 2] = $9;
   label$21 : {
    label$22 : {
     label$23 : {
      label$24 : {
       $6 = HEAP32[($3 + 168 | 0) >> 2] | 0;
       if ((($6 | 0) == (-1 | 0) & $13 | 0 | 0) != (1 | 0)) {
        break label$24
       }
       $9 = Math_fround(HEAPF32[($8 + 14460 | 0) >> 2]);
       HEAPF32[($4 + 60 | 0) >> 2] = Math_fround($10 + Math_fround(Math_fround($9 + $9) + Math_fround(HEAPF32[($8 + 15488 | 0) >> 2])));
       break label$23;
      }
      if (($6 | 0) != (-1 | 0)) {
       break label$22
      }
     }
     if (!(HEAPU8[($3 + 161 | 0) >> 0] | 0)) {
      break label$21
     }
    }
    $12 = $16 << 24 | 0 | $19 | 0;
    $17 = $4 + 64 | 0;
    $8 = 0;
    label$25 : while (1) {
     $6 = HEAP32[(($4 + 72 | 0) + ($8 << 2 | 0) | 0) >> 2] | 0;
     $10 = Math_fround(HEAPF32[($0 + 120 | 0) >> 2]);
     $15 = Math_fround(HEAPF32[($0 + 72 | 0) >> 2]);
     $24 = Math_fround(HEAPF32[($0 + 76 | 0) >> 2]);
     $9 = Math_fround(HEAPF32[($0 + 64 | 0) >> 2]);
     $25 = Math_fround(HEAPF32[($0 + 68 | 0) >> 2]);
     HEAPF32[($4 + 44 | 0) >> 2] = $25;
     HEAPF32[($4 + 40 | 0) >> 2] = $9;
     HEAPF32[($4 + 52 | 0) >> 2] = Math_fround($25 + $24);
     HEAPF32[($4 + 48 | 0) >> 2] = Math_fround($9 + $15);
     ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29($6 | 0, $4 + 56 | 0 | 0, $17 | 0, $12 | 0, Math_fround($10), ImGui__CalcRoundingFlagsForRectInRect_28ImRect_20const__2c_20ImRect_20const__2c_20float_29($4 + 56 | 0 | 0, $4 + 40 | 0 | 0, Math_fround(Math_fround(2.0))) | 0 | 0);
     $8 = $8 + 1 | 0;
     if (($8 | 0) != ($7 | 0)) {
      continue label$25
     }
     break label$25;
    };
    $13 = (HEAPU8[($3 + 160 | 0) >> 0] | 0 | 0) != (0 | 0) & $13 | 0;
   }
   if (!$13) {
    break label$20
   }
   if ((HEAP32[($3 + 168 | 0) >> 2] | 0 | 0) != (-1 | 0)) {
    break label$20
   }
   if (!(HEAPU8[($3 + 161 | 0) >> 0] | 0)) {
    break label$20
   }
   $24 = Math_fround(HEAPF32[($3 + 52 | 0) >> 2]);
   $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $26 = Math_fround(HEAPF32[($8 + 14416 | 0) >> 2]);
   $25 = Math_fround(HEAPF32[($8 + 14456 | 0) >> 2]);
   $9 = Math_fround(Math_fround($24 + $26) + $25);
   $10 = Math_fround(HEAPF32[($8 + 14460 | 0) >> 2]);
   $380 = Math_fround($10 + $10);
   $10 = Math_fround(HEAPF32[($3 + 56 | 0) >> 2]);
   $15 = Math_fround(HEAPF32[($8 + 15488 | 0) >> 2]);
   $27 = Math_fround($380 + Math_fround($10 + $15));
   $6 = HEAPU16[($3 + 156 | 0) >> 1] | 0 | ((HEAPU8[($3 + 158 | 0) >> 0] | 0) << 16 | 0) | 0;
   $24 = Math_fround(Math_fround(Math_fround(Math_fround($24 + Math_fround(HEAPF32[($3 + 60 | 0) >> 2])) - $26) - $25) - ($6 & 4096 | 0 ? $15 : Math_fround(0.0)));
   label$26 : {
    if (!($6 & 8192 | 0)) {
     break label$26
    }
    label$27 : {
     switch (HEAP32[($8 + 14436 | 0) >> 2] | 0 | 0) {
     case 0:
      $9 = Math_fround($9 + Math_fround($15 + Math_fround(HEAPF32[($8 + 14480 | 0) >> 2])));
      break label$26;
     case 1:
      break label$27;
     default:
      break label$26;
     };
    }
    $24 = Math_fround($24 - Math_fround($15 + $25));
   }
   HEAPF32[($4 + 68 | 0) >> 2] = $27;
   HEAPF32[($4 + 64 | 0) >> 2] = $24;
   HEAPF32[($4 + 60 | 0) >> 2] = $10;
   HEAPF32[($4 + 56 | 0) >> 2] = $9;
   label$29 : {
    label$30 : {
     if (!$1) {
      break label$30
     }
     $8 = HEAP32[($1 + 48 | 0) >> 2] | 0;
     if (!$8) {
      break label$30
     }
     label$31 : {
      if ((HEAPU8[($1 + 17 | 0) >> 0] | 0) & 48 | 0) {
       break label$31
      }
      $9 = Math_fround($9 + Math_fround(Math_fround(HEAPF32[($8 + 64 | 0) >> 2]) + Math_fround(HEAPF32[($5 + 14480 | 0) >> 2])));
      break label$29;
     }
     $15 = Math_fround(HEAPF32[($5 + 14480 | 0) >> 2]);
     ImGui__TabItemCalcSize_28ImGuiWindow__29($4 + 40 | 0 | 0, HEAP32[(HEAP32[($1 + 44 | 0) >> 2] | 0) >> 2] | 0 | 0);
     $9 = Math_fround($9 + Math_fround($15 + Math_fround(HEAPF32[($4 + 40 | 0) >> 2])));
     break label$29;
    }
    if ((HEAPU8[($0 + 11 | 0) >> 0] | 0) & 32 | 0) {
     break label$29
    }
    $15 = Math_fround(HEAPF32[($5 + 14480 | 0) >> 2]);
    ImGui__TabItemCalcSize_28ImGuiWindow__29($4 + 40 | 0 | 0, $0 | 0);
    $9 = Math_fround($9 + Math_fround($15 + Math_fround(HEAPF32[($4 + 40 | 0) >> 2])));
   }
   label$32 : {
    label$33 : {
     $8 = HEAP32[($2 + 936 | 0) >> 2] | 0;
     if ($8) {
      break label$33
     }
     $16 = 1;
     $28 = 0;
     $29 = 0;
     break label$32;
    }
    label$34 : {
     $28 = HEAP32[($8 + 48 | 0) >> 2] | 0;
     if ($28) {
      break label$34
     }
     $28 = 0;
     $16 = 1;
     $29 = 0;
     break label$32;
    }
    $29 = 1;
    $16 = HEAP32[$28 >> 2] | 0;
    if (($16 | 0) < (1 | 0)) {
     break label$20
    }
   }
   $18 = $4 + 64 | 0;
   $30 = $0 + 16 | 0;
   $11 = 0;
   label$35 : while (1) {
    $17 = $2;
    label$36 : {
     label$37 : {
      if (!$29) {
       break label$37
      }
      $17 = HEAP32[(((HEAP32[($28 + 8 | 0) >> 2] | 0) + Math_imul($11, 48) | 0) + 8 | 0) >> 2] | 0;
      if (!$17) {
       break label$36
      }
     }
     label$38 : {
      $8 = HEAP32[($0 + 936 | 0) >> 2] | 0;
      if (!$8) {
       break label$38
      }
      if (!((HEAPU8[($8 + 17 | 0) >> 0] | 0) & 4 | 0)) {
       break label$38
      }
      if ((HEAP16[($17 + 238 | 0) >> 1] | 0 | 0) < (HEAP16[($0 + 238 | 0) >> 1] | 0 | 0)) {
       break label$36
      }
     }
     label$39 : {
      label$40 : {
       $12 = $8 ? $8 + 80 | 0 : $30;
       $8 = HEAP32[$12 >> 2] | 0;
       $6 = HEAP32[($17 + 16 | 0) >> 2] | 0;
       if (($8 | 0) == ($6 | 0)) {
        break label$40
       }
       label$41 : {
        if (!$8) {
         break label$41
        }
        if (!(HEAPU8[($12 + 25 | 0) >> 0] | 0)) {
         break label$41
        }
        if (!$6) {
         break label$39
        }
       }
       if (!$6) {
        break label$36
       }
       if ($8) {
        break label$36
       }
       if ((HEAPU8[($17 + 41 | 0) >> 0] | 0) & 255 | 0) {
        break label$39
       }
       break label$36;
      }
      $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      $12 = HEAP32[($8 + 18548 | 0) >> 2] | 0;
      if (($12 | 0) < (1 | 0)) {
       break label$39
      }
      $14 = HEAP32[($8 + 18556 | 0) >> 2] | 0;
      label$42 : while (1) {
       label$43 : {
        $13 = $12 + -1 | 0;
        $6 = HEAP32[(($14 + Math_imul($13, 40) | 0) + 4 | 0) >> 2] | 0;
        if (!$6) {
         break label$43
        }
        $8 = $17;
        if ((HEAP32[($8 + 828 | 0) >> 2] | 0 | 0) == ($6 | 0)) {
         break label$36
        }
        label$44 : while (1) {
         if (($8 | 0) == ($6 | 0)) {
          break label$36
         }
         $8 = HEAP32[($8 + 824 | 0) >> 2] | 0;
         if ($8) {
          continue label$44
         }
         break label$44;
        };
       }
       $8 = ($12 | 0) > (1 | 0);
       $12 = $13;
       if ($8) {
        continue label$42
       }
       break label$42;
      };
     }
     ImGui__TabItemCalcSize_28ImGuiWindow__29($4 + 32 | 0 | 0, $17 | 0);
     HEAPF32[($4 + 44 | 0) >> 2] = $10;
     HEAPF32[($4 + 52 | 0) >> 2] = Math_fround($10 + Math_fround(HEAPF32[($4 + 36 | 0) >> 2]));
     HEAPF32[($4 + 40 | 0) >> 2] = $9;
     $15 = Math_fround(HEAPF32[($4 + 32 | 0) >> 2]);
     HEAPF32[($4 + 48 | 0) >> 2] = Math_fround($9 + $15);
     $15 = Math_fround($15 + Math_fround(HEAPF32[($5 + 14480 | 0) >> 2]));
     $8 = HEAP32[($17 + 908 | 0) >> 2] | 0;
     label$45 : {
      label$46 : {
       $24 = Math_fround(HEAPF32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 14396 | 0) >> 2]);
       if (!($24 >= Math_fround(1.0))) {
        break label$46
       }
       $14 = HEAP32[($17 + 920 | 0) >> 2] | 0;
       break label$45;
      }
      label$47 : {
       label$48 : {
        $25 = Math_fround($24 * Math_fround(($8 >>> 24 | 0) >>> 0));
        if (!($25 < Math_fround(4294967296.0) & $25 >= Math_fround(0.0) | 0)) {
         break label$48
        }
        $6 = ~~$25 >>> 0;
        break label$47;
       }
       $6 = 0;
      }
      $8 = $8 & 16777215 | 0;
      $6 = $6 << 24 | 0;
      $12 = HEAP32[($17 + 920 | 0) >> 2] | 0;
      $13 = $12 & 16777215 | 0;
      label$49 : {
       label$50 : {
        $24 = Math_fround($24 * Math_fround(($12 >>> 24 | 0) >>> 0));
        if (!($24 < Math_fround(4294967296.0) & $24 >= Math_fround(0.0) | 0)) {
         break label$50
        }
        $12 = ~~$24 >>> 0;
        break label$49;
       }
       $12 = 0;
      }
      $8 = $6 | $8 | 0;
      $14 = $12 << 24 | 0 | $13 | 0;
     }
     $9 = Math_fround($9 + $15);
     $6 = 0;
     ImGui__PushStyleColor_28int_2c_20unsigned_20int_29(0 | 0, $8 | 0);
     label$51 : while (1) {
      $12 = ((HEAP32[($17 + 8 | 0) >> 2] | 0) >>> 20 | 0) & 1 | 0 | 8388608 | 0;
      label$52 : {
       label$53 : {
        if (!(Math_fround(HEAPF32[($4 + 40 | 0) >> 2]) >= Math_fround(HEAPF32[($4 + 56 | 0) >> 2]))) {
         break label$53
        }
        if (!(Math_fround(HEAPF32[($4 + 44 | 0) >> 2]) >= Math_fround(HEAPF32[($4 + 60 | 0) >> 2]))) {
         break label$53
        }
        if (!(Math_fround(HEAPF32[($4 + 48 | 0) >> 2]) <= Math_fround(HEAPF32[($4 + 64 | 0) >> 2]))) {
         break label$53
        }
        if (!(Math_fround(HEAPF32[($4 + 52 | 0) >> 2]) <= Math_fround(HEAPF32[($4 + 68 | 0) >> 2]))) {
         break label$53
        }
        $8 = HEAP32[(($4 + 72 | 0) + ($6 << 2 | 0) | 0) >> 2] | 0;
        break label$52;
       }
       $8 = HEAP32[(($4 + 72 | 0) + ($6 << 2 | 0) | 0) >> 2] | 0;
       ImDrawList__PushClipRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20bool_29($8 | 0, $4 + 56 | 0 | 0, $18 | 0, 0 | 0);
      }
      ImGui__TabItemBackground_28ImDrawList__2c_20ImRect_20const__2c_20int_2c_20unsigned_20int_29($8 | 0, $4 + 40 | 0 | 0, $12 | 0, $14 | 0);
      i64toi32_i32$2 = $5;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 14456 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 14460 | 0) >> 2] | 0;
      $31 = i64toi32_i32$0;
      i64toi32_i32$0 = $4;
      HEAP32[($4 + 24 | 0) >> 2] = $31;
      HEAP32[($4 + 28 | 0) >> 2] = i64toi32_i32$1;
      $13 = HEAP32[$17 >> 2] | 0;
      i64toi32_i32$0 = $4;
      HEAP32[($4 + 8 | 0) >> 2] = $31;
      HEAP32[($4 + 12 | 0) >> 2] = i64toi32_i32$1;
      ImGui__TabItemLabelAndCloseButton_28ImDrawList__2c_20ImRect_20const__2c_20int_2c_20ImVec2_2c_20char_20const__2c_20unsigned_20int_2c_20unsigned_20int_2c_20bool_2c_20bool__2c_20bool__29($8 | 0, $4 + 40 | 0 | 0, $12 | 0, $4 + 8 | 0 | 0, $13 | 0, 0 | 0, 0 | 0, 0 | 0, 0 | 0, 0 | 0);
      label$54 : {
       label$55 : {
        if (!(Math_fround(HEAPF32[($4 + 40 | 0) >> 2]) >= Math_fround(HEAPF32[($4 + 56 | 0) >> 2]))) {
         break label$55
        }
        if (!(Math_fround(HEAPF32[($4 + 44 | 0) >> 2]) >= Math_fround(HEAPF32[($4 + 60 | 0) >> 2]))) {
         break label$55
        }
        if (!(Math_fround(HEAPF32[($4 + 48 | 0) >> 2]) <= Math_fround(HEAPF32[($4 + 64 | 0) >> 2]))) {
         break label$55
        }
        if (Math_fround(HEAPF32[($4 + 52 | 0) >> 2]) <= Math_fround(HEAPF32[($4 + 68 | 0) >> 2])) {
         break label$54
        }
       }
       ImDrawList__PopClipRect_28_29($8 | 0);
      }
      $6 = $6 + 1 | 0;
      if (($6 | 0) != ($7 | 0)) {
       continue label$51
      }
      break label$51;
     };
     $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     $6 = HEAP32[($8 + 18476 | 0) >> 2] | 0;
     if (($6 | 0) < (1 | 0)) {
      break label$36
     }
     $6 = (Math_imul($6, 20) + (HEAP32[($8 + 18484 | 0) >> 2] | 0) | 0) + -20 | 0;
     $12 = $8 + ((HEAP32[$6 >> 2] | 0) << 4 | 0) | 0;
     i64toi32_i32$2 = $6 + 12 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $775 = i64toi32_i32$1;
     i64toi32_i32$1 = $12 + 14604 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $775;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $6;
     i64toi32_i32$0 = HEAP32[($6 + 4 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($6 + 8 | 0) >> 2] | 0;
     $779 = i64toi32_i32$0;
     i64toi32_i32$0 = $12 + 14596 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $779;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[($8 + 18476 | 0) >> 2] = (HEAP32[($8 + 18476 | 0) >> 2] | 0) + -1 | 0;
    }
    $11 = $11 + 1 | 0;
    if (($11 | 0) != ($16 | 0)) {
     continue label$35
    }
    break label$35;
   };
  }
  $0 = $21 | $20 | 0;
  $26 = Math_fround($22 + Math_fround(.5));
  $22 = Math_fround($23 + Math_fround(.5));
  $9 = Math_fround(Math_max(Math_fround(HEAPF32[($5 + 14464 | 0) >> 2]), Math_fround(3.0)));
  $17 = ($4 + 56 | 0) + 8 | 0;
  $12 = ($4 + 40 | 0) + 8 | 0;
  $6 = -1;
  label$56 : {
   label$57 : while (1) {
    if (($6 | 0) == (4 | 0)) {
     break label$56
    }
    label$58 : {
     $11 = $6 + 1 | 0;
     $8 = $3 + ($11 << 4 | 0) | 0;
     $13 = $8 + 176 | 0;
     if (Math_fround(HEAPF32[$13 >> 2]) > Math_fround(HEAPF32[($8 + 184 | 0) >> 2])) {
      break label$58
     }
     if (Math_fround(HEAPF32[($8 + 180 | 0) >> 2]) > Math_fround(HEAPF32[($8 + 188 | 0) >> 2])) {
      break label$58
     }
     $8 = $13 + 8 | 0;
     i64toi32_i32$2 = $8;
     i64toi32_i32$1 = HEAP32[$8 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($8 + 4 | 0) >> 2] | 0;
     $833 = i64toi32_i32$1;
     i64toi32_i32$1 = $17;
     HEAP32[i64toi32_i32$1 >> 2] = $833;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $13;
     i64toi32_i32$0 = HEAP32[$13 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($13 + 4 | 0) >> 2] | 0;
     $836 = i64toi32_i32$0;
     i64toi32_i32$0 = $4;
     HEAP32[($4 + 56 | 0) >> 2] = $836;
     HEAP32[($4 + 60 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $8;
     i64toi32_i32$1 = HEAP32[$8 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($8 + 4 | 0) >> 2] | 0;
     $839 = i64toi32_i32$1;
     i64toi32_i32$1 = $12;
     HEAP32[i64toi32_i32$1 >> 2] = $839;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $13;
     i64toi32_i32$0 = HEAP32[$13 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($13 + 4 | 0) >> 2] | 0;
     $31 = i64toi32_i32$0;
     HEAPF32[$12 >> 2] = Math_fround(Math_fround(HEAPF32[$12 >> 2]) + Math_fround(-2.0));
     i64toi32_i32$0 = $4;
     HEAP32[($4 + 40 | 0) >> 2] = $31;
     HEAP32[($4 + 44 | 0) >> 2] = i64toi32_i32$1;
     HEAPF32[($4 + 40 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4 + 40 | 0) >> 2]) + Math_fround(2.0));
     HEAPF32[($4 + 44 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4 + 44 | 0) >> 2]) + Math_fround(2.0));
     HEAPF32[($4 + 52 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4 + 52 | 0) >> 2]) + Math_fround(-2.0));
     label$59 : {
      label$60 : {
       if ((HEAP32[($3 + 168 | 0) >> 2] | 0 | 0) != ($6 | 0)) {
        break label$60
       }
       $10 = $26;
       if (HEAPU8[($3 + 163 | 0) >> 0] | 0) {
        break label$59
       }
      }
      $10 = $22;
     }
     label$61 : {
      label$62 : {
       if (!(Math_fround(Math_abs($10)) < Math_fround(2147483648.0))) {
        break label$62
       }
       $8 = ~~$10;
       break label$61;
      }
      $8 = -2147483648;
     }
     $13 = $6 & -2 | 0;
     $14 = $8 << 24 | 0 | $19 | 0;
     $8 = 0;
     label$63 : {
      if ($6 >>> 0 > 1 >>> 0) {
       break label$63
      }
      label$64 : while (1) {
       $24 = Math_fround(HEAPF32[($4 + 52 | 0) >> 2]);
       $25 = Math_fround(HEAPF32[($4 + 44 | 0) >> 2]);
       $10 = Math_fround(HEAPF32[($4 + 48 | 0) >> 2]);
       $15 = Math_fround(HEAPF32[($4 + 40 | 0) >> 2]);
       $6 = HEAP32[(($4 + 72 | 0) + ($8 << 2 | 0) | 0) >> 2] | 0;
       ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29($6 | 0, $4 + 56 | 0 | 0, $17 | 0, $14 | 0, Math_fround($9), 0 | 0);
       ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29($6 | 0, $4 + 40 | 0 | 0, $12 | 0, $0 | 0, Math_fround($9), 0 | 0, Math_fround(Math_fround(1.0)));
       HEAPF32[($4 + 36 | 0) >> 2] = Math_fround(HEAPF32[($4 + 44 | 0) >> 2]);
       label$65 : {
        label$66 : {
         $10 = Math_fround(Math_fround($15 + $10) * Math_fround(.5));
         if (!(Math_fround(Math_abs($10)) < Math_fround(2147483648.0))) {
          break label$66
         }
         $18 = ~~$10;
         break label$65;
        }
        $18 = -2147483648;
       }
       $10 = Math_fround($18 | 0);
       HEAPF32[($4 + 32 | 0) >> 2] = $10;
       HEAPF32[($4 + 20 | 0) >> 2] = Math_fround(HEAPF32[($4 + 52 | 0) >> 2]);
       HEAPF32[($4 + 16 | 0) >> 2] = $10;
       ImDrawList__AddLine_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_29($6 | 0, $4 + 32 | 0 | 0, $4 + 16 | 0 | 0, $0 | 0, Math_fround(Math_fround(1.0)));
       label$67 : {
        if (($13 | 0) != (2 | 0)) {
         break label$67
        }
        HEAPF32[($4 + 32 | 0) >> 2] = Math_fround(HEAPF32[($4 + 40 | 0) >> 2]);
        label$68 : {
         label$69 : {
          $10 = Math_fround(Math_fround($25 + $24) * Math_fround(.5));
          if (!(Math_fround(Math_abs($10)) < Math_fround(2147483648.0))) {
           break label$69
          }
          $18 = ~~$10;
          break label$68;
         }
         $18 = -2147483648;
        }
        $10 = Math_fround($18 | 0);
        HEAPF32[($4 + 36 | 0) >> 2] = $10;
        HEAPF32[($4 + 20 | 0) >> 2] = $10;
        HEAPF32[($4 + 16 | 0) >> 2] = Math_fround(HEAPF32[($4 + 48 | 0) >> 2]);
        ImDrawList__AddLine_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_29($6 | 0, $4 + 32 | 0 | 0, $4 + 16 | 0 | 0, $0 | 0, Math_fround(Math_fround(1.0)));
       }
       $8 = $8 + 1 | 0;
       if (($8 | 0) != ($7 | 0)) {
        continue label$64
       }
       break label$58;
      };
     }
     label$70 : while (1) {
      $10 = Math_fround(HEAPF32[($4 + 52 | 0) >> 2]);
      $15 = Math_fround(HEAPF32[($4 + 44 | 0) >> 2]);
      $6 = HEAP32[(($4 + 72 | 0) + ($8 << 2 | 0) | 0) >> 2] | 0;
      ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29($6 | 0, $4 + 56 | 0 | 0, $17 | 0, $14 | 0, Math_fround($9), 0 | 0);
      ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29($6 | 0, $4 + 40 | 0 | 0, $12 | 0, $0 | 0, Math_fround($9), 0 | 0, Math_fround(Math_fround(1.0)));
      label$71 : {
       if (($13 | 0) != (2 | 0)) {
        break label$71
       }
       HEAPF32[($4 + 32 | 0) >> 2] = Math_fround(HEAPF32[($4 + 40 | 0) >> 2]);
       label$72 : {
        label$73 : {
         $10 = Math_fround(Math_fround($15 + $10) * Math_fround(.5));
         if (!(Math_fround(Math_abs($10)) < Math_fround(2147483648.0))) {
          break label$73
         }
         $18 = ~~$10;
         break label$72;
        }
        $18 = -2147483648;
       }
       $10 = Math_fround($18 | 0);
       HEAPF32[($4 + 36 | 0) >> 2] = $10;
       HEAPF32[($4 + 20 | 0) >> 2] = $10;
       HEAPF32[($4 + 16 | 0) >> 2] = Math_fround(HEAPF32[($4 + 48 | 0) >> 2]);
       ImDrawList__AddLine_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_29($6 | 0, $4 + 32 | 0 | 0, $4 + 16 | 0 | 0, $0 | 0, Math_fround(Math_fround(1.0)));
      }
      $8 = $8 + 1 | 0;
      if (($8 | 0) != ($7 | 0)) {
       continue label$70
      }
      break label$70;
     };
    }
    label$74 : {
     if (!$1) {
      break label$74
     }
     if ((HEAPU8[($1 + 16 | 0) >> 0] | 0) & 16 | 0) {
      break label$56
     }
    }
    $6 = $11;
    if (!(HEAPU8[($5 + 96 | 0) >> 0] | 0)) {
     continue label$57
    }
    break label$57;
   };
  }
  __stack_pointer = $4 + 80 | 0;
 }
 
 function ImGui__DockContextQueueDock_28ImGuiContext__2c_20ImGuiWindow__2c_20ImGuiDockNode__2c_20ImGuiWindow__2c_20int_2c_20float_2c_20bool_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = Math_fround($5);
  $6 = $6 | 0;
  var $7 = 0, $9 = 0, $8 = 0, $10 = 0;
  label$1 : {
   $7 = HEAP32[($0 + 23352 | 0) >> 2] | 0;
   if (($7 | 0) != (HEAP32[($0 + 23356 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $8 = $7 + 1 | 0;
   label$2 : {
    label$3 : {
     if ($7) {
      break label$3
     }
     $9 = 8;
     break label$2;
    }
    $9 = (($7 | 0) / (2 | 0) | 0) + $7 | 0;
   }
   $8 = ($9 | 0) > ($8 | 0) ? $9 : $8;
   if (($7 | 0) >= ($8 | 0)) {
    break label$1
   }
   $7 = Math_imul($8, 36);
   label$4 : {
    $9 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$9) {
     break label$4
    }
    $9 = $9 + 184 | 0;
    HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + 1 | 0;
   }
   $7 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($7, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$5 : {
    $9 = HEAP32[($0 + 23360 | 0) >> 2] | 0;
    if (!$9) {
     break label$5
    }
    __memcpy($7 | 0, $9 | 0, Math_imul(HEAP32[($0 + 23352 | 0) >> 2] | 0, 36) | 0) | 0;
    label$6 : {
     $9 = HEAP32[($0 + 23360 | 0) >> 2] | 0;
     if (!$9) {
      break label$6
     }
     $10 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$10) {
      break label$6
     }
     $10 = $10 + 184 | 0;
     HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($9, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($0 + 23356 | 0) >> 2] = $8;
   HEAP32[($0 + 23360 | 0) >> 2] = $7;
   $7 = HEAP32[($0 + 23352 | 0) >> 2] | 0;
  }
  $7 = (HEAP32[($0 + 23360 | 0) >> 2] | 0) + Math_imul($7, 36) | 0;
  HEAP32[($7 + 28 | 0) >> 2] = 0;
  HEAP32[($7 + 32 | 0) >> 2] = 0;
  HEAP8[($7 + 24 | 0) >> 0] = $6;
  HEAPF32[($7 + 20 | 0) >> 2] = $5;
  HEAP32[($7 + 16 | 0) >> 2] = $4;
  HEAP32[($7 + 12 | 0) >> 2] = $3;
  HEAP32[($7 + 8 | 0) >> 2] = $2;
  HEAP32[($7 + 4 | 0) >> 2] = $1;
  HEAP32[$7 >> 2] = 1;
  HEAP32[($0 + 23352 | 0) >> 2] = (HEAP32[($0 + 23352 | 0) >> 2] | 0) + 1 | 0;
 }
 
 function ImGui__PushItemFlag_28int_2c_20bool_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $3 = HEAP32[($2 + 18252 | 0) >> 2] | 0;
  $1 = $1 ? $3 | $0 | 0 : $3 & ($0 ^ -1 | 0) | 0;
  HEAP32[($2 + 18252 | 0) >> 2] = $1;
  label$1 : {
   $0 = HEAP32[($2 + 18524 | 0) >> 2] | 0;
   if (($0 | 0) != (HEAP32[($2 + 18528 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $3 = $0 + 1 | 0;
   label$2 : {
    label$3 : {
     if ($0) {
      break label$3
     }
     $4 = 8;
     break label$2;
    }
    $4 = (($0 | 0) / (2 | 0) | 0) + $0 | 0;
   }
   $3 = ($4 | 0) > ($3 | 0) ? $4 : $3;
   if (($0 | 0) >= ($3 | 0)) {
    break label$1
   }
   $0 = $2 + 184 | 0;
   HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 1 | 0;
   $0 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($3 << 2 | 0, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$4 : {
    $4 = HEAP32[($2 + 18532 | 0) >> 2] | 0;
    if (!$4) {
     break label$4
    }
    __memcpy($0 | 0, $4 | 0, (HEAP32[($2 + 18524 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
    label$5 : {
     $4 = HEAP32[($2 + 18532 | 0) >> 2] | 0;
     if (!$4) {
      break label$5
     }
     $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$5) {
      break label$5
     }
     $5 = $5 + 184 | 0;
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($4, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($2 + 18528 | 0) >> 2] = $3;
   HEAP32[($2 + 18532 | 0) >> 2] = $0;
   $0 = HEAP32[($2 + 18524 | 0) >> 2] | 0;
  }
  HEAP32[((HEAP32[($2 + 18532 | 0) >> 2] | 0) + ($0 << 2 | 0) | 0) >> 2] = $1;
  HEAP32[($2 + 18524 | 0) >> 2] = (HEAP32[($2 + 18524 | 0) >> 2] | 0) + 1 | 0;
 }
 
 function ImGui__PopItemFlag_28_29() {
  var $0 = 0, $1 = 0;
  $0 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $1 = HEAP32[($0 + 18524 | 0) >> 2] | 0;
  HEAP32[($0 + 18524 | 0) >> 2] = $1 + -1 | 0;
  HEAP32[($0 + 18252 | 0) >> 2] = HEAP32[((($1 << 2 | 0) + (HEAP32[($0 + 18532 | 0) >> 2] | 0) | 0) + -8 | 0) >> 2] | 0;
 }
 
 function ImGui__BeginDisabled_28bool_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $4 = Math_fround(0);
  label$1 : {
   $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $2 = HEAP32[($1 + 18252 | 0) >> 2] | 0;
   $3 = $2 & 4 | 0;
   if ($3) {
    break label$1
   }
   if (!$0) {
    break label$1
   }
   $4 = Math_fround(HEAPF32[($1 + 14396 | 0) >> 2]);
   HEAPF32[($1 + 23268 | 0) >> 2] = $4;
   HEAPF32[($1 + 14396 | 0) >> 2] = Math_fround($4 * Math_fround(HEAPF32[($1 + 14400 | 0) >> 2]));
  }
  label$2 : {
   label$3 : {
    if ($3) {
     break label$3
    }
    if (!$0) {
     break label$2
    }
   }
   $2 = $2 | 4 | 0;
   HEAP32[($1 + 18252 | 0) >> 2] = $2;
  }
  label$4 : {
   $0 = HEAP32[($1 + 18524 | 0) >> 2] | 0;
   if (($0 | 0) != (HEAP32[($1 + 18528 | 0) >> 2] | 0 | 0)) {
    break label$4
   }
   $3 = $0 + 1 | 0;
   label$5 : {
    label$6 : {
     if ($0) {
      break label$6
     }
     $5 = 8;
     break label$5;
    }
    $5 = (($0 | 0) / (2 | 0) | 0) + $0 | 0;
   }
   $3 = ($5 | 0) > ($3 | 0) ? $5 : $3;
   if (($0 | 0) >= ($3 | 0)) {
    break label$4
   }
   $0 = $1 + 184 | 0;
   HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 1 | 0;
   $0 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($3 << 2 | 0, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$7 : {
    $2 = HEAP32[($1 + 18532 | 0) >> 2] | 0;
    if (!$2) {
     break label$7
    }
    __memcpy($0 | 0, $2 | 0, (HEAP32[($1 + 18524 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
    label$8 : {
     $2 = HEAP32[($1 + 18532 | 0) >> 2] | 0;
     if (!$2) {
      break label$8
     }
     $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$5) {
      break label$8
     }
     $5 = $5 + 184 | 0;
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($2, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($1 + 18528 | 0) >> 2] = $3;
   HEAP32[($1 + 18532 | 0) >> 2] = $0;
   $2 = HEAP32[($1 + 18252 | 0) >> 2] | 0;
   $0 = HEAP32[($1 + 18524 | 0) >> 2] | 0;
  }
  HEAP32[((HEAP32[($1 + 18532 | 0) >> 2] | 0) + ($0 << 2 | 0) | 0) >> 2] = $2;
  HEAP32[($1 + 18524 | 0) >> 2] = (HEAP32[($1 + 18524 | 0) >> 2] | 0) + 1 | 0;
  HEAP16[($1 + 23272 | 0) >> 1] = (HEAPU16[($1 + 23272 | 0) >> 1] | 0) + 1 | 0;
 }
 
 function ImGui__EndDisabled_28_29() {
  var $0 = 0, $1 = 0, $2 = 0;
  $0 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  HEAP16[($0 + 23272 | 0) >> 1] = (HEAPU16[($0 + 23272 | 0) >> 1] | 0) + -1 | 0;
  $1 = HEAP32[($0 + 18524 | 0) >> 2] | 0;
  HEAP32[($0 + 18524 | 0) >> 2] = $1 + -1 | 0;
  $2 = HEAP32[($0 + 18252 | 0) >> 2] | 0;
  $1 = HEAP32[((($1 << 2 | 0) + (HEAP32[($0 + 18532 | 0) >> 2] | 0) | 0) + -8 | 0) >> 2] | 0;
  HEAP32[($0 + 18252 | 0) >> 2] = $1;
  label$1 : {
   if (!($2 & 4 | 0)) {
    break label$1
   }
   if ($1 & 4 | 0) {
    break label$1
   }
   HEAPF32[($0 + 14396 | 0) >> 2] = Math_fround(HEAPF32[($0 + 23268 | 0) >> 2]);
  }
 }
 
 function ImGui__SetNextWindowPos_28ImVec2_20const__2c_20int_2c_20ImVec2_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $13 = 0, $25 = 0;
  $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  HEAP32[($3 + 18340 | 0) >> 2] = HEAP32[($3 + 18340 | 0) >> 2] | 0 | 1 | 0;
  i64toi32_i32$2 = $0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $13 = i64toi32_i32$0;
  i64toi32_i32$0 = $3 + 18360 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $13;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  HEAP8[($3 + 18400 | 0) >> 0] = 1;
  HEAP32[($3 + 18344 | 0) >> 2] = $1 ? $1 : 1;
  $25 = i64toi32_i32$1;
  i64toi32_i32$1 = $3 + 18368 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $25;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function ImGui__SetNextWindowSizeConstraints_28ImVec2_20const__2c_20ImVec2_20const__2c_20void_20_28__29_28ImGuiSizeCallbackData__29_2c_20void__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var i64toi32_i32$1 = 0, $4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $5 = 0, $5$hi = 0, $24 = 0;
  $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  HEAP32[($4 + 18340 | 0) >> 2] = HEAP32[($4 + 18340 | 0) >> 2] | 0 | 16 | 0;
  i64toi32_i32$2 = $0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $5 = i64toi32_i32$0;
  $5$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  HEAP32[($4 + 18424 | 0) >> 2] = $3;
  HEAP32[($4 + 18420 | 0) >> 2] = $2;
  $24 = i64toi32_i32$1;
  i64toi32_i32$1 = $4 + 18412 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $24;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$1 = $4 + 18404 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $5;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function ImGui__ScrollToRectEx_28ImGuiWindow__2c_20ImRect_20const__2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $7 = Math_fround(0), $5 = Math_fround(0), $10 = Math_fround(0), $9 = Math_fround(0), $12 = 0, $4 = 0, $11 = 0, $13 = 0, $14 = Math_fround(0), $16 = Math_fround(0), $18 = Math_fround(0), $17 = 0, $21 = Math_fround(0), $24 = Math_fround(0), $15 = Math_fround(0), $20 = 0, $6 = Math_fround(0), $8 = Math_fround(0), $19 = 0, $22 = 0, $23 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  $5 = Math_fround(Math_fround(HEAPF32[($1 + 528 | 0) >> 2]) + Math_fround(1.0));
  $6 = Math_fround(HEAPF32[($1 + 148 | 0) >> 2]);
  $7 = Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 520 | 0) >> 2]) + Math_fround(-1.0)) + $6);
  $8 = Math_fround(HEAPF32[($1 + 144 | 0) >> 2]);
  $9 = Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 516 | 0) >> 2]) + Math_fround(-1.0)) + $8);
  $10 = Math_fround(Math_fround(HEAPF32[($1 + 524 | 0) >> 2]) + Math_fround(1.0));
  $11 = $9 < $10;
  $12 = $3;
  label$1 : {
   if ($12 & 21 | 0) {
    break label$1
   }
   $12 = HEAPU8[($1 + 216 | 0) >> 0] | 0 | $3 | 0;
  }
  $13 = $7 < $5;
  $14 = $11 ? $9 : $10;
  $11 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  label$2 : {
   if ($12 & 42 | 0) {
    break label$2
   }
   $12 = (HEAPU8[($1 + 225 | 0) >> 0] | 0 ? 32 : 2) | $12 | 0;
  }
  $15 = $13 ? $7 : $5;
  $16 = Math_fround(HEAPF32[($2 + 12 | 0) >> 2]);
  $7 = Math_fround(HEAPF32[($2 + 4 | 0) >> 2]);
  $9 = Math_fround(HEAPF32[$2 >> 2]);
  $17 = $9 >= $14;
  $18 = Math_fround(HEAPF32[($2 + 8 | 0) >> 2]);
  $19 = $18 <= $10;
  $20 = 1;
  $13 = 1;
  label$3 : {
   $21 = Math_fround(HEAPF32[($11 + 14472 | 0) >> 2]);
   if (Math_fround(Math_fround($21 + $21) + Math_fround($18 - $9)) <= Math_fround($10 - $14)) {
    break label$3
   }
   $13 = 1;
   if ((HEAP8[($1 + 248 | 0) >> 0] | 0 | 0) > (0 | 0)) {
    break label$3
   }
   $13 = ((HEAPU8[($1 + 8 | 0) >> 0] | 0) & 64 | 0) >>> 6 | 0;
  }
  $22 = $16 <= $5;
  $23 = $7 >= $15;
  $17 = $17 & $19 | 0;
  label$4 : {
   $24 = Math_fround(HEAPF32[($11 + 14476 | 0) >> 2]);
   if (Math_fround(Math_fround($24 + $24) + Math_fround($16 - $7)) <= Math_fround($5 - $15)) {
    break label$4
   }
   if ((HEAP8[($1 + 249 | 0) >> 0] | 0 | 0) > (0 | 0)) {
    break label$4
   }
   $20 = ((HEAPU8[($1 + 8 | 0) >> 0] | 0) & 64 | 0) >>> 6 | 0;
  }
  $11 = $23 & $22 | 0;
  label$5 : {
   label$6 : {
    label$7 : {
     if (!($12 & 1 | 0) | $17 | 0) {
      break label$7
     }
     label$8 : {
      if (($9 < $14 ^ -1 | 0) & $13 | 0) {
       break label$8
      }
      $9 = Math_fround($9 - $21);
      $10 = Math_fround(0.0);
      break label$6;
     }
     if (!($18 >= $10)) {
      break label$5
     }
     $9 = Math_fround($18 + $21);
     $10 = Math_fround(1.0);
     break label$6;
    }
    label$9 : {
     if ($12 & 16 | 0) {
      break label$9
     }
     if (!($12 & 4 | 0) | $17 | 0) {
      break label$5
     }
    }
    $10 = Math_fround(0.0);
    if (!$13) {
     break label$6
    }
    $10 = Math_fround(.5);
    label$10 : {
     label$11 : {
      $9 = Math_fround(Math_fround($9 + $18) * Math_fround(.5));
      if (!(Math_fround(Math_abs($9)) < Math_fround(2147483648.0))) {
       break label$11
      }
      $13 = ~~$9;
      break label$10;
     }
     $13 = -2147483648;
    }
    $9 = Math_fround($13 | 0);
   }
   HEAP32[($1 + 200 | 0) >> 2] = 0;
   HEAPF32[($1 + 192 | 0) >> 2] = $10;
   label$12 : {
    label$13 : {
     $10 = Math_fround(Math_fround(HEAPF32[($1 + 168 | 0) >> 2]) + Math_fround(Math_fround(Math_fround($9 - Math_fround(HEAPF32[($1 + 64 | 0) >> 2])) - Math_fround(HEAPF32[($1 + 128 | 0) >> 2])) - $8));
     if (!(Math_fround(Math_abs($10)) < Math_fround(2147483648.0))) {
      break label$13
     }
     $13 = ~~$10;
     break label$12;
    }
    $13 = -2147483648;
   }
   HEAPF32[($1 + 184 | 0) >> 2] = Math_fround($13 | 0);
  }
  label$14 : {
   label$15 : {
    label$16 : {
     if (!($12 & 2 | 0) | $11 | 0) {
      break label$16
     }
     label$17 : {
      if (($7 < $15 ^ -1 | 0) & $20 | 0) {
       break label$17
      }
      $7 = Math_fround($7 - $24);
      $5 = Math_fround(0.0);
      break label$15;
     }
     if (!($16 >= $5)) {
      break label$14
     }
     $7 = Math_fround($16 + $24);
     $5 = Math_fround(1.0);
     break label$15;
    }
    label$18 : {
     if ($12 & 32 | 0) {
      break label$18
     }
     if (!($12 & 8 | 0) | $11 | 0) {
      break label$14
     }
    }
    $5 = Math_fround(0.0);
    if (!$20) {
     break label$15
    }
    $5 = Math_fround(.5);
    label$19 : {
     label$20 : {
      $7 = Math_fround(Math_fround($7 + $16) * Math_fround(.5));
      if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
       break label$20
      }
      $11 = ~~$7;
      break label$19;
     }
     $11 = -2147483648;
    }
    $7 = Math_fround($11 | 0);
   }
   HEAP32[($1 + 204 | 0) >> 2] = 0;
   HEAPF32[($1 + 196 | 0) >> 2] = $5;
   label$21 : {
    label$22 : {
     $5 = Math_fround(Math_fround(HEAPF32[($1 + 172 | 0) >> 2]) + Math_fround(Math_fround(Math_fround($7 - Math_fround(HEAPF32[($1 + 68 | 0) >> 2])) - Math_fround(HEAPF32[($1 + 132 | 0) >> 2])) - $6));
     if (!(Math_fround(Math_abs($5)) < Math_fround(2147483648.0))) {
      break label$22
     }
     $11 = ~~$5;
     break label$21;
    }
    $11 = -2147483648;
   }
   HEAPF32[($1 + 188 | 0) >> 2] = Math_fround($11 | 0);
  }
  CalcNextScrollFromScrollTargetAndClamp_28ImGuiWindow__29($4 + 24 | 0 | 0, $1 | 0);
  $5 = Math_fround(HEAPF32[($1 + 168 | 0) >> 2]);
  $7 = Math_fround(HEAPF32[($4 + 24 | 0) >> 2]);
  $10 = Math_fround(Math_fround(HEAPF32[($4 + 28 | 0) >> 2]) - Math_fround(HEAPF32[($1 + 172 | 0) >> 2]));
  HEAPF32[($0 + 4 | 0) >> 2] = $10;
  $5 = Math_fround($7 - $5);
  HEAPF32[$0 >> 2] = $5;
  label$23 : {
   if ($12 & 64 | 0) {
    break label$23
   }
   if (!((HEAPU8[($1 + 11 | 0) >> 0] | 0) & 1 | 0)) {
    break label$23
   }
   $12 = HEAP32[($1 + 820 | 0) >> 2] | 0;
   $7 = Math_fround(HEAPF32[($2 + 4 | 0) >> 2]);
   $9 = Math_fround(HEAPF32[$2 >> 2]);
   $14 = Math_fround(HEAPF32[($2 + 8 | 0) >> 2]);
   HEAPF32[($4 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($2 + 12 | 0) >> 2]) - $10);
   HEAPF32[($4 + 8 | 0) >> 2] = Math_fround($14 - $5);
   HEAPF32[($4 + 4 | 0) >> 2] = Math_fround($7 - $10);
   HEAPF32[$4 >> 2] = Math_fround($9 - $5);
   $1 = $3 & 20 | 0 ? $3 & -22 | 0 | 1 | 0 : $3;
   ImGui__ScrollToRectEx_28ImGuiWindow__2c_20ImRect_20const__2c_20int_29($4 + 16 | 0 | 0, $12 | 0, $4 | 0, ($1 & 40 | 0 ? $1 & -43 | 0 | 2 | 0 : $1) | 0);
   $7 = Math_fround(HEAPF32[($4 + 16 | 0) >> 2]);
   HEAPF32[($0 + 4 | 0) >> 2] = Math_fround($10 + Math_fround(HEAPF32[($4 + 20 | 0) >> 2]));
   HEAPF32[$0 >> 2] = Math_fround($5 + $7);
  }
  __stack_pointer = $4 + 32 | 0;
 }
 
 function ImGui__PushID_28int_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0;
  label$1 : {
   $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $8 = HEAP32[($1 + 16168 | 0) >> 2] | 0;
   $1 = HEAP32[($1 + 16116 | 0) >> 2] | 0;
   $2 = HEAP32[($1 + 280 | 0) >> 2] | 0;
   $3 = (HEAP32[((($2 << 2 | 0) + (HEAP32[($1 + 288 | 0) >> 2] | 0) | 0) + -4 | 0) >> 2] | 0) ^ -1 | 0;
   $3 = (HEAP32[(((($3 ^ $0 | 0) & 255 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) ^ ($3 >>> 8 | 0) | 0;
   $3 = ($3 >>> 8 | 0) ^ (HEAP32[(((($3 ^ ($0 >>> 8 | 0) | 0) & 255 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
   $3 = ($3 >>> 8 | 0) ^ (HEAP32[(((($3 ^ ($0 >>> 16 | 0) | 0) & 255 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
   $3 = ((HEAP32[(((($3 & 255 | 0) ^ ($0 >>> 24 | 0) | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) ^ ($3 >>> 8 | 0) | 0) ^ -1 | 0;
   if (($8 | 0) != ($3 | 0)) {
    break label$1
   }
   ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($3 | 0, 4 | 0, $0 | 0, 0 | 0);
   $2 = HEAP32[($1 + 280 | 0) >> 2] | 0;
  }
  label$2 : {
   if (($2 | 0) != (HEAP32[($1 + 284 | 0) >> 2] | 0 | 0)) {
    break label$2
   }
   $0 = $2 + 1 | 0;
   label$3 : {
    label$4 : {
     if ($2) {
      break label$4
     }
     $4 = 8;
     break label$3;
    }
    $4 = (($2 | 0) / (2 | 0) | 0) + $2 | 0;
   }
   $0 = ($4 | 0) > ($0 | 0) ? $4 : $0;
   if (($2 | 0) >= ($0 | 0)) {
    break label$2
   }
   $2 = $0 << 2 | 0;
   label$5 : {
    $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$4) {
     break label$5
    }
    $4 = $4 + 184 | 0;
    HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
   }
   $2 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($2, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$6 : {
    $4 = HEAP32[($1 + 288 | 0) >> 2] | 0;
    if (!$4) {
     break label$6
    }
    __memcpy($2 | 0, $4 | 0, (HEAP32[($1 + 280 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
    label$7 : {
     $4 = HEAP32[($1 + 288 | 0) >> 2] | 0;
     if (!$4) {
      break label$7
     }
     $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$5) {
      break label$7
     }
     $5 = $5 + 184 | 0;
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($4, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($1 + 284 | 0) >> 2] = $0;
   HEAP32[($1 + 288 | 0) >> 2] = $2;
   $2 = HEAP32[($1 + 280 | 0) >> 2] | 0;
  }
  HEAP32[((HEAP32[($1 + 288 | 0) >> 2] | 0) + ($2 << 2 | 0) | 0) >> 2] = $3;
  HEAP32[($1 + 280 | 0) >> 2] = (HEAP32[($1 + 280 | 0) >> 2] | 0) + 1 | 0;
 }
 
 function ImGui__PushOverrideID_28unsigned_20int_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $4 = 0, $2 = 0, $3 = 0, $5 = 0;
  $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $2 = HEAP32[($1 + 16116 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($1 + 16168 | 0) >> 2] | 0 | 0) != ($0 | 0)) {
    break label$1
   }
   ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($0 | 0, 13 | 0, 0 | 0, 0 | 0);
  }
  label$2 : {
   $1 = HEAP32[($2 + 280 | 0) >> 2] | 0;
   if (($1 | 0) != (HEAP32[($2 + 284 | 0) >> 2] | 0 | 0)) {
    break label$2
   }
   $3 = $1 + 1 | 0;
   label$3 : {
    label$4 : {
     if ($1) {
      break label$4
     }
     $4 = 8;
     break label$3;
    }
    $4 = (($1 | 0) / (2 | 0) | 0) + $1 | 0;
   }
   $3 = ($4 | 0) > ($3 | 0) ? $4 : $3;
   if (($1 | 0) >= ($3 | 0)) {
    break label$2
   }
   $1 = $3 << 2 | 0;
   label$5 : {
    $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$4) {
     break label$5
    }
    $4 = $4 + 184 | 0;
    HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
   }
   $1 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($1, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$6 : {
    $4 = HEAP32[($2 + 288 | 0) >> 2] | 0;
    if (!$4) {
     break label$6
    }
    __memcpy($1 | 0, $4 | 0, (HEAP32[($2 + 280 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
    label$7 : {
     $4 = HEAP32[($2 + 288 | 0) >> 2] | 0;
     if (!$4) {
      break label$7
     }
     $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$5) {
      break label$7
     }
     $5 = $5 + 184 | 0;
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($4, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($2 + 284 | 0) >> 2] = $3;
   HEAP32[($2 + 288 | 0) >> 2] = $1;
   $1 = HEAP32[($2 + 280 | 0) >> 2] | 0;
  }
  HEAP32[((HEAP32[($2 + 288 | 0) >> 2] | 0) + ($1 << 2 | 0) | 0) >> 2] = $0;
  HEAP32[($2 + 280 | 0) >> 2] = (HEAP32[($2 + 280 | 0) >> 2] | 0) + 1 | 0;
 }
 
 function ImGui__GetIDWithSeed_28char_20const__2c_20char_20const__2c_20unsigned_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $5 = 0, $3 = 0, $6 = 0, $7 = 0;
  $3 = $2 ^ -1 | 0;
  label$1 : {
   label$2 : {
    if (!$1) {
     break label$2
    }
    $4 = $1 - $0 | 0;
    if (!$4) {
     break label$2
    }
    $2 = $3;
    $5 = $0;
    label$3 : while (1) {
     $6 = $5;
     $5 = $5 + 1 | 0;
     $4 = $4 + -1 | 0;
     label$4 : {
      $7 = HEAPU8[$6 >> 0] | 0;
      if (($7 | 0) != (35 | 0)) {
       break label$4
      }
      if ($4 >>> 0 < 2 >>> 0) {
       break label$4
      }
      if ((HEAPU8[$5 >> 0] | 0 | 0) != (35 | 0)) {
       break label$4
      }
      $2 = (HEAPU8[($6 + 2 | 0) >> 0] | 0 | 0) == (35 | 0) ? $3 : $2;
     }
     $2 = ($2 >>> 8 | 0) ^ (HEAP32[(((($2 & 255 | 0) ^ $7 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
     if ($4) {
      continue label$3
     }
     break label$1;
    };
   }
   label$5 : {
    $4 = HEAPU8[$0 >> 0] | 0;
    if ($4) {
     break label$5
    }
    $2 = $3;
    break label$1;
   }
   $2 = $3;
   $5 = $0;
   label$6 : while (1) {
    $6 = $4 & 255 | 0;
    $4 = HEAPU8[($5 + 1 | 0) >> 0] | 0;
    label$7 : {
     if (($6 | 0) != (35 | 0)) {
      break label$7
     }
     if (($4 & 255 | 0 | 0) != (35 | 0)) {
      break label$7
     }
     $2 = (HEAPU8[($5 + 2 | 0) >> 0] | 0 | 0) == (35 | 0) ? $3 : $2;
    }
    $5 = $5 + 1 | 0;
    $2 = ($2 >>> 8 | 0) ^ (HEAP32[(((($2 & 255 | 0) ^ $6 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
    if ($4 & 255 | 0) {
     continue label$6
    }
    break label$6;
   };
  }
  label$8 : {
   $2 = $2 ^ -1 | 0;
   if ((HEAP32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 16168 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
    break label$8
   }
   ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($2 | 0, 11 | 0, $0 | 0, $1 | 0);
  }
  return $2 | 0;
 }
 
 function ImGui__PopID_28_29() {
  var $0 = 0;
  $0 = HEAP32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 16116 | 0) >> 2] | 0;
  HEAP32[($0 + 280 | 0) >> 2] = (HEAP32[($0 + 280 | 0) >> 2] | 0) + -1 | 0;
 }
 
 function ImGui__CalcTypematicRepeatAmount_28float_2c_20float_2c_20float_2c_20float_29($0, $1, $2, $3) {
  $0 = Math_fround($0);
  $1 = Math_fround($1);
  $2 = Math_fround($2);
  $3 = Math_fround($3);
  var $4 = 0, $5 = 0;
  $4 = 1;
  label$1 : {
   if ($1 == Math_fround(0.0)) {
    break label$1
   }
   $4 = 0;
   if ($0 >= $1) {
    break label$1
   }
   label$2 : {
    if (!($3 <= Math_fround(0.0))) {
     break label$2
    }
    return $0 < $2 & $1 >= $2 | 0 | 0;
   }
   $4 = -1;
   $5 = -1;
   label$3 : {
    if ($0 < $2) {
     break label$3
    }
    label$4 : {
     $0 = Math_fround(Math_fround($0 - $2) / $3);
     if (!(Math_fround(Math_abs($0)) < Math_fround(2147483648.0))) {
      break label$4
     }
     $5 = ~~$0;
     break label$3;
    }
    $5 = -2147483648;
   }
   label$5 : {
    if ($1 < $2) {
     break label$5
    }
    label$6 : {
     $1 = Math_fround(Math_fround($1 - $2) / $3);
     if (!(Math_fround(Math_abs($1)) < Math_fround(2147483648.0))) {
      break label$6
     }
     $4 = ~~$1;
     break label$5;
    }
    $4 = -2147483648;
   }
   $4 = $4 - $5 | 0;
  }
  return $4 | 0;
 }
 
 function ImGui__TestKeyOwner_28ImGuiKey_2c_20unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $4 = 0, $3 = 0;
  label$1 : {
   label$2 : {
    $2 = $0 + -512 | 0;
    if ($2 >>> 0 < 140 >>> 0) {
     break label$2
    }
    $3 = 1;
    label$3 : {
     if (($0 | 0) > (8191 | 0)) {
      break label$3
     }
     if (($0 | 0) == (2048 | 0)) {
      break label$2
     }
     if (($0 | 0) == (4096 | 0)) {
      break label$2
     }
     break label$1;
    }
    if (($0 | 0) == (8192 | 0)) {
     break label$2
    }
    if (($0 | 0) == (32768 | 0)) {
     break label$2
    }
    if (($0 | 0) != (16384 | 0)) {
     break label$1
    }
   }
   $3 = 0;
   label$4 : {
    $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!(HEAPU8[($4 + 18240 | 0) >> 0] | 0)) {
     break label$4
    }
    if ($2 >>> 0 > 104 >>> 0) {
     break label$4
    }
    if (!$1) {
     break label$4
    }
    if ((HEAP32[($4 + 16192 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
     break label$1
    }
   }
   label$5 : {
    label$6 : {
     if (!($0 & 63488 | 0)) {
      break label$6
     }
     label$7 : {
      label$8 : {
       if (($0 | 0) > (8191 | 0)) {
        break label$8
       }
       if (($0 | 0) == (2048 | 0)) {
        break label$7
       }
       $2 = 648;
       if (($0 | 0) == (4096 | 0)) {
        break label$5
       }
       break label$6;
      }
      label$9 : {
       if (($0 | 0) == (32768 | 0)) {
        break label$9
       }
       label$10 : {
        if (($0 | 0) == (16384 | 0)) {
         break label$10
        }
        if (($0 | 0) != (8192 | 0)) {
         break label$6
        }
        $2 = 649;
        break label$5;
       }
       $2 = 650;
       break label$5;
      }
      $2 = 651;
      break label$5;
     }
     $2 = HEAPU8[($4 + 105 | 0) >> 0] | 0 ? 651 : 648;
     break label$5;
    }
    $2 = $0;
   }
   $0 = $2 + -512 | 0;
   label$11 : {
    if ($1) {
     break label$11
    }
    return !(HEAPU8[(($4 + Math_imul($0, 12) | 0) + 16260 | 0) >> 0] | 0) | 0;
   }
   label$12 : {
    $0 = $4 + Math_imul($0, 12) | 0;
    $4 = HEAP32[($0 + 16252 | 0) >> 2] | 0;
    if (($4 | 0) == ($1 | 0)) {
     break label$12
    }
    if (HEAPU8[($0 + 16260 | 0) >> 0] | 0) {
     break label$1
    }
    if (($4 | 0) != (-1 | 0)) {
     break label$1
    }
   }
   $3 = 1;
  }
  return $3 | 0;
 }
 
 function ImGui__IsMouseDown_28int_2c_20unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  label$1 : {
   if (!(HEAPU8[(((HEAP32[(0 + 92720 | 0) >> 2] | 0) + $0 | 0) + 3528 | 0) >> 0] | 0)) {
    break label$1
   }
   $2 = ImGui__TestKeyOwner_28ImGuiKey_2c_20unsigned_20int_29($0 + 641 | 0 | 0, $1 | 0) | 0;
  }
  return $2 | 0;
 }
 
 function ImGui__IsMouseClicked_28int_2c_20unsigned_20int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = Math_fround(0), $4 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $3 = 0;
  $3 = 0;
  label$1 : {
   $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   if (!(HEAPU8[(($4 + $0 | 0) + 3528 | 0) >> 0] | 0)) {
    break label$1
   }
   $5 = Math_fround(HEAPF32[(($4 + ($0 << 2 | 0) | 0) + 14128 | 0) >> 2]);
   if ($5 < Math_fround(0.0)) {
    break label$1
   }
   label$2 : {
    if ($5 == Math_fround(0.0)) {
     break label$2
    }
    if (!($2 & 1 | 0)) {
     break label$1
    }
    $6 = Math_fround(HEAPF32[($4 + 52 | 0) >> 2]);
    if (!($5 > $6)) {
     break label$1
    }
    $7 = Math_fround($5 - Math_fround(HEAPF32[($4 + 24 | 0) >> 2]));
    if ($7 >= $5) {
     break label$1
    }
    label$3 : {
     $8 = Math_fround(HEAPF32[($4 + 56 | 0) >> 2]);
     if (!($8 <= Math_fround(0.0))) {
      break label$3
     }
     if (!($5 >= $6)) {
      break label$1
     }
     if ($7 < $6) {
      break label$2
     }
     break label$1;
    }
    $4 = -1;
    $2 = -1;
    label$4 : {
     if ($7 < $6) {
      break label$4
     }
     label$5 : {
      $7 = Math_fround(Math_fround($7 - $6) / $8);
      if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
       break label$5
      }
      $2 = ~~$7;
      break label$4;
     }
     $2 = -2147483648;
    }
    label$6 : {
     if ($5 < $6) {
      break label$6
     }
     label$7 : {
      $5 = Math_fround(Math_fround($5 - $6) / $8);
      if (!(Math_fround(Math_abs($5)) < Math_fround(2147483648.0))) {
       break label$7
      }
      $4 = ~~$5;
      break label$6;
     }
     $4 = -2147483648;
    }
    if (($4 | 0) <= ($2 | 0)) {
     break label$1
    }
   }
   $3 = ImGui__TestKeyOwner_28ImGuiKey_2c_20unsigned_20int_29($0 + 641 | 0 | 0, $1 | 0) | 0;
  }
  return $3 | 0;
 }
 
 function ImGui__IsMouseReleased_28int_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = 0;
  label$1 : {
   $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   if (!(HEAPU8[(($2 + $0 | 0) + 14110 | 0) >> 0] | 0)) {
    break label$1
   }
   label$2 : {
    if (($0 + 129 | 0) >>> 0 < 140 >>> 0) {
     break label$2
    }
    $1 = 1;
    label$3 : {
     if (($0 | 0) > (7550 | 0)) {
      break label$3
     }
     if (($0 | 0) == (1407 | 0)) {
      break label$2
     }
     if (($0 | 0) == (3455 | 0)) {
      break label$2
     }
     break label$1;
    }
    if (($0 | 0) == (7551 | 0)) {
     break label$2
    }
    if (($0 | 0) == (32127 | 0)) {
     break label$2
    }
    if (($0 | 0) != (15743 | 0)) {
     break label$1
    }
   }
   label$4 : {
    label$5 : {
     $3 = $0 + 641 | 0;
     if (!($3 & 63488 | 0)) {
      break label$5
     }
     label$6 : {
      label$7 : {
       if (($0 | 0) > (7550 | 0)) {
        break label$7
       }
       if (($0 | 0) == (1407 | 0)) {
        break label$6
       }
       $1 = 648;
       if (($0 | 0) == (3455 | 0)) {
        break label$4
       }
       break label$5;
      }
      label$8 : {
       if (($0 | 0) == (32127 | 0)) {
        break label$8
       }
       label$9 : {
        if (($0 | 0) == (15743 | 0)) {
         break label$9
        }
        if (($0 | 0) != (7551 | 0)) {
         break label$5
        }
        $1 = 649;
        break label$4;
       }
       $1 = 650;
       break label$4;
      }
      $1 = 651;
      break label$4;
     }
     $1 = HEAPU8[($2 + 105 | 0) >> 0] | 0 ? 651 : 648;
     break label$4;
    }
    $1 = $3;
   }
   $1 = !(HEAPU8[((Math_imul($1, 12) + $2 | 0) + 10116 | 0) >> 0] | 0);
  }
  return $1 | 0;
 }
 
 function ImGui__IsMouseReleased_28int_2c_20unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  label$1 : {
   if (!(HEAPU8[(((HEAP32[(0 + 92720 | 0) >> 2] | 0) + $0 | 0) + 14110 | 0) >> 0] | 0)) {
    break label$1
   }
   $2 = ImGui__TestKeyOwner_28ImGuiKey_2c_20unsigned_20int_29($0 + 641 | 0 | 0, $1 | 0) | 0;
  }
  return $2 | 0;
 }
 
 function ImGui__SetMouseCursor_28int_29($0) {
  $0 = $0 | 0;
  HEAP32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 19036 | 0) >> 2] = $0;
 }
 
 function ImGui__PopItemWidth_28_29() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = Math_fround(0);
  $0 = HEAP32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 16116 | 0) >> 2] | 0;
  HEAP8[($0 + 221 | 0) >> 0] = 1;
  $1 = $0 + 476 | 0;
  $2 = (HEAP32[$1 >> 2] | 0) + -1 | 0;
  $3 = Math_fround(HEAPF32[((HEAP32[($0 + 484 | 0) >> 2] | 0) + ($2 << 2 | 0) | 0) >> 2]);
  HEAP32[$1 >> 2] = $2;
  HEAPF32[($0 + 468 | 0) >> 2] = $3;
 }
 
 function ImGui__CalcItemWidth_28_29() {
  var $0 = 0, $1 = 0, $2 = Math_fround(0);
  label$1 : {
   $0 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $1 = HEAP32[($0 + 16116 | 0) >> 2] | 0;
   $2 = Math_fround(HEAPF32[((HEAPU8[($0 + 18260 | 0) >> 0] | 0) & 1 | 0 ? $0 + 18264 | 0 : $1 + 468 | 0) >> 2]);
   if (!($2 < Math_fround(0.0))) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (HEAP32[($1 + 452 | 0) >> 2] | 0) {
      break label$3
     }
     if (HEAP32[($0 + 19200 | 0) >> 2] | 0) {
      break label$3
     }
     $0 = $1 + 604 | 0;
     break label$2;
    }
    $0 = $1 + 556 | 0;
   }
   $2 = Math_fround(Math_max(Math_fround($2 + Math_fround(Math_fround(HEAPF32[$0 >> 2]) - Math_fround(HEAPF32[($1 + 292 | 0) >> 2]))), Math_fround(1.0)));
  }
  label$4 : {
   if (!(Math_fround(Math_abs($2)) < Math_fround(2147483648.0))) {
    break label$4
   }
   return Math_fround(Math_fround(~~$2 | 0));
  }
  return Math_fround(Math_fround(-2147483648 | 0));
 }
 
 function ImGui__GetTextLineHeight_28_29() {
  return Math_fround(Math_fround(HEAPF32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 15488 | 0) >> 2]));
 }
 
 function ImGui__GetFrameHeight_28_29() {
  var $0 = 0, $1 = Math_fround(0);
  $0 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $1 = Math_fround(HEAPF32[($0 + 14460 | 0) >> 2]);
  return Math_fround(Math_fround(Math_fround($1 + $1) + Math_fround(HEAPF32[($0 + 15488 | 0) >> 2])));
 }
 
 function ImGui__OpenPopup_28char_20const__2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $2 = 0, $5 = 0, $7 = 0, $3 = 0, $6 = 0, $8 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $4 = HEAP32[($3 + 16116 | 0) >> 2] | 0;
  $4 = HEAP32[((((HEAP32[($4 + 280 | 0) >> 2] | 0) << 2 | 0) + (HEAP32[($4 + 288 | 0) >> 2] | 0) | 0) + -4 | 0) >> 2] | 0;
  label$1 : {
   $5 = HEAPU8[$0 >> 0] | 0;
   if (!$5) {
    break label$1
   }
   $6 = $4 ^ -1 | 0;
   $4 = $6;
   $7 = $0;
   label$2 : while (1) {
    $8 = $5 & 255 | 0;
    $5 = HEAPU8[($7 + 1 | 0) >> 0] | 0;
    label$3 : {
     if (($8 | 0) != (35 | 0)) {
      break label$3
     }
     if (($5 & 255 | 0 | 0) != (35 | 0)) {
      break label$3
     }
     $4 = (HEAPU8[($7 + 2 | 0) >> 0] | 0 | 0) == (35 | 0) ? $6 : $4;
    }
    $7 = $7 + 1 | 0;
    $4 = ($4 >>> 8 | 0) ^ (HEAP32[(((($4 & 255 | 0) ^ $8 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
    if ($5 & 255 | 0) {
     continue label$2
    }
    break label$2;
   };
   $4 = $4 ^ -1 | 0;
  }
  label$4 : {
   if ((HEAP32[($3 + 16168 | 0) >> 2] | 0 | 0) != ($4 | 0)) {
    break label$4
   }
   ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($4 | 0, 11 | 0, $0 | 0, 0 | 0);
  }
  label$5 : {
   if (!((HEAPU8[($3 + 23536 | 0) >> 0] | 0) & 4 | 0)) {
    break label$5
   }
   HEAP32[($2 + 4 | 0) >> 2] = $4;
   HEAP32[$2 >> 2] = $0;
   ImGui__DebugLog_28char_20const__2c_20____29(69461 | 0, $2 | 0);
  }
  ImGui__OpenPopupEx_28unsigned_20int_2c_20int_29($4 | 0, $1 | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function ImGui__OpenPopupEx_28unsigned_20int_2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $3 = 0, $5 = 0, $10 = 0, i64toi32_i32$0 = 0, $11 = 0, $2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $8 = 0, $6 = 0, $7 = 0, $8$hi = 0, $9 = 0, $9$hi = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $4 = HEAP32[($3 + 18560 | 0) >> 2] | 0;
  $5 = HEAP32[($3 + 16116 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!($1 & 32 | 0)) {
     break label$2
    }
    if ((HEAP32[($3 + 18548 | 0) >> 2] | 0 | 0) > ($4 | 0)) {
     break label$1
    }
   }
   $6 = HEAP32[((((HEAP32[($5 + 280 | 0) >> 2] | 0) << 2 | 0) + (HEAP32[($5 + 288 | 0) >> 2] | 0) | 0) + -4 | 0) >> 2] | 0;
   $1 = HEAP32[($3 + 16016 | 0) >> 2] | 0;
   $7 = HEAP32[($3 + 18648 | 0) >> 2] | 0;
   ImGui__NavCalcPreferredRefPos_28_29($2 + 16 | 0 | 0);
   i64toi32_i32$2 = $2;
   i64toi32_i32$0 = HEAP32[($2 + 16 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($2 + 20 | 0) >> 2] | 0;
   $8 = i64toi32_i32$0;
   $8$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $2;
   HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = $8;
   HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] = i64toi32_i32$1;
   $5 = $3 + 3520 | 0;
   i64toi32_i32$2 = (wasm2js_i32$0 = Math_fround(HEAPF32[($3 + 3524 | 0) >> 2]) >= Math_fround(-256.0e3) ? $5 : i64toi32_i32$0 + 24 | 0, wasm2js_i32$1 = i64toi32_i32$0 + 24 | 0, wasm2js_i32$2 = Math_fround(HEAPF32[$5 >> 2]) >= Math_fround(-256.0e3), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $9 = i64toi32_i32$1;
   $9$hi = i64toi32_i32$0;
   label$3 : {
    if (!((HEAPU8[($3 + 23536 | 0) >> 0] | 0) & 4 | 0)) {
     break label$3
    }
    HEAP32[$2 >> 2] = $0;
    ImGui__DebugLog_28char_20const__2c_20____29(69636 | 0, $2 | 0);
   }
   label$4 : {
    $5 = HEAP32[($3 + 18548 | 0) >> 2] | 0;
    if (($5 | 0) > ($4 | 0)) {
     break label$4
    }
    label$5 : {
     if (($5 | 0) != (HEAP32[($3 + 18552 | 0) >> 2] | 0 | 0)) {
      break label$5
     }
     $4 = $5 + 1 | 0;
     label$6 : {
      label$7 : {
       if ($5) {
        break label$7
       }
       $10 = 8;
       break label$6;
      }
      $10 = (($5 | 0) / (2 | 0) | 0) + $5 | 0;
     }
     $4 = ($10 | 0) > ($4 | 0) ? $10 : $4;
     if (($5 | 0) >= ($4 | 0)) {
      break label$5
     }
     $5 = Math_imul($4, 40);
     label$8 : {
      $10 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$10) {
       break label$8
      }
      $10 = $10 + 184 | 0;
      HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 1 | 0;
     }
     $5 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($5, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
     label$9 : {
      $10 = HEAP32[($3 + 18556 | 0) >> 2] | 0;
      if (!$10) {
       break label$9
      }
      __memcpy($5 | 0, $10 | 0, Math_imul(HEAP32[($3 + 18548 | 0) >> 2] | 0, 40) | 0) | 0;
      label$10 : {
       $10 = HEAP32[($3 + 18556 | 0) >> 2] | 0;
       if (!$10) {
        break label$10
       }
       $11 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
       if (!$11) {
        break label$10
       }
       $11 = $11 + 184 | 0;
       HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + -1 | 0;
      }
      FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($10, HEAP32[(0 + 92728 | 0) >> 2] | 0);
     }
     HEAP32[($3 + 18552 | 0) >> 2] = $4;
     HEAP32[($3 + 18556 | 0) >> 2] = $5;
     $5 = HEAP32[($3 + 18548 | 0) >> 2] | 0;
    }
    $4 = (HEAP32[($3 + 18556 | 0) >> 2] | 0) + Math_imul($5, 40) | 0;
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$1 = $4;
    HEAP32[($4 + 32 | 0) >> 2] = $9;
    HEAP32[($4 + 36 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $8$hi;
    i64toi32_i32$1 = $4;
    HEAP32[($4 + 24 | 0) >> 2] = $8;
    HEAP32[($4 + 28 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($4 + 20 | 0) >> 2] = $6;
    HEAP32[($4 + 16 | 0) >> 2] = $1;
    HEAP32[($4 + 12 | 0) >> 2] = -1;
    HEAP32[($4 + 8 | 0) >> 2] = $7;
    HEAP32[($4 + 4 | 0) >> 2] = 0;
    HEAP32[$4 >> 2] = $0;
    HEAP32[($3 + 18548 | 0) >> 2] = (HEAP32[($3 + 18548 | 0) >> 2] | 0) + 1 | 0;
    break label$1;
   }
   label$11 : {
    $5 = (HEAP32[($3 + 18556 | 0) >> 2] | 0) + Math_imul($4, 40) | 0;
    if ((HEAP32[$5 >> 2] | 0 | 0) != ($0 | 0)) {
     break label$11
    }
    if ((HEAP32[($5 + 16 | 0) >> 2] | 0 | 0) != ((HEAP32[($3 + 16016 | 0) >> 2] | 0) + -1 | 0 | 0)) {
     break label$11
    }
    HEAP32[($5 + 16 | 0) >> 2] = $1;
    break label$1;
   }
   ImGui__ClosePopupToLevel_28int_2c_20bool_29($4 | 0, 0 | 0);
   label$12 : {
    $4 = HEAP32[($3 + 18548 | 0) >> 2] | 0;
    if (($4 | 0) != (HEAP32[($3 + 18552 | 0) >> 2] | 0 | 0)) {
     break label$12
    }
    $5 = $4 + 1 | 0;
    label$13 : {
     label$14 : {
      if ($4) {
       break label$14
      }
      $10 = 8;
      break label$13;
     }
     $10 = (($4 | 0) / (2 | 0) | 0) + $4 | 0;
    }
    $5 = ($10 | 0) > ($5 | 0) ? $10 : $5;
    if (($4 | 0) >= ($5 | 0)) {
     break label$12
    }
    $4 = Math_imul($5, 40);
    label$15 : {
     $10 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$10) {
      break label$15
     }
     $10 = $10 + 184 | 0;
     HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 1 | 0;
    }
    $4 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($4, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
    label$16 : {
     $10 = HEAP32[($3 + 18556 | 0) >> 2] | 0;
     if (!$10) {
      break label$16
     }
     __memcpy($4 | 0, $10 | 0, Math_imul(HEAP32[($3 + 18548 | 0) >> 2] | 0, 40) | 0) | 0;
     label$17 : {
      $10 = HEAP32[($3 + 18556 | 0) >> 2] | 0;
      if (!$10) {
       break label$17
      }
      $11 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$11) {
       break label$17
      }
      $11 = $11 + 184 | 0;
      HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + -1 | 0;
     }
     FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($10, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    }
    HEAP32[($3 + 18552 | 0) >> 2] = $5;
    HEAP32[($3 + 18556 | 0) >> 2] = $4;
    $4 = HEAP32[($3 + 18548 | 0) >> 2] | 0;
   }
   $4 = (HEAP32[($3 + 18556 | 0) >> 2] | 0) + Math_imul($4, 40) | 0;
   i64toi32_i32$0 = $9$hi;
   i64toi32_i32$1 = $4;
   HEAP32[($4 + 32 | 0) >> 2] = $9;
   HEAP32[($4 + 36 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $8$hi;
   i64toi32_i32$1 = $4;
   HEAP32[($4 + 24 | 0) >> 2] = $8;
   HEAP32[($4 + 28 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($4 + 20 | 0) >> 2] = $6;
   HEAP32[($4 + 16 | 0) >> 2] = $1;
   HEAP32[($4 + 12 | 0) >> 2] = -1;
   HEAP32[($4 + 8 | 0) >> 2] = $7;
   HEAP32[($4 + 4 | 0) >> 2] = 0;
   HEAP32[$4 >> 2] = $0;
   HEAP32[($3 + 18548 | 0) >> 2] = (HEAP32[($3 + 18548 | 0) >> 2] | 0) + 1 | 0;
  }
  __stack_pointer = $2 + 32 | 0;
 }
 
 function ImGui__CloseCurrentPopup_28_29() {
  var $2 = 0, $1 = 0, $0 = 0, $5 = 0, $6 = 0, $3 = 0, $4 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  label$1 : {
   $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $2 = HEAP32[($1 + 18560 | 0) >> 2] | 0;
   if (($2 | 0) < (1 | 0)) {
    break label$1
   }
   if (($2 | 0) > (HEAP32[($1 + 18548 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $3 = $2 + -1 | 0;
   $2 = Math_imul($3, 40);
   $4 = HEAP32[($1 + 18556 | 0) >> 2] | 0;
   if ((HEAP32[((HEAP32[($1 + 18568 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0 | 0) != (HEAP32[($4 + $2 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $5 = $3;
   label$2 : {
    label$3 : while (1) {
     label$4 : {
      $2 = $5;
      if (($2 | 0) >= (1 | 0)) {
       break label$4
      }
      $2 = 0;
      break label$2;
     }
     $6 = $4 + Math_imul($2, 40) | 0;
     $5 = HEAP32[($6 + 4 | 0) >> 2] | 0;
     if (!$5) {
      break label$2
     }
     if (!((HEAPU8[($5 + 11 | 0) >> 0] | 0) & 16 | 0)) {
      break label$2
     }
     $6 = HEAP32[($6 + -36 | 0) >> 2] | 0;
     if (!$6) {
      break label$2
     }
     $5 = $2 + -1 | 0;
     if (!((HEAPU8[($6 + 9 | 0) >> 0] | 0) & 4 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   label$5 : {
    if (!((HEAPU8[($1 + 23536 | 0) >> 0] | 0) & 4 | 0)) {
     break label$5
    }
    HEAP32[($0 + 4 | 0) >> 2] = $2;
    HEAP32[$0 >> 2] = $3;
    ImGui__DebugLog_28char_20const__2c_20____29(68969 | 0, $0 | 0);
   }
   ImGui__ClosePopupToLevel_28int_2c_20bool_29($2 | 0, 1 | 0);
   $2 = HEAP32[($1 + 18648 | 0) >> 2] | 0;
   if (!$2) {
    break label$1
   }
   HEAP8[($2 + 388 | 0) >> 0] = 1;
  }
  __stack_pointer = $0 + 16 | 0;
 }
 
 function ImGui__BeginPopupEx_28unsigned_20int_2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $2 = 0, $3 = 0, $5 = 0;
  $2 = __stack_pointer - 64 | 0;
  __stack_pointer = $2;
  $3 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     $5 = HEAP32[($4 + 18560 | 0) >> 2] | 0;
     if ((HEAP32[($4 + 18548 | 0) >> 2] | 0 | 0) <= ($5 | 0)) {
      break label$3
     }
     if ((HEAP32[((HEAP32[($4 + 18556 | 0) >> 2] | 0) + Math_imul($5, 40) | 0) >> 2] | 0 | 0) == ($0 | 0)) {
      break label$2
     }
    }
    HEAP32[($4 + 18340 | 0) >> 2] = 0;
    break label$1;
   }
   label$4 : {
    label$5 : {
     if (!($1 & 268435456 | 0)) {
      break label$5
     }
     HEAP32[($2 + 16 | 0) >> 2] = HEAP32[($4 + 18572 | 0) >> 2] | 0;
     ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($2 + 32 | 0 | 0, 20 | 0, 67138 | 0, $2 + 16 | 0 | 0) | 0;
     break label$4;
    }
    HEAP32[$2 >> 2] = $0;
    ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($2 + 32 | 0 | 0, 20 | 0, 65586 | 0, $2 | 0) | 0;
   }
   $3 = ImGui__Begin_28char_20const__2c_20bool__2c_20int_29($2 + 32 | 0 | 0, 0 | 0, $1 | 69206016 | 0 | 0) | 0;
   if ($3) {
    break label$1
   }
   label$6 : {
    $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    $0 = HEAP32[($4 + 16116 | 0) >> 2] | 0;
    if ((HEAP32[($4 + 18648 | 0) >> 2] | 0 | 0) != ($0 | 0)) {
     break label$6
    }
    if (!(HEAPU8[($4 + 18737 | 0) >> 0] | 0)) {
     break label$6
    }
    if (HEAP32[($4 + 18704 | 0) >> 2] | 0) {
     break label$6
    }
    HEAP32[($4 + 18740 | 0) >> 2] = HEAP32[($4 + 18740 | 0) >> 2] | 0 | 2 | 0;
   }
   label$7 : {
    if (!((HEAPU8[($0 + 11 | 0) >> 0] | 0) & 1 | 0)) {
     break label$7
    }
    HEAP8[($4 + 16034 | 0) >> 0] = 1;
   }
   ImGui__End_28_29();
   HEAP8[($4 + 16034 | 0) >> 0] = 0;
  }
  __stack_pointer = $2 + 64 | 0;
  return $3 | 0;
 }
 
 function ImGui__EndPopup_28_29() {
  var $0 = 0, $1 = 0;
  label$1 : {
   $0 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $1 = HEAP32[($0 + 16116 | 0) >> 2] | 0;
   if ((HEAP32[($0 + 18648 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
    break label$1
   }
   if (!(HEAPU8[($0 + 18737 | 0) >> 0] | 0)) {
    break label$1
   }
   if (HEAP32[($0 + 18704 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[($0 + 18740 | 0) >> 2] = HEAP32[($0 + 18740 | 0) >> 2] | 0 | 2 | 0;
  }
  label$2 : {
   if (!((HEAPU8[($1 + 11 | 0) >> 0] | 0) & 1 | 0)) {
    break label$2
   }
   HEAP8[($0 + 16034 | 0) >> 0] = 1;
  }
  ImGui__End_28_29();
  HEAP8[($0 + 16034 | 0) >> 0] = 0;
 }
 
 function ImGui__GetPopupAllowedExtentRect_28ImGuiWindow__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $9 = Math_fround(0), $10 = Math_fround(0), i64toi32_i32$0 = 0, $5 = Math_fround(0), i64toi32_i32$4 = 0, $7 = Math_fround(0), $2 = 0, i64toi32_i32$1 = 0, $6 = Math_fround(0), $8 = Math_fround(0), $3 = 0, i64toi32_i32$3 = 0, $16 = 0, $33 = Math_fround(0), i64toi32_i32$2 = 0;
  $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $3 = HEAP32[($1 + 60 | 0) >> 2] | 0;
    if (($3 | 0) < (0 | 0)) {
     break label$2
    }
    $1 = (HEAP32[($2 + 14356 | 0) >> 2] | 0) + Math_imul($3, 36) | 0;
    i64toi32_i32$0 = HEAP32[($1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1 + 20 | 0) >> 2] | 0;
    $5 = (wasm2js_scratch_store_i32(2, i64toi32_i32$0), wasm2js_scratch_load_f32());
    $6 = Math_fround(Math_fround(HEAPF32[($1 + 24 | 0) >> 2]) + $5);
    $33 = Math_fround(HEAPF32[($1 + 28 | 0) >> 2]);
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $16 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $16 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $7 = (wasm2js_scratch_store_i32(2, $16), wasm2js_scratch_load_f32());
    $8 = Math_fround($33 + $7);
    break label$1;
   }
   $1 = HEAP32[($1 + 44 | 0) >> 2] | 0;
   $7 = Math_fround(HEAPF32[($1 + 12 | 0) >> 2]);
   $8 = Math_fround($7 + Math_fround(HEAPF32[($1 + 20 | 0) >> 2]));
   $5 = Math_fround(HEAPF32[($1 + 8 | 0) >> 2]);
   $6 = Math_fround($5 + Math_fround(HEAPF32[($1 + 16 | 0) >> 2]));
  }
  $9 = Math_fround(HEAPF32[($2 + 14572 | 0) >> 2]);
  $10 = Math_fround(HEAPF32[($2 + 14576 | 0) >> 2]);
  $10 = Math_fround($8 - $7) > Math_fround($10 + $10) ? Math_fround(-$10) : Math_fround(0.0);
  HEAPF32[($0 + 12 | 0) >> 2] = Math_fround($8 + $10);
  $9 = Math_fround($6 - $5) > Math_fround($9 + $9) ? Math_fround(-$9) : Math_fround(0.0);
  HEAPF32[($0 + 8 | 0) >> 2] = Math_fround($6 + $9);
  HEAPF32[($0 + 4 | 0) >> 2] = Math_fround($7 - $10);
  HEAPF32[$0 >> 2] = Math_fround($5 - $9);
 }
 
 function ImGui__SetNavID_28unsigned_20int_2c_20ImGuiNavLayer_2c_20unsigned_20int_2c_20ImRect_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $28 = 0, $32 = 0;
  $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  HEAP32[($4 + 18704 | 0) >> 2] = $1;
  HEAP32[($4 + 18652 | 0) >> 2] = $0;
  HEAP32[($4 + 18656 | 0) >> 2] = $2;
  $4 = HEAP32[($4 + 18648 | 0) >> 2] | 0;
  HEAP32[(($4 + ($1 << 2 | 0) | 0) + 852 | 0) >> 2] = $0;
  $1 = $4 + ($1 << 4 | 0) | 0;
  i64toi32_i32$2 = $3 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $28 = i64toi32_i32$0;
  i64toi32_i32$0 = $1 + 868 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $28;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $32 = i64toi32_i32$1;
  i64toi32_i32$1 = $1 + 860 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $32;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function ImGui__SetFocusID_28unsigned_20int_2c_20ImGuiWindow__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $4 = 0, $2 = 0, $5 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0);
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  label$1 : {
   $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   if ((HEAP32[($3 + 18648 | 0) >> 2] | 0 | 0) == ($1 | 0)) {
    break label$1
   }
   $4 = $3;
   label$2 : {
    if (!((HEAPU8[($3 + 23536 | 0) >> 0] | 0) & 2 | 0)) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($1) {
       break label$4
      }
      $4 = 67676;
      break label$3;
     }
     $4 = HEAP32[$1 >> 2] | 0;
    }
    HEAP32[$2 >> 2] = $4;
    ImGui__DebugLog_28char_20const__2c_20____29(69806 | 0, $2 | 0);
    $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   }
   HEAP32[($3 + 18648 | 0) >> 2] = $1;
   HEAP16[($3 + 18736 | 0) >> 1] = 0;
   HEAP8[($3 + 18713 | 0) >> 0] = 0;
   $5 = 1;
   label$5 : {
    if (HEAPU8[($4 + 18737 | 0) >> 0] | 0) {
     break label$5
    }
    $5 = (HEAPU8[($4 + 18713 | 0) >> 0] | 0 | 0) != (0 | 0);
   }
   HEAP8[($4 + 18712 | 0) >> 0] = $5;
  }
  $4 = HEAP32[($1 + 380 | 0) >> 2] | 0;
  HEAP32[($3 + 18704 | 0) >> 2] = $4;
  HEAP32[($3 + 18652 | 0) >> 2] = $0;
  HEAP32[($3 + 18656 | 0) >> 2] = HEAP32[($3 + 18248 | 0) >> 2] | 0;
  HEAP32[(($1 + ($4 << 2 | 0) | 0) + 852 | 0) >> 2] = $0;
  label$6 : {
   if ((HEAP32[($3 + 18280 | 0) >> 2] | 0 | 0) != ($0 | 0)) {
    break label$6
   }
   $6 = Math_fround(HEAPF32[($3 + 18308 | 0) >> 2]);
   $7 = Math_fround(HEAPF32[($3 + 18312 | 0) >> 2]);
   $8 = Math_fround(HEAPF32[($3 + 18316 | 0) >> 2]);
   $9 = Math_fround(HEAPF32[($1 + 308 | 0) >> 2]);
   $0 = $1 + ($4 << 4 | 0) | 0;
   $10 = Math_fround(HEAPF32[($1 + 312 | 0) >> 2]);
   HEAPF32[($0 + 872 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3 + 18320 | 0) >> 2]) - $10);
   HEAPF32[($0 + 868 | 0) >> 2] = Math_fround($8 - $9);
   HEAPF32[($0 + 864 | 0) >> 2] = Math_fround($7 - $10);
   HEAPF32[($0 + 860 | 0) >> 2] = Math_fround($6 - $9);
  }
  label$7 : {
   label$8 : {
    if ((HEAP32[($3 + 16224 | 0) >> 2] | 0 | 0) != (5 | 0)) {
     break label$8
    }
    HEAP8[($3 + 18711 | 0) >> 0] = 1;
    break label$7;
   }
   HEAP8[($3 + 18710 | 0) >> 0] = 1;
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function ImGui__LogSetNextTextDecoration_28char_20const__2c_20char_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  HEAP32[($2 + 23512 | 0) >> 2] = $1;
  HEAP32[($2 + 23508 | 0) >> 2] = $0;
 }
 
 function ImGui__MarkIniSettingsDirty_28_29() {
  var $0 = 0;
  label$1 : {
   $0 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   if (!(Math_fround(HEAPF32[($0 + 23384 | 0) >> 2]) <= Math_fround(0.0))) {
    break label$1
   }
   HEAPF32[($0 + 23384 | 0) >> 2] = Math_fround(HEAPF32[($0 + 28 | 0) >> 2]);
  }
 }
 
 function ImPool_ImGuiDockContextPruneNodeData___Reserve_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $4 = 0, $2 = 0;
  label$1 : {
   if ((HEAP32[($0 + 4 | 0) >> 2] | 0 | 0) >= ($1 | 0)) {
    break label$1
   }
   $2 = $1 << 4 | 0;
   label$2 : {
    $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$3) {
     break label$2
    }
    $3 = $3 + 184 | 0;
    HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1 | 0;
   }
   $2 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($2, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$3 : {
    $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    if (!$3) {
     break label$3
    }
    __memcpy($2 | 0, $3 | 0, (HEAP32[$0 >> 2] | 0) << 4 | 0 | 0) | 0;
    label$4 : {
     $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     if (!$3) {
      break label$4
     }
     $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$4) {
      break label$4
     }
     $4 = $4 + 184 | 0;
     HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($3, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($0 + 4 | 0) >> 2] = $1;
   HEAP32[($0 + 8 | 0) >> 2] = $2;
  }
  label$5 : {
   if ((HEAP32[($0 + 16 | 0) >> 2] | 0 | 0) >= ($1 | 0)) {
    break label$5
   }
   $2 = $1 << 3 | 0;
   label$6 : {
    $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$3) {
     break label$6
    }
    $3 = $3 + 184 | 0;
    HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1 | 0;
   }
   $2 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($2, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$7 : {
    $3 = HEAP32[($0 + 20 | 0) >> 2] | 0;
    if (!$3) {
     break label$7
    }
    __memcpy($2 | 0, $3 | 0, (HEAP32[($0 + 12 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
    label$8 : {
     $3 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     if (!$3) {
      break label$8
     }
     $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$4) {
      break label$8
     }
     $4 = $4 + 184 | 0;
     HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($3, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($0 + 16 | 0) >> 2] = $1;
   HEAP32[($0 + 20 | 0) >> 2] = $2;
  }
 }
 
 function ImGui__DockContextBuildNodesFromSettings_28ImGuiContext__2c_20ImGuiDockNodeSettings__2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $7 = 0, $13 = 0, $8 = 0, $6 = 0, $15 = 0, $14 = 0, $9 = 0, $3 = 0, $10 = 0, $5 = 0, $11 = 0, $12 = 0, $4 = 0, $53 = 0, $219 = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  label$1 : {
   if (($2 | 0) < (1 | 0)) {
    break label$1
   }
   $4 = $0 + 23348 | 0;
   $5 = 0;
   label$2 : while (1) {
    label$3 : {
     $6 = $1 + Math_imul($5, 36) | 0;
     $7 = HEAP32[$6 >> 2] | 0;
     if (!$7) {
      break label$3
     }
     $8 = ImGui__DockContextAddNode_28ImGuiContext__2c_20unsigned_20int_29($0 | 0, $7 | 0) | 0;
     $9 = 0;
     label$4 : {
      $10 = HEAP32[($6 + 4 | 0) >> 2] | 0;
      if (!$10) {
       break label$4
      }
      $11 = HEAP32[$4 >> 2] | 0;
      $7 = $11;
      $12 = HEAP32[($0 + 23340 | 0) >> 2] | 0;
      $13 = $12;
      label$5 : {
       if (!$13) {
        break label$5
       }
       label$6 : while (1) {
        $14 = $13 >>> 1 | 0;
        $15 = $7 + ($14 << 3 | 0) | 0;
        $53 = $15 + 8 | 0;
        $15 = (HEAP32[$15 >> 2] | 0) >>> 0 < $10 >>> 0;
        $7 = $15 ? $53 : $7;
        $13 = $15 ? $13 + ($14 ^ -1 | 0) | 0 : $14;
        if ($13) {
         continue label$6
        }
        break label$6;
       };
      }
      if (($7 | 0) == ($11 + ($12 << 3 | 0) | 0 | 0)) {
       break label$4
      }
      if ((HEAP32[$7 >> 2] | 0 | 0) != ($10 | 0)) {
       break label$4
      }
      $9 = HEAP32[($7 + 4 | 0) >> 2] | 0;
     }
     HEAP32[($8 + 24 | 0) >> 2] = $9;
     $7 = HEAP16[($6 + 26 | 0) >> 1] | 0;
     HEAPF32[($8 + 52 | 0) >> 2] = Math_fround(HEAP16[($6 + 24 | 0) >> 1] | 0 | 0);
     HEAPF32[($8 + 56 | 0) >> 2] = Math_fround($7 | 0);
     $7 = HEAP16[($6 + 28 | 0) >> 1] | 0;
     HEAPF32[($8 + 64 | 0) >> 2] = Math_fround(HEAP16[($6 + 30 | 0) >> 1] | 0 | 0);
     HEAPF32[($8 + 60 | 0) >> 2] = Math_fround($7 | 0);
     $7 = HEAP16[($6 + 32 | 0) >> 1] | 0;
     $13 = HEAP16[($6 + 34 | 0) >> 1] | 0;
     HEAP16[($8 + 156 | 0) >> 1] = (HEAPU16[($8 + 156 | 0) >> 1] | 0) & 65024 | 0 | 73 | 0;
     HEAPF32[($8 + 72 | 0) >> 2] = Math_fround($13 | 0);
     HEAPF32[($8 + 68 | 0) >> 2] = Math_fround($7 | 0);
     label$7 : {
      if (!$9) {
       break label$7
      }
      label$8 : {
       label$9 : {
        if (HEAP32[($9 + 28 | 0) >> 2] | 0) {
         break label$9
        }
        $7 = $9 + 28 | 0;
        break label$8;
       }
       $7 = $9 + 32 | 0;
       if (HEAP32[$7 >> 2] | 0) {
        break label$7
       }
      }
      HEAP32[$7 >> 2] = $8;
     }
     HEAP32[($8 + 148 | 0) >> 2] = HEAP32[($6 + 12 | 0) >> 2] | 0;
     HEAP32[($8 + 76 | 0) >> 2] = HEAP8[($6 + 16 | 0) >> 0] | 0;
     $7 = (HEAP32[($6 + 20 | 0) >> 2] | 0) & 12712992 | 0;
     HEAP32[($8 + 8 | 0) >> 2] = $7;
     HEAP32[($8 + 16 | 0) >> 2] = HEAP32[($8 + 4 | 0) >> 2] | 0 | (HEAP32[($8 + 12 | 0) >> 2] | 0) | 0 | $7 | 0;
     $7 = $8;
     label$10 : while (1) {
      $13 = $7;
      $7 = HEAP32[($7 + 24 | 0) >> 2] | 0;
      if ($7) {
       continue label$10
      }
      break label$10;
     };
     HEAP32[$3 >> 2] = HEAP32[$13 >> 2] | 0;
     ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($3 + 16 | 0 | 0, 20 | 0, 67524 | 0, $3 | 0) | 0;
     label$11 : {
      label$12 : {
       $13 = HEAPU8[($3 + 16 | 0) >> 0] | 0;
       if (!$13) {
        break label$12
       }
       $14 = $3 + 16 | 0;
       $7 = -1;
       label$13 : while (1) {
        $15 = $13 & 255 | 0;
        $13 = HEAPU8[($14 + 1 | 0) >> 0] | 0;
        label$14 : {
         if (($15 | 0) != (35 | 0)) {
          break label$14
         }
         if (($13 & 255 | 0 | 0) != (35 | 0)) {
          break label$14
         }
         $7 = (HEAPU8[($14 + 2 | 0) >> 0] | 0 | 0) == (35 | 0) ? -1 : $7;
        }
        $14 = $14 + 1 | 0;
        $7 = ($7 >>> 8 | 0) ^ (HEAP32[(((($7 & 255 | 0) ^ $15 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
        if ($13 & 255 | 0) {
         continue label$13
        }
        break label$13;
       };
       $10 = $7 ^ -1 | 0;
       break label$11;
      }
      $10 = 0;
     }
     $13 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     $9 = HEAP32[($13 + 16100 | 0) >> 2] | 0;
     $7 = $9;
     $6 = HEAP32[($13 + 16092 | 0) >> 2] | 0;
     $13 = $6;
     label$15 : {
      if (!$13) {
       break label$15
      }
      label$16 : while (1) {
       $14 = $13 >>> 1 | 0;
       $15 = $7 + ($14 << 3 | 0) | 0;
       $219 = $15 + 8 | 0;
       $15 = (HEAP32[$15 >> 2] | 0) >>> 0 < $10 >>> 0;
       $7 = $15 ? $219 : $7;
       $13 = $15 ? $13 + ($14 ^ -1 | 0) | 0 : $14;
       if ($13) {
        continue label$16
       }
       break label$16;
      };
     }
     $13 = 0;
     label$17 : {
      if (($7 | 0) == ($9 + ($6 << 3 | 0) | 0 | 0)) {
       break label$17
      }
      if ((HEAP32[$7 >> 2] | 0 | 0) != ($10 | 0)) {
       break label$17
      }
      $13 = HEAP32[($7 + 4 | 0) >> 2] | 0;
     }
     HEAP32[($8 + 112 | 0) >> 2] = $13;
    }
    $5 = $5 + 1 | 0;
    if (($5 | 0) != ($2 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  __stack_pointer = $3 + 48 | 0;
 }
 
 function DockSettingsHandler_DockNodeToSettings_28ImGuiDockContext__2c_20ImGuiDockNode__2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $6 = 0, $11 = Math_fround(0), $17 = 0, $16 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $3 = 0, $9 = 0, $10 = 0;
  $3 = $0 + 28 | 0;
  $4 = $0 + 32 | 0;
  label$1 : while (1) {
   $5 = 0;
   label$2 : {
    $6 = HEAP32[($1 + 24 | 0) >> 2] | 0;
    if (!$6) {
     break label$2
    }
    $5 = HEAP32[$6 >> 2] | 0;
   }
   $7 = 0;
   label$3 : {
    if (!((HEAPU8[($1 + 17 | 0) >> 0] | 0) & 4 | 0)) {
     break label$3
    }
    $6 = HEAP32[($1 + 112 | 0) >> 2] | 0;
    if (!$6) {
     break label$3
    }
    $6 = HEAP32[($6 + 820 | 0) >> 2] | 0;
    if (!$6) {
     break label$3
    }
    $7 = HEAP32[($6 + 4 | 0) >> 2] | 0;
   }
   label$4 : {
    label$5 : {
     if (HEAP32[($1 + 28 | 0) >> 2] | 0) {
      break label$5
     }
     $8 = 255;
     break label$4;
    }
    $8 = HEAP32[($1 + 76 | 0) >> 2] | 0;
   }
   $9 = HEAP32[$1 >> 2] | 0;
   $10 = HEAP32[($1 + 148 | 0) >> 2] | 0;
   label$6 : {
    label$7 : {
     $11 = Math_fround(HEAPF32[($1 + 68 | 0) >> 2]);
     if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
      break label$7
     }
     $6 = ~~$11;
     break label$6;
    }
    $6 = -2147483648;
   }
   label$8 : {
    label$9 : {
     $11 = Math_fround(HEAPF32[($1 + 72 | 0) >> 2]);
     if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
      break label$9
     }
     $12 = ~~$11;
     break label$8;
    }
    $12 = -2147483648;
   }
   label$10 : {
    label$11 : {
     $11 = Math_fround(HEAPF32[($1 + 60 | 0) >> 2]);
     if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
      break label$11
     }
     $13 = ~~$11;
     break label$10;
    }
    $13 = -2147483648;
   }
   label$12 : {
    label$13 : {
     $11 = Math_fround(HEAPF32[($1 + 64 | 0) >> 2]);
     if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
      break label$13
     }
     $14 = ~~$11;
     break label$12;
    }
    $14 = -2147483648;
   }
   label$14 : {
    label$15 : {
     $11 = Math_fround(HEAPF32[($1 + 52 | 0) >> 2]);
     if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
      break label$15
     }
     $15 = ~~$11;
     break label$14;
    }
    $15 = -2147483648;
   }
   $6 = $6 & 65535 | 0;
   $12 = $12 << 16 | 0;
   $13 = $13 & 65535 | 0;
   $14 = $14 << 16 | 0;
   $15 = $15 & 65535 | 0;
   label$16 : {
    label$17 : {
     $11 = Math_fround(HEAPF32[($1 + 56 | 0) >> 2]);
     if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
      break label$17
     }
     $16 = ~~$11;
     break label$16;
    }
    $16 = -2147483648;
   }
   $12 = $12 | $6 | 0;
   $13 = $14 | $13 | 0;
   $14 = $16 << 16 | 0 | $15 | 0;
   $15 = (HEAP32[($1 + 8 | 0) >> 2] | 0) & 12712992 | 0;
   label$18 : {
    $6 = HEAP32[($0 + 24 | 0) >> 2] | 0;
    if (($6 | 0) != (HEAP32[$3 >> 2] | 0 | 0)) {
     break label$18
    }
    $16 = $6 + 1 | 0;
    label$19 : {
     label$20 : {
      if ($6) {
       break label$20
      }
      $17 = 8;
      break label$19;
     }
     $17 = (($6 | 0) / (2 | 0) | 0) + $6 | 0;
    }
    $16 = ($17 | 0) > ($16 | 0) ? $17 : $16;
    if (($6 | 0) >= ($16 | 0)) {
     break label$18
    }
    $6 = Math_imul($16, 36);
    label$21 : {
     $17 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$17) {
      break label$21
     }
     $17 = $17 + 184 | 0;
     HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + 1 | 0;
    }
    $6 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($6, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
    label$22 : {
     $17 = HEAP32[$4 >> 2] | 0;
     if (!$17) {
      break label$22
     }
     __memcpy($6 | 0, $17 | 0, Math_imul(HEAP32[($0 + 24 | 0) >> 2] | 0, 36) | 0) | 0;
     label$23 : {
      $17 = HEAP32[($0 + 32 | 0) >> 2] | 0;
      if (!$17) {
       break label$23
      }
      $18 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$18) {
       break label$23
      }
      $18 = $18 + 184 | 0;
      HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + -1 | 0;
     }
     FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($17, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    }
    HEAP32[($0 + 28 | 0) >> 2] = $16;
    HEAP32[($0 + 32 | 0) >> 2] = $6;
    $6 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   }
   $6 = (HEAP32[$4 >> 2] | 0) + Math_imul($6, 36) | 0;
   HEAP32[($6 + 32 | 0) >> 2] = $12;
   HEAP32[($6 + 28 | 0) >> 2] = $13;
   HEAP32[($6 + 24 | 0) >> 2] = $14;
   HEAP32[($6 + 20 | 0) >> 2] = $15;
   HEAP16[($6 + 18 | 0) >> 1] = 0;
   HEAP8[($6 + 17 | 0) >> 0] = $2;
   HEAP8[($6 + 16 | 0) >> 0] = $8;
   HEAP32[($6 + 12 | 0) >> 2] = $10;
   HEAP32[($6 + 8 | 0) >> 2] = $7;
   HEAP32[($6 + 4 | 0) >> 2] = $5;
   HEAP32[$6 >> 2] = $9;
   HEAP32[($0 + 24 | 0) >> 2] = (HEAP32[($0 + 24 | 0) >> 2] | 0) + 1 | 0;
   label$24 : {
    $6 = HEAP32[($1 + 28 | 0) >> 2] | 0;
    if (!$6) {
     break label$24
    }
    DockSettingsHandler_DockNodeToSettings_28ImGuiDockContext__2c_20ImGuiDockNode__2c_20int_29($0 | 0, $6 | 0, $2 + 1 | 0 | 0);
   }
   label$25 : {
    $1 = HEAP32[($1 + 32 | 0) >> 2] | 0;
    if (!$1) {
     break label$25
    }
    $2 = $2 + 1 | 0;
    continue label$1;
   }
   break label$1;
  };
 }
 
 function DockNodeComparerDepthMostFirst_28void_20const__2c_20void_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $1 = HEAP32[$1 >> 2] | 0;
  $0 = HEAP32[$0 >> 2] | 0;
  $2 = 0;
  $3 = 0;
  label$1 : while (1) {
   $4 = $3;
   $3 = $4 + 1 | 0;
   $1 = HEAP32[($1 + 24 | 0) >> 2] | 0;
   if ($1) {
    continue label$1
   }
   break label$1;
  };
  label$2 : while (1) {
   $1 = $2;
   $2 = $1 + 1 | 0;
   $0 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   if ($0) {
    continue label$2
   }
   break label$2;
  };
  return $4 - $1 | 0 | 0;
 }
 
 function ImGui__DockContextRemoveNode_28ImGuiContext__2c_20ImGuiDockNode__2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  label$1 : {
   if (!((HEAPU8[($0 + 23536 | 0) >> 0] | 0) & 64 | 0)) {
    break label$1
   }
   HEAP32[$3 >> 2] = HEAP32[$1 >> 2] | 0;
   ImGui__DebugLog_28char_20const__2c_20____29(69384 | 0, $3 | 0);
  }
  label$2 : {
   $4 = HEAP32[($1 + 112 | 0) >> 2] | 0;
   if (!$4) {
    break label$2
   }
   HEAP32[($4 + 936 | 0) >> 2] = 0;
  }
  $4 = HEAP32[($1 + 24 | 0) >> 2] | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     if (!$2) {
      break label$5
     }
     if ($4) {
      break label$4
     }
    }
    $0 = $0 + 23340 | 0;
    label$6 : {
     if (!$4) {
      break label$6
     }
     label$7 : {
      if ((HEAP32[($4 + 28 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
       break label$7
      }
      HEAP32[($4 + 28 | 0) >> 2] = 0;
     }
     if ((HEAP32[($4 + 32 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
      break label$6
     }
     HEAP32[((HEAP32[($1 + 24 | 0) >> 2] | 0) + 32 | 0) >> 2] = 0;
    }
    ImGuiStorage__SetVoidPtr_28unsigned_20int_2c_20void__29($0 | 0, HEAP32[$1 >> 2] | 0 | 0, 0 | 0);
    ImGuiDockNode___ImGuiDockNode_28_29($1 | 0) | 0;
    label$8 : {
     $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$4) {
      break label$8
     }
     $4 = $4 + 184 | 0;
     HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($1, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    break label$3;
   }
   label$9 : {
    $2 = HEAP32[($4 + 28 | 0) >> 2] | 0;
    if (($2 | 0) != ($1 | 0)) {
     break label$9
    }
    $2 = HEAP32[($4 + 32 | 0) >> 2] | 0;
   }
   ImGui__DockNodeTreeMerge_28ImGuiContext__2c_20ImGuiDockNode__2c_20ImGuiDockNode__29($0 | 0, $4 | 0, $2 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function ImGui__DockNodeUpdateFlagsAndCollapse_28ImGuiDockNode__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $4 = 0, $7 = 0, $8 = 0, $6 = 0, $2 = 0, $3 = 0, $5 = 0;
  label$1 : {
   $1 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   if (!$1) {
    break label$1
   }
   HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($1 + 4 | 0) >> 2] | 0;
  }
  $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  HEAP16[($0 + 156 | 0) >> 1] = (HEAPU16[($0 + 156 | 0) >> 1] | 0) & 49151 | 0;
  label$2 : {
   $1 = HEAP32[($0 + 28 | 0) >> 2] | 0;
   if (!$1) {
    break label$2
   }
   ImGui__DockNodeUpdateFlagsAndCollapse_28ImGuiDockNode__29($1 | 0);
  }
  label$3 : {
   $1 = HEAP32[($0 + 32 | 0) >> 2] | 0;
   if (!$1) {
    break label$3
   }
   ImGui__DockNodeUpdateFlagsAndCollapse_28ImGuiDockNode__29($1 | 0);
  }
  $1 = 0;
  HEAP32[($0 + 12 | 0) >> 2] = 0;
  label$4 : {
   label$5 : {
    $3 = HEAP32[($0 + 36 | 0) >> 2] | 0;
    if (($3 | 0) < (1 | 0)) {
     break label$5
    }
    $4 = 0;
    $5 = $0 + 17 | 0;
    label$6 : while (1) {
     $1 = HEAP32[((HEAP32[($0 + 44 | 0) >> 2] | 0) + ($4 << 2 | 0) | 0) >> 2] | 0;
     $6 = 0;
     $7 = 0;
     label$7 : {
      $8 = HEAP32[($0 + 136 | 0) >> 2] | 0;
      if (($8 + 1 | 0 | 0) != (HEAP32[($2 + 16016 | 0) >> 2] | 0 | 0)) {
       break label$7
      }
      $6 = (HEAP32[($1 + 620 | 0) >> 2] | 0 | 0) < ($8 | 0);
      label$8 : {
       if ((HEAPU16[($0 + 156 | 0) >> 1] | 0) & 32768 | 0) {
        break label$8
       }
       if ((HEAP32[($0 + 152 | 0) >> 2] | 0 | 0) == (HEAP32[($1 + 160 | 0) >> 2] | 0 | 0)) {
        break label$8
       }
       $7 = 0;
       break label$7;
      }
      label$9 : {
       if (HEAPU8[($1 + 229 | 0) >> 0] | 0) {
        break label$9
       }
       $7 = 0;
       break label$7;
      }
      $7 = !((HEAPU8[($1 + 10 | 0) >> 0] | 0) & 16 | 0);
     }
     label$10 : {
      label$11 : {
       $8 = HEAPU8[($1 + 905 | 0) >> 0] | 0;
       if (!(($8 >>> 3 | 0) & 1 | 0 | ($6 | $7 | 0) | 0)) {
        break label$11
       }
       HEAP8[($1 + 905 | 0) >> 0] = $8 & 247 | 0;
       label$12 : {
        if ((HEAP32[($0 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
         break label$12
        }
        if (!((HEAPU8[$5 >> 0] | 0) & 8 | 0)) {
         break label$4
        }
       }
       ImGui__DockNodeRemoveWindow_28ImGuiDockNode__2c_20ImGuiWindow__2c_20unsigned_20int_29($0 | 0, $1 | 0, HEAP32[$0 >> 2] | 0 | 0);
       $4 = $4 + -1 | 0;
       $3 = HEAP32[($0 + 36 | 0) >> 2] | 0;
       break label$10;
      }
      HEAP32[($0 + 12 | 0) >> 2] = HEAP32[($0 + 12 | 0) >> 2] | 0 | (HEAP32[($1 + 36 | 0) >> 2] | 0) | 0;
     }
     $4 = $4 + 1 | 0;
     if (($4 | 0) < ($3 | 0)) {
      continue label$6
     }
     break label$6;
    };
    $1 = HEAP32[($0 + 12 | 0) >> 2] | 0;
   }
   $8 = $1 | (HEAP32[($0 + 4 | 0) >> 2] | 0) | 0;
   $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   $6 = $8 | $2 | 0;
   HEAP32[($0 + 16 | 0) >> 2] = $6;
   label$13 : {
    $7 = $0 + 158 | 0;
    $1 = HEAPU16[($0 + 156 | 0) >> 1] | 0 | ((HEAPU8[$7 >> 0] | 0) << 16 | 0) | 0;
    if (!($1 & 262144 | 0)) {
     break label$13
    }
    $1 = ($3 | 0) != (1 | 0) ? $1 : $6 & 64 | 0 ? (($6 & 8192 | 0) >>> 13 | 0 ? $1 : $1 | 524288 | 0) : $1;
   }
   HEAP16[($0 + 156 | 0) >> 1] = $1;
   $4 = $1 & 16515071 | 0;
   HEAP8[$7 >> 0] = $4 >>> 16 | 0;
   label$14 : {
    if (!($1 & 524288 | 0)) {
     break label$14
    }
    $7 = HEAP32[($0 + 116 | 0) >> 2] | 0;
    if (!$7) {
     break label$14
    }
    $4 = (HEAPU8[($7 + 37 | 0) >> 0] | 0) & 32 | 0 ? $1 & 15990783 | 0 : $4;
   }
   label$15 : {
    label$16 : {
     label$17 : {
      if (($3 | 0) < (2 | 0)) {
       break label$17
      }
      $1 = $2 & -8193 | 0;
      break label$16;
     }
     if (!($4 & 524288 | 0)) {
      break label$15
     }
     $1 = $2 ^ 8192 | 0;
    }
    HEAP32[($0 + 8 | 0) >> 2] = $1;
    $6 = $8 | $1 | 0;
    HEAP32[($0 + 16 | 0) >> 2] = $6;
   }
   HEAP16[($0 + 156 | 0) >> 1] = $4;
   HEAP8[($0 + 158 | 0) >> 0] = ($4 & 15925248 | 0) >>> 16 | 0;
   $1 = 0;
   $7 = 0;
   label$18 : {
    $8 = HEAP32[($0 + 28 | 0) >> 2] | 0;
    if (!$8) {
     break label$18
    }
    $7 = ((HEAPU16[($8 + 156 | 0) >> 1] | 0) >>> 9 | 0) & 1 | 0;
   }
   $8 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   label$19 : {
    $2 = HEAP32[($0 + 32 | 0) >> 2] | 0;
    if (!$2) {
     break label$19
    }
    $1 = ((HEAPU16[($2 + 156 | 0) >> 1] | 0) >>> 9 | 0) & 1 | 0;
   }
   $1 = ($1 | ($7 | (($3 | 0) > (0 | 0) | (($8 ? 2048 : 1024) & $6 | 0 | 0) != (0 | 0) | 0) | 0) | 0) << 9 | 0 | ($4 & 15990271 | 0) | 0;
   HEAP16[($0 + 156 | 0) >> 1] = $1;
   HEAP8[($0 + 158 | 0) >> 0] = $1 >>> 16 | 0;
   return;
  }
  ImGui__DockNodeHideHostWindow_28ImGuiDockNode__29($0 | 0);
  HEAP32[($0 + 20 | 0) >> 2] = 1;
  ImGui__DockNodeRemoveWindow_28ImGuiDockNode__2c_20ImGuiWindow__2c_20unsigned_20int_29($0 | 0, $1 | 0, HEAP32[$0 >> 2] | 0 | 0);
 }
 
 function DockNodeFindInfo_28ImGuiDockNode__2c_20ImGuiDockNodeTreeInfo__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  label$1 : while (1) {
   label$2 : {
    if ((HEAP32[($0 + 36 | 0) >> 2] | 0 | 0) < (1 | 0)) {
     break label$2
    }
    label$3 : {
     if (HEAP32[($1 + 4 | 0) >> 2] | 0) {
      break label$3
     }
     HEAP32[($1 + 4 | 0) >> 2] = $0;
    }
    HEAP32[($1 + 8 | 0) >> 2] = (HEAP32[($1 + 8 | 0) >> 2] | 0) + 1 | 0;
   }
   label$4 : {
    if (!((HEAPU8[($0 + 17 | 0) >> 0] | 0) & 8 | 0)) {
     break label$4
    }
    HEAP32[$1 >> 2] = $0;
   }
   label$5 : {
    label$6 : {
     if ((HEAP32[($1 + 8 | 0) >> 2] | 0 | 0) < (2 | 0)) {
      break label$6
     }
     if (HEAP32[$1 >> 2] | 0) {
      break label$5
     }
    }
    label$7 : {
     $2 = HEAP32[($0 + 28 | 0) >> 2] | 0;
     if (!$2) {
      break label$7
     }
     DockNodeFindInfo_28ImGuiDockNode__2c_20ImGuiDockNodeTreeInfo__29($2 | 0, $1 | 0);
    }
    $0 = HEAP32[($0 + 32 | 0) >> 2] | 0;
    if ($0) {
     continue label$1
    }
   }
   break label$1;
  };
 }
 
 function ImGui__DockNodeHideHostWindow_28ImGuiDockNode__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  label$1 : {
   $1 = HEAP32[($0 + 112 | 0) >> 2] | 0;
   if (!$1) {
    break label$1
   }
   label$2 : {
    if ((HEAP32[($1 + 936 | 0) >> 2] | 0 | 0) != ($0 | 0)) {
     break label$2
    }
    HEAP32[($1 + 936 | 0) >> 2] = 0;
   }
   HEAP32[($0 + 112 | 0) >> 2] = 0;
  }
  label$3 : {
   if ((HEAP32[($0 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
    break label$3
   }
   $1 = HEAP32[($0 + 44 | 0) >> 2] | 0;
   HEAP32[($0 + 116 | 0) >> 2] = HEAP32[$1 >> 2] | 0;
   $1 = HEAP32[$1 >> 2] | 0;
   HEAP8[($1 + 905 | 0) >> 0] = (HEAPU8[($1 + 905 | 0) >> 0] | 0) & 254 | 0;
  }
  label$4 : {
   $1 = HEAP32[($0 + 48 | 0) >> 2] | 0;
   if (!$1) {
    break label$4
   }
   label$5 : {
    $2 = HEAP32[($1 + 140 | 0) >> 2] | 0;
    if (!$2) {
     break label$5
    }
    label$6 : {
     $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$3) {
      break label$6
     }
     $3 = $3 + 184 | 0;
     HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($2, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   label$7 : {
    $2 = HEAP32[($1 + 8 | 0) >> 2] | 0;
    if (!$2) {
     break label$7
    }
    label$8 : {
     $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$3) {
      break label$8
     }
     $3 = $3 + 184 | 0;
     HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($2, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   label$9 : {
    $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$2) {
     break label$9
    }
    $2 = $2 + 184 | 0;
    HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1 | 0;
   }
   FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($1, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   HEAP32[($0 + 48 | 0) >> 2] = 0;
  }
 }
 
 function ImGui__DockNodeTreeUpdateSplitter_28ImGuiDockNode__29($0) {
  $0 = $0 | 0;
  var $6 = 0, $4 = 0, $1 = 0, $11 = Math_fround(0), $16 = Math_fround(0), $7 = 0, i64toi32_i32$0 = 0, $5 = 0, i64toi32_i32$1 = 0, $9 = 0, $2 = 0, $3 = 0, $18 = 0, $14 = 0, $13 = Math_fround(0), $10 = 0, $8 = 0, $17 = Math_fround(0), $22 = 0, $12 = Math_fround(0), $15 = Math_fround(0), $21 = 0, $21$hi = 0, $46 = 0, $49 = 0, $217 = 0, $19 = 0, $20 = 0;
  $1 = __stack_pointer - 112 | 0;
  __stack_pointer = $1;
  label$1 : {
   $2 = HEAP32[($0 + 28 | 0) >> 2] | 0;
   if (!$2) {
    break label$1
   }
   $3 = HEAP32[($0 + 32 | 0) >> 2] | 0;
   label$2 : {
    if (!((HEAPU16[($2 + 156 | 0) >> 1] | 0) & 512 | 0)) {
     break label$2
    }
    label$3 : {
     if (!((HEAPU16[($3 + 156 | 0) >> 1] | 0) & 512 | 0)) {
      break label$3
     }
     $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     $5 = HEAP32[($0 + 76 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($2 + 52 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($2 + 56 | 0) >> 2] | 0;
     $46 = i64toi32_i32$0;
     i64toi32_i32$0 = $1;
     HEAP32[($1 + 96 | 0) >> 2] = $46;
     HEAP32[($1 + 100 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[($3 + 52 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($3 + 56 | 0) >> 2] | 0;
     $49 = i64toi32_i32$1;
     i64toi32_i32$1 = $1;
     HEAP32[($1 + 104 | 0) >> 2] = $49;
     HEAP32[($1 + 108 | 0) >> 2] = i64toi32_i32$0;
     $6 = $5 << 2 | 0;
     $7 = ($1 + 96 | 0) + $6 | 0;
     $8 = ($2 + $6 | 0) + 60 | 0;
     HEAPF32[$7 >> 2] = Math_fround(Math_fround(HEAPF32[$8 >> 2]) + Math_fround(HEAPF32[$7 >> 2]));
     $9 = $1 + 104 | 0;
     $6 = ($5 ^ 1 | 0) << 2 | 0;
     $7 = $9 + $6 | 0;
     $10 = $3 + 60 | 0;
     HEAPF32[$7 >> 2] = Math_fround(Math_fround(HEAPF32[($10 + $6 | 0) >> 2]) + Math_fround(HEAPF32[$7 >> 2]));
     label$4 : {
      label$5 : {
       label$6 : {
        $6 = HEAP32[($3 + 16 | 0) >> 2] | 0 | (HEAP32[($2 + 16 | 0) >> 2] | 0) | 0;
        if ($6 & 32 | 0) {
         break label$6
        }
        if (!($6 & ($5 ? 8388608 : 4194304) | 0)) {
         break label$5
        }
       }
       label$7 : {
        label$8 : {
         $11 = Math_fround(HEAPF32[($4 + 15032 | 0) >> 2]);
         $11 = Math_fround(Math_fround(($11 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($11, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
         if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
          break label$8
         }
         $0 = ~~$11;
         break label$7;
        }
        $0 = -2147483648;
       }
       $0 = $0 << 8 | 0;
       label$9 : {
        label$10 : {
         $11 = Math_fround(HEAPF32[($4 + 15028 | 0) >> 2]);
         $11 = Math_fround(Math_fround(($11 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($11, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
         if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
          break label$10
         }
         $5 = ~~$11;
         break label$9;
        }
        $5 = -2147483648;
       }
       $0 = $0 | $5 | 0;
       label$11 : {
        label$12 : {
         $11 = Math_fround(HEAPF32[($4 + 15036 | 0) >> 2]);
         $11 = Math_fround(Math_fround(($11 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($11, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
         if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
          break label$12
         }
         $5 = ~~$11;
         break label$11;
        }
        $5 = -2147483648;
       }
       $0 = $0 | ($5 << 16 | 0) | 0;
       label$13 : {
        label$14 : {
         $11 = Math_fround(Math_fround(HEAPF32[($4 + 15040 | 0) >> 2]) * Math_fround(HEAPF32[($4 + 14396 | 0) >> 2]));
         $11 = Math_fround(Math_fround(($11 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($11, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
         if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
          break label$14
         }
         $5 = ~~$11;
         break label$13;
        }
        $5 = -2147483648;
       }
       ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29(HEAP32[((HEAP32[($4 + 16116 | 0) >> 2] | 0) + 672 | 0) >> 2] | 0 | 0, $1 + 96 | 0 | 0, $9 | 0, $0 | ($5 << 24 | 0) | 0 | 0, Math_fround(Math_fround(HEAPF32[($4 + 14464 | 0) >> 2])), 0 | 0);
       break label$4;
      }
      ImGui__PushID_28int_29(HEAP32[$0 >> 2] | 0 | 0);
      i64toi32_i32$1 = $1 + 80 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $1;
      i64toi32_i32$0 = 0;
      HEAP32[($1 + 72 | 0) >> 2] = 0;
      HEAP32[($1 + 76 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $1;
      i64toi32_i32$0 = 0;
      HEAP32[($1 + 64 | 0) >> 2] = 0;
      HEAP32[($1 + 68 | 0) >> 2] = i64toi32_i32$0;
      $6 = $5 << 2 | 0;
      $12 = Math_fround(HEAPF32[(($4 + $6 | 0) + 14420 | 0) >> 2]);
      $11 = Math_fround(HEAPF32[(((HEAP32[($0 + 28 | 0) >> 2] | 0) + $6 | 0) + 52 | 0) >> 2]);
      $6 = (HEAP32[($0 + 32 | 0) >> 2] | 0) + $6 | 0;
      $13 = Math_fround(Math_fround(HEAPF32[($6 + 52 | 0) >> 2]) + Math_fround(HEAPF32[($6 + 60 | 0) >> 2]));
      label$15 : {
       $6 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
       $217 = HEAP32[($6 + 16168 | 0) >> 2] | 0;
       $6 = HEAP32[($6 + 16116 | 0) >> 2] | 0;
       $6 = HEAP32[((((HEAP32[($6 + 280 | 0) >> 2] | 0) << 2 | 0) + (HEAP32[($6 + 288 | 0) >> 2] | 0) | 0) + -4 | 0) >> 2] | 0;
       $6 = (($6 ^ -1 | 0) >>> 8 | 0) ^ (HEAP32[(((($6 & 255 | 0) ^ 220 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
       $6 = ($6 >>> 8 | 0) ^ (HEAP32[(((($6 & 255 | 0) ^ 35 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
       $6 = ($6 >>> 8 | 0) ^ (HEAP32[(((($6 & 255 | 0) ^ 83 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
       $6 = ($6 >>> 8 | 0) ^ (HEAP32[(((($6 & 255 | 0) ^ 112 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
       $6 = ($6 >>> 8 | 0) ^ (HEAP32[(((($6 & 255 | 0) ^ 108 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
       $6 = ($6 >>> 8 | 0) ^ (HEAP32[(((($6 & 255 | 0) ^ 105 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
       $6 = ($6 >>> 8 | 0) ^ (HEAP32[(((($6 & 255 | 0) ^ 116 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
       $6 = ($6 >>> 8 | 0) ^ (HEAP32[(((($6 & 255 | 0) ^ 116 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
       $6 = ($6 >>> 8 | 0) ^ (HEAP32[(((($6 & 255 | 0) ^ 101 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
       $6 = (($6 >>> 8 | 0) ^ (HEAP32[(((($6 & 255 | 0) ^ 114 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0) ^ -1 | 0;
       if (($217 | 0) != ($6 | 0)) {
        break label$15
       }
       ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($6 | 0, 11 | 0, 66055 | 0, 0 | 0);
      }
      $11 = Math_fround($12 + $11);
      $13 = Math_fround($13 - $12);
      label$16 : {
       if ((HEAP32[($4 + 16192 | 0) >> 2] | 0 | 0) != ($6 | 0)) {
        break label$16
       }
       DockNodeTreeUpdateSplitterFindTouchingNode_28ImGuiDockNode__2c_20ImGuiAxis_2c_20int_2c_20ImVector_ImGuiDockNode____29($2 | 0, $5 | 0, 1 | 0, $1 + 64 | 0 | 0);
       $6 = 0;
       DockNodeTreeUpdateSplitterFindTouchingNode_28ImGuiDockNode__2c_20ImGuiAxis_2c_20int_2c_20ImVector_ImGuiDockNode____29($3 | 0, $5 | 0, 0 | 0, $1 + 64 | 0 | 12 | 0 | 0);
       label$17 : {
        $7 = HEAP32[($1 + 64 | 0) >> 2] | 0;
        if (($7 | 0) < (1 | 0)) {
         break label$17
        }
        $9 = ($1 + 48 | 0) + ($5 << 2 | 0) | 0;
        $14 = HEAP32[($1 + 72 | 0) >> 2] | 0;
        label$18 : while (1) {
         $4 = HEAP32[($14 + ($6 << 2 | 0) | 0) >> 2] | 0;
         $15 = Math_fround(HEAPF32[($4 + 64 | 0) >> 2]);
         $16 = Math_fround(HEAPF32[($4 + 56 | 0) >> 2]);
         $17 = Math_fround(HEAPF32[($4 + 52 | 0) >> 2]);
         HEAPF32[($1 + 56 | 0) >> 2] = Math_fround($17 + Math_fround(HEAPF32[($4 + 60 | 0) >> 2]));
         HEAPF32[($1 + 52 | 0) >> 2] = $16;
         HEAPF32[($1 + 48 | 0) >> 2] = $17;
         HEAPF32[($1 + 60 | 0) >> 2] = Math_fround($16 + $15);
         $16 = Math_fround($12 + Math_fround(HEAPF32[$9 >> 2]));
         $11 = $11 >= $16 ? $11 : $16;
         $6 = $6 + 1 | 0;
         if (($6 | 0) != ($7 | 0)) {
          continue label$18
         }
         break label$18;
        };
       }
       $7 = HEAP32[($1 + 76 | 0) >> 2] | 0;
       if (($7 | 0) < (1 | 0)) {
        break label$16
       }
       $9 = (($1 + 48 | 0) + ($5 << 2 | 0) | 0) + 8 | 0;
       $14 = HEAP32[($1 + 84 | 0) >> 2] | 0;
       $6 = 0;
       label$19 : while (1) {
        $4 = HEAP32[($14 + ($6 << 2 | 0) | 0) >> 2] | 0;
        $15 = Math_fround(HEAPF32[($4 + 64 | 0) >> 2]);
        $16 = Math_fround(HEAPF32[($4 + 56 | 0) >> 2]);
        $17 = Math_fround(HEAPF32[($4 + 52 | 0) >> 2]);
        HEAPF32[($1 + 56 | 0) >> 2] = Math_fround($17 + Math_fround(HEAPF32[($4 + 60 | 0) >> 2]));
        HEAPF32[($1 + 52 | 0) >> 2] = $16;
        HEAPF32[($1 + 48 | 0) >> 2] = $17;
        HEAPF32[($1 + 60 | 0) >> 2] = Math_fround($16 + $15);
        $16 = Math_fround(Math_fround(HEAPF32[$9 >> 2]) - $12);
        $13 = $13 < $16 ? $13 : $16;
        $6 = $6 + 1 | 0;
        if (($6 | 0) != ($7 | 0)) {
         continue label$19
        }
        break label$19;
       };
      }
      HEAPF32[($1 + 48 | 0) >> 2] = Math_fround(HEAPF32[$8 >> 2]);
      $7 = $5 << 2 | 0;
      $10 = $10 + $7 | 0;
      HEAPF32[($1 + 44 | 0) >> 2] = Math_fround(HEAPF32[$10 >> 2]);
      $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      $6 = HEAP32[($4 + 16116 | 0) >> 2] | 0;
      $6 = HEAP32[((((HEAP32[($6 + 280 | 0) >> 2] | 0) << 2 | 0) + (HEAP32[($6 + 288 | 0) >> 2] | 0) | 0) + -4 | 0) >> 2] | 0;
      $6 = (($6 ^ -1 | 0) >>> 8 | 0) ^ (HEAP32[(((($6 & 255 | 0) ^ 220 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
      $6 = ($6 >>> 8 | 0) ^ (HEAP32[(((($6 & 255 | 0) ^ 35 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
      $6 = ($6 >>> 8 | 0) ^ (HEAP32[(((($6 & 255 | 0) ^ 83 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
      $6 = ($6 >>> 8 | 0) ^ (HEAP32[(((($6 & 255 | 0) ^ 112 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
      $6 = ($6 >>> 8 | 0) ^ (HEAP32[(((($6 & 255 | 0) ^ 108 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
      $6 = ($6 >>> 8 | 0) ^ (HEAP32[(((($6 & 255 | 0) ^ 105 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
      $6 = ($6 >>> 8 | 0) ^ (HEAP32[(((($6 & 255 | 0) ^ 116 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
      $6 = ($6 >>> 8 | 0) ^ (HEAP32[(((($6 & 255 | 0) ^ 116 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
      $6 = ($6 >>> 8 | 0) ^ (HEAP32[(((($6 & 255 | 0) ^ 101 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0) | 0;
      $9 = $6 >>> 8 | 0;
      $6 = HEAP32[(((($6 & 255 | 0) ^ 114 | 0) << 2 | 0) + 70528 | 0) >> 2] | 0;
      $14 = HEAP32[($4 + 16168 | 0) >> 2] | 0;
      label$20 : {
       label$21 : {
        $16 = Math_fround(HEAPF32[($4 + 14632 | 0) >> 2]);
        $16 = Math_fround(Math_fround(($16 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($16, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($16)) < Math_fround(2147483648.0))) {
         break label$21
        }
        $18 = ~~$16;
        break label$20;
       }
       $18 = -2147483648;
      }
      $6 = $9 ^ $6 | 0;
      $9 = $18 << 8 | 0;
      label$22 : {
       label$23 : {
        $16 = Math_fround(HEAPF32[($4 + 14628 | 0) >> 2]);
        $16 = Math_fround(Math_fround(($16 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($16, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($16)) < Math_fround(2147483648.0))) {
         break label$23
        }
        $18 = ~~$16;
        break label$22;
       }
       $18 = -2147483648;
      }
      $6 = $6 ^ -1 | 0;
      $9 = $9 | $18 | 0;
      label$24 : {
       label$25 : {
        $16 = Math_fround(HEAPF32[($4 + 14636 | 0) >> 2]);
        $16 = Math_fround(Math_fround(($16 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($16, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($16)) < Math_fround(2147483648.0))) {
         break label$25
        }
        $18 = ~~$16;
        break label$24;
       }
       $18 = -2147483648;
      }
      $19 = $3 + 52 | 0;
      $20 = $2 + 52 | 0;
      $14 = ($14 | 0) != ($6 | 0);
      $9 = $9 | ($18 << 16 | 0) | 0;
      label$26 : {
       label$27 : {
        $16 = Math_fround(Math_fround(HEAPF32[($4 + 14640 | 0) >> 2]) * Math_fround(HEAPF32[($4 + 14396 | 0) >> 2]));
        $16 = Math_fround(Math_fround(($16 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($16, Math_fround(1.0)))) * Math_fround(255.0)) + Math_fround(.5));
        if (!(Math_fround(Math_abs($16)) < Math_fround(2147483648.0))) {
         break label$27
        }
        $4 = ~~$16;
        break label$26;
       }
       $4 = -2147483648;
      }
      $4 = $9 | ($4 << 24 | 0) | 0;
      $18 = $19 + $7 | 0;
      $13 = Math_fround(Math_fround(Math_fround(HEAPF32[$18 >> 2]) + Math_fround(HEAPF32[$10 >> 2])) - $13);
      $11 = Math_fround($11 - Math_fround(HEAPF32[($20 + $7 | 0) >> 2]));
      label$28 : {
       if ($14) {
        break label$28
       }
       ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($6 | 0, 11 | 0, 66055 | 0, 0 | 0);
      }
      label$29 : {
       if (!(ImGui__SplitterBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20ImGuiAxis_2c_20float__2c_20float__2c_20float_2c_20float_2c_20float_2c_20float_2c_20unsigned_20int_29($1 + 96 | 0 | 0, $6 | 0, $5 | 0, $1 + 48 | 0 | 0, $1 + 44 | 0 | 0, Math_fround($11), Math_fround($13), Math_fround(Math_fround(4.0)), Math_fround(Math_fround(.03999999910593033)), $4 | 0) | 0)) {
        break label$29
       }
       $9 = HEAP32[($1 + 64 | 0) >> 2] | 0;
       if (($9 | 0) < (1 | 0)) {
        break label$29
       }
       $14 = HEAP32[($1 + 76 | 0) >> 2] | 0;
       if (($14 | 0) < (1 | 0)) {
        break label$29
       }
       $4 = $5 << 2 | 0;
       $11 = Math_fround(HEAPF32[($1 + 48 | 0) >> 2]);
       HEAPF32[(($2 + $4 | 0) + 68 | 0) >> 2] = $11;
       HEAPF32[$8 >> 2] = $11;
       HEAPF32[$18 >> 2] = Math_fround(Math_fround(HEAPF32[$18 >> 2]) - Math_fround(Math_fround(HEAPF32[($1 + 44 | 0) >> 2]) - Math_fround(HEAPF32[$10 >> 2])));
       $11 = Math_fround(HEAPF32[($1 + 44 | 0) >> 2]);
       HEAPF32[(($3 + $4 | 0) + 68 | 0) >> 2] = $11;
       HEAPF32[$10 >> 2] = $11;
       $7 = 0;
       $8 = HEAP32[($1 + 72 | 0) >> 2] | 0;
       label$30 : while (1) {
        label$31 : {
         $6 = HEAP32[($8 + ($7 << 2 | 0) | 0) >> 2] | 0;
         $4 = HEAP32[($6 + 24 | 0) >> 2] | 0;
         if (($4 | 0) == ($0 | 0)) {
          break label$31
         }
         $6 = $6 + 24 | 0;
         label$32 : while (1) {
          label$33 : {
           if ((HEAP32[($4 + 76 | 0) >> 2] | 0 | 0) != ($5 | 0)) {
            break label$33
           }
           $4 = (HEAP32[($4 + 28 | 0) >> 2] | 0) + 158 | 0;
           HEAP8[$4 >> 0] = HEAPU8[$4 >> 0] | 0 | 1 | 0;
           $4 = HEAP32[$6 >> 2] | 0;
          }
          $6 = $4 + 24 | 0;
          $4 = HEAP32[($4 + 24 | 0) >> 2] | 0;
          if (($4 | 0) != ($0 | 0)) {
           continue label$32
          }
          break label$32;
         };
        }
        $7 = $7 + 1 | 0;
        if (($7 | 0) < ($9 | 0)) {
         continue label$30
        }
        break label$30;
       };
       $9 = HEAP32[($1 + 84 | 0) >> 2] | 0;
       $7 = 0;
       label$34 : while (1) {
        label$35 : {
         $6 = HEAP32[($9 + ($7 << 2 | 0) | 0) >> 2] | 0;
         $4 = HEAP32[($6 + 24 | 0) >> 2] | 0;
         if (($4 | 0) == ($0 | 0)) {
          break label$35
         }
         $6 = $6 + 24 | 0;
         label$36 : while (1) {
          label$37 : {
           if ((HEAP32[($4 + 76 | 0) >> 2] | 0 | 0) != ($5 | 0)) {
            break label$37
           }
           $4 = (HEAP32[($4 + 32 | 0) >> 2] | 0) + 158 | 0;
           HEAP8[$4 >> 0] = HEAPU8[$4 >> 0] | 0 | 1 | 0;
           $4 = HEAP32[$6 >> 2] | 0;
          }
          $6 = $4 + 24 | 0;
          $4 = HEAP32[($4 + 24 | 0) >> 2] | 0;
          if (($4 | 0) != ($0 | 0)) {
           continue label$36
          }
          break label$36;
         };
        }
        $7 = $7 + 1 | 0;
        if (($7 | 0) < ($14 | 0)) {
         continue label$34
        }
        break label$34;
       };
       i64toi32_i32$0 = HEAP32[($2 + 52 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($2 + 56 | 0) >> 2] | 0;
       $21 = i64toi32_i32$0;
       $21$hi = i64toi32_i32$1;
       i64toi32_i32$1 = HEAP32[($2 + 60 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($2 + 64 | 0) >> 2] | 0;
       $22 = i64toi32_i32$1;
       i64toi32_i32$1 = $1;
       HEAP32[($1 + 16 | 0) >> 2] = $22;
       HEAP32[($1 + 20 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $1;
       HEAP32[($1 + 32 | 0) >> 2] = $22;
       HEAP32[($1 + 36 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$0 = $21$hi;
       ImGui__DockNodeTreeUpdatePosSize_28ImGuiDockNode__2c_20ImVec2_2c_20ImVec2_2c_20ImGuiDockNode__29($2 | 0, $21 | 0, i64toi32_i32$0 | 0, $1 + 16 | 0 | 0, 0 | 0);
       i64toi32_i32$0 = HEAP32[($3 + 52 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($3 + 56 | 0) >> 2] | 0;
       $21 = i64toi32_i32$0;
       $21$hi = i64toi32_i32$1;
       i64toi32_i32$1 = HEAP32[($3 + 60 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($3 + 64 | 0) >> 2] | 0;
       $22 = i64toi32_i32$1;
       i64toi32_i32$1 = $1;
       HEAP32[($1 + 8 | 0) >> 2] = $22;
       HEAP32[($1 + 12 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $1;
       HEAP32[($1 + 24 | 0) >> 2] = $22;
       HEAP32[($1 + 28 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$0 = $21$hi;
       ImGui__DockNodeTreeUpdatePosSize_28ImGuiDockNode__2c_20ImVec2_2c_20ImVec2_2c_20ImGuiDockNode__29($3 | 0, $21 | 0, i64toi32_i32$0 | 0, $1 + 8 | 0 | 0, 0 | 0);
       $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
       if (!(Math_fround(HEAPF32[($4 + 23384 | 0) >> 2]) <= Math_fround(0.0))) {
        break label$29
       }
       HEAPF32[($4 + 23384 | 0) >> 2] = Math_fround(HEAPF32[($4 + 28 | 0) >> 2]);
      }
      $0 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      $4 = HEAP32[($0 + 16116 | 0) >> 2] | 0;
      HEAP32[($4 + 280 | 0) >> 2] = (HEAP32[($4 + 280 | 0) >> 2] | 0) + -1 | 0;
      label$38 : {
       $4 = HEAP32[($1 + 84 | 0) >> 2] | 0;
       if (!$4) {
        break label$38
       }
       $0 = $0 + 184 | 0;
       HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1 | 0;
       FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($4, HEAP32[(0 + 92728 | 0) >> 2] | 0);
      }
      $4 = HEAP32[($1 + 72 | 0) >> 2] | 0;
      if (!$4) {
       break label$4
      }
      label$39 : {
       $0 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
       if (!$0) {
        break label$39
       }
       $0 = $0 + 184 | 0;
       HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1 | 0;
      }
      FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($4, HEAP32[(0 + 92728 | 0) >> 2] | 0);
     }
     if (!((HEAPU16[($2 + 156 | 0) >> 1] | 0) & 512 | 0)) {
      break label$2
     }
    }
    ImGui__DockNodeTreeUpdateSplitter_28ImGuiDockNode__29($2 | 0);
   }
   if (!((HEAPU16[($3 + 156 | 0) >> 1] | 0) & 512 | 0)) {
    break label$1
   }
   ImGui__DockNodeTreeUpdateSplitter_28ImGuiDockNode__29($3 | 0);
  }
  __stack_pointer = $1 + 112 | 0;
 }
 
 function TabItemComparerByDockOrder_28void_20const__2c_20void_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $10 = 0;
  label$1 : {
   $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   $0 = HEAP16[($2 + 906 | 0) >> 1] | 0;
   $10 = ($0 | 0) == (-1 | 0) ? 2147483647 : $0;
   $0 = HEAP32[($1 + 8 | 0) >> 2] | 0;
   $1 = HEAP16[($0 + 906 | 0) >> 1] | 0;
   $1 = $10 - (($1 | 0) == (-1 | 0) ? 2147483647 : $1) | 0;
   if ($1) {
    break label$1
   }
   $1 = (HEAP16[($2 + 238 | 0) >> 1] | 0) - (HEAP16[($0 + 238 | 0) >> 1] | 0) | 0;
  }
  return $1 | 0;
 }
 
 function ImGui__DockContextQueueUndockWindow_28ImGuiContext__2c_20ImGuiWindow__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $4 = 0, $3 = 0, $5 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   $2 = HEAP32[($0 + 23352 | 0) >> 2] | 0;
   if (($2 | 0) != (HEAP32[($0 + 23356 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $3 = $2 + 1 | 0;
   label$2 : {
    label$3 : {
     if ($2) {
      break label$3
     }
     $4 = 8;
     break label$2;
    }
    $4 = (($2 | 0) / (2 | 0) | 0) + $2 | 0;
   }
   $3 = ($4 | 0) > ($3 | 0) ? $4 : $3;
   if (($2 | 0) >= ($3 | 0)) {
    break label$1
   }
   $2 = Math_imul($3, 36);
   label$4 : {
    $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$4) {
     break label$4
    }
    $4 = $4 + 184 | 0;
    HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
   }
   $2 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($2, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
   label$5 : {
    $4 = HEAP32[($0 + 23360 | 0) >> 2] | 0;
    if (!$4) {
     break label$5
    }
    __memcpy($2 | 0, $4 | 0, Math_imul(HEAP32[($0 + 23352 | 0) >> 2] | 0, 36) | 0) | 0;
    label$6 : {
     $4 = HEAP32[($0 + 23360 | 0) >> 2] | 0;
     if (!$4) {
      break label$6
     }
     $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$5) {
      break label$6
     }
     $5 = $5 + 184 | 0;
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($4, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   HEAP32[($0 + 23356 | 0) >> 2] = $3;
   HEAP32[($0 + 23360 | 0) >> 2] = $2;
   $2 = HEAP32[($0 + 23352 | 0) >> 2] | 0;
  }
  $2 = (HEAP32[($0 + 23360 | 0) >> 2] | 0) + Math_imul($2, 36) | 0;
  i64toi32_i32$0 = 0;
  HEAP32[($2 + 4 | 0) >> 2] = 0;
  HEAP32[($2 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[$2 >> 2] = 2;
  HEAP32[($2 + 32 | 0) >> 2] = 0;
  HEAP32[($2 + 28 | 0) >> 2] = $1;
  HEAP8[($2 + 24 | 0) >> 0] = 0;
  i64toi32_i32$0 = 1056964608;
  HEAP32[($2 + 16 | 0) >> 2] = -1;
  HEAP32[($2 + 20 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($2 + 12 | 0) >> 2] = 0;
  HEAP32[($0 + 23352 | 0) >> 2] = (HEAP32[($0 + 23352 | 0) >> 2] | 0) + 1 | 0;
 }
 
 function ImGuiDockNode__ImGuiDockNode_28unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2 = 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 104 | 0;
  i64toi32_i32$0 = -1;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = $1;
  HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 0;
  i64toi32_i32$1 = i64toi32_i32$1 + 40 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0 + 84 | 0) >> 2] = -1;
  i64toi32_i32$1 = $0 + 88 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 96 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 60 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 68 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0 + 105 | 0) >> 0] = 1;
  HEAP32[($0 + 128 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0 + 120 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 140 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 136 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 152 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 132 | 0) >> 2] = -1;
  $1 = i64toi32_i32$1 + 158 | 0;
  $2 = HEAPU8[$1 >> 0] | 0;
  HEAP16[(i64toi32_i32$1 + 156 | 0) >> 1] = 521;
  HEAP8[$1 >> 0] = (($2 << 16 | 0) & 15728640 | 0) >>> 16 | 0;
  return i64toi32_i32$1 | 0;
 }
 
 function ImGuiDockNode___ImGuiDockNode_28_29($0) {
  $0 = $0 | 0;
  var $2 = 0, $3 = 0, $1 = 0;
  label$1 : {
   $1 = HEAP32[($0 + 48 | 0) >> 2] | 0;
   if (!$1) {
    break label$1
   }
   label$2 : {
    $2 = HEAP32[($1 + 140 | 0) >> 2] | 0;
    if (!$2) {
     break label$2
    }
    label$3 : {
     $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$3) {
      break label$3
     }
     $3 = $3 + 184 | 0;
     HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($2, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   label$4 : {
    $2 = HEAP32[($1 + 8 | 0) >> 2] | 0;
    if (!$2) {
     break label$4
    }
    label$5 : {
     $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$3) {
      break label$5
     }
     $3 = $3 + 184 | 0;
     HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1 | 0;
    }
    FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($2, HEAP32[(0 + 92728 | 0) >> 2] | 0);
   }
   label$6 : {
    $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$2) {
     break label$6
    }
    $2 = $2 + 184 | 0;
    HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1 | 0;
   }
   FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($1, HEAP32[(0 + 92728 | 0) >> 2] | 0);
  }
  HEAP32[($0 + 48 | 0) >> 2] = 0;
  HEAP32[($0 + 28 | 0) >> 2] = 0;
  HEAP32[($0 + 32 | 0) >> 2] = 0;
  label$7 : {
   $1 = HEAP32[($0 + 44 | 0) >> 2] | 0;
   if (!$1) {
    break label$7
   }
   label$8 : {
    $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    if (!$2) {
     break label$8
    }
    $2 = $2 + 184 | 0;
    HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1 | 0;
   }
   FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($1, HEAP32[(0 + 92728 | 0) >> 2] | 0);
  }
  return $0 | 0;
 }
 
 function MallocWrapper_28unsigned_20long_2c_20void__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return malloc($0 | 0) | 0 | 0;
 }
 
 function FreeWrapper_28void__2c_20void__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  free($0 | 0);
 }
 
 function ImVector_ImDrawCmd___push_front_28ImDrawCmd_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $4 = 0, $5 = 0, $141 = 0, $146 = 0, $151 = 0, $156 = 0, $161 = 0;
  label$1 : {
   label$2 : {
    $2 = HEAP32[$0 >> 2] | 0;
    if ($2) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if (!(HEAP32[($0 + 4 | 0) >> 2] | 0)) {
       break label$4
      }
      $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      $2 = 0;
      break label$3;
     }
     label$5 : {
      $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$3) {
       break label$5
      }
      $3 = $3 + 184 | 0;
      HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1 | 0;
     }
     $3 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0](320, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
     label$6 : {
      $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      if (!$2) {
       break label$6
      }
      __memcpy($3 | 0, $2 | 0, Math_imul(HEAP32[$0 >> 2] | 0, 40) | 0) | 0;
      label$7 : {
       $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       if (!$2) {
        break label$7
       }
       $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
       if (!$4) {
        break label$7
       }
       $4 = $4 + 184 | 0;
       HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + -1 | 0;
      }
      FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($2, HEAP32[(0 + 92728 | 0) >> 2] | 0);
     }
     HEAP32[($0 + 4 | 0) >> 2] = 8;
     HEAP32[($0 + 8 | 0) >> 2] = $3;
     $2 = HEAP32[$0 >> 2] | 0;
    }
    $3 = $3 + Math_imul($2, 40) | 0;
    break label$1;
   }
   $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   label$8 : {
    if (($2 | 0) != (HEAP32[($0 + 4 | 0) >> 2] | 0 | 0)) {
     break label$8
    }
    $4 = (($2 | 0) / (2 | 0) | 0) + $2 | 0;
    $5 = $2 + 1 | 0;
    $4 = ($4 | 0) > ($5 | 0) ? $4 : $5;
    if (($2 | 0) >= ($4 | 0)) {
     break label$8
    }
    $3 = Math_imul($4, 40);
    label$9 : {
     $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$2) {
      break label$9
     }
     $2 = $2 + 184 | 0;
     HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1 | 0;
    }
    $3 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($3, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
    label$10 : {
     $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     if (!$2) {
      break label$10
     }
     __memcpy($3 | 0, $2 | 0, Math_imul(HEAP32[$0 >> 2] | 0, 40) | 0) | 0;
     label$11 : {
      $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      if (!$2) {
       break label$11
      }
      $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$5) {
       break label$11
      }
      $5 = $5 + 184 | 0;
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1 | 0;
     }
     FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($2, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    }
    HEAP32[($0 + 4 | 0) >> 2] = $4;
    HEAP32[($0 + 8 | 0) >> 2] = $3;
    $2 = HEAP32[$0 >> 2] | 0;
   }
   if (($2 | 0) < (1 | 0)) {
    break label$1
   }
   memmove($3 + 40 | 0 | 0, $3 | 0, Math_imul($2, 40) | 0) | 0;
   $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
  }
  i64toi32_i32$2 = $1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $141 = i64toi32_i32$0;
  i64toi32_i32$0 = $3;
  HEAP32[$3 >> 2] = $141;
  HEAP32[($3 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 32 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $146 = i64toi32_i32$1;
  i64toi32_i32$1 = $3 + 32 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $146;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1 + 24 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $151 = i64toi32_i32$0;
  i64toi32_i32$0 = $3 + 24 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $151;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1 + 16 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $156 = i64toi32_i32$1;
  i64toi32_i32$1 = $3 + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $156;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $161 = i64toi32_i32$0;
  i64toi32_i32$0 = $3 + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $161;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 1 | 0;
 }
 
 function DockNodeTreeUpdateSplitterFindTouchingNode_28ImGuiDockNode__2c_20ImGuiAxis_2c_20int_2c_20ImVector_ImGuiDockNode____29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $4 = HEAP32[($0 + 28 | 0) >> 2] | 0;
     if ($4) {
      break label$3
     }
     $5 = $0;
     break label$2;
    }
    $6 = $0 + 28 | 0;
    $5 = $0;
    label$4 : {
     switch ($2 | 0) {
     case 0:
      label$7 : while (1) {
       label$8 : {
        if (!((HEAPU16[($4 + 156 | 0) >> 1] | 0) & 512 | 0)) {
         break label$8
        }
        DockNodeTreeUpdateSplitterFindTouchingNode_28ImGuiDockNode__2c_20ImGuiAxis_2c_20int_2c_20ImVector_ImGuiDockNode____29($4 | 0, $1 | 0, 0 | 0, $3 | 0);
       }
       $5 = HEAP32[($0 + 32 | 0) >> 2] | 0;
       if (!((HEAPU16[($5 + 156 | 0) >> 1] | 0) & 512 | 0)) {
        break label$1
       }
       label$9 : {
        if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
         break label$9
        }
        if ((HEAPU16[((HEAP32[$6 >> 2] | 0) + 156 | 0) >> 1] | 0) & 512 | 0) {
         break label$1
        }
       }
       $6 = $5 + 28 | 0;
       $0 = $5;
       $4 = HEAP32[($0 + 28 | 0) >> 2] | 0;
       if ($4) {
        continue label$7
       }
       break label$2;
      };
     case 1:
      label$10 : while (1) {
       label$11 : {
        if (!((HEAPU16[($4 + 156 | 0) >> 1] | 0) & 512 | 0)) {
         break label$11
        }
        label$12 : {
         if ((HEAP32[($5 + 76 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
          break label$12
         }
         if ((HEAPU16[((HEAP32[($5 + 32 | 0) >> 2] | 0) + 156 | 0) >> 1] | 0) & 512 | 0) {
          break label$11
         }
        }
        DockNodeTreeUpdateSplitterFindTouchingNode_28ImGuiDockNode__2c_20ImGuiAxis_2c_20int_2c_20ImVector_ImGuiDockNode____29($4 | 0, $1 | 0, 1 | 0, $3 | 0);
       }
       $5 = HEAP32[($5 + 32 | 0) >> 2] | 0;
       if (!((HEAPU16[($5 + 156 | 0) >> 1] | 0) & 512 | 0)) {
        break label$1
       }
       $4 = HEAP32[($5 + 28 | 0) >> 2] | 0;
       if ($4) {
        continue label$10
       }
       break label$2;
      };
     default:
      break label$4;
     };
    }
    label$13 : while (1) {
     label$14 : {
      if (!((HEAPU16[($4 + 156 | 0) >> 1] | 0) & 512 | 0)) {
       break label$14
      }
      label$15 : {
       if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
        break label$15
       }
       if ((HEAPU16[((HEAP32[($0 + 32 | 0) >> 2] | 0) + 156 | 0) >> 1] | 0) & 512 | 0) {
        break label$14
       }
      }
      DockNodeTreeUpdateSplitterFindTouchingNode_28ImGuiDockNode__2c_20ImGuiAxis_2c_20int_2c_20ImVector_ImGuiDockNode____29($4 | 0, $1 | 0, $2 | 0, $3 | 0);
     }
     $5 = HEAP32[($0 + 32 | 0) >> 2] | 0;
     if (!((HEAPU16[($5 + 156 | 0) >> 1] | 0) & 512 | 0)) {
      break label$1
     }
     label$16 : {
      if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
       break label$16
      }
      if ((HEAPU16[((HEAP32[$6 >> 2] | 0) + 156 | 0) >> 1] | 0) & 512 | 0) {
       break label$1
      }
     }
     $6 = $5 + 28 | 0;
     $0 = $5;
     $4 = HEAP32[($0 + 28 | 0) >> 2] | 0;
     if ($4) {
      continue label$13
     }
     break label$13;
    };
   }
   label$17 : {
    $4 = HEAP32[$3 >> 2] | 0;
    if (($4 | 0) != (HEAP32[($3 + 4 | 0) >> 2] | 0 | 0)) {
     break label$17
    }
    $0 = $4 + 1 | 0;
    label$18 : {
     label$19 : {
      if ($4) {
       break label$19
      }
      $1 = 8;
      break label$18;
     }
     $1 = (($4 | 0) / (2 | 0) | 0) + $4 | 0;
    }
    $0 = ($1 | 0) > ($0 | 0) ? $1 : $0;
    if (($4 | 0) >= ($0 | 0)) {
     break label$17
    }
    $4 = $0 << 2 | 0;
    label$20 : {
     $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     if (!$1) {
      break label$20
     }
     $1 = $1 + 184 | 0;
     HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1 | 0;
    }
    $4 = FUNCTION_TABLE[HEAP32[(0 + 92288 | 0) >> 2] | 0 | 0]($4, HEAP32[(0 + 92728 | 0) >> 2] | 0) | 0;
    label$21 : {
     $1 = HEAP32[($3 + 8 | 0) >> 2] | 0;
     if (!$1) {
      break label$21
     }
     __memcpy($4 | 0, $1 | 0, (HEAP32[$3 >> 2] | 0) << 2 | 0 | 0) | 0;
     label$22 : {
      $1 = HEAP32[($3 + 8 | 0) >> 2] | 0;
      if (!$1) {
       break label$22
      }
      $6 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      if (!$6) {
       break label$22
      }
      $6 = $6 + 184 | 0;
      HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1 | 0;
     }
     FUNCTION_TABLE[HEAP32[(0 + 92292 | 0) >> 2] | 0 | 0]($1, HEAP32[(0 + 92728 | 0) >> 2] | 0);
    }
    HEAP32[($3 + 4 | 0) >> 2] = $0;
    HEAP32[($3 + 8 | 0) >> 2] = $4;
    $4 = HEAP32[$3 >> 2] | 0;
   }
   HEAP32[((HEAP32[($3 + 8 | 0) >> 2] | 0) + ($4 << 2 | 0) | 0) >> 2] = $5;
   HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1 | 0;
  }
 }
 
 function ImGui__StyleColorsDark_28ImGuiStyle__29($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $8 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $9 = Math_fround(0), $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $14 = Math_fround(0), $156 = 0, $160 = 0, $252 = 0, $256 = 0;
  label$1 : {
   if ($0) {
    break label$1
   }
   $0 = ImGui__GetStyle_28_29() | 0;
  }
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[(i64toi32_i32$1 + 200 | 0) >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 204 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 248 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 240 | 0;
  i64toi32_i32$0 = 1064346583;
  HEAP32[i64toi32_i32$1 >> 2] = 1031127695;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 232 | 0;
  i64toi32_i32$0 = 1031127695;
  HEAP32[i64toi32_i32$1 >> 2] = 1031127695;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 224 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1056964608;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 216 | 0;
  i64toi32_i32$0 = 1056964608;
  HEAP32[i64toi32_i32$1 >> 2] = 1056964608;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 208 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 256 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $1 = $0 + 288 | 0;
  i64toi32_i32$1 = $1;
  i64toi32_i32$0 = 1056964608;
  HEAP32[i64toi32_i32$1 >> 2] = 1056964608;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $2 = $0 + 280 | 0;
  i64toi32_i32$1 = $2;
  i64toi32_i32$0 = 1054615798;
  HEAP32[i64toi32_i32$1 >> 2] = 1054615798;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 272 | 0;
  i64toi32_i32$0 = 1064346583;
  HEAP32[i64toi32_i32$1 >> 2] = 1034147594;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 264 | 0;
  i64toi32_i32$0 = 1034147594;
  HEAP32[i64toi32_i32$1 >> 2] = 1034147594;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 296 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 304 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 312 | 0;
  i64toi32_i32$0 = 1049918177;
  HEAP32[i64toi32_i32$1 >> 2] = 1042536202;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 320 | 0;
  i64toi32_i32$0 = 1057635697;
  HEAP32[i64toi32_i32$1 >> 2] = 1056293519;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 328 | 0;
  i64toi32_i32$0 = 1058474557;
  HEAP32[i64toi32_i32$1 >> 2] = 1048911544;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 336 | 0;
  i64toi32_i32$0 = 1053609165;
  HEAP32[i64toi32_i32$1 >> 2] = 1065017672;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 344 | 0;
  i64toi32_i32$0 = 1058474557;
  HEAP32[i64toi32_i32$1 >> 2] = 1048911544;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 352 | 0;
  i64toi32_i32$0 = 1059816735;
  HEAP32[i64toi32_i32$1 >> 2] = 1065017672;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $3 = $0 + 360 | 0;
  i64toi32_i32$1 = $3;
  i64toi32_i32$0 = 1025758986;
  HEAP32[i64toi32_i32$1 >> 2] = 1025758986;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $4 = $0 + 368 | 0;
  i64toi32_i32$1 = $4;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1025758986;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 376 | 0;
  i64toi32_i32$0 = 1049918177;
  HEAP32[i64toi32_i32$1 >> 2] = 1042536202;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $5 = $0 + 384 | 0;
  i64toi32_i32$1 = $5;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1056293519;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 392 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 400 | 0;
  i64toi32_i32$0 = 1057132380;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 408 | 0;
  i64toi32_i32$0 = 1041194025;
  HEAP32[i64toi32_i32$1 >> 2] = 1041194025;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 416 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1041194025;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 424 | 0;
  i64toi32_i32$0 = 1017370378;
  HEAP32[i64toi32_i32$1 >> 2] = 1017370378;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 432 | 0;
  i64toi32_i32$0 = 1057467924;
  HEAP32[i64toi32_i32$1 >> 2] = 1017370378;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 440 | 0;
  i64toi32_i32$0 = 1050589266;
  HEAP32[i64toi32_i32$1 >> 2] = 1050589266;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 448 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1050589266;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 456 | 0;
  i64toi32_i32$0 = 1053944709;
  HEAP32[i64toi32_i32$1 >> 2] = 1053944709;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 464 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1053944709;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 472 | 0;
  i64toi32_i32$0 = 1057132380;
  HEAP32[i64toi32_i32$1 >> 2] = 1057132380;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 480 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1057132380;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 488 | 0;
  i64toi32_i32$0 = 1058474557;
  HEAP32[i64toi32_i32$1 >> 2] = 1048911544;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 496 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1065017672;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 504 | 0;
  i64toi32_i32$0 = 1057300152;
  HEAP32[i64toi32_i32$1 >> 2] = 1047904911;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 512 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1063339950;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 520 | 0;
  i64toi32_i32$0 = 1058474557;
  HEAP32[i64toi32_i32$1 >> 2] = 1048911544;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 528 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1065017672;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 536 | 0;
  i64toi32_i32$0 = 1058474557;
  HEAP32[i64toi32_i32$1 >> 2] = 1048911544;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 544 | 0;
  i64toi32_i32$0 = 1053609165;
  HEAP32[i64toi32_i32$1 >> 2] = 1065017672;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 552 | 0;
  i64toi32_i32$0 = 1058474557;
  HEAP32[i64toi32_i32$1 >> 2] = 1048911544;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 560 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1065017672;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 568 | 0;
  i64toi32_i32$0 = 1057467924;
  HEAP32[i64toi32_i32$1 >> 2] = 1031127695;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 576 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1065017672;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 584 | 0;
  i64toi32_i32$0 = 1058474557;
  HEAP32[i64toi32_i32$1 >> 2] = 1048911544;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 592 | 0;
  i64toi32_i32$0 = 1050589266;
  HEAP32[i64toi32_i32$1 >> 2] = 1065017672;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $6 = $0 + 600 | 0;
  i64toi32_i32$1 = $6;
  i64toi32_i32$0 = 1058474557;
  HEAP32[i64toi32_i32$1 >> 2] = 1048911544;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7 = $0 + 608 | 0;
  i64toi32_i32$1 = $7;
  i64toi32_i32$0 = 1061997773;
  HEAP32[i64toi32_i32$1 >> 2] = 1065017672;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 616 | 0;
  i64toi32_i32$0 = 1058474557;
  HEAP32[i64toi32_i32$1 >> 2] = 1048911544;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 624 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1065017672;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 720 | 0;
  i64toi32_i32$0 = 1064514355;
  HEAP32[i64toi32_i32$1 >> 2] = 1065017672;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 712 | 0;
  i64toi32_i32$0 = 1058474557;
  HEAP32[i64toi32_i32$1 >> 2] = 1048911544;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 704 | 0;
  i64toi32_i32$0 = 1059816735;
  HEAP32[i64toi32_i32$1 >> 2] = 1065017672;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 696 | 0;
  i64toi32_i32$0 = 1058474557;
  HEAP32[i64toi32_i32$1 >> 2] = 1048911544;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 688 | 0;
  i64toi32_i32$0 = 1045220557;
  HEAP32[i64toi32_i32$1 >> 2] = 1065017672;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 680 | 0;
  i64toi32_i32$0 = 1058474557;
  HEAP32[i64toi32_i32$1 >> 2] = 1048911544;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 672 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1061158912;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 664 | 0;
  i64toi32_i32$0 = 1053609165;
  HEAP32[i64toi32_i32$1 >> 2] = 1036831949;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 656 | 0;
  i64toi32_i32$0 = 1061662228;
  HEAP32[i64toi32_i32$1 >> 2] = 1061158912;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 648 | 0;
  i64toi32_i32$0 = 1053609165;
  HEAP32[i64toi32_i32$1 >> 2] = 1036831949;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0 + 728 | 0) >> 2] = 1043878379;
  i64toi32_i32$2 = $1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $156 = i64toi32_i32$0;
  i64toi32_i32$0 = $0 + 640 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $156;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $160 = i64toi32_i32$1;
  i64toi32_i32$1 = $0 + 632 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $160;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $8 = Math_fround(HEAPF32[($0 + 388 | 0) >> 2]);
  $9 = Math_fround(Math_fround(Math_fround($8 + Math_fround(-.3100000023841858)) * Math_fround(.800000011920929)) + Math_fround(.3100000023841858));
  HEAPF32[($0 + 740 | 0) >> 2] = $9;
  $10 = Math_fround(Math_fround(HEAPF32[$5 >> 2]) + Math_fround(-.9800000190734863));
  $11 = Math_fround(Math_fround($10 * Math_fround(.800000011920929)) + Math_fround(.9800000190734863));
  HEAPF32[($0 + 736 | 0) >> 2] = $11;
  $12 = Math_fround(Math_fround(HEAPF32[($0 + 380 | 0) >> 2]) + Math_fround(-.5899999737739563));
  $13 = Math_fround(Math_fround($12 * Math_fround(.800000011920929)) + Math_fround(.5899999737739563));
  HEAPF32[($0 + 732 | 0) >> 2] = $13;
  $8 = Math_fround(Math_fround(Math_fround($8 + Math_fround(-1.0)) * Math_fround(.6000000238418579)) + Math_fround(1.0));
  HEAPF32[($0 + 772 | 0) >> 2] = $8;
  $10 = Math_fround(Math_fround($10 * Math_fround(.6000000238418579)) + Math_fround(.9800000190734863));
  HEAPF32[($0 + 768 | 0) >> 2] = $10;
  $12 = Math_fround(Math_fround($12 * Math_fround(.6000000238418579)) + Math_fround(.5899999737739563));
  HEAPF32[($0 + 764 | 0) >> 2] = $12;
  HEAP32[($0 + 760 | 0) >> 2] = 1045220556;
  HEAP32[($0 + 776 | 0) >> 2] = 1032536982;
  i64toi32_i32$1 = $0 + 808 | 0;
  i64toi32_i32$0 = 1058474557;
  HEAP32[i64toi32_i32$1 >> 2] = 1048911544;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 816 | 0;
  i64toi32_i32$0 = 1060320051;
  HEAP32[i64toi32_i32$1 >> 2] = 1065017672;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 824 | 0;
  i64toi32_i32$0 = 1045220557;
  HEAP32[i64toi32_i32$1 >> 2] = 1045220557;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 832 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1045220557;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 840 | 0;
  i64toi32_i32$0 = 1058810102;
  HEAP32[i64toi32_i32$1 >> 2] = 1058810102;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 848 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1058810102;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 856 | 0;
  i64toi32_i32$0 = 1054615798;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 864 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1051931443;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 872 | 0;
  i64toi32_i32$0 = 1060320051;
  HEAP32[i64toi32_i32$1 >> 2] = 1063675494;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 880 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 888 | 0;
  i64toi32_i32$0 = 1058642330;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 896 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 904 | 0;
  i64toi32_i32$0 = 1044549468;
  HEAP32[i64toi32_i32$1 >> 2] = 1044549468;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 912 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1045220557;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 920 | 0;
  i64toi32_i32$0 = 1050589266;
  HEAP32[i64toi32_i32$1 >> 2] = 1050589266;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 928 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1051931443;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 936 | 0;
  i64toi32_i32$0 = 1047233823;
  HEAP32[i64toi32_i32$1 >> 2] = 1047233823;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 944 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1048576e3;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $7;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $252 = i64toi32_i32$0;
  i64toi32_i32$0 = $0 + 752 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $252;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $6;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $256 = i64toi32_i32$1;
  i64toi32_i32$1 = $0 + 744 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $256;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $14 = Math_fround(HEAPF32[($0 + 364 | 0) >> 2]);
  HEAPF32[($0 + 780 | 0) >> 2] = Math_fround(Math_fround(Math_fround($14 - $13) * Math_fround(.800000011920929)) + $13);
  $13 = Math_fround(HEAPF32[$4 >> 2]);
  HEAPF32[($0 + 784 | 0) >> 2] = Math_fround(Math_fround(Math_fround($13 - $11) * Math_fround(.800000011920929)) + $11);
  $11 = Math_fround(HEAPF32[($0 + 372 | 0) >> 2]);
  HEAPF32[($0 + 788 | 0) >> 2] = Math_fround(Math_fround(Math_fround($11 - $9) * Math_fround(.800000011920929)) + $9);
  HEAPF32[($0 + 792 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$3 >> 2]) + Math_fround(-.19999998807907104)) * Math_fround(.4000000059604645)) + Math_fround(.19999998807907104));
  HEAPF32[($0 + 796 | 0) >> 2] = Math_fround(Math_fround(Math_fround($14 - $12) * Math_fround(.4000000059604645)) + $12);
  HEAPF32[($0 + 800 | 0) >> 2] = Math_fround(Math_fround(Math_fround($13 - $10) * Math_fround(.4000000059604645)) + $10);
  HEAPF32[($0 + 804 | 0) >> 2] = Math_fround(Math_fround(Math_fround($11 - $8) * Math_fround(.4000000059604645)) + $8);
  i64toi32_i32$1 = $0 + 960 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 952 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 1072 | 0;
  i64toi32_i32$0 = 1051931443;
  HEAP32[i64toi32_i32$1 >> 2] = 1061997773;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 1064 | 0;
  i64toi32_i32$0 = 1061997773;
  HEAP32[i64toi32_i32$1 >> 2] = 1061997773;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 1056 | 0;
  i64toi32_i32$0 = 1045220557;
  HEAP32[i64toi32_i32$1 >> 2] = 1061997773;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 1048 | 0;
  i64toi32_i32$0 = 1061997773;
  HEAP32[i64toi32_i32$1 >> 2] = 1061997773;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 1040 | 0;
  i64toi32_i32$0 = 1060320051;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 1032 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 1024 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1065017672;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 1016 | 0;
  i64toi32_i32$0 = 1058474557;
  HEAP32[i64toi32_i32$1 >> 2] = 1048911544;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 1008 | 0;
  i64toi32_i32$0 = 1063675494;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 1e3 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 992 | 0;
  i64toi32_i32$0 = 1051931443;
  HEAP32[i64toi32_i32$1 >> 2] = 1065017672;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 984 | 0;
  i64toi32_i32$0 = 1058474557;
  HEAP32[i64toi32_i32$1 >> 2] = 1048911544;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 976 | 0;
  i64toi32_i32$0 = 1031127695;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 968 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function ImDrawListSharedData__ImDrawListSharedData_28_29($0) {
  $0 = $0 | 0;
  var $4 = Math_fround(0), $1 = 0, $3 = 0, $2 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $1 = 0;
  $2 = memset($0 | 0, 0 | 0, 512 | 0) | 0;
  $0 = $2 + 56 | 0;
  label$1 : while (1) {
   $3 = $0 + ($1 << 3 | 0) | 0;
   $4 = Math_fround($1 | 0);
   $4 = Math_fround(Math_fround(Math_fround($4 + $4) * Math_fround(3.1415927410125732)) / Math_fround(48.0));
   (wasm2js_i32$0 = $3, wasm2js_f32$0 = Math_fround(sinf(Math_fround($4)))), HEAPF32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_f32$0;
   (wasm2js_i32$0 = $3, wasm2js_f32$0 = Math_fround(cosf(Math_fround($4)))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
   $3 = $1 | 1 | 0;
   $5 = $0 + ($3 << 3 | 0) | 0;
   $4 = Math_fround($3 | 0);
   $4 = Math_fround(Math_fround(Math_fround($4 + $4) * Math_fround(3.1415927410125732)) / Math_fround(48.0));
   (wasm2js_i32$0 = $5, wasm2js_f32$0 = Math_fround(sinf(Math_fround($4)))), HEAPF32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_f32$0;
   (wasm2js_i32$0 = $5, wasm2js_f32$0 = Math_fround(cosf(Math_fround($4)))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
   $1 = $1 + 2 | 0;
   if (($1 | 0) != (48 | 0)) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($2 + 440 | 0) >> 2] = 0;
  return $2 | 0;
 }
 
 function ImDrawListSharedData__SetCircleTessellationMaxError_28float_29($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $4 = 0, $3 = Math_fround(0), $2 = 0;
  label$1 : {
   if (Math_fround(HEAPF32[($0 + 20 | 0) >> 2]) == $1) {
    break label$1
   }
   HEAP8[($0 + 444 | 0) >> 0] = 48;
   HEAPF32[($0 + 20 | 0) >> 2] = $1;
   $2 = 1;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      $3 = Math_fround($2 | 0);
      $3 = Math_fround(Math_ceil(Math_fround(Math_fround(3.1415927410125732) / Math_fround(acosf(Math_fround(Math_fround(Math_fround(1.0) - Math_fround(($3 > $1 ? $1 : $3) / $3))))))));
      if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
       break label$4
      }
      $4 = ~~$3;
      break label$3;
     }
     $4 = -2147483648;
    }
    $4 = (($4 + 1 | 0 | 0) / (2 | 0) | 0) << 1 | 0;
    $4 = ($4 | 0) < (512 | 0) ? $4 : 512;
    HEAP8[(($0 + $2 | 0) + 444 | 0) >> 0] = ($4 | 0) > (4 | 0) ? $4 : 4;
    $2 = $2 + 1 | 0;
    if (($2 | 0) != (64 | 0)) {
     continue label$2
    }
    break label$2;
   };
   HEAPF32[($0 + 440 | 0) >> 2] = Math_fround($1 / Math_fround(2.1410584449768066e-03));
  }
 }
 
 function ImDrawList___ResetForNewFrame_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3 = 0;
  label$1 : {
   if ((HEAP32[($0 + 124 | 0) >> 2] | 0 | 0) < (2 | 0)) {
    break label$1
   }
   ImDrawListSplitter__Merge_28ImDrawList__29($0 + 120 | 0 | 0, $0 | 0);
  }
  label$2 : {
   if ((HEAP32[($0 + 4 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$2
   }
   $1 = ImGui__MemAlloc_28unsigned_20long_29(0 | 0) | 0;
   label$3 : {
    $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    if (!$2) {
     break label$3
    }
    __memcpy($1 | 0, $2 | 0, Math_imul(HEAP32[$0 >> 2] | 0, 40) | 0) | 0;
    ImGui__MemFree_28void__29(HEAP32[($0 + 8 | 0) >> 2] | 0 | 0);
   }
   HEAP32[($0 + 4 | 0) >> 2] = 0;
   HEAP32[($0 + 8 | 0) >> 2] = $1;
  }
  HEAP32[$0 >> 2] = 0;
  label$4 : {
   if ((HEAP32[($0 + 16 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$4
   }
   $1 = ImGui__MemAlloc_28unsigned_20long_29(0 | 0) | 0;
   label$5 : {
    $2 = HEAP32[($0 + 20 | 0) >> 2] | 0;
    if (!$2) {
     break label$5
    }
    __memcpy($1 | 0, $2 | 0, (HEAP32[($0 + 12 | 0) >> 2] | 0) << 1 | 0 | 0) | 0;
    ImGui__MemFree_28void__29(HEAP32[($0 + 20 | 0) >> 2] | 0 | 0);
   }
   HEAP32[($0 + 16 | 0) >> 2] = 0;
   HEAP32[($0 + 20 | 0) >> 2] = $1;
  }
  HEAP32[($0 + 12 | 0) >> 2] = 0;
  label$6 : {
   if ((HEAP32[($0 + 28 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$6
   }
   $1 = ImGui__MemAlloc_28unsigned_20long_29(0 | 0) | 0;
   label$7 : {
    $2 = HEAP32[($0 + 32 | 0) >> 2] | 0;
    if (!$2) {
     break label$7
    }
    __memcpy($1 | 0, $2 | 0, Math_imul(HEAP32[($0 + 24 | 0) >> 2] | 0, 20) | 0) | 0;
    ImGui__MemFree_28void__29(HEAP32[($0 + 32 | 0) >> 2] | 0 | 0);
   }
   HEAP32[($0 + 28 | 0) >> 2] = 0;
   HEAP32[($0 + 32 | 0) >> 2] = $1;
  }
  HEAP32[($0 + 24 | 0) >> 2] = 0;
  $1 = HEAP32[((HEAP32[($0 + 44 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[($0 + 96 | 0) >> 2] = 0;
  HEAP32[($0 + 100 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0 + 36 | 0) >> 2] = $1;
  i64toi32_i32$1 = $0 + 104 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 112 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[($0 + 52 | 0) >> 2] = 0;
  HEAP32[($0 + 56 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0 + 40 | 0) >> 2] = 0;
  label$8 : {
   if ((HEAP32[($0 + 64 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$8
   }
   $1 = ImGui__MemAlloc_28unsigned_20long_29(0 | 0) | 0;
   label$9 : {
    $2 = HEAP32[($0 + 68 | 0) >> 2] | 0;
    if (!$2) {
     break label$9
    }
    __memcpy($1 | 0, $2 | 0, (HEAP32[($0 + 60 | 0) >> 2] | 0) << 4 | 0 | 0) | 0;
    ImGui__MemFree_28void__29(HEAP32[($0 + 68 | 0) >> 2] | 0 | 0);
   }
   HEAP32[($0 + 64 | 0) >> 2] = 0;
   HEAP32[($0 + 68 | 0) >> 2] = $1;
  }
  HEAP32[($0 + 60 | 0) >> 2] = 0;
  label$10 : {
   if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$10
   }
   $1 = ImGui__MemAlloc_28unsigned_20long_29(0 | 0) | 0;
   label$11 : {
    $2 = HEAP32[($0 + 80 | 0) >> 2] | 0;
    if (!$2) {
     break label$11
    }
    __memcpy($1 | 0, $2 | 0, (HEAP32[($0 + 72 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
    ImGui__MemFree_28void__29(HEAP32[($0 + 80 | 0) >> 2] | 0 | 0);
   }
   HEAP32[($0 + 76 | 0) >> 2] = 0;
   HEAP32[($0 + 80 | 0) >> 2] = $1;
  }
  HEAP32[($0 + 72 | 0) >> 2] = 0;
  label$12 : {
   if ((HEAP32[($0 + 88 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$12
   }
   $1 = ImGui__MemAlloc_28unsigned_20long_29(0 | 0) | 0;
   label$13 : {
    $2 = HEAP32[($0 + 92 | 0) >> 2] | 0;
    if (!$2) {
     break label$13
    }
    __memcpy($1 | 0, $2 | 0, (HEAP32[($0 + 84 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
    ImGui__MemFree_28void__29(HEAP32[($0 + 92 | 0) >> 2] | 0 | 0);
   }
   HEAP32[($0 + 88 | 0) >> 2] = 0;
   HEAP32[($0 + 92 | 0) >> 2] = $1;
  }
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 1;
  HEAP32[($0 + 120 | 0) >> 2] = 0;
  HEAP32[($0 + 124 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0 + 84 | 0) >> 2] = 0;
  label$14 : {
   $1 = HEAP32[$0 >> 2] | 0;
   if (($1 | 0) != (HEAP32[($0 + 4 | 0) >> 2] | 0 | 0)) {
    break label$14
   }
   $2 = $1 + 1 | 0;
   label$15 : {
    label$16 : {
     if ($1) {
      break label$16
     }
     $3 = 8;
     break label$15;
    }
    $3 = (($1 | 0) / (2 | 0) | 0) + $1 | 0;
   }
   $2 = ($3 | 0) > ($2 | 0) ? $3 : $2;
   if (($1 | 0) >= ($2 | 0)) {
    break label$14
   }
   $1 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($2, 40) | 0) | 0;
   label$17 : {
    $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    if (!$3) {
     break label$17
    }
    __memcpy($1 | 0, $3 | 0, Math_imul(HEAP32[$0 >> 2] | 0, 40) | 0) | 0;
    ImGui__MemFree_28void__29(HEAP32[($0 + 8 | 0) >> 2] | 0 | 0);
   }
   HEAP32[($0 + 4 | 0) >> 2] = $2;
   HEAP32[($0 + 8 | 0) >> 2] = $1;
   $1 = HEAP32[$0 >> 2] | 0;
  }
  $1 = (HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul($1, 40) | 0;
  i64toi32_i32$1 = $1;
  i64toi32_i32$0 = 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0 + 140 | 0) >> 2] = 1065353216;
  HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 1 | 0;
 }
 
 function ImDrawListSplitter__Merge_28ImDrawList__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $5 = 0, $4 = 0, $7 = 0, i64toi32_i32$0 = 0, $6 = 0, i64toi32_i32$1 = 0, $9 = 0, $13 = 0, i64toi32_i32$2 = 0, $17 = 0, $11 = 0, $2 = 0, $8 = 0, $3 = 0, $12 = 0, $10 = 0, $18 = 0, $18$hi = 0, $15 = 0, $14 = 0, $16 = 0, $375 = 0, $409 = 0, $412 = 0, $470 = 0, $503 = 0, $508 = 0, $513 = 0, $523 = 0, $526 = 0, $583 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  label$1 : {
   if ((HEAP32[($0 + 4 | 0) >> 2] | 0 | 0) < (2 | 0)) {
    break label$1
   }
   $3 = 0;
   ImDrawListSplitter__SetCurrentChannel_28ImDrawList__2c_20int_29($0 | 0, $1 | 0, 0 | 0);
   label$2 : {
    label$3 : {
     $4 = HEAP32[$1 >> 2] | 0;
     if (($4 | 0) >= (1 | 0)) {
      break label$3
     }
     $5 = $4;
     break label$2;
    }
    $6 = HEAP32[($1 + 8 | 0) >> 2] | 0;
    label$4 : while (1) {
     label$5 : {
      $5 = $4 + -1 | 0;
      $7 = $6 + Math_imul($5, 40) | 0;
      if (!(HEAP32[($7 + 28 | 0) >> 2] | 0)) {
       break label$5
      }
      $5 = $4;
      break label$2;
     }
     label$6 : {
      if (!(HEAP32[($7 + 32 | 0) >> 2] | 0)) {
       break label$6
      }
      $5 = $4;
      break label$2;
     }
     HEAP32[$1 >> 2] = $5;
     $7 = $4 >>> 0 > 1 >>> 0;
     $4 = $5;
     if ($7) {
      continue label$4
     }
     break label$4;
    };
   }
   label$7 : {
    label$8 : {
     $7 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     if (($7 | 0) >= (1 | 0)) {
      break label$8
     }
     $8 = 0;
     break label$7;
    }
    $3 = 0;
    label$9 : {
     label$10 : {
      if (($5 | 0) < (1 | 0)) {
       break label$10
      }
      $4 = HEAP32[($1 + 8 | 0) >> 2] | 0;
      if (!$4) {
       break label$10
      }
      $9 = (Math_imul($5, 40) + $4 | 0) + -40 | 0;
      $4 = (HEAP32[($9 + 28 | 0) >> 2] | 0) + (HEAP32[($9 + 24 | 0) >> 2] | 0) | 0;
      break label$9;
     }
     $9 = 0;
     $4 = 0;
    }
    $8 = 0;
    if ($7 >>> 0 < 2 >>> 0) {
     break label$7
    }
    $8 = 0;
    $3 = 0;
    $10 = 1;
    label$11 : while (1) {
     label$12 : {
      label$13 : {
       label$14 : {
        label$15 : {
         $5 = (HEAP32[($0 + 16 | 0) >> 2] | 0) + Math_imul($10, 24) | 0;
         $11 = HEAP32[$5 >> 2] | 0;
         if (($11 | 0) < (1 | 0)) {
          break label$15
         }
         label$16 : {
          $6 = $11 + -1 | 0;
          $7 = (HEAP32[($5 + 8 | 0) >> 2] | 0) + Math_imul($6, 40) | 0;
          if (HEAP32[($7 + 28 | 0) >> 2] | 0) {
           break label$16
          }
          if (HEAP32[($7 + 32 | 0) >> 2] | 0) {
           break label$16
          }
          HEAP32[$5 >> 2] = $6;
          $11 = $6;
         }
         label$17 : {
          label$18 : {
           if (!$11) {
            break label$18
           }
           if (!$9) {
            break label$18
           }
           $7 = HEAP32[($5 + 8 | 0) >> 2] | 0;
           if (memcmp($9 | 0, $7 | 0, 24 | 0) | 0) {
            break label$17
           }
           if (HEAP32[($9 + 32 | 0) >> 2] | 0 | (HEAP32[($7 + 32 | 0) >> 2] | 0) | 0) {
            break label$17
           }
           HEAP32[($9 + 28 | 0) >> 2] = (HEAP32[($9 + 28 | 0) >> 2] | 0) + (HEAP32[($7 + 28 | 0) >> 2] | 0) | 0;
           $6 = HEAP32[($7 + 28 | 0) >> 2] | 0;
           memmove($7 | 0, $7 + 40 | 0 | 0, Math_imul($11, 40) + -40 | 0 | 0) | 0;
           $11 = (HEAP32[$5 >> 2] | 0) + -1 | 0;
           HEAP32[$5 >> 2] = $11;
           $4 = $6 + $4 | 0;
          }
          if (($11 | 0) < (1 | 0)) {
           break label$15
          }
         }
         $12 = $11 & 3 | 0;
         $13 = $11 + -1 | 0;
         $14 = Math_imul($13, 40);
         $7 = HEAP32[($5 + 8 | 0) >> 2] | 0;
         $15 = HEAP32[($5 + 12 | 0) >> 2] | 0;
         $6 = 0;
         if ($13 >>> 0 >= 3 >>> 0) {
          break label$14
         }
         $5 = 0;
         break label$13;
        }
        $15 = HEAP32[($5 + 12 | 0) >> 2] | 0;
        break label$12;
       }
       $16 = $11 & -4 | 0;
       $5 = 0;
       $13 = 0;
       label$19 : while (1) {
        $9 = $7 + Math_imul($5, 40) | 0;
        HEAP32[($9 + 24 | 0) >> 2] = $4;
        $17 = $7 + Math_imul($5 | 1 | 0, 40) | 0;
        $4 = (HEAP32[($9 + 28 | 0) >> 2] | 0) + $4 | 0;
        HEAP32[($17 + 24 | 0) >> 2] = $4;
        $9 = $7 + Math_imul($5 | 2 | 0, 40) | 0;
        $4 = (HEAP32[($17 + 28 | 0) >> 2] | 0) + $4 | 0;
        HEAP32[($9 + 24 | 0) >> 2] = $4;
        $17 = $7 + Math_imul($5 | 3 | 0, 40) | 0;
        $4 = (HEAP32[($9 + 28 | 0) >> 2] | 0) + $4 | 0;
        HEAP32[($17 + 24 | 0) >> 2] = $4;
        $4 = (HEAP32[($17 + 28 | 0) >> 2] | 0) + $4 | 0;
        $5 = $5 + 4 | 0;
        $13 = $13 + 4 | 0;
        if (($13 | 0) != ($16 | 0)) {
         continue label$19
        }
        break label$19;
       };
      }
      $9 = $7 + $14 | 0;
      if (!$12) {
       break label$12
      }
      label$20 : while (1) {
       $13 = $7 + Math_imul($5, 40) | 0;
       HEAP32[($13 + 24 | 0) >> 2] = $4;
       $5 = $5 + 1 | 0;
       $4 = (HEAP32[($13 + 28 | 0) >> 2] | 0) + $4 | 0;
       $6 = $6 + 1 | 0;
       if (($6 | 0) != ($12 | 0)) {
        continue label$20
       }
       break label$20;
      };
     }
     $3 = $15 + $3 | 0;
     $8 = $11 + $8 | 0;
     $10 = $10 + 1 | 0;
     if (($10 | 0) < (HEAP32[($0 + 4 | 0) >> 2] | 0 | 0)) {
      continue label$11
     }
     break label$11;
    };
    $5 = HEAP32[$1 >> 2] | 0;
   }
   label$21 : {
    $4 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    $5 = $5 + $8 | 0;
    if (($4 | 0) >= ($5 | 0)) {
     break label$21
    }
    label$22 : {
     label$23 : {
      if ($4) {
       break label$23
      }
      $7 = 8;
      break label$22;
     }
     $7 = (($4 | 0) / (2 | 0) | 0) + $4 | 0;
    }
    $7 = ($7 | 0) > ($5 | 0) ? $7 : $5;
    if (($4 | 0) >= ($7 | 0)) {
     break label$21
    }
    $4 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($7, 40) | 0) | 0;
    label$24 : {
     $6 = HEAP32[($1 + 8 | 0) >> 2] | 0;
     if (!$6) {
      break label$24
     }
     __memcpy($4 | 0, $6 | 0, Math_imul(HEAP32[$1 >> 2] | 0, 40) | 0) | 0;
     ImGui__MemFree_28void__29(HEAP32[($1 + 8 | 0) >> 2] | 0 | 0);
    }
    HEAP32[($1 + 4 | 0) >> 2] = $7;
    HEAP32[($1 + 8 | 0) >> 2] = $4;
   }
   HEAP32[$1 >> 2] = $5;
   label$25 : {
    $7 = HEAP32[($1 + 16 | 0) >> 2] | 0;
    $6 = HEAP32[($1 + 12 | 0) >> 2] | 0;
    $4 = $6 + $3 | 0;
    if (($7 | 0) >= ($4 | 0)) {
     break label$25
    }
    label$26 : {
     label$27 : {
      if ($7) {
       break label$27
      }
      $13 = 8;
      break label$26;
     }
     $13 = (($7 | 0) / (2 | 0) | 0) + $7 | 0;
    }
    $13 = ($13 | 0) > ($4 | 0) ? $13 : $4;
    if (($7 | 0) >= ($13 | 0)) {
     break label$25
    }
    $5 = ImGui__MemAlloc_28unsigned_20long_29($13 << 1 | 0 | 0) | 0;
    label$28 : {
     $7 = HEAP32[($1 + 20 | 0) >> 2] | 0;
     if (!$7) {
      break label$28
     }
     __memcpy($5 | 0, $7 | 0, (HEAP32[($1 + 12 | 0) >> 2] | 0) << 1 | 0 | 0) | 0;
     ImGui__MemFree_28void__29(HEAP32[($1 + 20 | 0) >> 2] | 0 | 0);
    }
    HEAP32[($1 + 16 | 0) >> 2] = $13;
    HEAP32[($1 + 20 | 0) >> 2] = $5;
    $5 = HEAP32[$1 >> 2] | 0;
   }
   HEAP32[($1 + 12 | 0) >> 2] = $4;
   $6 = (HEAP32[($1 + 20 | 0) >> 2] | 0) + ($6 << 1 | 0) | 0;
   label$29 : {
    if ((HEAP32[($0 + 4 | 0) >> 2] | 0 | 0) < (2 | 0)) {
     break label$29
    }
    $13 = ((HEAP32[($1 + 8 | 0) >> 2] | 0) + Math_imul($5, 40) | 0) + Math_imul(0 - $8 | 0, 40) | 0;
    $4 = 1;
    label$30 : while (1) {
     label$31 : {
      $5 = (HEAP32[($0 + 16 | 0) >> 2] | 0) + Math_imul($4, 24) | 0;
      $7 = HEAP32[$5 >> 2] | 0;
      if (!$7) {
       break label$31
      }
      $7 = Math_imul($7, 40);
      $13 = (__memcpy($13 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, $7 | 0) | 0) + $7 | 0;
     }
     label$32 : {
      $7 = HEAP32[($5 + 12 | 0) >> 2] | 0;
      if (!$7) {
       break label$32
      }
      $375 = HEAP32[($5 + 20 | 0) >> 2] | 0;
      $5 = $7 << 1 | 0;
      $6 = (__memcpy($6 | 0, $375 | 0, $5 | 0) | 0) + $5 | 0;
     }
     $4 = $4 + 1 | 0;
     if (($4 | 0) < (HEAP32[($0 + 4 | 0) >> 2] | 0 | 0)) {
      continue label$30
     }
     break label$30;
    };
    $5 = HEAP32[$1 >> 2] | 0;
   }
   HEAP32[($1 + 56 | 0) >> 2] = $6;
   label$33 : {
    label$34 : {
     if (!$5) {
      break label$34
     }
     $7 = HEAP32[($1 + 8 | 0) >> 2] | 0;
     $6 = $5 + -1 | 0;
     if (!(HEAP32[(($7 + Math_imul($6, 40) | 0) + 32 | 0) >> 2] | 0)) {
      break label$33
     }
    }
    $4 = $2 + 8 | 0;
    i64toi32_i32$2 = $1 + 104 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $409 = i64toi32_i32$0;
    i64toi32_i32$0 = $4;
    HEAP32[$4 >> 2] = $409;
    HEAP32[($4 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $1;
    i64toi32_i32$1 = HEAP32[($1 + 96 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($1 + 100 | 0) >> 2] | 0;
    $412 = i64toi32_i32$1;
    i64toi32_i32$1 = $2;
    HEAP32[i64toi32_i32$1 >> 2] = $412;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $7 = HEAP32[($1 + 116 | 0) >> 2] | 0;
    $6 = HEAP32[($1 + 112 | 0) >> 2] | 0;
    $13 = HEAP32[($1 + 12 | 0) >> 2] | 0;
    label$35 : {
     if (($5 | 0) != (HEAP32[($1 + 4 | 0) >> 2] | 0 | 0)) {
      break label$35
     }
     $17 = $5 + 1 | 0;
     $9 = 8;
     label$36 : {
      if (!$5) {
       break label$36
      }
      $9 = (($5 | 0) / (2 | 0) | 0) + $5 | 0;
     }
     $9 = ($9 | 0) > ($17 | 0) ? $9 : $17;
     if (($5 | 0) >= ($9 | 0)) {
      break label$35
     }
     $5 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($9, 40) | 0) | 0;
     label$37 : {
      $17 = HEAP32[($1 + 8 | 0) >> 2] | 0;
      if (!$17) {
       break label$37
      }
      __memcpy($5 | 0, $17 | 0, Math_imul(HEAP32[$1 >> 2] | 0, 40) | 0) | 0;
      ImGui__MemFree_28void__29(HEAP32[($1 + 8 | 0) >> 2] | 0 | 0);
     }
     HEAP32[($1 + 4 | 0) >> 2] = $9;
     HEAP32[($1 + 8 | 0) >> 2] = $5;
     $5 = HEAP32[$1 >> 2] | 0;
    }
    $5 = (HEAP32[($1 + 8 | 0) >> 2] | 0) + Math_imul($5, 40) | 0;
    i64toi32_i32$2 = $2;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $470 = i64toi32_i32$0;
    i64toi32_i32$0 = $5;
    HEAP32[$5 >> 2] = $470;
    HEAP32[($5 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $4;
    i64toi32_i32$1 = HEAP32[$4 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($4 + 4 | 0) >> 2] | 0;
    $18 = i64toi32_i32$1;
    $18$hi = i64toi32_i32$0;
    i64toi32_i32$1 = $5;
    i64toi32_i32$0 = 0;
    HEAP32[($5 + 28 | 0) >> 2] = 0;
    HEAP32[($5 + 32 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($5 + 24 | 0) >> 2] = $13;
    HEAP32[($5 + 20 | 0) >> 2] = $7;
    HEAP32[($5 + 16 | 0) >> 2] = $6;
    i64toi32_i32$0 = $18$hi;
    i64toi32_i32$1 = $5 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $18;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($5 + 36 | 0) >> 2] = 0;
    $6 = HEAP32[$1 >> 2] | 0;
    $5 = $6 + 1 | 0;
    HEAP32[$1 >> 2] = $5;
    $7 = HEAP32[($1 + 8 | 0) >> 2] | 0;
   }
   $4 = $1 + 96 | 0;
   label$38 : {
    label$39 : {
     $6 = $7 + Math_imul($6, 40) | 0;
     if (HEAP32[($6 + 28 | 0) >> 2] | 0) {
      break label$39
     }
     i64toi32_i32$2 = $4;
     i64toi32_i32$0 = HEAP32[$4 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($4 + 4 | 0) >> 2] | 0;
     $503 = i64toi32_i32$0;
     i64toi32_i32$0 = $6;
     HEAP32[i64toi32_i32$0 >> 2] = $503;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $4 + 16 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $508 = i64toi32_i32$1;
     i64toi32_i32$1 = $6 + 16 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $508;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $4 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $513 = i64toi32_i32$0;
     i64toi32_i32$0 = $6 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $513;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     break label$38;
    }
    if (!(memcmp($6 | 0, $4 | 0, 24 | 0) | 0)) {
     break label$38
    }
    $6 = $2 + 8 | 0;
    i64toi32_i32$2 = $4 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $523 = i64toi32_i32$1;
    i64toi32_i32$1 = $6;
    HEAP32[i64toi32_i32$1 >> 2] = $523;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $4;
    i64toi32_i32$0 = HEAP32[$4 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($4 + 4 | 0) >> 2] | 0;
    $526 = i64toi32_i32$0;
    i64toi32_i32$0 = $2;
    HEAP32[i64toi32_i32$0 >> 2] = $526;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $4 = HEAP32[($1 + 116 | 0) >> 2] | 0;
    $13 = HEAP32[($1 + 112 | 0) >> 2] | 0;
    $9 = HEAP32[($1 + 12 | 0) >> 2] | 0;
    label$40 : {
     if (($5 | 0) != (HEAP32[($1 + 4 | 0) >> 2] | 0 | 0)) {
      break label$40
     }
     $12 = $5 + 1 | 0;
     $17 = 8;
     label$41 : {
      if (!$5) {
       break label$41
      }
      $17 = (($5 | 0) / (2 | 0) | 0) + $5 | 0;
     }
     $17 = ($17 | 0) > ($12 | 0) ? $17 : $12;
     if (($5 | 0) >= ($17 | 0)) {
      break label$40
     }
     $7 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($17, 40) | 0) | 0;
     label$42 : {
      $5 = HEAP32[($1 + 8 | 0) >> 2] | 0;
      if (!$5) {
       break label$42
      }
      __memcpy($7 | 0, $5 | 0, Math_imul(HEAP32[$1 >> 2] | 0, 40) | 0) | 0;
      ImGui__MemFree_28void__29(HEAP32[($1 + 8 | 0) >> 2] | 0 | 0);
     }
     HEAP32[($1 + 4 | 0) >> 2] = $17;
     HEAP32[($1 + 8 | 0) >> 2] = $7;
     $5 = HEAP32[$1 >> 2] | 0;
    }
    $5 = $7 + Math_imul($5, 40) | 0;
    i64toi32_i32$2 = $2;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $583 = i64toi32_i32$1;
    i64toi32_i32$1 = $5;
    HEAP32[$5 >> 2] = $583;
    HEAP32[($5 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $6;
    i64toi32_i32$0 = HEAP32[$6 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($6 + 4 | 0) >> 2] | 0;
    $18 = i64toi32_i32$0;
    $18$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $5;
    i64toi32_i32$1 = 0;
    HEAP32[($5 + 28 | 0) >> 2] = 0;
    HEAP32[($5 + 32 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[($5 + 24 | 0) >> 2] = $9;
    HEAP32[($5 + 20 | 0) >> 2] = $4;
    HEAP32[($5 + 16 | 0) >> 2] = $13;
    i64toi32_i32$1 = $18$hi;
    i64toi32_i32$0 = $5 + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $18;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[($5 + 36 | 0) >> 2] = 0;
    HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1 | 0;
   }
   HEAP32[($0 + 4 | 0) >> 2] = 1;
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function ImDrawListSplitter__SetCurrentChannel_28ImDrawList__2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $6 = 0, $4 = 0, $5 = 0, $3 = 0, $9 = 0, $7 = 0, $10 = 0, $7$hi = 0, $8 = 0, $11 = 0, $29 = 0, $44 = 0, $98 = 0, $101 = 0, $156 = 0, $187 = 0, $192 = 0, $197 = 0, $207 = 0, $210 = 0, $263 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  label$1 : {
   $4 = HEAP32[$0 >> 2] | 0;
   if (($4 | 0) == ($2 | 0)) {
    break label$1
   }
   $5 = $0 + 16 | 0;
   $4 = (HEAP32[$5 >> 2] | 0) + Math_imul($4, 24) | 0;
   i64toi32_i32$2 = $1;
   i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
   $29 = i64toi32_i32$0;
   i64toi32_i32$0 = $4;
   HEAP32[i64toi32_i32$0 >> 2] = $29;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $4 = $1 + 8 | 0;
   HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = HEAP32[$4 >> 2] | 0;
   $6 = (HEAP32[$5 >> 2] | 0) + Math_imul(HEAP32[$0 >> 2] | 0, 24) | 0;
   i64toi32_i32$2 = $1;
   i64toi32_i32$1 = HEAP32[($1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($1 + 16 | 0) >> 2] | 0;
   $44 = i64toi32_i32$1;
   i64toi32_i32$1 = $6;
   HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = $44;
   HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = i64toi32_i32$0;
   $6 = $1 + 20 | 0;
   HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = HEAP32[$6 >> 2] | 0;
   HEAP32[$0 >> 2] = $2;
   $0 = Math_imul($2, 24);
   $2 = (HEAP32[$5 >> 2] | 0) + $0 | 0;
   i64toi32_i32$2 = $2;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $7 = i64toi32_i32$0;
   $7$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $1;
   HEAP32[i64toi32_i32$0 >> 2] = $7;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[$4 >> 2] = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
   $0 = (HEAP32[$5 >> 2] | 0) + $0 | 0;
   i64toi32_i32$2 = $0;
   i64toi32_i32$1 = HEAP32[($0 + 12 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0 + 16 | 0) >> 2] | 0;
   $8 = i64toi32_i32$1;
   i64toi32_i32$1 = $1;
   HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = $8;
   HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = i64toi32_i32$0;
   $0 = HEAP32[($0 + 20 | 0) >> 2] | 0;
   HEAP32[$6 >> 2] = $0;
   $2 = $8;
   HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] = $0 + ($2 << 1 | 0) | 0;
   label$2 : {
    label$3 : {
     i64toi32_i32$0 = $7$hi;
     $0 = $7;
     if (!$0) {
      break label$3
     }
     $4 = HEAP32[($1 + 8 | 0) >> 2] | 0;
     if ($4) {
      break label$2
     }
    }
    i64toi32_i32$2 = $1 + 104 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $98 = i64toi32_i32$0;
    i64toi32_i32$0 = $3 + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $98;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $1;
    i64toi32_i32$1 = HEAP32[($1 + 96 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($1 + 100 | 0) >> 2] | 0;
    $101 = i64toi32_i32$1;
    i64toi32_i32$1 = $3;
    HEAP32[i64toi32_i32$1 >> 2] = $101;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $5 = HEAP32[($1 + 116 | 0) >> 2] | 0;
    $4 = HEAP32[($1 + 112 | 0) >> 2] | 0;
    label$4 : {
     if (($0 | 0) != (HEAP32[($1 + 4 | 0) >> 2] | 0 | 0)) {
      break label$4
     }
     $6 = $0 + 1 | 0;
     label$5 : {
      label$6 : {
       if ($0) {
        break label$6
       }
       $9 = 8;
       break label$5;
      }
      $9 = (($0 | 0) / (2 | 0) | 0) + $0 | 0;
     }
     $6 = ($9 | 0) > ($6 | 0) ? $9 : $6;
     if (($0 | 0) >= ($6 | 0)) {
      break label$4
     }
     $0 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($6, 40) | 0) | 0;
     label$7 : {
      $9 = HEAP32[($1 + 8 | 0) >> 2] | 0;
      if (!$9) {
       break label$7
      }
      __memcpy($0 | 0, $9 | 0, Math_imul(HEAP32[$1 >> 2] | 0, 40) | 0) | 0;
      ImGui__MemFree_28void__29(HEAP32[($1 + 8 | 0) >> 2] | 0 | 0);
     }
     HEAP32[($1 + 4 | 0) >> 2] = $6;
     HEAP32[($1 + 8 | 0) >> 2] = $0;
     $0 = HEAP32[$1 >> 2] | 0;
    }
    $0 = (HEAP32[($1 + 8 | 0) >> 2] | 0) + Math_imul($0, 40) | 0;
    i64toi32_i32$2 = $3;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $156 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $156;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $7 = i64toi32_i32$1;
    $7$hi = i64toi32_i32$0;
    i64toi32_i32$1 = $0;
    i64toi32_i32$0 = 0;
    HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = $2;
    HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = $5;
    HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = $4;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $7;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($0 + 36 | 0) >> 2] = 0;
    HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1 | 0;
    break label$1;
   }
   $5 = $1 + 96 | 0;
   label$8 : {
    $6 = $4 + Math_imul($0 + -1 | 0, 40) | 0;
    if (HEAP32[($6 + 28 | 0) >> 2] | 0) {
     break label$8
    }
    i64toi32_i32$2 = $5;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $187 = i64toi32_i32$0;
    i64toi32_i32$0 = $6;
    HEAP32[i64toi32_i32$0 >> 2] = $187;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$2 + 16 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $192 = i64toi32_i32$1;
    i64toi32_i32$1 = $6 + 16 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $192;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $5 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $197 = i64toi32_i32$0;
    i64toi32_i32$0 = $6 + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $197;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    break label$1;
   }
   if (!(memcmp($6 | 0, $5 | 0, 24 | 0) | 0)) {
    break label$1
   }
   $6 = $3 + 8 | 0;
   i64toi32_i32$2 = $5 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $207 = i64toi32_i32$1;
   i64toi32_i32$1 = $6;
   HEAP32[i64toi32_i32$1 >> 2] = $207;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $5;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $210 = i64toi32_i32$0;
   i64toi32_i32$0 = $3;
   HEAP32[i64toi32_i32$0 >> 2] = $210;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $5 = HEAP32[($1 + 116 | 0) >> 2] | 0;
   $9 = HEAP32[($1 + 112 | 0) >> 2] | 0;
   label$9 : {
    if (($0 | 0) != (HEAP32[($1 + 4 | 0) >> 2] | 0 | 0)) {
     break label$9
    }
    $10 = (($0 | 0) / (2 | 0) | 0) + $0 | 0;
    $11 = $0 + 1 | 0;
    $10 = ($10 | 0) > ($11 | 0) ? $10 : $11;
    if (($0 | 0) >= ($10 | 0)) {
     break label$9
    }
    $4 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($10, 40) | 0) | 0;
    label$10 : {
     $0 = HEAP32[($1 + 8 | 0) >> 2] | 0;
     if (!$0) {
      break label$10
     }
     __memcpy($4 | 0, $0 | 0, Math_imul(HEAP32[$1 >> 2] | 0, 40) | 0) | 0;
     ImGui__MemFree_28void__29(HEAP32[($1 + 8 | 0) >> 2] | 0 | 0);
    }
    HEAP32[($1 + 4 | 0) >> 2] = $10;
    HEAP32[($1 + 8 | 0) >> 2] = $4;
    $0 = HEAP32[$1 >> 2] | 0;
   }
   $0 = $4 + Math_imul($0, 40) | 0;
   i64toi32_i32$2 = $3;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $263 = i64toi32_i32$1;
   i64toi32_i32$1 = $0;
   HEAP32[i64toi32_i32$1 >> 2] = $263;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $6;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $7 = i64toi32_i32$0;
   $7$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $0;
   i64toi32_i32$1 = 0;
   HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = $2;
   HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = $5;
   HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = $9;
   i64toi32_i32$1 = $7$hi;
   i64toi32_i32$0 = i64toi32_i32$0 + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $7;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($0 + 36 | 0) >> 2] = 0;
   HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1 | 0;
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function ImDrawList___ClearFreeMemory_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   $1 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   if (!$1) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
   ImGui__MemFree_28void__29($1 | 0);
   HEAP32[($0 + 8 | 0) >> 2] = 0;
  }
  label$2 : {
   $1 = HEAP32[($0 + 20 | 0) >> 2] | 0;
   if (!$1) {
    break label$2
   }
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 12 | 0) >> 2] = 0;
   HEAP32[($0 + 16 | 0) >> 2] = i64toi32_i32$0;
   ImGui__MemFree_28void__29($1 | 0);
   HEAP32[($0 + 20 | 0) >> 2] = 0;
  }
  label$3 : {
   $1 = HEAP32[($0 + 32 | 0) >> 2] | 0;
   if (!$1) {
    break label$3
   }
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 24 | 0) >> 2] = 0;
   HEAP32[($0 + 28 | 0) >> 2] = i64toi32_i32$0;
   ImGui__MemFree_28void__29($1 | 0);
   HEAP32[($0 + 32 | 0) >> 2] = 0;
  }
  i64toi32_i32$0 = 0;
  HEAP32[($0 + 52 | 0) >> 2] = 0;
  HEAP32[($0 + 56 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[($0 + 36 | 0) >> 2] = 0;
  HEAP32[($0 + 40 | 0) >> 2] = i64toi32_i32$0;
  label$4 : {
   $1 = HEAP32[($0 + 68 | 0) >> 2] | 0;
   if (!$1) {
    break label$4
   }
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 60 | 0) >> 2] = 0;
   HEAP32[($0 + 64 | 0) >> 2] = i64toi32_i32$0;
   ImGui__MemFree_28void__29($1 | 0);
   HEAP32[($0 + 68 | 0) >> 2] = 0;
  }
  label$5 : {
   $1 = HEAP32[($0 + 80 | 0) >> 2] | 0;
   if (!$1) {
    break label$5
   }
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 72 | 0) >> 2] = 0;
   HEAP32[($0 + 76 | 0) >> 2] = i64toi32_i32$0;
   ImGui__MemFree_28void__29($1 | 0);
   HEAP32[($0 + 80 | 0) >> 2] = 0;
  }
  label$6 : {
   $1 = HEAP32[($0 + 92 | 0) >> 2] | 0;
   if (!$1) {
    break label$6
   }
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 84 | 0) >> 2] = 0;
   HEAP32[($0 + 88 | 0) >> 2] = i64toi32_i32$0;
   ImGui__MemFree_28void__29($1 | 0);
   HEAP32[($0 + 92 | 0) >> 2] = 0;
  }
  ImDrawListSplitter__ClearFreeMemory_28_29($0 + 120 | 0 | 0);
 }
 
 function ImDrawListSplitter__ClearFreeMemory_28_29($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, $2 = 0, i64toi32_i32$0 = 0, $1 = 0, $3 = 0, $4 = 0, $5 = 0;
  label$1 : {
   if ((HEAP32[($0 + 8 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$1
   }
   $1 = 0;
   label$2 : while (1) {
    $2 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    label$3 : {
     if (($1 | 0) != (HEAP32[$0 >> 2] | 0 | 0)) {
      break label$3
     }
     $2 = $2 + Math_imul($1, 24) | 0;
     i64toi32_i32$1 = $2;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = i64toi32_i32$1 + 16 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $2 + 8 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $2 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    }
    label$4 : {
     $3 = Math_imul($1, 24);
     $4 = $2 + $3 | 0;
     $5 = HEAP32[($4 + 8 | 0) >> 2] | 0;
     if (!$5) {
      break label$4
     }
     i64toi32_i32$1 = $4;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     ImGui__MemFree_28void__29($5 | 0);
     HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
     $2 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    }
    label$5 : {
     $2 = $2 + $3 | 0;
     $4 = $2 + 20 | 0;
     $3 = HEAP32[$4 >> 2] | 0;
     if (!$3) {
      break label$5
     }
     i64toi32_i32$1 = $2;
     i64toi32_i32$0 = 0;
     HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = i64toi32_i32$0;
     ImGui__MemFree_28void__29($3 | 0);
     HEAP32[$4 >> 2] = 0;
    }
    $1 = $1 + 1 | 0;
    if (($1 | 0) < (HEAP32[($0 + 8 | 0) >> 2] | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 1;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$6 : {
   $2 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
   if (!$2) {
    break label$6
   }
   i64toi32_i32$1 = $0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
   ImGui__MemFree_28void__29($2 | 0);
   HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = 0;
  }
 }
 
 function ImDrawList__AddDrawCmd_28_29($0) {
  $0 = $0 | 0;
  var $6 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $8 = 0, $1 = 0, $7 = 0, $2 = 0, $18 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $81 = 0, $9 = 0, $9$hi = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = $1 + 8 | 0;
  i64toi32_i32$2 = $0 + 104 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $18 = i64toi32_i32$0;
  i64toi32_i32$0 = $2;
  HEAP32[i64toi32_i32$0 >> 2] = $18;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0;
  i64toi32_i32$1 = HEAP32[($0 + 96 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0 + 100 | 0) >> 2] | 0;
  $21 = i64toi32_i32$1;
  i64toi32_i32$1 = $1;
  HEAP32[i64toi32_i32$1 >> 2] = $21;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $3 = HEAP32[($0 + 116 | 0) >> 2] | 0;
  $4 = HEAP32[($0 + 112 | 0) >> 2] | 0;
  $5 = HEAP32[($0 + 12 | 0) >> 2] | 0;
  label$1 : {
   $6 = HEAP32[$0 >> 2] | 0;
   if (($6 | 0) != (HEAP32[($0 + 4 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $7 = $6 + 1 | 0;
   $8 = 8;
   label$2 : {
    if (!$6) {
     break label$2
    }
    $8 = (($6 | 0) / (2 | 0) | 0) + $6 | 0;
   }
   $8 = ($8 | 0) > ($7 | 0) ? $8 : $7;
   if (($6 | 0) >= ($8 | 0)) {
    break label$1
   }
   $6 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($8, 40) | 0) | 0;
   label$3 : {
    $7 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    if (!$7) {
     break label$3
    }
    __memcpy($6 | 0, $7 | 0, Math_imul(HEAP32[$0 >> 2] | 0, 40) | 0) | 0;
    ImGui__MemFree_28void__29(HEAP32[($0 + 8 | 0) >> 2] | 0 | 0);
   }
   HEAP32[($0 + 4 | 0) >> 2] = $8;
   HEAP32[($0 + 8 | 0) >> 2] = $6;
   $6 = HEAP32[$0 >> 2] | 0;
  }
  $6 = (HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul($6, 40) | 0;
  i64toi32_i32$2 = $1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $81 = i64toi32_i32$0;
  i64toi32_i32$0 = $6;
  HEAP32[$6 >> 2] = $81;
  HEAP32[($6 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $9 = i64toi32_i32$1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$1 = $6;
  i64toi32_i32$0 = 0;
  HEAP32[($6 + 28 | 0) >> 2] = 0;
  HEAP32[($6 + 32 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($6 + 24 | 0) >> 2] = $5;
  HEAP32[($6 + 20 | 0) >> 2] = $3;
  HEAP32[($6 + 16 | 0) >> 2] = $4;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$1 = $6 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $9;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($6 + 36 | 0) >> 2] = 0;
  HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 1 | 0;
  __stack_pointer = $1 + 16 | 0;
 }
 
 function ImDrawList___PopUnusedDrawCmd_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $4 = 0, $3 = 0, $2 = 0;
  label$1 : {
   $1 = HEAP32[$0 >> 2] | 0;
   if (($1 | 0) < (1 | 0)) {
    break label$1
   }
   $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   label$2 : while (1) {
    $3 = $1 + -1 | 0;
    $4 = $2 + Math_imul($3, 40) | 0;
    if (HEAP32[($4 + 28 | 0) >> 2] | 0) {
     break label$1
    }
    if (HEAP32[($4 + 32 | 0) >> 2] | 0) {
     break label$1
    }
    HEAP32[$0 >> 2] = $3;
    $4 = $1 >>> 0 > 1 >>> 0;
    $1 = $3;
    if ($4) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function ImDrawList___OnChangedClipRect_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4 = 0, $5 = 0, $9 = 0, $2 = 0, $1 = 0, $8 = 0, $38 = 0, $41 = 0, $6 = 0, $7 = 0, $98 = 0, $10 = 0, $10$hi = 0, $142 = 0, $147 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  label$1 : {
   label$2 : {
    label$3 : {
     $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     $3 = HEAP32[$0 >> 2] | 0;
     $4 = $3 + -1 | 0;
     $5 = $2 + Math_imul($4, 40) | 0;
     if (!(HEAP32[($5 + 28 | 0) >> 2] | 0)) {
      break label$3
     }
     $4 = $0 + 96 | 0;
     if (!(memcmp($5 | 0, $4 | 0, 16 | 0) | 0)) {
      break label$2
     }
     $5 = $1 + 8 | 0;
     i64toi32_i32$2 = $4 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $38 = i64toi32_i32$0;
     i64toi32_i32$0 = $5;
     HEAP32[i64toi32_i32$0 >> 2] = $38;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $4;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $41 = i64toi32_i32$1;
     i64toi32_i32$1 = $1;
     HEAP32[i64toi32_i32$1 >> 2] = $41;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $4 = HEAP32[($0 + 116 | 0) >> 2] | 0;
     $6 = HEAP32[($0 + 112 | 0) >> 2] | 0;
     $7 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     label$4 : {
      if (($3 | 0) != (HEAP32[($0 + 4 | 0) >> 2] | 0 | 0)) {
       break label$4
      }
      $8 = $3 + 1 | 0;
      $9 = 8;
      label$5 : {
       if (!$3) {
        break label$5
       }
       $9 = (($3 | 0) / (2 | 0) | 0) + $3 | 0;
      }
      $9 = ($9 | 0) > ($8 | 0) ? $9 : $8;
      if (($3 | 0) >= ($9 | 0)) {
       break label$4
      }
      $2 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($9, 40) | 0) | 0;
      label$6 : {
       $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       if (!$3) {
        break label$6
       }
       __memcpy($2 | 0, $3 | 0, Math_imul(HEAP32[$0 >> 2] | 0, 40) | 0) | 0;
       ImGui__MemFree_28void__29(HEAP32[($0 + 8 | 0) >> 2] | 0 | 0);
      }
      HEAP32[($0 + 4 | 0) >> 2] = $9;
      HEAP32[($0 + 8 | 0) >> 2] = $2;
      $3 = HEAP32[$0 >> 2] | 0;
     }
     $3 = $2 + Math_imul($3, 40) | 0;
     i64toi32_i32$2 = $1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $98 = i64toi32_i32$0;
     i64toi32_i32$0 = $3;
     HEAP32[$3 >> 2] = $98;
     HEAP32[($3 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $5;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $10 = i64toi32_i32$1;
     $10$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $3;
     i64toi32_i32$0 = 0;
     HEAP32[($3 + 28 | 0) >> 2] = 0;
     HEAP32[($3 + 32 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($3 + 24 | 0) >> 2] = $7;
     HEAP32[($3 + 20 | 0) >> 2] = $4;
     HEAP32[($3 + 16 | 0) >> 2] = $6;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$1 = $3 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $10;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($3 + 36 | 0) >> 2] = 0;
     HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 1 | 0;
     break label$1;
    }
    if (($3 | 0) < (2 | 0)) {
     break label$2
    }
    $3 = $5 + -40 | 0;
    if (memcmp($0 + 96 | 0 | 0, $3 | 0, 24 | 0) | 0) {
     break label$2
    }
    if (((HEAP32[($3 + 28 | 0) >> 2] | 0) + (HEAP32[($3 + 24 | 0) >> 2] | 0) | 0 | 0) != (HEAP32[(($2 + Math_imul($4, 40) | 0) + 24 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    if (HEAP32[($3 + 32 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[$0 >> 2] = $4;
    break label$1;
   }
   i64toi32_i32$2 = $0;
   i64toi32_i32$0 = HEAP32[($0 + 96 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0 + 100 | 0) >> 2] | 0;
   $142 = i64toi32_i32$0;
   i64toi32_i32$0 = $5;
   HEAP32[i64toi32_i32$0 >> 2] = $142;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0 + 104 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $147 = i64toi32_i32$1;
   i64toi32_i32$1 = $5 + 8 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $147;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function ImDrawList___OnChangedTextureID_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4 = 0, $2 = 0, i64toi32_i32$2 = 0, $9 = 0, $5 = 0, $1 = 0, $8 = 0, $28 = 0, $39 = 0, $42 = 0, $6 = 0, $7 = 0, $96 = 0, $10 = 0, $10$hi = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  label$1 : {
   label$2 : {
    label$3 : {
     $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     $3 = HEAP32[$0 >> 2] | 0;
     $4 = $3 + -1 | 0;
     $5 = $2 + Math_imul($4, 40) | 0;
     if (!(HEAP32[($5 + 28 | 0) >> 2] | 0)) {
      break label$3
     }
     $28 = HEAP32[($5 + 16 | 0) >> 2] | 0;
     $5 = HEAP32[($0 + 112 | 0) >> 2] | 0;
     if (($28 | 0) == ($5 | 0)) {
      break label$2
     }
     $4 = $1 + 8 | 0;
     i64toi32_i32$2 = $0 + 104 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $39 = i64toi32_i32$0;
     i64toi32_i32$0 = $4;
     HEAP32[i64toi32_i32$0 >> 2] = $39;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $0;
     i64toi32_i32$1 = HEAP32[($0 + 96 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($0 + 100 | 0) >> 2] | 0;
     $42 = i64toi32_i32$1;
     i64toi32_i32$1 = $1;
     HEAP32[i64toi32_i32$1 >> 2] = $42;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $6 = HEAP32[($0 + 116 | 0) >> 2] | 0;
     $7 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     label$4 : {
      if (($3 | 0) != (HEAP32[($0 + 4 | 0) >> 2] | 0 | 0)) {
       break label$4
      }
      $8 = $3 + 1 | 0;
      $9 = 8;
      label$5 : {
       if (!$3) {
        break label$5
       }
       $9 = (($3 | 0) / (2 | 0) | 0) + $3 | 0;
      }
      $9 = ($9 | 0) > ($8 | 0) ? $9 : $8;
      if (($3 | 0) >= ($9 | 0)) {
       break label$4
      }
      $2 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($9, 40) | 0) | 0;
      label$6 : {
       $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       if (!$3) {
        break label$6
       }
       __memcpy($2 | 0, $3 | 0, Math_imul(HEAP32[$0 >> 2] | 0, 40) | 0) | 0;
       ImGui__MemFree_28void__29(HEAP32[($0 + 8 | 0) >> 2] | 0 | 0);
      }
      HEAP32[($0 + 4 | 0) >> 2] = $9;
      HEAP32[($0 + 8 | 0) >> 2] = $2;
      $3 = HEAP32[$0 >> 2] | 0;
     }
     $3 = $2 + Math_imul($3, 40) | 0;
     i64toi32_i32$2 = $1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $96 = i64toi32_i32$0;
     i64toi32_i32$0 = $3;
     HEAP32[$3 >> 2] = $96;
     HEAP32[($3 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $4;
     i64toi32_i32$1 = HEAP32[$4 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($4 + 4 | 0) >> 2] | 0;
     $10 = i64toi32_i32$1;
     $10$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $3;
     i64toi32_i32$0 = 0;
     HEAP32[($3 + 28 | 0) >> 2] = 0;
     HEAP32[($3 + 32 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($3 + 24 | 0) >> 2] = $7;
     HEAP32[($3 + 20 | 0) >> 2] = $6;
     HEAP32[($3 + 16 | 0) >> 2] = $5;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$1 = $3 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $10;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($3 + 36 | 0) >> 2] = 0;
     HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 1 | 0;
     break label$1;
    }
    if (($3 | 0) < (2 | 0)) {
     break label$2
    }
    $3 = $5 + -40 | 0;
    if (memcmp($0 + 96 | 0 | 0, $3 | 0, 24 | 0) | 0) {
     break label$2
    }
    if (((HEAP32[($3 + 28 | 0) >> 2] | 0) + (HEAP32[($3 + 24 | 0) >> 2] | 0) | 0 | 0) != (HEAP32[(($2 + Math_imul($4, 40) | 0) + 24 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    if (HEAP32[($3 + 32 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[$0 >> 2] = $4;
    break label$1;
   }
   HEAP32[(($2 + Math_imul($4, 40) | 0) + 16 | 0) >> 2] = HEAP32[($0 + 112 | 0) >> 2] | 0;
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function ImDrawList___OnChangedVtxOffset_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $9 = 0, $1 = 0, $2 = 0, $4 = 0, $8 = 0, $32 = 0, $35 = 0, $5 = 0, $6 = 0, $7 = 0, $92 = 0, $10 = 0, $10$hi = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[($0 + 40 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    $3 = HEAP32[$0 >> 2] | 0;
    $4 = $2 + Math_imul($3 + -1 | 0, 40) | 0;
    if (!(HEAP32[($4 + 28 | 0) >> 2] | 0)) {
     break label$2
    }
    $4 = $1 + 8 | 0;
    i64toi32_i32$2 = $0 + 104 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $32 = i64toi32_i32$0;
    i64toi32_i32$0 = $4;
    HEAP32[i64toi32_i32$0 >> 2] = $32;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $0;
    i64toi32_i32$1 = HEAP32[($0 + 96 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($0 + 100 | 0) >> 2] | 0;
    $35 = i64toi32_i32$1;
    i64toi32_i32$1 = $1;
    HEAP32[i64toi32_i32$1 >> 2] = $35;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $5 = HEAP32[($0 + 116 | 0) >> 2] | 0;
    $6 = HEAP32[($0 + 112 | 0) >> 2] | 0;
    $7 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    label$3 : {
     if (($3 | 0) != (HEAP32[($0 + 4 | 0) >> 2] | 0 | 0)) {
      break label$3
     }
     $8 = $3 + 1 | 0;
     $9 = 8;
     label$4 : {
      if (!$3) {
       break label$4
      }
      $9 = (($3 | 0) / (2 | 0) | 0) + $3 | 0;
     }
     $9 = ($9 | 0) > ($8 | 0) ? $9 : $8;
     if (($3 | 0) >= ($9 | 0)) {
      break label$3
     }
     $2 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($9, 40) | 0) | 0;
     label$5 : {
      $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      if (!$3) {
       break label$5
      }
      __memcpy($2 | 0, $3 | 0, Math_imul(HEAP32[$0 >> 2] | 0, 40) | 0) | 0;
      ImGui__MemFree_28void__29(HEAP32[($0 + 8 | 0) >> 2] | 0 | 0);
     }
     HEAP32[($0 + 4 | 0) >> 2] = $9;
     HEAP32[($0 + 8 | 0) >> 2] = $2;
     $3 = HEAP32[$0 >> 2] | 0;
    }
    $3 = $2 + Math_imul($3, 40) | 0;
    i64toi32_i32$2 = $1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $92 = i64toi32_i32$0;
    i64toi32_i32$0 = $3;
    HEAP32[$3 >> 2] = $92;
    HEAP32[($3 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $4;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $10 = i64toi32_i32$1;
    $10$hi = i64toi32_i32$0;
    i64toi32_i32$1 = $3;
    i64toi32_i32$0 = 0;
    HEAP32[($3 + 28 | 0) >> 2] = 0;
    HEAP32[($3 + 32 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($3 + 24 | 0) >> 2] = $7;
    HEAP32[($3 + 20 | 0) >> 2] = $5;
    HEAP32[($3 + 16 | 0) >> 2] = $6;
    i64toi32_i32$0 = $10$hi;
    i64toi32_i32$1 = $3 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $10;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($3 + 36 | 0) >> 2] = 0;
    HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 1 | 0;
    break label$1;
   }
   HEAP32[($4 + 20 | 0) >> 2] = HEAP32[($0 + 116 | 0) >> 2] | 0;
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function ImDrawList__PushClipRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20bool_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $8 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $4 = Math_fround(0);
  $4 = Math_fround(HEAPF32[($2 + 4 | 0) >> 2]);
  $5 = Math_fround(HEAPF32[$2 >> 2]);
  $6 = Math_fround(HEAPF32[($1 + 4 | 0) >> 2]);
  $7 = Math_fround(HEAPF32[$1 >> 2]);
  label$1 : {
   label$2 : {
    if (!$3) {
     break label$2
    }
    $8 = Math_fround(HEAPF32[($0 + 104 | 0) >> 2]);
    $5 = $5 > $8 ? $8 : $5;
    $8 = Math_fround(HEAPF32[($0 + 100 | 0) >> 2]);
    $6 = $6 < $8 ? $8 : $6;
    $8 = Math_fround(HEAPF32[($0 + 96 | 0) >> 2]);
    $7 = $7 < $8 ? $8 : $7;
    $8 = Math_fround(HEAPF32[($0 + 108 | 0) >> 2]);
    if ($4 > $8) {
     break label$1
    }
   }
   $8 = $4;
  }
  label$3 : {
   $2 = HEAP32[($0 + 60 | 0) >> 2] | 0;
   if (($2 | 0) != (HEAP32[($0 + 64 | 0) >> 2] | 0 | 0)) {
    break label$3
   }
   $1 = $2 + 1 | 0;
   label$4 : {
    label$5 : {
     if ($2) {
      break label$5
     }
     $3 = 8;
     break label$4;
    }
    $3 = (($2 | 0) / (2 | 0) | 0) + $2 | 0;
   }
   $1 = ($3 | 0) > ($1 | 0) ? $3 : $1;
   if (($2 | 0) >= ($1 | 0)) {
    break label$3
   }
   $2 = ImGui__MemAlloc_28unsigned_20long_29($1 << 4 | 0 | 0) | 0;
   label$6 : {
    $3 = HEAP32[($0 + 68 | 0) >> 2] | 0;
    if (!$3) {
     break label$6
    }
    __memcpy($2 | 0, $3 | 0, (HEAP32[($0 + 60 | 0) >> 2] | 0) << 4 | 0 | 0) | 0;
    ImGui__MemFree_28void__29(HEAP32[($0 + 68 | 0) >> 2] | 0 | 0);
   }
   HEAP32[($0 + 64 | 0) >> 2] = $1;
   HEAP32[($0 + 68 | 0) >> 2] = $2;
   $2 = HEAP32[($0 + 60 | 0) >> 2] | 0;
  }
  $2 = (HEAP32[($0 + 68 | 0) >> 2] | 0) + ($2 << 4 | 0) | 0;
  $8 = $6 >= $8 ? $6 : $8;
  HEAPF32[($2 + 12 | 0) >> 2] = $8;
  $5 = $7 >= $5 ? $7 : $5;
  HEAPF32[($2 + 8 | 0) >> 2] = $5;
  HEAPF32[($2 + 4 | 0) >> 2] = $6;
  HEAPF32[$2 >> 2] = $7;
  HEAPF32[($0 + 108 | 0) >> 2] = $8;
  HEAPF32[($0 + 104 | 0) >> 2] = $5;
  HEAPF32[($0 + 100 | 0) >> 2] = $6;
  HEAPF32[($0 + 96 | 0) >> 2] = $7;
  HEAP32[($0 + 60 | 0) >> 2] = (HEAP32[($0 + 60 | 0) >> 2] | 0) + 1 | 0;
  ImDrawList___OnChangedClipRect_28_29($0 | 0);
 }
 
 function ImDrawList__PopClipRect_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $2 = 0, $23 = 0, $28 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1 = HEAP32[($0 + 60 | 0) >> 2] | 0;
  $2 = $1 + -1 | 0;
  HEAP32[($0 + 60 | 0) >> 2] = $2;
  $1 = (wasm2js_i32$0 = (($1 << 4 | 0) + (HEAP32[($0 + 68 | 0) >> 2] | 0) | 0) + -32 | 0, wasm2js_i32$1 = (HEAP32[($0 + 44 | 0) >> 2] | 0) + 24 | 0, wasm2js_i32$2 = $2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  i64toi32_i32$2 = $1;
  i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
  $23 = i64toi32_i32$0;
  i64toi32_i32$0 = $0;
  HEAP32[($0 + 96 | 0) >> 2] = $23;
  HEAP32[($0 + 100 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $28 = i64toi32_i32$1;
  i64toi32_i32$1 = $0 + 104 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $28;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  ImDrawList___OnChangedClipRect_28_29($0 | 0);
 }
 
 function ImDrawList__PushTextureID_28void__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  label$1 : {
   $2 = HEAP32[($0 + 72 | 0) >> 2] | 0;
   if (($2 | 0) != (HEAP32[($0 + 76 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $3 = $2 + 1 | 0;
   label$2 : {
    label$3 : {
     if ($2) {
      break label$3
     }
     $4 = 8;
     break label$2;
    }
    $4 = (($2 | 0) / (2 | 0) | 0) + $2 | 0;
   }
   $3 = ($4 | 0) > ($3 | 0) ? $4 : $3;
   if (($2 | 0) >= ($3 | 0)) {
    break label$1
   }
   $2 = ImGui__MemAlloc_28unsigned_20long_29($3 << 2 | 0 | 0) | 0;
   label$4 : {
    $4 = HEAP32[($0 + 80 | 0) >> 2] | 0;
    if (!$4) {
     break label$4
    }
    __memcpy($2 | 0, $4 | 0, (HEAP32[($0 + 72 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
    ImGui__MemFree_28void__29(HEAP32[($0 + 80 | 0) >> 2] | 0 | 0);
   }
   HEAP32[($0 + 76 | 0) >> 2] = $3;
   HEAP32[($0 + 80 | 0) >> 2] = $2;
   $2 = HEAP32[($0 + 72 | 0) >> 2] | 0;
  }
  HEAP32[((HEAP32[($0 + 80 | 0) >> 2] | 0) + ($2 << 2 | 0) | 0) >> 2] = $1;
  HEAP32[($0 + 112 | 0) >> 2] = $1;
  HEAP32[($0 + 72 | 0) >> 2] = (HEAP32[($0 + 72 | 0) >> 2] | 0) + 1 | 0;
  ImDrawList___OnChangedTextureID_28_29($0 | 0);
 }
 
 function ImDrawList__PopTextureID_28_29($0) {
  $0 = $0 | 0;
  var $2 = 0, $1 = 0;
  $1 = HEAP32[($0 + 72 | 0) >> 2] | 0;
  $2 = $1 + -1 | 0;
  HEAP32[($0 + 72 | 0) >> 2] = $2;
  label$1 : {
   label$2 : {
    if ($2) {
     break label$2
    }
    $2 = 0;
    break label$1;
   }
   $2 = HEAP32[((($1 << 2 | 0) + (HEAP32[($0 + 80 | 0) >> 2] | 0) | 0) + -8 | 0) >> 2] | 0;
  }
  HEAP32[($0 + 112 | 0) >> 2] = $2;
  ImDrawList___OnChangedTextureID_28_29($0 | 0);
 }
 
 function ImDrawList__PrimReserve_28int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $5 = 0, $4 = 0, $6 = 0;
  label$1 : {
   if (((HEAP32[($0 + 40 | 0) >> 2] | 0) + $2 | 0) >>> 0 < 65536 >>> 0) {
    break label$1
   }
   if (!((HEAPU8[($0 + 36 | 0) >> 0] | 0) & 8 | 0)) {
    break label$1
   }
   HEAP32[($0 + 116 | 0) >> 2] = HEAP32[($0 + 24 | 0) >> 2] | 0;
   ImDrawList___OnChangedVtxOffset_28_29($0 | 0);
  }
  $3 = (Math_imul(HEAP32[$0 >> 2] | 0, 40) + (HEAP32[($0 + 8 | 0) >> 2] | 0) | 0) + -12 | 0;
  HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + $1 | 0;
  label$2 : {
   $3 = HEAP32[($0 + 28 | 0) >> 2] | 0;
   $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   $2 = $4 + $2 | 0;
   if (($3 | 0) >= ($2 | 0)) {
    break label$2
   }
   label$3 : {
    label$4 : {
     if ($3) {
      break label$4
     }
     $5 = 8;
     break label$3;
    }
    $5 = (($3 | 0) / (2 | 0) | 0) + $3 | 0;
   }
   $5 = ($5 | 0) > ($2 | 0) ? $5 : $2;
   if (($3 | 0) >= ($5 | 0)) {
    break label$2
   }
   $3 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($5, 20) | 0) | 0;
   label$5 : {
    $6 = HEAP32[($0 + 32 | 0) >> 2] | 0;
    if (!$6) {
     break label$5
    }
    __memcpy($3 | 0, $6 | 0, Math_imul(HEAP32[($0 + 24 | 0) >> 2] | 0, 20) | 0) | 0;
    ImGui__MemFree_28void__29(HEAP32[($0 + 32 | 0) >> 2] | 0 | 0);
   }
   HEAP32[($0 + 28 | 0) >> 2] = $5;
   HEAP32[($0 + 32 | 0) >> 2] = $3;
  }
  HEAP32[($0 + 24 | 0) >> 2] = $2;
  HEAP32[($0 + 52 | 0) >> 2] = (HEAP32[($0 + 32 | 0) >> 2] | 0) + Math_imul($4, 20) | 0;
  label$6 : {
   $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
   $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
   $2 = $4 + $1 | 0;
   if (($3 | 0) >= ($2 | 0)) {
    break label$6
   }
   label$7 : {
    label$8 : {
     if ($3) {
      break label$8
     }
     $1 = 8;
     break label$7;
    }
    $1 = (($3 | 0) / (2 | 0) | 0) + $3 | 0;
   }
   $1 = ($1 | 0) > ($2 | 0) ? $1 : $2;
   if (($3 | 0) >= ($1 | 0)) {
    break label$6
   }
   $3 = ImGui__MemAlloc_28unsigned_20long_29($1 << 1 | 0 | 0) | 0;
   label$9 : {
    $5 = HEAP32[($0 + 20 | 0) >> 2] | 0;
    if (!$5) {
     break label$9
    }
    __memcpy($3 | 0, $5 | 0, (HEAP32[($0 + 12 | 0) >> 2] | 0) << 1 | 0 | 0) | 0;
    ImGui__MemFree_28void__29(HEAP32[($0 + 20 | 0) >> 2] | 0 | 0);
   }
   HEAP32[($0 + 16 | 0) >> 2] = $1;
   HEAP32[($0 + 20 | 0) >> 2] = $3;
  }
  HEAP32[($0 + 12 | 0) >> 2] = $2;
  HEAP32[($0 + 56 | 0) >> 2] = (HEAP32[($0 + 20 | 0) >> 2] | 0) + ($4 << 1 | 0) | 0;
 }
 
 function ImDrawList__AddPolyline_28ImVec2_20const__2c_20int_2c_20unsigned_20int_2c_20int_2c_20float_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = Math_fround($5);
  var $16 = 0, $17 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $22 = Math_fround(0), $21 = 0, $11 = Math_fround(0), i64toi32_i32$0 = 0, $23 = Math_fround(0), $10 = Math_fround(0), $7 = 0, $19 = 0, $20 = 0, $13 = 0, $25 = Math_fround(0), $6 = 0, $26 = Math_fround(0), $9 = 0, $8 = 0, $9$hi = 0, $14 = 0, i64toi32_i32$4 = 0, $28 = 0, $12 = 0, $18 = 0, $15 = 0, $24 = 0, i64toi32_i32$3 = 0, $45 = 0, $27 = 0, $460 = 0, $474 = 0, $487 = 0, $550 = 0, $565 = 0, $29 = Math_fround(0), $934 = 0, $945 = 0, $958 = 0, $971 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   if (($2 | 0) < (2 | 0)) {
    break label$1
   }
   if ($3 >>> 0 < 16777216 >>> 0) {
    break label$1
   }
   $6 = $2 + -1 | 0;
   $7 = $4 & 1 | 0;
   $8 = $7 ? $2 : $6;
   i64toi32_i32$2 = HEAP32[($0 + 44 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $9 = i64toi32_i32$0;
   $9$hi = i64toi32_i32$1;
   label$2 : {
    $4 = HEAP32[($0 + 36 | 0) >> 2] | 0;
    if (!($4 & 1 | 0)) {
     break label$2
    }
    $10 = Math_fround(HEAPF32[($0 + 140 | 0) >> 2]);
    $4 = $4 >>> 1 | 0;
    label$3 : {
     label$4 : {
      $11 = $5 >= Math_fround(1.0) ? $5 : Math_fround(1.0);
      if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
       break label$4
      }
      $12 = ~~$11;
      break label$3;
     }
     $12 = -2147483648;
    }
    $13 = $10 < $5;
    $14 = (($4 & ($12 | 0) < (63 | 0) | 0) & Math_fround($11 - Math_fround($12 | 0)) <= Math_fround(9.999999747378752e-06) | 0) & $10 == Math_fround(1.0) | 0;
    $4 = Math_imul($14 ? 6 : $13 ? 18 : 12, $8);
    label$5 : {
     label$6 : {
      if (($14 | 0) != (1 | 0)) {
       break label$6
      }
      $15 = $2 << 1 | 0;
      $16 = 3;
      break label$5;
     }
     $15 = $13 ? $2 << 2 | 0 : Math_imul($2, 3);
     $16 = $13 ? 5 : 3;
    }
    ImDrawList__PrimReserve_28int_2c_20int_29($0 | 0, $4 | 0, $15 | 0);
    label$7 : {
     $4 = HEAP32[($0 + 44 | 0) >> 2] | 0;
     $16 = Math_imul($16, $2);
     if ((HEAP32[($4 + 48 | 0) >> 2] | 0 | 0) >= ($16 | 0)) {
      break label$7
     }
     label$8 : {
      $17 = HEAP32[($4 + 52 | 0) >> 2] | 0;
      if (!$17) {
       break label$8
      }
      ImGui__MemFree_28void__29($17 | 0);
     }
     $17 = ImGui__MemAlloc_28unsigned_20long_29($16 << 3 | 0 | 0) | 0;
     HEAP32[($4 + 48 | 0) >> 2] = $16;
     HEAP32[($4 + 52 | 0) >> 2] = $17;
     $4 = HEAP32[($0 + 44 | 0) >> 2] | 0;
    }
    $18 = $3 & 16777215 | 0;
    $19 = HEAP32[($4 + 52 | 0) >> 2] | 0;
    $20 = $19 + ($2 << 3 | 0) | 0;
    $16 = 0;
    label$9 : while (1) {
     label$10 : {
      $4 = $16 + 1 | 0;
      $17 = $1 + ((($4 | 0) == ($2 | 0) ? 0 : $4) << 3 | 0) | 0;
      $16 = $16 << 3 | 0;
      $21 = $1 + $16 | 0;
      $5 = Math_fround(Math_fround(HEAPF32[$17 >> 2]) - Math_fround(HEAPF32[$21 >> 2]));
      $22 = Math_fround(Math_fround(HEAPF32[($17 + 4 | 0) >> 2]) - Math_fround(HEAPF32[($21 + 4 | 0) >> 2]));
      $23 = Math_fround(Math_fround($5 * $5) + Math_fround($22 * $22));
      if (!($23 > Math_fround(0.0))) {
       break label$10
      }
      $23 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($23)));
      $22 = Math_fround($22 * $23);
      $5 = Math_fround($5 * $23);
     }
     $16 = $19 + $16 | 0;
     HEAPF32[($16 + 4 | 0) >> 2] = Math_fround(-$5);
     HEAPF32[$16 >> 2] = $22;
     $16 = $4;
     if (($4 | 0) != ($8 | 0)) {
      continue label$9
     }
     break label$9;
    };
    label$11 : {
     label$12 : {
      label$13 : {
       label$14 : {
        label$15 : {
         if ($7) {
          break label$15
         }
         $4 = $6 << 3 | 0;
         i64toi32_i32$2 = (($2 << 3 | 0) + $19 | 0) + -16 | 0;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $24 = i64toi32_i32$1;
         i64toi32_i32$1 = $19 + $4 | 0;
         HEAP32[i64toi32_i32$1 >> 2] = $24;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
         $22 = (wasm2js_scratch_store_i32(2, $24), wasm2js_scratch_load_f32());
         i64toi32_i32$2 = $24;
         i64toi32_i32$1 = 0;
         i64toi32_i32$3 = 32;
         i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = 0;
          $45 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
         } else {
          i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
          $45 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
         }
         $25 = (wasm2js_scratch_store_i32(2, $45), wasm2js_scratch_load_f32());
         if (!($14 | ($13 ^ 1 | 0) | 0)) {
          break label$13
         }
         $5 = Math_fround(HEAPF32[$1 >> 2]);
         $26 = Math_fround(HEAPF32[$19 >> 2]);
         $23 = $14 ? Math_fround(Math_fround($11 * Math_fround(.5)) + Math_fround(1.0)) : $10;
         $16 = $19 + 4 | 0;
         $17 = $1 + 4 | 0;
         HEAPF32[($20 + 4 | 0) >> 2] = Math_fround(Math_fround($23 * Math_fround(HEAPF32[$16 >> 2])) + Math_fround(HEAPF32[$17 >> 2]));
         HEAPF32[$20 >> 2] = Math_fround($5 + Math_fround($23 * $26));
         $5 = Math_fround(HEAPF32[$1 >> 2]);
         $10 = Math_fround(HEAPF32[$19 >> 2]);
         HEAPF32[($20 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[$17 >> 2]) - Math_fround($23 * Math_fround(HEAPF32[$16 >> 2])));
         HEAPF32[($20 + 8 | 0) >> 2] = Math_fround($5 - Math_fround($23 * $10));
         $16 = $1 + $4 | 0;
         $5 = Math_fround(HEAPF32[$16 >> 2]);
         $4 = $20 + ($6 << 4 | 0) | 0;
         $10 = Math_fround($23 * $25);
         $17 = $16 + 4 | 0;
         HEAPF32[($4 + 4 | 0) >> 2] = Math_fround($10 + Math_fround(HEAPF32[$17 >> 2]));
         $22 = Math_fround($23 * $22);
         HEAPF32[$4 >> 2] = Math_fround($5 + $22);
         $5 = Math_fround(HEAPF32[$16 >> 2]);
         HEAPF32[($4 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[$17 >> 2]) - $10);
         HEAPF32[($4 + 8 | 0) >> 2] = Math_fround($5 - $22);
         break label$14;
        }
        label$16 : {
         if ($14 | ($13 ^ 1 | 0) | 0) {
          break label$16
         }
         $23 = Math_fround(Math_fround($11 - $10) * Math_fround(.5));
         break label$12;
        }
        $23 = $14 ? Math_fround(Math_fround($11 * Math_fround(.5)) + Math_fround(1.0)) : $10;
       }
       $27 = $14 ? 2 : 3;
       $4 = HEAP32[($0 + 56 | 0) >> 2] | 0;
       $17 = HEAP32[($0 + 40 | 0) >> 2] | 0;
       $21 = 0;
       label$17 : while (1) {
        $6 = $21 + 1 | 0;
        $7 = ($6 | 0) == ($2 | 0);
        $16 = (wasm2js_i32$0 = HEAP32[($0 + 40 | 0) >> 2] | 0, wasm2js_i32$1 = $17 + $27 | 0, wasm2js_i32$2 = $7, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
        label$18 : {
         $21 = $19 + ($21 << 3 | 0) | 0;
         $7 = $7 ? 0 : $6;
         $13 = $7 << 3 | 0;
         $28 = $19 + $13 | 0;
         $5 = Math_fround(Math_fround(Math_fround(HEAPF32[$21 >> 2]) + Math_fround(HEAPF32[$28 >> 2])) * Math_fround(.5));
         $22 = Math_fround(Math_fround(Math_fround(HEAPF32[($21 + 4 | 0) >> 2]) + Math_fround(HEAPF32[($28 + 4 | 0) >> 2])) * Math_fround(.5));
         $10 = Math_fround(Math_fround($5 * $5) + Math_fround($22 * $22));
         if (!($10 > Math_fround(9.999999974752427e-07))) {
          break label$18
         }
         $10 = Math_fround(Math_min(Math_fround(Math_fround(1.0) / $10), Math_fround(100.0)));
         $22 = Math_fround($22 * $10);
         $5 = Math_fround($5 * $10);
        }
        $21 = $20 + ($7 << 4 | 0) | 0;
        $7 = $1 + $13 | 0;
        $5 = Math_fround($23 * $5);
        HEAPF32[$21 >> 2] = Math_fround(Math_fround(HEAPF32[$7 >> 2]) + $5);
        $22 = Math_fround($23 * $22);
        HEAPF32[($21 + 4 | 0) >> 2] = Math_fround($22 + Math_fround(HEAPF32[($7 + 4 | 0) >> 2]));
        HEAPF32[($21 + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[$7 >> 2]) - $5);
        HEAPF32[($21 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($7 + 4 | 0) >> 2]) - $22);
        HEAP16[($4 + 2 | 0) >> 1] = $17;
        HEAP16[$4 >> 1] = $16;
        label$19 : {
         if ($14) {
          break label$19
         }
         HEAP16[($4 + 20 | 0) >> 1] = $16;
         HEAP16[($4 + 18 | 0) >> 1] = $17;
         HEAP16[($4 + 16 | 0) >> 1] = $17;
         HEAP16[($4 + 10 | 0) >> 1] = $16;
         $21 = $16 + 1 | 0;
         HEAP16[($4 + 22 | 0) >> 1] = $21;
         HEAP16[($4 + 14 | 0) >> 1] = $17 + 1 | 0;
         HEAP16[($4 + 12 | 0) >> 1] = $21;
         HEAP16[($4 + 8 | 0) >> 1] = $16 + 2 | 0;
         $17 = $17 + 2 | 0;
         HEAP16[($4 + 6 | 0) >> 1] = $17;
         HEAP16[($4 + 4 | 0) >> 1] = $17;
         $4 = $4 + 24 | 0;
         HEAP32[($0 + 56 | 0) >> 2] = $4;
         $17 = $16;
         $21 = $6;
         if (($21 | 0) != ($8 | 0)) {
          continue label$17
         }
         if (($2 | 0) < (1 | 0)) {
          break label$11
         }
         $16 = HEAP32[($0 + 52 | 0) >> 2] | 0;
         $4 = 0;
         label$20 : while (1) {
          i64toi32_i32$0 = $1 + ($4 << 3 | 0) | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
          $460 = i64toi32_i32$1;
          i64toi32_i32$1 = $16;
          HEAP32[$16 >> 2] = $460;
          HEAP32[($16 + 4 | 0) >> 2] = i64toi32_i32$2;
          i64toi32_i32$2 = $9$hi;
          i64toi32_i32$1 = HEAP32[($0 + 52 | 0) >> 2] | 0;
          HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $9;
          HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$2;
          $16 = HEAP32[($0 + 52 | 0) >> 2] | 0;
          HEAP32[($16 + 16 | 0) >> 2] = $3;
          $17 = $20 + ($4 << 4 | 0) | 0;
          i64toi32_i32$0 = $17;
          i64toi32_i32$2 = HEAP32[$17 >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($17 + 4 | 0) >> 2] | 0;
          $474 = i64toi32_i32$2;
          i64toi32_i32$2 = $16;
          HEAP32[($16 + 20 | 0) >> 2] = $474;
          HEAP32[($16 + 24 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$1 = $9$hi;
          i64toi32_i32$2 = (HEAP32[($0 + 52 | 0) >> 2] | 0) + 28 | 0;
          HEAP32[i64toi32_i32$2 >> 2] = $9;
          HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
          $16 = HEAP32[($0 + 52 | 0) >> 2] | 0;
          HEAP32[($16 + 36 | 0) >> 2] = $18;
          i64toi32_i32$0 = $17 + 8 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
          $487 = i64toi32_i32$1;
          i64toi32_i32$1 = $16;
          HEAP32[($16 + 40 | 0) >> 2] = $487;
          HEAP32[($16 + 44 | 0) >> 2] = i64toi32_i32$2;
          i64toi32_i32$2 = $9$hi;
          i64toi32_i32$1 = (HEAP32[($0 + 52 | 0) >> 2] | 0) + 48 | 0;
          HEAP32[i64toi32_i32$1 >> 2] = $9;
          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
          $16 = HEAP32[($0 + 52 | 0) >> 2] | 0;
          HEAP32[($16 + 56 | 0) >> 2] = $18;
          $16 = $16 + 60 | 0;
          HEAP32[($0 + 52 | 0) >> 2] = $16;
          $4 = $4 + 1 | 0;
          if (($4 | 0) != ($2 | 0)) {
           continue label$20
          }
          break label$11;
         };
        }
        HEAP16[($4 + 10 | 0) >> 1] = $16;
        $17 = $17 + 1 | 0;
        HEAP16[($4 + 8 | 0) >> 1] = $17;
        HEAP16[($4 + 6 | 0) >> 1] = $16 + 1 | 0;
        HEAP16[($4 + 4 | 0) >> 1] = $17;
        $4 = $4 + 12 | 0;
        HEAP32[($0 + 56 | 0) >> 2] = $4;
        $17 = $16;
        $21 = $6;
        if (($21 | 0) != ($8 | 0)) {
         continue label$17
        }
        break label$17;
       };
       if (($2 | 0) < (1 | 0)) {
        break label$11
       }
       $4 = (HEAP32[((HEAP32[($0 + 44 | 0) >> 2] | 0) + 508 | 0) >> 2] | 0) + ($12 << 4 | 0) | 0;
       $17 = HEAP32[($4 + 12 | 0) >> 2] | 0;
       $21 = HEAP32[($4 + 8 | 0) >> 2] | 0;
       $8 = HEAP32[($4 + 4 | 0) >> 2] | 0;
       $19 = HEAP32[$4 >> 2] | 0;
       $16 = HEAP32[($0 + 52 | 0) >> 2] | 0;
       $4 = 0;
       label$21 : while (1) {
        $1 = $20 + ($4 << 4 | 0) | 0;
        i64toi32_i32$0 = $1;
        i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
        $550 = i64toi32_i32$2;
        i64toi32_i32$2 = $16;
        HEAP32[$16 >> 2] = $550;
        HEAP32[($16 + 4 | 0) >> 2] = i64toi32_i32$1;
        $16 = HEAP32[($0 + 52 | 0) >> 2] | 0;
        HEAP32[($16 + 8 | 0) >> 2] = $19;
        HEAP32[($16 + 12 | 0) >> 2] = $8;
        $16 = HEAP32[($0 + 52 | 0) >> 2] | 0;
        HEAP32[($16 + 16 | 0) >> 2] = $3;
        i64toi32_i32$0 = i64toi32_i32$0 + 8 | 0;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
        $565 = i64toi32_i32$1;
        i64toi32_i32$1 = $16;
        HEAP32[($16 + 20 | 0) >> 2] = $565;
        HEAP32[($16 + 24 | 0) >> 2] = i64toi32_i32$2;
        $16 = HEAP32[($0 + 52 | 0) >> 2] | 0;
        HEAP32[($16 + 32 | 0) >> 2] = $17;
        HEAP32[($16 + 28 | 0) >> 2] = $21;
        $16 = HEAP32[($0 + 52 | 0) >> 2] | 0;
        HEAP32[($16 + 36 | 0) >> 2] = $3;
        $16 = $16 + 40 | 0;
        HEAP32[($0 + 52 | 0) >> 2] = $16;
        $4 = $4 + 1 | 0;
        if (($4 | 0) != ($2 | 0)) {
         continue label$21
        }
        break label$11;
       };
      }
      $26 = Math_fround(HEAPF32[$1 >> 2]);
      $29 = Math_fround(HEAPF32[$19 >> 2]);
      $23 = Math_fround(Math_fround($11 - $10) * Math_fround(.5));
      $5 = Math_fround($10 + $23);
      $16 = $19 + 4 | 0;
      $17 = $1 + 4 | 0;
      HEAPF32[($20 + 4 | 0) >> 2] = Math_fround(Math_fround($5 * Math_fround(HEAPF32[$16 >> 2])) + Math_fround(HEAPF32[$17 >> 2]));
      HEAPF32[$20 >> 2] = Math_fround($26 + Math_fround($5 * $29));
      $11 = Math_fround(HEAPF32[$1 >> 2]);
      $26 = Math_fround(HEAPF32[$19 >> 2]);
      HEAPF32[($20 + 12 | 0) >> 2] = Math_fround(Math_fround($23 * Math_fround(HEAPF32[$16 >> 2])) + Math_fround(HEAPF32[$17 >> 2]));
      HEAPF32[($20 + 8 | 0) >> 2] = Math_fround($11 + Math_fround($23 * $26));
      $11 = Math_fround(HEAPF32[$1 >> 2]);
      $26 = Math_fround(HEAPF32[$19 >> 2]);
      HEAPF32[($20 + 20 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[$17 >> 2]) - Math_fround($23 * Math_fround(HEAPF32[$16 >> 2])));
      HEAPF32[($20 + 16 | 0) >> 2] = Math_fround($11 - Math_fround($23 * $26));
      $11 = Math_fround(HEAPF32[$1 >> 2]);
      $26 = Math_fround(HEAPF32[$19 >> 2]);
      HEAPF32[($20 + 28 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[$17 >> 2]) - Math_fround($5 * Math_fround(HEAPF32[$16 >> 2])));
      HEAPF32[($20 + 24 | 0) >> 2] = Math_fround($11 - Math_fround($5 * $26));
      $16 = $1 + $4 | 0;
      $11 = Math_fround(HEAPF32[$16 >> 2]);
      $4 = $20 + ($6 << 5 | 0) | 0;
      $26 = Math_fround($5 * $25);
      $17 = $16 + 4 | 0;
      HEAPF32[($4 + 4 | 0) >> 2] = Math_fround($26 + Math_fround(HEAPF32[$17 >> 2]));
      $5 = Math_fround($5 * $22);
      HEAPF32[$4 >> 2] = Math_fround($11 + $5);
      $11 = Math_fround(HEAPF32[$16 >> 2]);
      $25 = Math_fround($23 * $25);
      HEAPF32[($4 + 12 | 0) >> 2] = Math_fround($25 + Math_fround(HEAPF32[$17 >> 2]));
      $22 = Math_fround($23 * $22);
      HEAPF32[($4 + 8 | 0) >> 2] = Math_fround($11 + $22);
      $11 = Math_fround(HEAPF32[$16 >> 2]);
      HEAPF32[($4 + 20 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[$17 >> 2]) - $25);
      HEAPF32[($4 + 16 | 0) >> 2] = Math_fround($11 - $22);
      $22 = Math_fround(HEAPF32[$16 >> 2]);
      HEAPF32[($4 + 28 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[$17 >> 2]) - $26);
      HEAPF32[($4 + 24 | 0) >> 2] = Math_fround($22 - $5);
     }
     $10 = Math_fround($10 + $23);
     $4 = HEAP32[($0 + 56 | 0) >> 2] | 0;
     $21 = HEAP32[($0 + 40 | 0) >> 2] | 0;
     $16 = 0;
     label$22 : while (1) {
      $6 = $16 + 1 | 0;
      $17 = ($6 | 0) == ($2 | 0);
      $7 = (wasm2js_i32$0 = HEAP32[($0 + 40 | 0) >> 2] | 0, wasm2js_i32$1 = $21 + 4 | 0, wasm2js_i32$2 = $17, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
      label$23 : {
       $16 = $19 + ($16 << 3 | 0) | 0;
       $17 = $17 ? 0 : $6;
       $13 = $17 << 3 | 0;
       $28 = $19 + $13 | 0;
       $5 = Math_fround(Math_fround(Math_fround(HEAPF32[$16 >> 2]) + Math_fround(HEAPF32[$28 >> 2])) * Math_fround(.5));
       $22 = Math_fround(Math_fround(Math_fround(HEAPF32[($16 + 4 | 0) >> 2]) + Math_fround(HEAPF32[($28 + 4 | 0) >> 2])) * Math_fround(.5));
       $11 = Math_fround(Math_fround($5 * $5) + Math_fround($22 * $22));
       if (!($11 > Math_fround(9.999999974752427e-07))) {
        break label$23
       }
       $11 = Math_fround(Math_min(Math_fround(Math_fround(1.0) / $11), Math_fround(100.0)));
       $22 = Math_fround($22 * $11);
       $5 = Math_fround($5 * $11);
      }
      $16 = $20 + ($17 << 5 | 0) | 0;
      $11 = Math_fround($10 * $5);
      $17 = $1 + $13 | 0;
      HEAPF32[$16 >> 2] = Math_fround($11 + Math_fround(HEAPF32[$17 >> 2]));
      $25 = Math_fround($10 * $22);
      HEAPF32[($16 + 4 | 0) >> 2] = Math_fround($25 + Math_fround(HEAPF32[($17 + 4 | 0) >> 2]));
      $5 = Math_fround($23 * $5);
      HEAPF32[($16 + 8 | 0) >> 2] = Math_fround($5 + Math_fround(HEAPF32[$17 >> 2]));
      $22 = Math_fround($23 * $22);
      HEAPF32[($16 + 12 | 0) >> 2] = Math_fround($22 + Math_fround(HEAPF32[($17 + 4 | 0) >> 2]));
      HEAPF32[($16 + 16 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[$17 >> 2]) - $5);
      HEAPF32[($16 + 20 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($17 + 4 | 0) >> 2]) - $22);
      HEAPF32[($16 + 24 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[$17 >> 2]) - $11);
      HEAPF32[($16 + 28 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($17 + 4 | 0) >> 2]) - $25);
      $17 = $7 + 2 | 0;
      HEAP16[($4 + 34 | 0) >> 1] = $17;
      HEAP16[($4 + 32 | 0) >> 1] = $7 + 3 | 0;
      $16 = $21 + 3 | 0;
      HEAP16[($4 + 30 | 0) >> 1] = $16;
      HEAP16[($4 + 28 | 0) >> 1] = $16;
      $13 = $21 + 2 | 0;
      HEAP16[($4 + 26 | 0) >> 1] = $13;
      HEAP16[($4 + 24 | 0) >> 1] = $17;
      $16 = $7 + 1 | 0;
      HEAP16[($4 + 22 | 0) >> 1] = $16;
      HEAP16[($4 + 20 | 0) >> 1] = $7;
      HEAP16[($4 + 18 | 0) >> 1] = $21;
      HEAP16[($4 + 16 | 0) >> 1] = $21;
      $21 = $21 + 1 | 0;
      HEAP16[($4 + 14 | 0) >> 1] = $21;
      HEAP16[($4 + 12 | 0) >> 1] = $16;
      HEAP16[($4 + 10 | 0) >> 1] = $16;
      HEAP16[($4 + 8 | 0) >> 1] = $17;
      HEAP16[($4 + 6 | 0) >> 1] = $13;
      HEAP16[($4 + 4 | 0) >> 1] = $13;
      HEAP16[($4 + 2 | 0) >> 1] = $21;
      HEAP16[$4 >> 1] = $16;
      $4 = $4 + 36 | 0;
      $21 = $7;
      $16 = $6;
      if (($16 | 0) != ($8 | 0)) {
       continue label$22
      }
      break label$22;
     };
     HEAP32[($0 + 56 | 0) >> 2] = $4;
     if (($2 | 0) < (1 | 0)) {
      break label$11
     }
     $1 = HEAP32[($0 + 52 | 0) >> 2] | 0;
     $16 = 0;
     label$24 : while (1) {
      $4 = $20 + ($16 << 5 | 0) | 0;
      i64toi32_i32$0 = $4;
      i64toi32_i32$2 = HEAP32[$4 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($4 + 4 | 0) >> 2] | 0;
      $934 = i64toi32_i32$2;
      i64toi32_i32$2 = $1;
      HEAP32[i64toi32_i32$2 >> 2] = $934;
      HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$1 = $9$hi;
      i64toi32_i32$2 = HEAP32[($0 + 52 | 0) >> 2] | 0;
      HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $9;
      HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
      $1 = HEAP32[($0 + 52 | 0) >> 2] | 0;
      HEAP32[($1 + 16 | 0) >> 2] = $18;
      i64toi32_i32$0 = $4 + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $945 = i64toi32_i32$1;
      i64toi32_i32$1 = $1;
      HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = $945;
      HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$2;
      i64toi32_i32$2 = $9$hi;
      i64toi32_i32$1 = (HEAP32[($0 + 52 | 0) >> 2] | 0) + 28 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $9;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
      $1 = HEAP32[($0 + 52 | 0) >> 2] | 0;
      HEAP32[($1 + 36 | 0) >> 2] = $3;
      i64toi32_i32$0 = $4 + 16 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $958 = i64toi32_i32$2;
      i64toi32_i32$2 = $1;
      HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] = $958;
      HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$1 = $9$hi;
      i64toi32_i32$2 = (HEAP32[($0 + 52 | 0) >> 2] | 0) + 48 | 0;
      HEAP32[i64toi32_i32$2 >> 2] = $9;
      HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
      $1 = HEAP32[($0 + 52 | 0) >> 2] | 0;
      HEAP32[($1 + 56 | 0) >> 2] = $3;
      i64toi32_i32$0 = $4 + 24 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $971 = i64toi32_i32$1;
      i64toi32_i32$1 = $1;
      HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] = $971;
      HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = i64toi32_i32$2;
      i64toi32_i32$2 = $9$hi;
      i64toi32_i32$1 = (HEAP32[($0 + 52 | 0) >> 2] | 0) + 68 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $9;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
      $4 = HEAP32[($0 + 52 | 0) >> 2] | 0;
      HEAP32[($4 + 76 | 0) >> 2] = $18;
      $1 = $4 + 80 | 0;
      HEAP32[($0 + 52 | 0) >> 2] = $1;
      $16 = $16 + 1 | 0;
      if (($16 | 0) != ($2 | 0)) {
       continue label$24
      }
      break label$24;
     };
    }
    HEAP32[($0 + 40 | 0) >> 2] = (HEAP32[($0 + 40 | 0) >> 2] | 0) + ($15 & 65535 | 0) | 0;
    return;
   }
   ImDrawList__PrimReserve_28int_2c_20int_29($0 | 0, Math_imul($8, 6) | 0, $8 << 2 | 0 | 0);
   $23 = Math_fround($5 * Math_fround(.5));
   $16 = 0;
   label$25 : while (1) {
    $17 = $16 + 1 | 0;
    $4 = $1 + ((($17 | 0) == ($2 | 0) ? 0 : $17) << 3 | 0) | 0;
    $19 = $4 + 4 | 0;
    $16 = $1 + ($16 << 3 | 0) | 0;
    $7 = $16 + 4 | 0;
    label$26 : {
     $10 = Math_fround(HEAPF32[$16 >> 2]);
     $5 = Math_fround(Math_fround(HEAPF32[$4 >> 2]) - $10);
     $11 = Math_fround(HEAPF32[($16 + 4 | 0) >> 2]);
     $22 = Math_fround(Math_fround(HEAPF32[($4 + 4 | 0) >> 2]) - $11);
     $25 = Math_fround(Math_fround($5 * $5) + Math_fround($22 * $22));
     if (!($25 > Math_fround(0.0))) {
      break label$26
     }
     $25 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($25)));
     $22 = Math_fround($22 * $25);
     $5 = Math_fround($5 * $25);
    }
    $21 = HEAP32[($0 + 52 | 0) >> 2] | 0;
    i64toi32_i32$2 = $9$hi;
    i64toi32_i32$1 = $21;
    HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $9;
    HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$2;
    $5 = Math_fround($23 * $5);
    HEAPF32[(i64toi32_i32$1 + 4 | 0) >> 2] = Math_fround($11 - $5);
    $22 = Math_fround($23 * $22);
    HEAPF32[i64toi32_i32$1 >> 2] = Math_fround($10 + $22);
    $21 = HEAP32[($0 + 52 | 0) >> 2] | 0;
    HEAP32[($21 + 16 | 0) >> 2] = $3;
    HEAPF32[($21 + 20 | 0) >> 2] = Math_fround($22 + Math_fround(HEAPF32[$4 >> 2]));
    $10 = Math_fround(HEAPF32[$19 >> 2]);
    i64toi32_i32$1 = $21 + 28 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $9;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
    HEAPF32[($21 + 24 | 0) >> 2] = Math_fround($10 - $5);
    $21 = HEAP32[($0 + 52 | 0) >> 2] | 0;
    HEAP32[($21 + 36 | 0) >> 2] = $3;
    HEAPF32[($21 + 40 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[$4 >> 2]) - $22);
    $10 = Math_fround(HEAPF32[$19 >> 2]);
    i64toi32_i32$1 = $21 + 48 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $9;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
    HEAPF32[($21 + 44 | 0) >> 2] = Math_fround($5 + $10);
    $4 = HEAP32[($0 + 52 | 0) >> 2] | 0;
    HEAP32[($4 + 56 | 0) >> 2] = $3;
    HEAPF32[($4 + 60 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[$16 >> 2]) - $22);
    $22 = Math_fround(HEAPF32[$7 >> 2]);
    i64toi32_i32$1 = $4 + 68 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $9;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
    HEAPF32[($4 + 64 | 0) >> 2] = Math_fround($5 + $22);
    $4 = HEAP32[($0 + 52 | 0) >> 2] | 0;
    HEAP32[($4 + 76 | 0) >> 2] = $3;
    HEAP32[($0 + 52 | 0) >> 2] = $4 + 80 | 0;
    $4 = HEAP32[($0 + 56 | 0) >> 2] | 0;
    $16 = HEAP32[($0 + 40 | 0) >> 2] | 0;
    HEAP16[($4 + 6 | 0) >> 1] = $16;
    HEAP16[$4 >> 1] = $16;
    HEAP16[($4 + 10 | 0) >> 1] = $16 + 3 | 0;
    $21 = $16 + 2 | 0;
    HEAP16[($4 + 8 | 0) >> 1] = $21;
    HEAP16[($4 + 4 | 0) >> 1] = $21;
    HEAP16[($4 + 2 | 0) >> 1] = $16 + 1 | 0;
    HEAP32[($0 + 40 | 0) >> 2] = $16 + 4 | 0;
    HEAP32[($0 + 56 | 0) >> 2] = $4 + 12 | 0;
    $16 = $17;
    if (($16 | 0) != ($8 | 0)) {
     continue label$25
    }
    break label$25;
   };
  }
 }
 
 function ImDrawList__AddConvexPolyFilled_28ImVec2_20const__2c_20int_2c_20unsigned_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $10 = 0, $7 = 0, $14 = 0, $9 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $13 = 0, $16 = Math_fround(0), $12 = 0, $17 = Math_fround(0), i64toi32_i32$2 = 0, $15 = 0, $5 = Math_fround(0), $18 = Math_fround(0), $4 = 0, $8 = 0, $4$hi = 0, $11 = 0, $6 = 0, $119 = 0, $135 = 0, $161 = 0;
  label$1 : {
   if (($2 | 0) < (3 | 0)) {
    break label$1
   }
   if ($3 >>> 0 < 16777216 >>> 0) {
    break label$1
   }
   i64toi32_i32$2 = HEAP32[($0 + 44 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $4 = i64toi32_i32$0;
   $4$hi = i64toi32_i32$1;
   label$2 : {
    label$3 : {
     if (!((HEAPU8[($0 + 36 | 0) >> 0] | 0) & 4 | 0)) {
      break label$3
     }
     $5 = Math_fround(HEAPF32[($0 + 140 | 0) >> 2]);
     $6 = $2 << 1 | 0;
     ImDrawList__PrimReserve_28int_2c_20int_29($0 | 0, Math_imul($2, 9) + -6 | 0 | 0, $6 | 0);
     $7 = $2 + -2 | 0;
     $8 = $7 & 3 | 0;
     $9 = HEAP32[($0 + 40 | 0) >> 2] | 0;
     $10 = HEAP32[($0 + 56 | 0) >> 2] | 0;
     label$4 : {
      if (($2 + -3 | 0) >>> 0 >= 3 >>> 0) {
       break label$4
      }
      $7 = 2;
      break label$2;
     }
     $11 = $7 & -4 | 0;
     $12 = 0;
     $7 = 2;
     label$5 : while (1) {
      HEAP16[($10 + 18 | 0) >> 1] = $9;
      HEAP16[($10 + 12 | 0) >> 1] = $9;
      HEAP16[($10 + 6 | 0) >> 1] = $9;
      HEAP16[$10 >> 1] = $9;
      $13 = $7 << 1 | 0;
      $14 = $13 + $9 | 0;
      HEAP16[($10 + 4 | 0) >> 1] = $14;
      HEAP16[($10 + 22 | 0) >> 1] = $14 + 6 | 0;
      $15 = $14 + 4 | 0;
      HEAP16[($10 + 20 | 0) >> 1] = $15;
      HEAP16[($10 + 16 | 0) >> 1] = $15;
      HEAP16[($10 + 14 | 0) >> 1] = $14 + 2 | 0;
      $13 = ($13 | 2 | 0) + $9 | 0;
      HEAP16[($10 + 10 | 0) >> 1] = $13;
      HEAP16[($10 + 2 | 0) >> 1] = $14 + -2 | 0;
      HEAP16[($10 + 8 | 0) >> 1] = $13 + -2 | 0;
      $7 = $7 + 4 | 0;
      $10 = $10 + 24 | 0;
      $12 = $12 + 4 | 0;
      if (($12 | 0) != ($11 | 0)) {
       continue label$5
      }
      break label$2;
     };
    }
    ImDrawList__PrimReserve_28int_2c_20int_29($0 | 0, Math_imul($2, 3) + -6 | 0 | 0, $2 | 0);
    $13 = $2 & 1 | 0;
    $9 = HEAP32[($0 + 52 | 0) >> 2] | 0;
    $10 = 0;
    label$6 : {
     if (($2 | 0) == (1 | 0)) {
      break label$6
     }
     $12 = $2 & -2 | 0;
     $10 = 0;
     $7 = 0;
     label$7 : while (1) {
      $14 = $10 << 3 | 0;
      i64toi32_i32$2 = $1 + $14 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $119 = i64toi32_i32$1;
      i64toi32_i32$1 = $9;
      HEAP32[$9 >> 2] = $119;
      HEAP32[($9 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = HEAP32[($0 + 52 | 0) >> 2] | 0;
      HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $4;
      HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
      $9 = HEAP32[($0 + 52 | 0) >> 2] | 0;
      HEAP32[($9 + 16 | 0) >> 2] = $3;
      HEAP32[($0 + 52 | 0) >> 2] = $9 + 20 | 0;
      i64toi32_i32$2 = $1 + ($14 | 8 | 0) | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $135 = i64toi32_i32$0;
      i64toi32_i32$0 = $9;
      HEAP32[($9 + 20 | 0) >> 2] = $135;
      HEAP32[($9 + 24 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$0 = HEAP32[($0 + 52 | 0) >> 2] | 0;
      HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $4;
      HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
      $9 = HEAP32[($0 + 52 | 0) >> 2] | 0;
      HEAP32[($9 + 16 | 0) >> 2] = $3;
      $9 = $9 + 20 | 0;
      HEAP32[($0 + 52 | 0) >> 2] = $9;
      $10 = $10 + 2 | 0;
      $7 = $7 + 2 | 0;
      if (($7 | 0) != ($12 | 0)) {
       continue label$7
      }
      break label$7;
     };
    }
    label$8 : {
     if (!$13) {
      break label$8
     }
     i64toi32_i32$2 = $1 + ($10 << 3 | 0) | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $161 = i64toi32_i32$1;
     i64toi32_i32$1 = $9;
     HEAP32[$9 >> 2] = $161;
     HEAP32[($9 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = HEAP32[($0 + 52 | 0) >> 2] | 0;
     HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $4;
     HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
     $10 = HEAP32[($0 + 52 | 0) >> 2] | 0;
     HEAP32[($10 + 16 | 0) >> 2] = $3;
     HEAP32[($0 + 52 | 0) >> 2] = $10 + 20 | 0;
    }
    $9 = HEAP32[($0 + 40 | 0) >> 2] | 0;
    label$9 : {
     if (($2 | 0) < (3 | 0)) {
      break label$9
     }
     $7 = $2 + -2 | 0;
     $12 = $7 & 3 | 0;
     $10 = HEAP32[($0 + 56 | 0) >> 2] | 0;
     label$10 : {
      label$11 : {
       if (($2 + -3 | 0) >>> 0 >= 3 >>> 0) {
        break label$11
       }
       $7 = 2;
       break label$10;
      }
      $13 = $7 & -4 | 0;
      $14 = 0;
      $7 = 2;
      label$12 : while (1) {
       HEAP16[($10 + 18 | 0) >> 1] = $9;
       HEAP16[($10 + 12 | 0) >> 1] = $9;
       HEAP16[($10 + 6 | 0) >> 1] = $9;
       HEAP16[$10 >> 1] = $9;
       $1 = $9 + $7 | 0;
       HEAP16[($10 + 4 | 0) >> 1] = $1;
       HEAP16[($10 + 22 | 0) >> 1] = $1 + 3 | 0;
       $3 = $1 + 2 | 0;
       HEAP16[($10 + 20 | 0) >> 1] = $3;
       HEAP16[($10 + 16 | 0) >> 1] = $3;
       HEAP16[($10 + 14 | 0) >> 1] = $1 + 1 | 0;
       $3 = $9 + ($7 | 1 | 0) | 0;
       HEAP16[($10 + 10 | 0) >> 1] = $3;
       HEAP16[($10 + 2 | 0) >> 1] = $1 + -1 | 0;
       HEAP16[($10 + 8 | 0) >> 1] = $3 + -1 | 0;
       $7 = $7 + 4 | 0;
       $10 = $10 + 24 | 0;
       $14 = $14 + 4 | 0;
       if (($14 | 0) != ($13 | 0)) {
        continue label$12
       }
       break label$12;
      };
     }
     label$13 : {
      if (!$12) {
       break label$13
      }
      $1 = 0;
      label$14 : while (1) {
       HEAP16[$10 >> 1] = $9;
       $14 = $9 + $7 | 0;
       HEAP16[($10 + 4 | 0) >> 1] = $14;
       HEAP16[($10 + 2 | 0) >> 1] = $14 + -1 | 0;
       $7 = $7 + 1 | 0;
       $10 = $10 + 6 | 0;
       $1 = $1 + 1 | 0;
       if (($1 | 0) != ($12 | 0)) {
        continue label$14
       }
       break label$14;
      };
     }
     HEAP32[($0 + 56 | 0) >> 2] = $10;
    }
    HEAP32[($0 + 40 | 0) >> 2] = $9 + ($2 & 65535 | 0) | 0;
    return;
   }
   label$15 : {
    if (!$8) {
     break label$15
    }
    $14 = 0;
    label$16 : while (1) {
     HEAP16[$10 >> 1] = $9;
     $12 = ($7 << 1 | 0) + $9 | 0;
     HEAP16[($10 + 4 | 0) >> 1] = $12;
     HEAP16[($10 + 2 | 0) >> 1] = $12 + -2 | 0;
     $7 = $7 + 1 | 0;
     $10 = $10 + 6 | 0;
     $14 = $14 + 1 | 0;
     if (($14 | 0) != ($8 | 0)) {
      continue label$16
     }
     break label$16;
    };
   }
   HEAP32[($0 + 56 | 0) >> 2] = $10;
   label$17 : {
    $7 = HEAP32[($0 + 44 | 0) >> 2] | 0;
    if ((HEAP32[($7 + 48 | 0) >> 2] | 0 | 0) >= ($2 | 0)) {
     break label$17
    }
    label$18 : {
     $10 = HEAP32[($7 + 52 | 0) >> 2] | 0;
     if (!$10) {
      break label$18
     }
     ImGui__MemFree_28void__29($10 | 0);
    }
    $10 = ImGui__MemAlloc_28unsigned_20long_29($2 << 3 | 0 | 0) | 0;
    HEAP32[($7 + 48 | 0) >> 2] = $2;
    HEAP32[($7 + 52 | 0) >> 2] = $10;
    $7 = HEAP32[($0 + 44 | 0) >> 2] | 0;
   }
   $10 = 0;
   label$19 : {
    if (($2 | 0) <= (0 | 0)) {
     break label$19
    }
    $11 = $3 & 16777215 | 0;
    $8 = $9 + 1 | 0;
    $12 = HEAP32[($7 + 52 | 0) >> 2] | 0;
    $15 = $2 + -1 | 0;
    $7 = $15;
    label$20 : while (1) {
     label$21 : {
      $14 = $1 + ($10 << 3 | 0) | 0;
      $7 = $7 << 3 | 0;
      $13 = $1 + $7 | 0;
      $16 = Math_fround(Math_fround(HEAPF32[$14 >> 2]) - Math_fround(HEAPF32[$13 >> 2]));
      $17 = Math_fround(Math_fround(HEAPF32[($14 + 4 | 0) >> 2]) - Math_fround(HEAPF32[($13 + 4 | 0) >> 2]));
      $18 = Math_fround(Math_fround($16 * $16) + Math_fround($17 * $17));
      if (!($18 > Math_fround(0.0))) {
       break label$21
      }
      $18 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($18)));
      $17 = Math_fround($17 * $18);
      $16 = Math_fround($16 * $18);
     }
     $7 = $12 + $7 | 0;
     HEAPF32[($7 + 4 | 0) >> 2] = Math_fround(-$16);
     HEAPF32[$7 >> 2] = $17;
     $7 = $10;
     $14 = $10 + 1 | 0;
     $10 = $14;
     if (($10 | 0) != ($2 | 0)) {
      continue label$20
     }
     break label$20;
    };
    if (($2 | 0) < (1 | 0)) {
     break label$19
    }
    $18 = Math_fround($5 * Math_fround(.5));
    $10 = 0;
    label$22 : while (1) {
     label$23 : {
      $14 = $12 + ($15 << 3 | 0) | 0;
      $7 = $10;
      $10 = $10 << 3 | 0;
      $13 = $12 + $10 | 0;
      $16 = Math_fround(Math_fround(Math_fround(HEAPF32[$14 >> 2]) + Math_fround(HEAPF32[$13 >> 2])) * Math_fround(.5));
      $17 = Math_fround(Math_fround(Math_fround(HEAPF32[($14 + 4 | 0) >> 2]) + Math_fround(HEAPF32[($13 + 4 | 0) >> 2])) * Math_fround(.5));
      $5 = Math_fround(Math_fround($16 * $16) + Math_fround($17 * $17));
      if (!($5 > Math_fround(9.999999974752427e-07))) {
       break label$23
      }
      $5 = Math_fround(Math_min(Math_fround(Math_fround(1.0) / $5), Math_fround(100.0)));
      $17 = Math_fround($17 * $5);
      $16 = Math_fround($16 * $5);
     }
     $14 = HEAP32[($0 + 52 | 0) >> 2] | 0;
     $10 = $1 + $10 | 0;
     $16 = Math_fround($18 * $16);
     HEAPF32[$14 >> 2] = Math_fround(Math_fround(HEAPF32[$10 >> 2]) - $16);
     $5 = Math_fround(HEAPF32[($10 + 4 | 0) >> 2]);
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $14;
     HEAP32[($14 + 8 | 0) >> 2] = $4;
     HEAP32[($14 + 12 | 0) >> 2] = i64toi32_i32$0;
     $17 = Math_fround($18 * $17);
     HEAPF32[($14 + 4 | 0) >> 2] = Math_fround($5 - $17);
     $14 = HEAP32[($0 + 52 | 0) >> 2] | 0;
     HEAP32[($14 + 16 | 0) >> 2] = $3;
     HEAPF32[($14 + 20 | 0) >> 2] = Math_fround($16 + Math_fround(HEAPF32[$10 >> 2]));
     $16 = Math_fround(HEAPF32[($10 + 4 | 0) >> 2]);
     i64toi32_i32$1 = $14 + 28 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $4;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAPF32[($14 + 24 | 0) >> 2] = Math_fround($17 + $16);
     $10 = HEAP32[($0 + 52 | 0) >> 2] | 0;
     HEAP32[($10 + 36 | 0) >> 2] = $11;
     HEAP32[($0 + 52 | 0) >> 2] = $10 + 40 | 0;
     $10 = HEAP32[($0 + 56 | 0) >> 2] | 0;
     $14 = $7 << 1 | 0;
     $13 = $14 + $9 | 0;
     HEAP16[($10 + 10 | 0) >> 1] = $13;
     HEAP16[($10 + 8 | 0) >> 1] = $14 + $8 | 0;
     $14 = $15 << 1 | 0;
     $15 = $14 + $8 | 0;
     HEAP16[($10 + 6 | 0) >> 1] = $15;
     HEAP16[($10 + 4 | 0) >> 1] = $15;
     HEAP16[($10 + 2 | 0) >> 1] = $14 + $9 | 0;
     HEAP16[$10 >> 1] = $13;
     HEAP32[($0 + 56 | 0) >> 2] = $10 + 12 | 0;
     $15 = $7;
     $10 = $7 + 1 | 0;
     if (($10 | 0) != ($2 | 0)) {
      continue label$22
     }
     break label$22;
    };
   }
   HEAP32[($0 + 40 | 0) >> 2] = (HEAP32[($0 + 40 | 0) >> 2] | 0) + ($6 & 65534 | 0) | 0;
  }
 }
 
 function ImDrawList___PathArcToFastEx_28ImVec2_20const__2c_20float_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $8 = 0, $10 = 0, $11 = 0, $7 = Math_fround(0), $9 = 0, $12 = 0, i64toi32_i32$0 = 0, $6 = 0, $13 = 0, i64toi32_i32$1 = 0, $69 = 0, $131 = 0;
  label$1 : {
   if (!($2 < Math_fround(.5))) {
    break label$1
   }
   label$2 : {
    $5 = HEAP32[($0 + 84 | 0) >> 2] | 0;
    if (($5 | 0) != (HEAP32[($0 + 88 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    $3 = $5 + 1 | 0;
    label$3 : {
     label$4 : {
      if ($5) {
       break label$4
      }
      $4 = 8;
      break label$3;
     }
     $4 = (($5 | 0) / (2 | 0) | 0) + $5 | 0;
    }
    $3 = ($4 | 0) > ($3 | 0) ? $4 : $3;
    if (($5 | 0) >= ($3 | 0)) {
     break label$2
    }
    $5 = ImGui__MemAlloc_28unsigned_20long_29($3 << 3 | 0 | 0) | 0;
    label$5 : {
     $4 = HEAP32[($0 + 92 | 0) >> 2] | 0;
     if (!$4) {
      break label$5
     }
     __memcpy($5 | 0, $4 | 0, (HEAP32[($0 + 84 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
     ImGui__MemFree_28void__29(HEAP32[($0 + 92 | 0) >> 2] | 0 | 0);
    }
    HEAP32[($0 + 88 | 0) >> 2] = $3;
    HEAP32[($0 + 92 | 0) >> 2] = $5;
    $5 = HEAP32[($0 + 84 | 0) >> 2] | 0;
   }
   i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
   $69 = i64toi32_i32$0;
   i64toi32_i32$0 = (HEAP32[($0 + 92 | 0) >> 2] | 0) + ($5 << 3 | 0) | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $69;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($0 + 84 | 0) >> 2] = (HEAP32[($0 + 84 | 0) >> 2] | 0) + 1 | 0;
   return;
  }
  $6 = 0;
  label$6 : {
   if (($5 | 0) > (0 | 0)) {
    break label$6
   }
   label$7 : {
    label$8 : {
     $7 = Math_fround($2 + Math_fround(.9999989867210388));
     if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
      break label$8
     }
     $5 = ~~$7;
     break label$7;
    }
    $5 = -2147483648;
   }
   $8 = HEAP32[($0 + 44 | 0) >> 2] | 0;
   label$9 : {
    label$10 : {
     if (($5 | 0) > (63 | 0)) {
      break label$10
     }
     $5 = HEAPU8[(($8 + $5 | 0) + 444 | 0) >> 0] | 0;
     break label$9;
    }
    label$11 : {
     label$12 : {
      $7 = Math_fround(HEAPF32[($8 + 20 | 0) >> 2]);
      $7 = Math_fround(Math_ceil(Math_fround(Math_fround(3.1415927410125732) / Math_fround(acosf(Math_fround(Math_fround(Math_fround(1.0) - Math_fround(($7 < $2 ? $7 : $2) / $2))))))));
      if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
       break label$12
      }
      $5 = ~~$7;
      break label$11;
     }
     $5 = -2147483648;
    }
    $5 = (($5 + 1 | 0 | 0) / (2 | 0) | 0) << 1 | 0;
    $5 = ($5 | 0) < (512 | 0) ? $5 : 512;
    $5 = ($5 | 0) > (4 | 0) ? $5 : 4;
   }
   $5 = (48 >>> 0) / (($5 & 65535 | 0) >>> 0) | 0;
  }
  $8 = $4 - $3 | 0;
  $131 = $8;
  $8 = $8 >> 31 | 0;
  $8 = ($131 ^ $8 | 0) - $8 | 0;
  $9 = 1;
  label$13 : {
   label$14 : {
    $10 = ($5 | 0) < (12 | 0) ? $5 : 12;
    $5 = $5 ? $10 : 1;
    if ($5 >>> 0 >= 2 >>> 0) {
     break label$14
    }
    $8 = $8 + 1 | 0;
    break label$13;
   }
   label$15 : {
    $11 = ($8 >>> 0) / ($5 >>> 0) | 0;
    $9 = $8 - Math_imul($11, $5) | 0;
    if ($9) {
     break label$15
    }
    $8 = $11 + 1 | 0;
    $9 = $10;
    break label$13;
   }
   $8 = $11 + 2 | 0;
   $9 = $5 + (((($5 - $9 | 0) << 24 >> 24 | 0) / (-2 | 0) | 0) << 24 >> 24) | 0;
   $6 = 1;
  }
  label$16 : {
   $10 = HEAP32[($0 + 88 | 0) >> 2] | 0;
   $11 = HEAP32[($0 + 84 | 0) >> 2] | 0;
   $8 = $11 + $8 | 0;
   if (($10 | 0) >= ($8 | 0)) {
    break label$16
   }
   label$17 : {
    label$18 : {
     if ($10) {
      break label$18
     }
     $12 = 8;
     break label$17;
    }
    $12 = (($10 | 0) / (2 | 0) | 0) + $10 | 0;
   }
   $12 = ($12 | 0) > ($8 | 0) ? $12 : $8;
   if (($10 | 0) >= ($12 | 0)) {
    break label$16
   }
   $10 = ImGui__MemAlloc_28unsigned_20long_29($12 << 3 | 0 | 0) | 0;
   label$19 : {
    $13 = HEAP32[($0 + 92 | 0) >> 2] | 0;
    if (!$13) {
     break label$19
    }
    __memcpy($10 | 0, $13 | 0, (HEAP32[($0 + 84 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
    ImGui__MemFree_28void__29(HEAP32[($0 + 92 | 0) >> 2] | 0 | 0);
   }
   HEAP32[($0 + 88 | 0) >> 2] = $12;
   HEAP32[($0 + 92 | 0) >> 2] = $10;
  }
  HEAP32[($0 + 84 | 0) >> 2] = $8;
  $10 = (HEAP32[($0 + 92 | 0) >> 2] | 0) + ($11 << 3 | 0) | 0;
  $11 = $3;
  label$20 : {
   if ($3 >>> 0 < 48 >>> 0) {
    break label$20
   }
   $8 = ($3 | 0) % (48 | 0) | 0;
   $11 = ($8 | 0) < (0 | 0) ? $8 + 48 | 0 : $8;
  }
  $8 = HEAP32[($0 + 44 | 0) >> 2] | 0;
  $0 = $8 + ($11 << 3 | 0) | 0;
  $7 = Math_fround(HEAPF32[($0 + 60 | 0) >> 2]);
  HEAPF32[$10 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($0 + 56 | 0) >> 2]) * $2) + Math_fround(HEAPF32[$1 >> 2]));
  HEAPF32[($10 + 4 | 0) >> 2] = Math_fround(Math_fround($7 * $2) + Math_fround(HEAPF32[($1 + 4 | 0) >> 2]));
  $0 = $10 + 8 | 0;
  label$21 : {
   label$22 : {
    if (($4 | 0) < ($3 | 0)) {
     break label$22
    }
    $10 = $9 + $3 | 0;
    if (($10 | 0) > ($4 | 0)) {
     break label$21
    }
    $3 = $11 + $9 | 0;
    label$23 : while (1) {
     $3 = ($3 | 0) > (47 | 0) ? $3 + -48 | 0 : $3;
     $11 = $8 + ($3 << 3 | 0) | 0;
     $7 = Math_fround(HEAPF32[($11 + 60 | 0) >> 2]);
     HEAPF32[$0 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($11 + 56 | 0) >> 2]) * $2) + Math_fround(HEAPF32[$1 >> 2]));
     HEAPF32[($0 + 4 | 0) >> 2] = Math_fround(Math_fround($7 * $2) + Math_fround(HEAPF32[($1 + 4 | 0) >> 2]));
     $3 = $3 + $5 | 0;
     $0 = $0 + 8 | 0;
     $10 = $5 + $10 | 0;
     if (($10 | 0) <= ($4 | 0)) {
      continue label$23
     }
     break label$21;
    };
   }
   $10 = $3 - $9 | 0;
   if (($10 | 0) < ($4 | 0)) {
    break label$21
   }
   $3 = $11 - $9 | 0;
   label$24 : while (1) {
    $3 = ($3 | 0) < (0 | 0) ? $3 + 48 | 0 : $3;
    $11 = $8 + ($3 << 3 | 0) | 0;
    $7 = Math_fround(HEAPF32[($11 + 60 | 0) >> 2]);
    HEAPF32[$0 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($11 + 56 | 0) >> 2]) * $2) + Math_fround(HEAPF32[$1 >> 2]));
    HEAPF32[($0 + 4 | 0) >> 2] = Math_fround(Math_fround($7 * $2) + Math_fround(HEAPF32[($1 + 4 | 0) >> 2]));
    $3 = $3 - $5 | 0;
    $0 = $0 + 8 | 0;
    $10 = $10 - $5 | 0;
    if (($10 | 0) >= ($4 | 0)) {
     continue label$24
    }
    break label$24;
   };
  }
  label$25 : {
   if (!$6) {
    break label$25
   }
   $5 = ($4 | 0) % (48 | 0) | 0;
   $5 = $8 + ((($5 | 0) < (0 | 0) ? $5 + 48 | 0 : $5) << 3 | 0) | 0;
   $7 = Math_fround(HEAPF32[($5 + 60 | 0) >> 2]);
   HEAPF32[$0 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($5 + 56 | 0) >> 2]) * $2) + Math_fround(HEAPF32[$1 >> 2]));
   HEAPF32[($0 + 4 | 0) >> 2] = Math_fround(Math_fround($7 * $2) + Math_fround(HEAPF32[($1 + 4 | 0) >> 2]));
  }
 }
 
 function ImDrawList___PathArcToN_28ImVec2_20const__2c_20float_2c_20float_2c_20float_2c_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = Math_fround($3);
  $4 = Math_fround($4);
  $5 = $5 | 0;
  var $6 = 0, $8 = 0, $7 = 0, $12 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $68 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0);
  $6 = HEAP32[($0 + 84 | 0) >> 2] | 0;
  label$1 : {
   if (!($2 < Math_fround(.5))) {
    break label$1
   }
   label$2 : {
    if (($6 | 0) != (HEAP32[($0 + 88 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    $7 = $6 + 1 | 0;
    label$3 : {
     label$4 : {
      if ($6) {
       break label$4
      }
      $8 = 8;
      break label$3;
     }
     $8 = (($6 | 0) / (2 | 0) | 0) + $6 | 0;
    }
    $7 = ($8 | 0) > ($7 | 0) ? $8 : $7;
    if (($6 | 0) >= ($7 | 0)) {
     break label$2
    }
    $6 = ImGui__MemAlloc_28unsigned_20long_29($7 << 3 | 0 | 0) | 0;
    label$5 : {
     $8 = HEAP32[($0 + 92 | 0) >> 2] | 0;
     if (!$8) {
      break label$5
     }
     __memcpy($6 | 0, $8 | 0, (HEAP32[($0 + 84 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
     ImGui__MemFree_28void__29(HEAP32[($0 + 92 | 0) >> 2] | 0 | 0);
    }
    HEAP32[($0 + 88 | 0) >> 2] = $7;
    HEAP32[($0 + 92 | 0) >> 2] = $6;
    $6 = HEAP32[($0 + 84 | 0) >> 2] | 0;
   }
   i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
   $68 = i64toi32_i32$0;
   i64toi32_i32$0 = (HEAP32[($0 + 92 | 0) >> 2] | 0) + ($6 << 3 | 0) | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $68;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($0 + 84 | 0) >> 2] = (HEAP32[($0 + 84 | 0) >> 2] | 0) + 1 | 0;
   return;
  }
  label$6 : {
   $6 = ($5 + $6 | 0) + 1 | 0;
   if ((HEAP32[($0 + 88 | 0) >> 2] | 0 | 0) >= ($6 | 0)) {
    break label$6
   }
   $7 = ImGui__MemAlloc_28unsigned_20long_29($6 << 3 | 0 | 0) | 0;
   label$7 : {
    $8 = HEAP32[($0 + 92 | 0) >> 2] | 0;
    if (!$8) {
     break label$7
    }
    __memcpy($7 | 0, $8 | 0, (HEAP32[($0 + 84 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
    ImGui__MemFree_28void__29(HEAP32[($0 + 92 | 0) >> 2] | 0 | 0);
   }
   HEAP32[($0 + 88 | 0) >> 2] = $6;
   HEAP32[($0 + 92 | 0) >> 2] = $7;
  }
  $8 = 0;
  label$8 : {
   if (($5 | 0) < (0 | 0)) {
    break label$8
   }
   $9 = Math_fround($4 - $3);
   $6 = HEAP32[($0 + 84 | 0) >> 2] | 0;
   $10 = Math_fround($5 | 0);
   label$9 : while (1) {
    $7 = $8;
    $4 = Math_fround(Math_fround(Math_fround(Math_fround($8 | 0) / $10) * $9) + $3);
    $11 = Math_fround(Math_fround(Math_fround(sinf(Math_fround($4))) * $2) + Math_fround(HEAPF32[($1 + 4 | 0) >> 2]));
    $4 = Math_fround(Math_fround(Math_fround(cosf(Math_fround($4))) * $2) + Math_fround(HEAPF32[$1 >> 2]));
    label$10 : {
     if (($6 | 0) != (HEAP32[($0 + 88 | 0) >> 2] | 0 | 0)) {
      break label$10
     }
     $8 = $6 + 1 | 0;
     label$11 : {
      label$12 : {
       if ($6) {
        break label$12
       }
       $12 = 8;
       break label$11;
      }
      $12 = (($6 | 0) / (2 | 0) | 0) + $6 | 0;
     }
     $8 = ($12 | 0) > ($8 | 0) ? $12 : $8;
     if (($6 | 0) >= ($8 | 0)) {
      break label$10
     }
     $6 = ImGui__MemAlloc_28unsigned_20long_29($8 << 3 | 0 | 0) | 0;
     label$13 : {
      $12 = HEAP32[($0 + 92 | 0) >> 2] | 0;
      if (!$12) {
       break label$13
      }
      __memcpy($6 | 0, $12 | 0, (HEAP32[($0 + 84 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
      ImGui__MemFree_28void__29(HEAP32[($0 + 92 | 0) >> 2] | 0 | 0);
     }
     HEAP32[($0 + 88 | 0) >> 2] = $8;
     HEAP32[($0 + 92 | 0) >> 2] = $6;
     $6 = HEAP32[($0 + 84 | 0) >> 2] | 0;
    }
    $6 = (HEAP32[($0 + 92 | 0) >> 2] | 0) + ($6 << 3 | 0) | 0;
    HEAPF32[($6 + 4 | 0) >> 2] = $11;
    HEAPF32[$6 >> 2] = $4;
    $6 = (HEAP32[($0 + 84 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($0 + 84 | 0) >> 2] = $6;
    $8 = $7 + 1 | 0;
    if (($7 | 0) != ($5 | 0)) {
     continue label$9
    }
    break label$9;
   };
  }
 }
 
 function ImDrawList__PathArcToFast_28ImVec2_20const__2c_20float_2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $61 = 0;
  label$1 : {
   if (!($2 < Math_fround(.5))) {
    break label$1
   }
   label$2 : {
    $4 = HEAP32[($0 + 84 | 0) >> 2] | 0;
    if (($4 | 0) != (HEAP32[($0 + 88 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    $3 = $4 + 1 | 0;
    label$3 : {
     label$4 : {
      if ($4) {
       break label$4
      }
      $5 = 8;
      break label$3;
     }
     $5 = (($4 | 0) / (2 | 0) | 0) + $4 | 0;
    }
    $3 = ($5 | 0) > ($3 | 0) ? $5 : $3;
    if (($4 | 0) >= ($3 | 0)) {
     break label$2
    }
    $4 = ImGui__MemAlloc_28unsigned_20long_29($3 << 3 | 0 | 0) | 0;
    label$5 : {
     $5 = HEAP32[($0 + 92 | 0) >> 2] | 0;
     if (!$5) {
      break label$5
     }
     __memcpy($4 | 0, $5 | 0, (HEAP32[($0 + 84 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
     ImGui__MemFree_28void__29(HEAP32[($0 + 92 | 0) >> 2] | 0 | 0);
    }
    HEAP32[($0 + 88 | 0) >> 2] = $3;
    HEAP32[($0 + 92 | 0) >> 2] = $4;
    $4 = HEAP32[($0 + 84 | 0) >> 2] | 0;
   }
   i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
   $61 = i64toi32_i32$0;
   i64toi32_i32$0 = (HEAP32[($0 + 92 | 0) >> 2] | 0) + ($4 << 3 | 0) | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $61;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($0 + 84 | 0) >> 2] = (HEAP32[($0 + 84 | 0) >> 2] | 0) + 1 | 0;
   return;
  }
  ImDrawList___PathArcToFastEx_28ImVec2_20const__2c_20float_2c_20int_2c_20int_2c_20int_29($0 | 0, $1 | 0, Math_fround($2), $3 << 2 | 0 | 0, $4 << 2 | 0 | 0, 0 | 0);
 }
 
 function ImDrawList__PathArcTo_28ImVec2_20const__2c_20float_2c_20float_2c_20float_2c_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = Math_fround($3);
  $4 = Math_fround($4);
  $5 = $5 | 0;
  var $6 = 0, $8 = Math_fround(0), $7 = 0, $9 = Math_fround(0), $12 = 0, $11 = 0, $10 = 0, $13 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $69 = 0;
  label$1 : {
   if (!($2 < Math_fround(.5))) {
    break label$1
   }
   label$2 : {
    $5 = HEAP32[($0 + 84 | 0) >> 2] | 0;
    if (($5 | 0) != (HEAP32[($0 + 88 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    $6 = $5 + 1 | 0;
    label$3 : {
     label$4 : {
      if ($5) {
       break label$4
      }
      $7 = 8;
      break label$3;
     }
     $7 = (($5 | 0) / (2 | 0) | 0) + $5 | 0;
    }
    $6 = ($7 | 0) > ($6 | 0) ? $7 : $6;
    if (($5 | 0) >= ($6 | 0)) {
     break label$2
    }
    $5 = ImGui__MemAlloc_28unsigned_20long_29($6 << 3 | 0 | 0) | 0;
    label$5 : {
     $7 = HEAP32[($0 + 92 | 0) >> 2] | 0;
     if (!$7) {
      break label$5
     }
     __memcpy($5 | 0, $7 | 0, (HEAP32[($0 + 84 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
     ImGui__MemFree_28void__29(HEAP32[($0 + 92 | 0) >> 2] | 0 | 0);
    }
    HEAP32[($0 + 88 | 0) >> 2] = $6;
    HEAP32[($0 + 92 | 0) >> 2] = $5;
    $5 = HEAP32[($0 + 84 | 0) >> 2] | 0;
   }
   i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
   $69 = i64toi32_i32$0;
   i64toi32_i32$0 = (HEAP32[($0 + 92 | 0) >> 2] | 0) + ($5 << 3 | 0) | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $69;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($0 + 84 | 0) >> 2] = (HEAP32[($0 + 84 | 0) >> 2] | 0) + 1 | 0;
   return;
  }
  label$6 : {
   if (($5 | 0) < (1 | 0)) {
    break label$6
   }
   ImDrawList___PathArcToN_28ImVec2_20const__2c_20float_2c_20float_2c_20float_2c_20int_29($0 | 0, $1 | 0, Math_fround($2), Math_fround($3), Math_fround($4), $5 | 0);
   return;
  }
  label$7 : {
   label$8 : {
    $5 = HEAP32[($0 + 44 | 0) >> 2] | 0;
    if (!(Math_fround(HEAPF32[($5 + 440 | 0) >> 2]) >= $2)) {
     break label$8
    }
    $8 = Math_fround(Math_fround($4 * Math_fround(48.0)) / Math_fround(6.2831854820251465));
    $9 = Math_fround(Math_fround($3 * Math_fround(48.0)) / Math_fround(6.2831854820251465));
    label$9 : {
     label$10 : {
      if (!($4 < $3)) {
       break label$10
      }
      $6 = $9 >= Math_fround(0.0) ^ -1 | 0;
      label$11 : {
       label$12 : {
        if (!(Math_fround(Math_abs($9)) < Math_fround(2147483648.0))) {
         break label$12
        }
        $5 = ~~$9;
        break label$11;
       }
       $5 = -2147483648;
      }
      label$13 : {
       label$14 : {
        $9 = Math_fround($5 - ($6 & $9 != Math_fround($5 | 0) | 0) | 0 | 0);
        if (!(Math_fround(Math_abs($9)) < Math_fround(2147483648.0))) {
         break label$14
        }
        $6 = ~~$9;
        break label$13;
       }
       $6 = -2147483648;
      }
      label$15 : {
       $8 = Math_fround(Math_ceil($8));
       if (!(Math_fround(Math_abs($8)) < Math_fround(2147483648.0))) {
        break label$15
       }
       $10 = ~~$8;
       $5 = $6 - $10 | 0;
       break label$9;
      }
      $10 = -2147483648;
      $5 = $6 - -2147483648 | 0;
      break label$9;
     }
     $6 = $8 >= Math_fround(0.0) ^ -1 | 0;
     label$16 : {
      label$17 : {
       if (!(Math_fround(Math_abs($8)) < Math_fround(2147483648.0))) {
        break label$17
       }
       $5 = ~~$8;
       break label$16;
      }
      $5 = -2147483648;
     }
     label$18 : {
      label$19 : {
       $8 = Math_fround($5 - ($6 & $8 != Math_fround($5 | 0) | 0) | 0 | 0);
       if (!(Math_fround(Math_abs($8)) < Math_fround(2147483648.0))) {
        break label$19
       }
       $10 = ~~$8;
       break label$18;
      }
      $10 = -2147483648;
     }
     label$20 : {
      label$21 : {
       $8 = Math_fround(Math_ceil($9));
       if (!(Math_fround(Math_abs($8)) < Math_fround(2147483648.0))) {
        break label$21
       }
       $6 = ~~$8;
       break label$20;
      }
      $6 = -2147483648;
     }
     $5 = $10 - $6 | 0;
    }
    label$22 : {
     $7 = HEAP32[($0 + 88 | 0) >> 2] | 0;
     $8 = Math_fround(Math_fround($10 | 0) * Math_fround(3.1415927410125732));
     $8 = Math_fround(Math_abs(Math_fround($4 - Math_fround(Math_fround($8 + $8) / Math_fround(48.0)))));
     $9 = Math_fround(Math_fround($6 | 0) * Math_fround(3.1415927410125732));
     $11 = Math_fround(Math_abs(Math_fround(Math_fround(Math_fround($9 + $9) / Math_fround(48.0)) - $3))) >= Math_fround(9.999999747378752e-06);
     $12 = ((((($5 | 0) > (0 | 0) ? $5 : 0) + (HEAP32[($0 + 84 | 0) >> 2] | 0) | 0) + ($8 >= Math_fround(9.999999747378752e-06)) | 0) + $11 | 0) + 1 | 0;
     if (($7 | 0) >= ($12 | 0)) {
      break label$22
     }
     $7 = ImGui__MemAlloc_28unsigned_20long_29($12 << 3 | 0 | 0) | 0;
     label$23 : {
      $13 = HEAP32[($0 + 92 | 0) >> 2] | 0;
      if (!$13) {
       break label$23
      }
      __memcpy($7 | 0, $13 | 0, (HEAP32[($0 + 84 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
      ImGui__MemFree_28void__29(HEAP32[($0 + 92 | 0) >> 2] | 0 | 0);
     }
     HEAP32[($0 + 88 | 0) >> 2] = $12;
     HEAP32[($0 + 92 | 0) >> 2] = $7;
     $7 = $12;
    }
    label$24 : {
     if (!$11) {
      break label$24
     }
     $9 = Math_fround(Math_fround(Math_fround(sinf(Math_fround($3))) * $2) + Math_fround(HEAPF32[($1 + 4 | 0) >> 2]));
     $3 = Math_fround(Math_fround(Math_fround(cosf(Math_fround($3))) * $2) + Math_fround(HEAPF32[$1 >> 2]));
     label$25 : {
      $12 = HEAP32[($0 + 84 | 0) >> 2] | 0;
      if (($12 | 0) != ($7 | 0)) {
       break label$25
      }
      $11 = $7 + 1 | 0;
      label$26 : {
       label$27 : {
        if ($7) {
         break label$27
        }
        $13 = 8;
        break label$26;
       }
       $13 = (($7 | 0) / (2 | 0) | 0) + $7 | 0;
      }
      $12 = $7;
      $11 = ($13 | 0) > ($11 | 0) ? $13 : $11;
      if (($7 | 0) >= ($11 | 0)) {
       break label$25
      }
      $7 = ImGui__MemAlloc_28unsigned_20long_29($11 << 3 | 0 | 0) | 0;
      label$28 : {
       $12 = HEAP32[($0 + 92 | 0) >> 2] | 0;
       if (!$12) {
        break label$28
       }
       __memcpy($7 | 0, $12 | 0, (HEAP32[($0 + 84 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
       ImGui__MemFree_28void__29(HEAP32[($0 + 92 | 0) >> 2] | 0 | 0);
      }
      HEAP32[($0 + 88 | 0) >> 2] = $11;
      HEAP32[($0 + 92 | 0) >> 2] = $7;
      $12 = HEAP32[($0 + 84 | 0) >> 2] | 0;
     }
     $7 = (HEAP32[($0 + 92 | 0) >> 2] | 0) + ($12 << 3 | 0) | 0;
     HEAPF32[($7 + 4 | 0) >> 2] = $9;
     HEAPF32[$7 >> 2] = $3;
     HEAP32[($0 + 84 | 0) >> 2] = (HEAP32[($0 + 84 | 0) >> 2] | 0) + 1 | 0;
    }
    label$29 : {
     if (($5 | 0) < (1 | 0)) {
      break label$29
     }
     ImDrawList___PathArcToFastEx_28ImVec2_20const__2c_20float_2c_20int_2c_20int_2c_20int_29($0 | 0, $1 | 0, Math_fround($2), $6 | 0, $10 | 0, 0 | 0);
    }
    if (!($8 >= Math_fround(9.999999747378752e-06))) {
     break label$7
    }
    $3 = Math_fround(Math_fround(Math_fround(sinf(Math_fround($4))) * $2) + Math_fround(HEAPF32[($1 + 4 | 0) >> 2]));
    $2 = Math_fround(Math_fround(Math_fround(cosf(Math_fround($4))) * $2) + Math_fround(HEAPF32[$1 >> 2]));
    label$30 : {
     $5 = HEAP32[($0 + 84 | 0) >> 2] | 0;
     if (($5 | 0) != (HEAP32[($0 + 88 | 0) >> 2] | 0 | 0)) {
      break label$30
     }
     $1 = $5 + 1 | 0;
     label$31 : {
      label$32 : {
       if ($5) {
        break label$32
       }
       $6 = 8;
       break label$31;
      }
      $6 = (($5 | 0) / (2 | 0) | 0) + $5 | 0;
     }
     $1 = ($6 | 0) > ($1 | 0) ? $6 : $1;
     if (($5 | 0) >= ($1 | 0)) {
      break label$30
     }
     $5 = ImGui__MemAlloc_28unsigned_20long_29($1 << 3 | 0 | 0) | 0;
     label$33 : {
      $6 = HEAP32[($0 + 92 | 0) >> 2] | 0;
      if (!$6) {
       break label$33
      }
      __memcpy($5 | 0, $6 | 0, (HEAP32[($0 + 84 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
      ImGui__MemFree_28void__29(HEAP32[($0 + 92 | 0) >> 2] | 0 | 0);
     }
     HEAP32[($0 + 88 | 0) >> 2] = $1;
     HEAP32[($0 + 92 | 0) >> 2] = $5;
     $5 = HEAP32[($0 + 84 | 0) >> 2] | 0;
    }
    $5 = (HEAP32[($0 + 92 | 0) >> 2] | 0) + ($5 << 3 | 0) | 0;
    HEAPF32[($5 + 4 | 0) >> 2] = $3;
    HEAPF32[$5 >> 2] = $2;
    HEAP32[($0 + 84 | 0) >> 2] = (HEAP32[($0 + 84 | 0) >> 2] | 0) + 1 | 0;
    return;
   }
   label$34 : {
    label$35 : {
     $8 = Math_fround($2 + Math_fround(.9999989867210388));
     if (!(Math_fround(Math_abs($8)) < Math_fround(2147483648.0))) {
      break label$35
     }
     $6 = ~~$8;
     break label$34;
    }
    $6 = -2147483648;
   }
   $8 = Math_fround(Math_abs(Math_fround($4 - $3)));
   label$36 : {
    label$37 : {
     if (($6 | 0) > (63 | 0)) {
      break label$37
     }
     $6 = HEAPU8[(($5 + $6 | 0) + 444 | 0) >> 0] | 0;
     break label$36;
    }
    label$38 : {
     label$39 : {
      $9 = Math_fround(HEAPF32[($5 + 20 | 0) >> 2]);
      $9 = Math_fround(Math_ceil(Math_fround(Math_fround(3.1415927410125732) / Math_fround(acosf(Math_fround(Math_fround(Math_fround(1.0) - Math_fround(($9 < $2 ? $9 : $2) / $2))))))));
      if (!(Math_fround(Math_abs($9)) < Math_fround(2147483648.0))) {
       break label$39
      }
      $5 = ~~$9;
      break label$38;
     }
     $5 = -2147483648;
    }
    $5 = (($5 + 1 | 0 | 0) / (2 | 0) | 0) << 1 | 0;
    $5 = ($5 | 0) < (512 | 0) ? $5 : 512;
    $6 = ($5 | 0) > (4 | 0) ? $5 : 4;
   }
   label$40 : {
    label$41 : {
     $9 = Math_fround(Math_fround(6.2831854820251465) / $8);
     if (!(Math_fround(Math_abs($9)) < Math_fround(2147483648.0))) {
      break label$41
     }
     $5 = ~~$9;
     break label$40;
    }
    $5 = -2147483648;
   }
   label$42 : {
    label$43 : {
     $8 = Math_fround(Math_ceil(Math_fround(Math_fround($8 * Math_fround($6 | 0)) / Math_fround(6.2831854820251465))));
     if (!(Math_fround(Math_abs($8)) < Math_fround(2147483648.0))) {
      break label$43
     }
     $6 = ~~$8;
     break label$42;
    }
    $6 = -2147483648;
   }
   ImDrawList___PathArcToN_28ImVec2_20const__2c_20float_2c_20float_2c_20float_2c_20int_29($0 | 0, $1 | 0, Math_fround($2), Math_fround($3), Math_fround($4), (($6 | 0) > ($5 | 0) ? $6 : $5) | 0);
  }
 }
 
 function ImDrawList__PathRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20float_2c_20int_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = Math_fround($3);
  $4 = $4 | 0;
  var $9 = 0, $10 = 0, $11 = 0, $5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $7 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $6 = Math_fround(0), $8 = Math_fround(0), $134 = 0, $248 = 0, $386 = 0, $466 = 0, $544 = 0, $619 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  label$1 : {
   label$2 : {
    if (($4 | 0) != (-1 | 0)) {
     break label$2
    }
    $4 = 240;
    break label$1;
   }
   label$3 : {
    if (($4 + -1 | 0) >>> 0 > 14 >>> 0) {
     break label$3
    }
    $4 = $4 << 4 | 0;
    break label$1;
   }
   $4 = $4 & 496 | 0 ? $4 : $4 | 240 | 0;
  }
  label$4 : {
   label$5 : {
    label$6 : {
     if (($4 & 496 | 0 | 0) == (256 | 0)) {
      break label$6
     }
     $6 = Math_fround(HEAPF32[$1 >> 2]);
     $7 = Math_fround(Math_fround(Math_fround(Math_abs(Math_fround(Math_fround(HEAPF32[$2 >> 2]) - $6))) * (($4 & 48 | 0 | 0) == (48 | 0) ? Math_fround(.5) : ($4 & 192 | 0 | 0) == (192 | 0) ? Math_fround(.5) : Math_fround(1.0))) + Math_fround(-1.0));
     $3 = $7 > $3 ? $3 : $7;
     $8 = Math_fround(HEAPF32[($1 + 4 | 0) >> 2]);
     $7 = Math_fround(Math_fround(Math_fround(Math_abs(Math_fround(Math_fround(HEAPF32[($2 + 4 | 0) >> 2]) - $8))) * (($4 & 80 | 0 | 0) == (80 | 0) ? Math_fround(.5) : ($4 & 160 | 0 | 0) == (160 | 0) ? Math_fround(.5) : Math_fround(1.0))) + Math_fround(-1.0));
     $3 = $3 < $7 ? $3 : $7;
     if (!($3 < Math_fround(.5))) {
      break label$5
     }
    }
    label$7 : {
     $4 = HEAP32[($0 + 84 | 0) >> 2] | 0;
     if (($4 | 0) != (HEAP32[($0 + 88 | 0) >> 2] | 0 | 0)) {
      break label$7
     }
     $9 = $4 + 1 | 0;
     label$8 : {
      label$9 : {
       if ($4) {
        break label$9
       }
       $10 = 8;
       break label$8;
      }
      $10 = (($4 | 0) / (2 | 0) | 0) + $4 | 0;
     }
     $9 = ($10 | 0) > ($9 | 0) ? $10 : $9;
     if (($4 | 0) >= ($9 | 0)) {
      break label$7
     }
     $4 = ImGui__MemAlloc_28unsigned_20long_29($9 << 3 | 0 | 0) | 0;
     label$10 : {
      $10 = HEAP32[($0 + 92 | 0) >> 2] | 0;
      if (!$10) {
       break label$10
      }
      __memcpy($4 | 0, $10 | 0, (HEAP32[($0 + 84 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
      ImGui__MemFree_28void__29(HEAP32[($0 + 92 | 0) >> 2] | 0 | 0);
     }
     HEAP32[($0 + 88 | 0) >> 2] = $9;
     HEAP32[($0 + 92 | 0) >> 2] = $4;
     $4 = HEAP32[($0 + 84 | 0) >> 2] | 0;
    }
    i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    $134 = i64toi32_i32$0;
    i64toi32_i32$0 = (HEAP32[($0 + 92 | 0) >> 2] | 0) + ($4 << 3 | 0) | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $134;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $11 = HEAP32[($0 + 84 | 0) >> 2] | 0;
    $4 = $11 + 1 | 0;
    HEAP32[($0 + 84 | 0) >> 2] = $4;
    $9 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    $10 = HEAP32[$2 >> 2] | 0;
    label$11 : {
     if (($4 | 0) != (HEAP32[($0 + 88 | 0) >> 2] | 0 | 0)) {
      break label$11
     }
     $11 = $11 + 2 | 0;
     label$12 : {
      label$13 : {
       if ($4) {
        break label$13
       }
       $12 = 8;
       break label$12;
      }
      $12 = (($4 | 0) / (2 | 0) | 0) + $4 | 0;
     }
     $11 = ($12 | 0) > ($11 | 0) ? $12 : $11;
     if (($4 | 0) >= ($11 | 0)) {
      break label$11
     }
     $4 = ImGui__MemAlloc_28unsigned_20long_29($11 << 3 | 0 | 0) | 0;
     label$14 : {
      $12 = HEAP32[($0 + 92 | 0) >> 2] | 0;
      if (!$12) {
       break label$14
      }
      __memcpy($4 | 0, $12 | 0, (HEAP32[($0 + 84 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
      ImGui__MemFree_28void__29(HEAP32[($0 + 92 | 0) >> 2] | 0 | 0);
     }
     HEAP32[($0 + 88 | 0) >> 2] = $11;
     HEAP32[($0 + 92 | 0) >> 2] = $4;
     $4 = HEAP32[($0 + 84 | 0) >> 2] | 0;
    }
    $4 = (HEAP32[($0 + 92 | 0) >> 2] | 0) + ($4 << 3 | 0) | 0;
    HEAP32[($4 + 4 | 0) >> 2] = $9;
    HEAP32[$4 >> 2] = $10;
    $9 = HEAP32[($0 + 84 | 0) >> 2] | 0;
    $4 = $9 + 1 | 0;
    HEAP32[($0 + 84 | 0) >> 2] = $4;
    label$15 : {
     if (($4 | 0) != (HEAP32[($0 + 88 | 0) >> 2] | 0 | 0)) {
      break label$15
     }
     $9 = $9 + 2 | 0;
     label$16 : {
      label$17 : {
       if ($4) {
        break label$17
       }
       $10 = 8;
       break label$16;
      }
      $10 = (($4 | 0) / (2 | 0) | 0) + $4 | 0;
     }
     $9 = ($10 | 0) > ($9 | 0) ? $10 : $9;
     if (($4 | 0) >= ($9 | 0)) {
      break label$15
     }
     $4 = ImGui__MemAlloc_28unsigned_20long_29($9 << 3 | 0 | 0) | 0;
     label$18 : {
      $10 = HEAP32[($0 + 92 | 0) >> 2] | 0;
      if (!$10) {
       break label$18
      }
      __memcpy($4 | 0, $10 | 0, (HEAP32[($0 + 84 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
      ImGui__MemFree_28void__29(HEAP32[($0 + 92 | 0) >> 2] | 0 | 0);
     }
     HEAP32[($0 + 88 | 0) >> 2] = $9;
     HEAP32[($0 + 92 | 0) >> 2] = $4;
     $4 = HEAP32[($0 + 84 | 0) >> 2] | 0;
    }
    i64toi32_i32$1 = HEAP32[$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($2 + 4 | 0) >> 2] | 0;
    $248 = i64toi32_i32$1;
    i64toi32_i32$1 = (HEAP32[($0 + 92 | 0) >> 2] | 0) + ($4 << 3 | 0) | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $248;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $9 = HEAP32[($0 + 84 | 0) >> 2] | 0;
    $4 = $9 + 1 | 0;
    HEAP32[($0 + 84 | 0) >> 2] = $4;
    $2 = HEAP32[($2 + 4 | 0) >> 2] | 0;
    $1 = HEAP32[$1 >> 2] | 0;
    label$19 : {
     if (($4 | 0) != (HEAP32[($0 + 88 | 0) >> 2] | 0 | 0)) {
      break label$19
     }
     $9 = $9 + 2 | 0;
     label$20 : {
      label$21 : {
       if ($4) {
        break label$21
       }
       $10 = 8;
       break label$20;
      }
      $10 = (($4 | 0) / (2 | 0) | 0) + $4 | 0;
     }
     $9 = ($10 | 0) > ($9 | 0) ? $10 : $9;
     if (($4 | 0) >= ($9 | 0)) {
      break label$19
     }
     $4 = ImGui__MemAlloc_28unsigned_20long_29($9 << 3 | 0 | 0) | 0;
     label$22 : {
      $10 = HEAP32[($0 + 92 | 0) >> 2] | 0;
      if (!$10) {
       break label$22
      }
      __memcpy($4 | 0, $10 | 0, (HEAP32[($0 + 84 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
      ImGui__MemFree_28void__29(HEAP32[($0 + 92 | 0) >> 2] | 0 | 0);
     }
     HEAP32[($0 + 88 | 0) >> 2] = $9;
     HEAP32[($0 + 92 | 0) >> 2] = $4;
     $4 = HEAP32[($0 + 84 | 0) >> 2] | 0;
    }
    $4 = (HEAP32[($0 + 92 | 0) >> 2] | 0) + ($4 << 3 | 0) | 0;
    HEAP32[($4 + 4 | 0) >> 2] = $2;
    HEAP32[$4 >> 2] = $1;
    HEAP32[($0 + 84 | 0) >> 2] = (HEAP32[($0 + 84 | 0) >> 2] | 0) + 1 | 0;
    break label$4;
   }
   $13 = $4 & 16 | 0 ? $3 : Math_fround(0.0);
   HEAPF32[($5 + 12 | 0) >> 2] = Math_fround($8 + $13);
   HEAPF32[($5 + 8 | 0) >> 2] = Math_fround($6 + $13);
   $10 = $4 & 128 | 0;
   $7 = $4 & 32 | 0 ? $3 : Math_fround(0.0);
   label$23 : {
    label$24 : {
     if (!($13 < Math_fround(.5))) {
      break label$24
     }
     label$25 : {
      $9 = HEAP32[($0 + 84 | 0) >> 2] | 0;
      if (($9 | 0) != (HEAP32[($0 + 88 | 0) >> 2] | 0 | 0)) {
       break label$25
      }
      $11 = $9 + 1 | 0;
      label$26 : {
       label$27 : {
        if ($9) {
         break label$27
        }
        $12 = 8;
        break label$26;
       }
       $12 = (($9 | 0) / (2 | 0) | 0) + $9 | 0;
      }
      $11 = ($12 | 0) > ($11 | 0) ? $12 : $11;
      if (($9 | 0) >= ($11 | 0)) {
       break label$25
      }
      $9 = ImGui__MemAlloc_28unsigned_20long_29($11 << 3 | 0 | 0) | 0;
      label$28 : {
       $12 = HEAP32[($0 + 92 | 0) >> 2] | 0;
       if (!$12) {
        break label$28
       }
       __memcpy($9 | 0, $12 | 0, (HEAP32[($0 + 84 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
       ImGui__MemFree_28void__29(HEAP32[($0 + 92 | 0) >> 2] | 0 | 0);
      }
      HEAP32[($0 + 88 | 0) >> 2] = $11;
      HEAP32[($0 + 92 | 0) >> 2] = $9;
      $9 = HEAP32[($0 + 84 | 0) >> 2] | 0;
     }
     i64toi32_i32$0 = HEAP32[($5 + 8 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($5 + 12 | 0) >> 2] | 0;
     $386 = i64toi32_i32$0;
     i64toi32_i32$0 = (HEAP32[($0 + 92 | 0) >> 2] | 0) + ($9 << 3 | 0) | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $386;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[($0 + 84 | 0) >> 2] = (HEAP32[($0 + 84 | 0) >> 2] | 0) + 1 | 0;
     break label$23;
    }
    ImDrawList___PathArcToFastEx_28ImVec2_20const__2c_20float_2c_20int_2c_20int_2c_20int_29($0 | 0, $5 + 8 | 0 | 0, Math_fround($13), 24 | 0, 36 | 0, 0 | 0);
   }
   $9 = $4 & 64 | 0;
   $13 = $10 ? $3 : Math_fround(0.0);
   $6 = Math_fround(HEAPF32[$2 >> 2]);
   HEAPF32[($5 + 12 | 0) >> 2] = Math_fround($7 + Math_fround(HEAPF32[($1 + 4 | 0) >> 2]));
   HEAPF32[($5 + 8 | 0) >> 2] = Math_fround($6 - $7);
   label$29 : {
    label$30 : {
     if (!($7 < Math_fround(.5))) {
      break label$30
     }
     label$31 : {
      $4 = HEAP32[($0 + 84 | 0) >> 2] | 0;
      if (($4 | 0) != (HEAP32[($0 + 88 | 0) >> 2] | 0 | 0)) {
       break label$31
      }
      $10 = $4 + 1 | 0;
      label$32 : {
       label$33 : {
        if ($4) {
         break label$33
        }
        $11 = 8;
        break label$32;
       }
       $11 = (($4 | 0) / (2 | 0) | 0) + $4 | 0;
      }
      $10 = ($11 | 0) > ($10 | 0) ? $11 : $10;
      if (($4 | 0) >= ($10 | 0)) {
       break label$31
      }
      $4 = ImGui__MemAlloc_28unsigned_20long_29($10 << 3 | 0 | 0) | 0;
      label$34 : {
       $11 = HEAP32[($0 + 92 | 0) >> 2] | 0;
       if (!$11) {
        break label$34
       }
       __memcpy($4 | 0, $11 | 0, (HEAP32[($0 + 84 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
       ImGui__MemFree_28void__29(HEAP32[($0 + 92 | 0) >> 2] | 0 | 0);
      }
      HEAP32[($0 + 88 | 0) >> 2] = $10;
      HEAP32[($0 + 92 | 0) >> 2] = $4;
      $4 = HEAP32[($0 + 84 | 0) >> 2] | 0;
     }
     i64toi32_i32$1 = HEAP32[($5 + 8 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($5 + 12 | 0) >> 2] | 0;
     $466 = i64toi32_i32$1;
     i64toi32_i32$1 = (HEAP32[($0 + 92 | 0) >> 2] | 0) + ($4 << 3 | 0) | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $466;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($0 + 84 | 0) >> 2] = (HEAP32[($0 + 84 | 0) >> 2] | 0) + 1 | 0;
     break label$29;
    }
    ImDrawList___PathArcToFastEx_28ImVec2_20const__2c_20float_2c_20int_2c_20int_2c_20int_29($0 | 0, $5 + 8 | 0 | 0, Math_fround($7), 36 | 0, 48 | 0, 0 | 0);
   }
   $3 = $9 ? $3 : Math_fround(0.0);
   $7 = Math_fround(HEAPF32[$2 >> 2]);
   HEAPF32[($5 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($2 + 4 | 0) >> 2]) - $13);
   HEAPF32[($5 + 8 | 0) >> 2] = Math_fround($7 - $13);
   label$35 : {
    label$36 : {
     if (!($13 < Math_fround(.5))) {
      break label$36
     }
     label$37 : {
      $4 = HEAP32[($0 + 84 | 0) >> 2] | 0;
      if (($4 | 0) != (HEAP32[($0 + 88 | 0) >> 2] | 0 | 0)) {
       break label$37
      }
      $9 = $4 + 1 | 0;
      label$38 : {
       label$39 : {
        if ($4) {
         break label$39
        }
        $10 = 8;
        break label$38;
       }
       $10 = (($4 | 0) / (2 | 0) | 0) + $4 | 0;
      }
      $9 = ($10 | 0) > ($9 | 0) ? $10 : $9;
      if (($4 | 0) >= ($9 | 0)) {
       break label$37
      }
      $4 = ImGui__MemAlloc_28unsigned_20long_29($9 << 3 | 0 | 0) | 0;
      label$40 : {
       $10 = HEAP32[($0 + 92 | 0) >> 2] | 0;
       if (!$10) {
        break label$40
       }
       __memcpy($4 | 0, $10 | 0, (HEAP32[($0 + 84 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
       ImGui__MemFree_28void__29(HEAP32[($0 + 92 | 0) >> 2] | 0 | 0);
      }
      HEAP32[($0 + 88 | 0) >> 2] = $9;
      HEAP32[($0 + 92 | 0) >> 2] = $4;
      $4 = HEAP32[($0 + 84 | 0) >> 2] | 0;
     }
     i64toi32_i32$0 = HEAP32[($5 + 8 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($5 + 12 | 0) >> 2] | 0;
     $544 = i64toi32_i32$0;
     i64toi32_i32$0 = (HEAP32[($0 + 92 | 0) >> 2] | 0) + ($4 << 3 | 0) | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $544;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[($0 + 84 | 0) >> 2] = (HEAP32[($0 + 84 | 0) >> 2] | 0) + 1 | 0;
     break label$35;
    }
    ImDrawList___PathArcToFastEx_28ImVec2_20const__2c_20float_2c_20int_2c_20int_2c_20int_29($0 | 0, $5 + 8 | 0 | 0, Math_fround($13), 0 | 0, 12 | 0, 0 | 0);
   }
   $7 = Math_fround(HEAPF32[$1 >> 2]);
   HEAPF32[($5 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($2 + 4 | 0) >> 2]) - $3);
   HEAPF32[($5 + 8 | 0) >> 2] = Math_fround($3 + $7);
   label$41 : {
    if (!($3 < Math_fround(.5))) {
     break label$41
    }
    label$42 : {
     $4 = HEAP32[($0 + 84 | 0) >> 2] | 0;
     if (($4 | 0) != (HEAP32[($0 + 88 | 0) >> 2] | 0 | 0)) {
      break label$42
     }
     $2 = $4 + 1 | 0;
     label$43 : {
      label$44 : {
       if ($4) {
        break label$44
       }
       $1 = 8;
       break label$43;
      }
      $1 = (($4 | 0) / (2 | 0) | 0) + $4 | 0;
     }
     $2 = ($1 | 0) > ($2 | 0) ? $1 : $2;
     if (($4 | 0) >= ($2 | 0)) {
      break label$42
     }
     $4 = ImGui__MemAlloc_28unsigned_20long_29($2 << 3 | 0 | 0) | 0;
     label$45 : {
      $1 = HEAP32[($0 + 92 | 0) >> 2] | 0;
      if (!$1) {
       break label$45
      }
      __memcpy($4 | 0, $1 | 0, (HEAP32[($0 + 84 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
      ImGui__MemFree_28void__29(HEAP32[($0 + 92 | 0) >> 2] | 0 | 0);
     }
     HEAP32[($0 + 88 | 0) >> 2] = $2;
     HEAP32[($0 + 92 | 0) >> 2] = $4;
     $4 = HEAP32[($0 + 84 | 0) >> 2] | 0;
    }
    i64toi32_i32$1 = HEAP32[($5 + 8 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($5 + 12 | 0) >> 2] | 0;
    $619 = i64toi32_i32$1;
    i64toi32_i32$1 = (HEAP32[($0 + 92 | 0) >> 2] | 0) + ($4 << 3 | 0) | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $619;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($0 + 84 | 0) >> 2] = (HEAP32[($0 + 84 | 0) >> 2] | 0) + 1 | 0;
    break label$4;
   }
   ImDrawList___PathArcToFastEx_28ImVec2_20const__2c_20float_2c_20int_2c_20int_2c_20int_29($0 | 0, $5 + 8 | 0 | 0, Math_fround($3), 12 | 0, 24 | 0, 0 | 0);
  }
  __stack_pointer = $5 + 16 | 0;
 }
 
 function ImDrawList__AddLine_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = Math_fround($4);
  var $7 = 0, $8 = 0, $5 = Math_fround(0), $6 = Math_fround(0);
  label$1 : {
   if ($3 >>> 0 < 16777216 >>> 0) {
    break label$1
   }
   $5 = Math_fround(Math_fround(HEAPF32[$1 >> 2]) + Math_fround(.5));
   $6 = Math_fround(Math_fround(HEAPF32[($1 + 4 | 0) >> 2]) + Math_fround(.5));
   label$2 : {
    $1 = HEAP32[($0 + 84 | 0) >> 2] | 0;
    if (($1 | 0) != (HEAP32[($0 + 88 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    $7 = $1 + 1 | 0;
    label$3 : {
     label$4 : {
      if ($1) {
       break label$4
      }
      $8 = 8;
      break label$3;
     }
     $8 = (($1 | 0) / (2 | 0) | 0) + $1 | 0;
    }
    $7 = ($8 | 0) > ($7 | 0) ? $8 : $7;
    if (($1 | 0) >= ($7 | 0)) {
     break label$2
    }
    $1 = ImGui__MemAlloc_28unsigned_20long_29($7 << 3 | 0 | 0) | 0;
    label$5 : {
     $8 = HEAP32[($0 + 92 | 0) >> 2] | 0;
     if (!$8) {
      break label$5
     }
     __memcpy($1 | 0, $8 | 0, (HEAP32[($0 + 84 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
     ImGui__MemFree_28void__29(HEAP32[($0 + 92 | 0) >> 2] | 0 | 0);
    }
    HEAP32[($0 + 88 | 0) >> 2] = $7;
    HEAP32[($0 + 92 | 0) >> 2] = $1;
    $1 = HEAP32[($0 + 84 | 0) >> 2] | 0;
   }
   $1 = (HEAP32[($0 + 92 | 0) >> 2] | 0) + ($1 << 3 | 0) | 0;
   HEAPF32[($1 + 4 | 0) >> 2] = $6;
   HEAPF32[$1 >> 2] = $5;
   $7 = HEAP32[($0 + 84 | 0) >> 2] | 0;
   $1 = $7 + 1 | 0;
   HEAP32[($0 + 84 | 0) >> 2] = $1;
   $5 = Math_fround(Math_fround(HEAPF32[($2 + 4 | 0) >> 2]) + Math_fround(.5));
   $6 = Math_fround(Math_fround(HEAPF32[$2 >> 2]) + Math_fround(.5));
   label$6 : {
    if (($1 | 0) != (HEAP32[($0 + 88 | 0) >> 2] | 0 | 0)) {
     break label$6
    }
    $2 = $7 + 2 | 0;
    label$7 : {
     label$8 : {
      if ($1) {
       break label$8
      }
      $7 = 8;
      break label$7;
     }
     $7 = (($1 | 0) / (2 | 0) | 0) + $1 | 0;
    }
    $2 = ($7 | 0) > ($2 | 0) ? $7 : $2;
    if (($1 | 0) >= ($2 | 0)) {
     break label$6
    }
    $1 = ImGui__MemAlloc_28unsigned_20long_29($2 << 3 | 0 | 0) | 0;
    label$9 : {
     $7 = HEAP32[($0 + 92 | 0) >> 2] | 0;
     if (!$7) {
      break label$9
     }
     __memcpy($1 | 0, $7 | 0, (HEAP32[($0 + 84 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
     ImGui__MemFree_28void__29(HEAP32[($0 + 92 | 0) >> 2] | 0 | 0);
    }
    HEAP32[($0 + 88 | 0) >> 2] = $2;
    HEAP32[($0 + 92 | 0) >> 2] = $1;
    $1 = HEAP32[($0 + 84 | 0) >> 2] | 0;
   }
   $1 = (HEAP32[($0 + 92 | 0) >> 2] | 0) + ($1 << 3 | 0) | 0;
   HEAPF32[($1 + 4 | 0) >> 2] = $5;
   HEAPF32[$1 >> 2] = $6;
   $1 = (HEAP32[($0 + 84 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($0 + 84 | 0) >> 2] = $1;
   ImDrawList__AddPolyline_28ImVec2_20const__2c_20int_2c_20unsigned_20int_2c_20int_2c_20float_29($0 | 0, HEAP32[($0 + 92 | 0) >> 2] | 0 | 0, $1 | 0, $3 | 0, 0 | 0, Math_fround($4));
   HEAP32[($0 + 84 | 0) >> 2] = 0;
  }
 }
 
 function ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = Math_fround($4);
  $5 = $5 | 0;
  $6 = Math_fround($6);
  var $7 = 0, $8 = Math_fround(0);
  $7 = __stack_pointer - 16 | 0;
  __stack_pointer = $7;
  label$1 : {
   if ($3 >>> 0 < 16777216 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (!((HEAPU8[($0 + 36 | 0) >> 0] | 0) & 1 | 0)) {
      break label$3
     }
     $8 = Math_fround(HEAPF32[($1 + 4 | 0) >> 2]);
     HEAPF32[($7 + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[$1 >> 2]) + Math_fround(.5));
     HEAPF32[($7 + 12 | 0) >> 2] = Math_fround($8 + Math_fround(.5));
     $8 = Math_fround(HEAPF32[$2 >> 2]);
     HEAPF32[($7 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($2 + 4 | 0) >> 2]) + Math_fround(-.5));
     HEAPF32[$7 >> 2] = Math_fround($8 + Math_fround(-.5));
     ImDrawList__PathRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20float_2c_20int_29($0 | 0, $7 + 8 | 0 | 0, $7 | 0, Math_fround($4), $5 | 0);
     break label$2;
    }
    $8 = Math_fround(HEAPF32[($1 + 4 | 0) >> 2]);
    HEAPF32[($7 + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[$1 >> 2]) + Math_fround(.5));
    HEAPF32[($7 + 12 | 0) >> 2] = Math_fround($8 + Math_fround(.5));
    $8 = Math_fround(HEAPF32[$2 >> 2]);
    HEAPF32[($7 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($2 + 4 | 0) >> 2]) + Math_fround(-.49000000953674316));
    HEAPF32[$7 >> 2] = Math_fround($8 + Math_fround(-.49000000953674316));
    ImDrawList__PathRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20float_2c_20int_29($0 | 0, $7 + 8 | 0 | 0, $7 | 0, Math_fround($4), $5 | 0);
   }
   ImDrawList__AddPolyline_28ImVec2_20const__2c_20int_2c_20unsigned_20int_2c_20int_2c_20float_29($0 | 0, HEAP32[($0 + 92 | 0) >> 2] | 0 | 0, HEAP32[($0 + 84 | 0) >> 2] | 0 | 0, $3 | 0, 1 | 0, Math_fround($6));
   HEAP32[($0 + 84 | 0) >> 2] = 0;
  }
  __stack_pointer = $7 + 16 | 0;
 }
 
 function ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = Math_fround($4);
  $5 = $5 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $11 = 0, i64toi32_i32$2 = 0, $10 = 0, $10$hi = 0, $12 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $55 = 0, $79 = 0;
  label$1 : {
   if ($3 >>> 0 < 16777216 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($4 < Math_fround(.5)) {
      break label$3
     }
     if (($5 & 496 | 0 | 0) != (256 | 0)) {
      break label$2
     }
    }
    ImDrawList__PrimReserve_28int_2c_20int_29($0 | 0, 6 | 0, 4 | 0);
    $6 = HEAP32[($2 + 4 | 0) >> 2] | 0;
    $7 = HEAP32[$1 >> 2] | 0;
    $8 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    $9 = HEAP32[$2 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($0 + 44 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $10 = i64toi32_i32$0;
    $10$hi = i64toi32_i32$1;
    $5 = HEAP32[($0 + 56 | 0) >> 2] | 0;
    $11 = HEAPU16[($0 + 40 | 0) >> 1] | 0;
    HEAP16[($5 + 10 | 0) >> 1] = $11 + 3 | 0;
    $12 = $11 + 2 | 0;
    HEAP16[($5 + 8 | 0) >> 1] = $12;
    HEAP16[($5 + 6 | 0) >> 1] = $11;
    HEAP16[($5 + 4 | 0) >> 1] = $12;
    HEAP16[($5 + 2 | 0) >> 1] = $11 + 1 | 0;
    HEAP16[$5 >> 1] = $11;
    i64toi32_i32$2 = $1;
    i64toi32_i32$1 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    $55 = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[($0 + 52 | 0) >> 2] | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $55;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $10$hi;
    i64toi32_i32$1 = HEAP32[($0 + 52 | 0) >> 2] | 0;
    HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $10;
    HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
    $1 = HEAP32[($0 + 52 | 0) >> 2] | 0;
    HEAP32[($1 + 20 | 0) >> 2] = $9;
    HEAP32[($1 + 16 | 0) >> 2] = $3;
    HEAP32[($1 + 24 | 0) >> 2] = $8;
    i64toi32_i32$1 = (HEAP32[($0 + 52 | 0) >> 2] | 0) + 28 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $10;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $1 = HEAP32[($0 + 52 | 0) >> 2] | 0;
    HEAP32[($1 + 36 | 0) >> 2] = $3;
    i64toi32_i32$2 = $2;
    i64toi32_i32$0 = HEAP32[$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($2 + 4 | 0) >> 2] | 0;
    $79 = i64toi32_i32$0;
    i64toi32_i32$0 = $1;
    HEAP32[(i64toi32_i32$0 + 40 | 0) >> 2] = $79;
    HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$0 = (HEAP32[($0 + 52 | 0) >> 2] | 0) + 48 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $10;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $2 = HEAP32[($0 + 52 | 0) >> 2] | 0;
    HEAP32[($2 + 60 | 0) >> 2] = $7;
    HEAP32[($2 + 64 | 0) >> 2] = $6;
    HEAP32[($2 + 56 | 0) >> 2] = $3;
    i64toi32_i32$0 = (HEAP32[($0 + 52 | 0) >> 2] | 0) + 68 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $10;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $2 = HEAP32[($0 + 52 | 0) >> 2] | 0;
    HEAP32[($2 + 76 | 0) >> 2] = $3;
    HEAP32[($0 + 52 | 0) >> 2] = $2 + 80 | 0;
    HEAP32[($0 + 40 | 0) >> 2] = (HEAP32[($0 + 40 | 0) >> 2] | 0) + 4 | 0;
    HEAP32[($0 + 56 | 0) >> 2] = (HEAP32[($0 + 56 | 0) >> 2] | 0) + 12 | 0;
    return;
   }
   ImDrawList__PathRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20float_2c_20int_29($0 | 0, $1 | 0, $2 | 0, Math_fround($4), $5 | 0);
   ImDrawList__AddConvexPolyFilled_28ImVec2_20const__2c_20int_2c_20unsigned_20int_29($0 | 0, HEAP32[($0 + 92 | 0) >> 2] | 0 | 0, HEAP32[($0 + 84 | 0) >> 2] | 0 | 0, $3 | 0);
   HEAP32[($0 + 84 | 0) >> 2] = 0;
  }
 }
 
 function ImDrawList__AddTriangleFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $7 = 0, i64toi32_i32$2 = 0, $62 = 0, $116 = 0, $170 = 0;
  label$1 : {
   if ($4 >>> 0 < 16777216 >>> 0) {
    break label$1
   }
   label$2 : {
    $5 = HEAP32[($0 + 84 | 0) >> 2] | 0;
    if (($5 | 0) != (HEAP32[($0 + 88 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    $6 = $5 + 1 | 0;
    label$3 : {
     label$4 : {
      if ($5) {
       break label$4
      }
      $7 = 8;
      break label$3;
     }
     $7 = (($5 | 0) / (2 | 0) | 0) + $5 | 0;
    }
    $6 = ($7 | 0) > ($6 | 0) ? $7 : $6;
    if (($5 | 0) >= ($6 | 0)) {
     break label$2
    }
    $5 = ImGui__MemAlloc_28unsigned_20long_29($6 << 3 | 0 | 0) | 0;
    label$5 : {
     $7 = HEAP32[($0 + 92 | 0) >> 2] | 0;
     if (!$7) {
      break label$5
     }
     __memcpy($5 | 0, $7 | 0, (HEAP32[($0 + 84 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
     ImGui__MemFree_28void__29(HEAP32[($0 + 92 | 0) >> 2] | 0 | 0);
    }
    HEAP32[($0 + 88 | 0) >> 2] = $6;
    HEAP32[($0 + 92 | 0) >> 2] = $5;
    $5 = HEAP32[($0 + 84 | 0) >> 2] | 0;
   }
   i64toi32_i32$2 = $1;
   i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
   $62 = i64toi32_i32$0;
   i64toi32_i32$0 = (HEAP32[($0 + 92 | 0) >> 2] | 0) + ($5 << 3 | 0) | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $62;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $1 = HEAP32[($0 + 84 | 0) >> 2] | 0;
   $5 = $1 + 1 | 0;
   HEAP32[($0 + 84 | 0) >> 2] = $5;
   label$6 : {
    if (($5 | 0) != (HEAP32[($0 + 88 | 0) >> 2] | 0 | 0)) {
     break label$6
    }
    $1 = $1 + 2 | 0;
    label$7 : {
     label$8 : {
      if ($5) {
       break label$8
      }
      $6 = 8;
      break label$7;
     }
     $6 = (($5 | 0) / (2 | 0) | 0) + $5 | 0;
    }
    $1 = ($6 | 0) > ($1 | 0) ? $6 : $1;
    if (($5 | 0) >= ($1 | 0)) {
     break label$6
    }
    $5 = ImGui__MemAlloc_28unsigned_20long_29($1 << 3 | 0 | 0) | 0;
    label$9 : {
     $6 = HEAP32[($0 + 92 | 0) >> 2] | 0;
     if (!$6) {
      break label$9
     }
     __memcpy($5 | 0, $6 | 0, (HEAP32[($0 + 84 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
     ImGui__MemFree_28void__29(HEAP32[($0 + 92 | 0) >> 2] | 0 | 0);
    }
    HEAP32[($0 + 88 | 0) >> 2] = $1;
    HEAP32[($0 + 92 | 0) >> 2] = $5;
    $5 = HEAP32[($0 + 84 | 0) >> 2] | 0;
   }
   i64toi32_i32$2 = $2;
   i64toi32_i32$1 = HEAP32[$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($2 + 4 | 0) >> 2] | 0;
   $116 = i64toi32_i32$1;
   i64toi32_i32$1 = (HEAP32[($0 + 92 | 0) >> 2] | 0) + ($5 << 3 | 0) | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $116;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $2 = HEAP32[($0 + 84 | 0) >> 2] | 0;
   $5 = $2 + 1 | 0;
   HEAP32[($0 + 84 | 0) >> 2] = $5;
   label$10 : {
    if (($5 | 0) != (HEAP32[($0 + 88 | 0) >> 2] | 0 | 0)) {
     break label$10
    }
    $2 = $2 + 2 | 0;
    label$11 : {
     label$12 : {
      if ($5) {
       break label$12
      }
      $1 = 8;
      break label$11;
     }
     $1 = (($5 | 0) / (2 | 0) | 0) + $5 | 0;
    }
    $2 = ($1 | 0) > ($2 | 0) ? $1 : $2;
    if (($5 | 0) >= ($2 | 0)) {
     break label$10
    }
    $5 = ImGui__MemAlloc_28unsigned_20long_29($2 << 3 | 0 | 0) | 0;
    label$13 : {
     $1 = HEAP32[($0 + 92 | 0) >> 2] | 0;
     if (!$1) {
      break label$13
     }
     __memcpy($5 | 0, $1 | 0, (HEAP32[($0 + 84 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
     ImGui__MemFree_28void__29(HEAP32[($0 + 92 | 0) >> 2] | 0 | 0);
    }
    HEAP32[($0 + 88 | 0) >> 2] = $2;
    HEAP32[($0 + 92 | 0) >> 2] = $5;
    $5 = HEAP32[($0 + 84 | 0) >> 2] | 0;
   }
   i64toi32_i32$2 = $3;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $170 = i64toi32_i32$0;
   i64toi32_i32$0 = (HEAP32[($0 + 92 | 0) >> 2] | 0) + ($5 << 3 | 0) | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $170;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $5 = (HEAP32[($0 + 84 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($0 + 84 | 0) >> 2] = $5;
   ImDrawList__AddConvexPolyFilled_28ImVec2_20const__2c_20int_2c_20unsigned_20int_29($0 | 0, HEAP32[($0 + 92 | 0) >> 2] | 0 | 0, $5 | 0, $4 | 0);
   HEAP32[($0 + 84 | 0) >> 2] = 0;
  }
 }
 
 function ImDrawList__AddCircleFilled_28ImVec2_20const__2c_20float_2c_20unsigned_20int_2c_20int_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = Math_fround(0);
  label$1 : {
   if ($2 < Math_fround(.5)) {
    break label$1
   }
   if ($3 >>> 0 < 16777216 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (($4 | 0) > (0 | 0)) {
      break label$3
     }
     ImDrawList___PathArcToFastEx_28ImVec2_20const__2c_20float_2c_20int_2c_20int_2c_20int_29($0 | 0, $1 | 0, Math_fround($2), 0 | 0, 48 | 0, 0 | 0);
     $4 = (HEAP32[($0 + 84 | 0) >> 2] | 0) + -1 | 0;
     HEAP32[($0 + 84 | 0) >> 2] = $4;
     break label$2;
    }
    $4 = $4 >>> 0 < 3 >>> 0 ? 3 : ($4 | 0) < (512 | 0) ? $4 : 512;
    $5 = Math_fround($4 | 0);
    ImDrawList__PathArcTo_28ImVec2_20const__2c_20float_2c_20float_2c_20float_2c_20int_29($0 | 0, $1 | 0, Math_fround($2), Math_fround(Math_fround(0.0)), Math_fround(Math_fround(Math_fround(Math_fround($5 + Math_fround(-1.0)) * Math_fround(6.2831854820251465)) / $5)), $4 + -1 | 0 | 0);
    $4 = HEAP32[($0 + 84 | 0) >> 2] | 0;
   }
   ImDrawList__AddConvexPolyFilled_28ImVec2_20const__2c_20int_2c_20unsigned_20int_29($0 | 0, HEAP32[($0 + 92 | 0) >> 2] | 0 | 0, $4 | 0, $3 | 0);
   HEAP32[($0 + 84 | 0) >> 2] = 0;
  }
 }
 
 function ImDrawList__AddText_28ImFont_20const__2c_20float_2c_20ImVec2_20const__2c_20unsigned_20int_2c_20char_20const__2c_20char_20const__2c_20float_2c_20ImVec4_20const__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = Math_fround($7);
  $8 = $8 | 0;
  var $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $38 = 0, $41 = 0;
  $9 = __stack_pointer - 16 | 0;
  __stack_pointer = $9;
  label$1 : {
   if ($4 >>> 0 < 16777216 >>> 0) {
    break label$1
   }
   label$2 : {
    if ($6) {
     break label$2
    }
    $6 = $5 + (strlen($5 | 0) | 0) | 0;
   }
   if (($6 | 0) == ($5 | 0)) {
    break label$1
   }
   label$3 : {
    if ($1) {
     break label$3
    }
    $1 = HEAP32[((HEAP32[($0 + 44 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
   }
   label$4 : {
    if ($2 != Math_fround(0.0)) {
     break label$4
    }
    $2 = Math_fround(HEAPF32[((HEAP32[($0 + 44 | 0) >> 2] | 0) + 12 | 0) >> 2]);
   }
   i64toi32_i32$2 = $0 + 104 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $38 = i64toi32_i32$0;
   i64toi32_i32$0 = $9 + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $38;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0;
   i64toi32_i32$1 = HEAP32[($0 + 96 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0 + 100 | 0) >> 2] | 0;
   $41 = i64toi32_i32$1;
   i64toi32_i32$1 = $9;
   HEAP32[$9 >> 2] = $41;
   HEAP32[($9 + 4 | 0) >> 2] = i64toi32_i32$0;
   label$5 : {
    if (!$8) {
     break label$5
    }
    $10 = Math_fround(HEAPF32[$9 >> 2]);
    $11 = Math_fround(HEAPF32[$8 >> 2]);
    HEAPF32[$9 >> 2] = $10 >= $11 ? $10 : $11;
    $10 = Math_fround(HEAPF32[($9 + 4 | 0) >> 2]);
    $11 = Math_fround(HEAPF32[($8 + 4 | 0) >> 2]);
    HEAPF32[($9 + 4 | 0) >> 2] = $10 >= $11 ? $10 : $11;
    $10 = Math_fround(HEAPF32[($9 + 8 | 0) >> 2]);
    $11 = Math_fround(HEAPF32[($8 + 8 | 0) >> 2]);
    HEAPF32[($9 + 8 | 0) >> 2] = $10 < $11 ? $10 : $11;
    $10 = Math_fround(HEAPF32[($9 + 12 | 0) >> 2]);
    $11 = Math_fround(HEAPF32[($8 + 12 | 0) >> 2]);
    HEAPF32[($9 + 12 | 0) >> 2] = $10 < $11 ? $10 : $11;
   }
   ImFont__RenderText_28ImDrawList__2c_20float_2c_20ImVec2_20const__2c_20unsigned_20int_2c_20ImVec4_20const__2c_20char_20const__2c_20char_20const__2c_20float_2c_20bool_29_20const($1 | 0, $0 | 0, Math_fround($2), $3 | 0, $4 | 0, $9 | 0, $5 | 0, $6 | 0, Math_fround($7), ($8 | 0) != (0 | 0) | 0);
  }
  __stack_pointer = $9 + 16 | 0;
 }
 
 function ImFont__RenderText_28ImDrawList__2c_20float_2c_20ImVec2_20const__2c_20unsigned_20int_2c_20ImVec4_20const__2c_20char_20const__2c_20char_20const__2c_20float_2c_20bool_29_20const($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = Math_fround($8);
  $9 = $9 | 0;
  var $22 = 0, $12 = Math_fround(0), $24 = Math_fround(0), $26 = Math_fround(0), $11 = Math_fround(0), $16 = Math_fround(0), $21 = 0, $13 = 0, $27 = Math_fround(0), $15 = Math_fround(0), $20 = 0, $25 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $28 = Math_fround(0), $10 = 0, $14 = 0, $30 = Math_fround(0), $31 = Math_fround(0), $29 = Math_fround(0), $18 = 0, $17 = 0, $19 = 0, $23 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $10 = __stack_pointer - 16 | 0;
  __stack_pointer = $10;
  label$1 : {
   if ($7) {
    break label$1
   }
   $7 = $6 + (strlen($6 | 0) | 0) | 0;
  }
  $11 = Math_fround(HEAPF32[($5 + 12 | 0) >> 2]);
  label$2 : {
   label$3 : {
    $12 = Math_fround(HEAPF32[($3 + 4 | 0) >> 2]);
    if (!(Math_fround(Math_abs($12)) < Math_fround(2147483648.0))) {
     break label$3
    }
    $13 = ~~$12;
    break label$2;
   }
   $13 = -2147483648;
  }
  $12 = Math_fround($13 | 0);
  $13 = $11 < $12;
  label$4 : {
   label$5 : {
    $11 = Math_fround(HEAPF32[$3 >> 2]);
    if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
     break label$5
    }
    $14 = ~~$11;
    break label$4;
   }
   $14 = -2147483648;
  }
  label$6 : {
   if ($13) {
    break label$6
   }
   label$7 : {
    $11 = Math_fround(HEAPF32[($0 + 16 | 0) >> 2]);
    $15 = Math_fround($2 / $11);
    $11 = Math_fround($11 * $15);
    $2 = Math_fround($11 + $12);
    $16 = Math_fround(HEAPF32[($5 + 4 | 0) >> 2]);
    if (!($2 < $16)) {
     break label$7
    }
    if ($7 >>> 0 <= $6 >>> 0) {
     break label$7
    }
    label$8 : {
     if (!($8 > Math_fround(0.0))) {
      break label$8
     }
     label$9 : while (1) {
      $12 = $2;
      label$10 : {
       $3 = memchr($6 | 0, 10 | 0, $7 - $6 | 0 | 0) | 0;
       $6 = ImFont__CalcWordWrapPositionA_28float_2c_20char_20const__2c_20char_20const__2c_20float_29_20const($0 | 0, Math_fround($15), $6 | 0, ($3 ? $3 : $7) | 0, Math_fround($8)) | 0;
       if ($6 >>> 0 >= $7 >>> 0) {
        break label$10
       }
       label$11 : while (1) {
        label$12 : {
         $3 = HEAPU8[$6 >> 0] | 0;
         if (($3 | 0) == (32 | 0)) {
          break label$12
         }
         if (($3 | 0) != (9 | 0)) {
          break label$10
         }
        }
        $6 = $6 + 1 | 0;
        if (($6 | 0) != ($7 | 0)) {
         continue label$11
        }
        break label$11;
       };
       $6 = $7;
      }
      $6 = $6 + ((HEAPU8[$6 >> 0] | 0 | 0) == (10 | 0)) | 0;
      $2 = Math_fround($11 + $12);
      if (!($2 < Math_fround(HEAPF32[($5 + 4 | 0) >> 2]))) {
       break label$7
      }
      if ($6 >>> 0 < $7 >>> 0) {
       continue label$9
      }
      break label$7;
     };
    }
    label$13 : while (1) {
     $6 = memchr($6 | 0, 10 | 0, $7 - $6 | 0 | 0) | 0;
     $6 = $6 ? $6 + 1 | 0 : $7;
     $12 = $2;
     $2 = Math_fround($11 + $12);
     if (!($2 < $16)) {
      break label$7
     }
     if ($6 >>> 0 < $7 >>> 0) {
      continue label$13
     }
     break label$13;
    };
   }
   label$14 : {
    label$15 : {
     if (!($8 > Math_fround(0.0))) {
      break label$15
     }
     $3 = $7;
     break label$14;
    }
    label$16 : {
     if (($7 - $6 | 0 | 0) >= (10001 | 0)) {
      break label$16
     }
     $3 = $7;
     break label$14;
    }
    $3 = $6;
    $16 = Math_fround(HEAPF32[($5 + 12 | 0) >> 2]);
    if (!($12 < $16)) {
     break label$14
    }
    $3 = $6;
    if ($6 >>> 0 >= $7 >>> 0) {
     break label$14
    }
    $3 = $6;
    $2 = $12;
    label$17 : while (1) {
     $3 = memchr($3 | 0, 10 | 0, $7 - $3 | 0 | 0) | 0;
     $3 = $3 ? $3 + 1 | 0 : $7;
     $2 = Math_fround($11 + $2);
     if (!($2 < $16)) {
      break label$14
     }
     if ($3 >>> 0 < $7 >>> 0) {
      continue label$17
     }
     break label$17;
    };
   }
   if (($6 | 0) == ($3 | 0)) {
    break label$6
   }
   $17 = HEAP32[($1 + 12 | 0) >> 2] | 0;
   $7 = $3 - $6 | 0;
   $18 = Math_imul($7, 6);
   ImDrawList__PrimReserve_28int_2c_20int_29($1 | 0, $18 | 0, $7 << 2 | 0 | 0);
   $19 = $4 | 16777215 | 0;
   $20 = HEAP32[($1 + 40 | 0) >> 2] | 0;
   $21 = HEAP32[($1 + 56 | 0) >> 2] | 0;
   $22 = HEAP32[($1 + 52 | 0) >> 2] | 0;
   $13 = 0;
   $16 = Math_fround($14 | 0);
   $2 = $16;
   label$18 : {
    label$19 : while (1) {
     if ($6 >>> 0 >= $3 >>> 0) {
      break label$18
     }
     label$20 : {
      if (!($8 > Math_fround(0.0))) {
       break label$20
      }
      label$21 : while (1) {
       label$22 : {
        if ($13) {
         break label$22
        }
        $13 = ImFont__CalcWordWrapPositionA_28float_2c_20char_20const__2c_20char_20const__2c_20float_29_20const($0 | 0, Math_fround($15), $6 | 0, $3 | 0, Math_fround(Math_fround($8 - Math_fround($2 - $16)))) | 0;
       }
       if ($6 >>> 0 < $13 >>> 0) {
        break label$20
       }
       $12 = Math_fround($11 + $12);
       label$23 : {
        label$24 : while (1) {
         label$25 : {
          $7 = HEAPU8[$6 >> 0] | 0;
          if (($7 | 0) == (32 | 0)) {
           break label$25
          }
          if (($7 | 0) != (9 | 0)) {
           break label$23
          }
         }
         $6 = $6 + 1 | 0;
         if (($6 | 0) != ($3 | 0)) {
          continue label$24
         }
         break label$24;
        };
        $7 = HEAPU8[$3 >> 0] | 0;
        $6 = $3;
       }
       $13 = 0;
       $2 = $16;
       $6 = $6 + (($7 & 255 | 0 | 0) == (10 | 0)) | 0;
       if ($6 >>> 0 < $3 >>> 0) {
        continue label$21
       }
       break label$18;
      };
     }
     $7 = HEAP8[$6 >> 0] | 0;
     HEAP32[($10 + 12 | 0) >> 2] = $7;
     label$26 : {
      label$27 : {
       if (($7 | 0) < (0 | 0)) {
        break label$27
       }
       $6 = $6 + 1 | 0;
       break label$26;
      }
      $6 = $6 + (ImTextCharFromUtf8_28unsigned_20int__2c_20char_20const__2c_20char_20const__29($10 + 12 | 0 | 0, $6 | 0, $3 | 0) | 0) | 0;
      $7 = HEAP32[($10 + 12 | 0) >> 2] | 0;
     }
     label$28 : {
      label$29 : {
       if ($7 >>> 0 > 31 >>> 0) {
        break label$29
       }
       if (($7 | 0) == (10 | 0)) {
        break label$28
       }
       if (($7 | 0) == (13 | 0)) {
        continue label$19
       }
      }
      label$30 : {
       label$31 : {
        $7 = $7 & 65535 | 0;
        if ((HEAP32[($0 + 20 | 0) >> 2] | 0) >>> 0 > $7 >>> 0) {
         break label$31
        }
        $7 = HEAP32[($0 + 44 | 0) >> 2] | 0;
        break label$30;
       }
       $7 = HEAPU16[((HEAP32[($0 + 28 | 0) >> 2] | 0) + ($7 << 1 | 0) | 0) >> 1] | 0;
       $7 = (wasm2js_i32$0 = HEAP32[($0 + 44 | 0) >> 2] | 0, wasm2js_i32$1 = (HEAP32[($0 + 40 | 0) >> 2] | 0) + Math_imul($7, 40) | 0, wasm2js_i32$2 = ($7 | 0) == (65535 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
      }
      if (!$7) {
       continue label$19
      }
      $23 = Math_fround($15 * Math_fround(HEAPF32[($7 + 4 | 0) >> 2]));
      label$32 : {
       $14 = HEAP32[$7 >> 2] | 0;
       if (!($14 & 2 | 0)) {
        break label$32
       }
       $24 = Math_fround(Math_fround(Math_fround(HEAPF32[($7 + 8 | 0) >> 2]) * $15) + $2);
       $25 = Math_fround(HEAPF32[($5 + 8 | 0) >> 2]);
       if (!($24 <= $25)) {
        break label$32
       }
       $26 = Math_fround(Math_fround(Math_fround(HEAPF32[($7 + 16 | 0) >> 2]) * $15) + $2);
       $27 = Math_fround(HEAPF32[$5 >> 2]);
       if (!($26 >= $27)) {
        break label$32
       }
       $28 = Math_fround(Math_fround(Math_fround(HEAPF32[($7 + 20 | 0) >> 2]) * $15) + $12);
       $29 = Math_fround(Math_fround(Math_fround(HEAPF32[($7 + 12 | 0) >> 2]) * $15) + $12);
       $30 = Math_fround(HEAPF32[($7 + 36 | 0) >> 2]);
       $31 = Math_fround(HEAPF32[($7 + 32 | 0) >> 2]);
       $32 = Math_fround(HEAPF32[($7 + 28 | 0) >> 2]);
       $33 = Math_fround(HEAPF32[($7 + 24 | 0) >> 2]);
       label$33 : {
        label$34 : {
         if ($9) {
          break label$34
         }
         $27 = $24;
         $25 = $26;
         $24 = $29;
         $26 = $28;
         break label$33;
        }
        label$35 : {
         label$36 : {
          if ($24 < $27) {
           break label$36
          }
          $27 = $24;
          break label$35;
         }
         $33 = Math_fround(Math_fround(Math_fround(Math_fround(1.0) - Math_fround(Math_fround($26 - $27) / Math_fround($26 - $24))) * Math_fround($31 - $33)) + $33);
        }
        label$37 : {
         label$38 : {
          $24 = Math_fround(HEAPF32[($5 + 4 | 0) >> 2]);
          if ($29 < $24) {
           break label$38
          }
          $24 = $29;
          break label$37;
         }
         $32 = Math_fround(Math_fround(Math_fround(Math_fround(1.0) - Math_fround(Math_fround($28 - $24) / Math_fround($28 - $29))) * Math_fround($30 - $32)) + $32);
        }
        label$39 : {
         label$40 : {
          if ($26 > $25) {
           break label$40
          }
          $25 = $26;
          break label$39;
         }
         $31 = Math_fround(Math_fround(Math_fround(Math_fround($25 - $27) / Math_fround($26 - $27)) * Math_fround($31 - $33)) + $33);
        }
        label$41 : {
         label$42 : {
          $26 = Math_fround(HEAPF32[($5 + 12 | 0) >> 2]);
          if ($28 > $26) {
           break label$42
          }
          $26 = $28;
          break label$41;
         }
         $30 = Math_fround(Math_fround(Math_fround(Math_fround($26 - $24) / Math_fround($28 - $24)) * Math_fround($30 - $32)) + $32);
        }
        if ($24 >= $26) {
         break label$32
        }
       }
       HEAPF32[($22 + 4 | 0) >> 2] = $24;
       HEAPF32[$22 >> 2] = $27;
       HEAPF32[($22 + 20 | 0) >> 2] = $25;
       HEAPF32[($22 + 8 | 0) >> 2] = $33;
       HEAPF32[($22 + 40 | 0) >> 2] = $25;
       HEAPF32[($22 + 60 | 0) >> 2] = $27;
       HEAPF32[($22 + 24 | 0) >> 2] = $24;
       HEAPF32[($22 + 12 | 0) >> 2] = $32;
       HEAPF32[($22 + 44 | 0) >> 2] = $26;
       HEAPF32[($22 + 32 | 0) >> 2] = $32;
       HEAPF32[($22 + 28 | 0) >> 2] = $31;
       HEAPF32[($22 + 64 | 0) >> 2] = $26;
       HEAPF32[($22 + 52 | 0) >> 2] = $30;
       HEAPF32[($22 + 48 | 0) >> 2] = $31;
       HEAPF32[($22 + 72 | 0) >> 2] = $30;
       HEAPF32[($22 + 68 | 0) >> 2] = $33;
       $7 = $14 & 1 | 0 ? $19 : $4;
       HEAP32[($22 + 16 | 0) >> 2] = $7;
       HEAP32[($22 + 36 | 0) >> 2] = $7;
       HEAP32[($22 + 56 | 0) >> 2] = $7;
       HEAP32[($22 + 76 | 0) >> 2] = $7;
       HEAP16[($21 + 10 | 0) >> 1] = $20 + 3 | 0;
       $7 = $20 + 2 | 0;
       HEAP16[($21 + 8 | 0) >> 1] = $7;
       HEAP16[($21 + 6 | 0) >> 1] = $20;
       HEAP16[($21 + 4 | 0) >> 1] = $7;
       HEAP16[($21 + 2 | 0) >> 1] = $20 + 1 | 0;
       HEAP16[$21 >> 1] = $20;
       $21 = $21 + 12 | 0;
       $20 = $20 + 4 | 0;
       $22 = $22 + 80 | 0;
      }
      $2 = Math_fround($2 + $23);
      continue label$19;
     }
     $2 = $16;
     $12 = Math_fround($11 + $12);
     if (!($12 > Math_fround(HEAPF32[($5 + 12 | 0) >> 2]))) {
      continue label$19
     }
     break label$19;
    };
   }
   HEAP32[($1 + 24 | 0) >> 2] = ($22 - (HEAP32[($1 + 32 | 0) >> 2] | 0) | 0 | 0) / (20 | 0) | 0;
   $6 = ($21 - (HEAP32[($1 + 20 | 0) >> 2] | 0) | 0) >> 1 | 0;
   HEAP32[($1 + 12 | 0) >> 2] = $6;
   $7 = (Math_imul(HEAP32[$1 >> 2] | 0, 40) + (HEAP32[($1 + 8 | 0) >> 2] | 0) | 0) + -12 | 0;
   HEAP32[$7 >> 2] = ($6 - ($17 + $18 | 0) | 0) + (HEAP32[$7 >> 2] | 0) | 0;
   HEAP32[($1 + 56 | 0) >> 2] = $21;
   HEAP32[($1 + 52 | 0) >> 2] = $22;
   HEAP32[($1 + 40 | 0) >> 2] = $20;
  }
  __stack_pointer = $10 + 16 | 0;
 }
 
 function ImFont__CalcWordWrapPositionA_28float_2c_20char_20const__2c_20char_20const__2c_20float_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = Math_fround($4);
  var $14 = 0, $12 = 0, $13 = 0, $8 = Math_fround(0), $11 = 0, $5 = 0, $9 = 0, $10 = 0, $7 = Math_fround(0), $15 = Math_fround(0), $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  $6 = $0 + 12 | 0;
  $7 = Math_fround($4 / $1);
  $1 = Math_fround(0.0);
  $8 = Math_fround(0.0);
  $4 = Math_fround(0.0);
  $9 = $2;
  $10 = 0;
  $11 = 1;
  $12 = $2;
  label$1 : {
   label$2 : while (1) {
    $13 = $12;
    if ($12 >>> 0 >= $3 >>> 0) {
     break label$1
    }
    label$3 : while (1) {
     $14 = HEAP8[$13 >> 0] | 0;
     HEAP32[($5 + 12 | 0) >> 2] = $14;
     label$4 : {
      label$5 : {
       if (($14 | 0) < (0 | 0)) {
        break label$5
       }
       $12 = $13 + 1 | 0;
       break label$4;
      }
      $12 = $13 + (ImTextCharFromUtf8_28unsigned_20int__2c_20char_20const__2c_20char_20const__29($5 + 12 | 0 | 0, $13 | 0, $3 | 0) | 0) | 0;
      $14 = HEAP32[($5 + 12 | 0) >> 2] | 0;
     }
     label$6 : {
      label$7 : {
       label$8 : {
        if ($14 >>> 0 > 31 >>> 0) {
         break label$8
        }
        if (($14 | 0) == (13 | 0)) {
         break label$7
        }
        if (($14 | 0) == (10 | 0)) {
         break label$6
        }
       }
       $15 = Math_fround(HEAPF32[(wasm2js_i32$0 = (HEAP32[($0 + 8 | 0) >> 2] | 0) + ($14 << 2 | 0) | 0, wasm2js_i32$1 = $6, wasm2js_i32$2 = ($14 | 0) < (HEAP32[$0 >> 2] | 0 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) >> 2]);
       label$9 : {
        label$10 : {
         label$11 : {
          if (($14 | 0) == (9 | 0)) {
           break label$11
          }
          if (($14 | 0) == (12288 | 0)) {
           break label$11
          }
          if (($14 | 0) != (32 | 0)) {
           break label$10
          }
         }
         $14 = $11 & 1 | 0;
         $9 = $14 ? $13 : $9;
         $1 = Math_fround($1 + ($14 ? $4 : Math_fround(-0.0)));
         $11 = 0;
         $4 = Math_fround(($14 ? Math_fround(0.0) : $4) + $15);
         break label$9;
        }
        $8 = Math_fround($8 + $15);
        label$12 : {
         label$13 : {
          if (!($11 & 1 | 0)) {
           break label$13
          }
          $9 = $12;
          break label$12;
         }
         $1 = Math_fround($1 + Math_fround($4 + $8));
         $8 = Math_fround(0.0);
         $4 = Math_fround(0.0);
         $10 = $9;
        }
        label$14 : {
         $14 = $14 + -33 | 0;
         if ($14 >>> 0 > 30 >>> 0) {
          break label$14
         }
         $11 = 0;
         if ((1 << $14 | 0) & 1140860931 | 0) {
          break label$9
         }
        }
        $11 = 1;
       }
       if (!(Math_fround($1 + $8) > $7)) {
        continue label$2
       }
       $12 = $8 < $7 ? ($10 ? $10 : $9) : $13;
       break label$1;
      }
      $13 = $12;
      if ($12 >>> 0 < $3 >>> 0) {
       continue label$3
      }
      break label$1;
     }
     $4 = Math_fround(0.0);
     $11 = 1;
     $13 = $12;
     $8 = Math_fround(0.0);
     $1 = Math_fround(0.0);
     if ($12 >>> 0 < $3 >>> 0) {
      continue label$3
     }
     break label$3;
    };
    break label$2;
   };
  }
  __stack_pointer = $5 + 16 | 0;
  return $12 + ($2 >>> 0 < $3 >>> 0 & ($12 | 0) == ($2 | 0) | 0) | 0 | 0;
 }
 
 function ImDrawList__AddImage_28void__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var i64toi32_i32$1 = 0, $7 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $8 = 0, $9 = 0, $16 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $123 = 0, $127 = 0, $152 = 0, $157 = 0, $249 = 0, $253 = 0, $278 = 0, $283 = 0;
  label$1 : {
   if ($6 >>> 0 < 16777216 >>> 0) {
    break label$1
   }
   label$2 : {
    if ((HEAP32[($0 + 112 | 0) >> 2] | 0 | 0) == ($1 | 0)) {
     break label$2
    }
    label$3 : {
     $7 = HEAP32[($0 + 72 | 0) >> 2] | 0;
     if (($7 | 0) != (HEAP32[($0 + 76 | 0) >> 2] | 0 | 0)) {
      break label$3
     }
     $8 = $7 + 1 | 0;
     label$4 : {
      label$5 : {
       if ($7) {
        break label$5
       }
       $9 = 8;
       break label$4;
      }
      $9 = (($7 | 0) / (2 | 0) | 0) + $7 | 0;
     }
     $8 = ($9 | 0) > ($8 | 0) ? $9 : $8;
     if (($7 | 0) >= ($8 | 0)) {
      break label$3
     }
     $7 = ImGui__MemAlloc_28unsigned_20long_29($8 << 2 | 0 | 0) | 0;
     label$6 : {
      $9 = HEAP32[($0 + 80 | 0) >> 2] | 0;
      if (!$9) {
       break label$6
      }
      __memcpy($7 | 0, $9 | 0, (HEAP32[($0 + 72 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
      ImGui__MemFree_28void__29(HEAP32[($0 + 80 | 0) >> 2] | 0 | 0);
     }
     HEAP32[($0 + 76 | 0) >> 2] = $8;
     HEAP32[($0 + 80 | 0) >> 2] = $7;
     $7 = HEAP32[($0 + 72 | 0) >> 2] | 0;
    }
    HEAP32[((HEAP32[($0 + 80 | 0) >> 2] | 0) + ($7 << 2 | 0) | 0) >> 2] = $1;
    HEAP32[($0 + 112 | 0) >> 2] = $1;
    HEAP32[($0 + 72 | 0) >> 2] = (HEAP32[($0 + 72 | 0) >> 2] | 0) + 1 | 0;
    ImDrawList___OnChangedTextureID_28_29($0 | 0);
    ImDrawList__PrimReserve_28int_2c_20int_29($0 | 0, 6 | 0, 4 | 0);
    $8 = HEAP32[$4 >> 2] | 0;
    $9 = HEAP32[($5 + 4 | 0) >> 2] | 0;
    $10 = HEAP32[($3 + 4 | 0) >> 2] | 0;
    $11 = HEAP32[$2 >> 2] | 0;
    $12 = HEAP32[$5 >> 2] | 0;
    $13 = HEAP32[($4 + 4 | 0) >> 2] | 0;
    $14 = HEAP32[($2 + 4 | 0) >> 2] | 0;
    $15 = HEAP32[$3 >> 2] | 0;
    $1 = HEAP32[($0 + 56 | 0) >> 2] | 0;
    $7 = HEAPU16[($0 + 40 | 0) >> 1] | 0;
    HEAP16[($1 + 6 | 0) >> 1] = $7;
    HEAP16[$1 >> 1] = $7;
    HEAP16[($1 + 10 | 0) >> 1] = $7 + 3 | 0;
    $16 = $7 + 2 | 0;
    HEAP16[($1 + 8 | 0) >> 1] = $16;
    HEAP16[($1 + 4 | 0) >> 1] = $16;
    HEAP16[($1 + 2 | 0) >> 1] = $7 + 1 | 0;
    i64toi32_i32$2 = $2;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $123 = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[($0 + 52 | 0) >> 2] | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $123;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $4;
    i64toi32_i32$1 = HEAP32[$4 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($4 + 4 | 0) >> 2] | 0;
    $127 = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[($0 + 52 | 0) >> 2] | 0;
    HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $127;
    HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
    $4 = HEAP32[($0 + 52 | 0) >> 2] | 0;
    HEAP32[($4 + 20 | 0) >> 2] = $15;
    HEAP32[($4 + 16 | 0) >> 2] = $6;
    HEAP32[($4 + 24 | 0) >> 2] = $14;
    $4 = HEAP32[($0 + 52 | 0) >> 2] | 0;
    HEAP32[($4 + 32 | 0) >> 2] = $13;
    HEAP32[($4 + 28 | 0) >> 2] = $12;
    $4 = HEAP32[($0 + 52 | 0) >> 2] | 0;
    HEAP32[($4 + 36 | 0) >> 2] = $6;
    i64toi32_i32$2 = $3;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $152 = i64toi32_i32$0;
    i64toi32_i32$0 = $4;
    HEAP32[($4 + 40 | 0) >> 2] = $152;
    HEAP32[($4 + 44 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $5;
    i64toi32_i32$1 = HEAP32[$5 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($5 + 4 | 0) >> 2] | 0;
    $157 = i64toi32_i32$1;
    i64toi32_i32$1 = (HEAP32[($0 + 52 | 0) >> 2] | 0) + 48 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $157;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $5 = HEAP32[($0 + 52 | 0) >> 2] | 0;
    HEAP32[($5 + 60 | 0) >> 2] = $11;
    HEAP32[($5 + 64 | 0) >> 2] = $10;
    HEAP32[($5 + 56 | 0) >> 2] = $6;
    $5 = HEAP32[($0 + 52 | 0) >> 2] | 0;
    HEAP32[($5 + 72 | 0) >> 2] = $9;
    HEAP32[($5 + 68 | 0) >> 2] = $8;
    $5 = HEAP32[($0 + 52 | 0) >> 2] | 0;
    HEAP32[($5 + 76 | 0) >> 2] = $6;
    HEAP32[($0 + 52 | 0) >> 2] = $5 + 80 | 0;
    HEAP32[($0 + 40 | 0) >> 2] = (HEAP32[($0 + 40 | 0) >> 2] | 0) + 4 | 0;
    HEAP32[($0 + 56 | 0) >> 2] = (HEAP32[($0 + 56 | 0) >> 2] | 0) + 12 | 0;
    $5 = HEAP32[($0 + 72 | 0) >> 2] | 0;
    $6 = $5 + -1 | 0;
    HEAP32[($0 + 72 | 0) >> 2] = $6;
    label$7 : {
     label$8 : {
      if ($6) {
       break label$8
      }
      $6 = 0;
      break label$7;
     }
     $6 = HEAP32[((($5 << 2 | 0) + (HEAP32[($0 + 80 | 0) >> 2] | 0) | 0) + -8 | 0) >> 2] | 0;
    }
    HEAP32[($0 + 112 | 0) >> 2] = $6;
    ImDrawList___OnChangedTextureID_28_29($0 | 0);
    return;
   }
   ImDrawList__PrimReserve_28int_2c_20int_29($0 | 0, 6 | 0, 4 | 0);
   $8 = HEAP32[$4 >> 2] | 0;
   $9 = HEAP32[($5 + 4 | 0) >> 2] | 0;
   $10 = HEAP32[($3 + 4 | 0) >> 2] | 0;
   $11 = HEAP32[$2 >> 2] | 0;
   $12 = HEAP32[$5 >> 2] | 0;
   $13 = HEAP32[($4 + 4 | 0) >> 2] | 0;
   $14 = HEAP32[($2 + 4 | 0) >> 2] | 0;
   $15 = HEAP32[$3 >> 2] | 0;
   $1 = HEAP32[($0 + 56 | 0) >> 2] | 0;
   $7 = HEAPU16[($0 + 40 | 0) >> 1] | 0;
   HEAP16[($1 + 6 | 0) >> 1] = $7;
   HEAP16[$1 >> 1] = $7;
   HEAP16[($1 + 10 | 0) >> 1] = $7 + 3 | 0;
   $16 = $7 + 2 | 0;
   HEAP16[($1 + 8 | 0) >> 1] = $16;
   HEAP16[($1 + 4 | 0) >> 1] = $16;
   HEAP16[($1 + 2 | 0) >> 1] = $7 + 1 | 0;
   i64toi32_i32$2 = $2;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $249 = i64toi32_i32$0;
   i64toi32_i32$0 = HEAP32[($0 + 52 | 0) >> 2] | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $249;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $4;
   i64toi32_i32$1 = HEAP32[$4 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($4 + 4 | 0) >> 2] | 0;
   $253 = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[($0 + 52 | 0) >> 2] | 0;
   HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $253;
   HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
   $4 = HEAP32[($0 + 52 | 0) >> 2] | 0;
   HEAP32[($4 + 20 | 0) >> 2] = $15;
   HEAP32[($4 + 16 | 0) >> 2] = $6;
   HEAP32[($4 + 24 | 0) >> 2] = $14;
   $4 = HEAP32[($0 + 52 | 0) >> 2] | 0;
   HEAP32[($4 + 32 | 0) >> 2] = $13;
   HEAP32[($4 + 28 | 0) >> 2] = $12;
   $4 = HEAP32[($0 + 52 | 0) >> 2] | 0;
   HEAP32[($4 + 36 | 0) >> 2] = $6;
   i64toi32_i32$2 = $3;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $278 = i64toi32_i32$0;
   i64toi32_i32$0 = $4;
   HEAP32[($4 + 40 | 0) >> 2] = $278;
   HEAP32[($4 + 44 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $5;
   i64toi32_i32$1 = HEAP32[$5 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($5 + 4 | 0) >> 2] | 0;
   $283 = i64toi32_i32$1;
   i64toi32_i32$1 = (HEAP32[($0 + 52 | 0) >> 2] | 0) + 48 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $283;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $5 = HEAP32[($0 + 52 | 0) >> 2] | 0;
   HEAP32[($5 + 60 | 0) >> 2] = $11;
   HEAP32[($5 + 64 | 0) >> 2] = $10;
   HEAP32[($5 + 56 | 0) >> 2] = $6;
   $5 = HEAP32[($0 + 52 | 0) >> 2] | 0;
   HEAP32[($5 + 72 | 0) >> 2] = $9;
   HEAP32[($5 + 68 | 0) >> 2] = $8;
   $5 = HEAP32[($0 + 52 | 0) >> 2] | 0;
   HEAP32[($5 + 76 | 0) >> 2] = $6;
   HEAP32[($0 + 52 | 0) >> 2] = $5 + 80 | 0;
   HEAP32[($0 + 40 | 0) >> 2] = (HEAP32[($0 + 40 | 0) >> 2] | 0) + 4 | 0;
   HEAP32[($0 + 56 | 0) >> 2] = (HEAP32[($0 + 56 | 0) >> 2] | 0) + 12 | 0;
  }
 }
 
 function ImDrawListSplitter__Split_28ImDrawList__2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $6 = 0, $5 = 0, $7 = 0, $8 = 0, $3 = 0, $9 = 0;
  label$1 : {
   $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   if (($3 | 0) >= ($2 | 0)) {
    break label$1
   }
   label$2 : {
    if ((HEAP32[($0 + 12 | 0) >> 2] | 0 | 0) >= ($2 | 0)) {
     break label$2
    }
    $4 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($2, 24) | 0) | 0;
    label$3 : {
     $5 = HEAP32[($0 + 16 | 0) >> 2] | 0;
     if (!$5) {
      break label$3
     }
     __memcpy($4 | 0, $5 | 0, Math_imul(HEAP32[($0 + 8 | 0) >> 2] | 0, 24) | 0) | 0;
     ImGui__MemFree_28void__29(HEAP32[($0 + 16 | 0) >> 2] | 0 | 0);
    }
    HEAP32[($0 + 12 | 0) >> 2] = $2;
    HEAP32[($0 + 16 | 0) >> 2] = $4;
   }
   HEAP32[($0 + 8 | 0) >> 2] = $2;
  }
  HEAP32[($0 + 4 | 0) >> 2] = $2;
  $4 = HEAP32[($0 + 16 | 0) >> 2] | 0;
  i64toi32_i32$1 = $4;
  i64toi32_i32$0 = 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[($4 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $5 = 1;
  label$4 : {
   if (($2 | 0) <= (1 | 0)) {
    break label$4
   }
   label$5 : while (1) {
    $6 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    $7 = Math_imul($5, 24);
    $4 = $6 + $7 | 0;
    label$6 : {
     label$7 : {
      if (($5 | 0) < ($3 | 0)) {
       break label$7
      }
      i64toi32_i32$1 = $4;
      i64toi32_i32$0 = 0;
      HEAP32[$4 >> 2] = 0;
      HEAP32[($4 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $4 + 16 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $4 + 8 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      break label$6;
     }
     label$8 : {
      if ((HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
       break label$8
      }
      $6 = ImGui__MemAlloc_28unsigned_20long_29(0 | 0) | 0;
      label$9 : {
       $8 = HEAP32[($4 + 8 | 0) >> 2] | 0;
       if (!$8) {
        break label$9
       }
       __memcpy($6 | 0, $8 | 0, Math_imul(HEAP32[$4 >> 2] | 0, 40) | 0) | 0;
       ImGui__MemFree_28void__29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
      }
      HEAP32[($4 + 4 | 0) >> 2] = 0;
      HEAP32[($4 + 8 | 0) >> 2] = $6;
      $6 = HEAP32[($0 + 16 | 0) >> 2] | 0;
     }
     HEAP32[$4 >> 2] = 0;
     $4 = $6 + $7 | 0;
     $6 = $4 + 12 | 0;
     label$10 : {
      $7 = $4 + 16 | 0;
      if ((HEAP32[$7 >> 2] | 0 | 0) > (-1 | 0)) {
       break label$10
      }
      $8 = ImGui__MemAlloc_28unsigned_20long_29(0 | 0) | 0;
      label$11 : {
       $4 = $4 + 20 | 0;
       $9 = HEAP32[$4 >> 2] | 0;
       if (!$9) {
        break label$11
       }
       __memcpy($8 | 0, $9 | 0, (HEAP32[$6 >> 2] | 0) << 1 | 0 | 0) | 0;
       ImGui__MemFree_28void__29(HEAP32[$4 >> 2] | 0 | 0);
      }
      HEAP32[$4 >> 2] = $8;
      HEAP32[$7 >> 2] = 0;
     }
     HEAP32[$6 >> 2] = 0;
    }
    $5 = $5 + 1 | 0;
    if (($5 | 0) != ($2 | 0)) {
     continue label$5
    }
    break label$5;
   };
  }
 }
 
 function ImFontConfig__ImFontConfig_28_29($0) {
  $0 = $0 | 0;
  $0 = memset($0 | 0, 0 | 0, 120 | 0) | 0;
  HEAP16[($0 + 72 | 0) >> 1] = 65535;
  HEAP32[($0 + 68 | 0) >> 2] = 1065353216;
  HEAP32[($0 + 56 | 0) >> 2] = 2139095039;
  HEAP32[($0 + 20 | 0) >> 2] = 3;
  HEAP32[($0 + 24 | 0) >> 2] = 1;
  HEAP8[($0 + 8 | 0) >> 0] = 1;
  return $0 | 0;
 }
 
 function ImFontAtlas__ImFontAtlas_28_29($0) {
  $0 = $0 | 0;
  $0 = memset($0 | 0, 0 | 0, 1128 | 0) | 0;
  HEAP32[($0 + 12 | 0) >> 2] = 1;
  HEAP32[($0 + 1128 | 0) >> 2] = -1;
  HEAP32[($0 + 1132 | 0) >> 2] = -1;
  return $0 | 0;
 }
 
 function ImFontAtlas___ImFontAtlas_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  ImFontAtlas__Clear_28_29($0 | 0);
  label$1 : {
   $1 = HEAP32[($0 + 92 | 0) >> 2] | 0;
   if (!$1) {
    break label$1
   }
   ImGui__MemFree_28void__29($1 | 0);
  }
  label$2 : {
   $1 = HEAP32[($0 + 80 | 0) >> 2] | 0;
   if (!$1) {
    break label$2
   }
   ImGui__MemFree_28void__29($1 | 0);
  }
  label$3 : {
   $1 = HEAP32[($0 + 68 | 0) >> 2] | 0;
   if (!$1) {
    break label$3
   }
   ImGui__MemFree_28void__29($1 | 0);
  }
  return $0 | 0;
 }
 
 function ImFontAtlas__Clear_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, i64toi32_i32$0 = 0, $2 = 0, $3 = 0;
  ImFontAtlas__ClearInputData_28_29($0 | 0);
  label$1 : {
   $1 = HEAP32[($0 + 28 | 0) >> 2] | 0;
   if (!$1) {
    break label$1
   }
   ImGui__MemFree_28void__29($1 | 0);
  }
  label$2 : {
   $1 = HEAP32[($0 + 32 | 0) >> 2] | 0;
   if (!$1) {
    break label$2
   }
   ImGui__MemFree_28void__29($1 | 0);
  }
  $1 = 0;
  HEAP8[($0 + 25 | 0) >> 0] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0 + 28 | 0) >> 2] = 0;
  HEAP32[($0 + 32 | 0) >> 2] = i64toi32_i32$0;
  label$3 : {
   $2 = HEAP32[($0 + 60 | 0) >> 2] | 0;
   if (($2 | 0) < (1 | 0)) {
    break label$3
   }
   label$4 : while (1) {
    label$5 : {
     $3 = HEAP32[((HEAP32[($0 + 68 | 0) >> 2] | 0) + ($1 << 2 | 0) | 0) >> 2] | 0;
     if (!$3) {
      break label$5
     }
     ImFont___ImFont_28_29($3 | 0) | 0;
     ImGui__MemFree_28void__29($3 | 0);
     $2 = HEAP32[($0 + 60 | 0) >> 2] | 0;
    }
    $1 = $1 + 1 | 0;
    if (($1 | 0) < ($2 | 0)) {
     continue label$4
    }
    break label$4;
   };
  }
  label$6 : {
   $1 = HEAP32[($0 + 68 | 0) >> 2] | 0;
   if (!$1) {
    break label$6
   }
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 60 | 0) >> 2] = 0;
   HEAP32[($0 + 64 | 0) >> 2] = i64toi32_i32$0;
   ImGui__MemFree_28void__29($1 | 0);
   HEAP32[($0 + 68 | 0) >> 2] = 0;
  }
  HEAP8[($0 + 24 | 0) >> 0] = 0;
 }
 
 function ImFontAtlas__ClearInputData_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $2 = 0, $1 = 0, $5 = 0, $4 = 0, $6 = 0, $10 = 0, i64toi32_i32$0 = 0, $7 = 0, $11 = 0, $8 = 0, $9 = 0;
  label$1 : {
   $1 = HEAP32[($0 + 84 | 0) >> 2] | 0;
   if (($1 | 0) < (1 | 0)) {
    break label$1
   }
   $2 = HEAP32[($0 + 92 | 0) >> 2] | 0;
   $3 = 0;
   label$2 : while (1) {
    label$3 : {
     $4 = Math_imul($3, 120);
     $5 = $2 + $4 | 0;
     $6 = HEAP32[$5 >> 2] | 0;
     if (!$6) {
      break label$3
     }
     if (!(HEAPU8[($5 + 8 | 0) >> 0] | 0)) {
      break label$3
     }
     ImGui__MemFree_28void__29($6 | 0);
     $2 = HEAP32[($0 + 92 | 0) >> 2] | 0;
     HEAP32[($2 + $4 | 0) >> 2] = 0;
     $1 = HEAP32[($0 + 84 | 0) >> 2] | 0;
    }
    $3 = $3 + 1 | 0;
    if (($3 | 0) < ($1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $3 = 0;
  label$4 : {
   label$5 : {
    $2 = HEAP32[($0 + 60 | 0) >> 2] | 0;
    if (($2 | 0) > (0 | 0)) {
     break label$5
    }
    $5 = HEAP32[($0 + 92 | 0) >> 2] | 0;
    break label$4;
   }
   $5 = HEAP32[($0 + 92 | 0) >> 2] | 0;
   $7 = $5 + Math_imul($1, 120) | 0;
   $8 = $2 & 1 | 0;
   $1 = HEAP32[($0 + 68 | 0) >> 2] | 0;
   label$6 : {
    if (($2 | 0) == (1 | 0)) {
     break label$6
    }
    $9 = $2 & -2 | 0;
    $3 = 0;
    $2 = 0;
    label$7 : while (1) {
     label$8 : {
      $4 = $3 << 2 | 0;
      $10 = $1 + $4 | 0;
      $11 = HEAP32[$10 >> 2] | 0;
      $6 = HEAP32[($11 + 52 | 0) >> 2] | 0;
      if ($6 >>> 0 < $5 >>> 0) {
       break label$8
      }
      if ($6 >>> 0 >= $7 >>> 0) {
       break label$8
      }
      HEAP32[($11 + 52 | 0) >> 2] = 0;
      HEAP16[((HEAP32[$10 >> 2] | 0) + 56 | 0) >> 1] = 0;
     }
     label$9 : {
      $6 = $1 + ($4 | 4 | 0) | 0;
      $10 = HEAP32[$6 >> 2] | 0;
      $4 = HEAP32[($10 + 52 | 0) >> 2] | 0;
      if ($4 >>> 0 < $5 >>> 0) {
       break label$9
      }
      if ($4 >>> 0 >= $7 >>> 0) {
       break label$9
      }
      HEAP32[($10 + 52 | 0) >> 2] = 0;
      HEAP16[((HEAP32[$6 >> 2] | 0) + 56 | 0) >> 1] = 0;
     }
     $3 = $3 + 2 | 0;
     $2 = $2 + 2 | 0;
     if (($2 | 0) != ($9 | 0)) {
      continue label$7
     }
     break label$7;
    };
   }
   if (!$8) {
    break label$4
   }
   $1 = $1 + ($3 << 2 | 0) | 0;
   $2 = HEAP32[$1 >> 2] | 0;
   $3 = HEAP32[($2 + 52 | 0) >> 2] | 0;
   if ($3 >>> 0 < $5 >>> 0) {
    break label$4
   }
   if ($3 >>> 0 >= $7 >>> 0) {
    break label$4
   }
   HEAP32[($2 + 52 | 0) >> 2] = 0;
   HEAP16[((HEAP32[$1 >> 2] | 0) + 56 | 0) >> 1] = 0;
  }
  label$10 : {
   if (!$5) {
    break label$10
   }
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 84 | 0) >> 2] = 0;
   HEAP32[($0 + 88 | 0) >> 2] = i64toi32_i32$0;
   ImGui__MemFree_28void__29($5 | 0);
   HEAP32[($0 + 92 | 0) >> 2] = 0;
  }
  label$11 : {
   $3 = HEAP32[($0 + 80 | 0) >> 2] | 0;
   if (!$3) {
    break label$11
   }
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 72 | 0) >> 2] = 0;
   HEAP32[($0 + 76 | 0) >> 2] = i64toi32_i32$0;
   ImGui__MemFree_28void__29($3 | 0);
   HEAP32[($0 + 80 | 0) >> 2] = 0;
  }
  i64toi32_i32$0 = -1;
  HEAP32[($0 + 1128 | 0) >> 2] = -1;
  HEAP32[($0 + 1132 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function ImFontAtlas__AddFontFromMemoryCompressedBase85TTF_28char_20const__2c_20float_2c_20ImFontConfig_20const__2c_20unsigned_20short_20const__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $6 = 0, $12 = 0, $13 = 0, $5 = 0, $7 = 0, $26 = 0, $33 = 0, $40 = 0, $47 = 0;
  $5 = ImGui__MemAlloc_28unsigned_20long_29((((strlen($1 | 0) | 0) + 4 | 0 | 0) / (5 | 0) | 0) << 2 | 0 | 0) | 0;
  label$1 : {
   $6 = HEAPU8[$1 >> 0] | 0;
   if (!$6) {
    break label$1
   }
   $7 = $5;
   label$2 : while (1) {
    $6 = $6 << 24 >> 24;
    $26 = (($6 | 0) > (91 | 0) ? -36 : -35) + $6 | 0;
    $6 = HEAP8[($1 + 1 | 0) >> 0] | 0;
    $33 = (($6 | 0) > (91 | 0) ? -36 : -35) + $6 | 0;
    $6 = HEAP8[($1 + 2 | 0) >> 0] | 0;
    $40 = (($6 | 0) > (91 | 0) ? -36 : -35) + $6 | 0;
    $6 = HEAP8[($1 + 3 | 0) >> 0] | 0;
    $47 = (($6 | 0) > (91 | 0) ? -36 : -35) + $6 | 0;
    $6 = HEAP8[($1 + 4 | 0) >> 0] | 0;
    $12 = $7;
    $13 = $26 + Math_imul($33 + Math_imul($40 + Math_imul($47 + Math_imul((($6 | 0) > (91 | 0) ? -36 : -35) + $6 | 0, 85) | 0, 85) | 0, 85) | 0, 85) | 0;
    HEAP8[$12 >> 0] = $13;
    HEAP8[($12 + 1 | 0) >> 0] = $13 >>> 8 | 0;
    HEAP8[($12 + 2 | 0) >> 0] = $13 >>> 16 | 0;
    HEAP8[($12 + 3 | 0) >> 0] = $13 >>> 24 | 0;
    $7 = $12 + 4 | 0;
    $6 = HEAPU8[($1 + 5 | 0) >> 0] | 0;
    $1 = $1 + 5 | 0;
    if ($6) {
     continue label$2
    }
    break label$2;
   };
  }
  $1 = ImFontAtlas__AddFontFromMemoryCompressedTTF_28void_20const__2c_20int_2c_20float_2c_20ImFontConfig_20const__2c_20unsigned_20short_20const__29($0 | 0, $5 | 0, $1 | 0, Math_fround($2), $3 | 0, $4 | 0) | 0;
  ImGui__MemFree_28void__29($5 | 0);
  return $1 | 0;
 }
 
 function ImFontAtlasBuildWithStbTruetype_28ImFontAtlas__29($0) {
  $0 = $0 | 0;
  var $2 = 0, $3 = 0, $14 = 0, $13 = 0, $10 = 0, $23 = 0, $18 = 0, $36 = Math_fround(0), $1 = 0, $19 = 0, $68 = Math_fround(0), $69 = Math_fround(0), $79 = Math_fround(0), $9 = 0, $21 = 0, $15 = 0, $47 = Math_fround(0), $86 = Math_fround(0), $12 = 0, $84 = Math_fround(0), i64toi32_i32$1 = 0, $82 = Math_fround(0), $8 = 0, $85 = Math_fround(0), $78 = Math_fround(0), $20 = 0, i64toi32_i32$0 = 0, $11 = 0, $83 = Math_fround(0), $16 = 0, $22 = 0, $26 = 0, $17 = 0, $89 = Math_fround(0), $5 = 0, $29 = 0, $27 = 0, $7 = 0, $81 = Math_fround(0), $4 = 0, i64toi32_i32$2 = 0, $6 = 0, $37 = 0, $38 = 0, $63 = 0, $24 = 0, $28 = 0, $30 = 0, $70 = 0, $90 = Math_fround(0), $55 = Math_fround(0), $31 = 0, $32 = 0, $40 = 0, $67 = 0, $43 = 0, $54 = Math_fround(0), $62 = 0, $71 = 0, $76 = Math_fround(0), $113 = 0, $25 = 0, $33 = 0, $44 = Math_fround(0), $56 = Math_fround(0), $59 = Math_fround(0), $74 = 0, $80 = Math_fround(0), $34 = 0, $39 = 0, $45 = Math_fround(0), $46 = Math_fround(0), $64 = 0, $65 = 0, $66 = 0, $72 = 0, $35 = 0, $114 = 0, $115 = 0, $51 = 0, $52 = Math_fround(0), $53 = Math_fround(0), $116 = 0, $61 = 0, $73 = 0, $778 = 0, $1620 = 0, $1623 = 0, $1637 = 0, $1833 = 0, $41 = 0, $42 = 0, $48 = 0, $49 = 0, $50 = 0, $57 = 0, $58 = 0, $60 = 0, $4008 = 0, $4027 = 0, $4037 = 0, $4055 = 0, $75 = 0, $77 = Math_fround(0), $4648 = Math_fround(0), $4693 = 0, $4695 = Math_fround(0), $4702 = Math_fround(0), $87 = 0, $88 = Math_fround(0), $6625 = 0, $6635 = 0, $6640 = 0, $6765 = 0, $6825 = 0, $6860 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1 = __stack_pointer - 608 | 0;
  __stack_pointer = $1;
  ImFontAtlasBuildInit_28ImFontAtlas__29($0 | 0);
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  i64toi32_i32$1 = i64toi32_i32$1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   $2 = HEAP32[($0 + 28 | 0) >> 2] | 0;
   if (!$2) {
    break label$1
   }
   ImGui__MemFree_28void__29($2 | 0);
  }
  label$2 : {
   $2 = HEAP32[($0 + 32 | 0) >> 2] | 0;
   if (!$2) {
    break label$2
   }
   ImGui__MemFree_28void__29($2 | 0);
  }
  $2 = 0;
  HEAP8[($0 + 25 | 0) >> 0] = 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = i64toi32_i32$0;
  $3 = 0;
  label$3 : {
   $4 = HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] | 0;
   if (($4 | 0) < (1 | 0)) {
    break label$3
   }
   $3 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul(($4 | 0) > (8 | 0) ? $4 : 8, 200) | 0) | 0;
  }
  label$4 : {
   $5 = HEAP32[($0 + 60 | 0) >> 2] | 0;
   if (($5 | 0) < (1 | 0)) {
    break label$4
   }
   $2 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul(($5 | 0) > (8 | 0) ? $5 : 8, 24) | 0) | 0;
  }
  $6 = memset($3 | 0, 0 | 0, Math_imul($4, 200) | 0) | 0;
  $7 = memset($2 | 0, 0 | 0, Math_imul($5, 24) | 0) | 0;
  label$5 : {
   label$6 : {
    label$7 : {
     if ((HEAP32[($0 + 84 | 0) >> 2] | 0 | 0) < (1 | 0)) {
      break label$7
     }
     $8 = 0;
     label$8 : {
      label$9 : while (1) {
       $2 = HEAP32[($0 + 92 | 0) >> 2] | 0;
       $9 = $6 + Math_imul($8, 200) | 0;
       HEAP32[($9 + 164 | 0) >> 2] = -1;
       $10 = HEAP32[($0 + 60 | 0) >> 2] | 0;
       if (($10 | 0) < (1 | 0)) {
        break label$8
       }
       $11 = $9 + 164 | 0;
       $12 = $2 + Math_imul($8, 120) | 0;
       $3 = HEAP32[($12 + 116 | 0) >> 2] | 0;
       $13 = HEAP32[($0 + 68 | 0) >> 2] | 0;
       $2 = 0;
       label$10 : {
        label$11 : while (1) {
         $14 = HEAP32[($13 + ($2 << 2 | 0) | 0) >> 2] | 0;
         if (($3 | 0) == ($14 | 0)) {
          break label$10
         }
         $2 = $2 + 1 | 0;
         if (($2 | 0) >= ($10 | 0)) {
          break label$8
         }
         if (($3 | 0) != ($14 | 0)) {
          continue label$11
         }
         break label$8;
        };
       }
       HEAP32[$11 >> 2] = $2;
       $14 = HEAP32[($12 + 12 | 0) >> 2] | 0;
       $13 = -1;
       label$12 : {
        label$13 : {
         label$14 : {
          label$15 : {
           label$16 : {
            label$17 : {
             $2 = HEAP32[$12 >> 2] | 0;
             $3 = HEAPU8[$2 >> 0] | 0;
             if (($3 | 0) > (78 | 0)) {
              break label$17
             }
             if (!$3) {
              break label$16
             }
             if (($3 | 0) != (49 | 0)) {
              break label$12
             }
             if (HEAPU8[($2 + 1 | 0) >> 0] | 0) {
              break label$12
             }
             if (HEAPU8[($2 + 2 | 0) >> 0] | 0) {
              break label$12
             }
             if (!(HEAPU8[($2 + 3 | 0) >> 0] | 0)) {
              break label$14
             }
             break label$12;
            }
            label$18 : {
             if (($3 | 0) == (79 | 0)) {
              break label$18
             }
             if (($3 | 0) != (116 | 0)) {
              break label$12
             }
             label$19 : {
              switch ((HEAPU8[($2 + 1 | 0) >> 0] | 0) + -114 | 0 | 0) {
              case 2:
               break label$13;
              case 0:
               break label$15;
              case 7:
               break label$19;
              default:
               break label$12;
              };
             }
             if ((HEAPU8[($2 + 2 | 0) >> 0] | 0 | 0) != (112 | 0)) {
              break label$12
             }
             if ((HEAPU8[($2 + 3 | 0) >> 0] | 0 | 0) == (49 | 0)) {
              break label$14
             }
             break label$12;
            }
            if ((HEAPU8[($2 + 1 | 0) >> 0] | 0 | 0) != (84 | 0)) {
             break label$12
            }
            if ((HEAPU8[($2 + 2 | 0) >> 0] | 0 | 0) != (84 | 0)) {
             break label$12
            }
            if ((HEAPU8[($2 + 3 | 0) >> 0] | 0 | 0) == (79 | 0)) {
             break label$14
            }
            break label$12;
           }
           if ((HEAPU8[($2 + 1 | 0) >> 0] | 0 | 0) != (1 | 0)) {
            break label$12
           }
           if (HEAPU8[($2 + 2 | 0) >> 0] | 0) {
            break label$12
           }
           if (!(HEAPU8[($2 + 3 | 0) >> 0] | 0)) {
            break label$14
           }
           break label$12;
          }
          if ((HEAPU8[($2 + 2 | 0) >> 0] | 0 | 0) != (117 | 0)) {
           break label$12
          }
          if ((HEAPU8[($2 + 3 | 0) >> 0] | 0 | 0) != (101 | 0)) {
           break label$12
          }
         }
         $13 = $14 ? -1 : 0;
         break label$12;
        }
        if ((HEAPU8[($2 + 2 | 0) >> 0] | 0 | 0) != (99 | 0)) {
         break label$12
        }
        if ((HEAPU8[($2 + 3 | 0) >> 0] | 0 | 0) != (102 | 0)) {
         break label$12
        }
        label$20 : {
         $3 = HEAPU8[($2 + 4 | 0) >> 0] | 0 | ((HEAPU8[($2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
         $3 = $3 << 24 | 0 | (($3 & 65280 | 0) << 8 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0;
         if (($3 | 0) == (131072 | 0)) {
          break label$20
         }
         if (($3 | 0) != (65536 | 0)) {
          break label$12
         }
        }
        $3 = HEAPU8[($2 + 8 | 0) >> 0] | 0 | ((HEAPU8[($2 + 9 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($2 + 10 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($2 + 11 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        if (($3 << 24 | 0 | (($3 & 65280 | 0) << 8 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0 | 0) <= ($14 | 0)) {
         break label$12
        }
        $113 = ($2 + ($14 << 2 | 0) | 0) + 12 | 0;
        $3 = HEAPU8[$113 >> 0] | 0 | ((HEAPU8[($113 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($113 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($113 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        $13 = $3 << 24 | 0 | (($3 & 65280 | 0) << 8 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0;
       }
       i64toi32_i32$1 = $9;
       i64toi32_i32$0 = 0;
       HEAP32[($9 + 56 | 0) >> 2] = 0;
       HEAP32[($9 + 60 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($9 + 8 | 0) >> 2] = $13;
       HEAP32[($9 + 4 | 0) >> 2] = $2;
       $15 = 0;
       HEAP32[($9 + 64 | 0) >> 2] = 0;
       $3 = $13 + 12 | 0;
       $14 = 0;
       $16 = 0;
       $17 = 0;
       label$21 : {
        $13 = $2 + $13 | 0;
        $18 = $13 + 4 | 0;
        $13 = (HEAPU8[$18 >> 0] | 0) << 8 | 0 | (HEAPU8[($13 + 5 | 0) >> 0] | 0) | 0;
        if (!$13) {
         break label$21
        }
        label$22 : {
         label$23 : while (1) {
          label$24 : {
           $10 = $2 + (($14 << 4 | 0) + $3 | 0) | 0;
           if ((HEAPU8[$10 >> 0] | 0 | 0) != (99 | 0)) {
            break label$24
           }
           if ((HEAPU8[($10 + 1 | 0) >> 0] | 0 | 0) != (109 | 0)) {
            break label$24
           }
           if ((HEAPU8[($10 + 2 | 0) >> 0] | 0 | 0) != (97 | 0)) {
            break label$24
           }
           if ((HEAPU8[($10 + 3 | 0) >> 0] | 0 | 0) != (112 | 0)) {
            break label$24
           }
           $14 = HEAPU8[($10 + 8 | 0) >> 0] | 0 | ((HEAPU8[($10 + 9 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10 + 10 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10 + 11 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
           $16 = $14 << 24 | 0 | (($14 & 65280 | 0) << 8 | 0) | 0 | (($14 >>> 8 | 0) & 65280 | 0 | ($14 >>> 24 | 0) | 0) | 0;
           break label$22;
          }
          $14 = $14 + 1 | 0;
          if (($14 | 0) != ($13 | 0)) {
           continue label$23
          }
          break label$23;
         };
         $16 = 0;
        }
        $14 = 0;
        label$25 : while (1) {
         label$26 : {
          $10 = $2 + (($14 << 4 | 0) + $3 | 0) | 0;
          if ((HEAPU8[$10 >> 0] | 0 | 0) != (108 | 0)) {
           break label$26
          }
          if ((HEAPU8[($10 + 1 | 0) >> 0] | 0 | 0) != (111 | 0)) {
           break label$26
          }
          if ((HEAPU8[($10 + 2 | 0) >> 0] | 0 | 0) != (99 | 0)) {
           break label$26
          }
          if ((HEAPU8[($10 + 3 | 0) >> 0] | 0 | 0) != (97 | 0)) {
           break label$26
          }
          $14 = HEAPU8[($10 + 8 | 0) >> 0] | 0 | ((HEAPU8[($10 + 9 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10 + 10 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10 + 11 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
          $17 = $14 << 24 | 0 | (($14 & 65280 | 0) << 8 | 0) | 0 | (($14 >>> 8 | 0) & 65280 | 0 | ($14 >>> 24 | 0) | 0) | 0;
          break label$21;
         }
         $14 = $14 + 1 | 0;
         if (($14 | 0) != ($13 | 0)) {
          continue label$25
         }
         break label$25;
        };
        $17 = 0;
       }
       HEAP32[($9 + 16 | 0) >> 2] = $17;
       $14 = 0;
       label$27 : {
        $19 = $18 + 1 | 0;
        $10 = (HEAPU8[$18 >> 0] | 0) << 8 | 0 | (HEAPU8[$19 >> 0] | 0) | 0;
        if (!$10) {
         break label$27
        }
        label$28 : while (1) {
         label$29 : {
          $13 = $2 + (($14 << 4 | 0) + $3 | 0) | 0;
          if ((HEAPU8[$13 >> 0] | 0 | 0) != (104 | 0)) {
           break label$29
          }
          if ((HEAPU8[($13 + 1 | 0) >> 0] | 0 | 0) != (101 | 0)) {
           break label$29
          }
          if ((HEAPU8[($13 + 2 | 0) >> 0] | 0 | 0) != (97 | 0)) {
           break label$29
          }
          if ((HEAPU8[($13 + 3 | 0) >> 0] | 0 | 0) != (100 | 0)) {
           break label$29
          }
          $14 = HEAPU8[($13 + 8 | 0) >> 0] | 0 | ((HEAPU8[($13 + 9 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($13 + 10 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($13 + 11 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
          $15 = $14 << 24 | 0 | (($14 & 65280 | 0) << 8 | 0) | 0 | (($14 >>> 8 | 0) & 65280 | 0 | ($14 >>> 24 | 0) | 0) | 0;
          break label$27;
         }
         $14 = $14 + 1 | 0;
         if (($14 | 0) != ($10 | 0)) {
          continue label$28
         }
         break label$28;
        };
       }
       HEAP32[($9 + 20 | 0) >> 2] = $15;
       $20 = 0;
       $14 = 0;
       $21 = 0;
       label$30 : {
        $10 = (HEAPU8[$18 >> 0] | 0) << 8 | 0 | (HEAPU8[$19 >> 0] | 0) | 0;
        if (!$10) {
         break label$30
        }
        label$31 : while (1) {
         label$32 : {
          $13 = $2 + (($14 << 4 | 0) + $3 | 0) | 0;
          if ((HEAPU8[$13 >> 0] | 0 | 0) != (103 | 0)) {
           break label$32
          }
          if ((HEAPU8[($13 + 1 | 0) >> 0] | 0 | 0) != (108 | 0)) {
           break label$32
          }
          if ((HEAPU8[($13 + 2 | 0) >> 0] | 0 | 0) != (121 | 0)) {
           break label$32
          }
          if ((HEAPU8[($13 + 3 | 0) >> 0] | 0 | 0) != (102 | 0)) {
           break label$32
          }
          $14 = HEAPU8[($13 + 8 | 0) >> 0] | 0 | ((HEAPU8[($13 + 9 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($13 + 10 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($13 + 11 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
          $21 = $14 << 24 | 0 | (($14 & 65280 | 0) << 8 | 0) | 0 | (($14 >>> 8 | 0) & 65280 | 0 | ($14 >>> 24 | 0) | 0) | 0;
          break label$30;
         }
         $14 = $14 + 1 | 0;
         if (($14 | 0) != ($10 | 0)) {
          continue label$31
         }
         break label$31;
        };
        $21 = 0;
       }
       HEAP32[($9 + 24 | 0) >> 2] = $21;
       $14 = 0;
       label$33 : {
        $10 = (HEAPU8[$18 >> 0] | 0) << 8 | 0 | (HEAPU8[$19 >> 0] | 0) | 0;
        if (!$10) {
         break label$33
        }
        label$34 : while (1) {
         label$35 : {
          $13 = $2 + (($14 << 4 | 0) + $3 | 0) | 0;
          if ((HEAPU8[$13 >> 0] | 0 | 0) != (104 | 0)) {
           break label$35
          }
          if ((HEAPU8[($13 + 1 | 0) >> 0] | 0 | 0) != (104 | 0)) {
           break label$35
          }
          if ((HEAPU8[($13 + 2 | 0) >> 0] | 0 | 0) != (101 | 0)) {
           break label$35
          }
          if ((HEAPU8[($13 + 3 | 0) >> 0] | 0 | 0) != (97 | 0)) {
           break label$35
          }
          $14 = HEAPU8[($13 + 8 | 0) >> 0] | 0 | ((HEAPU8[($13 + 9 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($13 + 10 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($13 + 11 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
          $20 = $14 << 24 | 0 | (($14 & 65280 | 0) << 8 | 0) | 0 | (($14 >>> 8 | 0) & 65280 | 0 | ($14 >>> 24 | 0) | 0) | 0;
          break label$33;
         }
         $14 = $14 + 1 | 0;
         if (($14 | 0) != ($10 | 0)) {
          continue label$34
         }
         break label$34;
        };
       }
       HEAP32[($9 + 28 | 0) >> 2] = $20;
       $22 = 0;
       $14 = 0;
       $23 = 0;
       label$36 : {
        $10 = (HEAPU8[$18 >> 0] | 0) << 8 | 0 | (HEAPU8[$19 >> 0] | 0) | 0;
        if (!$10) {
         break label$36
        }
        label$37 : while (1) {
         label$38 : {
          $13 = $2 + (($14 << 4 | 0) + $3 | 0) | 0;
          if ((HEAPU8[$13 >> 0] | 0 | 0) != (104 | 0)) {
           break label$38
          }
          if ((HEAPU8[($13 + 1 | 0) >> 0] | 0 | 0) != (109 | 0)) {
           break label$38
          }
          if ((HEAPU8[($13 + 2 | 0) >> 0] | 0 | 0) != (116 | 0)) {
           break label$38
          }
          if ((HEAPU8[($13 + 3 | 0) >> 0] | 0 | 0) != (120 | 0)) {
           break label$38
          }
          $14 = HEAPU8[($13 + 8 | 0) >> 0] | 0 | ((HEAPU8[($13 + 9 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($13 + 10 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($13 + 11 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
          $23 = $14 << 24 | 0 | (($14 & 65280 | 0) << 8 | 0) | 0 | (($14 >>> 8 | 0) & 65280 | 0 | ($14 >>> 24 | 0) | 0) | 0;
          break label$36;
         }
         $14 = $14 + 1 | 0;
         if (($14 | 0) != ($10 | 0)) {
          continue label$37
         }
         break label$37;
        };
        $23 = 0;
       }
       HEAP32[($9 + 32 | 0) >> 2] = $23;
       $14 = 0;
       label$39 : {
        $10 = (HEAPU8[$18 >> 0] | 0) << 8 | 0 | (HEAPU8[$19 >> 0] | 0) | 0;
        if (!$10) {
         break label$39
        }
        label$40 : while (1) {
         label$41 : {
          $13 = $2 + (($14 << 4 | 0) + $3 | 0) | 0;
          if ((HEAPU8[$13 >> 0] | 0 | 0) != (107 | 0)) {
           break label$41
          }
          if ((HEAPU8[($13 + 1 | 0) >> 0] | 0 | 0) != (101 | 0)) {
           break label$41
          }
          if ((HEAPU8[($13 + 2 | 0) >> 0] | 0 | 0) != (114 | 0)) {
           break label$41
          }
          if ((HEAPU8[($13 + 3 | 0) >> 0] | 0 | 0) != (110 | 0)) {
           break label$41
          }
          $14 = HEAPU8[($13 + 8 | 0) >> 0] | 0 | ((HEAPU8[($13 + 9 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($13 + 10 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($13 + 11 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
          $22 = $14 << 24 | 0 | (($14 & 65280 | 0) << 8 | 0) | 0 | (($14 >>> 8 | 0) & 65280 | 0 | ($14 >>> 24 | 0) | 0) | 0;
          break label$39;
         }
         $14 = $14 + 1 | 0;
         if (($14 | 0) != ($10 | 0)) {
          continue label$40
         }
         break label$40;
        };
       }
       HEAP32[($9 + 36 | 0) >> 2] = $22;
       $22 = 0;
       $14 = 0;
       label$42 : {
        $10 = (HEAPU8[$18 >> 0] | 0) << 8 | 0 | (HEAPU8[$19 >> 0] | 0) | 0;
        if (!$10) {
         break label$42
        }
        label$43 : while (1) {
         label$44 : {
          $13 = $2 + (($14 << 4 | 0) + $3 | 0) | 0;
          if ((HEAPU8[$13 >> 0] | 0 | 0) != (71 | 0)) {
           break label$44
          }
          if ((HEAPU8[($13 + 1 | 0) >> 0] | 0 | 0) != (80 | 0)) {
           break label$44
          }
          if ((HEAPU8[($13 + 2 | 0) >> 0] | 0 | 0) != (79 | 0)) {
           break label$44
          }
          if ((HEAPU8[($13 + 3 | 0) >> 0] | 0 | 0) != (83 | 0)) {
           break label$44
          }
          $14 = HEAPU8[($13 + 8 | 0) >> 0] | 0 | ((HEAPU8[($13 + 9 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($13 + 10 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($13 + 11 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
          $22 = $14 << 24 | 0 | (($14 & 65280 | 0) << 8 | 0) | 0 | (($14 >>> 8 | 0) & 65280 | 0 | ($14 >>> 24 | 0) | 0) | 0;
          break label$42;
         }
         $14 = $14 + 1 | 0;
         if (($14 | 0) != ($10 | 0)) {
          continue label$43
         }
         break label$43;
        };
       }
       HEAP32[($9 + 40 | 0) >> 2] = $22;
       if (!$16) {
        break label$8
       }
       if (!$15) {
        break label$8
       }
       if (!$20) {
        break label$8
       }
       if (!$23) {
        break label$8
       }
       label$45 : {
        label$46 : {
         if (!$21) {
          break label$46
         }
         if ($17) {
          break label$45
         }
         break label$8;
        }
        HEAP32[($1 + 76 | 0) >> 2] = 2;
        $14 = 0;
        HEAP32[($1 + 72 | 0) >> 2] = 0;
        HEAP32[($1 + 68 | 0) >> 2] = 0;
        HEAP32[($1 + 64 | 0) >> 2] = 0;
        $10 = (HEAPU8[$18 >> 0] | 0) << 8 | 0 | (HEAPU8[$19 >> 0] | 0) | 0;
        if (!$10) {
         break label$8
        }
        $23 = $9 + 56 | 0;
        label$47 : {
         label$48 : while (1) {
          label$49 : {
           $13 = $2 + (($14 << 4 | 0) + $3 | 0) | 0;
           if ((HEAPU8[$13 >> 0] | 0 | 0) != (67 | 0)) {
            break label$49
           }
           if ((HEAPU8[($13 + 1 | 0) >> 0] | 0 | 0) != (70 | 0)) {
            break label$49
           }
           if ((HEAPU8[($13 + 2 | 0) >> 0] | 0 | 0) != (70 | 0)) {
            break label$49
           }
           if ((HEAPU8[($13 + 3 | 0) >> 0] | 0 | 0) == (32 | 0)) {
            break label$47
           }
          }
          $14 = $14 + 1 | 0;
          if (($14 | 0) == ($10 | 0)) {
           break label$8
          }
          continue label$48;
         };
        }
        $14 = HEAPU8[($13 + 8 | 0) >> 0] | 0 | ((HEAPU8[($13 + 9 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($13 + 10 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($13 + 11 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        $14 = $14 << 24 | 0 | (($14 & 65280 | 0) << 8 | 0) | 0 | (($14 >>> 8 | 0) & 65280 | 0 | ($14 >>> 24 | 0) | 0) | 0;
        if (!$14) {
         break label$8
        }
        i64toi32_i32$1 = $9;
        i64toi32_i32$0 = 0;
        HEAP32[($9 + 104 | 0) >> 2] = 0;
        HEAP32[($9 + 108 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$1 = $9;
        i64toi32_i32$0 = 536870912;
        HEAP32[($9 + 60 | 0) >> 2] = 0;
        HEAP32[($9 + 64 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$1 = $9 + 120 | 0;
        i64toi32_i32$0 = 0;
        HEAP32[i64toi32_i32$1 >> 2] = 0;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        $24 = $9 + 112 | 0;
        i64toi32_i32$1 = $24;
        i64toi32_i32$0 = 0;
        HEAP32[i64toi32_i32$1 >> 2] = 0;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[($9 + 56 | 0) >> 2] = $2 + $14 | 0;
        $25 = ($1 + 80 | 0) + 8 | 0;
        $14 = HEAP32[($23 + 8 | 0) >> 2] | 0;
        HEAP32[$25 >> 2] = $14;
        i64toi32_i32$2 = $23;
        i64toi32_i32$0 = HEAP32[$23 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($23 + 4 | 0) >> 2] | 0;
        $778 = i64toi32_i32$0;
        i64toi32_i32$0 = $1;
        HEAP32[($1 + 80 | 0) >> 2] = $778;
        HEAP32[($1 + 84 | 0) >> 2] = i64toi32_i32$1;
        $10 = 0;
        $13 = 0;
        label$50 : {
         $23 = HEAP32[($1 + 84 | 0) >> 2] | 0;
         $21 = $23 + 2 | 0;
         $23 = ($23 | 0) < (-2 | 0) ? $14 : ($14 | 0) < ($21 | 0) ? $14 : $21;
         if (($23 | 0) >= ($14 | 0)) {
          break label$50
         }
         $13 = HEAPU8[((HEAP32[($1 + 80 | 0) >> 2] | 0) + $23 | 0) >> 0] | 0;
        }
        $13 = $13 & 255 | 0;
        $23 = ($14 | 0) < ($13 | 0) ? $14 : $13;
        HEAP32[($1 + 84 | 0) >> 2] = $23;
        label$51 : {
         label$52 : {
          if (($14 | 0) > ($13 | 0)) {
           break label$52
          }
          $13 = $23;
          break label$51;
         }
         $13 = $23 + 1 | 0;
         HEAP32[($1 + 84 | 0) >> 2] = $13;
         $10 = (HEAPU8[((HEAP32[($1 + 80 | 0) >> 2] | 0) + $23 | 0) >> 0] | 0) << 8 | 0;
        }
        $23 = 0;
        label$53 : {
         label$54 : {
          if (($13 | 0) < ($14 | 0)) {
           break label$54
          }
          $20 = $13;
          break label$53;
         }
         $20 = $13 + 1 | 0;
         HEAP32[($1 + 84 | 0) >> 2] = $20;
         $23 = HEAPU8[((HEAP32[($1 + 80 | 0) >> 2] | 0) + $13 | 0) >> 0] | 0;
        }
        label$55 : {
         $13 = $23 | $10 | 0;
         if (!$13) {
          break label$55
         }
         $10 = 0;
         label$56 : {
          label$57 : {
           if (($20 | 0) < ($14 | 0)) {
            break label$57
           }
           $23 = $20;
           break label$56;
          }
          $23 = $20 + 1 | 0;
          $10 = HEAPU8[((HEAP32[($1 + 80 | 0) >> 2] | 0) + $20 | 0) >> 0] | 0;
         }
         $13 = Math_imul($10, $13) + $23 | 0;
         $13 = ($13 | 0) < (0 | 0) ? $14 : ($14 | 0) < ($13 | 0) ? $14 : $13;
         label$58 : {
          label$59 : {
           if ($10) {
            break label$59
           }
           $10 = -1;
           break label$58;
          }
          $26 = $10 & 1 | 0;
          $23 = 0;
          $20 = HEAP32[($1 + 80 | 0) >> 2] | 0;
          label$60 : {
           if (($10 | 0) == (1 | 0)) {
            break label$60
           }
           $22 = $10 & 254 | 0;
           $23 = 0;
           $21 = 0;
           label$61 : while (1) {
            label$62 : {
             label$63 : {
              if (($13 | 0) < ($14 | 0)) {
               break label$63
              }
              $10 = $13;
              $13 = 0;
              break label$62;
             }
             $10 = $13 + 1 | 0;
             $13 = HEAPU8[($20 + $13 | 0) >> 0] | 0;
            }
            $17 = $23 << 16 | 0 | (($13 & 255 | 0) << 8 | 0) | 0;
            $23 = 0;
            label$64 : {
             label$65 : {
              if (($10 | 0) < ($14 | 0)) {
               break label$65
              }
              $13 = $10;
              break label$64;
             }
             $13 = $10 + 1 | 0;
             $23 = HEAPU8[($20 + $10 | 0) >> 0] | 0;
            }
            $23 = $17 | ($23 & 255 | 0) | 0;
            $21 = $21 + 2 | 0;
            if (($21 | 0) != ($22 | 0)) {
             continue label$61
            }
            break label$61;
           };
          }
          label$66 : {
           if (!$26) {
            break label$66
           }
           $23 = $23 << 8 | 0;
           $10 = 0;
           label$67 : {
            if (($13 | 0) >= ($14 | 0)) {
             break label$67
            }
            $10 = HEAPU8[($20 + $13 | 0) >> 0] | 0;
            $13 = $13 + 1 | 0;
           }
           $23 = $23 | ($10 & 255 | 0) | 0;
          }
          $10 = $23 + -1 | 0;
         }
         $13 = $10 + $13 | 0;
         $20 = ($13 | 0) < (0 | 0) ? $14 : ($14 | 0) < ($13 | 0) ? $14 : $13;
         HEAP32[($1 + 84 | 0) >> 2] = $20;
        }
        $10 = 0;
        $13 = $20;
        $23 = 0;
        label$68 : {
         if (($13 | 0) >= ($14 | 0)) {
          break label$68
         }
         $13 = $20 + 1 | 0;
         HEAP32[($1 + 84 | 0) >> 2] = $13;
         $23 = (HEAPU8[((HEAP32[($1 + 80 | 0) >> 2] | 0) + $20 | 0) >> 0] | 0) << 8 | 0;
        }
        label$69 : {
         label$70 : {
          if (($13 | 0) < ($14 | 0)) {
           break label$70
          }
          $17 = $13;
          break label$69;
         }
         $17 = $13 + 1 | 0;
         HEAP32[($1 + 84 | 0) >> 2] = $17;
         $10 = HEAPU8[((HEAP32[($1 + 80 | 0) >> 2] | 0) + $13 | 0) >> 0] | 0;
        }
        label$71 : {
         $13 = $10 | $23 | 0;
         if (!$13) {
          break label$71
         }
         $10 = 0;
         label$72 : {
          label$73 : {
           if (($17 | 0) < ($14 | 0)) {
            break label$73
           }
           $23 = $17;
           break label$72;
          }
          $23 = $17 + 1 | 0;
          $10 = HEAPU8[((HEAP32[($1 + 80 | 0) >> 2] | 0) + $17 | 0) >> 0] | 0;
         }
         $13 = Math_imul($10, $13) + $23 | 0;
         $13 = ($13 | 0) < (0 | 0) ? $14 : ($14 | 0) < ($13 | 0) ? $14 : $13;
         label$74 : {
          label$75 : {
           if ($10) {
            break label$75
           }
           $10 = -1;
           break label$74;
          }
          $27 = $10 & 1 | 0;
          $23 = 0;
          $22 = HEAP32[($1 + 80 | 0) >> 2] | 0;
          label$76 : {
           if (($10 | 0) == (1 | 0)) {
            break label$76
           }
           $26 = $10 & 254 | 0;
           $23 = 0;
           $21 = 0;
           label$77 : while (1) {
            label$78 : {
             label$79 : {
              if (($13 | 0) < ($14 | 0)) {
               break label$79
              }
              $10 = $13;
              $13 = 0;
              break label$78;
             }
             $10 = $13 + 1 | 0;
             $13 = HEAPU8[($22 + $13 | 0) >> 0] | 0;
            }
            $17 = $23 << 16 | 0 | (($13 & 255 | 0) << 8 | 0) | 0;
            $23 = 0;
            label$80 : {
             label$81 : {
              if (($10 | 0) < ($14 | 0)) {
               break label$81
              }
              $13 = $10;
              break label$80;
             }
             $13 = $10 + 1 | 0;
             $23 = HEAPU8[($22 + $10 | 0) >> 0] | 0;
            }
            $23 = $17 | ($23 & 255 | 0) | 0;
            $21 = $21 + 2 | 0;
            if (($21 | 0) != ($26 | 0)) {
             continue label$77
            }
            break label$77;
           };
          }
          label$82 : {
           if (!$27) {
            break label$82
           }
           $23 = $23 << 8 | 0;
           $10 = 0;
           label$83 : {
            if (($13 | 0) >= ($14 | 0)) {
             break label$83
            }
            $10 = HEAPU8[($22 + $13 | 0) >> 0] | 0;
            $13 = $13 + 1 | 0;
           }
           $23 = $23 | ($10 & 255 | 0) | 0;
          }
          $10 = $23 + -1 | 0;
         }
         $13 = $10 + $13 | 0;
         $17 = ($13 | 0) < (0 | 0) ? $14 : ($14 | 0) < ($13 | 0) ? $14 : $13;
         HEAP32[($1 + 84 | 0) >> 2] = $17;
        }
        $28 = 0;
        label$84 : {
         label$85 : {
          label$86 : {
           label$87 : {
            $13 = $17 - $20 | 0;
            if (($13 | $20 | 0 | 0) >= (0 | 0)) {
             break label$87
            }
            $29 = 0;
            break label$86;
           }
           $29 = 0;
           if (($14 | 0) >= ($20 | 0)) {
            break label$85
           }
          }
          $22 = 0;
          $10 = 0;
          $30 = 0;
          $21 = 0;
          $26 = 0;
          break label$84;
         }
         $22 = 0;
         $10 = 0;
         $30 = 0;
         $21 = 0;
         $26 = 0;
         if (($14 | 0) < ($17 | 0)) {
          break label$84
         }
         $22 = (HEAP32[($1 + 80 | 0) >> 2] | 0) + $20 | 0;
         $23 = ($13 >> 31 | 0) & $13 | 0;
         $21 = 0;
         label$88 : {
          label$89 : {
           if (($13 | 0) >= (1 | 0)) {
            break label$89
           }
           $10 = $23;
           $20 = 0;
           break label$88;
          }
          $10 = $23 + 1 | 0;
          $20 = (HEAPU8[($22 + $23 | 0) >> 0] | 0) << 8 | 0;
         }
         label$90 : {
          label$91 : {
           if (($10 | 0) < ($13 | 0)) {
            break label$91
           }
           $23 = $10;
           break label$90;
          }
          $23 = $10 + 1 | 0;
          $21 = HEAPU8[($22 + $10 | 0) >> 0] | 0;
         }
         $30 = $21 | $20 | 0;
         $21 = 0;
         label$92 : {
          if (($23 | 0) >= ($13 | 0)) {
           break label$92
          }
          $29 = HEAPU8[($22 + $23 | 0) >> 0] | 0;
          if (!$29) {
           break label$92
          }
          $23 = ($23 | 0) < (-1 | 0) ? $13 : $23 + 1 | 0;
          $31 = $29 & 1 | 0;
          label$93 : {
           label$94 : {
            $32 = $29 + -1 | 0;
            if ($32) {
             break label$94
            }
            $21 = 0;
            $10 = $23;
            break label$93;
           }
           $27 = $29 & 254 | 0;
           $21 = 0;
           $10 = $23;
           $20 = 0;
           label$95 : while (1) {
            label$96 : {
             label$97 : {
              if (($10 | 0) < ($13 | 0)) {
               break label$97
              }
              $26 = 0;
              break label$96;
             }
             $26 = HEAPU8[($22 + $10 | 0) >> 0] | 0;
             $23 = $10 + 1 | 0;
             $10 = $23;
            }
            $26 = $21 << 16 | 0 | (($26 & 255 | 0) << 8 | 0) | 0;
            $21 = 0;
            label$98 : {
             if (($10 | 0) >= ($13 | 0)) {
              break label$98
             }
             $21 = HEAPU8[($22 + $10 | 0) >> 0] | 0;
             $23 = $10 + 1 | 0;
             $10 = $23;
            }
            $21 = $26 | ($21 & 255 | 0) | 0;
            $20 = $20 + 2 | 0;
            if (($20 | 0) != ($27 | 0)) {
             continue label$95
            }
            break label$95;
           };
          }
          label$99 : {
           if (!$31) {
            break label$99
           }
           $20 = $21 << 8 | 0;
           $21 = 0;
           label$100 : {
            if (($10 | 0) >= ($13 | 0)) {
             break label$100
            }
            $23 = $10 + 1 | 0;
            $21 = HEAPU8[($22 + $10 | 0) >> 0] | 0;
           }
           $21 = $20 | ($21 & 255 | 0) | 0;
          }
          label$101 : {
           label$102 : {
            if ($32) {
             break label$102
            }
            $26 = 0;
            break label$101;
           }
           $32 = $29 & 254 | 0;
           $26 = 0;
           $27 = 0;
           label$103 : while (1) {
            label$104 : {
             label$105 : {
              if (($23 | 0) < ($13 | 0)) {
               break label$105
              }
              $10 = $23;
              $23 = 0;
              break label$104;
             }
             $10 = $23 + 1 | 0;
             $23 = HEAPU8[($22 + $23 | 0) >> 0] | 0;
            }
            $26 = $26 << 16 | 0 | (($23 & 255 | 0) << 8 | 0) | 0;
            $20 = 0;
            label$106 : {
             label$107 : {
              if (($10 | 0) < ($13 | 0)) {
               break label$107
              }
              $23 = $10;
              break label$106;
             }
             $23 = $10 + 1 | 0;
             $20 = HEAPU8[($22 + $10 | 0) >> 0] | 0;
            }
            $26 = $26 | ($20 & 255 | 0) | 0;
            $27 = $27 + 2 | 0;
            if (($27 | 0) != ($32 | 0)) {
             continue label$103
            }
            break label$103;
           };
          }
          label$108 : {
           if (!$31) {
            break label$108
           }
           $20 = $26 << 8 | 0;
           $10 = 0;
           label$109 : {
            if (($23 | 0) >= ($13 | 0)) {
             break label$109
            }
            $10 = HEAPU8[($22 + $23 | 0) >> 0] | 0;
           }
           $26 = $20 | ($10 & 255 | 0) | 0;
          }
          $10 = $13;
          break label$84;
         }
         $29 = 0;
         $10 = $13;
         $26 = 0;
        }
        label$110 : {
         label$111 : {
          $13 = ($21 + Math_imul($30 + 1 | 0, $29) | 0) + 2 | 0;
          $23 = $26 - $21 | 0;
          if (($13 | $23 | 0 | 0) >= (0 | 0)) {
           break label$111
          }
          $13 = 0;
          break label$110;
         }
         $10 = ($10 | 0) < ($13 | 0) | ($10 - $13 | 0 | 0) < ($23 | 0) | 0;
         $13 = $10 ? 0 : $22 + $13 | 0;
         $28 = $10 ? 0 : $23;
        }
        HEAP32[($1 + 56 | 0) >> 2] = $28;
        $10 = 0;
        HEAP32[($1 + 52 | 0) >> 2] = 0;
        HEAP32[($1 + 48 | 0) >> 2] = $13;
        label$112 : {
         label$113 : {
          if (($17 | 0) < ($14 | 0)) {
           break label$113
          }
          $13 = $17;
          $23 = 0;
          break label$112;
         }
         $13 = $17 + 1 | 0;
         HEAP32[($1 + 84 | 0) >> 2] = $13;
         $23 = (HEAPU8[((HEAP32[($1 + 80 | 0) >> 2] | 0) + $17 | 0) >> 0] | 0) << 8 | 0;
        }
        label$114 : {
         label$115 : {
          if (($13 | 0) < ($14 | 0)) {
           break label$115
          }
          $20 = $13;
          break label$114;
         }
         $20 = $13 + 1 | 0;
         HEAP32[($1 + 84 | 0) >> 2] = $20;
         $10 = HEAPU8[((HEAP32[($1 + 80 | 0) >> 2] | 0) + $13 | 0) >> 0] | 0;
        }
        label$116 : {
         $13 = $10 | $23 | 0;
         if (!$13) {
          break label$116
         }
         $10 = 0;
         label$117 : {
          label$118 : {
           if (($20 | 0) < ($14 | 0)) {
            break label$118
           }
           $23 = $20;
           break label$117;
          }
          $23 = $20 + 1 | 0;
          $10 = HEAPU8[((HEAP32[($1 + 80 | 0) >> 2] | 0) + $20 | 0) >> 0] | 0;
         }
         $13 = Math_imul($10, $13) + $23 | 0;
         $13 = ($13 | 0) < (0 | 0) ? $14 : ($14 | 0) < ($13 | 0) ? $14 : $13;
         label$119 : {
          label$120 : {
           if ($10) {
            break label$120
           }
           $10 = -1;
           break label$119;
          }
          $26 = $10 & 1 | 0;
          $23 = 0;
          $20 = HEAP32[($1 + 80 | 0) >> 2] | 0;
          label$121 : {
           if (($10 | 0) == (1 | 0)) {
            break label$121
           }
           $22 = $10 & 254 | 0;
           $23 = 0;
           $21 = 0;
           label$122 : while (1) {
            label$123 : {
             label$124 : {
              if (($13 | 0) < ($14 | 0)) {
               break label$124
              }
              $10 = $13;
              $13 = 0;
              break label$123;
             }
             $10 = $13 + 1 | 0;
             $13 = HEAPU8[($20 + $13 | 0) >> 0] | 0;
            }
            $17 = $23 << 16 | 0 | (($13 & 255 | 0) << 8 | 0) | 0;
            $23 = 0;
            label$125 : {
             label$126 : {
              if (($10 | 0) < ($14 | 0)) {
               break label$126
              }
              $13 = $10;
              break label$125;
             }
             $13 = $10 + 1 | 0;
             $23 = HEAPU8[($20 + $10 | 0) >> 0] | 0;
            }
            $23 = $17 | ($23 & 255 | 0) | 0;
            $21 = $21 + 2 | 0;
            if (($21 | 0) != ($22 | 0)) {
             continue label$122
            }
            break label$122;
           };
          }
          label$127 : {
           if (!$26) {
            break label$127
           }
           $23 = $23 << 8 | 0;
           $10 = 0;
           label$128 : {
            if (($13 | 0) >= ($14 | 0)) {
             break label$128
            }
            $10 = HEAPU8[($20 + $13 | 0) >> 0] | 0;
            $13 = $13 + 1 | 0;
           }
           $23 = $23 | ($10 & 255 | 0) | 0;
          }
          $10 = $23 + -1 | 0;
         }
         $13 = $10 + $13 | 0;
         $20 = ($13 | 0) < (0 | 0) ? $14 : ($14 | 0) < ($13 | 0) ? $14 : $13;
         HEAP32[($1 + 84 | 0) >> 2] = $20;
        }
        $23 = 0;
        $10 = $20;
        $21 = 0;
        label$129 : {
         if (($10 | 0) >= ($14 | 0)) {
          break label$129
         }
         $10 = $20 + 1 | 0;
         HEAP32[($1 + 84 | 0) >> 2] = $10;
         $21 = (HEAPU8[((HEAP32[($1 + 80 | 0) >> 2] | 0) + $20 | 0) >> 0] | 0) << 8 | 0;
        }
        label$130 : {
         label$131 : {
          if (($10 | 0) < ($14 | 0)) {
           break label$131
          }
          $13 = $10;
          break label$130;
         }
         $13 = $10 + 1 | 0;
         HEAP32[($1 + 84 | 0) >> 2] = $13;
         $23 = HEAPU8[((HEAP32[($1 + 80 | 0) >> 2] | 0) + $10 | 0) >> 0] | 0;
        }
        label$132 : {
         $23 = $23 | $21 | 0;
         if (!$23) {
          break label$132
         }
         $10 = 0;
         label$133 : {
          label$134 : {
           if (($13 | 0) < ($14 | 0)) {
            break label$134
           }
           $21 = $13;
           break label$133;
          }
          $21 = $13 + 1 | 0;
          $10 = HEAPU8[((HEAP32[($1 + 80 | 0) >> 2] | 0) + $13 | 0) >> 0] | 0;
         }
         $13 = Math_imul($10, $23) + $21 | 0;
         $13 = ($13 | 0) < (0 | 0) ? $14 : ($14 | 0) < ($13 | 0) ? $14 : $13;
         label$135 : {
          label$136 : {
           if ($10) {
            break label$136
           }
           $10 = -1;
           break label$135;
          }
          $27 = $10 & 1 | 0;
          $23 = 0;
          $22 = HEAP32[($1 + 80 | 0) >> 2] | 0;
          label$137 : {
           if (($10 | 0) == (1 | 0)) {
            break label$137
           }
           $26 = $10 & 254 | 0;
           $23 = 0;
           $21 = 0;
           label$138 : while (1) {
            label$139 : {
             label$140 : {
              if (($13 | 0) < ($14 | 0)) {
               break label$140
              }
              $10 = $13;
              $13 = 0;
              break label$139;
             }
             $10 = $13 + 1 | 0;
             $13 = HEAPU8[($22 + $13 | 0) >> 0] | 0;
            }
            $17 = $23 << 16 | 0 | (($13 & 255 | 0) << 8 | 0) | 0;
            $23 = 0;
            label$141 : {
             label$142 : {
              if (($10 | 0) < ($14 | 0)) {
               break label$142
              }
              $13 = $10;
              break label$141;
             }
             $13 = $10 + 1 | 0;
             $23 = HEAPU8[($22 + $10 | 0) >> 0] | 0;
            }
            $23 = $17 | ($23 & 255 | 0) | 0;
            $21 = $21 + 2 | 0;
            if (($21 | 0) != ($26 | 0)) {
             continue label$138
            }
            break label$138;
           };
          }
          label$143 : {
           if (!$27) {
            break label$143
           }
           $23 = $23 << 8 | 0;
           $10 = 0;
           label$144 : {
            if (($13 | 0) >= ($14 | 0)) {
             break label$144
            }
            $10 = HEAPU8[($22 + $13 | 0) >> 0] | 0;
            $13 = $13 + 1 | 0;
           }
           $23 = $23 | ($10 & 255 | 0) | 0;
          }
          $10 = $23 + -1 | 0;
         }
         $13 = $10 + $13 | 0;
         $13 = ($13 | 0) < (0 | 0) ? $14 : ($14 | 0) < ($13 | 0) ? $14 : $13;
         HEAP32[($1 + 84 | 0) >> 2] = $13;
        }
        $10 = 0;
        label$145 : {
         label$146 : {
          $21 = $13 - $20 | 0;
          if (($21 | $20 | 0 | 0) >= (0 | 0)) {
           break label$146
          }
          $23 = 0;
          break label$145;
         }
         $10 = 0;
         label$147 : {
          if (($14 | 0) >= ($20 | 0)) {
           break label$147
          }
          $23 = 0;
          break label$145;
         }
         $23 = 0;
         if (($14 | 0) < ($13 | 0)) {
          break label$145
         }
         $23 = (HEAP32[($1 + 80 | 0) >> 2] | 0) + $20 | 0;
         $10 = $21;
        }
        HEAP32[($9 + 80 | 0) >> 2] = $23;
        HEAP32[($9 + 88 | 0) >> 2] = $10;
        HEAP32[($9 + 84 | 0) >> 2] = 0;
        stbtt__dict_get_ints_28stbtt__buf__2c_20int_2c_20int_2c_20unsigned_20int__29($1 + 48 | 0 | 0, 17 | 0, 1 | 0, $1 + 72 | 0 | 0);
        stbtt__dict_get_ints_28stbtt__buf__2c_20int_2c_20int_2c_20unsigned_20int__29($1 + 48 | 0 | 0, 262 | 0, 1 | 0, $1 + 76 | 0 | 0);
        stbtt__dict_get_ints_28stbtt__buf__2c_20int_2c_20int_2c_20unsigned_20int__29($1 + 48 | 0 | 0, 292 | 0, 1 | 0, $1 + 68 | 0 | 0);
        stbtt__dict_get_ints_28stbtt__buf__2c_20int_2c_20int_2c_20unsigned_20int__29($1 + 48 | 0 | 0, 293 | 0, 1 | 0, $1 + 64 | 0 | 0);
        HEAP32[(($1 + 16 | 0) + 8 | 0) >> 2] = HEAP32[$25 >> 2] | 0;
        HEAP32[($1 + 8 | 0) >> 2] = HEAP32[(($1 + 48 | 0) + 8 | 0) >> 2] | 0;
        i64toi32_i32$2 = $1;
        i64toi32_i32$1 = HEAP32[($1 + 80 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($1 + 84 | 0) >> 2] | 0;
        $1620 = i64toi32_i32$1;
        i64toi32_i32$1 = $1;
        HEAP32[($1 + 16 | 0) >> 2] = $1620;
        HEAP32[($1 + 20 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$2 = $1;
        i64toi32_i32$0 = HEAP32[($1 + 48 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($1 + 52 | 0) >> 2] | 0;
        $1623 = i64toi32_i32$0;
        i64toi32_i32$0 = $1;
        HEAP32[$1 >> 2] = $1623;
        HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$1;
        stbtt__get_subrs_28stbtt__buf_2c_20stbtt__buf_29($1 + 32 | 0 | 0, $1 + 16 | 0 | 0, $1 | 0);
        HEAP32[($9 + 100 | 0) >> 2] = HEAP32[(($1 + 32 | 0) + 8 | 0) >> 2] | 0;
        i64toi32_i32$2 = $1;
        i64toi32_i32$1 = HEAP32[($1 + 32 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($1 + 36 | 0) >> 2] | 0;
        $1637 = i64toi32_i32$1;
        i64toi32_i32$1 = $9;
        HEAP32[($9 + 92 | 0) >> 2] = $1637;
        HEAP32[($9 + 96 | 0) >> 2] = i64toi32_i32$0;
        if ((HEAP32[($1 + 76 | 0) >> 2] | 0 | 0) != (2 | 0)) {
         break label$8
        }
        $22 = HEAP32[($1 + 72 | 0) >> 2] | 0;
        if (!$22) {
         break label$8
        }
        label$148 : {
         label$149 : {
          $13 = HEAP32[($1 + 68 | 0) >> 2] | 0;
          if ($13) {
           break label$149
          }
          $13 = HEAP32[($1 + 88 | 0) >> 2] | 0;
          break label$148;
         }
         $29 = HEAP32[($1 + 64 | 0) >> 2] | 0;
         if (!$29) {
          break label$8
         }
         $23 = 0;
         $27 = ($13 | 0) < (0 | 0) ? $14 : ($14 | 0) < ($13 | 0) ? $14 : $13;
         $10 = $27;
         $21 = 0;
         label$150 : {
          $13 = HEAP32[($1 + 88 | 0) >> 2] | 0;
          if (($10 | 0) >= ($13 | 0)) {
           break label$150
          }
          $10 = $27 + 1 | 0;
          $21 = (HEAPU8[((HEAP32[($1 + 80 | 0) >> 2] | 0) + $27 | 0) >> 0] | 0) << 8 | 0;
         }
         label$151 : {
          label$152 : {
           if (($10 | 0) < ($13 | 0)) {
            break label$152
           }
           $14 = $10;
           break label$151;
          }
          $14 = $10 + 1 | 0;
          $23 = HEAPU8[((HEAP32[($1 + 80 | 0) >> 2] | 0) + $10 | 0) >> 0] | 0;
         }
         label$153 : {
          $23 = $23 | $21 | 0;
          if (!$23) {
           break label$153
          }
          $10 = 0;
          label$154 : {
           label$155 : {
            if (($14 | 0) < ($13 | 0)) {
             break label$155
            }
            $21 = $14;
            break label$154;
           }
           $21 = $14 + 1 | 0;
           $10 = HEAPU8[((HEAP32[($1 + 80 | 0) >> 2] | 0) + $14 | 0) >> 0] | 0;
          }
          $14 = Math_imul($10, $23) + $21 | 0;
          $14 = ($14 | 0) < (0 | 0) ? $13 : ($13 | 0) < ($14 | 0) ? $13 : $14;
          label$156 : {
           label$157 : {
            if ($10) {
             break label$157
            }
            $10 = -1;
            break label$156;
           }
           $28 = $10 & 1 | 0;
           $23 = 0;
           $20 = HEAP32[($1 + 80 | 0) >> 2] | 0;
           label$158 : {
            if (($10 | 0) == (1 | 0)) {
             break label$158
            }
            $26 = $10 & 254 | 0;
            $23 = 0;
            $21 = 0;
            label$159 : while (1) {
             label$160 : {
              label$161 : {
               if (($14 | 0) < ($13 | 0)) {
                break label$161
               }
               $10 = $14;
               $14 = 0;
               break label$160;
              }
              $10 = $14 + 1 | 0;
              $14 = HEAPU8[($20 + $14 | 0) >> 0] | 0;
             }
             $17 = $23 << 16 | 0 | (($14 & 255 | 0) << 8 | 0) | 0;
             $23 = 0;
             label$162 : {
              label$163 : {
               if (($10 | 0) < ($13 | 0)) {
                break label$163
               }
               $14 = $10;
               break label$162;
              }
              $14 = $10 + 1 | 0;
              $23 = HEAPU8[($20 + $10 | 0) >> 0] | 0;
             }
             $23 = $17 | ($23 & 255 | 0) | 0;
             $21 = $21 + 2 | 0;
             if (($21 | 0) != ($26 | 0)) {
              continue label$159
             }
             break label$159;
            };
           }
           label$164 : {
            if (!$28) {
             break label$164
            }
            $23 = $23 << 8 | 0;
            $10 = 0;
            label$165 : {
             if (($14 | 0) >= ($13 | 0)) {
              break label$165
             }
             $10 = HEAPU8[($20 + $14 | 0) >> 0] | 0;
             $14 = $14 + 1 | 0;
            }
            $23 = $23 | ($10 & 255 | 0) | 0;
           }
           $10 = $23 + -1 | 0;
          }
          $14 = $10 + $14 | 0;
          $14 = ($14 | 0) < (0 | 0) ? $13 : ($13 | 0) < ($14 | 0) ? $13 : $14;
         }
         label$166 : {
          label$167 : {
           $10 = $14 - $27 | 0;
           if (($10 | $27 | 0 | 0) > (-1 | 0)) {
            break label$167
           }
           $14 = 0;
           $10 = HEAP32[($1 + 80 | 0) >> 2] | 0;
           $23 = 0;
           break label$166;
          }
          $14 = ($13 | 0) < ($27 | 0) | ($13 | 0) < ($14 | 0) | 0;
          $23 = $14 ? 0 : $10;
          $10 = HEAP32[($1 + 80 | 0) >> 2] | 0;
          $14 = $14 ? 0 : $10 + $27 | 0;
         }
         HEAP32[($9 + 120 | 0) >> 2] = 0;
         HEAP32[($9 + 104 | 0) >> 2] = $14;
         HEAP32[$24 >> 2] = $23;
         HEAP32[($9 + 108 | 0) >> 2] = 0;
         $14 = $13 - $29 | 0;
         $1833 = $14;
         $14 = ($14 | $29 | 0 | 0) < (0 | 0) | ($13 | 0) < ($29 | 0) | 0;
         HEAP32[($9 + 124 | 0) >> 2] = $14 ? 0 : $1833;
         HEAP32[($9 + 116 | 0) >> 2] = $14 ? 0 : $10 + $29 | 0;
         $14 = $13;
        }
        $23 = 0;
        $26 = ($22 | 0) < (0 | 0) ? $14 : ($14 | 0) < ($22 | 0) ? $14 : $22;
        $10 = $26;
        $21 = 0;
        label$168 : {
         if (($10 | 0) >= ($13 | 0)) {
          break label$168
         }
         $10 = $26 + 1 | 0;
         $21 = (HEAPU8[((HEAP32[($1 + 80 | 0) >> 2] | 0) + $26 | 0) >> 0] | 0) << 8 | 0;
        }
        label$169 : {
         label$170 : {
          if (($10 | 0) < ($13 | 0)) {
           break label$170
          }
          $14 = $10;
          break label$169;
         }
         $14 = $10 + 1 | 0;
         $23 = HEAPU8[((HEAP32[($1 + 80 | 0) >> 2] | 0) + $10 | 0) >> 0] | 0;
        }
        label$171 : {
         $23 = $23 | $21 | 0;
         if (!$23) {
          break label$171
         }
         $10 = 0;
         label$172 : {
          label$173 : {
           if (($14 | 0) < ($13 | 0)) {
            break label$173
           }
           $21 = $14;
           break label$172;
          }
          $21 = $14 + 1 | 0;
          $10 = HEAPU8[((HEAP32[($1 + 80 | 0) >> 2] | 0) + $14 | 0) >> 0] | 0;
         }
         $14 = Math_imul($10, $23) + $21 | 0;
         $14 = ($14 | 0) < (0 | 0) ? $13 : ($13 | 0) < ($14 | 0) ? $13 : $14;
         label$174 : {
          label$175 : {
           if ($10) {
            break label$175
           }
           $10 = -1;
           break label$174;
          }
          $27 = $10 & 1 | 0;
          $23 = 0;
          $20 = HEAP32[($1 + 80 | 0) >> 2] | 0;
          label$176 : {
           if (($10 | 0) == (1 | 0)) {
            break label$176
           }
           $22 = $10 & 254 | 0;
           $23 = 0;
           $21 = 0;
           label$177 : while (1) {
            label$178 : {
             label$179 : {
              if (($14 | 0) < ($13 | 0)) {
               break label$179
              }
              $10 = $14;
              $14 = 0;
              break label$178;
             }
             $10 = $14 + 1 | 0;
             $14 = HEAPU8[($20 + $14 | 0) >> 0] | 0;
            }
            $17 = $23 << 16 | 0 | (($14 & 255 | 0) << 8 | 0) | 0;
            $23 = 0;
            label$180 : {
             label$181 : {
              if (($10 | 0) < ($13 | 0)) {
               break label$181
              }
              $14 = $10;
              break label$180;
             }
             $14 = $10 + 1 | 0;
             $23 = HEAPU8[($20 + $10 | 0) >> 0] | 0;
            }
            $23 = $17 | ($23 & 255 | 0) | 0;
            $21 = $21 + 2 | 0;
            if (($21 | 0) != ($22 | 0)) {
             continue label$177
            }
            break label$177;
           };
          }
          label$182 : {
           if (!$27) {
            break label$182
           }
           $23 = $23 << 8 | 0;
           $10 = 0;
           label$183 : {
            if (($14 | 0) >= ($13 | 0)) {
             break label$183
            }
            $10 = HEAPU8[($20 + $14 | 0) >> 0] | 0;
            $14 = $14 + 1 | 0;
           }
           $23 = $23 | ($10 & 255 | 0) | 0;
          }
          $10 = $23 + -1 | 0;
         }
         $14 = $10 + $14 | 0;
         $14 = ($14 | 0) < (0 | 0) ? $13 : ($13 | 0) < ($14 | 0) ? $13 : $14;
        }
        $10 = 0;
        label$184 : {
         label$185 : {
          $21 = $14 - $26 | 0;
          if (($21 | $26 | 0 | 0) >= (0 | 0)) {
           break label$185
          }
          $23 = 0;
          break label$184;
         }
         $10 = 0;
         label$186 : {
          if (($13 | 0) >= ($26 | 0)) {
           break label$186
          }
          $23 = 0;
          break label$184;
         }
         $23 = 0;
         if (($13 | 0) < ($14 | 0)) {
          break label$184
         }
         $23 = (HEAP32[($1 + 80 | 0) >> 2] | 0) + $26 | 0;
         $10 = $21;
        }
        HEAP32[($9 + 68 | 0) >> 2] = $23;
        HEAP32[($9 + 76 | 0) >> 2] = $10;
        HEAP32[($9 + 72 | 0) >> 2] = 0;
       }
       $14 = 0;
       $23 = 65535;
       label$187 : {
        $10 = (HEAPU8[$18 >> 0] | 0) << 8 | 0 | (HEAPU8[$19 >> 0] | 0) | 0;
        if (!$10) {
         break label$187
        }
        label$188 : {
         label$189 : while (1) {
          label$190 : {
           $13 = $2 + (($14 << 4 | 0) + $3 | 0) | 0;
           if ((HEAPU8[$13 >> 0] | 0 | 0) != (109 | 0)) {
            break label$190
           }
           if ((HEAPU8[($13 + 1 | 0) >> 0] | 0 | 0) != (97 | 0)) {
            break label$190
           }
           if ((HEAPU8[($13 + 2 | 0) >> 0] | 0 | 0) != (120 | 0)) {
            break label$190
           }
           if ((HEAPU8[($13 + 3 | 0) >> 0] | 0 | 0) == (112 | 0)) {
            break label$188
           }
          }
          $14 = $14 + 1 | 0;
          if (($14 | 0) != ($10 | 0)) {
           continue label$189
          }
          break label$187;
         };
        }
        $3 = HEAPU8[($13 + 8 | 0) >> 0] | 0 | ((HEAPU8[($13 + 9 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($13 + 10 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($13 + 11 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        $3 = $3 << 24 | 0 | (($3 & 65280 | 0) << 8 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0;
        if (!$3) {
         break label$187
        }
        $3 = $2 + $3 | 0;
        $23 = (HEAPU8[($3 + 4 | 0) >> 0] | 0) << 8 | 0 | (HEAPU8[($3 + 5 | 0) >> 0] | 0) | 0;
       }
       HEAP32[($9 + 44 | 0) >> 2] = -1;
       HEAP32[($9 + 12 | 0) >> 2] = $23;
       $3 = $2 + $16 | 0;
       $14 = HEAPU8[($3 + 3 | 0) >> 0] | 0;
       $3 = HEAPU8[($3 + 2 | 0) >> 0] | 0;
       HEAP32[($9 + 48 | 0) >> 2] = 0;
       $10 = $14 | ($3 << 8 | 0) | 0;
       if (!$10) {
        break label$8
       }
       $18 = $16 + 4 | 0;
       $19 = 0;
       $3 = 0;
       label$191 : while (1) {
        label$192 : {
         label$193 : {
          label$194 : {
           $14 = $2 + ($18 + ($3 << 3 | 0) | 0) | 0;
           $13 = HEAPU8[$14 >> 0] | 0 | ((HEAPU8[($14 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
           switch (($13 << 8 | 0 | ($13 >>> 8 | 0) | 0) & 65535 | 0 | 0) {
           case 0:
            break label$193;
           case 3:
            break label$194;
           default:
            break label$192;
           };
          }
          $13 = HEAPU8[($14 + 2 | 0) >> 0] | 0 | ((HEAPU8[($14 + 3 | 0) >> 0] | 0) << 8 | 0) | 0;
          switch ((($13 << 8 | 0 | ($13 >>> 8 | 0) | 0) & 65535 | 0) + -1 | 0 | 0) {
          case 0:
          case 9:
           break label$193;
          default:
           break label$192;
          };
         }
         $14 = HEAPU8[($14 + 4 | 0) >> 0] | 0 | ((HEAPU8[($14 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($14 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($14 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
         $19 = ($14 << 24 | 0 | (($14 & 65280 | 0) << 8 | 0) | 0 | (($14 >>> 8 | 0) & 65280 | 0 | ($14 >>> 24 | 0) | 0) | 0) + $16 | 0;
         HEAP32[($9 + 48 | 0) >> 2] = $19;
        }
        $3 = $3 + 1 | 0;
        if (($3 | 0) != ($10 | 0)) {
         continue label$191
        }
        break label$191;
       };
       if (!$19) {
        break label$8
       }
       $2 = $2 + $15 | 0;
       HEAP32[($9 + 52 | 0) >> 2] = (HEAPU8[($2 + 50 | 0) >> 0] | 0) << 8 | 0 | (HEAPU8[($2 + 51 | 0) >> 0] | 0) | 0;
       $3 = HEAP32[$11 >> 2] | 0;
       $2 = HEAP32[($12 + 48 | 0) >> 2] | 0;
       $2 = $2 ? $2 : 73080;
       HEAP32[($9 + 160 | 0) >> 2] = $2;
       $10 = $7 + Math_imul($3, 24) | 0;
       label$195 : {
        if (!(HEAPU16[$2 >> 1] | 0)) {
         break label$195
        }
        $14 = $9 + 168 | 0;
        label$196 : while (1) {
         $3 = HEAPU16[($2 + 2 | 0) >> 1] | 0;
         if (!$3) {
          break label$195
         }
         $13 = HEAP32[$14 >> 2] | 0;
         HEAP32[$14 >> 2] = ($13 | 0) > ($3 | 0) ? $13 : $3;
         $3 = HEAPU16[($2 + 4 | 0) >> 1] | 0;
         $2 = $2 + 4 | 0;
         if ($3) {
          continue label$196
         }
         break label$196;
        };
       }
       HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 1 | 0;
       $2 = HEAP32[($10 + 4 | 0) >> 2] | 0;
       $3 = HEAP32[($9 + 168 | 0) >> 2] | 0;
       HEAP32[($10 + 4 | 0) >> 2] = ($2 | 0) > ($3 | 0) ? $2 : $3;
       $8 = $8 + 1 | 0;
       if (($8 | 0) < (HEAP32[($0 + 84 | 0) >> 2] | 0 | 0)) {
        continue label$9
       }
       break label$7;
      };
     }
     label$197 : {
      if (!$7) {
       break label$197
      }
      ImGui__MemFree_28void__29($7 | 0);
     }
     $2 = 0;
     $33 = $6;
     if (!$6) {
      break label$5
     }
     break label$6;
    }
    $11 = 0;
    $12 = 0;
    label$198 : {
     if (($4 | 0) <= (0 | 0)) {
      break label$198
     }
     $12 = 0;
     $21 = 0;
     label$199 : while (1) {
      $18 = $6 + Math_imul($21, 200) | 0;
      $8 = $18 + 176 | 0;
      $14 = HEAP32[($18 + 164 | 0) >> 2] | 0;
      label$200 : {
       $3 = HEAP32[($18 + 180 | 0) >> 2] | 0;
       $2 = ((HEAP32[($18 + 168 | 0) >> 2] | 0) + 32 | 0) >> 5 | 0;
       if (($3 | 0) >= ($2 | 0)) {
        break label$200
       }
       label$201 : {
        label$202 : {
         if ($3) {
          break label$202
         }
         $13 = 8;
         break label$201;
        }
        $13 = (($3 | 0) / (2 | 0) | 0) + $3 | 0;
       }
       $13 = ($13 | 0) > ($2 | 0) ? $13 : $2;
       if (($3 | 0) >= ($13 | 0)) {
        break label$200
       }
       $3 = ImGui__MemAlloc_28unsigned_20long_29($13 << 2 | 0 | 0) | 0;
       label$203 : {
        $9 = HEAP32[($8 + 8 | 0) >> 2] | 0;
        if (!$9) {
         break label$203
        }
        __memcpy($3 | 0, $9 | 0, (HEAP32[$8 >> 2] | 0) << 2 | 0 | 0) | 0;
        ImGui__MemFree_28void__29(HEAP32[($8 + 8 | 0) >> 2] | 0 | 0);
       }
       HEAP32[($8 + 4 | 0) >> 2] = $13;
       HEAP32[($8 + 8 | 0) >> 2] = $3;
      }
      HEAP32[$8 >> 2] = $2;
      memset(HEAP32[($8 + 8 | 0) >> 2] | 0 | 0, 0 | 0, $2 << 2 | 0 | 0) | 0;
      $3 = $7 + Math_imul($14, 24) | 0;
      $23 = $3 + 12 | 0;
      label$204 : {
       if (HEAP32[($3 + 12 | 0) >> 2] | 0) {
        break label$204
       }
       label$205 : {
        $14 = HEAP32[($23 + 4 | 0) >> 2] | 0;
        $2 = ((HEAP32[($3 + 4 | 0) >> 2] | 0) + 32 | 0) >> 5 | 0;
        if (($14 | 0) >= ($2 | 0)) {
         break label$205
        }
        label$206 : {
         label$207 : {
          if ($14) {
           break label$207
          }
          $13 = 8;
          break label$206;
         }
         $13 = (($14 | 0) / (2 | 0) | 0) + $14 | 0;
        }
        $13 = ($13 | 0) > ($2 | 0) ? $13 : $2;
        if (($14 | 0) >= ($13 | 0)) {
         break label$205
        }
        $14 = ImGui__MemAlloc_28unsigned_20long_29($13 << 2 | 0 | 0) | 0;
        label$208 : {
         $9 = HEAP32[($23 + 8 | 0) >> 2] | 0;
         if (!$9) {
          break label$208
         }
         __memcpy($14 | 0, $9 | 0, (HEAP32[$23 >> 2] | 0) << 2 | 0 | 0) | 0;
         ImGui__MemFree_28void__29(HEAP32[($23 + 8 | 0) >> 2] | 0 | 0);
        }
        HEAP32[($23 + 4 | 0) >> 2] = $13;
        HEAP32[($23 + 8 | 0) >> 2] = $14;
       }
       HEAP32[$23 >> 2] = $2;
       memset(HEAP32[($23 + 8 | 0) >> 2] | 0 | 0, 0 | 0, $2 << 2 | 0 | 0) | 0;
      }
      label$209 : {
       $15 = HEAP32[($18 + 160 | 0) >> 2] | 0;
       $2 = HEAPU16[$15 >> 1] | 0;
       if (!$2) {
        break label$209
       }
       $16 = $3 + 8 | 0;
       $19 = $18 + 172 | 0;
       label$210 : while (1) {
        $9 = HEAPU16[($15 + 2 | 0) >> 1] | 0;
        if (!$9) {
         break label$209
        }
        label$211 : {
         $3 = $2 & 65535 | 0;
         if ($3 >>> 0 > $9 >>> 0) {
          break label$211
         }
         $10 = HEAP32[($23 + 8 | 0) >> 2] | 0;
         label$212 : while (1) {
          label$213 : {
           $2 = $3;
           $13 = ($2 >>> 5 | 0) << 2 | 0;
           $3 = $10 + $13 | 0;
           $14 = 1 << $2 | 0;
           if ((HEAP32[$3 >> 2] | 0) & $14 | 0) {
            break label$213
           }
           if (!(stbtt_FindGlyphIndex_28stbtt_fontinfo_20const__2c_20int_29(HEAP32[($18 + 4 | 0) >> 2] | 0 | 0, HEAP32[($18 + 48 | 0) >> 2] | 0 | 0, $2 | 0) | 0)) {
            break label$213
           }
           HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1 | 0;
           HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) + 1 | 0;
           $13 = (HEAP32[($8 + 8 | 0) >> 2] | 0) + $13 | 0;
           HEAP32[$13 >> 2] = HEAP32[$13 >> 2] | 0 | $14 | 0;
           HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 0 | $14 | 0;
           $12 = $12 + 1 | 0;
          }
          $3 = $2 + 1 | 0;
          if (($2 | 0) != ($9 | 0)) {
           continue label$212
          }
          break label$212;
         };
        }
        $2 = HEAPU16[($15 + 4 | 0) >> 1] | 0;
        $15 = $15 + 4 | 0;
        if ($2) {
         continue label$210
        }
        break label$210;
       };
      }
      $21 = $21 + 1 | 0;
      if (($21 | 0) != ($4 | 0)) {
       continue label$199
      }
      break label$199;
     };
     $17 = 0;
     if (($4 | 0) <= (0 | 0)) {
      break label$198
     }
     label$214 : while (1) {
      $2 = $6 + Math_imul($17, 200) | 0;
      $14 = $2 + 188 | 0;
      label$215 : {
       $19 = $2 + 192 | 0;
       $3 = HEAP32[($2 + 172 | 0) >> 2] | 0;
       if ((HEAP32[$19 >> 2] | 0 | 0) >= ($3 | 0)) {
        break label$215
       }
       $13 = ImGui__MemAlloc_28unsigned_20long_29($3 << 2 | 0 | 0) | 0;
       label$216 : {
        $9 = $2 + 196 | 0;
        $10 = HEAP32[$9 >> 2] | 0;
        if (!$10) {
         break label$216
        }
        __memcpy($13 | 0, $10 | 0, (HEAP32[$14 >> 2] | 0) << 2 | 0 | 0) | 0;
        ImGui__MemFree_28void__29(HEAP32[$9 >> 2] | 0 | 0);
       }
       HEAP32[$9 >> 2] = $13;
       HEAP32[$19 >> 2] = $3;
      }
      $21 = HEAP32[($2 + 184 | 0) >> 2] | 0;
      $20 = $2 + 176 | 0;
      label$217 : {
       $3 = HEAP32[($2 + 176 | 0) >> 2] | 0;
       if (($3 | 0) < (1 | 0)) {
        break label$217
       }
       $23 = $21 + ($3 << 2 | 0) | 0;
       $10 = $2 + 196 | 0;
       $15 = $21;
       label$218 : while (1) {
        label$219 : {
         $9 = HEAP32[$15 >> 2] | 0;
         if (!$9) {
          break label$219
         }
         $8 = ($15 - $21 | 0) << 3 | 0;
         $2 = 0;
         label$220 : while (1) {
          label$221 : {
           if (!(($9 >>> $2 | 0) & 1 | 0)) {
            break label$221
           }
           $13 = $2 + $8 | 0;
           label$222 : {
            $3 = HEAP32[$14 >> 2] | 0;
            if (($3 | 0) != (HEAP32[$19 >> 2] | 0 | 0)) {
             break label$222
            }
            $18 = $3 + 1 | 0;
            label$223 : {
             label$224 : {
              if ($3) {
               break label$224
              }
              $16 = 8;
              break label$223;
             }
             $16 = (($3 | 0) / (2 | 0) | 0) + $3 | 0;
            }
            $18 = ($16 | 0) > ($18 | 0) ? $16 : $18;
            if (($3 | 0) >= ($18 | 0)) {
             break label$222
            }
            $3 = ImGui__MemAlloc_28unsigned_20long_29($18 << 2 | 0 | 0) | 0;
            label$225 : {
             $16 = HEAP32[$10 >> 2] | 0;
             if (!$16) {
              break label$225
             }
             __memcpy($3 | 0, $16 | 0, (HEAP32[$14 >> 2] | 0) << 2 | 0 | 0) | 0;
             ImGui__MemFree_28void__29(HEAP32[$10 >> 2] | 0 | 0);
            }
            HEAP32[$10 >> 2] = $3;
            HEAP32[$19 >> 2] = $18;
            $3 = HEAP32[$14 >> 2] | 0;
           }
           HEAP32[((HEAP32[$10 >> 2] | 0) + ($3 << 2 | 0) | 0) >> 2] = $13;
           HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 1 | 0;
          }
          $2 = $2 + 1 | 0;
          if (($2 | 0) != (32 | 0)) {
           continue label$220
          }
          break label$220;
         };
        }
        $15 = $15 + 4 | 0;
        if ($15 >>> 0 < $23 >>> 0) {
         continue label$218
        }
        break label$218;
       };
       $21 = HEAP32[($20 + 8 | 0) >> 2] | 0;
      }
      label$226 : {
       if (!$21) {
        break label$226
       }
       i64toi32_i32$1 = $20;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       ImGui__MemFree_28void__29($21 | 0);
       HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
      }
      $17 = $17 + 1 | 0;
      if (($17 | 0) != ($4 | 0)) {
       continue label$214
      }
      break label$214;
     };
    }
    label$227 : {
     label$228 : {
      label$229 : {
       if (($5 | 0) <= (0 | 0)) {
        break label$229
       }
       label$230 : while (1) {
        label$231 : {
         $2 = $7 + Math_imul($11, 24) | 0;
         $3 = HEAP32[($2 + 20 | 0) >> 2] | 0;
         if (!$3) {
          break label$231
         }
         $2 = $2 + 12 | 0;
         i64toi32_i32$1 = $2;
         i64toi32_i32$0 = 0;
         HEAP32[$2 >> 2] = 0;
         HEAP32[($2 + 4 | 0) >> 2] = i64toi32_i32$0;
         ImGui__MemFree_28void__29($3 | 0);
         HEAP32[($2 + 8 | 0) >> 2] = 0;
        }
        $11 = $11 + 1 | 0;
        if (($11 | 0) != ($5 | 0)) {
         continue label$230
        }
        break label$228;
       };
      }
      if (!$7) {
       break label$227
      }
     }
     ImGui__MemFree_28void__29($7 | 0);
    }
    $10 = 0;
    $2 = 0;
    $33 = 0;
    label$232 : {
     if (($12 | 0) < (1 | 0)) {
      break label$232
     }
     $3 = ($12 | 0) > (8 | 0) ? $12 : 8;
     $2 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($3, 24) | 0) | 0;
     $33 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($3, 28) | 0) | 0;
    }
    $34 = memset($2 | 0, 0 | 0, Math_imul($12, 24) | 0) | 0;
    $35 = memset($33 | 0, 0 | 0, Math_imul($12, 28) | 0) | 0;
    label$233 : {
     if (($4 | 0) < (1 | 0)) {
      break label$233
     }
     $10 = 0;
     $21 = 0;
     $11 = 0;
     $23 = 0;
     label$234 : while (1) {
      label$235 : {
       $3 = $6 + Math_imul($23, 200) | 0;
       $14 = HEAP32[($3 + 172 | 0) >> 2] | 0;
       if (!$14) {
        break label$235
       }
       $13 = $35 + Math_imul($11, 28) | 0;
       HEAP32[($3 + 156 | 0) >> 2] = $13;
       HEAP32[($3 + 152 | 0) >> 2] = $34 + Math_imul($21, 24) | 0;
       $2 = (HEAP32[($0 + 92 | 0) >> 2] | 0) + Math_imul($23, 120) | 0;
       $36 = Math_fround(HEAPF32[($2 + 16 | 0) >> 2]);
       $8 = $3 + 196 | 0;
       HEAP32[($3 + 136 | 0) >> 2] = HEAP32[$8 >> 2] | 0;
       HEAP32[($3 + 132 | 0) >> 2] = 0;
       HEAPF32[($3 + 128 | 0) >> 2] = $36;
       HEAP32[($3 + 144 | 0) >> 2] = $13;
       $13 = HEAP32[($3 + 188 | 0) >> 2] | 0;
       HEAP32[($3 + 140 | 0) >> 2] = $13;
       HEAP8[($3 + 148 | 0) >> 0] = HEAP32[($2 + 20 | 0) >> 2] | 0;
       HEAP8[($3 + 149 | 0) >> 0] = HEAP32[($2 + 24 | 0) >> 2] | 0;
       label$236 : {
        label$237 : {
         if (!($36 > Math_fround(0.0))) {
          break label$237
         }
         $9 = (HEAP32[($3 + 4 | 0) >> 2] | 0) + (HEAP32[($3 + 28 | 0) >> 2] | 0) | 0;
         $18 = HEAPU8[($9 + 4 | 0) >> 0] | 0 | ((HEAPU8[($9 + 5 | 0) >> 0] | 0) << 8 | 0) | 0;
         $9 = HEAPU8[($9 + 6 | 0) >> 0] | 0 | ((HEAPU8[($9 + 7 | 0) >> 0] | 0) << 8 | 0) | 0;
         $36 = Math_fround($36 / Math_fround((($18 << 8 | 0 | ($18 >>> 8 | 0) | 0) << 16 >> 16) - (($9 << 8 | 0 | ($9 >>> 8 | 0) | 0) << 16 >> 16) | 0 | 0));
         break label$236;
        }
        $114 = ((HEAP32[($3 + 4 | 0) >> 2] | 0) + (HEAP32[($3 + 20 | 0) >> 2] | 0) | 0) + 18 | 0;
        $9 = HEAPU8[$114 >> 0] | 0 | ((HEAPU8[($114 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
        $36 = Math_fround(Math_fround(-$36) / Math_fround((($9 << 8 | 0 | ($9 >>> 8 | 0) | 0) & 65535 | 0) >>> 0));
       }
       $11 = $14 + $11 | 0;
       $21 = $14 + $21 | 0;
       if (($13 | 0) < (1 | 0)) {
        break label$235
       }
       $12 = $3 + 188 | 0;
       $15 = $3 + 152 | 0;
       $14 = $2 + 24 | 0;
       $13 = $2 + 20 | 0;
       $9 = (HEAP32[($0 + 12 | 0) >> 2] | 0) + -1 | 0;
       $2 = 0;
       label$238 : while (1) {
        stbtt_GetGlyphBitmapBoxSubpixel_28stbtt_fontinfo_20const__2c_20int_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int__2c_20int__2c_20int__2c_20int__29($3 | 0, stbtt_FindGlyphIndex_28stbtt_fontinfo_20const__2c_20int_29(HEAP32[($3 + 4 | 0) >> 2] | 0 | 0, HEAP32[($3 + 48 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[$8 >> 2] | 0) + ($2 << 2 | 0) | 0) >> 2] | 0 | 0) | 0 | 0, Math_fround(Math_fround($36 * Math_fround(HEAP32[$13 >> 2] | 0 | 0))), Math_fround(Math_fround($36 * Math_fround(HEAP32[$14 >> 2] | 0 | 0))), $1 + 80 | 0 | 0, $1 + 48 | 0 | 0, $1 + 32 | 0 | 0, $1 + 76 | 0 | 0);
        $18 = (HEAP32[$15 >> 2] | 0) + Math_imul($2, 24) | 0;
        $16 = (($9 + (HEAP32[($1 + 32 | 0) >> 2] | 0) | 0) - (HEAP32[($1 + 80 | 0) >> 2] | 0) | 0) + (HEAP32[$13 >> 2] | 0) | 0;
        HEAP32[($18 + 4 | 0) >> 2] = $16;
        $19 = (($9 + (HEAP32[($1 + 76 | 0) >> 2] | 0) | 0) - (HEAP32[($1 + 48 | 0) >> 2] | 0) | 0) + (HEAP32[$14 >> 2] | 0) | 0;
        HEAP32[($18 + 8 | 0) >> 2] = $19;
        $10 = Math_imul($19, $16) + $10 | 0;
        $2 = $2 + 1 | 0;
        if (($2 | 0) < (HEAP32[$12 >> 2] | 0 | 0)) {
         continue label$238
        }
        break label$238;
       };
      }
      $23 = $23 + 1 | 0;
      if (($23 | 0) != ($4 | 0)) {
       continue label$234
      }
      break label$234;
     };
    }
    HEAP32[($0 + 40 | 0) >> 2] = 0;
    label$239 : {
     $9 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     if (($9 | 0) > (0 | 0)) {
      break label$239
     }
     label$240 : {
      label$241 : {
       $36 = Math_fround(Math_sqrt(Math_fround($10 | 0)));
       if (!(Math_fround(Math_abs($36)) < Math_fround(2147483648.0))) {
        break label$241
       }
       $2 = ~~$36;
       break label$240;
      }
      $2 = -2147483648;
     }
     $9 = 4096;
     if (($2 | 0) > (2866 | 0)) {
      break label$239
     }
     $9 = 2048;
     if (($2 | 0) > (1432 | 0)) {
      break label$239
     }
     $9 = ($2 | 0) > (715 | 0) ? 1024 : 512;
    }
    HEAP32[($0 + 36 | 0) >> 2] = $9;
    $24 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    $37 = ImGui__MemAlloc_28unsigned_20long_29(56 | 0) | 0;
    $19 = $9 - $24 | 0;
    $38 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($19, 12) | 0) | 0;
    label$242 : {
     label$243 : {
      label$244 : {
       label$245 : {
        if (!$37) {
         break label$245
        }
        if ($38) {
         break label$244
        }
       }
       label$246 : {
        if (!$37) {
         break label$246
        }
        ImGui__MemFree_28void__29($37 | 0);
       }
       if (!$38) {
        break label$243
       }
       ImGui__MemFree_28void__29($38 | 0);
       break label$243;
      }
      $12 = $19 + -1 | 0;
      $15 = 32768 - $24 | 0;
      $14 = 0;
      label$247 : {
       if (($19 | 0) < (2 | 0)) {
        break label$247
       }
       $16 = $12 & 3 | 0;
       $3 = 0;
       $2 = 0;
       label$248 : {
        if (($19 + -2 | 0) >>> 0 < 3 >>> 0) {
         break label$248
        }
        $8 = $12 & -4 | 0;
        $2 = 0;
        $14 = 0;
        label$249 : while (1) {
         $13 = $38 + Math_imul($2, 12) | 0;
         $10 = $38 + Math_imul($2 | 1 | 0, 12) | 0;
         HEAP32[($13 + 8 | 0) >> 2] = $10;
         $18 = $38 + Math_imul($2 | 2 | 0, 12) | 0;
         HEAP32[($10 + 8 | 0) >> 2] = $18;
         $10 = $38 + Math_imul($2 | 3 | 0, 12) | 0;
         HEAP32[($18 + 8 | 0) >> 2] = $10;
         HEAP32[($10 + 8 | 0) >> 2] = $13 + 48 | 0;
         $2 = $2 + 4 | 0;
         $14 = $14 + 4 | 0;
         if (($14 | 0) != ($8 | 0)) {
          continue label$249
         }
         break label$249;
        };
       }
       $14 = $12;
       if (!$16) {
        break label$247
       }
       label$250 : while (1) {
        $14 = $38 + Math_imul($2, 12) | 0;
        HEAP32[($14 + 8 | 0) >> 2] = $14 + 12 | 0;
        $2 = $2 + 1 | 0;
        $3 = $3 + 1 | 0;
        if (($3 | 0) != ($16 | 0)) {
         continue label$250
        }
        break label$250;
       };
       $14 = $12;
      }
      HEAP32[(($38 + Math_imul($14, 12) | 0) + 8 | 0) >> 2] = 0;
      HEAP32[($37 + 28 | 0) >> 2] = $38;
      i64toi32_i32$1 = $37;
      i64toi32_i32$0 = 0;
      HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = 1;
      HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$1 + 32 | 0;
      HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = $19;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = $15;
      HEAP32[i64toi32_i32$1 >> 2] = $19;
      i64toi32_i32$1 = i64toi32_i32$1 + 48 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 1073741824;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $2 = $37 + 44 | 0;
      HEAP32[$2 >> 2] = $19;
      HEAP32[($37 + 40 | 0) >> 2] = $2;
      i64toi32_i32$1 = $37;
      i64toi32_i32$0 = 0;
      HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = ($12 + $19 | 0 | 0) / ($19 | 0) | 0;
      break label$242;
     }
     $9 = 0;
     $24 = 0;
     $38 = 0;
     $37 = 0;
    }
    ImFontAtlasBuildPackCustomRects_28ImFontAtlas__2c_20void__29($0 | 0, $37 | 0);
    $18 = 0;
    label$251 : {
     if (($4 | 0) <= (0 | 0)) {
      break label$251
     }
     label$252 : while (1) {
      label$253 : {
       $2 = $6 + Math_imul($18, 200) | 0;
       $3 = HEAP32[($2 + 172 | 0) >> 2] | 0;
       if (!$3) {
        break label$253
       }
       stbrp_pack_rects_28stbrp_context__2c_20stbrp_rect__2c_20int_29($37 | 0, HEAP32[($2 + 152 | 0) >> 2] | 0 | 0, $3 | 0);
       $13 = HEAP32[($2 + 172 | 0) >> 2] | 0;
       if (($13 | 0) < (1 | 0)) {
        break label$253
       }
       $10 = HEAP32[($2 + 152 | 0) >> 2] | 0;
       $2 = 0;
       label$254 : while (1) {
        label$255 : {
         $3 = $10 + Math_imul($2, 24) | 0;
         if (!(HEAP32[($3 + 20 | 0) >> 2] | 0)) {
          break label$255
         }
         $14 = HEAP32[($0 + 40 | 0) >> 2] | 0;
         $3 = (HEAP32[($3 + 8 | 0) >> 2] | 0) + (HEAP32[($3 + 16 | 0) >> 2] | 0) | 0;
         HEAP32[($0 + 40 | 0) >> 2] = ($14 | 0) > ($3 | 0) ? $14 : $3;
        }
        $2 = $2 + 1 | 0;
        if (($2 | 0) != ($13 | 0)) {
         continue label$254
        }
        break label$254;
       };
      }
      $18 = $18 + 1 | 0;
      if (($18 | 0) != ($4 | 0)) {
       continue label$252
      }
      break label$252;
     };
    }
    $2 = HEAP32[($0 + 40 | 0) >> 2] | 0;
    label$256 : {
     if ((HEAPU8[$0 >> 0] | 0) & 1 | 0) {
      break label$256
     }
     $2 = $2 + -1 | 0;
     $2 = $2 >> 1 | 0 | $2 | 0;
     $2 = $2 >> 2 | 0 | $2 | 0;
     $2 = $2 >> 4 | 0 | $2 | 0;
     $2 = $2 >> 8 | 0 | $2 | 0;
     $2 = $2 >> 16 | 0 | $2 | 0;
    }
    $2 = $2 + 1 | 0;
    HEAP32[($0 + 40 | 0) >> 2] = $2;
    HEAPF32[($0 + 48 | 0) >> 2] = Math_fround(Math_fround(1.0) / Math_fround($2 | 0));
    $3 = HEAP32[($0 + 36 | 0) >> 2] | 0;
    HEAPF32[($0 + 44 | 0) >> 2] = Math_fround(Math_fround(1.0) / Math_fround($3 | 0));
    $2 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($3, $2) | 0) | 0;
    HEAP32[($0 + 28 | 0) >> 2] = $2;
    memset($2 | 0, 0 | 0, Math_imul(HEAP32[($0 + 40 | 0) >> 2] | 0, HEAP32[($0 + 36 | 0) >> 2] | 0) | 0) | 0;
    label$257 : {
     if (($4 | 0) < (1 | 0)) {
      break label$257
     }
     $39 = HEAP32[($0 + 28 | 0) >> 2] | 0;
     $40 = $1 + 80 | 0 | 4 | 0;
     $41 = $40 + 40 | 0;
     $42 = $40 + 32 | 0;
     $43 = 0;
     label$258 : while (1) {
      label$259 : {
       $5 = $6 + Math_imul($43, 200) | 0;
       if (!(HEAP32[($5 + 172 | 0) >> 2] | 0)) {
        break label$259
       }
       $2 = $5 + 149 | 0;
       $3 = $5 + 148 | 0;
       label$260 : {
        label$261 : {
         $36 = Math_fround(HEAPF32[($5 + 128 | 0) >> 2]);
         if (!($36 > Math_fround(0.0))) {
          break label$261
         }
         $14 = (HEAP32[($5 + 4 | 0) >> 2] | 0) + (HEAP32[($5 + 28 | 0) >> 2] | 0) | 0;
         $13 = HEAPU8[($14 + 4 | 0) >> 0] | 0 | ((HEAPU8[($14 + 5 | 0) >> 0] | 0) << 8 | 0) | 0;
         $14 = HEAPU8[($14 + 6 | 0) >> 0] | 0 | ((HEAPU8[($14 + 7 | 0) >> 0] | 0) << 8 | 0) | 0;
         $44 = Math_fround($36 / Math_fround((($13 << 8 | 0 | ($13 >>> 8 | 0) | 0) << 16 >> 16) - (($14 << 8 | 0 | ($14 >>> 8 | 0) | 0) << 16 >> 16) | 0 | 0));
         break label$260;
        }
        $115 = ((HEAP32[($5 + 4 | 0) >> 2] | 0) + (HEAP32[($5 + 20 | 0) >> 2] | 0) | 0) + 18 | 0;
        $14 = HEAPU8[$115 >> 0] | 0 | ((HEAPU8[($115 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
        $44 = Math_fround(Math_fround(-$36) / Math_fround((($14 << 8 | 0 | ($14 >>> 8 | 0) | 0) & 65535 | 0) >>> 0));
       }
       $10 = HEAPU8[$2 >> 0] | 0;
       $13 = HEAPU8[$3 >> 0] | 0;
       $36 = Math_fround($13 >>> 0);
       $45 = Math_fround(0.0);
       $46 = Math_fround(0.0);
       label$262 : {
        if (!$13) {
         break label$262
        }
        $46 = Math_fround(Math_fround(1 - $13 | 0 | 0) / Math_fround($36 + $36));
       }
       $47 = Math_fround($10 >>> 0);
       $32 = $5 + 140 | 0;
       label$263 : {
        if (!$10) {
         break label$263
        }
        $45 = Math_fround(Math_fround(1 - $10 | 0 | 0) / Math_fround($47 + $47));
       }
       $48 = HEAP32[($0 + 92 | 0) >> 2] | 0;
       label$264 : {
        if ((HEAP32[$32 >> 2] | 0 | 0) < (1 | 0)) {
         break label$264
        }
        $49 = $5 + 132 | 0;
        $50 = $5 + 136 | 0;
        $51 = $5 + 144 | 0;
        $25 = HEAP32[($5 + 152 | 0) >> 2] | 0;
        $52 = Math_fround(Math_fround(1.0) / $47);
        $53 = Math_fround(Math_fround(1.0) / $36);
        $54 = Math_fround($44 * $47);
        $55 = Math_fround($44 * $36);
        $36 = Math_fround(Math_fround(.3499999940395355) / ($55 > $54 ? $54 : $55));
        $56 = Math_fround($36 * $36);
        $57 = 1 - $10 | 0;
        $58 = 1 - $13 | 0;
        $59 = Math_fround(-$54);
        $31 = -1;
        $17 = 0;
        label$265 : while (1) {
         label$266 : {
          $2 = $25 + Math_imul($17, 24) | 0;
          if (!(HEAP32[($2 + 20 | 0) >> 2] | 0)) {
           break label$266
          }
          $3 = HEAP32[($2 + 8 | 0) >> 2] | 0;
          label$267 : {
           label$268 : {
            label$269 : {
             $14 = HEAP32[($2 + 4 | 0) >> 2] | 0;
             if (!$14) {
              break label$269
             }
             if (!$3) {
              break label$266
             }
             $28 = $2 + 8 | 0;
             $30 = $2 + 4 | 0;
             label$270 : {
              label$271 : {
               $18 = HEAP32[$50 >> 2] | 0;
               if ($18) {
                break label$271
               }
               $16 = (HEAP32[$49 >> 2] | 0) + $17 | 0;
               break label$270;
              }
              $16 = HEAP32[($18 + ($17 << 2 | 0) | 0) >> 2] | 0;
             }
             $60 = HEAP32[$51 >> 2] | 0;
             $8 = $5 + 4 | 0;
             $18 = HEAP32[$8 >> 2] | 0;
             $27 = stbtt_FindGlyphIndex_28stbtt_fontinfo_20const__2c_20int_29($18 | 0, HEAP32[($5 + 48 | 0) >> 2] | 0 | 0, $16 | 0) | 0;
             HEAP32[($2 + 12 | 0) >> 2] = (HEAP32[($2 + 12 | 0) >> 2] | 0) + $24 | 0;
             HEAP32[($2 + 16 | 0) >> 2] = (HEAP32[($2 + 16 | 0) >> 2] | 0) + $24 | 0;
             HEAP32[$30 >> 2] = $14 - $24 | 0;
             HEAP32[$28 >> 2] = $3 - $24 | 0;
             $12 = $27 << 2 | 0;
             $3 = $18 + (HEAP32[($5 + 28 | 0) >> 2] | 0) | 0;
             $3 = (HEAPU8[($3 + 34 | 0) >> 0] | 0) << 8 | 0 | (HEAPU8[($3 + 35 | 0) >> 0] | 0) | 0;
             $116 = ($18 + (HEAP32[($5 + 32 | 0) >> 2] | 0) | 0) + (($3 | 0) > ($27 | 0) ? $12 : ($3 << 2 | 0) + -4 | 0) | 0;
             $61 = HEAPU8[$116 >> 0] | 0 | ((HEAPU8[($116 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
             stbtt_GetGlyphBitmapBoxSubpixel_28stbtt_fontinfo_20const__2c_20int_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int__2c_20int__2c_20int__2c_20int__29($5 | 0, $27 | 0, Math_fround($55), Math_fround($54), $1 + 76 | 0 | 0, $1 + 72 | 0 | 0, $1 + 68 | 0 | 0, $1 + 64 | 0 | 0);
             $23 = HEAP32[($2 + 16 | 0) >> 2] | 0;
             $21 = HEAP32[($2 + 12 | 0) >> 2] | 0;
             $14 = HEAP32[$28 >> 2] | 0;
             $16 = (HEAP32[$30 >> 2] | 0) - $13 | 0;
             $29 = $16 + 1 | 0;
             $19 = stbtt_GetGlyphShape_28stbtt_fontinfo_20const__2c_20int_2c_20stbtt_vertex___29($5 | 0, $27 | 0, $1 + 32 | 0 | 0) | 0;
             label$272 : {
              label$273 : {
               label$274 : {
                if (!(HEAP32[($5 + 64 | 0) >> 2] | 0)) {
                 break label$274
                }
                i64toi32_i32$1 = $40;
                i64toi32_i32$0 = 0;
                HEAP32[i64toi32_i32$1 >> 2] = 0;
                HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                HEAP32[$41 >> 2] = 0;
                i64toi32_i32$1 = $42;
                i64toi32_i32$0 = 0;
                HEAP32[i64toi32_i32$1 >> 2] = 0;
                HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                i64toi32_i32$1 = $40 + 24 | 0;
                i64toi32_i32$0 = 0;
                HEAP32[i64toi32_i32$1 >> 2] = 0;
                HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                i64toi32_i32$1 = $40 + 16 | 0;
                i64toi32_i32$0 = 0;
                HEAP32[i64toi32_i32$1 >> 2] = 0;
                HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                i64toi32_i32$1 = $40 + 8 | 0;
                i64toi32_i32$0 = 0;
                HEAP32[i64toi32_i32$1 >> 2] = 0;
                HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                HEAP32[($1 + 80 | 0) >> 2] = 1;
                $3 = stbtt__run_charstring_28stbtt_fontinfo_20const__2c_20int_2c_20stbtt__csctx__29($5 | 0, $27 | 0, $1 + 80 | 0 | 0) | 0;
                $18 = (wasm2js_i32$0 = HEAP32[($1 + 116 | 0) >> 2] | 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = $3, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                $3 = (wasm2js_i32$0 = HEAP32[($1 + 104 | 0) >> 2] | 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = $3, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                break label$273;
               }
               $62 = 0;
               label$275 : {
                if ((HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) > ($27 | 0)) {
                 break label$275
                }
                $63 = 0;
                break label$272;
               }
               label$276 : {
                $3 = HEAP32[($5 + 52 | 0) >> 2] | 0;
                if (($3 | 0) <= (1 | 0)) {
                 break label$276
                }
                $63 = 0;
                break label$272;
               }
               $8 = HEAP32[$8 >> 2] | 0;
               $18 = $8 + (HEAP32[($5 + 16 | 0) >> 2] | 0) | 0;
               label$277 : {
                label$278 : {
                 if ($3) {
                  break label$278
                 }
                 $3 = $18 + ($27 << 1 | 0) | 0;
                 $18 = (HEAPU8[($3 + 3 | 0) >> 0] | 0) << 1 | 0 | ((HEAPU8[($3 + 2 | 0) >> 0] | 0) << 9 | 0) | 0;
                 $3 = (HEAPU8[($3 + 1 | 0) >> 0] | 0) << 1 | 0 | ((HEAPU8[$3 >> 0] | 0) << 9 | 0) | 0;
                 break label$277;
                }
                $12 = $18 + $12 | 0;
                $3 = HEAPU8[($12 + 4 | 0) >> 0] | 0 | ((HEAPU8[($12 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($12 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($12 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
                $18 = $3 << 24 | 0 | (($3 & 65280 | 0) << 8 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0;
                $3 = HEAPU8[$12 >> 0] | 0 | ((HEAPU8[($12 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($12 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($12 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
                $3 = $3 << 24 | 0 | (($3 & 65280 | 0) << 8 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0;
               }
               label$279 : {
                if (($3 | 0) != ($18 | 0)) {
                 break label$279
                }
                $63 = 0;
                break label$272;
               }
               $63 = 0;
               $3 = $3 + (HEAP32[($5 + 24 | 0) >> 2] | 0) | 0;
               if (($3 | 0) < (0 | 0)) {
                break label$272
               }
               $3 = $8 + $3 | 0;
               $18 = HEAPU8[($3 + 8 | 0) >> 0] | 0 | ((HEAPU8[($3 + 9 | 0) >> 0] | 0) << 8 | 0) | 0;
               $18 = ($18 << 8 | 0 | ($18 >>> 8 | 0) | 0) << 16 >> 16;
               $3 = HEAPU8[($3 + 2 | 0) >> 0] | 0 | ((HEAPU8[($3 + 3 | 0) >> 0] | 0) << 8 | 0) | 0;
               $3 = ($3 << 8 | 0 | ($3 >>> 8 | 0) | 0) << 16 >> 16;
              }
              label$280 : {
               label$281 : {
                $36 = Math_fround(Math_fround(Math_fround($3 | 0) * $55) + Math_fround(0.0));
                if (!(Math_fround(Math_abs($36)) < Math_fround(2147483648.0))) {
                 break label$281
                }
                $3 = ~~$36;
                break label$280;
               }
               $3 = -2147483648;
              }
              label$282 : {
               label$283 : {
                $36 = Math_fround($3 - (($36 >= Math_fround(0.0) ^ -1 | 0) & $36 != Math_fround($3 | 0) | 0) | 0 | 0);
                if (!(Math_fround(Math_abs($36)) < Math_fround(2147483648.0))) {
                 break label$283
                }
                $63 = ~~$36;
                break label$282;
               }
               $63 = -2147483648;
              }
              label$284 : {
               label$285 : {
                $36 = Math_fround(Math_fround(Math_fround(0 - $18 | 0 | 0) * $54) + Math_fround(0.0));
                if (!(Math_fround(Math_abs($36)) < Math_fround(2147483648.0))) {
                 break label$285
                }
                $3 = ~~$36;
                break label$284;
               }
               $3 = -2147483648;
              }
              label$286 : {
               $36 = Math_fround($3 - (($36 >= Math_fround(0.0) ^ -1 | 0) & $36 != Math_fround($3 | 0) | 0) | 0 | 0);
               if (!(Math_fround(Math_abs($36)) < Math_fround(2147483648.0))) {
                break label$286
               }
               $62 = ~~$36;
               break label$272;
              }
              $62 = -2147483648;
             }
             $64 = $2 + 16 | 0;
             $65 = $2 + 12 | 0;
             $3 = HEAP32[($1 + 32 | 0) >> 2] | 0;
             if (!$29) {
              break label$267
             }
             $66 = $14 - $10 | 0;
             $67 = $66 + 1 | 0;
             if (!$67) {
              break label$267
             }
             if (($19 | 0) < (1 | 0)) {
              break label$267
             }
             $8 = $19 & 3 | 0;
             $14 = 0;
             $12 = 0;
             $2 = 0;
             label$287 : {
              if ($19 >>> 0 < 4 >>> 0) {
               break label$287
              }
              $15 = $19 & -4 | 0;
              $12 = 0;
              $2 = 0;
              $18 = 0;
              label$288 : while (1) {
               $12 = ((($12 + ((HEAPU8[(($3 + Math_imul($2, 14) | 0) + 12 | 0) >> 0] | 0 | 0) == (1 | 0)) | 0) + ((HEAPU8[(($3 + Math_imul($2 | 1 | 0, 14) | 0) + 12 | 0) >> 0] | 0 | 0) == (1 | 0)) | 0) + ((HEAPU8[(($3 + Math_imul($2 | 2 | 0, 14) | 0) + 12 | 0) >> 0] | 0 | 0) == (1 | 0)) | 0) + ((HEAPU8[(($3 + Math_imul($2 | 3 | 0, 14) | 0) + 12 | 0) >> 0] | 0 | 0) == (1 | 0)) | 0;
               $2 = $2 + 4 | 0;
               $18 = $18 + 4 | 0;
               if (($18 | 0) != ($15 | 0)) {
                continue label$288
               }
               break label$288;
              };
             }
             label$289 : {
              if (!$8) {
               break label$289
              }
              label$290 : while (1) {
               $12 = $12 + ((HEAPU8[(($3 + Math_imul($2, 14) | 0) + 12 | 0) >> 0] | 0 | 0) == (1 | 0)) | 0;
               $2 = $2 + 1 | 0;
               $14 = $14 + 1 | 0;
               if (($14 | 0) != ($8 | 0)) {
                continue label$290
               }
               break label$290;
              };
             }
             if (!$12) {
              break label$267
             }
             $26 = ImGui__MemAlloc_28unsigned_20long_29($12 << 2 | 0 | 0) | 0;
             if (!$26) {
              break label$267
             }
             $20 = ($39 + $21 | 0) + Math_imul($23, $9) | 0;
             $18 = 0;
             HEAP32[($1 + 80 | 0) >> 2] = 0;
             $8 = -1;
             $36 = Math_fround(0.0);
             $47 = Math_fround(0.0);
             $14 = 0;
             label$291 : while (1) {
              label$292 : {
               label$293 : {
                label$294 : {
                 label$295 : {
                  label$296 : {
                   $2 = $3 + Math_imul($14, 14) | 0;
                   switch ((HEAPU8[($2 + 12 | 0) >> 0] | 0) + -1 | 0 | 0) {
                   case 0:
                    break label$293;
                   case 1:
                    break label$294;
                   case 2:
                    break label$295;
                   case 3:
                    break label$296;
                   default:
                    break label$292;
                   };
                  }
                  $68 = Math_fround(HEAP16[$2 >> 1] | 0 | 0);
                  $69 = Math_fround(HEAP16[($2 + 2 | 0) >> 1] | 0 | 0);
                  stbtt__tesselate_cubic_28stbtt__point__2c_20int__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_29(0 | 0, $1 + 80 | 0 | 0, Math_fround($47), Math_fround($36), Math_fround(Math_fround(HEAP16[($2 + 4 | 0) >> 1] | 0 | 0)), Math_fround(Math_fround(HEAP16[($2 + 6 | 0) >> 1] | 0 | 0)), Math_fround(Math_fround(HEAP16[($2 + 8 | 0) >> 1] | 0 | 0)), Math_fround(Math_fround(HEAP16[($2 + 10 | 0) >> 1] | 0 | 0)), Math_fround($68), Math_fround($69), Math_fround($56), 0 | 0);
                  $47 = $68;
                  $36 = $69;
                  break label$292;
                 }
                 $68 = Math_fround(HEAP16[$2 >> 1] | 0 | 0);
                 $69 = Math_fround(HEAP16[($2 + 2 | 0) >> 1] | 0 | 0);
                 stbtt__tesselate_curve_28stbtt__point__2c_20int__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_29(0 | 0, $1 + 80 | 0 | 0, Math_fround($47), Math_fround($36), Math_fround(Math_fround(HEAP16[($2 + 4 | 0) >> 1] | 0 | 0)), Math_fround(Math_fround(HEAP16[($2 + 6 | 0) >> 1] | 0 | 0)), Math_fround($68), Math_fround($69), Math_fround($56), 0 | 0);
                 $47 = $68;
                 $36 = $69;
                 break label$292;
                }
                $15 = HEAP16[($2 + 2 | 0) >> 1] | 0;
                $2 = HEAP16[$2 >> 1] | 0;
                HEAP32[($1 + 80 | 0) >> 2] = (HEAP32[($1 + 80 | 0) >> 2] | 0) + 1 | 0;
                $36 = Math_fround($15 | 0);
                $47 = Math_fround($2 | 0);
                break label$292;
               }
               $15 = HEAP32[($1 + 80 | 0) >> 2] | 0;
               label$297 : {
                label$298 : {
                 if (($8 | 0) >= (0 | 0)) {
                  break label$298
                 }
                 $18 = $15;
                 break label$297;
                }
                HEAP32[($26 + ($8 << 2 | 0) | 0) >> 2] = $15 - $18 | 0;
                $18 = HEAP32[($1 + 80 | 0) >> 2] | 0;
               }
               $15 = HEAP16[($2 + 2 | 0) >> 1] | 0;
               $2 = HEAP16[$2 >> 1] | 0;
               HEAP32[($1 + 80 | 0) >> 2] = $18 + 1 | 0;
               $8 = $8 + 1 | 0;
               $36 = Math_fround($15 | 0);
               $47 = Math_fround($2 | 0);
              }
              $14 = $14 + 1 | 0;
              if (($14 | 0) != ($19 | 0)) {
               continue label$291
              }
              break label$291;
             };
             HEAP32[($26 + ($8 << 2 | 0) | 0) >> 2] = (HEAP32[($1 + 80 | 0) >> 2] | 0) - $18 | 0;
             $70 = ImGui__MemAlloc_28unsigned_20long_29((HEAP32[($1 + 80 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
             if (!$70) {
              break label$268
             }
             $14 = 0;
             HEAP32[($1 + 80 | 0) >> 2] = 0;
             $8 = -1;
             $36 = Math_fround(0.0);
             $47 = Math_fround(0.0);
             label$299 : while (1) {
              label$300 : {
               label$301 : {
                label$302 : {
                 label$303 : {
                  label$304 : {
                   $2 = $3 + Math_imul($14, 14) | 0;
                   switch ((HEAPU8[($2 + 12 | 0) >> 0] | 0) + -1 | 0 | 0) {
                   case 0:
                    break label$301;
                   case 1:
                    break label$302;
                   case 2:
                    break label$303;
                   case 3:
                    break label$304;
                   default:
                    break label$300;
                   };
                  }
                  stbtt__tesselate_cubic_28stbtt__point__2c_20int__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_29($70 | 0, $1 + 80 | 0 | 0, Math_fround($47), Math_fround($36), Math_fround(Math_fround(HEAP16[($2 + 4 | 0) >> 1] | 0 | 0)), Math_fround(Math_fround(HEAP16[($2 + 6 | 0) >> 1] | 0 | 0)), Math_fround(Math_fround(HEAP16[($2 + 8 | 0) >> 1] | 0 | 0)), Math_fround(Math_fround(HEAP16[($2 + 10 | 0) >> 1] | 0 | 0)), Math_fround(Math_fround(HEAP16[$2 >> 1] | 0 | 0)), Math_fround(Math_fround(HEAP16[($2 + 2 | 0) >> 1] | 0 | 0)), Math_fround($56), 0 | 0);
                  $36 = Math_fround(HEAP16[($2 + 2 | 0) >> 1] | 0 | 0);
                  $47 = Math_fround(HEAP16[$2 >> 1] | 0 | 0);
                  break label$300;
                 }
                 stbtt__tesselate_curve_28stbtt__point__2c_20int__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_29($70 | 0, $1 + 80 | 0 | 0, Math_fround($47), Math_fround($36), Math_fround(Math_fround(HEAP16[($2 + 4 | 0) >> 1] | 0 | 0)), Math_fround(Math_fround(HEAP16[($2 + 6 | 0) >> 1] | 0 | 0)), Math_fround(Math_fround(HEAP16[$2 >> 1] | 0 | 0)), Math_fround(Math_fround(HEAP16[($2 + 2 | 0) >> 1] | 0 | 0)), Math_fround($56), 0 | 0);
                 $36 = Math_fround(HEAP16[($2 + 2 | 0) >> 1] | 0 | 0);
                 $47 = Math_fround(HEAP16[$2 >> 1] | 0 | 0);
                 break label$300;
                }
                $15 = HEAP16[($2 + 2 | 0) >> 1] | 0;
                $2 = HEAP16[$2 >> 1] | 0;
                $23 = HEAP32[($1 + 80 | 0) >> 2] | 0;
                HEAP32[($1 + 80 | 0) >> 2] = $23 + 1 | 0;
                $23 = $70 + ($23 << 3 | 0) | 0;
                $36 = Math_fround($15 | 0);
                HEAPF32[($23 + 4 | 0) >> 2] = $36;
                $47 = Math_fround($2 | 0);
                HEAPF32[$23 >> 2] = $47;
                break label$300;
               }
               $15 = HEAP32[($1 + 80 | 0) >> 2] | 0;
               label$305 : {
                label$306 : {
                 if (($8 | 0) >= (0 | 0)) {
                  break label$306
                 }
                 $18 = $15;
                 break label$305;
                }
                HEAP32[($26 + ($8 << 2 | 0) | 0) >> 2] = $15 - $18 | 0;
                $18 = HEAP32[($1 + 80 | 0) >> 2] | 0;
               }
               $15 = HEAP16[($2 + 2 | 0) >> 1] | 0;
               $2 = HEAP16[$2 >> 1] | 0;
               HEAP32[($1 + 80 | 0) >> 2] = $18 + 1 | 0;
               $23 = $70 + ($18 << 3 | 0) | 0;
               $36 = Math_fround($15 | 0);
               HEAPF32[($23 + 4 | 0) >> 2] = $36;
               $47 = Math_fround($2 | 0);
               HEAPF32[$23 >> 2] = $47;
               $8 = $8 + 1 | 0;
              }
              $14 = $14 + 1 | 0;
              if (($14 | 0) != ($19 | 0)) {
               continue label$299
              }
              break label$299;
             };
             HEAP32[($26 + ($8 << 2 | 0) | 0) >> 2] = (HEAP32[($1 + 80 | 0) >> 2] | 0) - $18 | 0;
             $15 = $12 & 3 | 0;
             $19 = 0;
             $14 = 0;
             $2 = 0;
             label$307 : {
              if ($12 >>> 0 < 4 >>> 0) {
               break label$307
              }
              $23 = $12 & -4 | 0;
              $14 = 0;
              $2 = 0;
              $8 = 0;
              label$308 : while (1) {
               $18 = $2 << 2 | 0;
               $14 = (HEAP32[($26 + ($18 | 12 | 0) | 0) >> 2] | 0) + ((HEAP32[($26 + ($18 | 8 | 0) | 0) >> 2] | 0) + ((HEAP32[($26 + ($18 | 4 | 0) | 0) >> 2] | 0) + ((HEAP32[($26 + $18 | 0) >> 2] | 0) + $14 | 0) | 0) | 0) | 0;
               $2 = $2 + 4 | 0;
               $8 = $8 + 4 | 0;
               if (($8 | 0) != ($23 | 0)) {
                continue label$308
               }
               break label$308;
              };
             }
             label$309 : {
              if (!$15) {
               break label$309
              }
              label$310 : while (1) {
               $14 = (HEAP32[($26 + ($2 << 2 | 0) | 0) >> 2] | 0) + $14 | 0;
               $2 = $2 + 1 | 0;
               $19 = $19 + 1 | 0;
               if (($19 | 0) != ($15 | 0)) {
                continue label$310
               }
               break label$310;
              };
             }
             $19 = 0;
             $7 = 0;
             $22 = 0;
             label$311 : {
              $23 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($14, 20) + 20 | 0 | 0) | 0;
              if (!$23) {
               break label$311
              }
              label$312 : while (1) {
               label$313 : {
                $21 = $26 + ($7 << 2 | 0) | 0;
                $11 = HEAP32[$21 >> 2] | 0;
                if (($11 | 0) < (1 | 0)) {
                 break label$313
                }
                $14 = $70 + ($22 << 3 | 0) | 0;
                $18 = $11 + -1 | 0;
                $36 = Math_fround(HEAPF32[(($14 + ($18 << 3 | 0) | 0) + 4 | 0) >> 2]);
                $2 = 0;
                $3 = $11;
                label$314 : while (1) {
                 label$315 : {
                  $47 = Math_fround(HEAPF32[(($14 + ($2 << 3 | 0) | 0) + 4 | 0) >> 2]);
                  if ($36 == $47) {
                   break label$315
                  }
                  $3 = $23 + Math_imul($19, 20) | 0;
                  $8 = $36 > $47;
                  HEAP32[($3 + 16 | 0) >> 2] = $8;
                  $15 = $14 + (($8 ? $18 : $2) << 3 | 0) | 0;
                  HEAPF32[$3 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$15 >> 2]) * $55) + Math_fround(0.0));
                  HEAPF32[($3 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($15 + 4 | 0) >> 2]) * $59) + Math_fround(0.0));
                  $18 = $14 + (($8 ? $2 : $18) << 3 | 0) | 0;
                  HEAPF32[($3 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$18 >> 2]) * $55) + Math_fround(0.0));
                  HEAPF32[($3 + 12 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($18 + 4 | 0) >> 2]) * $59) + Math_fround(0.0));
                  $19 = $19 + 1 | 0;
                  $3 = HEAP32[$21 >> 2] | 0;
                 }
                 $36 = $47;
                 $18 = $2;
                 $2 = $2 + 1 | 0;
                 if (($2 | 0) < ($3 | 0)) {
                  continue label$314
                 }
                 break label$314;
                };
               }
               $22 = $11 + $22 | 0;
               $7 = $7 + 1 | 0;
               if (($7 | 0) != ($12 | 0)) {
                continue label$312
               }
               break label$312;
              };
              stbtt__sort_edges_quicksort_28stbtt__edge__2c_20int_29($23 | 0, $19 | 0);
              $8 = 1;
              label$316 : {
               if (($19 | 0) < (2 | 0)) {
                break label$316
               }
               label$317 : while (1) {
                $2 = $23 + Math_imul($8, 20) | 0;
                $36 = Math_fround(HEAPF32[($2 + 4 | 0) >> 2]);
                $47 = Math_fround(HEAPF32[$2 >> 2]);
                $12 = ($1 + 80 | 0) + 8 | 0;
                HEAP32[$12 >> 2] = HEAP32[($2 + 16 | 0) >> 2] | 0;
                i64toi32_i32$2 = $2;
                i64toi32_i32$0 = HEAP32[($2 + 8 | 0) >> 2] | 0;
                i64toi32_i32$1 = HEAP32[($2 + 12 | 0) >> 2] | 0;
                $4008 = i64toi32_i32$0;
                i64toi32_i32$0 = $1;
                HEAP32[($1 + 80 | 0) >> 2] = $4008;
                HEAP32[($1 + 84 | 0) >> 2] = i64toi32_i32$1;
                $2 = $8;
                label$318 : {
                 label$319 : while (1) {
                  $18 = $2 + -1 | 0;
                  $3 = $23 + Math_imul($18, 20) | 0;
                  if (!($36 < Math_fround(HEAPF32[($3 + 4 | 0) >> 2]))) {
                   break label$318
                  }
                  $14 = $23 + Math_imul($2, 20) | 0;
                  i64toi32_i32$2 = $3;
                  i64toi32_i32$1 = HEAP32[$3 >> 2] | 0;
                  i64toi32_i32$0 = HEAP32[($3 + 4 | 0) >> 2] | 0;
                  $4027 = i64toi32_i32$1;
                  i64toi32_i32$1 = $14;
                  HEAP32[$14 >> 2] = $4027;
                  HEAP32[($14 + 4 | 0) >> 2] = i64toi32_i32$0;
                  HEAP32[($14 + 16 | 0) >> 2] = HEAP32[($3 + 16 | 0) >> 2] | 0;
                  i64toi32_i32$2 = $3 + 8 | 0;
                  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                  $4037 = i64toi32_i32$0;
                  i64toi32_i32$0 = $14 + 8 | 0;
                  HEAP32[i64toi32_i32$0 >> 2] = $4037;
                  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
                  $3 = ($2 | 0) > (1 | 0);
                  $2 = $18;
                  if ($3) {
                   continue label$319
                  }
                  break label$319;
                 };
                 $2 = 0;
                }
                label$320 : {
                 if (($8 | 0) == ($2 | 0)) {
                  break label$320
                 }
                 $2 = $23 + Math_imul($2, 20) | 0;
                 HEAPF32[($2 + 4 | 0) >> 2] = $36;
                 HEAPF32[$2 >> 2] = $47;
                 i64toi32_i32$2 = $1;
                 i64toi32_i32$1 = HEAP32[($1 + 80 | 0) >> 2] | 0;
                 i64toi32_i32$0 = HEAP32[($1 + 84 | 0) >> 2] | 0;
                 $4055 = i64toi32_i32$1;
                 i64toi32_i32$1 = $2;
                 HEAP32[($2 + 8 | 0) >> 2] = $4055;
                 HEAP32[($2 + 12 | 0) >> 2] = i64toi32_i32$0;
                 HEAP32[($2 + 16 | 0) >> 2] = HEAP32[$12 >> 2] | 0;
                }
                $8 = $8 + 1 | 0;
                if (($8 | 0) != ($19 | 0)) {
                 continue label$317
                }
                break label$317;
               };
              }
              HEAP32[($1 + 48 | 0) >> 2] = 0;
              $71 = $1 + 80 | 0;
              label$321 : {
               if (($29 | 0) < (65 | 0)) {
                break label$321
               }
               $71 = ImGui__MemAlloc_28unsigned_20long_29($29 << 3 | 0 | 4 | 0 | 0) | 0;
              }
              HEAPF32[(($23 + Math_imul($19, 20) | 0) + 4 | 0) >> 2] = Math_fround(Math_fround($62 + $67 | 0 | 0) + Math_fround(1.0));
              label$322 : {
               if ($66 >>> 0 > 2147483646 >>> 0) {
                break label$322
               }
               $72 = $29 << 2 | 0;
               $73 = $71 + $72 | 0;
               $74 = $73 + 4 | 0;
               $75 = $72 + 4 | 0;
               $76 = Math_fround($29 | 0);
               $77 = Math_fround($63 | 0);
               $8 = 0;
               $21 = $23;
               $67 = $62;
               $63 = 0;
               $22 = 0;
               $18 = 0;
               $29 = 0;
               label$323 : while (1) {
                $15 = memset($71 | 0, 0 | 0, $72 | 0) | 0;
                $7 = memset($73 | 0, 0 | 0, $75 | 0) | 0;
                $47 = Math_fround($67 | 0);
                $78 = Math_fround($47 + Math_fround(1.0));
                $2 = $1 + 48 | 0;
                label$324 : {
                 if (!$8) {
                  break label$324
                 }
                 label$325 : while (1) {
                  label$326 : {
                   label$327 : {
                    if (Math_fround(HEAPF32[($8 + 24 | 0) >> 2]) <= $47) {
                     break label$327
                    }
                    $2 = $8;
                    break label$326;
                   }
                   HEAP32[$2 >> 2] = HEAP32[$8 >> 2] | 0;
                   HEAP32[$8 >> 2] = $18;
                   HEAP32[($8 + 16 | 0) >> 2] = 0;
                   $18 = $8;
                  }
                  $8 = HEAP32[$2 >> 2] | 0;
                  if ($8) {
                   continue label$325
                  }
                  break label$325;
                 };
                }
                label$328 : {
                 $36 = Math_fround(HEAPF32[($21 + 4 | 0) >> 2]);
                 if (!($36 <= $78)) {
                  break label$328
                 }
                 $3 = $21 + 4 | 0;
                 $19 = ($62 | 0) != (0 | 0) & !$63 | 0;
                 label$329 : while (1) {
                  label$330 : {
                   $2 = $21;
                   $68 = Math_fround(HEAPF32[($2 + 12 | 0) >> 2]);
                   if ($36 == $68) {
                    break label$330
                   }
                   label$331 : {
                    label$332 : {
                     if (!$18) {
                      break label$332
                     }
                     $14 = HEAP32[$18 >> 2] | 0;
                     break label$331;
                    }
                    label$333 : {
                     label$334 : {
                      if (!$22) {
                       break label$334
                      }
                      $22 = $22 + -1 | 0;
                      break label$333;
                     }
                     label$335 : {
                      $14 = ImGui__MemAlloc_28unsigned_20long_29(56004 | 0) | 0;
                      if ($14) {
                       break label$335
                      }
                      $18 = 0;
                      $22 = 0;
                      break label$330;
                     }
                     HEAP32[$14 >> 2] = $29;
                     $36 = Math_fround(HEAPF32[$3 >> 2]);
                     $68 = Math_fround(HEAPF32[($2 + 12 | 0) >> 2]);
                     $22 = 1999;
                     $29 = $14;
                    }
                    $18 = ($29 + Math_imul($22, 28) | 0) + 4 | 0;
                    $14 = 0;
                   }
                   $79 = Math_fround(HEAPF32[$2 >> 2]);
                   $69 = Math_fround(Math_fround(Math_fround(HEAPF32[($2 + 8 | 0) >> 2]) - $79) / Math_fround($68 - $36));
                   HEAPF32[($18 + 8 | 0) >> 2] = $69;
                   HEAPF32[($18 + 12 | 0) >> 2] = $69 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $69) : Math_fround(0.0);
                   HEAPF32[($18 + 4 | 0) >> 2] = Math_fround(Math_fround($79 + Math_fround($69 * Math_fround($47 - $36))) - $77);
                   $3 = HEAP32[($2 + 16 | 0) >> 2] | 0;
                   HEAPF32[($18 + 24 | 0) >> 2] = $68;
                   HEAPF32[($18 + 20 | 0) >> 2] = $36;
                   HEAP32[$18 >> 2] = 0;
                   HEAPF32[($18 + 16 | 0) >> 2] = $3 ? Math_fround(1.0) : Math_fround(-1.0);
                   label$336 : {
                    if (($19 & $68 < $47 | 0 | 0) != (1 | 0)) {
                     break label$336
                    }
                    HEAPF32[($18 + 24 | 0) >> 2] = $47;
                   }
                   HEAP32[$18 >> 2] = HEAP32[($1 + 48 | 0) >> 2] | 0;
                   HEAP32[($1 + 48 | 0) >> 2] = $18;
                   $18 = $14;
                  }
                  $21 = $2 + 20 | 0;
                  $3 = $2 + 24 | 0;
                  $36 = Math_fround(HEAPF32[$3 >> 2]);
                  if ($36 <= $78) {
                   continue label$329
                  }
                  break label$329;
                 };
                }
                label$337 : {
                 $8 = HEAP32[($1 + 48 | 0) >> 2] | 0;
                 if (!$8) {
                  break label$337
                 }
                 $80 = Math_fround($78 - $47);
                 $3 = $8;
                 label$338 : while (1) {
                  $36 = Math_fround(HEAPF32[($3 + 4 | 0) >> 2]);
                  label$339 : {
                   label$340 : {
                    $81 = Math_fround(HEAPF32[($3 + 8 | 0) >> 2]);
                    if ($81 != Math_fround(0.0)) {
                     break label$340
                    }
                    if (!($36 < $76)) {
                     break label$339
                    }
                    label$341 : {
                     if (!($36 >= Math_fround(0.0))) {
                      break label$341
                     }
                     $2 = $78 == $47;
                     label$342 : {
                      label$343 : {
                       if (!(Math_fround(Math_abs($36)) < Math_fround(2147483648.0))) {
                        break label$343
                       }
                       $14 = ~~$36;
                       break label$342;
                      }
                      $14 = -2147483648;
                     }
                     if ($2) {
                      break label$339
                     }
                     label$344 : {
                      $68 = Math_fround(HEAPF32[($3 + 24 | 0) >> 2]);
                      if ($68 < $47) {
                       break label$344
                      }
                      $69 = Math_fround(HEAPF32[($3 + 20 | 0) >> 2]);
                      if ($69 > $78) {
                       break label$344
                      }
                      $79 = $36;
                      $82 = $47;
                      label$345 : {
                       if (!($69 > $47)) {
                        break label$345
                       }
                       $79 = Math_fround($36 + Math_fround(Math_fround(Math_fround($36 - $36) * Math_fround($69 - $47)) / $80));
                       $82 = $69;
                      }
                      $69 = $36;
                      $81 = $78;
                      label$346 : {
                       if (!($68 < $78)) {
                        break label$346
                       }
                       $69 = Math_fround($36 + Math_fround(Math_fround(Math_fround($68 - $78) * Math_fround($36 - $79)) / Math_fround($78 - $82)));
                       $81 = $68;
                      }
                      label$347 : {
                       $68 = Math_fround($14 | 0);
                       if (!($79 <= $68)) {
                        break label$347
                       }
                       if (!($69 <= $68)) {
                        break label$347
                       }
                       $2 = $15 + ($14 << 2 | 0) | 0;
                       HEAPF32[$2 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($3 + 16 | 0) >> 2]) * Math_fround($81 - $82)) + Math_fround(HEAPF32[$2 >> 2]));
                       break label$344;
                      }
                      label$348 : {
                       $83 = Math_fround($14 + 1 | 0 | 0);
                       if (!($79 >= $83)) {
                        break label$348
                       }
                       if ($69 >= $83) {
                        break label$344
                       }
                      }
                      $2 = $15 + ($14 << 2 | 0) | 0;
                      HEAPF32[$2 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($81 - $82) * Math_fround(HEAPF32[($3 + 16 | 0) >> 2])) * Math_fround(Math_fround(Math_fround(Math_fround($79 - $68) + Math_fround($69 - $68)) * Math_fround(-.5)) + Math_fround(1.0))) + Math_fround(HEAPF32[$2 >> 2]));
                     }
                     $68 = Math_fround(HEAPF32[($3 + 24 | 0) >> 2]);
                     if ($68 < $47) {
                      break label$339
                     }
                     $69 = Math_fround(HEAPF32[($3 + 20 | 0) >> 2]);
                     if ($69 > $78) {
                      break label$339
                     }
                     $79 = $36;
                     $82 = $47;
                     label$349 : {
                      if (!($69 > $47)) {
                       break label$349
                      }
                      $79 = Math_fround($36 + Math_fround(Math_fround(Math_fround($36 - $36) * Math_fround($69 - $47)) / $80));
                      $82 = $69;
                     }
                     $2 = $14 + 1 | 0;
                     label$350 : {
                      label$351 : {
                       if ($68 < $78) {
                        break label$351
                       }
                       $68 = $78;
                       break label$350;
                      }
                      $36 = Math_fround($36 + Math_fround(Math_fround(Math_fround($68 - $78) * Math_fround($36 - $79)) / Math_fround($78 - $82)));
                     }
                     label$352 : {
                      $69 = Math_fround($2 | 0);
                      if (!($79 <= $69)) {
                       break label$352
                      }
                      if (!($36 <= $69)) {
                       break label$352
                      }
                      $2 = $74 + ($14 << 2 | 0) | 0;
                      HEAPF32[$2 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($3 + 16 | 0) >> 2]) * Math_fround($68 - $82)) + Math_fround(HEAPF32[$2 >> 2]));
                      break label$339;
                     }
                     label$353 : {
                      $81 = Math_fround($14 + 2 | 0 | 0);
                      if (!($79 >= $81)) {
                       break label$353
                      }
                      if ($36 >= $81) {
                       break label$339
                      }
                     }
                     $2 = $74 + ($14 << 2 | 0) | 0;
                     HEAPF32[$2 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($68 - $82) * Math_fround(HEAPF32[($3 + 16 | 0) >> 2])) * Math_fround(Math_fround(Math_fround(Math_fround($79 - $69) + Math_fround($36 - $69)) * Math_fround(-.5)) + Math_fround(1.0))) + Math_fround(HEAPF32[$2 >> 2]));
                     break label$339;
                    }
                    if ($78 == $47) {
                     break label$339
                    }
                    $68 = Math_fround(HEAPF32[($3 + 24 | 0) >> 2]);
                    if ($68 < $47) {
                     break label$339
                    }
                    $69 = Math_fround(HEAPF32[($3 + 20 | 0) >> 2]);
                    if ($69 > $78) {
                     break label$339
                    }
                    $79 = $36;
                    $82 = $47;
                    label$354 : {
                     if (!($69 > $47)) {
                      break label$354
                     }
                     $79 = Math_fround($36 + Math_fround(Math_fround(Math_fround($36 - $36) * Math_fround($69 - $47)) / $80));
                     $82 = $69;
                    }
                    label$355 : {
                     label$356 : {
                      if ($68 < $78) {
                       break label$356
                      }
                      $68 = $78;
                      break label$355;
                     }
                     $36 = Math_fround($36 + Math_fround(Math_fround(Math_fround($68 - $78) * Math_fround($36 - $79)) / Math_fround($78 - $82)));
                    }
                    label$357 : {
                     if (!($79 <= Math_fround(0.0))) {
                      break label$357
                     }
                     if (!($36 <= Math_fround(0.0))) {
                      break label$357
                     }
                     HEAPF32[$7 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($3 + 16 | 0) >> 2]) * Math_fround($68 - $82)) + Math_fround(HEAPF32[$7 >> 2]));
                     break label$339;
                    }
                    label$358 : {
                     if (!($79 >= Math_fround(1.0))) {
                      break label$358
                     }
                     if ($36 >= Math_fround(1.0)) {
                      break label$339
                     }
                    }
                    HEAPF32[$7 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($68 - $82) * Math_fround(HEAPF32[($3 + 16 | 0) >> 2])) * Math_fround(Math_fround(Math_fround($79 + $36) * Math_fround(-.5)) + Math_fround(1.0))) + Math_fround(HEAPF32[$7 >> 2]));
                    break label$339;
                   }
                   $83 = Math_fround($81 + $36);
                   label$359 : {
                    $68 = Math_fround(HEAPF32[($3 + 20 | 0) >> 2]);
                    $2 = $68 > $47;
                    $69 = $2 ? Math_fround(Math_fround($81 * Math_fround($68 - $47)) + $36) : $36;
                    if (!($69 >= Math_fround(0.0))) {
                     break label$359
                    }
                    $82 = Math_fround(HEAPF32[($3 + 24 | 0) >> 2]);
                    $14 = $82 < $78;
                    $79 = $14 ? Math_fround(Math_fround($81 * Math_fround($82 - $47)) + $36) : $83;
                    if (!($79 >= Math_fround(0.0))) {
                     break label$359
                    }
                    if (!($69 < $76)) {
                     break label$359
                    }
                    if (!($79 < $76)) {
                     break label$359
                    }
                    $81 = Math_fround(HEAPF32[($3 + 12 | 0) >> 2]);
                    label$360 : {
                     label$361 : {
                      if (!(Math_fround(Math_abs($79)) < Math_fround(2147483648.0))) {
                       break label$361
                      }
                      $19 = ~~$79;
                      break label$360;
                     }
                     $19 = -2147483648;
                    }
                    label$362 : {
                     label$363 : {
                      if (!(Math_fround(Math_abs($69)) < Math_fround(2147483648.0))) {
                       break label$363
                      }
                      $11 = ~~$69;
                      break label$362;
                     }
                     $11 = -2147483648;
                    }
                    $82 = $14 ? $82 : $78;
                    $68 = $2 ? $68 : $47;
                    label$364 : {
                     if (($11 | 0) != ($19 | 0)) {
                      break label$364
                     }
                     $2 = $11 << 2 | 0;
                     $14 = $15 + $2 | 0;
                     $36 = Math_fround(Math_fround($11 | 0) + Math_fround(1.0));
                     $4648 = Math_fround(Math_fround(Math_fround($36 - $69) + Math_fround($36 - $79)) * Math_fround(.5));
                     $36 = Math_fround(Math_fround($82 - $68) * Math_fround(HEAPF32[($3 + 16 | 0) >> 2]));
                     HEAPF32[$14 >> 2] = Math_fround(Math_fround(HEAPF32[$14 >> 2]) + Math_fround($4648 * $36));
                     $2 = $74 + $2 | 0;
                     HEAPF32[$2 >> 2] = Math_fround($36 + Math_fround(HEAPF32[$2 >> 2]));
                     break label$339;
                    }
                    label$365 : {
                     label$366 : {
                      if ($69 > $79) {
                       break label$366
                      }
                      $12 = $19;
                      $19 = $11;
                      $84 = $68;
                      $85 = $79;
                      $79 = $69;
                      $83 = $36;
                      break label$365;
                     }
                     $84 = Math_fround($78 - Math_fround($82 - $47));
                     $82 = Math_fround($78 - Math_fround($68 - $47));
                     $81 = Math_fround(-$81);
                     $12 = $11;
                     $85 = $69;
                    }
                    $2 = $15 + ($19 << 2 | 0) | 0;
                    $4693 = $2;
                    $4695 = Math_fround(HEAPF32[$2 >> 2]);
                    $2 = $19 + 1 | 0;
                    $36 = Math_fround($2 | 0);
                    $4702 = Math_fround($36 - $79);
                    $79 = Math_fround(HEAPF32[($3 + 16 | 0) >> 2]);
                    $36 = Math_fround(Math_fround($81 * Math_fround($36 - $83)) + $47);
                    $68 = $36 > $78 ? $78 : $36;
                    $36 = Math_fround($79 * Math_fround($68 - $84));
                    HEAPF32[$4693 >> 2] = Math_fround($4695 + Math_fround(Math_fround($4702 * $36) * Math_fround(.5)));
                    label$367 : {
                     $86 = Math_fround($12 | 0);
                     $83 = Math_fround(Math_fround($81 * Math_fround($86 - $83)) + $47);
                     if (!($83 > $78)) {
                      break label$367
                     }
                     $83 = $78;
                     if (($12 | 0) == ($2 | 0)) {
                      break label$367
                     }
                     $81 = Math_fround(Math_fround($78 - $68) / Math_fround($12 - $2 | 0 | 0));
                     $83 = $78;
                    }
                    label$368 : {
                     if (($12 | 0) <= ($2 | 0)) {
                      break label$368
                     }
                     $68 = Math_fround($79 * $81);
                     $69 = Math_fround($68 * Math_fround(.5));
                     $87 = ($12 - $19 | 0) + -2 | 0;
                     $14 = 0;
                     label$369 : {
                      $11 = ($12 + ($19 ^ -1 | 0) | 0) & 3 | 0;
                      if (!$11) {
                       break label$369
                      }
                      label$370 : while (1) {
                       $19 = $15 + ($2 << 2 | 0) | 0;
                       HEAPF32[$19 >> 2] = Math_fround(Math_fround($69 + $36) + Math_fround(HEAPF32[$19 >> 2]));
                       $2 = $2 + 1 | 0;
                       $36 = Math_fround($68 + $36);
                       $14 = $14 + 1 | 0;
                       if (($14 | 0) != ($11 | 0)) {
                        continue label$370
                       }
                       break label$370;
                      };
                     }
                     if ($87 >>> 0 < 3 >>> 0) {
                      break label$368
                     }
                     label$371 : while (1) {
                      $14 = $15 + ($2 << 2 | 0) | 0;
                      HEAPF32[$14 >> 2] = Math_fround(Math_fround($69 + $36) + Math_fround(HEAPF32[$14 >> 2]));
                      $19 = $14 + 4 | 0;
                      $36 = Math_fround($68 + $36);
                      HEAPF32[$19 >> 2] = Math_fround(Math_fround($69 + $36) + Math_fround(HEAPF32[$19 >> 2]));
                      $19 = $14 + 8 | 0;
                      $36 = Math_fround($68 + $36);
                      HEAPF32[$19 >> 2] = Math_fround(Math_fround($69 + $36) + Math_fround(HEAPF32[$19 >> 2]));
                      $14 = $14 + 12 | 0;
                      $36 = Math_fround($68 + $36);
                      HEAPF32[$14 >> 2] = Math_fround(Math_fround($69 + $36) + Math_fround(HEAPF32[$14 >> 2]));
                      $36 = Math_fround($68 + $36);
                      $2 = $2 + 4 | 0;
                      if (($2 | 0) != ($12 | 0)) {
                       continue label$371
                      }
                      break label$371;
                     };
                    }
                    $2 = $12 << 2 | 0;
                    $14 = $15 + $2 | 0;
                    $68 = Math_fround($86 + Math_fround(1.0));
                    HEAPF32[$14 >> 2] = Math_fround(Math_fround(Math_fround($79 * Math_fround(Math_fround(Math_fround(Math_fround($68 - $86) + Math_fround($68 - $85)) * Math_fround(.5)) * Math_fround($82 - $83))) + $36) + Math_fround(HEAPF32[$14 >> 2]));
                    $2 = $74 + $2 | 0;
                    HEAPF32[$2 >> 2] = Math_fround(Math_fround($79 * Math_fround($82 - $84)) + Math_fround(HEAPF32[$2 >> 2]));
                    break label$339;
                   }
                   if ($16 >>> 0 > 2147483646 >>> 0) {
                    break label$339
                   }
                   $11 = $3 + 16 | 0;
                   $88 = Math_fround($83 - $36);
                   $14 = 0;
                   label$372 : while (1) {
                    $2 = $14;
                    $69 = Math_fround($2 | 0);
                    $86 = Math_fround($69 - $36);
                    $68 = Math_fround(Math_fround($86 / $81) + $47);
                    $14 = $2 + 1 | 0;
                    $82 = Math_fround($14 | 0);
                    $84 = Math_fround($82 - $36);
                    $79 = Math_fround(Math_fround($84 / $81) + $47);
                    label$373 : {
                     label$374 : {
                      $19 = $36 < $69;
                      if (!$19) {
                       break label$374
                      }
                      if (!($83 > $82)) {
                       break label$374
                      }
                      label$375 : {
                       if ($68 == $47) {
                        break label$375
                       }
                       $84 = Math_fround(HEAPF32[($3 + 24 | 0) >> 2]);
                       if ($84 < $47) {
                        break label$375
                       }
                       $85 = Math_fround(HEAPF32[($3 + 20 | 0) >> 2]);
                       if ($85 > $68) {
                        break label$375
                       }
                       $89 = $36;
                       $90 = $47;
                       label$376 : {
                        if (!($85 > $47)) {
                         break label$376
                        }
                        $89 = Math_fround($36 + Math_fround(Math_fround($86 * Math_fround($85 - $47)) / Math_fround($68 - $47)));
                        $90 = $85;
                       }
                       $86 = $69;
                       $85 = $68;
                       label$377 : {
                        if (!($84 < $68)) {
                         break label$377
                        }
                        $86 = Math_fround(Math_fround(Math_fround(Math_fround($84 - $68) * Math_fround($69 - $89)) / Math_fround($68 - $90)) + $69);
                        $85 = $84;
                       }
                       label$378 : {
                        if (!($89 <= $69)) {
                         break label$378
                        }
                        if (!($86 <= $69)) {
                         break label$378
                        }
                        $19 = $15 + ($2 << 2 | 0) | 0;
                        HEAPF32[$19 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$11 >> 2]) * Math_fround($85 - $90)) + Math_fround(HEAPF32[$19 >> 2]));
                        break label$375;
                       }
                       label$379 : {
                        if (!($89 >= $82)) {
                         break label$379
                        }
                        if ($86 >= $82) {
                         break label$375
                        }
                       }
                       $19 = $15 + ($2 << 2 | 0) | 0;
                       HEAPF32[$19 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($85 - $90) * Math_fround(HEAPF32[$11 >> 2])) * Math_fround(Math_fround(Math_fround(Math_fround($89 - $69) + Math_fround($86 - $69)) * Math_fround(-.5)) + Math_fround(1.0))) + Math_fround(HEAPF32[$19 >> 2]));
                      }
                      label$380 : {
                       if ($68 == $79) {
                        break label$380
                       }
                       $86 = Math_fround(HEAPF32[($3 + 24 | 0) >> 2]);
                       if ($86 < $68) {
                        break label$380
                       }
                       $84 = Math_fround(HEAPF32[($3 + 20 | 0) >> 2]);
                       if ($84 > $79) {
                        break label$380
                       }
                       label$381 : {
                        label$382 : {
                         if ($84 > $68) {
                          break label$382
                         }
                         $85 = $69;
                         $84 = $68;
                         break label$381;
                        }
                        $85 = Math_fround(Math_fround(Math_fround(Math_fround($82 - $69) * Math_fround($84 - $68)) / Math_fround($79 - $68)) + $69);
                       }
                       $68 = $82;
                       $89 = $79;
                       label$383 : {
                        if (!($86 < $79)) {
                         break label$383
                        }
                        $68 = Math_fround(Math_fround(Math_fround(Math_fround($86 - $79) * Math_fround($82 - $85)) / Math_fround($79 - $84)) + $82);
                        $89 = $86;
                       }
                       label$384 : {
                        if (!($85 <= $69)) {
                         break label$384
                        }
                        if (!($68 <= $69)) {
                         break label$384
                        }
                        $19 = $15 + ($2 << 2 | 0) | 0;
                        HEAPF32[$19 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$11 >> 2]) * Math_fround($89 - $84)) + Math_fround(HEAPF32[$19 >> 2]));
                        break label$380;
                       }
                       label$385 : {
                        if (!($85 >= $82)) {
                         break label$385
                        }
                        if ($68 >= $82) {
                         break label$380
                        }
                       }
                       $19 = $15 + ($2 << 2 | 0) | 0;
                       HEAPF32[$19 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($89 - $84) * Math_fround(HEAPF32[$11 >> 2])) * Math_fround(Math_fround(Math_fround(Math_fround($85 - $69) + Math_fround($68 - $69)) * Math_fround(-.5)) + Math_fround(1.0))) + Math_fround(HEAPF32[$19 >> 2]));
                      }
                      if ($79 == $78) {
                       break label$373
                      }
                      $68 = Math_fround(HEAPF32[($3 + 24 | 0) >> 2]);
                      if ($68 < $79) {
                       break label$373
                      }
                      $86 = Math_fround(HEAPF32[($3 + 20 | 0) >> 2]);
                      if ($86 > $78) {
                       break label$373
                      }
                      label$386 : {
                       label$387 : {
                        if ($86 > $79) {
                         break label$387
                        }
                        $84 = $82;
                        $86 = $79;
                        break label$386;
                       }
                       $84 = Math_fround(Math_fround(Math_fround(Math_fround($83 - $82) * Math_fround($86 - $79)) / Math_fround($78 - $79)) + $82);
                      }
                      $79 = $83;
                      $85 = $78;
                      label$388 : {
                       if (!($68 < $78)) {
                        break label$388
                       }
                       $79 = Math_fround($83 + Math_fround(Math_fround(Math_fround($68 - $78) * Math_fround($83 - $84)) / Math_fround($78 - $86)));
                       $85 = $68;
                      }
                      label$389 : {
                       if (!($84 <= $69)) {
                        break label$389
                       }
                       if (!($79 <= $69)) {
                        break label$389
                       }
                       $19 = $15 + ($2 << 2 | 0) | 0;
                       HEAPF32[$19 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$11 >> 2]) * Math_fround($85 - $86)) + Math_fround(HEAPF32[$19 >> 2]));
                       break label$373;
                      }
                      label$390 : {
                       if (!($84 >= $82)) {
                        break label$390
                       }
                       if ($79 >= $82) {
                        break label$373
                       }
                      }
                      $19 = $15 + ($2 << 2 | 0) | 0;
                      HEAPF32[$19 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($85 - $86) * Math_fround(HEAPF32[$11 >> 2])) * Math_fround(Math_fround(Math_fround(Math_fround($84 - $69) + Math_fround($79 - $69)) * Math_fround(-.5)) + Math_fround(1.0))) + Math_fround(HEAPF32[$19 >> 2]));
                      break label$373;
                     }
                     label$391 : {
                      $12 = $83 < $69;
                      if (!$12) {
                       break label$391
                      }
                      if (!($36 > $82)) {
                       break label$391
                      }
                      label$392 : {
                       if ($79 == $47) {
                        break label$392
                       }
                       $86 = Math_fround(HEAPF32[($3 + 24 | 0) >> 2]);
                       if ($86 < $47) {
                        break label$392
                       }
                       $85 = Math_fround(HEAPF32[($3 + 20 | 0) >> 2]);
                       if ($85 > $79) {
                        break label$392
                       }
                       $89 = $36;
                       $90 = $47;
                       label$393 : {
                        if (!($85 > $47)) {
                         break label$393
                        }
                        $89 = Math_fround($36 + Math_fround(Math_fround($84 * Math_fround($85 - $47)) / Math_fround($79 - $47)));
                        $90 = $85;
                       }
                       $84 = $82;
                       $85 = $79;
                       label$394 : {
                        if (!($86 < $79)) {
                         break label$394
                        }
                        $84 = Math_fround(Math_fround(Math_fround(Math_fround($86 - $79) * Math_fround($82 - $89)) / Math_fround($79 - $90)) + $82);
                        $85 = $86;
                       }
                       label$395 : {
                        if (!($89 <= $69)) {
                         break label$395
                        }
                        if (!($84 <= $69)) {
                         break label$395
                        }
                        $19 = $15 + ($2 << 2 | 0) | 0;
                        HEAPF32[$19 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$11 >> 2]) * Math_fround($85 - $90)) + Math_fround(HEAPF32[$19 >> 2]));
                        break label$392;
                       }
                       label$396 : {
                        if (!($89 >= $82)) {
                         break label$396
                        }
                        if ($84 >= $82) {
                         break label$392
                        }
                       }
                       $19 = $15 + ($2 << 2 | 0) | 0;
                       HEAPF32[$19 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($85 - $90) * Math_fround(HEAPF32[$11 >> 2])) * Math_fround(Math_fround(Math_fround(Math_fround($89 - $69) + Math_fround($84 - $69)) * Math_fround(-.5)) + Math_fround(1.0))) + Math_fround(HEAPF32[$19 >> 2]));
                      }
                      label$397 : {
                       if ($79 == $68) {
                        break label$397
                       }
                       $86 = Math_fround(HEAPF32[($3 + 24 | 0) >> 2]);
                       if ($86 < $79) {
                        break label$397
                       }
                       $84 = Math_fround(HEAPF32[($3 + 20 | 0) >> 2]);
                       if ($84 > $68) {
                        break label$397
                       }
                       label$398 : {
                        label$399 : {
                         if ($84 > $79) {
                          break label$399
                         }
                         $85 = $82;
                         $84 = $79;
                         break label$398;
                        }
                        $85 = Math_fround(Math_fround(Math_fround(Math_fround($69 - $82) * Math_fround($84 - $79)) / Math_fround($68 - $79)) + $82);
                       }
                       $79 = $69;
                       $89 = $68;
                       label$400 : {
                        if (!($86 < $68)) {
                         break label$400
                        }
                        $79 = Math_fround(Math_fround(Math_fround(Math_fround($86 - $68) * Math_fround($69 - $85)) / Math_fround($68 - $84)) + $69);
                        $89 = $86;
                       }
                       label$401 : {
                        if (!($85 <= $69)) {
                         break label$401
                        }
                        if (!($79 <= $69)) {
                         break label$401
                        }
                        $19 = $15 + ($2 << 2 | 0) | 0;
                        HEAPF32[$19 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$11 >> 2]) * Math_fround($89 - $84)) + Math_fround(HEAPF32[$19 >> 2]));
                        break label$397;
                       }
                       label$402 : {
                        if (!($85 >= $82)) {
                         break label$402
                        }
                        if ($79 >= $82) {
                         break label$397
                        }
                       }
                       $19 = $15 + ($2 << 2 | 0) | 0;
                       HEAPF32[$19 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($89 - $84) * Math_fround(HEAPF32[$11 >> 2])) * Math_fround(Math_fround(Math_fround(Math_fround($85 - $69) + Math_fround($79 - $69)) * Math_fround(-.5)) + Math_fround(1.0))) + Math_fround(HEAPF32[$19 >> 2]));
                      }
                      if ($68 == $78) {
                       break label$373
                      }
                      $79 = Math_fround(HEAPF32[($3 + 24 | 0) >> 2]);
                      if ($79 < $68) {
                       break label$373
                      }
                      $86 = Math_fround(HEAPF32[($3 + 20 | 0) >> 2]);
                      if ($86 > $78) {
                       break label$373
                      }
                      label$403 : {
                       label$404 : {
                        if ($86 > $68) {
                         break label$404
                        }
                        $84 = $69;
                        $86 = $68;
                        break label$403;
                       }
                       $84 = Math_fround(Math_fround(Math_fround(Math_fround($83 - $69) * Math_fround($86 - $68)) / Math_fround($78 - $68)) + $69);
                      }
                      $68 = $83;
                      $85 = $78;
                      label$405 : {
                       if (!($79 < $78)) {
                        break label$405
                       }
                       $68 = Math_fround($83 + Math_fround(Math_fround(Math_fround($79 - $78) * Math_fround($83 - $84)) / Math_fround($78 - $86)));
                       $85 = $79;
                      }
                      label$406 : {
                       if (!($84 <= $69)) {
                        break label$406
                       }
                       if (!($68 <= $69)) {
                        break label$406
                       }
                       $19 = $15 + ($2 << 2 | 0) | 0;
                       HEAPF32[$19 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$11 >> 2]) * Math_fround($85 - $86)) + Math_fround(HEAPF32[$19 >> 2]));
                       break label$373;
                      }
                      label$407 : {
                       if (!($84 >= $82)) {
                        break label$407
                       }
                       if ($68 >= $82) {
                        break label$373
                       }
                      }
                      $19 = $15 + ($2 << 2 | 0) | 0;
                      HEAPF32[$19 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($85 - $86) * Math_fround(HEAPF32[$11 >> 2])) * Math_fround(Math_fround(Math_fround(Math_fround($84 - $69) + Math_fround($68 - $69)) * Math_fround(-.5)) + Math_fround(1.0))) + Math_fround(HEAPF32[$19 >> 2]));
                      break label$373;
                     }
                     label$408 : {
                      if (!$19) {
                       break label$408
                      }
                      if (!($83 > $69)) {
                       break label$408
                      }
                      label$409 : {
                       if ($68 == $47) {
                        break label$409
                       }
                       $79 = Math_fround(HEAPF32[($3 + 24 | 0) >> 2]);
                       if ($79 < $47) {
                        break label$409
                       }
                       $84 = Math_fround(HEAPF32[($3 + 20 | 0) >> 2]);
                       if ($84 > $68) {
                        break label$409
                       }
                       $85 = $36;
                       $89 = $47;
                       label$410 : {
                        if (!($84 > $47)) {
                         break label$410
                        }
                        $85 = Math_fround($36 + Math_fround(Math_fround($86 * Math_fround($84 - $47)) / Math_fround($68 - $47)));
                        $89 = $84;
                       }
                       $86 = $69;
                       $84 = $68;
                       label$411 : {
                        if (!($79 < $68)) {
                         break label$411
                        }
                        $86 = Math_fround(Math_fround(Math_fround(Math_fround($79 - $68) * Math_fround($69 - $85)) / Math_fround($68 - $89)) + $69);
                        $84 = $79;
                       }
                       label$412 : {
                        if (!($85 <= $69)) {
                         break label$412
                        }
                        if (!($86 <= $69)) {
                         break label$412
                        }
                        $19 = $15 + ($2 << 2 | 0) | 0;
                        HEAPF32[$19 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$11 >> 2]) * Math_fround($84 - $89)) + Math_fround(HEAPF32[$19 >> 2]));
                        break label$409;
                       }
                       label$413 : {
                        if (!($85 >= $82)) {
                         break label$413
                        }
                        if ($86 >= $82) {
                         break label$409
                        }
                       }
                       $19 = $15 + ($2 << 2 | 0) | 0;
                       HEAPF32[$19 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($84 - $89) * Math_fround(HEAPF32[$11 >> 2])) * Math_fround(Math_fround(Math_fround(Math_fround($85 - $69) + Math_fround($86 - $69)) * Math_fround(-.5)) + Math_fround(1.0))) + Math_fround(HEAPF32[$19 >> 2]));
                      }
                      if ($68 == $78) {
                       break label$373
                      }
                      $79 = Math_fround(HEAPF32[($3 + 24 | 0) >> 2]);
                      if ($79 < $68) {
                       break label$373
                      }
                      $86 = Math_fround(HEAPF32[($3 + 20 | 0) >> 2]);
                      if ($86 > $78) {
                       break label$373
                      }
                      label$414 : {
                       label$415 : {
                        if ($86 > $68) {
                         break label$415
                        }
                        $84 = $69;
                        $86 = $68;
                        break label$414;
                       }
                       $84 = Math_fround(Math_fround(Math_fround(Math_fround($83 - $69) * Math_fround($86 - $68)) / Math_fround($78 - $68)) + $69);
                      }
                      $68 = $83;
                      $85 = $78;
                      label$416 : {
                       if (!($79 < $78)) {
                        break label$416
                       }
                       $68 = Math_fround($83 + Math_fround(Math_fround(Math_fround($79 - $78) * Math_fround($83 - $84)) / Math_fround($78 - $86)));
                       $85 = $79;
                      }
                      label$417 : {
                       if (!($84 <= $69)) {
                        break label$417
                       }
                       if (!($68 <= $69)) {
                        break label$417
                       }
                       $19 = $15 + ($2 << 2 | 0) | 0;
                       HEAPF32[$19 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$11 >> 2]) * Math_fround($85 - $86)) + Math_fround(HEAPF32[$19 >> 2]));
                       break label$373;
                      }
                      label$418 : {
                       if (!($84 >= $82)) {
                        break label$418
                       }
                       if ($68 >= $82) {
                        break label$373
                       }
                      }
                      $19 = $15 + ($2 << 2 | 0) | 0;
                      HEAPF32[$19 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($85 - $86) * Math_fround(HEAPF32[$11 >> 2])) * Math_fround(Math_fround(Math_fround(Math_fround($84 - $69) + Math_fround($68 - $69)) * Math_fround(-.5)) + Math_fround(1.0))) + Math_fround(HEAPF32[$19 >> 2]));
                      break label$373;
                     }
                     label$419 : {
                      if (!$12) {
                       break label$419
                      }
                      if (!($36 > $69)) {
                       break label$419
                      }
                      label$420 : {
                       if ($68 == $47) {
                        break label$420
                       }
                       $79 = Math_fround(HEAPF32[($3 + 24 | 0) >> 2]);
                       if ($79 < $47) {
                        break label$420
                       }
                       $84 = Math_fround(HEAPF32[($3 + 20 | 0) >> 2]);
                       if ($84 > $68) {
                        break label$420
                       }
                       $85 = $36;
                       $89 = $47;
                       label$421 : {
                        if (!($84 > $47)) {
                         break label$421
                        }
                        $85 = Math_fround($36 + Math_fround(Math_fround($86 * Math_fround($84 - $47)) / Math_fround($68 - $47)));
                        $89 = $84;
                       }
                       $86 = $69;
                       $84 = $68;
                       label$422 : {
                        if (!($79 < $68)) {
                         break label$422
                        }
                        $86 = Math_fround(Math_fround(Math_fround(Math_fround($79 - $68) * Math_fround($69 - $85)) / Math_fround($68 - $89)) + $69);
                        $84 = $79;
                       }
                       label$423 : {
                        if (!($85 <= $69)) {
                         break label$423
                        }
                        if (!($86 <= $69)) {
                         break label$423
                        }
                        $19 = $15 + ($2 << 2 | 0) | 0;
                        HEAPF32[$19 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$11 >> 2]) * Math_fround($84 - $89)) + Math_fround(HEAPF32[$19 >> 2]));
                        break label$420;
                       }
                       label$424 : {
                        if (!($85 >= $82)) {
                         break label$424
                        }
                        if ($86 >= $82) {
                         break label$420
                        }
                       }
                       $19 = $15 + ($2 << 2 | 0) | 0;
                       HEAPF32[$19 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($84 - $89) * Math_fround(HEAPF32[$11 >> 2])) * Math_fround(Math_fround(Math_fround(Math_fround($85 - $69) + Math_fround($86 - $69)) * Math_fround(-.5)) + Math_fround(1.0))) + Math_fround(HEAPF32[$19 >> 2]));
                      }
                      if ($68 == $78) {
                       break label$373
                      }
                      $79 = Math_fround(HEAPF32[($3 + 24 | 0) >> 2]);
                      if ($79 < $68) {
                       break label$373
                      }
                      $86 = Math_fround(HEAPF32[($3 + 20 | 0) >> 2]);
                      if ($86 > $78) {
                       break label$373
                      }
                      label$425 : {
                       label$426 : {
                        if ($86 > $68) {
                         break label$426
                        }
                        $84 = $69;
                        $86 = $68;
                        break label$425;
                       }
                       $84 = Math_fround(Math_fround(Math_fround(Math_fround($83 - $69) * Math_fround($86 - $68)) / Math_fround($78 - $68)) + $69);
                      }
                      $68 = $83;
                      $85 = $78;
                      label$427 : {
                       if (!($79 < $78)) {
                        break label$427
                       }
                       $68 = Math_fround($83 + Math_fround(Math_fround(Math_fround($79 - $78) * Math_fround($83 - $84)) / Math_fround($78 - $86)));
                       $85 = $79;
                      }
                      label$428 : {
                       if (!($84 <= $69)) {
                        break label$428
                       }
                       if (!($68 <= $69)) {
                        break label$428
                       }
                       $19 = $15 + ($2 << 2 | 0) | 0;
                       HEAPF32[$19 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$11 >> 2]) * Math_fround($85 - $86)) + Math_fround(HEAPF32[$19 >> 2]));
                       break label$373;
                      }
                      label$429 : {
                       if (!($84 >= $82)) {
                        break label$429
                       }
                       if ($68 >= $82) {
                        break label$373
                       }
                      }
                      $19 = $15 + ($2 << 2 | 0) | 0;
                      HEAPF32[$19 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($85 - $86) * Math_fround(HEAPF32[$11 >> 2])) * Math_fround(Math_fround(Math_fround(Math_fround($84 - $69) + Math_fround($68 - $69)) * Math_fround(-.5)) + Math_fround(1.0))) + Math_fround(HEAPF32[$19 >> 2]));
                      break label$373;
                     }
                     label$430 : {
                      if (!($36 < $82)) {
                       break label$430
                      }
                      if (!($83 > $82)) {
                       break label$430
                      }
                      label$431 : {
                       if ($79 == $47) {
                        break label$431
                       }
                       $68 = Math_fround(HEAPF32[($3 + 24 | 0) >> 2]);
                       if ($68 < $47) {
                        break label$431
                       }
                       $86 = Math_fround(HEAPF32[($3 + 20 | 0) >> 2]);
                       if ($86 > $79) {
                        break label$431
                       }
                       $85 = $36;
                       $89 = $47;
                       label$432 : {
                        if (!($86 > $47)) {
                         break label$432
                        }
                        $85 = Math_fround($36 + Math_fround(Math_fround($84 * Math_fround($86 - $47)) / Math_fround($79 - $47)));
                        $89 = $86;
                       }
                       $86 = $82;
                       $84 = $79;
                       label$433 : {
                        if (!($68 < $79)) {
                         break label$433
                        }
                        $86 = Math_fround(Math_fround(Math_fround(Math_fround($68 - $79) * Math_fround($82 - $85)) / Math_fround($79 - $89)) + $82);
                        $84 = $68;
                       }
                       label$434 : {
                        if (!($85 <= $69)) {
                         break label$434
                        }
                        if (!($86 <= $69)) {
                         break label$434
                        }
                        $19 = $15 + ($2 << 2 | 0) | 0;
                        HEAPF32[$19 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$11 >> 2]) * Math_fround($84 - $89)) + Math_fround(HEAPF32[$19 >> 2]));
                        break label$431;
                       }
                       label$435 : {
                        if (!($85 >= $82)) {
                         break label$435
                        }
                        if ($86 >= $82) {
                         break label$431
                        }
                       }
                       $19 = $15 + ($2 << 2 | 0) | 0;
                       HEAPF32[$19 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($84 - $89) * Math_fround(HEAPF32[$11 >> 2])) * Math_fround(Math_fround(Math_fround(Math_fround($85 - $69) + Math_fround($86 - $69)) * Math_fround(-.5)) + Math_fround(1.0))) + Math_fround(HEAPF32[$19 >> 2]));
                      }
                      if ($79 == $78) {
                       break label$373
                      }
                      $68 = Math_fround(HEAPF32[($3 + 24 | 0) >> 2]);
                      if ($68 < $79) {
                       break label$373
                      }
                      $86 = Math_fround(HEAPF32[($3 + 20 | 0) >> 2]);
                      if ($86 > $78) {
                       break label$373
                      }
                      label$436 : {
                       label$437 : {
                        if ($86 > $79) {
                         break label$437
                        }
                        $84 = $82;
                        $86 = $79;
                        break label$436;
                       }
                       $84 = Math_fround(Math_fround(Math_fround(Math_fround($83 - $82) * Math_fround($86 - $79)) / Math_fround($78 - $79)) + $82);
                      }
                      $79 = $83;
                      $85 = $78;
                      label$438 : {
                       if (!($68 < $78)) {
                        break label$438
                       }
                       $79 = Math_fround($83 + Math_fround(Math_fround(Math_fround($68 - $78) * Math_fround($83 - $84)) / Math_fround($78 - $86)));
                       $85 = $68;
                      }
                      label$439 : {
                       if (!($84 <= $69)) {
                        break label$439
                       }
                       if (!($79 <= $69)) {
                        break label$439
                       }
                       $19 = $15 + ($2 << 2 | 0) | 0;
                       HEAPF32[$19 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$11 >> 2]) * Math_fround($85 - $86)) + Math_fround(HEAPF32[$19 >> 2]));
                       break label$373;
                      }
                      label$440 : {
                       if (!($84 >= $82)) {
                        break label$440
                       }
                       if ($79 >= $82) {
                        break label$373
                       }
                      }
                      $19 = $15 + ($2 << 2 | 0) | 0;
                      HEAPF32[$19 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($85 - $86) * Math_fround(HEAPF32[$11 >> 2])) * Math_fround(Math_fround(Math_fround(Math_fround($84 - $69) + Math_fround($79 - $69)) * Math_fround(-.5)) + Math_fround(1.0))) + Math_fround(HEAPF32[$19 >> 2]));
                      break label$373;
                     }
                     label$441 : {
                      if (!($83 < $82)) {
                       break label$441
                      }
                      if (!($36 > $82)) {
                       break label$441
                      }
                      label$442 : {
                       if ($79 == $47) {
                        break label$442
                       }
                       $68 = Math_fround(HEAPF32[($3 + 24 | 0) >> 2]);
                       if ($68 < $47) {
                        break label$442
                       }
                       $86 = Math_fround(HEAPF32[($3 + 20 | 0) >> 2]);
                       if ($86 > $79) {
                        break label$442
                       }
                       $85 = $36;
                       $89 = $47;
                       label$443 : {
                        if (!($86 > $47)) {
                         break label$443
                        }
                        $85 = Math_fround($36 + Math_fround(Math_fround($84 * Math_fround($86 - $47)) / Math_fround($79 - $47)));
                        $89 = $86;
                       }
                       $86 = $82;
                       $84 = $79;
                       label$444 : {
                        if (!($68 < $79)) {
                         break label$444
                        }
                        $86 = Math_fround(Math_fround(Math_fround(Math_fround($68 - $79) * Math_fround($82 - $85)) / Math_fround($79 - $89)) + $82);
                        $84 = $68;
                       }
                       label$445 : {
                        if (!($85 <= $69)) {
                         break label$445
                        }
                        if (!($86 <= $69)) {
                         break label$445
                        }
                        $19 = $15 + ($2 << 2 | 0) | 0;
                        HEAPF32[$19 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$11 >> 2]) * Math_fround($84 - $89)) + Math_fround(HEAPF32[$19 >> 2]));
                        break label$442;
                       }
                       label$446 : {
                        if (!($85 >= $82)) {
                         break label$446
                        }
                        if ($86 >= $82) {
                         break label$442
                        }
                       }
                       $19 = $15 + ($2 << 2 | 0) | 0;
                       HEAPF32[$19 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($84 - $89) * Math_fround(HEAPF32[$11 >> 2])) * Math_fround(Math_fround(Math_fround(Math_fround($85 - $69) + Math_fround($86 - $69)) * Math_fround(-.5)) + Math_fround(1.0))) + Math_fround(HEAPF32[$19 >> 2]));
                      }
                      if ($79 == $78) {
                       break label$373
                      }
                      $68 = Math_fround(HEAPF32[($3 + 24 | 0) >> 2]);
                      if ($68 < $79) {
                       break label$373
                      }
                      $86 = Math_fround(HEAPF32[($3 + 20 | 0) >> 2]);
                      if ($86 > $78) {
                       break label$373
                      }
                      label$447 : {
                       label$448 : {
                        if ($86 > $79) {
                         break label$448
                        }
                        $84 = $82;
                        $86 = $79;
                        break label$447;
                       }
                       $84 = Math_fround(Math_fround(Math_fround(Math_fround($83 - $82) * Math_fround($86 - $79)) / Math_fround($78 - $79)) + $82);
                      }
                      $79 = $83;
                      $85 = $78;
                      label$449 : {
                       if (!($68 < $78)) {
                        break label$449
                       }
                       $79 = Math_fround($83 + Math_fround(Math_fround(Math_fround($68 - $78) * Math_fround($83 - $84)) / Math_fround($78 - $86)));
                       $85 = $68;
                      }
                      label$450 : {
                       if (!($84 <= $69)) {
                        break label$450
                       }
                       if (!($79 <= $69)) {
                        break label$450
                       }
                       $19 = $15 + ($2 << 2 | 0) | 0;
                       HEAPF32[$19 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$11 >> 2]) * Math_fround($85 - $86)) + Math_fround(HEAPF32[$19 >> 2]));
                       break label$373;
                      }
                      label$451 : {
                       if (!($84 >= $82)) {
                        break label$451
                       }
                       if ($79 >= $82) {
                        break label$373
                       }
                      }
                      $19 = $15 + ($2 << 2 | 0) | 0;
                      HEAPF32[$19 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($85 - $86) * Math_fround(HEAPF32[$11 >> 2])) * Math_fround(Math_fround(Math_fround(Math_fround($84 - $69) + Math_fround($79 - $69)) * Math_fround(-.5)) + Math_fround(1.0))) + Math_fround(HEAPF32[$19 >> 2]));
                      break label$373;
                     }
                     if ($78 == $47) {
                      break label$373
                     }
                     $68 = Math_fround(HEAPF32[($3 + 24 | 0) >> 2]);
                     if ($68 < $47) {
                      break label$373
                     }
                     $79 = Math_fround(HEAPF32[($3 + 20 | 0) >> 2]);
                     if ($79 > $78) {
                      break label$373
                     }
                     $86 = $36;
                     $84 = $47;
                     label$452 : {
                      if (!($79 > $47)) {
                       break label$452
                      }
                      $86 = Math_fround($36 + Math_fround(Math_fround($88 * Math_fround($79 - $47)) / $80));
                      $84 = $79;
                     }
                     $79 = $83;
                     $85 = $78;
                     label$453 : {
                      if (!($68 < $78)) {
                       break label$453
                      }
                      $79 = Math_fround($83 + Math_fround(Math_fround(Math_fround($68 - $78) * Math_fround($83 - $86)) / Math_fround($78 - $84)));
                      $85 = $68;
                     }
                     label$454 : {
                      if (!($86 <= $69)) {
                       break label$454
                      }
                      if (!($79 <= $69)) {
                       break label$454
                      }
                      $19 = $15 + ($2 << 2 | 0) | 0;
                      HEAPF32[$19 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$11 >> 2]) * Math_fround($85 - $84)) + Math_fround(HEAPF32[$19 >> 2]));
                      break label$373;
                     }
                     label$455 : {
                      if (!($86 >= $82)) {
                       break label$455
                      }
                      if ($79 >= $82) {
                       break label$373
                      }
                     }
                     $19 = $15 + ($2 << 2 | 0) | 0;
                     HEAPF32[$19 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($85 - $84) * Math_fround(HEAPF32[$11 >> 2])) * Math_fround(Math_fround(Math_fround(Math_fround($86 - $69) + Math_fround($79 - $69)) * Math_fround(-.5)) + Math_fround(1.0))) + Math_fround(HEAPF32[$19 >> 2]));
                    }
                    if (($2 | 0) != ($16 | 0)) {
                     continue label$372
                    }
                    break label$372;
                   };
                  }
                  $3 = HEAP32[$3 >> 2] | 0;
                  if ($3) {
                   continue label$338
                  }
                  break label$338;
                 };
                }
                label$456 : {
                 if ($16 >>> 0 > 2147483646 >>> 0) {
                  break label$456
                 }
                 $14 = Math_imul($63, $9);
                 $2 = 0;
                 $36 = Math_fround(0.0);
                 label$457 : while (1) {
                  label$458 : {
                   label$459 : {
                    $3 = $2 << 2 | 0;
                    $36 = Math_fround($36 + Math_fround(HEAPF32[($7 + $3 | 0) >> 2]));
                    $47 = Math_fround(Math_fround(Math_fround(Math_abs(Math_fround(Math_fround(HEAPF32[($15 + $3 | 0) >> 2]) + $36))) * Math_fround(255.0)) + Math_fround(.5));
                    if (!(Math_fround(Math_abs($47)) < Math_fround(2147483648.0))) {
                     break label$459
                    }
                    $3 = ~~$47;
                    break label$458;
                   }
                   $3 = -2147483648;
                  }
                  HEAP8[($20 + ($2 + $14 | 0) | 0) >> 0] = ($3 | 0) < (255 | 0) ? $3 : 255;
                  $3 = ($2 | 0) == ($16 | 0);
                  $2 = $2 + 1 | 0;
                  if (!$3) {
                   continue label$457
                  }
                  break label$457;
                 };
                }
                $2 = $8;
                label$460 : {
                 if (!$2) {
                  break label$460
                 }
                 label$461 : while (1) {
                  HEAPF32[($2 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($2 + 8 | 0) >> 2]) + Math_fround(HEAPF32[($2 + 4 | 0) >> 2]));
                  $2 = HEAP32[$2 >> 2] | 0;
                  if ($2) {
                   continue label$461
                  }
                  break label$461;
                 };
                }
                $67 = $67 + 1 | 0;
                $2 = ($63 | 0) != ($66 | 0);
                $63 = $63 + 1 | 0;
                if ($2) {
                 continue label$323
                }
                break label$323;
               };
               if (!$29) {
                break label$322
               }
               label$462 : while (1) {
                $2 = HEAP32[$29 >> 2] | 0;
                ImGui__MemFree_28void__29($29 | 0);
                $29 = $2;
                if ($2) {
                 continue label$462
                }
                break label$462;
               };
              }
              label$463 : {
               if (($71 | 0) == ($1 + 80 | 0 | 0)) {
                break label$463
               }
               ImGui__MemFree_28void__29($71 | 0);
              }
              ImGui__MemFree_28void__29($23 | 0);
              $3 = HEAP32[($1 + 32 | 0) >> 2] | 0;
             }
             ImGui__MemFree_28void__29($26 | 0);
             ImGui__MemFree_28void__29($70 | 0);
             break label$267;
            }
            if ($3) {
             break label$266
            }
            if (($31 | 0) < (0 | 0)) {
             break label$266
            }
            $3 = HEAP32[$51 >> 2] | 0;
            $2 = $3 + Math_imul($17, 28) | 0;
            $3 = $3 + Math_imul($31, 28) | 0;
            i64toi32_i32$2 = $3;
            i64toi32_i32$0 = HEAP32[$3 >> 2] | 0;
            i64toi32_i32$1 = HEAP32[($3 + 4 | 0) >> 2] | 0;
            $6625 = i64toi32_i32$0;
            i64toi32_i32$0 = $2;
            HEAP32[$2 >> 2] = $6625;
            HEAP32[($2 + 4 | 0) >> 2] = i64toi32_i32$1;
            HEAP32[($2 + 24 | 0) >> 2] = HEAP32[($3 + 24 | 0) >> 2] | 0;
            i64toi32_i32$2 = $3 + 16 | 0;
            i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
            $6635 = i64toi32_i32$1;
            i64toi32_i32$1 = $2 + 16 | 0;
            HEAP32[i64toi32_i32$1 >> 2] = $6635;
            HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
            i64toi32_i32$2 = $3 + 8 | 0;
            i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
            $6640 = i64toi32_i32$0;
            i64toi32_i32$0 = $2 + 8 | 0;
            HEAP32[i64toi32_i32$0 >> 2] = $6640;
            HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
            break label$266;
           }
           ImGui__MemFree_28void__29(0 | 0);
           ImGui__MemFree_28void__29($26 | 0);
          }
          $26 = Math_imul($17, 28);
          $29 = $61 >>> 8 | 0;
          $70 = $61 << 8 | 0;
          ImGui__MemFree_28void__29($3 | 0);
          $8 = HEAP32[$28 >> 2] | 0;
          $19 = HEAP32[$30 >> 2] | 0;
          $2 = HEAP32[$64 >> 2] | 0;
          $3 = HEAP32[$65 >> 2] | 0;
          label$464 : {
           if ($13 >>> 0 < 2 >>> 0) {
            break label$464
           }
           i64toi32_i32$0 = $1;
           i64toi32_i32$1 = 0;
           HEAP32[($1 + 80 | 0) >> 2] = 0;
           HEAP32[($1 + 84 | 0) >> 2] = i64toi32_i32$1;
           if (($8 | 0) < (1 | 0)) {
            break label$464
           }
           $14 = ($39 + $3 | 0) + Math_imul($2, $9) | 0;
           $20 = $19 - $13 | 0;
           $16 = $19 + $58 | 0;
           $23 = $16 & -2 | 0;
           $22 = $16 & 1 | 0;
           $7 = 0;
           label$465 : while (1) {
            memset($1 + 80 | 0 | 0, 0 | 0, $13 | 0) | 0;
            label$466 : {
             label$467 : {
              label$468 : {
               switch ($13 + -2 | 0 | 0) {
               case 2:
                $3 = 0;
                $2 = 0;
                if (($20 | 0) < (0 | 0)) {
                 break label$466
                }
                $2 = 0;
                $18 = 0;
                $3 = 0;
                label$473 : {
                 if (($19 | 0) == ($13 | 0)) {
                  break label$473
                 }
                 label$474 : while (1) {
                  $12 = HEAPU8[($1 + 80 | 0 | ($18 & 6 | 0) | 0) >> 0] | 0;
                  $15 = $14 + $18 | 0;
                  $21 = HEAPU8[$15 >> 0] | 0;
                  HEAP8[($1 + 80 | 0 | (($18 + 4 | 0) & 6 | 0) | 0) >> 0] = $21;
                  $2 = ($21 - $12 | 0) + $2 | 0;
                  HEAP8[$15 >> 0] = $2 >>> 2 | 0;
                  $12 = $18 | 1 | 0;
                  $15 = HEAPU8[($1 + 80 | 0 | ($12 & 7 | 0) | 0) >> 0] | 0;
                  $12 = $14 + $12 | 0;
                  $21 = HEAPU8[$12 >> 0] | 0;
                  HEAP8[($1 + 80 | 0 | (($18 + 5 | 0) & 7 | 0) | 0) >> 0] = $21;
                  $2 = ($21 - $15 | 0) + $2 | 0;
                  HEAP8[$12 >> 0] = $2 >>> 2 | 0;
                  $18 = $18 + 2 | 0;
                  $3 = $3 + 2 | 0;
                  if (($3 | 0) != ($23 | 0)) {
                   continue label$474
                  }
                  break label$474;
                 };
                }
                $3 = $16;
                if (!$22) {
                 break label$466
                }
                $3 = HEAPU8[($1 + 80 | 0 | ($18 & 7 | 0) | 0) >> 0] | 0;
                $6765 = $1 + 80 | 0 | (($18 + 4 | 0) & 7 | 0) | 0;
                $18 = $14 + $18 | 0;
                $12 = HEAPU8[$18 >> 0] | 0;
                HEAP8[$6765 >> 0] = $12;
                $2 = ($12 - $3 | 0) + $2 | 0;
                HEAP8[$18 >> 0] = $2 >>> 2 | 0;
                break label$467;
               case 0:
                $3 = 0;
                $2 = 0;
                if (($20 | 0) < (0 | 0)) {
                 break label$466
                }
                $2 = 0;
                $18 = 0;
                $3 = 0;
                label$475 : {
                 if (($19 | 0) == ($13 | 0)) {
                  break label$475
                 }
                 label$476 : while (1) {
                  $12 = HEAPU8[($1 + 80 | 0 | ($18 & 6 | 0) | 0) >> 0] | 0;
                  $15 = $18 + 2 | 0;
                  $21 = $14 + $18 | 0;
                  $11 = HEAPU8[$21 >> 0] | 0;
                  HEAP8[($1 + 80 | 0 | ($15 & 6 | 0) | 0) >> 0] = $11;
                  $2 = ($11 - $12 | 0) + $2 | 0;
                  HEAP8[$21 >> 0] = $2 >>> 1 | 0;
                  $12 = $18 | 1 | 0;
                  $21 = HEAPU8[($1 + 80 | 0 | ($12 & 7 | 0) | 0) >> 0] | 0;
                  $6825 = $1 + 80 | 0 | (($18 + 3 | 0) & 7 | 0) | 0;
                  $18 = $14 + $12 | 0;
                  $12 = HEAPU8[$18 >> 0] | 0;
                  HEAP8[$6825 >> 0] = $12;
                  $2 = ($12 - $21 | 0) + $2 | 0;
                  HEAP8[$18 >> 0] = $2 >>> 1 | 0;
                  $18 = $15;
                  $3 = $3 + 2 | 0;
                  if (($3 | 0) != ($23 | 0)) {
                   continue label$476
                  }
                  break label$476;
                 };
                }
                $3 = $16;
                if (!$22) {
                 break label$466
                }
                $3 = HEAPU8[($1 + 80 | 0 | ($18 & 7 | 0) | 0) >> 0] | 0;
                $6860 = $1 + 80 | 0 | (($18 + 2 | 0) & 7 | 0) | 0;
                $18 = $14 + $18 | 0;
                $12 = HEAPU8[$18 >> 0] | 0;
                HEAP8[$6860 >> 0] = $12;
                $2 = ($12 - $3 | 0) + $2 | 0;
                HEAP8[$18 >> 0] = $2 >>> 1 | 0;
                break label$467;
               case 1:
                $2 = 0;
                $18 = 0;
                $3 = 0;
                if (($20 | 0) < (0 | 0)) {
                 break label$466
                }
                label$477 : while (1) {
                 $3 = HEAPU8[($1 + 80 | 0 | ($18 & 7 | 0) | 0) >> 0] | 0;
                 $12 = $14 + $18 | 0;
                 $15 = HEAPU8[$12 >> 0] | 0;
                 HEAP8[($1 + 80 | 0 | (($18 + 3 | 0) & 7 | 0) | 0) >> 0] = $15;
                 $2 = ($15 - $3 | 0) + $2 | 0;
                 HEAP8[$12 >> 0] = ($2 >>> 0) / (3 >>> 0) | 0;
                 $18 = $18 + 1 | 0;
                 if (($18 | 0) != ($16 | 0)) {
                  continue label$477
                 }
                 break label$467;
                };
               case 3:
                $2 = 0;
                $18 = 0;
                $3 = 0;
                if (($20 | 0) < (0 | 0)) {
                 break label$466
                }
                label$478 : while (1) {
                 $3 = HEAPU8[($1 + 80 | 0 | ($18 & 7 | 0) | 0) >> 0] | 0;
                 $12 = $14 + $18 | 0;
                 $15 = HEAPU8[$12 >> 0] | 0;
                 HEAP8[($1 + 80 | 0 | (($18 + 5 | 0) & 7 | 0) | 0) >> 0] = $15;
                 $2 = ($15 - $3 | 0) + $2 | 0;
                 HEAP8[$12 >> 0] = ($2 >>> 0) / (5 >>> 0) | 0;
                 $18 = $18 + 1 | 0;
                 if (($18 | 0) != ($16 | 0)) {
                  continue label$478
                 }
                 break label$467;
                };
               default:
                break label$468;
               };
              }
              $2 = 0;
              $18 = 0;
              $3 = 0;
              if (($20 | 0) < (0 | 0)) {
               break label$466
              }
              label$479 : while (1) {
               $3 = HEAPU8[($1 + 80 | 0 | ($18 & 7 | 0) | 0) >> 0] | 0;
               $12 = $14 + $18 | 0;
               $15 = HEAPU8[$12 >> 0] | 0;
               HEAP8[($1 + 80 | 0 | (($18 + $13 | 0) & 7 | 0) | 0) >> 0] = $15;
               $2 = ($15 - $3 | 0) + $2 | 0;
               HEAP8[$12 >> 0] = ($2 >>> 0) / ($13 >>> 0) | 0;
               $18 = $18 + 1 | 0;
               if (($18 | 0) != ($16 | 0)) {
                continue label$479
               }
               break label$479;
              };
             }
             $3 = $16;
            }
            label$480 : {
             if (($19 | 0) <= ($3 | 0)) {
              break label$480
             }
             $18 = $3 + 1 | 0;
             label$481 : {
              if (!(($19 - $3 | 0) & 1 | 0)) {
               break label$481
              }
              $2 = $2 - (HEAPU8[($1 + 80 | 0 | ($3 & 7 | 0) | 0) >> 0] | 0) | 0;
              HEAP8[($14 + $3 | 0) >> 0] = ($2 >>> 0) / ($13 >>> 0) | 0;
              $3 = $18;
             }
             if (($19 | 0) == ($18 | 0)) {
              break label$480
             }
             label$482 : while (1) {
              $2 = $2 - (HEAPU8[($1 + 80 | 0 | ($3 & 7 | 0) | 0) >> 0] | 0) | 0;
              HEAP8[($14 + $3 | 0) >> 0] = ($2 >>> 0) / ($13 >>> 0) | 0;
              $18 = $3 + 1 | 0;
              $2 = $2 - (HEAPU8[($1 + 80 | 0 | ($18 & 7 | 0) | 0) >> 0] | 0) | 0;
              HEAP8[($14 + $18 | 0) >> 0] = ($2 >>> 0) / ($13 >>> 0) | 0;
              $3 = $3 + 2 | 0;
              if (($3 | 0) != ($19 | 0)) {
               continue label$482
              }
              break label$482;
             };
            }
            $14 = $14 + $9 | 0;
            $7 = $7 + 1 | 0;
            if (($7 | 0) != ($8 | 0)) {
             continue label$465
            }
            break label$465;
           };
           $8 = HEAP32[$28 >> 2] | 0;
           $19 = HEAP32[$30 >> 2] | 0;
           $2 = HEAP32[$64 >> 2] | 0;
           $3 = HEAP32[$65 >> 2] | 0;
          }
          $11 = $60 + $26 | 0;
          $7 = $70 | $29 | 0;
          label$483 : {
           if ($10 >>> 0 < 2 >>> 0) {
            break label$483
           }
           i64toi32_i32$0 = $1;
           i64toi32_i32$1 = 0;
           HEAP32[($1 + 80 | 0) >> 2] = 0;
           HEAP32[($1 + 84 | 0) >> 2] = i64toi32_i32$1;
           if (($19 | 0) < (1 | 0)) {
            break label$483
           }
           $14 = ($39 + $3 | 0) + Math_imul($2, $9) | 0;
           $16 = $8 + $57 | 0;
           $21 = $8 - $10 | 0;
           $23 = 0;
           label$484 : while (1) {
            memset($1 + 80 | 0 | 0, 0 | 0, $10 | 0) | 0;
            label$485 : {
             label$486 : {
              label$487 : {
               switch ($10 + -2 | 0 | 0) {
               case 0:
                $2 = 0;
                $18 = 0;
                $3 = 0;
                if (($21 | 0) < (0 | 0)) {
                 break label$485
                }
                label$492 : while (1) {
                 $3 = HEAPU8[($1 + 80 | 0 | ($18 & 7 | 0) | 0) >> 0] | 0;
                 $12 = $14 + Math_imul($18, $9) | 0;
                 $15 = HEAPU8[$12 >> 0] | 0;
                 HEAP8[($1 + 80 | 0 | (($18 + 2 | 0) & 7 | 0) | 0) >> 0] = $15;
                 $2 = ($15 - $3 | 0) + $2 | 0;
                 HEAP8[$12 >> 0] = $2 >>> 1 | 0;
                 $18 = $18 + 1 | 0;
                 if (($18 | 0) != ($16 | 0)) {
                  continue label$492
                 }
                 break label$486;
                };
               case 1:
                $2 = 0;
                $18 = 0;
                $3 = 0;
                if (($21 | 0) < (0 | 0)) {
                 break label$485
                }
                label$493 : while (1) {
                 $3 = HEAPU8[($1 + 80 | 0 | ($18 & 7 | 0) | 0) >> 0] | 0;
                 $12 = $14 + Math_imul($18, $9) | 0;
                 $15 = HEAPU8[$12 >> 0] | 0;
                 HEAP8[($1 + 80 | 0 | (($18 + 3 | 0) & 7 | 0) | 0) >> 0] = $15;
                 $2 = ($15 - $3 | 0) + $2 | 0;
                 HEAP8[$12 >> 0] = ($2 >>> 0) / (3 >>> 0) | 0;
                 $18 = $18 + 1 | 0;
                 if (($18 | 0) != ($16 | 0)) {
                  continue label$493
                 }
                 break label$486;
                };
               case 2:
                $2 = 0;
                $18 = 0;
                $3 = 0;
                if (($21 | 0) < (0 | 0)) {
                 break label$485
                }
                label$494 : while (1) {
                 $3 = HEAPU8[($1 + 80 | 0 | ($18 & 7 | 0) | 0) >> 0] | 0;
                 $12 = $14 + Math_imul($18, $9) | 0;
                 $15 = HEAPU8[$12 >> 0] | 0;
                 HEAP8[($1 + 80 | 0 | (($18 + 4 | 0) & 7 | 0) | 0) >> 0] = $15;
                 $2 = ($15 - $3 | 0) + $2 | 0;
                 HEAP8[$12 >> 0] = $2 >>> 2 | 0;
                 $18 = $18 + 1 | 0;
                 if (($18 | 0) != ($16 | 0)) {
                  continue label$494
                 }
                 break label$486;
                };
               case 3:
                $2 = 0;
                $18 = 0;
                $3 = 0;
                if (($21 | 0) < (0 | 0)) {
                 break label$485
                }
                label$495 : while (1) {
                 $3 = HEAPU8[($1 + 80 | 0 | ($18 & 7 | 0) | 0) >> 0] | 0;
                 $12 = $14 + Math_imul($18, $9) | 0;
                 $15 = HEAPU8[$12 >> 0] | 0;
                 HEAP8[($1 + 80 | 0 | (($18 + 5 | 0) & 7 | 0) | 0) >> 0] = $15;
                 $2 = ($15 - $3 | 0) + $2 | 0;
                 HEAP8[$12 >> 0] = ($2 >>> 0) / (5 >>> 0) | 0;
                 $18 = $18 + 1 | 0;
                 if (($18 | 0) != ($16 | 0)) {
                  continue label$495
                 }
                 break label$486;
                };
               default:
                break label$487;
               };
              }
              $2 = 0;
              $18 = 0;
              $3 = 0;
              if (($21 | 0) < (0 | 0)) {
               break label$485
              }
              label$496 : while (1) {
               $3 = HEAPU8[($1 + 80 | 0 | ($18 & 7 | 0) | 0) >> 0] | 0;
               $12 = $14 + Math_imul($18, $9) | 0;
               $15 = HEAPU8[$12 >> 0] | 0;
               HEAP8[($1 + 80 | 0 | (($18 + $10 | 0) & 7 | 0) | 0) >> 0] = $15;
               $2 = ($15 - $3 | 0) + $2 | 0;
               HEAP8[$12 >> 0] = ($2 >>> 0) / ($10 >>> 0) | 0;
               $18 = $18 + 1 | 0;
               if (($18 | 0) != ($16 | 0)) {
                continue label$496
               }
               break label$496;
              };
             }
             $3 = $16;
            }
            label$497 : {
             if (($8 | 0) <= ($3 | 0)) {
              break label$497
             }
             $18 = $3 + 1 | 0;
             label$498 : {
              if (!(($8 - $3 | 0) & 1 | 0)) {
               break label$498
              }
              $2 = $2 - (HEAPU8[($1 + 80 | 0 | ($3 & 7 | 0) | 0) >> 0] | 0) | 0;
              HEAP8[($14 + Math_imul($3, $9) | 0) >> 0] = ($2 >>> 0) / ($10 >>> 0) | 0;
              $3 = $18;
             }
             if (($8 | 0) == ($18 | 0)) {
              break label$497
             }
             label$499 : while (1) {
              $2 = $2 - (HEAPU8[($1 + 80 | 0 | ($3 & 7 | 0) | 0) >> 0] | 0) | 0;
              HEAP8[($14 + Math_imul($3, $9) | 0) >> 0] = ($2 >>> 0) / ($10 >>> 0) | 0;
              $18 = $3 + 1 | 0;
              $2 = $2 - (HEAPU8[($1 + 80 | 0 | ($18 & 7 | 0) | 0) >> 0] | 0) | 0;
              HEAP8[($14 + Math_imul($18, $9) | 0) >> 0] = ($2 >>> 0) / ($10 >>> 0) | 0;
              $3 = $3 + 2 | 0;
              if (($3 | 0) != ($8 | 0)) {
               continue label$499
              }
              break label$499;
             };
            }
            $14 = $14 + 1 | 0;
            $23 = $23 + 1 | 0;
            if (($23 | 0) != ($19 | 0)) {
             continue label$484
            }
            break label$484;
           };
           $8 = HEAP32[$28 >> 2] | 0;
           $19 = HEAP32[$30 >> 2] | 0;
           $2 = HEAP32[$64 >> 2] | 0;
           $3 = HEAP32[$65 >> 2] | 0;
          }
          HEAP16[$11 >> 1] = $3;
          HEAP16[($11 + 6 | 0) >> 1] = $2 + $8 | 0;
          HEAP16[($11 + 4 | 0) >> 1] = $3 + $19 | 0;
          HEAP16[($11 + 2 | 0) >> 1] = $2;
          HEAPF32[($11 + 16 | 0) >> 2] = Math_fround($44 * Math_fround($7 << 16 >> 16 | 0));
          $3 = HEAP32[($1 + 76 | 0) >> 2] | 0;
          HEAPF32[($11 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround($3 | 0) * $53) + $46);
          $2 = HEAP32[($1 + 72 | 0) >> 2] | 0;
          HEAPF32[($11 + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround($3 + $19 | 0 | 0) * $53) + $46);
          HEAPF32[($11 + 12 | 0) >> 2] = Math_fround(Math_fround(Math_fround($2 | 0) * $52) + $45);
          HEAPF32[($11 + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround($2 + $8 | 0 | 0) * $52) + $45);
          $31 = $27 ? $31 : $17;
         }
         $17 = $17 + 1 | 0;
         if (($17 | 0) < (HEAP32[$32 >> 2] | 0 | 0)) {
          continue label$265
         }
         break label$265;
        };
       }
       $15 = $5 + 152 | 0;
       label$500 : {
        $47 = Math_fround(HEAPF32[(($48 + Math_imul($43, 120) | 0) + 68 | 0) >> 2]);
        if ($47 == Math_fround(1.0)) {
         break label$500
        }
        $12 = $5 + 172 | 0;
        $2 = 0;
        label$501 : while (1) {
         label$502 : {
          label$503 : {
           $36 = Math_fround($47 * Math_fround($2 >>> 0));
           if (!($36 < Math_fround(4294967296.0) & $36 >= Math_fround(0.0) | 0)) {
            break label$503
           }
           $3 = ~~$36 >>> 0;
           break label$502;
          }
          $3 = 0;
         }
         HEAP8[(($1 + 80 | 0) + $2 | 0) >> 0] = $3 >>> 0 < 255 >>> 0 ? $3 : 255;
         label$504 : {
          label$505 : {
           $14 = $2 | 1 | 0;
           $36 = Math_fround($47 * Math_fround($14 >>> 0));
           if (!($36 < Math_fround(4294967296.0) & $36 >= Math_fround(0.0) | 0)) {
            break label$505
           }
           $3 = ~~$36 >>> 0;
           break label$504;
          }
          $3 = 0;
         }
         HEAP8[(($1 + 80 | 0) + $14 | 0) >> 0] = $3 >>> 0 < 255 >>> 0 ? $3 : 255;
         $2 = $2 + 2 | 0;
         if (($2 | 0) != (256 | 0)) {
          continue label$501
         }
         break label$501;
        };
        $2 = HEAP32[$12 >> 2] | 0;
        if (($2 | 0) < (1 | 0)) {
         break label$500
        }
        $19 = HEAP32[$15 >> 2] | 0;
        $8 = 0;
        label$506 : while (1) {
         label$507 : {
          if (!(HEAP32[($19 + 20 | 0) >> 2] | 0)) {
           break label$507
          }
          $10 = HEAP32[($19 + 8 | 0) >> 2] | 0;
          if (($10 | 0) < (1 | 0)) {
           break label$507
          }
          $18 = HEAP32[($19 + 4 | 0) >> 2] | 0;
          if (($18 | 0) < (1 | 0)) {
           break label$507
          }
          $2 = HEAP32[($0 + 36 | 0) >> 2] | 0;
          $16 = $2 - $18 | 0;
          $2 = ((HEAP32[($0 + 28 | 0) >> 2] | 0) + (HEAP32[($19 + 12 | 0) >> 2] | 0) | 0) + Math_imul($2, HEAP32[($19 + 16 | 0) >> 2] | 0) | 0;
          $13 = $18 & 3 | 0;
          label$508 : while (1) {
           $14 = 0;
           $3 = $18;
           label$509 : {
            if (!$13) {
             break label$509
            }
            label$510 : while (1) {
             HEAP8[$2 >> 0] = HEAPU8[(($1 + 80 | 0) + (HEAPU8[$2 >> 0] | 0) | 0) >> 0] | 0;
             $2 = $2 + 1 | 0;
             $3 = $3 + -1 | 0;
             $14 = $14 + 1 | 0;
             if (($14 | 0) != ($13 | 0)) {
              continue label$510
             }
             break label$510;
            };
           }
           label$511 : {
            if ($18 >>> 0 < 4 >>> 0) {
             break label$511
            }
            label$512 : while (1) {
             HEAP8[$2 >> 0] = HEAPU8[(($1 + 80 | 0) + (HEAPU8[$2 >> 0] | 0) | 0) >> 0] | 0;
             HEAP8[($2 + 1 | 0) >> 0] = HEAPU8[(($1 + 80 | 0) + (HEAPU8[($2 + 1 | 0) >> 0] | 0) | 0) >> 0] | 0;
             HEAP8[($2 + 2 | 0) >> 0] = HEAPU8[(($1 + 80 | 0) + (HEAPU8[($2 + 2 | 0) >> 0] | 0) | 0) >> 0] | 0;
             HEAP8[($2 + 3 | 0) >> 0] = HEAPU8[(($1 + 80 | 0) + (HEAPU8[($2 + 3 | 0) >> 0] | 0) | 0) >> 0] | 0;
             $2 = $2 + 4 | 0;
             $14 = ($3 | 0) > (4 | 0);
             $3 = $3 + -4 | 0;
             if ($14) {
              continue label$512
             }
             break label$512;
            };
           }
           $2 = $2 + $16 | 0;
           $3 = ($10 | 0) > (1 | 0);
           $10 = $10 + -1 | 0;
           if ($3) {
            continue label$508
           }
           break label$508;
          };
          $2 = HEAP32[$12 >> 2] | 0;
         }
         $19 = $19 + 24 | 0;
         $8 = $8 + 1 | 0;
         if (($8 | 0) < ($2 | 0)) {
          continue label$506
         }
         break label$506;
        };
       }
       HEAP32[$15 >> 2] = 0;
      }
      $43 = $43 + 1 | 0;
      if (($43 | 0) != ($4 | 0)) {
       continue label$258
      }
      break label$258;
     };
    }
    ImGui__MemFree_28void__29($38 | 0);
    ImGui__MemFree_28void__29($37 | 0);
    label$513 : {
     if (!$34) {
      break label$513
     }
     ImGui__MemFree_28void__29($34 | 0);
    }
    label$514 : {
     label$515 : {
      label$516 : {
       label$517 : {
        if (($4 | 0) < (1 | 0)) {
         break label$517
        }
        $20 = 0;
        label$518 : while (1) {
         label$519 : {
          $14 = $6 + Math_imul($20, 200) | 0;
          $9 = HEAP32[($14 + 172 | 0) >> 2] | 0;
          if (!$9) {
           break label$519
          }
          label$520 : {
           label$521 : {
            $13 = (HEAP32[($14 + 4 | 0) >> 2] | 0) + (HEAP32[($14 + 28 | 0) >> 2] | 0) | 0;
            $2 = HEAPU8[($13 + 6 | 0) >> 0] | 0 | ((HEAPU8[($13 + 7 | 0) >> 0] | 0) << 8 | 0) | 0;
            $3 = ($2 << 8 | 0 | ($2 >>> 8 | 0) | 0) << 16 >> 16;
            $2 = (HEAP32[($0 + 92 | 0) >> 2] | 0) + Math_imul($20, 120) | 0;
            $13 = HEAPU8[($13 + 4 | 0) >> 0] | 0 | ((HEAPU8[($13 + 5 | 0) >> 0] | 0) << 8 | 0) | 0;
            $13 = ($13 << 8 | 0 | ($13 >>> 8 | 0) | 0) << 16 >> 16;
            $36 = Math_fround(Math_fround(HEAPF32[($2 + 16 | 0) >> 2]) / Math_fround($13 - $3 | 0 | 0));
            $47 = Math_fround(Math_fround(Math_fround($3 | 0) * $36) + (($3 | 0) < (1 | 0) ? Math_fround(-1.0) : Math_fround(1.0)));
            if (!(Math_fround(Math_abs($47)) < Math_fround(2147483648.0))) {
             break label$521
            }
            $10 = ~~$47;
            break label$520;
           }
           $10 = -2147483648;
          }
          label$522 : {
           label$523 : {
            $36 = Math_fround(Math_fround(Math_fround($13 | 0) * $36) + (($13 | 0) < (1 | 0) ? Math_fround(-1.0) : Math_fround(1.0)));
            if (!(Math_fround(Math_abs($36)) < Math_fround(2147483648.0))) {
             break label$523
            }
            $13 = ~~$36;
            break label$522;
           }
           $13 = -2147483648;
          }
          $12 = $14 + 172 | 0;
          $3 = HEAP32[($2 + 116 | 0) >> 2] | 0;
          label$524 : {
           label$525 : {
            if (!(HEAPU8[($2 + 60 | 0) >> 0] | 0)) {
             break label$525
            }
            $13 = (HEAPU16[($3 + 56 | 0) >> 1] | 0) + 1 | 0;
            $36 = Math_fround(HEAPF32[($3 + 80 | 0) >> 2]);
            break label$524;
           }
           i64toi32_i32$0 = $3;
           i64toi32_i32$1 = 0;
           HEAP32[($3 + 12 | 0) >> 2] = 0;
           HEAP32[($3 + 16 | 0) >> 2] = i64toi32_i32$1;
           label$526 : {
            $9 = HEAP32[($3 + 40 | 0) >> 2] | 0;
            if (!$9) {
             break label$526
            }
            i64toi32_i32$0 = $3;
            i64toi32_i32$1 = 0;
            HEAP32[($3 + 32 | 0) >> 2] = 0;
            HEAP32[($3 + 36 | 0) >> 2] = i64toi32_i32$1;
            ImGui__MemFree_28void__29($9 | 0);
            HEAP32[($3 + 40 | 0) >> 2] = 0;
           }
           label$527 : {
            $9 = HEAP32[($3 + 8 | 0) >> 2] | 0;
            if (!$9) {
             break label$527
            }
            i64toi32_i32$0 = $3;
            i64toi32_i32$1 = 0;
            HEAP32[$3 >> 2] = 0;
            HEAP32[($3 + 4 | 0) >> 2] = i64toi32_i32$1;
            ImGui__MemFree_28void__29($9 | 0);
            HEAP32[($3 + 8 | 0) >> 2] = 0;
           }
           $47 = Math_fround($10 | 0);
           $36 = Math_fround($13 | 0);
           $9 = $2 + 16 | 0;
           label$528 : {
            $13 = HEAP32[($3 + 28 | 0) >> 2] | 0;
            if (!$13) {
             break label$528
            }
            i64toi32_i32$0 = $3;
            i64toi32_i32$1 = 0;
            HEAP32[($3 + 20 | 0) >> 2] = 0;
            HEAP32[($3 + 24 | 0) >> 2] = i64toi32_i32$1;
            ImGui__MemFree_28void__29($13 | 0);
            HEAP32[($3 + 28 | 0) >> 2] = 0;
           }
           HEAP32[($3 + 88 | 0) >> 2] = 0;
           $13 = 1;
           HEAP8[($3 + 72 | 0) >> 0] = 1;
           HEAP32[($3 + 44 | 0) >> 2] = 0;
           $68 = Math_fround(HEAPF32[$9 >> 2]);
           HEAP32[($3 + 52 | 0) >> 2] = $2;
           HEAPF32[($3 + 16 | 0) >> 2] = $68;
           HEAPF32[($3 + 84 | 0) >> 2] = $47;
           HEAPF32[($3 + 80 | 0) >> 2] = $36;
           HEAP32[($3 + 48 | 0) >> 2] = $0;
           $9 = HEAP32[$12 >> 2] | 0;
          }
          HEAP16[($3 + 56 | 0) >> 1] = $13;
          label$529 : {
           label$530 : {
            $36 = Math_fround($36 + Math_fround(.5));
            if (!(Math_fround(Math_abs($36)) < Math_fround(2147483648.0))) {
             break label$530
            }
            $13 = ~~$36;
            break label$529;
           }
           $13 = -2147483648;
          }
          if (($9 | 0) < (1 | 0)) {
           break label$519
          }
          $86 = Math_fround(Math_fround(HEAPF32[($2 + 44 | 0) >> 2]) + Math_fround($13 | 0));
          $84 = Math_fround(HEAPF32[($2 + 40 | 0) >> 2]);
          $15 = $2 + 32 | 0;
          $23 = $2 + 28 | 0;
          $21 = $2 + 56 | 0;
          $11 = $2 + 52 | 0;
          $7 = $14 + 156 | 0;
          $17 = $14 + 196 | 0;
          $14 = 0;
          label$531 : while (1) {
           $79 = Math_fround(HEAP32[($0 + 40 | 0) >> 2] | 0 | 0);
           $2 = (HEAP32[$7 >> 2] | 0) + Math_imul($14, 28) | 0;
           $9 = HEAPU16[($2 + 6 | 0) >> 1] | 0;
           $82 = Math_fround(HEAP32[($0 + 36 | 0) >> 2] | 0 | 0);
           $10 = HEAPU16[($2 + 4 | 0) >> 1] | 0;
           $18 = HEAPU16[($2 + 2 | 0) >> 1] | 0;
           $16 = HEAPU16[$2 >> 1] | 0;
           $81 = Math_fround(HEAPF32[($2 + 24 | 0) >> 2]);
           $47 = Math_fround($84 + Math_fround(Math_fround(HEAPF32[($2 + 20 | 0) >> 2]) + Math_fround(0.0)));
           $78 = Math_fround(HEAPF32[($2 + 12 | 0) >> 2]);
           $68 = Math_fround($84 + Math_fround(Math_fround(HEAPF32[($2 + 8 | 0) >> 2]) + Math_fround(0.0)));
           $19 = HEAP32[((HEAP32[$17 >> 2] | 0) + ($14 << 2 | 0) | 0) >> 2] | 0;
           $13 = HEAPU8[$23 >> 0] | 0;
           label$532 : {
            $69 = Math_fround(HEAPF32[$11 >> 2]);
            $83 = Math_fround(HEAPF32[$21 >> 2]);
            $36 = Math_fround(HEAPF32[($2 + 16 | 0) >> 2]);
            $69 = $69 > $36 ? $69 : $83 < $36 ? $83 : $36;
            if ($69 == $36) {
             break label$532
            }
            $2 = $13 & 255 | 0;
            label$533 : {
             label$534 : {
              $36 = Math_fround(Math_fround($69 - $36) * Math_fround(.5));
              if (!(Math_fround(Math_abs($36)) < Math_fround(2147483648.0))) {
               break label$534
              }
              $8 = ~~$36;
              break label$533;
             }
             $8 = -2147483648;
            }
            $36 = $2 ? Math_fround($8 | 0) : $36;
            $47 = Math_fround($47 + $36);
            $68 = Math_fround($68 + $36);
           }
           $36 = Math_fround(Math_fround(1.0) / $79);
           $83 = Math_fround($9 >>> 0);
           $79 = Math_fround(Math_fround(1.0) / $82);
           $55 = Math_fround($10 >>> 0);
           $59 = Math_fround($18 >>> 0);
           $76 = Math_fround($16 >>> 0);
           $85 = Math_fround($81 + Math_fround(0.0));
           $89 = Math_fround($78 + Math_fround(0.0));
           $2 = $13 & 255 | 0;
           label$535 : {
            label$536 : {
             $82 = Math_fround($69 + Math_fround(.5));
             if (!(Math_fround(Math_abs($82)) < Math_fround(2147483648.0))) {
              break label$536
             }
             $13 = ~~$82;
             break label$535;
            }
            $13 = -2147483648;
           }
           $82 = Math_fround($36 * $83);
           $81 = Math_fround($79 * $55);
           $36 = Math_fround($36 * $59);
           $79 = Math_fround($79 * $76);
           $78 = Math_fround($86 + $85);
           $83 = Math_fround($86 + $89);
           $69 = Math_fround(($2 ? Math_fround($13 | 0) : $69) + Math_fround(HEAPF32[$15 >> 2]));
           $2 = HEAP32[($3 + 32 | 0) >> 2] | 0;
           $13 = $2 + 1 | 0;
           label$537 : {
            $9 = HEAP32[($3 + 36 | 0) >> 2] | 0;
            if (($9 | 0) > ($2 | 0)) {
             break label$537
            }
            label$538 : {
             label$539 : {
              if ($9) {
               break label$539
              }
              $10 = 8;
              break label$538;
             }
             $10 = (($9 | 0) / (2 | 0) | 0) + $9 | 0;
            }
            $10 = ($10 | 0) > ($13 | 0) ? $10 : $13;
            if (($9 | 0) >= ($10 | 0)) {
             break label$537
            }
            $9 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($10, 40) | 0) | 0;
            label$540 : {
             $18 = HEAP32[($3 + 40 | 0) >> 2] | 0;
             if (!$18) {
              break label$540
             }
             __memcpy($9 | 0, $18 | 0, Math_imul(HEAP32[($3 + 32 | 0) >> 2] | 0, 40) | 0) | 0;
             ImGui__MemFree_28void__29(HEAP32[($3 + 40 | 0) >> 2] | 0 | 0);
            }
            HEAP32[($3 + 36 | 0) >> 2] = $10;
            HEAP32[($3 + 40 | 0) >> 2] = $9;
           }
           HEAP32[($3 + 32 | 0) >> 2] = $13;
           $2 = (HEAP32[($3 + 40 | 0) >> 2] | 0) + Math_imul($2, 40) | 0;
           HEAPF32[($2 + 36 | 0) >> 2] = $82;
           HEAPF32[($2 + 32 | 0) >> 2] = $81;
           HEAPF32[($2 + 28 | 0) >> 2] = $36;
           HEAPF32[($2 + 24 | 0) >> 2] = $79;
           HEAPF32[($2 + 20 | 0) >> 2] = $78;
           HEAPF32[($2 + 16 | 0) >> 2] = $47;
           HEAPF32[($2 + 12 | 0) >> 2] = $83;
           HEAPF32[($2 + 8 | 0) >> 2] = $68;
           HEAPF32[($2 + 4 | 0) >> 2] = $69;
           HEAP32[$2 >> 2] = ($83 != $78 ? ($68 != $47) << 1 | 0 : 0) | (($19 << 2 | 0) & 262140 | 0) | 0;
           $2 = HEAP32[($3 + 48 | 0) >> 2] | 0;
           $13 = HEAP32[($2 + 12 | 0) >> 2] | 0;
           HEAP8[($3 + 72 | 0) >> 0] = 1;
           label$541 : {
            label$542 : {
             $47 = Math_fround(Math_fround($13 | 0) + Math_fround(.9900000095367432));
             $68 = Math_fround(Math_fround(Math_fround($81 - $79) * Math_fround(HEAP32[($2 + 36 | 0) >> 2] | 0 | 0)) + $47);
             if (!(Math_fround(Math_abs($68)) < Math_fround(2147483648.0))) {
              break label$542
             }
             $13 = ~~$68;
             break label$541;
            }
            $13 = -2147483648;
           }
           label$543 : {
            label$544 : {
             $36 = Math_fround(Math_fround(Math_fround($82 - $36) * Math_fround(HEAP32[($2 + 40 | 0) >> 2] | 0 | 0)) + $47);
             if (!(Math_fround(Math_abs($36)) < Math_fround(2147483648.0))) {
              break label$544
             }
             $2 = ~~$36;
             break label$543;
            }
            $2 = -2147483648;
           }
           HEAP32[($3 + 88 | 0) >> 2] = Math_imul($2, $13) + (HEAP32[($3 + 88 | 0) >> 2] | 0) | 0;
           $14 = $14 + 1 | 0;
           if (($14 | 0) < (HEAP32[$12 >> 2] | 0 | 0)) {
            continue label$531
           }
           break label$531;
          };
         }
         $20 = $20 + 1 | 0;
         if (($20 | 0) == ($4 | 0)) {
          break label$516
         }
         continue label$518;
        };
       }
       if (!$6) {
        break label$514
       }
       break label$515;
      }
      $2 = 0;
      if (($4 | 0) <= (0 | 0)) {
       break label$515
      }
      label$545 : while (1) {
       label$546 : {
        $3 = $6 + Math_imul($2, 200) | 0;
        $14 = HEAP32[($3 + 196 | 0) >> 2] | 0;
        if (!$14) {
         break label$546
        }
        ImGui__MemFree_28void__29($14 | 0);
       }
       label$547 : {
        $3 = HEAP32[($3 + 184 | 0) >> 2] | 0;
        if (!$3) {
         break label$547
        }
        ImGui__MemFree_28void__29($3 | 0);
       }
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($4 | 0)) {
        continue label$545
       }
       break label$545;
      };
     }
     ImGui__MemFree_28void__29($6 | 0);
    }
    ImFontAtlasBuildFinish_28ImFontAtlas__29($0 | 0);
    $2 = 1;
    if (!$35) {
     break label$5
    }
   }
   ImGui__MemFree_28void__29($33 | 0);
  }
  __stack_pointer = $1 + 608 | 0;
  return $2 | 0;
 }
 
 function ImFontAtlas__GetTexDataAsRGBA32_28unsigned_20char___2c_20int__2c_20int__2c_20int__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $7 = 0, $5 = 0, $9 = 0, $6 = 0, $8 = Math_fround(0), $13 = 0, $11 = 0, $14 = 0, $10 = Math_fround(0), $12 = 0;
  $5 = __stack_pointer - 128 | 0;
  __stack_pointer = $5;
  label$1 : {
   $6 = HEAP32[($0 + 32 | 0) >> 2] | 0;
   if ($6) {
    break label$1
   }
   label$2 : {
    $7 = HEAP32[($0 + 28 | 0) >> 2] | 0;
    if ($7) {
     break label$2
    }
    label$3 : {
     if (HEAP32[($0 + 84 | 0) >> 2] | 0) {
      break label$3
     }
     ImFontConfig__ImFontConfig_28_29($5 + 8 | 0 | 0) | 0;
     HEAP8[($5 + 36 | 0) >> 0] = 1;
     HEAP32[($5 + 28 | 0) >> 2] = 1;
     HEAP32[($5 + 32 | 0) >> 2] = 1;
     label$4 : {
      $8 = Math_fround(HEAPF32[($5 + 24 | 0) >> 2]);
      if (!($8 <= Math_fround(0.0))) {
       break label$4
      }
      HEAP32[($5 + 24 | 0) >> 2] = 1095761920;
      $8 = Math_fround(13.0);
     }
     label$5 : {
      if (HEAPU8[($5 + 82 | 0) >> 0] | 0) {
       break label$5
      }
      $7 = $5 + 82 | 0;
      label$6 : {
       label$7 : {
        if (!(Math_fround(Math_abs($8)) < Math_fround(2147483648.0))) {
         break label$7
        }
        $9 = ~~$8;
        break label$6;
       }
       $9 = -2147483648;
      }
      HEAP32[$5 >> 2] = $9;
      ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($7 | 0, 40 | 0, 65564 | 0, $5 | 0) | 0;
      $8 = Math_fround(HEAPF32[($5 + 24 | 0) >> 2]);
     }
     label$8 : {
      label$9 : {
       $10 = Math_fround($8 / Math_fround(13.0));
       if (!(Math_fround(Math_abs($10)) < Math_fround(2147483648.0))) {
        break label$9
       }
       $7 = ~~$10;
       break label$8;
      }
      $7 = -2147483648;
     }
     HEAPF32[($5 + 52 | 0) >> 2] = Math_fround($7 | 0);
     HEAP16[($5 + 80 | 0) >> 1] = 133;
     $7 = HEAP32[($5 + 56 | 0) >> 2] | 0;
     ImFontAtlas__AddFontFromMemoryCompressedBase85TTF_28char_20const__2c_20float_2c_20ImFontConfig_20const__2c_20unsigned_20short_20const__29($0 | 0, 76384 | 0, Math_fround($8), $5 + 8 | 0 | 0, ($7 ? $7 : 73080) | 0) | 0;
    }
    label$10 : {
     label$11 : {
      $7 = HEAP32[($0 + 1120 | 0) >> 2] | 0;
      if (!$7) {
       break label$11
      }
      $7 = HEAP32[$7 >> 2] | 0;
      break label$10;
     }
     $7 = 19;
     HEAP32[(0 + 92732 | 0) >> 2] = 19;
    }
    FUNCTION_TABLE[$7 | 0]($0) | 0;
    $7 = HEAP32[($0 + 28 | 0) >> 2] | 0;
    if ($7) {
     break label$2
    }
    $6 = HEAP32[($0 + 32 | 0) >> 2] | 0;
    break label$1;
   }
   $6 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul(HEAP32[($0 + 36 | 0) >> 2] | 0, HEAP32[($0 + 40 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
   HEAP32[($0 + 32 | 0) >> 2] = $6;
   $11 = Math_imul(HEAP32[($0 + 40 | 0) >> 2] | 0, HEAP32[($0 + 36 | 0) >> 2] | 0);
   if (($11 | 0) < (1 | 0)) {
    break label$1
   }
   label$12 : {
    label$13 : {
     $12 = $11 & 3 | 0;
     if ($12) {
      break label$13
     }
     $13 = $11;
     $9 = $6;
     break label$12;
    }
    $14 = 0;
    $13 = $11;
    $9 = $6;
    label$14 : while (1) {
     HEAP32[$9 >> 2] = (HEAPU8[$7 >> 0] | 0) << 24 | 0 | 16777215 | 0;
     $13 = $13 + -1 | 0;
     $9 = $9 + 4 | 0;
     $7 = $7 + 1 | 0;
     $14 = $14 + 1 | 0;
     if (($14 | 0) != ($12 | 0)) {
      continue label$14
     }
     break label$14;
    };
   }
   if ($11 >>> 0 < 4 >>> 0) {
    break label$1
   }
   label$15 : while (1) {
    HEAP32[$9 >> 2] = (HEAPU8[$7 >> 0] | 0) << 24 | 0 | 16777215 | 0;
    HEAP32[($9 + 4 | 0) >> 2] = (HEAPU8[($7 + 1 | 0) >> 0] | 0) << 24 | 0 | 16777215 | 0;
    HEAP32[($9 + 8 | 0) >> 2] = (HEAPU8[($7 + 2 | 0) >> 0] | 0) << 24 | 0 | 16777215 | 0;
    HEAP32[($9 + 12 | 0) >> 2] = (HEAPU8[($7 + 3 | 0) >> 0] | 0) << 24 | 0 | 16777215 | 0;
    $9 = $9 + 16 | 0;
    $7 = $7 + 4 | 0;
    $14 = $13 + -5 | 0;
    $13 = $13 + -4 | 0;
    if ($14 >>> 0 < -2 >>> 0) {
     continue label$15
    }
    break label$15;
   };
  }
  HEAP32[$1 >> 2] = $6;
  label$16 : {
   if (!$2) {
    break label$16
   }
   HEAP32[$2 >> 2] = HEAP32[($0 + 36 | 0) >> 2] | 0;
  }
  label$17 : {
   if (!$3) {
    break label$17
   }
   HEAP32[$3 >> 2] = HEAP32[($0 + 40 | 0) >> 2] | 0;
  }
  label$18 : {
   if (!$4) {
    break label$18
   }
   HEAP32[$4 >> 2] = 4;
  }
  __stack_pointer = $5 + 128 | 0;
 }
 
 function ImFontAtlas__AddFont_28ImFontConfig_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0;
  label$1 : {
   if (HEAPU8[($1 + 60 | 0) >> 0] | 0) {
    break label$1
   }
   $2 = ImGui__MemAlloc_28unsigned_20long_29(96 | 0) | 0;
   ImFont__ImFont_28_29($2 | 0) | 0;
   label$2 : {
    $3 = HEAP32[($0 + 60 | 0) >> 2] | 0;
    if (($3 | 0) != (HEAP32[($0 + 64 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    $4 = $3 + 1 | 0;
    label$3 : {
     label$4 : {
      if ($3) {
       break label$4
      }
      $5 = 8;
      break label$3;
     }
     $5 = (($3 | 0) / (2 | 0) | 0) + $3 | 0;
    }
    $4 = ($5 | 0) > ($4 | 0) ? $5 : $4;
    if (($3 | 0) >= ($4 | 0)) {
     break label$2
    }
    $3 = ImGui__MemAlloc_28unsigned_20long_29($4 << 2 | 0 | 0) | 0;
    label$5 : {
     $5 = HEAP32[($0 + 68 | 0) >> 2] | 0;
     if (!$5) {
      break label$5
     }
     __memcpy($3 | 0, $5 | 0, (HEAP32[($0 + 60 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
     ImGui__MemFree_28void__29(HEAP32[($0 + 68 | 0) >> 2] | 0 | 0);
    }
    HEAP32[($0 + 64 | 0) >> 2] = $4;
    HEAP32[($0 + 68 | 0) >> 2] = $3;
    $3 = HEAP32[($0 + 60 | 0) >> 2] | 0;
   }
   HEAP32[((HEAP32[($0 + 68 | 0) >> 2] | 0) + ($3 << 2 | 0) | 0) >> 2] = $2;
   HEAP32[($0 + 60 | 0) >> 2] = (HEAP32[($0 + 60 | 0) >> 2] | 0) + 1 | 0;
  }
  label$6 : {
   $3 = HEAP32[($0 + 84 | 0) >> 2] | 0;
   if (($3 | 0) != (HEAP32[($0 + 88 | 0) >> 2] | 0 | 0)) {
    break label$6
   }
   $2 = $3 + 1 | 0;
   label$7 : {
    label$8 : {
     if ($3) {
      break label$8
     }
     $4 = 8;
     break label$7;
    }
    $4 = (($3 | 0) / (2 | 0) | 0) + $3 | 0;
   }
   $2 = ($4 | 0) > ($2 | 0) ? $4 : $2;
   if (($3 | 0) >= ($2 | 0)) {
    break label$6
   }
   $3 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($2, 120) | 0) | 0;
   label$9 : {
    $4 = HEAP32[($0 + 92 | 0) >> 2] | 0;
    if (!$4) {
     break label$9
    }
    __memcpy($3 | 0, $4 | 0, Math_imul(HEAP32[($0 + 84 | 0) >> 2] | 0, 120) | 0) | 0;
    ImGui__MemFree_28void__29(HEAP32[($0 + 92 | 0) >> 2] | 0 | 0);
   }
   HEAP32[($0 + 88 | 0) >> 2] = $2;
   HEAP32[($0 + 92 | 0) >> 2] = $3;
   $3 = HEAP32[($0 + 84 | 0) >> 2] | 0;
  }
  $2 = $0 + 92 | 0;
  __memcpy((HEAP32[$2 >> 2] | 0) + Math_imul($3, 120) | 0 | 0, $1 | 0, 120 | 0) | 0;
  $5 = HEAP32[($0 + 84 | 0) >> 2] | 0;
  HEAP32[($0 + 84 | 0) >> 2] = $5 + 1 | 0;
  $6 = HEAP32[$2 >> 2] | 0;
  $3 = $6 + Math_imul($5, 120) | 0;
  $4 = $3 + 116 | 0;
  label$10 : {
   $2 = HEAP32[($3 + 116 | 0) >> 2] | 0;
   if ($2) {
    break label$10
   }
   $2 = HEAP32[((((HEAP32[($0 + 60 | 0) >> 2] | 0) << 2 | 0) + (HEAP32[($0 + 68 | 0) >> 2] | 0) | 0) + -4 | 0) >> 2] | 0;
   HEAP32[$4 >> 2] = $2;
  }
  label$11 : {
   if (HEAPU8[($3 + 8 | 0) >> 0] | 0) {
    break label$11
   }
   $2 = $6 + Math_imul($5, 120) | 0;
   $5 = ImGui__MemAlloc_28unsigned_20long_29(HEAP32[($2 + 4 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[$3 >> 2] = $5;
   HEAP8[($3 + 8 | 0) >> 0] = 1;
   __memcpy($5 | 0, HEAP32[$1 >> 2] | 0 | 0, HEAP32[($2 + 4 | 0) >> 2] | 0 | 0) | 0;
   $2 = HEAP32[$4 >> 2] | 0;
  }
  label$12 : {
   if ((HEAPU16[($2 + 60 | 0) >> 1] | 0 | 0) != (65535 | 0)) {
    break label$12
   }
   HEAP16[($2 + 60 | 0) >> 1] = HEAPU16[($1 + 72 | 0) >> 1] | 0;
  }
  HEAP8[($0 + 24 | 0) >> 0] = 0;
  label$13 : {
   $3 = HEAP32[($0 + 28 | 0) >> 2] | 0;
   if (!$3) {
    break label$13
   }
   ImGui__MemFree_28void__29($3 | 0);
  }
  label$14 : {
   $3 = HEAP32[($0 + 32 | 0) >> 2] | 0;
   if (!$3) {
    break label$14
   }
   ImGui__MemFree_28void__29($3 | 0);
  }
  HEAP8[($0 + 25 | 0) >> 0] = 0;
  HEAP32[($0 + 28 | 0) >> 2] = 0;
  HEAP32[($0 + 32 | 0) >> 2] = 0;
  return HEAP32[$4 >> 2] | 0 | 0;
 }
 
 function ImFontAtlas__AddFontFromMemoryCompressedTTF_28void_20const__2c_20int_2c_20float_2c_20ImFontConfig_20const__2c_20unsigned_20short_20const__29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = Math_fround($3);
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $7 = 0, $16 = 0, $15 = 0, $12 = 0, $14 = 0, $13 = 0, $17 = 0, $6 = 0, $10 = 0, $9 = 0, $11 = 0, $8 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_f32$1 = Math_fround(0), wasm2js_i32$0 = 0;
  $6 = __stack_pointer - 240 | 0;
  __stack_pointer = $6;
  $7 = HEAPU8[($1 + 8 | 0) >> 0] | 0 | ((HEAPU8[($1 + 9 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($1 + 10 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($1 + 11 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $8 = $7 << 24 | 0 | (($7 & 65280 | 0) << 8 | 0) | 0 | (($7 >>> 8 | 0) & 65280 | 0 | ($7 >>> 24 | 0) | 0) | 0;
  $9 = ImGui__MemAlloc_28unsigned_20long_29($8 | 0) | 0;
  label$1 : {
   $7 = HEAPU8[$1 >> 0] | 0 | ((HEAPU8[($1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   if (($7 << 24 | 0 | (($7 & 65280 | 0) << 8 | 0) | 0 | (($7 >>> 8 | 0) & 65280 | 0 | ($7 >>> 24 | 0) | 0) | 0 | 0) != (1471938560 | 0)) {
    break label$1
   }
   $7 = HEAPU8[($1 + 4 | 0) >> 0] | 0 | ((HEAPU8[($1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   if ($7 << 24 | 0 | (($7 & 65280 | 0) << 8 | 0) | 0 | (($7 >>> 8 | 0) & 65280 | 0 | ($7 >>> 24 | 0) | 0) | 0) {
    break label$1
   }
   $7 = HEAPU8[($1 + 8 | 0) >> 0] | 0 | ((HEAPU8[($1 + 9 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($1 + 10 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($1 + 11 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[(0 + 92748 | 0) >> 2] = $9;
   HEAP32[(0 + 92736 | 0) >> 2] = $1;
   HEAP32[(0 + 92744 | 0) >> 2] = $9;
   $10 = $9 + ($7 << 24 | 0 | (($7 & 65280 | 0) << 8 | 0) | 0 | (($7 >>> 8 | 0) & 65280 | 0 | ($7 >>> 24 | 0) | 0) | 0) | 0;
   HEAP32[(0 + 92740 | 0) >> 2] = $10;
   $11 = $10 + 1 | 0;
   $12 = $1 + 16 | 0;
   $7 = $9;
   label$2 : {
    label$3 : while (1) {
     $13 = $7;
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         $14 = HEAPU8[$12 >> 0] | 0;
         if ($14 >>> 0 < 32 >>> 0) {
          break label$7
         }
         label$8 : {
          if (($14 << 24 >> 24 | 0) > (-1 | 0)) {
           break label$8
          }
          label$9 : {
           $15 = $14 + -127 | 0;
           $7 = $13 + $15 | 0;
           if ($7 >>> 0 > $10 >>> 0) {
            break label$9
           }
           $7 = $11;
           $16 = ((HEAPU8[($12 + 1 | 0) >> 0] | 0) ^ -1 | 0) + $13 | 0;
           if ($16 >>> 0 < $9 >>> 0) {
            break label$9
           }
           label$10 : {
            if ($15) {
             break label$10
            }
            $7 = $13;
            $12 = $12 + 2 | 0;
            break label$4;
           }
           $17 = $14 + -128 | 0;
           $14 = 0;
           $7 = $13;
           label$11 : {
            $13 = $15 & 7 | 0;
            if (!$13) {
             break label$11
            }
            label$12 : while (1) {
             HEAP8[$7 >> 0] = HEAPU8[$16 >> 0] | 0;
             $7 = $7 + 1 | 0;
             $16 = $16 + 1 | 0;
             $15 = $15 + -1 | 0;
             $14 = $14 + 1 | 0;
             if (($14 | 0) != ($13 | 0)) {
              continue label$12
             }
             break label$12;
            };
           }
           if ($17 >>> 0 < 7 >>> 0) {
            break label$9
           }
           label$13 : while (1) {
            HEAP8[$7 >> 0] = HEAPU8[$16 >> 0] | 0;
            HEAP8[($7 + 1 | 0) >> 0] = HEAPU8[($16 + 1 | 0) >> 0] | 0;
            HEAP8[($7 + 2 | 0) >> 0] = HEAPU8[($16 + 2 | 0) >> 0] | 0;
            HEAP8[($7 + 3 | 0) >> 0] = HEAPU8[($16 + 3 | 0) >> 0] | 0;
            HEAP8[($7 + 4 | 0) >> 0] = HEAPU8[($16 + 4 | 0) >> 0] | 0;
            HEAP8[($7 + 5 | 0) >> 0] = HEAPU8[($16 + 5 | 0) >> 0] | 0;
            HEAP8[($7 + 6 | 0) >> 0] = HEAPU8[($16 + 6 | 0) >> 0] | 0;
            HEAP8[($7 + 7 | 0) >> 0] = HEAPU8[($16 + 7 | 0) >> 0] | 0;
            $7 = $7 + 8 | 0;
            $16 = $16 + 8 | 0;
            $15 = $15 + -8 | 0;
            if ($15) {
             continue label$13
            }
            break label$13;
           };
          }
          $12 = $12 + 2 | 0;
          break label$4;
         }
         label$14 : {
          if ($14 >>> 0 < 64 >>> 0) {
           break label$14
          }
          label$15 : {
           $17 = HEAPU8[($12 + 2 | 0) >> 0] | 0;
           $15 = $17 + 1 | 0;
           $7 = $13 + $15 | 0;
           if ($7 >>> 0 > $10 >>> 0) {
            break label$15
           }
           $7 = $11;
           $16 = ($13 - ($14 << 8 | 0 | (HEAPU8[($12 + 1 | 0) >> 0] | 0) | 0) | 0) + 16383 | 0;
           if ($16 >>> 0 < $9 >>> 0) {
            break label$15
           }
           $14 = 0;
           $7 = $13;
           label$16 : {
            $13 = $15 & 7 | 0;
            if (!$13) {
             break label$16
            }
            label$17 : while (1) {
             HEAP8[$7 >> 0] = HEAPU8[$16 >> 0] | 0;
             $7 = $7 + 1 | 0;
             $16 = $16 + 1 | 0;
             $15 = $15 + -1 | 0;
             $14 = $14 + 1 | 0;
             if (($14 | 0) != ($13 | 0)) {
              continue label$17
             }
             break label$17;
            };
           }
           if ($17 >>> 0 < 7 >>> 0) {
            break label$15
           }
           label$18 : while (1) {
            HEAP8[$7 >> 0] = HEAPU8[$16 >> 0] | 0;
            HEAP8[($7 + 1 | 0) >> 0] = HEAPU8[($16 + 1 | 0) >> 0] | 0;
            HEAP8[($7 + 2 | 0) >> 0] = HEAPU8[($16 + 2 | 0) >> 0] | 0;
            HEAP8[($7 + 3 | 0) >> 0] = HEAPU8[($16 + 3 | 0) >> 0] | 0;
            HEAP8[($7 + 4 | 0) >> 0] = HEAPU8[($16 + 4 | 0) >> 0] | 0;
            HEAP8[($7 + 5 | 0) >> 0] = HEAPU8[($16 + 5 | 0) >> 0] | 0;
            HEAP8[($7 + 6 | 0) >> 0] = HEAPU8[($16 + 6 | 0) >> 0] | 0;
            HEAP8[($7 + 7 | 0) >> 0] = HEAPU8[($16 + 7 | 0) >> 0] | 0;
            $7 = $7 + 8 | 0;
            $16 = $16 + 8 | 0;
            $15 = $15 + -8 | 0;
            if ($15) {
             continue label$18
            }
            break label$18;
           };
          }
          $12 = $12 + 3 | 0;
          break label$4;
         }
         label$19 : {
          label$20 : {
           $15 = $14 + -31 | 0;
           $16 = $13 + $15 | 0;
           if ($16 >>> 0 > $10 >>> 0) {
            break label$20
           }
           $7 = $11;
           $17 = $12 + 1 | 0;
           if ($17 >>> 0 < $1 >>> 0) {
            break label$19
           }
           __memcpy($13 | 0, $17 | 0, $15 | 0) | 0;
           $14 = HEAPU8[$12 >> 0] | 0;
          }
          $7 = $16;
         }
         $16 = $14 + -30 | 0;
         break label$6;
        }
        label$21 : {
         if ($14 >>> 0 < 24 >>> 0) {
          break label$21
         }
         label$22 : {
          $17 = HEAPU8[($12 + 3 | 0) >> 0] | 0;
          $15 = $17 + 1 | 0;
          $7 = $13 + $15 | 0;
          if ($7 >>> 0 > $10 >>> 0) {
           break label$22
          }
          $7 = $11;
          $16 = ($13 - ($14 << 16 | 0 | (HEAPU8[($12 + 2 | 0) >> 0] | 0) | 0 | ((HEAPU8[($12 + 1 | 0) >> 0] | 0) << 8 | 0) | 0) | 0) + 1572863 | 0;
          if ($16 >>> 0 < $9 >>> 0) {
           break label$22
          }
          $14 = 0;
          $7 = $13;
          label$23 : {
           $13 = $15 & 7 | 0;
           if (!$13) {
            break label$23
           }
           label$24 : while (1) {
            HEAP8[$7 >> 0] = HEAPU8[$16 >> 0] | 0;
            $7 = $7 + 1 | 0;
            $16 = $16 + 1 | 0;
            $15 = $15 + -1 | 0;
            $14 = $14 + 1 | 0;
            if (($14 | 0) != ($13 | 0)) {
             continue label$24
            }
            break label$24;
           };
          }
          if ($17 >>> 0 < 7 >>> 0) {
           break label$22
          }
          label$25 : while (1) {
           HEAP8[$7 >> 0] = HEAPU8[$16 >> 0] | 0;
           HEAP8[($7 + 1 | 0) >> 0] = HEAPU8[($16 + 1 | 0) >> 0] | 0;
           HEAP8[($7 + 2 | 0) >> 0] = HEAPU8[($16 + 2 | 0) >> 0] | 0;
           HEAP8[($7 + 3 | 0) >> 0] = HEAPU8[($16 + 3 | 0) >> 0] | 0;
           HEAP8[($7 + 4 | 0) >> 0] = HEAPU8[($16 + 4 | 0) >> 0] | 0;
           HEAP8[($7 + 5 | 0) >> 0] = HEAPU8[($16 + 5 | 0) >> 0] | 0;
           HEAP8[($7 + 6 | 0) >> 0] = HEAPU8[($16 + 6 | 0) >> 0] | 0;
           HEAP8[($7 + 7 | 0) >> 0] = HEAPU8[($16 + 7 | 0) >> 0] | 0;
           $7 = $7 + 8 | 0;
           $16 = $16 + 8 | 0;
           $15 = $15 + -8 | 0;
           if ($15) {
            continue label$25
           }
           break label$25;
          };
         }
         $12 = $12 + 4 | 0;
         break label$4;
        }
        label$26 : {
         if ($14 >>> 0 < 16 >>> 0) {
          break label$26
         }
         label$27 : {
          $17 = (HEAPU8[($12 + 3 | 0) >> 0] | 0) << 8 | 0 | (HEAPU8[($12 + 4 | 0) >> 0] | 0) | 0;
          $15 = $17 + 1 | 0;
          $7 = $13 + $15 | 0;
          if ($7 >>> 0 > $10 >>> 0) {
           break label$27
          }
          $7 = $11;
          $16 = ($13 - ($14 << 16 | 0 | (HEAPU8[($12 + 2 | 0) >> 0] | 0) | 0 | ((HEAPU8[($12 + 1 | 0) >> 0] | 0) << 8 | 0) | 0) | 0) + 1048575 | 0;
          if ($16 >>> 0 < $9 >>> 0) {
           break label$27
          }
          $14 = 0;
          $7 = $13;
          label$28 : {
           $13 = $15 & 7 | 0;
           if (!$13) {
            break label$28
           }
           label$29 : while (1) {
            HEAP8[$7 >> 0] = HEAPU8[$16 >> 0] | 0;
            $7 = $7 + 1 | 0;
            $16 = $16 + 1 | 0;
            $15 = $15 + -1 | 0;
            $14 = $14 + 1 | 0;
            if (($14 | 0) != ($13 | 0)) {
             continue label$29
            }
            break label$29;
           };
          }
          if ($17 >>> 0 < 7 >>> 0) {
           break label$27
          }
          label$30 : while (1) {
           HEAP8[$7 >> 0] = HEAPU8[$16 >> 0] | 0;
           HEAP8[($7 + 1 | 0) >> 0] = HEAPU8[($16 + 1 | 0) >> 0] | 0;
           HEAP8[($7 + 2 | 0) >> 0] = HEAPU8[($16 + 2 | 0) >> 0] | 0;
           HEAP8[($7 + 3 | 0) >> 0] = HEAPU8[($16 + 3 | 0) >> 0] | 0;
           HEAP8[($7 + 4 | 0) >> 0] = HEAPU8[($16 + 4 | 0) >> 0] | 0;
           HEAP8[($7 + 5 | 0) >> 0] = HEAPU8[($16 + 5 | 0) >> 0] | 0;
           HEAP8[($7 + 6 | 0) >> 0] = HEAPU8[($16 + 6 | 0) >> 0] | 0;
           HEAP8[($7 + 7 | 0) >> 0] = HEAPU8[($16 + 7 | 0) >> 0] | 0;
           $7 = $7 + 8 | 0;
           $16 = $16 + 8 | 0;
           $15 = $15 + -8 | 0;
           if ($15) {
            continue label$30
           }
           break label$30;
          };
         }
         $12 = $12 + 5 | 0;
         break label$4;
        }
        if ($14 >>> 0 < 8 >>> 0) {
         break label$5
        }
        label$31 : {
         label$32 : {
          $16 = $14 << 8 | 0 | (HEAPU8[($12 + 1 | 0) >> 0] | 0) | 0;
          $14 = $16 + -2047 | 0;
          $15 = $13 + $14 | 0;
          if ($15 >>> 0 > $10 >>> 0) {
           break label$32
          }
          $7 = $11;
          $17 = $12 + 2 | 0;
          if ($17 >>> 0 < $1 >>> 0) {
           break label$31
          }
          __memcpy($13 | 0, $17 | 0, $14 | 0) | 0;
          $16 = (HEAPU8[$12 >> 0] | 0) << 8 | 0 | (HEAPU8[($12 + 1 | 0) >> 0] | 0) | 0;
         }
         $7 = $15;
        }
        $16 = $16 + -2045 | 0;
       }
       if (!$16) {
        break label$2
       }
       $12 = $12 + $16 | 0;
       break label$4;
      }
      $7 = $13;
      label$33 : {
       switch ($14 + -4 | 0 | 0) {
       case 3:
        label$36 : {
         label$37 : {
          $16 = (HEAPU8[($12 + 1 | 0) >> 0] | 0) << 8 | 0 | (HEAPU8[($12 + 2 | 0) >> 0] | 0) | 0;
          $14 = $16 + 1 | 0;
          $15 = $13 + $14 | 0;
          if ($15 >>> 0 > $10 >>> 0) {
           break label$37
          }
          $7 = $11;
          $17 = $12 + 3 | 0;
          if ($17 >>> 0 < $1 >>> 0) {
           break label$36
          }
          __memcpy($13 | 0, $17 | 0, $14 | 0) | 0;
          $16 = (HEAPU8[($12 + 1 | 0) >> 0] | 0) << 8 | 0 | (HEAPU8[($12 + 2 | 0) >> 0] | 0) | 0;
         }
         $7 = $15;
        }
        $12 = ($16 + $12 | 0) + 4 | 0;
        break label$4;
       case 2:
        label$38 : {
         $17 = HEAPU8[($12 + 4 | 0) >> 0] | 0;
         $15 = $17 + 1 | 0;
         $7 = $13 + $15 | 0;
         if ($7 >>> 0 > $10 >>> 0) {
          break label$38
         }
         $7 = $11;
         $16 = $13 + (((HEAPU8[($12 + 1 | 0) >> 0] | 0) << 16 | 0 | (HEAPU8[($12 + 3 | 0) >> 0] | 0) | 0 | ((HEAPU8[($12 + 2 | 0) >> 0] | 0) << 8 | 0) | 0) ^ -1 | 0) | 0;
         if ($16 >>> 0 < $9 >>> 0) {
          break label$38
         }
         $14 = 0;
         $7 = $13;
         label$39 : {
          $13 = $15 & 7 | 0;
          if (!$13) {
           break label$39
          }
          label$40 : while (1) {
           HEAP8[$7 >> 0] = HEAPU8[$16 >> 0] | 0;
           $7 = $7 + 1 | 0;
           $16 = $16 + 1 | 0;
           $15 = $15 + -1 | 0;
           $14 = $14 + 1 | 0;
           if (($14 | 0) != ($13 | 0)) {
            continue label$40
           }
           break label$40;
          };
         }
         if ($17 >>> 0 < 7 >>> 0) {
          break label$38
         }
         label$41 : while (1) {
          HEAP8[$7 >> 0] = HEAPU8[$16 >> 0] | 0;
          HEAP8[($7 + 1 | 0) >> 0] = HEAPU8[($16 + 1 | 0) >> 0] | 0;
          HEAP8[($7 + 2 | 0) >> 0] = HEAPU8[($16 + 2 | 0) >> 0] | 0;
          HEAP8[($7 + 3 | 0) >> 0] = HEAPU8[($16 + 3 | 0) >> 0] | 0;
          HEAP8[($7 + 4 | 0) >> 0] = HEAPU8[($16 + 4 | 0) >> 0] | 0;
          HEAP8[($7 + 5 | 0) >> 0] = HEAPU8[($16 + 5 | 0) >> 0] | 0;
          HEAP8[($7 + 6 | 0) >> 0] = HEAPU8[($16 + 6 | 0) >> 0] | 0;
          HEAP8[($7 + 7 | 0) >> 0] = HEAPU8[($16 + 7 | 0) >> 0] | 0;
          $7 = $7 + 8 | 0;
          $16 = $16 + 8 | 0;
          $15 = $15 + -8 | 0;
          if ($15) {
           continue label$41
          }
          break label$41;
         };
        }
        $12 = $12 + 5 | 0;
        break label$4;
       case 0:
        break label$33;
       default:
        break label$2;
       };
      }
      label$42 : {
       $17 = (HEAPU8[($12 + 4 | 0) >> 0] | 0) << 8 | 0 | (HEAPU8[($12 + 5 | 0) >> 0] | 0) | 0;
       $15 = $17 + 1 | 0;
       $7 = $13 + $15 | 0;
       if ($7 >>> 0 > $10 >>> 0) {
        break label$42
       }
       $7 = $11;
       $16 = $13 + (((HEAPU8[($12 + 1 | 0) >> 0] | 0) << 16 | 0 | (HEAPU8[($12 + 3 | 0) >> 0] | 0) | 0 | ((HEAPU8[($12 + 2 | 0) >> 0] | 0) << 8 | 0) | 0) ^ -1 | 0) | 0;
       if ($16 >>> 0 < $9 >>> 0) {
        break label$42
       }
       $14 = 0;
       $7 = $13;
       label$43 : {
        $13 = $15 & 7 | 0;
        if (!$13) {
         break label$43
        }
        label$44 : while (1) {
         HEAP8[$7 >> 0] = HEAPU8[$16 >> 0] | 0;
         $7 = $7 + 1 | 0;
         $16 = $16 + 1 | 0;
         $15 = $15 + -1 | 0;
         $14 = $14 + 1 | 0;
         if (($14 | 0) != ($13 | 0)) {
          continue label$44
         }
         break label$44;
        };
       }
       if ($17 >>> 0 < 7 >>> 0) {
        break label$42
       }
       label$45 : while (1) {
        HEAP8[$7 >> 0] = HEAPU8[$16 >> 0] | 0;
        HEAP8[($7 + 1 | 0) >> 0] = HEAPU8[($16 + 1 | 0) >> 0] | 0;
        HEAP8[($7 + 2 | 0) >> 0] = HEAPU8[($16 + 2 | 0) >> 0] | 0;
        HEAP8[($7 + 3 | 0) >> 0] = HEAPU8[($16 + 3 | 0) >> 0] | 0;
        HEAP8[($7 + 4 | 0) >> 0] = HEAPU8[($16 + 4 | 0) >> 0] | 0;
        HEAP8[($7 + 5 | 0) >> 0] = HEAPU8[($16 + 5 | 0) >> 0] | 0;
        HEAP8[($7 + 6 | 0) >> 0] = HEAPU8[($16 + 6 | 0) >> 0] | 0;
        HEAP8[($7 + 7 | 0) >> 0] = HEAPU8[($16 + 7 | 0) >> 0] | 0;
        $7 = $7 + 8 | 0;
        $16 = $16 + 8 | 0;
        $15 = $15 + -8 | 0;
        if ($15) {
         continue label$45
        }
        break label$45;
       };
      }
      $12 = $12 + 6 | 0;
     }
     if ($7 >>> 0 <= $10 >>> 0) {
      continue label$3
     }
     break label$3;
    };
   }
   HEAP32[(0 + 92748 | 0) >> 2] = $7;
  }
  label$46 : {
   label$47 : {
    if (!$4) {
     break label$47
    }
    __memcpy($6 | 0, $4 | 0, 120 | 0) | 0;
    break label$46;
   }
   ImFontConfig__ImFontConfig_28_29($6 | 0) | 0;
  }
  HEAP8[($6 + 8 | 0) >> 0] = 1;
  __memcpy($6 + 120 | 0 | 0, $6 | 0, 120 | 0) | 0;
  HEAP32[($6 + 124 | 0) >> 2] = $8;
  HEAP32[($6 + 120 | 0) >> 2] = $9;
  HEAPF32[($6 + 136 | 0) >> 2] = (wasm2js_f32$0 = $3, wasm2js_f32$1 = Math_fround(HEAPF32[($6 + 136 | 0) >> 2]), wasm2js_i32$0 = $3 > Math_fround(0.0), wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
  label$48 : {
   if (!$5) {
    break label$48
   }
   HEAP32[($6 + 168 | 0) >> 2] = $5;
  }
  $7 = ImFontAtlas__AddFont_28ImFontConfig_20const__29($0 | 0, $6 + 120 | 0 | 0) | 0;
  __stack_pointer = $6 + 240 | 0;
  return $7 | 0;
 }
 
 function ImFontAtlas__GetMouseCursorTexData_28int_2c_20ImVec2__2c_20ImVec2__2c_20ImVec2__2c_20ImVec2__29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $11 = Math_fround(0), i64toi32_i32$2 = 0, $10 = Math_fround(0), $12 = Math_fround(0), $9 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $7 = 0, $8 = 0, $37 = 0, $41 = 0;
  $6 = 0;
  label$1 : {
   if ($1 >>> 0 > 8 >>> 0) {
    break label$1
   }
   if ((HEAPU8[$0 >> 0] | 0) & 2 | 0) {
    break label$1
   }
   $6 = (HEAP32[($0 + 80 | 0) >> 2] | 0) + Math_imul(HEAP32[($0 + 1128 | 0) >> 2] | 0, 28) | 0;
   $7 = HEAPU16[($6 + 4 | 0) >> 1] | 0;
   $8 = HEAPU16[($6 + 6 | 0) >> 1] | 0;
   $1 = Math_imul($1, 24);
   $9 = $1 + 72872 | 0;
   i64toi32_i32$2 = $9;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $37 = i64toi32_i32$0;
   i64toi32_i32$0 = $3;
   HEAP32[i64toi32_i32$0 >> 2] = $37;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1 + 72880 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $41 = i64toi32_i32$1;
   i64toi32_i32$1 = $2;
   HEAP32[i64toi32_i32$1 >> 2] = $41;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $6 = $0 + 44 | 0;
   $10 = Math_fround(HEAPF32[$6 >> 2]);
   $11 = Math_fround(Math_fround(HEAPF32[($1 + 72868 | 0) >> 2]) + Math_fround($8 >>> 0));
   $0 = $0 + 48 | 0;
   HEAPF32[($4 + 4 | 0) >> 2] = Math_fround($11 * Math_fround(HEAPF32[$0 >> 2]));
   $12 = Math_fround(Math_fround(HEAPF32[($1 + 72864 | 0) >> 2]) + Math_fround($7 >>> 0));
   HEAPF32[$4 >> 2] = Math_fround($10 * $12);
   $10 = Math_fround(HEAPF32[$6 >> 2]);
   $13 = Math_fround($11 + Math_fround(HEAPF32[($1 + 72876 | 0) >> 2]));
   HEAPF32[($4 + 12 | 0) >> 2] = Math_fround($13 * Math_fround(HEAPF32[$0 >> 2]));
   $14 = Math_fround(HEAPF32[$9 >> 2]);
   HEAPF32[($4 + 8 | 0) >> 2] = Math_fround($10 * Math_fround($12 + $14));
   $10 = Math_fround(HEAPF32[$6 >> 2]);
   HEAPF32[($5 + 4 | 0) >> 2] = Math_fround($11 * Math_fround(HEAPF32[$0 >> 2]));
   $11 = Math_fround($12 + Math_fround(123.0));
   HEAPF32[$5 >> 2] = Math_fround($10 * $11);
   $12 = Math_fround(HEAPF32[$6 >> 2]);
   HEAPF32[($5 + 12 | 0) >> 2] = Math_fround($13 * Math_fround(HEAPF32[$0 >> 2]));
   HEAPF32[($5 + 8 | 0) >> 2] = Math_fround($12 * Math_fround($11 + $14));
   $6 = 1;
  }
  return $6 | 0;
 }
 
 function ImFontAtlasBuildInit_28ImFontAtlas__29($0) {
  $0 = $0 | 0;
  var $2 = 0, $1 = 0, $3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   if ((HEAP32[($0 + 1128 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   $1 = HEAP32[($0 + 76 | 0) >> 2] | 0;
   $2 = HEAP32[($0 + 72 | 0) >> 2] | 0;
   label$2 : {
    label$3 : {
     if ((HEAPU8[$0 >> 0] | 0) & 2 | 0) {
      break label$3
     }
     label$4 : {
      if (($2 | 0) != ($1 | 0)) {
       break label$4
      }
      $1 = $2 + 1 | 0;
      label$5 : {
       label$6 : {
        if ($2) {
         break label$6
        }
        $3 = 8;
        break label$5;
       }
       $3 = (($2 | 0) / (2 | 0) | 0) + $2 | 0;
      }
      $1 = ($3 | 0) > ($1 | 0) ? $3 : $1;
      if (($2 | 0) >= ($1 | 0)) {
       break label$4
      }
      $2 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($1, 28) | 0) | 0;
      label$7 : {
       $3 = HEAP32[($0 + 80 | 0) >> 2] | 0;
       if (!$3) {
        break label$7
       }
       __memcpy($2 | 0, $3 | 0, Math_imul(HEAP32[($0 + 72 | 0) >> 2] | 0, 28) | 0) | 0;
       ImGui__MemFree_28void__29(HEAP32[($0 + 80 | 0) >> 2] | 0 | 0);
      }
      HEAP32[($0 + 76 | 0) >> 2] = $1;
      HEAP32[($0 + 80 | 0) >> 2] = $2;
      $2 = HEAP32[($0 + 72 | 0) >> 2] | 0;
     }
     $2 = (HEAP32[($0 + 80 | 0) >> 2] | 0) + Math_imul($2, 28) | 0;
     HEAP16[$2 >> 1] = 245;
     $1 = 27;
     break label$2;
    }
    label$8 : {
     if (($2 | 0) != ($1 | 0)) {
      break label$8
     }
     $1 = $2 + 1 | 0;
     label$9 : {
      label$10 : {
       if ($2) {
        break label$10
       }
       $3 = 8;
       break label$9;
      }
      $3 = (($2 | 0) / (2 | 0) | 0) + $2 | 0;
     }
     $1 = ($3 | 0) > ($1 | 0) ? $3 : $1;
     if (($2 | 0) >= ($1 | 0)) {
      break label$8
     }
     $2 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($1, 28) | 0) | 0;
     label$11 : {
      $3 = HEAP32[($0 + 80 | 0) >> 2] | 0;
      if (!$3) {
       break label$11
      }
      __memcpy($2 | 0, $3 | 0, Math_imul(HEAP32[($0 + 72 | 0) >> 2] | 0, 28) | 0) | 0;
      ImGui__MemFree_28void__29(HEAP32[($0 + 80 | 0) >> 2] | 0 | 0);
     }
     HEAP32[($0 + 76 | 0) >> 2] = $1;
     HEAP32[($0 + 80 | 0) >> 2] = $2;
     $2 = HEAP32[($0 + 72 | 0) >> 2] | 0;
    }
    $1 = 2;
    $2 = (HEAP32[($0 + 80 | 0) >> 2] | 0) + Math_imul($2, 28) | 0;
    HEAP16[$2 >> 1] = 2;
   }
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = 0;
   HEAP32[($2 + 8 | 0) >> 2] = 0;
   HEAP32[($2 + 12 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($2 + 4 | 0) >> 2] = -1;
   HEAP16[($2 + 2 | 0) >> 1] = $1;
   i64toi32_i32$1 = $2 + 16 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($2 + 24 | 0) >> 2] = 0;
   $2 = HEAP32[($0 + 72 | 0) >> 2] | 0;
   HEAP32[($0 + 1128 | 0) >> 2] = $2;
   HEAP32[($0 + 72 | 0) >> 2] = $2 + 1 | 0;
  }
  label$12 : {
   if ((HEAP32[($0 + 1132 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$12
   }
   if ((HEAPU8[$0 >> 0] | 0) & 4 | 0) {
    break label$12
   }
   label$13 : {
    $2 = HEAP32[($0 + 72 | 0) >> 2] | 0;
    if (($2 | 0) != (HEAP32[($0 + 76 | 0) >> 2] | 0 | 0)) {
     break label$13
    }
    $1 = $2 + 1 | 0;
    label$14 : {
     label$15 : {
      if ($2) {
       break label$15
      }
      $3 = 8;
      break label$14;
     }
     $3 = (($2 | 0) / (2 | 0) | 0) + $2 | 0;
    }
    $1 = ($3 | 0) > ($1 | 0) ? $3 : $1;
    if (($2 | 0) >= ($1 | 0)) {
     break label$13
    }
    $2 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($1, 28) | 0) | 0;
    label$16 : {
     $3 = HEAP32[($0 + 80 | 0) >> 2] | 0;
     if (!$3) {
      break label$16
     }
     __memcpy($2 | 0, $3 | 0, Math_imul(HEAP32[($0 + 72 | 0) >> 2] | 0, 28) | 0) | 0;
     ImGui__MemFree_28void__29(HEAP32[($0 + 80 | 0) >> 2] | 0 | 0);
    }
    HEAP32[($0 + 76 | 0) >> 2] = $1;
    HEAP32[($0 + 80 | 0) >> 2] = $2;
    $2 = HEAP32[($0 + 72 | 0) >> 2] | 0;
   }
   $2 = (HEAP32[($0 + 80 | 0) >> 2] | 0) + Math_imul($2, 28) | 0;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = 0;
   HEAP32[($2 + 8 | 0) >> 2] = 0;
   HEAP32[($2 + 12 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = -1;
   HEAP32[$2 >> 2] = 4194369;
   HEAP32[($2 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $2 + 16 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($2 + 24 | 0) >> 2] = 0;
   $2 = HEAP32[($0 + 72 | 0) >> 2] | 0;
   HEAP32[($0 + 1132 | 0) >> 2] = $2;
   HEAP32[($0 + 72 | 0) >> 2] = $2 + 1 | 0;
  }
 }
 
 function stbtt__dict_get_ints_28stbtt__buf__2c_20int_2c_20int_2c_20unsigned_20int__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $10 = 0, $9 = 0, $11 = 0, $5 = 0, $6 = 0, $4 = 0, $7 = 0, $8 = 0, $12 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
  $6 = ($5 >> 31 | 0) & $5 | 0;
  HEAP32[($0 + 4 | 0) >> 2] = $6;
  label$1 : {
   label$2 : while (1) {
    $7 = $6;
    if (($5 | 0) <= ($6 | 0)) {
     break label$1
    }
    $8 = HEAP32[$0 >> 2] | 0;
    $9 = $7;
    label$3 : {
     label$4 : {
      label$5 : while (1) {
       $10 = $9;
       $6 = $8 + $10 | 0;
       $11 = HEAPU8[$6 >> 0] | 0;
       if ($11 >>> 0 < 28 >>> 0) {
        break label$4
       }
       $9 = $10 + 1 | 0;
       label$6 : {
        label$7 : {
         if (($11 | 0) != (30 | 0)) {
          break label$7
         }
         $10 = ($10 | 0) < (-1 | 0) ? $5 : $9;
         HEAP32[($0 + 4 | 0) >> 2] = $10;
         $6 = ($10 | 0) > ($5 | 0) ? $10 : $5;
         label$8 : while (1) {
          label$9 : {
           if (($10 | 0) != ($6 | 0)) {
            break label$9
           }
           $11 = 0;
           $10 = $6;
           break label$3;
          }
          $9 = $10 + 1 | 0;
          HEAP32[($0 + 4 | 0) >> 2] = $9;
          $11 = HEAPU8[($8 + $10 | 0) >> 0] | 0;
          if (($11 & 15 | 0 | 0) == (15 | 0)) {
           break label$6
          }
          $10 = $9;
          if (($11 & 240 | 0 | 0) != (240 | 0)) {
           continue label$8
          }
          break label$6;
         };
        }
        HEAP32[($0 + 4 | 0) >> 2] = $9;
        $11 = HEAPU8[$6 >> 0] | 0;
        if ((($11 + -32 | 0) & 255 | 0) >>> 0 < 215 >>> 0) {
         break label$6
        }
        label$10 : {
         label$11 : {
          if ((($11 + 9 | 0) & 255 | 0) >>> 0 > 3 >>> 0) {
           break label$11
          }
          if (($9 | 0) >= ($5 | 0)) {
           break label$6
          }
          $9 = $10 + 2 | 0;
          break label$10;
         }
         label$12 : {
          if ((($11 + 5 | 0) & 255 | 0) >>> 0 > 3 >>> 0) {
           break label$12
          }
          if (($9 | 0) >= ($5 | 0)) {
           break label$6
          }
          $9 = $10 + 2 | 0;
          break label$10;
         }
         label$13 : {
          switch ($11 + -28 | 0 | 0) {
          case 0:
           $11 = ($9 | 0) < ($5 | 0);
           $10 = $11 ? $10 + 2 | 0 : $9;
           label$15 : {
            if ($11) {
             break label$15
            }
            if (($10 | 0) >= ($5 | 0)) {
             break label$6
            }
           }
           $9 = $10 + (($10 | 0) < ($5 | 0)) | 0;
           break label$10;
          case 1:
           break label$13;
          default:
           break label$6;
          };
         }
         $11 = ($9 | 0) < ($5 | 0);
         $10 = $11 ? $10 + 2 | 0 : $9;
         $6 = ($10 | 0) < ($5 | 0);
         $10 = $10 + $6 | 0;
         $12 = ($10 | 0) < ($5 | 0);
         $10 = $10 + $12 | 0;
         label$16 : {
          if ($11) {
           break label$16
          }
          if ($6) {
           break label$16
          }
          if ($12) {
           break label$16
          }
          if (($10 | 0) >= ($5 | 0)) {
           break label$6
          }
         }
         $9 = $10 + (($10 | 0) < ($5 | 0)) | 0;
        }
        HEAP32[($0 + 4 | 0) >> 2] = $9;
       }
       if (($9 | 0) < ($5 | 0)) {
        continue label$5
       }
       break label$5;
      };
      $11 = 0;
      $6 = $9;
      $10 = $9;
      break label$3;
     }
     $9 = $10 + 1 | 0;
     HEAP32[($0 + 4 | 0) >> 2] = $9;
     label$17 : {
      $11 = HEAPU8[$6 >> 0] | 0;
      if (($11 | 0) == (12 | 0)) {
       break label$17
      }
      $6 = $9;
      break label$3;
     }
     $11 = 0;
     label$18 : {
      label$19 : {
       if (($9 | 0) < ($5 | 0)) {
        break label$19
       }
       $6 = $9;
       break label$18;
      }
      $6 = $10 + 2 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $6;
      $11 = HEAPU8[($8 + $9 | 0) >> 0] | 0;
     }
     $11 = $11 & 255 | 0 | 256 | 0;
    }
    if (($11 | 0) != ($1 | 0)) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($4 + 4 | 0) >> 2] = 0;
   $9 = $10 - $7 | 0;
   if (($9 | $7 | 0 | 0) < (0 | 0)) {
    break label$1
   }
   if (($5 | 0) < ($7 | 0)) {
    break label$1
   }
   if (($5 | 0) < ($10 | 0)) {
    break label$1
   }
   HEAP32[($4 + 8 | 0) >> 2] = $9;
   HEAP32[$4 >> 2] = $8 + $7 | 0;
   if (($2 | 0) < (1 | 0)) {
    break label$1
   }
   if (($9 | 0) < (1 | 0)) {
    break label$1
   }
   $10 = 0;
   label$20 : while (1) {
    (wasm2js_i32$0 = $3 + ($10 << 2 | 0) | 0, wasm2js_i32$1 = stbtt__cff_int_28stbtt__buf__29($4 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $10 = $10 + 1 | 0;
    if (($10 | 0) >= ($2 | 0)) {
     break label$1
    }
    if ((HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) < (HEAP32[($4 + 8 | 0) >> 2] | 0 | 0)) {
     continue label$20
    }
    break label$20;
   };
  }
  __stack_pointer = $4 + 16 | 0;
 }
 
 function stbtt__get_subrs_28stbtt__buf_2c_20stbtt__buf_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, i64toi32_i32$0 = 0, $6 = 0, $7 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 28 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($3 + 16 | 0) >> 2] = 0;
  HEAP32[($3 + 20 | 0) >> 2] = i64toi32_i32$0;
  stbtt__dict_get_ints_28stbtt__buf__2c_20int_2c_20int_2c_20unsigned_20int__29($2 | 0, 18 | 0, 2 | 0, $3 + 16 | 0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     $2 = HEAP32[($3 + 20 | 0) >> 2] | 0;
     if (!$2) {
      break label$3
     }
     $4 = HEAP32[($3 + 16 | 0) >> 2] | 0;
     if ($4) {
      break label$2
     }
    }
    HEAP32[($0 + 8 | 0) >> 2] = 0;
    i64toi32_i32$0 = 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
    break label$1;
   }
   label$4 : {
    label$5 : {
     if (($4 | $2 | 0 | 0) >= (0 | 0)) {
      break label$5
     }
     $5 = 0;
     $6 = 0;
     break label$4;
    }
    $5 = 0;
    label$6 : {
     $7 = HEAP32[($1 + 8 | 0) >> 2] | 0;
     if (($7 | 0) >= ($2 | 0)) {
      break label$6
     }
     $6 = 0;
     break label$4;
    }
    $6 = 0;
    if (($7 - $2 | 0 | 0) < ($4 | 0)) {
     break label$4
    }
    $6 = (HEAP32[$1 >> 2] | 0) + $2 | 0;
    $5 = $4;
   }
   HEAP32[($3 + 8 | 0) >> 2] = $5;
   HEAP32[($3 + 4 | 0) >> 2] = 0;
   HEAP32[$3 >> 2] = $6;
   stbtt__dict_get_ints_28stbtt__buf__2c_20int_2c_20int_2c_20unsigned_20int__29($3 | 0, 19 | 0, 1 | 0, $3 + 28 | 0 | 0);
   label$7 : {
    $5 = HEAP32[($3 + 28 | 0) >> 2] | 0;
    if ($5) {
     break label$7
    }
    HEAP32[($0 + 8 | 0) >> 2] = 0;
    i64toi32_i32$0 = 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
    break label$1;
   }
   $4 = HEAP32[($1 + 8 | 0) >> 2] | 0;
   $2 = $5 + $2 | 0;
   HEAP32[($1 + 4 | 0) >> 2] = ($2 | 0) < (0 | 0) ? $4 : ($4 | 0) < ($2 | 0) ? $4 : $2;
   stbtt__cff_get_index_28stbtt__buf__29($0 | 0, $1 | 0);
  }
  __stack_pointer = $3 + 32 | 0;
 }
 
 function stbtt_FindGlyphIndex_28stbtt_fontinfo_20const__2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $5 = 0, $3 = 0, $6 = 0, $10 = 0, $9 = 0, $8 = 0, $7 = 0, $14 = 0, $91 = 0, $139 = 0, $172 = 0;
  $3 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        $4 = $0 + $1 | 0;
        $5 = HEAPU8[$4 >> 0] | 0 | ((HEAPU8[($4 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
        $6 = $5 << 8 | 0 | ($5 >>> 8 | 0) | 0;
        switch ($6 & 65535 | 0 | 0) {
        case 2:
         break label$2;
        case 4:
         break label$4;
        case 6:
         break label$5;
        case 0:
         break label$6;
        default:
         break label$3;
        };
       }
       if ((((HEAPU8[($4 + 2 | 0) >> 0] | 0) << 8 | 0 | (HEAPU8[($4 + 3 | 0) >> 0] | 0) | 0) + -6 | 0 | 0) <= ($2 | 0)) {
        break label$2
       }
       return HEAPU8[(($4 + $2 | 0) + 6 | 0) >> 0] | 0 | 0;
      }
      $0 = (HEAPU8[($4 + 6 | 0) >> 0] | 0) << 8 | 0 | (HEAPU8[($4 + 7 | 0) >> 0] | 0) | 0;
      if ($0 >>> 0 > $2 >>> 0) {
       break label$2
      }
      if ((((HEAPU8[($4 + 8 | 0) >> 0] | 0) << 8 | 0 | (HEAPU8[($4 + 9 | 0) >> 0] | 0) | 0) + $0 | 0) >>> 0 <= $2 >>> 0) {
       break label$2
      }
      $2 = $4 + (($2 - $0 | 0) << 1 | 0) | 0;
      return (HEAPU8[($2 + 10 | 0) >> 0] | 0) << 8 | 0 | (HEAPU8[($2 + 11 | 0) >> 0] | 0) | 0 | 0;
     }
     if (($2 | 0) > (65535 | 0)) {
      break label$2
     }
     $7 = (HEAPU8[($4 + 6 | 0) >> 0] | 0) << 8 | 0 | (HEAPU8[($4 + 7 | 0) >> 0] | 0) | 0;
     $8 = 0;
     $5 = (HEAPU8[($4 + 12 | 0) >> 0] | 0) << 8 | 0 | ((HEAPU8[($4 + 13 | 0) >> 0] | 0) & 254 | 0) | 0;
     $91 = $5;
     $9 = $4 + 14 | 0;
     $5 = $5 + $9 | 0;
     $5 = ($1 + (((HEAPU8[$5 >> 0] | 0) << 8 | 0 | (HEAPU8[($5 + 1 | 0) >> 0] | 0) | 0 | 0) > ($2 | 0) ? 0 : $91) | 0) + 12 | 0;
     label$7 : {
      $10 = (HEAPU8[($4 + 10 | 0) >> 0] | 0) << 8 | 0;
      $6 = HEAPU8[($4 + 11 | 0) >> 0] | 0;
      $3 = $10 | $6 | 0;
      if (!($3 & 65535 | 0)) {
       break label$7
      }
      $4 = HEAPU8[($4 + 8 | 0) >> 0] | 0 | ((HEAPU8[($4 + 9 | 0) >> 0] | 0) << 8 | 0) | 0;
      $4 = $4 << 8 | 0 | ($4 >>> 8 | 0) | 0;
      $10 = $10 | $6 | 0;
      label$8 : {
       if (!($6 & 1 | 0)) {
        break label$8
       }
       $4 = ($4 & 65534 | 0) >>> 1 | 0;
       $6 = $4 & 32766 | 0;
       $139 = $6;
       $6 = $6 + ($0 + $5 | 0) | 0;
       $5 = (((HEAPU8[$6 >> 0] | 0) << 8 | 0 | (HEAPU8[($6 + 1 | 0) >> 0] | 0) | 0 | 0) < ($2 | 0) ? $139 : 0) + $5 | 0;
       $3 = $3 + -1 | 0;
      }
      if (($10 & 65535 | 0 | 0) == (1 | 0)) {
       break label$7
      }
      label$9 : while (1) {
       $6 = $4 >>> 2 | 0;
       $10 = $6 & 16382 | 0;
       $4 = ($4 >>> 1 | 0) & 32766 | 0;
       $172 = $4;
       $4 = $4 + ($0 + $5 | 0) | 0;
       $5 = (((HEAPU8[$4 >> 0] | 0) << 8 | 0 | (HEAPU8[($4 + 1 | 0) >> 0] | 0) | 0 | 0) < ($2 | 0) ? $172 : 0) + $5 | 0;
       $4 = $10 + ($0 + $5 | 0) | 0;
       $5 = (((HEAPU8[$4 >> 0] | 0) << 8 | 0 | (HEAPU8[($4 + 1 | 0) >> 0] | 0) | 0 | 0) < ($2 | 0) ? $10 : 0) + $5 | 0;
       $4 = $6 & 16383 | 0;
       $3 = $3 + -2 | 0;
       if ($3 & 65535 | 0) {
        continue label$9
       }
       break label$9;
      };
     }
     label$10 : {
      $5 = (($5 - $1 | 0) + 131060 | 0) & 131070 | 0;
      $4 = ($9 + ($7 & 65534 | 0) | 0) + $5 | 0;
      $3 = (HEAPU8[($4 + 2 | 0) >> 0] | 0) << 8 | 0 | (HEAPU8[($4 + 3 | 0) >> 0] | 0) | 0;
      if (($3 | 0) > ($2 | 0)) {
       break label$10
      }
      $4 = $9 + $5 | 0;
      if (((HEAPU8[$4 >> 0] | 0) << 8 | 0 | (HEAPU8[($4 + 1 | 0) >> 0] | 0) | 0 | 0) < ($2 | 0)) {
       break label$10
      }
      label$11 : {
       $10 = $7 >>> 1 | 0;
       $6 = Math_imul($10, 6);
       $14 = (($9 + $6 | 0) + $5 | 0) + 2 | 0;
       $4 = HEAPU8[$14 >> 0] | 0 | ((HEAPU8[($14 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
       $4 = ($4 << 8 | 0 | ($4 >>> 8 | 0) | 0) & 65535 | 0;
       if ($4) {
        break label$11
       }
       $0 = ($9 + ($10 << 2 | 0) | 0) + $5 | 0;
       $8 = ((HEAPU8[($0 + 2 | 0) >> 0] | 0) << 8 | 0 | (HEAPU8[($0 + 3 | 0) >> 0] | 0) | 0) + $2 | 0;
       break label$10;
      }
      $2 = (((($0 + $4 | 0) + (($2 - $3 | 0) << 1 | 0) | 0) + $1 | 0) + $6 | 0) + $5 | 0;
      $8 = (HEAPU8[($2 + 16 | 0) >> 0] | 0) << 8 | 0 | (HEAPU8[($2 + 17 | 0) >> 0] | 0) | 0;
     }
     return $8 & 65535 | 0 | 0;
    }
    if (($6 & 65534 | 0 | 0) != (12 | 0)) {
     break label$2
    }
    $0 = HEAPU8[($4 + 12 | 0) >> 0] | 0 | ((HEAPU8[($4 + 13 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4 + 14 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($4 + 15 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $1 = $0 << 24 | 0 | (($0 & 65280 | 0) << 8 | 0) | 0 | (($0 >>> 8 | 0) & 65280 | 0 | ($0 >>> 24 | 0) | 0) | 0;
    if (($1 | 0) < (1 | 0)) {
     break label$2
    }
    $10 = $4 + 16 | 0;
    $5 = 0;
    label$12 : while (1) {
     label$13 : {
      label$14 : {
       $4 = (($1 - $5 | 0) >> 1 | 0) + $5 | 0;
       $3 = $10 + Math_imul($4, 12) | 0;
       $0 = HEAPU8[$3 >> 0] | 0 | ((HEAPU8[($3 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($3 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($3 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       $9 = $0 << 24 | 0 | (($0 & 65280 | 0) << 8 | 0) | 0 | (($0 >>> 8 | 0) & 65280 | 0 | ($0 >>> 24 | 0) | 0) | 0;
       if ($9 >>> 0 <= $2 >>> 0) {
        break label$14
       }
       $1 = $4;
       break label$13;
      }
      $0 = HEAPU8[($3 + 4 | 0) >> 0] | 0 | ((HEAPU8[($3 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($3 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($3 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      if (($0 << 24 | 0 | (($0 & 65280 | 0) << 8 | 0) | 0 | (($0 >>> 8 | 0) & 65280 | 0 | ($0 >>> 24 | 0) | 0) | 0) >>> 0 >= $2 >>> 0) {
       break label$1
      }
      $5 = $4 + 1 | 0;
     }
     $3 = 0;
     if (($1 | 0) > ($5 | 0)) {
      continue label$12
     }
     break label$12;
    };
   }
   return $3 | 0;
  }
  $0 = HEAPU8[($3 + 8 | 0) >> 0] | 0 | ((HEAPU8[($3 + 9 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($3 + 10 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($3 + 11 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  return ($0 << 24 | 0 | (($0 & 65280 | 0) << 8 | 0) | 0 | (($0 >>> 8 | 0) & 65280 | 0 | ($0 >>> 24 | 0) | 0) | 0) + (($6 & 65535 | 0 | 0) == (12 | 0) ? $2 - $9 | 0 : 0) | 0 | 0;
 }
 
 function stbtt_GetGlyphBitmapBoxSubpixel_28stbtt_fontinfo_20const__2c_20int_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int__2c_20int__2c_20int__2c_20int__29($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = Math_fround($3);
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $10 = 0, $12 = Math_fround(0), $8 = 0, $9 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $11 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $8 = __stack_pointer - 48 | 0;
  __stack_pointer = $8;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (!(HEAP32[($0 + 64 | 0) >> 2] | 0)) {
       break label$4
      }
      HEAP32[($8 + 44 | 0) >> 2] = 0;
      $9 = $8 + 36 | 0;
      i64toi32_i32$1 = $9;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $10 = $8 + 28 | 0;
      i64toi32_i32$1 = $10;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $8 + 20 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $8 + 12 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $8;
      i64toi32_i32$0 = 0;
      HEAP32[($8 + 4 | 0) >> 2] = 0;
      HEAP32[($8 + 8 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[$8 >> 2] = 1;
      $0 = stbtt__run_charstring_28stbtt_fontinfo_20const__2c_20int_2c_20stbtt__csctx__29($0 | 0, $1 | 0, $8 | 0) | 0;
      $1 = (wasm2js_i32$0 = HEAP32[$9 >> 2] | 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = $0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
      $9 = (wasm2js_i32$0 = HEAP32[$10 >> 2] | 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = $0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
      $10 = (wasm2js_i32$0 = HEAP32[($8 + 32 | 0) >> 2] | 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = $0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
      $0 = (wasm2js_i32$0 = HEAP32[($8 + 24 | 0) >> 2] | 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = $0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
      break label$3;
     }
     label$5 : {
      if ((HEAP32[($0 + 12 | 0) >> 2] | 0 | 0) <= ($1 | 0)) {
       break label$5
      }
      $9 = HEAP32[($0 + 52 | 0) >> 2] | 0;
      if (($9 | 0) > (1 | 0)) {
       break label$5
      }
      $11 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      $10 = $11 + (HEAP32[($0 + 16 | 0) >> 2] | 0) | 0;
      label$6 : {
       label$7 : {
        if ($9) {
         break label$7
        }
        $1 = $10 + ($1 << 1 | 0) | 0;
        $9 = (HEAPU8[($1 + 3 | 0) >> 0] | 0) << 1 | 0 | ((HEAPU8[($1 + 2 | 0) >> 0] | 0) << 9 | 0) | 0;
        $1 = (HEAPU8[($1 + 1 | 0) >> 0] | 0) << 1 | 0 | ((HEAPU8[$1 >> 0] | 0) << 9 | 0) | 0;
        break label$6;
       }
       $10 = $10 + ($1 << 2 | 0) | 0;
       $1 = HEAPU8[($10 + 4 | 0) >> 0] | 0 | ((HEAPU8[($10 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       $9 = $1 << 24 | 0 | (($1 & 65280 | 0) << 8 | 0) | 0 | (($1 >>> 8 | 0) & 65280 | 0 | ($1 >>> 24 | 0) | 0) | 0;
       $1 = HEAPU8[$10 >> 0] | 0 | ((HEAPU8[($10 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       $1 = $1 << 24 | 0 | (($1 & 65280 | 0) << 8 | 0) | 0 | (($1 >>> 8 | 0) & 65280 | 0 | ($1 >>> 24 | 0) | 0) | 0;
      }
      if (($1 | 0) == ($9 | 0)) {
       break label$5
      }
      $0 = $1 + (HEAP32[($0 + 24 | 0) >> 2] | 0) | 0;
      if (($0 | 0) < (0 | 0)) {
       break label$5
      }
      $0 = $11 + $0 | 0;
      $1 = HEAPU8[($0 + 8 | 0) >> 0] | 0 | ((HEAPU8[($0 + 9 | 0) >> 0] | 0) << 8 | 0) | 0;
      $1 = ($1 << 8 | 0 | ($1 >>> 8 | 0) | 0) << 16 >> 16;
      $9 = HEAPU8[($0 + 6 | 0) >> 0] | 0 | ((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 8 | 0) | 0;
      $9 = ($9 << 8 | 0 | ($9 >>> 8 | 0) | 0) << 16 >> 16;
      $10 = HEAPU8[($0 + 4 | 0) >> 0] | 0 | ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 8 | 0) | 0;
      $10 = ($10 << 8 | 0 | ($10 >>> 8 | 0) | 0) << 16 >> 16;
      $0 = HEAPU8[($0 + 2 | 0) >> 0] | 0 | ((HEAPU8[($0 + 3 | 0) >> 0] | 0) << 8 | 0) | 0;
      $0 = ($0 << 8 | 0 | ($0 >>> 8 | 0) | 0) << 16 >> 16;
      break label$3;
     }
     label$8 : {
      if (!$4) {
       break label$8
      }
      HEAP32[$4 >> 2] = 0;
     }
     label$9 : {
      if (!$5) {
       break label$9
      }
      HEAP32[$5 >> 2] = 0;
     }
     label$10 : {
      if (!$6) {
       break label$10
      }
      HEAP32[$6 >> 2] = 0;
     }
     $0 = 0;
     if ($7) {
      break label$2
     }
     break label$1;
    }
    label$11 : {
     if (!$4) {
      break label$11
     }
     label$12 : {
      label$13 : {
       $12 = Math_fround(Math_fround(Math_fround($0 | 0) * $2) + Math_fround(0.0));
       if (!(Math_fround(Math_abs($12)) < Math_fround(2147483648.0))) {
        break label$13
       }
       $0 = ~~$12;
       break label$12;
      }
      $0 = -2147483648;
     }
     label$14 : {
      label$15 : {
       $12 = Math_fround($0 - (($12 >= Math_fround(0.0) ^ -1 | 0) & $12 != Math_fround($0 | 0) | 0) | 0 | 0);
       if (!(Math_fround(Math_abs($12)) < Math_fround(2147483648.0))) {
        break label$15
       }
       $0 = ~~$12;
       break label$14;
      }
      $0 = -2147483648;
     }
     HEAP32[$4 >> 2] = $0;
    }
    label$16 : {
     if (!$5) {
      break label$16
     }
     label$17 : {
      label$18 : {
       $12 = Math_fround(Math_fround(Math_fround(0 - $1 | 0 | 0) * $3) + Math_fround(0.0));
       if (!(Math_fround(Math_abs($12)) < Math_fround(2147483648.0))) {
        break label$18
       }
       $0 = ~~$12;
       break label$17;
      }
      $0 = -2147483648;
     }
     label$19 : {
      label$20 : {
       $12 = Math_fround($0 - (($12 >= Math_fround(0.0) ^ -1 | 0) & $12 != Math_fround($0 | 0) | 0) | 0 | 0);
       if (!(Math_fround(Math_abs($12)) < Math_fround(2147483648.0))) {
        break label$20
       }
       $0 = ~~$12;
       break label$19;
      }
      $0 = -2147483648;
     }
     HEAP32[$5 >> 2] = $0;
    }
    label$21 : {
     if (!$6) {
      break label$21
     }
     label$22 : {
      label$23 : {
       $2 = Math_fround(Math_ceil(Math_fround(Math_fround(Math_fround($9 | 0) * $2) + Math_fround(0.0))));
       if (!(Math_fround(Math_abs($2)) < Math_fround(2147483648.0))) {
        break label$23
       }
       $0 = ~~$2;
       break label$22;
      }
      $0 = -2147483648;
     }
     HEAP32[$6 >> 2] = $0;
    }
    if (!$7) {
     break label$1
    }
    label$24 : {
     $3 = Math_fround(Math_ceil(Math_fround(Math_fround(Math_fround(0 - $10 | 0 | 0) * $3) + Math_fround(0.0))));
     if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
      break label$24
     }
     $0 = ~~$3;
     break label$2;
    }
    $0 = -2147483648;
   }
   HEAP32[$7 >> 2] = $0;
  }
  __stack_pointer = $8 + 48 | 0;
 }
 
 function ImFontAtlasBuildPackCustomRects_28ImFontAtlas__2c_20void__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $5 = 0, $7 = 0, $9 = 0, $3 = 0, $4 = 0, $10 = 0, $6 = 0, $8 = 0;
  $2 = 0;
  label$1 : {
   $3 = HEAP32[($0 + 72 | 0) >> 2] | 0;
   if (($3 | 0) < (1 | 0)) {
    break label$1
   }
   $2 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul(($3 | 0) > (8 | 0) ? $3 : 8, 24) | 0) | 0;
  }
  $4 = memset($2 | 0, 0 | 0, Math_imul($3, 24) | 0) | 0;
  label$2 : {
   $5 = HEAP32[($0 + 72 | 0) >> 2] | 0;
   if (($5 | 0) < (1 | 0)) {
    break label$2
   }
   $6 = $5 & 1 | 0;
   $7 = HEAP32[($0 + 80 | 0) >> 2] | 0;
   $2 = 0;
   label$3 : {
    if (($5 | 0) == (1 | 0)) {
     break label$3
    }
    $8 = $5 & -2 | 0;
    $2 = 0;
    $5 = 0;
    label$4 : while (1) {
     $9 = $4 + Math_imul($2, 24) | 0;
     $10 = $7 + Math_imul($2, 28) | 0;
     HEAP32[($9 + 4 | 0) >> 2] = HEAPU16[$10 >> 1] | 0;
     HEAP32[($9 + 8 | 0) >> 2] = HEAPU16[($10 + 2 | 0) >> 1] | 0;
     $9 = $2 | 1 | 0;
     $10 = $4 + Math_imul($9, 24) | 0;
     $9 = $7 + Math_imul($9, 28) | 0;
     HEAP32[($10 + 4 | 0) >> 2] = HEAPU16[$9 >> 1] | 0;
     HEAP32[($10 + 8 | 0) >> 2] = HEAPU16[($9 + 2 | 0) >> 1] | 0;
     $2 = $2 + 2 | 0;
     $5 = $5 + 2 | 0;
     if (($5 | 0) != ($8 | 0)) {
      continue label$4
     }
     break label$4;
    };
   }
   if (!$6) {
    break label$2
   }
   $5 = $4 + Math_imul($2, 24) | 0;
   $2 = $7 + Math_imul($2, 28) | 0;
   HEAP32[($5 + 4 | 0) >> 2] = HEAPU16[$2 >> 1] | 0;
   HEAP32[($5 + 8 | 0) >> 2] = HEAPU16[($2 + 2 | 0) >> 1] | 0;
  }
  stbrp_pack_rects_28stbrp_context__2c_20stbrp_rect__2c_20int_29($1 | 0, $4 | 0, $3 | 0);
  label$5 : {
   label$6 : {
    label$7 : {
     if (($3 | 0) < (1 | 0)) {
      break label$7
     }
     $2 = 0;
     label$8 : while (1) {
      label$9 : {
       $7 = $4 + Math_imul($2, 24) | 0;
       if (!(HEAP32[($7 + 20 | 0) >> 2] | 0)) {
        break label$9
       }
       $5 = (HEAP32[($0 + 80 | 0) >> 2] | 0) + Math_imul($2, 28) | 0;
       HEAP16[($5 + 4 | 0) >> 1] = HEAP32[($7 + 12 | 0) >> 2] | 0;
       $9 = HEAP32[($7 + 16 | 0) >> 2] | 0;
       HEAP16[($5 + 6 | 0) >> 1] = $9;
       $5 = HEAP32[($0 + 40 | 0) >> 2] | 0;
       $7 = $9 + (HEAP32[($7 + 8 | 0) >> 2] | 0) | 0;
       HEAP32[($0 + 40 | 0) >> 2] = ($5 | 0) > ($7 | 0) ? $5 : $7;
      }
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($3 | 0)) {
       continue label$8
      }
      break label$6;
     };
    }
    if (!$4) {
     break label$5
    }
   }
   ImGui__MemFree_28void__29($4 | 0);
  }
 }
 
 function stbrp_pack_rects_28stbrp_context__2c_20stbrp_rect__2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $4 = 0, $8 = 0, $3 = 0, $6 = 0, $7 = 0, $22 = 0, $20 = 0, $23 = 0, $14 = 0, $15 = 0, $26 = 0, $28 = 0, $21 = 0, $24 = 0, $11 = 0, $25 = 0, $18 = 0, $27 = 0, $29 = 0, $9 = 0, $13 = 0, $10 = 0, $16 = 0, $17 = 0, $19 = 0, $12 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   if (($2 | 0) < (1 | 0)) {
    break label$1
   }
   $3 = $2 & 7 | 0;
   $4 = 0;
   $5 = 0;
   label$2 : {
    if ($2 >>> 0 < 8 >>> 0) {
     break label$2
    }
    $6 = $2 & -8 | 0;
    $5 = 0;
    $7 = 0;
    label$3 : while (1) {
     HEAP32[(($1 + Math_imul($5, 24) | 0) + 20 | 0) >> 2] = $5;
     $8 = $5 | 1 | 0;
     HEAP32[(($1 + Math_imul($8, 24) | 0) + 20 | 0) >> 2] = $8;
     $8 = $5 | 2 | 0;
     HEAP32[(($1 + Math_imul($8, 24) | 0) + 20 | 0) >> 2] = $8;
     $8 = $5 | 3 | 0;
     HEAP32[(($1 + Math_imul($8, 24) | 0) + 20 | 0) >> 2] = $8;
     $8 = $5 | 4 | 0;
     HEAP32[(($1 + Math_imul($8, 24) | 0) + 20 | 0) >> 2] = $8;
     $8 = $5 | 5 | 0;
     HEAP32[(($1 + Math_imul($8, 24) | 0) + 20 | 0) >> 2] = $8;
     $8 = $5 | 6 | 0;
     HEAP32[(($1 + Math_imul($8, 24) | 0) + 20 | 0) >> 2] = $8;
     $8 = $5 | 7 | 0;
     HEAP32[(($1 + Math_imul($8, 24) | 0) + 20 | 0) >> 2] = $8;
     $5 = $5 + 8 | 0;
     $7 = $7 + 8 | 0;
     if (($7 | 0) != ($6 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   if (!$3) {
    break label$1
   }
   label$4 : while (1) {
    HEAP32[(($1 + Math_imul($5, 24) | 0) + 20 | 0) >> 2] = $5;
    $5 = $5 + 1 | 0;
    $4 = $4 + 1 | 0;
    if (($4 | 0) != ($3 | 0)) {
     continue label$4
    }
    break label$4;
   };
  }
  label$5 : {
   if ($2 >>> 0 < 2 >>> 0) {
    break label$5
   }
   qsort($1 | 0, $2 | 0, 24 | 0, 20 | 0);
  }
  label$6 : {
   if (($2 | 0) < (1 | 0)) {
    break label$6
   }
   $9 = $0 + 24 | 0;
   $10 = 0;
   label$7 : while (1) {
    label$8 : {
     label$9 : {
      label$10 : {
       $11 = $1 + Math_imul($10, 24) | 0;
       $12 = HEAP32[($11 + 4 | 0) >> 2] | 0;
       if (!$12) {
        break label$10
       }
       $13 = HEAP32[($11 + 8 | 0) >> 2] | 0;
       if ($13) {
        break label$9
       }
      }
      i64toi32_i32$0 = 0;
      HEAP32[($11 + 12 | 0) >> 2] = 0;
      HEAP32[($11 + 16 | 0) >> 2] = i64toi32_i32$0;
      break label$8;
     }
     label$11 : {
      $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      $4 = ($12 + $5 | 0) + -1 | 0;
      $14 = $4 - (($4 | 0) % ($5 | 0) | 0) | 0;
      $15 = HEAP32[$0 >> 2] | 0;
      if (($14 | 0) > ($15 | 0)) {
       break label$11
      }
      $16 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      if (($16 | 0) < ($13 | 0)) {
       break label$11
      }
      label$12 : {
       label$13 : {
        label$14 : {
         label$15 : {
          $7 = HEAP32[$9 >> 2] | 0;
          $17 = HEAP32[$7 >> 2] | 0;
          $18 = $17 + $14 | 0;
          if (($18 | 0) <= ($15 | 0)) {
           break label$15
          }
          $19 = HEAP32[($0 + 16 | 0) >> 2] | 0;
          $20 = 0;
          $21 = 1073741824;
          $22 = 1073741824;
          $23 = 0;
          break label$14;
         }
         $19 = HEAP32[($0 + 16 | 0) >> 2] | 0;
         $20 = 0;
         $21 = 1073741824;
         $24 = $17;
         $25 = $7;
         $23 = $9;
         $22 = 1073741824;
         label$16 : {
          label$17 : {
           if (($14 | 0) < (1 | 0)) {
            break label$17
           }
           label$18 : while (1) {
            $4 = $24;
            $26 = 0;
            $5 = 0;
            $3 = 0;
            $8 = $25;
            label$19 : while (1) {
             label$20 : {
              label$21 : {
               $6 = HEAP32[($8 + 4 | 0) >> 2] | 0;
               if (($6 | 0) > ($3 | 0)) {
                break label$21
               }
               $8 = HEAP32[($8 + 8 | 0) >> 2] | 0;
               $27 = HEAP32[$8 >> 2] | 0;
               $4 = $27 - $4 | 0;
               $28 = ($4 + $5 | 0 | 0) > ($14 | 0) ? $14 - $5 | 0 : $4;
               $29 = Math_imul($28, $3 - $6 | 0);
               $4 = $27;
               break label$20;
              }
              $29 = Math_imul($6 - $3 | 0, $5);
              $8 = HEAP32[($8 + 8 | 0) >> 2] | 0;
              $3 = HEAP32[$8 >> 2] | 0;
              label$22 : {
               label$23 : {
                if (($4 | 0) < ($24 | 0)) {
                 break label$23
                }
                $28 = $3 - $4 | 0;
                break label$22;
               }
               $28 = $3 - $24 | 0;
              }
              $4 = $3;
              $3 = $6;
             }
             $5 = $28 + $5 | 0;
             $26 = $29 + $26 | 0;
             if (($4 | 0) < ($18 | 0)) {
              continue label$19
             }
             break label$19;
            };
            label$24 : {
             label$25 : {
              if (!$19) {
               break label$25
              }
              if (($3 + $13 | 0 | 0) > ($16 | 0)) {
               break label$24
              }
              label$26 : {
               if (($3 | 0) < ($22 | 0)) {
                break label$26
               }
               if (($3 | 0) != ($22 | 0)) {
                break label$24
               }
               if (($26 | 0) >= ($21 | 0)) {
                break label$24
               }
              }
              $22 = $3;
              $20 = $23;
              $21 = $26;
              break label$24;
             }
             $5 = ($3 | 0) < ($22 | 0);
             $20 = $5 ? $23 : $20;
             $22 = $5 ? $3 : $22;
            }
            $23 = $25 + 8 | 0;
            $25 = HEAP32[($25 + 8 | 0) >> 2] | 0;
            $24 = HEAP32[$25 >> 2] | 0;
            $18 = $24 + $14 | 0;
            if (($18 | 0) <= ($15 | 0)) {
             continue label$18
            }
            break label$16;
           };
          }
          $22 = 0;
          $21 = 1073741824;
          if (!$19) {
           break label$13
          }
          $20 = 0;
          $5 = $7;
          $4 = $9;
          $22 = 1073741824;
          label$27 : while (1) {
           label$28 : {
            label$29 : {
             if (($22 | 0) > (0 | 0)) {
              break label$29
             }
             if ($22) {
              break label$28
             }
             if (($21 | 0) < (1 | 0)) {
              break label$28
             }
            }
            $22 = 0;
            $20 = $4;
            $21 = 0;
           }
           $4 = $5 + 8 | 0;
           $5 = HEAP32[($5 + 8 | 0) >> 2] | 0;
           if (((HEAP32[$5 >> 2] | 0) + $14 | 0 | 0) <= ($15 | 0)) {
            continue label$27
           }
           break label$27;
          };
         }
         label$30 : {
          if ($20) {
           break label$30
          }
          $20 = 0;
          $23 = 0;
          break label$14;
         }
         $23 = HEAP32[(HEAP32[$20 >> 2] | 0) >> 2] | 0;
        }
        label$31 : {
         if (($19 | 0) != (1 | 0)) {
          break label$31
         }
         $15 = $7;
         label$32 : {
          if (($17 | 0) >= ($14 | 0)) {
           break label$32
          }
          label$33 : while (1) {
           $15 = HEAP32[($15 + 8 | 0) >> 2] | 0;
           if ((HEAP32[$15 >> 2] | 0 | 0) < ($14 | 0)) {
            continue label$33
           }
           break label$33;
          };
         }
         $29 = $9;
         label$34 : while (1) {
          $24 = HEAP32[$15 >> 2] | 0;
          $3 = $24 - $14 | 0;
          $5 = $29;
          $4 = $7;
          label$35 : while (1) {
           $29 = $5;
           $7 = $4;
           $5 = $4 + 8 | 0;
           $4 = HEAP32[($4 + 8 | 0) >> 2] | 0;
           if ((HEAP32[$4 >> 2] | 0 | 0) <= ($3 | 0)) {
            continue label$35
           }
           break label$35;
          };
          $28 = 0;
          $5 = 0;
          $6 = 0;
          $8 = $7;
          label$36 : {
           $4 = HEAP32[$8 >> 2] | 0;
           if (($4 | 0) >= ($24 | 0)) {
            break label$36
           }
           label$37 : while (1) {
            label$38 : {
             label$39 : {
              label$40 : {
               $26 = HEAP32[($8 + 4 | 0) >> 2] | 0;
               if (($26 | 0) <= ($6 | 0)) {
                break label$40
               }
               $18 = Math_imul($26 - $6 | 0, $5);
               $8 = HEAP32[($8 + 8 | 0) >> 2] | 0;
               $6 = HEAP32[$8 >> 2] | 0;
               label$41 : {
                if (($4 | 0) >= ($3 | 0)) {
                 break label$41
                }
                $27 = $6 - $3 | 0;
                break label$39;
               }
               $27 = $6 - $4 | 0;
               break label$39;
              }
              $8 = HEAP32[($8 + 8 | 0) >> 2] | 0;
              $25 = HEAP32[$8 >> 2] | 0;
              $4 = $25 - $4 | 0;
              $27 = ($4 + $5 | 0 | 0) > ($14 | 0) ? $14 - $5 | 0 : $4;
              $18 = Math_imul($27, $6 - $26 | 0);
              $4 = $25;
              break label$38;
             }
             $4 = $6;
             $6 = $26;
            }
            $5 = $27 + $5 | 0;
            $28 = $18 + $28 | 0;
            if (($4 | 0) < ($24 | 0)) {
             continue label$37
            }
            break label$37;
           };
          }
          label$42 : {
           if (($6 + $13 | 0 | 0) > ($16 | 0)) {
            break label$42
           }
           if (($6 | 0) > ($22 | 0)) {
            break label$42
           }
           label$43 : {
            if (($6 | 0) < ($22 | 0)) {
             break label$43
            }
            if (($28 | 0) < ($21 | 0)) {
             break label$43
            }
            if (($28 | 0) != ($21 | 0)) {
             break label$42
            }
            if (($3 | 0) >= ($23 | 0)) {
             break label$42
            }
           }
           $22 = $6;
           $20 = $29;
           $23 = $3;
           $21 = $28;
          }
          $15 = HEAP32[($15 + 8 | 0) >> 2] | 0;
          if ($15) {
           continue label$34
          }
          break label$34;
         };
        }
        if (!$20) {
         break label$11
        }
        break label$12;
       }
       $20 = $9;
       $23 = $17;
      }
      $5 = $22 + $13 | 0;
      if (($5 | 0) > ($16 | 0)) {
       break label$11
      }
      $6 = HEAP32[($0 + 28 | 0) >> 2] | 0;
      if (!$6) {
       break label$11
      }
      HEAP32[($6 + 4 | 0) >> 2] = $5;
      HEAP32[$6 >> 2] = $23;
      HEAP32[($0 + 28 | 0) >> 2] = HEAP32[($6 + 8 | 0) >> 2] | 0;
      label$44 : {
       $4 = HEAP32[$20 >> 2] | 0;
       if ((HEAP32[$4 >> 2] | 0 | 0) >= ($23 | 0)) {
        break label$44
       }
       $20 = $4 + 8 | 0;
       $4 = HEAP32[($4 + 8 | 0) >> 2] | 0;
      }
      HEAP32[$20 >> 2] = $6;
      $3 = $23 + $12 | 0;
      label$45 : {
       label$46 : {
        $7 = HEAP32[($4 + 8 | 0) >> 2] | 0;
        if ($7) {
         break label$46
        }
        $5 = $4;
        break label$45;
       }
       $8 = $4 + 8 | 0;
       label$47 : while (1) {
        label$48 : {
         $5 = $7;
         if ((HEAP32[$5 >> 2] | 0 | 0) <= ($3 | 0)) {
          break label$48
         }
         $5 = $4;
         break label$45;
        }
        HEAP32[$8 >> 2] = HEAP32[($0 + 28 | 0) >> 2] | 0;
        HEAP32[($0 + 28 | 0) >> 2] = $4;
        $8 = $5 + 8 | 0;
        $4 = $5;
        $7 = HEAP32[($5 + 8 | 0) >> 2] | 0;
        if ($7) {
         continue label$47
        }
        break label$47;
       };
      }
      HEAP32[($6 + 8 | 0) >> 2] = $5;
      label$49 : {
       if ((HEAP32[$5 >> 2] | 0 | 0) >= ($3 | 0)) {
        break label$49
       }
       HEAP32[$5 >> 2] = $3;
      }
      HEAP32[($11 + 16 | 0) >> 2] = $22;
      HEAP32[($11 + 12 | 0) >> 2] = $23;
      break label$8;
     }
     i64toi32_i32$0 = 2147483647;
     HEAP32[($11 + 12 | 0) >> 2] = 2147483647;
     HEAP32[($11 + 16 | 0) >> 2] = i64toi32_i32$0;
    }
    $10 = $10 + 1 | 0;
    if (($10 | 0) != ($2 | 0)) {
     continue label$7
    }
    break label$7;
   };
  }
  label$50 : {
   if ($2 >>> 0 < 2 >>> 0) {
    break label$50
   }
   qsort($1 | 0, $2 | 0, 24 | 0, 21 | 0);
  }
  label$51 : {
   if (($2 | 0) < (1 | 0)) {
    break label$51
   }
   $26 = $2 & 1 | 0;
   $5 = 0;
   label$52 : {
    if (($2 | 0) == (1 | 0)) {
     break label$52
    }
    $6 = $2 & -2 | 0;
    $3 = 1;
    $5 = 0;
    $8 = 0;
    label$53 : while (1) {
     label$54 : {
      label$55 : {
       $4 = $1 + Math_imul($5, 24) | 0;
       if ((HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) == (2147483647 | 0)) {
        break label$55
       }
       $7 = 1;
       break label$54;
      }
      $7 = (HEAP32[($4 + 16 | 0) >> 2] | 0 | 0) != (2147483647 | 0);
      $3 = $7 ? $3 : 0;
     }
     HEAP32[($4 + 20 | 0) >> 2] = $7;
     $4 = 1;
     label$56 : {
      $7 = $1 + Math_imul($5 | 1 | 0, 24) | 0;
      if ((HEAP32[($7 + 12 | 0) >> 2] | 0 | 0) != (2147483647 | 0)) {
       break label$56
      }
      $4 = (HEAP32[($7 + 16 | 0) >> 2] | 0 | 0) != (2147483647 | 0);
      $3 = $4 ? $3 : 0;
     }
     HEAP32[($7 + 20 | 0) >> 2] = $4;
     $5 = $5 + 2 | 0;
     $8 = $8 + 2 | 0;
     if (($8 | 0) != ($6 | 0)) {
      continue label$53
     }
     break label$53;
    };
   }
   if (!$26) {
    break label$51
   }
   $4 = 1;
   label$57 : {
    $5 = $1 + Math_imul($5, 24) | 0;
    if ((HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) != (2147483647 | 0)) {
     break label$57
    }
    $4 = (HEAP32[($5 + 16 | 0) >> 2] | 0 | 0) != (2147483647 | 0);
   }
   HEAP32[($5 + 20 | 0) >> 2] = $4;
  }
 }
 
 function stbtt_GetGlyphShape_28stbtt_fontinfo_20const__2c_20int_2c_20stbtt_vertex___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $7 = 0, $9 = 0, $6 = 0, $4 = 0, $13 = 0, i64toi32_i32$1 = 0, $3 = 0, $12 = 0, i64toi32_i32$0 = 0, $5 = 0, $11 = 0, $14 = 0, $10 = 0, $30 = Math_fround(0), $17 = 0, $18 = 0, $19 = 0, $15 = 0, $26 = Math_fround(0), $21 = 0, $24 = Math_fround(0), $25 = Math_fround(0), $27 = Math_fround(0), $16 = 0, $20 = 0, $31 = Math_fround(0), $32 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $8 = 0, $35 = 0, $28 = Math_fround(0), $29 = Math_fround(0);
  $3 = __stack_pointer - 96 | 0;
  __stack_pointer = $3;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (HEAP32[($0 + 64 | 0) >> 2] | 0) {
       break label$4
      }
      label$5 : {
       label$6 : {
        if ((HEAP32[($0 + 12 | 0) >> 2] | 0 | 0) <= ($1 | 0)) {
         break label$6
        }
        $4 = HEAP32[($0 + 52 | 0) >> 2] | 0;
        if (($4 | 0) > (1 | 0)) {
         break label$6
        }
        $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        $6 = $5 + (HEAP32[($0 + 16 | 0) >> 2] | 0) | 0;
        label$7 : {
         label$8 : {
          if ($4) {
           break label$8
          }
          $1 = $6 + ($1 << 1 | 0) | 0;
          $4 = (HEAPU8[($1 + 3 | 0) >> 0] | 0) << 1 | 0 | ((HEAPU8[($1 + 2 | 0) >> 0] | 0) << 9 | 0) | 0;
          $1 = (HEAPU8[($1 + 1 | 0) >> 0] | 0) << 1 | 0 | ((HEAPU8[$1 >> 0] | 0) << 9 | 0) | 0;
          break label$7;
         }
         $6 = $6 + ($1 << 2 | 0) | 0;
         $1 = HEAPU8[($6 + 4 | 0) >> 0] | 0 | ((HEAPU8[($6 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($6 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($6 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
         $4 = $1 << 24 | 0 | (($1 & 65280 | 0) << 8 | 0) | 0 | (($1 >>> 8 | 0) & 65280 | 0 | ($1 >>> 24 | 0) | 0) | 0;
         $1 = HEAPU8[$6 >> 0] | 0 | ((HEAPU8[($6 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($6 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($6 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
         $1 = $1 << 24 | 0 | (($1 & 65280 | 0) << 8 | 0) | 0 | (($1 >>> 8 | 0) & 65280 | 0 | ($1 >>> 24 | 0) | 0) | 0;
        }
        if (($1 | 0) != ($4 | 0)) {
         break label$5
        }
       }
       $7 = 0;
       break label$2;
      }
      $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
      $7 = 0;
      HEAP32[$2 >> 2] = 0;
      $1 = $1 + $4 | 0;
      if (($1 | 0) < (0 | 0)) {
       break label$1
      }
      $4 = $5 + $1 | 0;
      $1 = HEAPU8[$4 >> 0] | 0 | ((HEAPU8[($4 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
      $1 = ($1 << 8 | 0 | ($1 >>> 8 | 0) | 0) << 16 >> 16;
      if (($1 | 0) < (1 | 0)) {
       break label$3
      }
      $8 = $4 + 10 | 0;
      $6 = ($1 & 65535 | 0) << 1 | 0;
      $1 = $8 + $6 | 0;
      $0 = HEAPU8[$1 >> 0] | 0;
      $9 = HEAPU8[($1 + 1 | 0) >> 0] | 0;
      $4 = $1 + -2 | 0;
      $5 = (HEAPU8[$4 >> 0] | 0) << 8 | 0 | (HEAPU8[($4 + 1 | 0) >> 0] | 0) | 0;
      $4 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($5 + $6 | 0, 14) + 14 | 0 | 0) | 0;
      if (!$4) {
       break label$1
      }
      $7 = $5 + 1 | 0;
      $10 = $7 & 1 | 0;
      $1 = ($1 + ($0 << 8 | 0 | $9 | 0) | 0) + 2 | 0;
      label$9 : {
       label$10 : {
        if ($5) {
         break label$10
        }
        $7 = 0;
        $9 = 0;
        $0 = 0;
        break label$9;
       }
       $11 = $7 & 131070 | 0;
       $7 = 0;
       $9 = 0;
       $0 = 0;
       $12 = 0;
       label$11 : while (1) {
        label$12 : {
         label$13 : {
          if ($9 & 255 | 0) {
           break label$13
          }
          label$14 : {
           $7 = HEAPU8[$1 >> 0] | 0;
           if ($7 & 8 | 0) {
            break label$14
           }
           $13 = $1 + 1 | 0;
           $9 = 0;
           break label$12;
          }
          $13 = $1 + 2 | 0;
          $9 = HEAPU8[($1 + 1 | 0) >> 0] | 0;
          break label$12;
         }
         $9 = $9 + -1 | 0;
         $13 = $1;
        }
        HEAP8[(($4 + Math_imul($0 + $6 | 0, 14) | 0) + 12 | 0) >> 0] = $7;
        $14 = $0 | 1 | 0;
        label$15 : {
         label$16 : {
          if (!($9 & 255 | 0)) {
           break label$16
          }
          $9 = $9 + -1 | 0;
          $1 = $13;
          break label$15;
         }
         label$17 : {
          $7 = HEAPU8[$13 >> 0] | 0;
          if ($7 & 8 | 0) {
           break label$17
          }
          $1 = $13 + 1 | 0;
          $9 = 0;
          break label$15;
         }
         $1 = $13 + 2 | 0;
         $9 = HEAPU8[($13 + 1 | 0) >> 0] | 0;
        }
        HEAP8[(($4 + Math_imul($14 + $6 | 0, 14) | 0) + 12 | 0) >> 0] = $7;
        $0 = $0 + 2 | 0;
        $12 = $12 + 2 | 0;
        if (($12 | 0) != ($11 | 0)) {
         continue label$11
        }
        break label$11;
       };
      }
      label$18 : {
       if (!$10) {
        break label$18
       }
       label$19 : {
        if ($9 & 255 | 0) {
         break label$19
        }
        $7 = HEAPU8[$1 >> 0] | 0;
        $1 = $1 + ($7 & 8 | 0 ? 2 : 1) | 0;
       }
       HEAP8[(($4 + Math_imul($0 + $6 | 0, 14) | 0) + 12 | 0) >> 0] = $7;
      }
      $9 = 0;
      $7 = 0;
      label$20 : while (1) {
       label$21 : {
        label$22 : {
         $0 = $9;
         $9 = $4 + Math_imul($0 + $6 | 0, 14) | 0;
         $13 = HEAPU8[($9 + 12 | 0) >> 0] | 0;
         if (!($13 & 2 | 0)) {
          break label$22
         }
         $12 = HEAPU8[$1 >> 0] | 0;
         $7 = ($13 & 16 | 0 ? $12 : 0 - $12 | 0) + $7 | 0;
         $1 = $1 + 1 | 0;
         break label$21;
        }
        if ($13 & 16 | 0) {
         break label$21
        }
        $7 = $7 + ((HEAPU8[$1 >> 0] | 0) << 8 | 0 | (HEAPU8[($1 + 1 | 0) >> 0] | 0) | 0) | 0;
        $1 = $1 + 2 | 0;
       }
       HEAP16[$9 >> 1] = $7;
       $9 = $0 + 1 | 0;
       if (($0 | 0) != ($5 | 0)) {
        continue label$20
       }
       break label$20;
      };
      $9 = 0;
      $7 = 0;
      label$23 : while (1) {
       label$24 : {
        label$25 : {
         $0 = $9;
         $9 = $4 + Math_imul($0 + $6 | 0, 14) | 0;
         $13 = HEAPU8[($9 + 12 | 0) >> 0] | 0;
         if (!($13 & 4 | 0)) {
          break label$25
         }
         $12 = HEAPU8[$1 >> 0] | 0;
         $7 = ($13 & 32 | 0 ? $12 : 0 - $12 | 0) + $7 | 0;
         $1 = $1 + 1 | 0;
         break label$24;
        }
        if ($13 & 32 | 0) {
         break label$24
        }
        $7 = $7 + ((HEAPU8[$1 >> 0] | 0) << 8 | 0 | (HEAPU8[($1 + 1 | 0) >> 0] | 0) | 0) | 0;
        $1 = $1 + 2 | 0;
       }
       HEAP16[($9 + 2 | 0) >> 1] = $7;
       $9 = $0 + 1 | 0;
       if (($0 | 0) != ($5 | 0)) {
        continue label$23
       }
       break label$23;
      };
      $0 = 0;
      $1 = 0;
      $14 = 0;
      $11 = 0;
      $15 = 0;
      $16 = 0;
      $10 = 0;
      $17 = 0;
      $18 = 0;
      $19 = 0;
      $20 = 0;
      $9 = 0;
      label$26 : while (1) {
       $21 = $1 + $6 | 0;
       $7 = $4 + Math_imul($21, 14) | 0;
       $13 = HEAP16[($7 + 2 | 0) >> 1] | 0;
       $12 = HEAP16[$7 >> 1] | 0;
       $7 = HEAPU8[($7 + 12 | 0) >> 0] | 0;
       label$27 : {
        label$28 : {
         if (($11 | 0) != ($1 | 0)) {
          break label$28
         }
         label$29 : {
          if (!$1) {
           break label$29
          }
          label$30 : {
           label$31 : {
            if (!$20) {
             break label$31
            }
            label$32 : {
             if (!$9) {
              break label$32
             }
             $9 = $4 + Math_imul($0, 14) | 0;
             HEAP16[($9 + 6 | 0) >> 1] = $18;
             HEAP16[($9 + 4 | 0) >> 1] = $19;
             HEAP16[($9 + 2 | 0) >> 1] = ($15 + $18 | 0) >>> 1 | 0;
             HEAP16[$9 >> 1] = ($16 + $19 | 0) >>> 1 | 0;
             HEAP8[($9 + 12 | 0) >> 0] = 3;
             $0 = $0 + 1 | 0;
            }
            $9 = $4 + Math_imul($0, 14) | 0;
            HEAP16[($9 + 4 | 0) >> 1] = $16;
            HEAP16[($9 + 2 | 0) >> 1] = $10;
            HEAP16[$9 >> 1] = $17;
            HEAP8[($9 + 12 | 0) >> 0] = 3;
            $9 = $15;
            break label$30;
           }
           $11 = $4 + Math_imul($0, 14) | 0;
           $20 = $11 + 12 | 0;
           label$33 : {
            if (!$9) {
             break label$33
            }
            HEAP8[$20 >> 0] = 3;
            HEAP16[$11 >> 1] = $17;
            HEAP16[($11 + 4 | 0) >> 1] = $19;
            HEAP16[($11 + 2 | 0) >> 1] = $10;
            $9 = $18;
            break label$30;
           }
           HEAP8[$20 >> 0] = 2;
           HEAP16[$11 >> 1] = $17;
           $9 = 0;
           HEAP16[($11 + 4 | 0) >> 1] = 0;
           HEAP16[($11 + 2 | 0) >> 1] = $10;
          }
          HEAP16[(($4 + Math_imul($0, 14) | 0) + 6 | 0) >> 1] = $9;
          $0 = $0 + 1 | 0;
         }
         label$34 : {
          label$35 : {
           $9 = $7 & 1 | 0;
           if (!$9) {
            break label$35
           }
           $17 = $12;
           $10 = $13;
           $7 = $1;
           break label$34;
          }
          $11 = $4 + Math_imul($21 + 1 | 0, 14) | 0;
          $7 = HEAP16[$11 >> 1] | 0;
          label$36 : {
           if ((HEAPU8[($11 + 12 | 0) >> 0] | 0) & 1 | 0) {
            break label$36
           }
           $17 = ($7 + $12 | 0) >> 1 | 0;
           $10 = ((HEAP16[($11 + 2 | 0) >> 1] | 0) + $13 | 0) >> 1 | 0;
           $16 = $12;
           $15 = $13;
           $7 = $1;
           break label$34;
          }
          $17 = $7 & 65535 | 0;
          $7 = $1 + 1 | 0;
          $10 = HEAPU16[($11 + 2 | 0) >> 1] | 0;
          $16 = $12;
          $15 = $13;
         }
         $20 = !$9;
         $9 = 0;
         $1 = $4 + Math_imul($0, 14) | 0;
         $35 = 0;
         HEAP16[($1 + 4 | 0) >> 1] = $35;
         HEAP16[($1 + 6 | 0) >> 1] = $35 >>> 16 | 0;
         HEAP16[($1 + 2 | 0) >> 1] = $10;
         HEAP16[$1 >> 1] = $17;
         $21 = 1;
         HEAP8[($1 + 12 | 0) >> 0] = 1;
         $1 = $8 + ($14 << 1 | 0) | 0;
         $11 = ((HEAPU8[$1 >> 0] | 0) << 8 | 0 | (HEAPU8[($1 + 1 | 0) >> 0] | 0) | 0) + 1 | 0;
         $14 = $14 + 1 | 0;
         $0 = $0 + 1 | 0;
         break label$27;
        }
        label$37 : {
         label$38 : {
          label$39 : {
           if ($7 & 1 | 0) {
            break label$39
           }
           $21 = 0;
           label$40 : {
            if ($9) {
             break label$40
            }
            $9 = 1;
            break label$38;
           }
           $7 = $4 + Math_imul($0, 14) | 0;
           HEAP16[($7 + 6 | 0) >> 1] = $18;
           HEAP16[($7 + 4 | 0) >> 1] = $19;
           $9 = 1;
           HEAP16[($7 + 2 | 0) >> 1] = ($18 + $13 | 0) >>> 1 | 0;
           HEAP16[$7 >> 1] = ($19 + $12 | 0) >>> 1 | 0;
           HEAP8[($7 + 12 | 0) >> 0] = 3;
           $0 = $0 + 1 | 0;
           break label$38;
          }
          $7 = $4 + Math_imul($0, 14) | 0;
          HEAP16[($7 + 6 | 0) >> 1] = $9 ? $18 : 0;
          HEAP16[($7 + 4 | 0) >> 1] = $9 ? $19 : 0;
          HEAP16[($7 + 2 | 0) >> 1] = $13;
          HEAP16[$7 >> 1] = $12;
          HEAP8[($7 + 12 | 0) >> 0] = $9 ? 3 : 2;
          $21 = 1;
          $0 = $0 + 1 | 0;
          $9 = 0;
          break label$37;
         }
         $19 = $12;
         $18 = $13;
        }
        $7 = $1;
       }
       $1 = $7 + 1 | 0;
       if (($7 | 0) < ($5 | 0)) {
        continue label$26
       }
       break label$26;
      };
      label$41 : {
       label$42 : {
        if (!$20) {
         break label$42
        }
        label$43 : {
         if ($21) {
          break label$43
         }
         $1 = $4 + Math_imul($0, 14) | 0;
         HEAP16[($1 + 6 | 0) >> 1] = $18;
         HEAP16[($1 + 4 | 0) >> 1] = $19;
         HEAP16[($1 + 2 | 0) >> 1] = ($15 + $18 | 0) >>> 1 | 0;
         HEAP16[$1 >> 1] = ($16 + $19 | 0) >>> 1 | 0;
         HEAP8[($1 + 12 | 0) >> 0] = 3;
         $0 = $0 + 1 | 0;
        }
        $1 = $4 + Math_imul($0, 14) | 0;
        HEAP16[($1 + 4 | 0) >> 1] = $16;
        HEAP16[($1 + 2 | 0) >> 1] = $10;
        HEAP16[$1 >> 1] = $17;
        HEAP8[($1 + 12 | 0) >> 0] = 3;
        break label$41;
       }
       $1 = $4 + Math_imul($0, 14) | 0;
       $6 = $1 + 12 | 0;
       label$44 : {
        if ($21) {
         break label$44
        }
        HEAP8[$6 >> 0] = 3;
        HEAP16[$1 >> 1] = $17;
        HEAP16[($1 + 4 | 0) >> 1] = $19;
        HEAP16[($1 + 2 | 0) >> 1] = $10;
        $15 = $18;
        break label$41;
       }
       HEAP8[$6 >> 0] = 2;
       HEAP16[$1 >> 1] = $17;
       $15 = 0;
       HEAP16[($1 + 4 | 0) >> 1] = 0;
       HEAP16[($1 + 2 | 0) >> 1] = $10;
      }
      HEAP16[(($4 + Math_imul($0, 14) | 0) + 6 | 0) >> 1] = $15;
      $7 = $0 + 1 | 0;
      HEAP32[$2 >> 2] = $4;
      break label$1;
     }
     $7 = 0;
     HEAP32[($3 + 92 | 0) >> 2] = 0;
     i64toi32_i32$1 = $3 + 84 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $3 + 76 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $3 + 68 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $3 + 60 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $3;
     i64toi32_i32$0 = 0;
     HEAP32[($3 + 52 | 0) >> 2] = 0;
     HEAP32[($3 + 56 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($3 + 48 | 0) >> 2] = 1;
     i64toi32_i32$1 = $3 + 40 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $3 + 32 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $3 + 24 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $3 + 16 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $3 + 8 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $3;
     i64toi32_i32$0 = 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[($3 + 4 | 0) >> 2] = i64toi32_i32$0;
     if (!(stbtt__run_charstring_28stbtt_fontinfo_20const__2c_20int_2c_20stbtt__csctx__29($0 | 0, $1 | 0, $3 + 48 | 0 | 0) | 0)) {
      break label$2
     }
     $4 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul(HEAP32[($3 + 92 | 0) >> 2] | 0, 14) | 0) | 0;
     HEAP32[$2 >> 2] = $4;
     HEAP32[($3 + 40 | 0) >> 2] = $4;
     if (!(stbtt__run_charstring_28stbtt_fontinfo_20const__2c_20int_2c_20stbtt__csctx__29($0 | 0, $1 | 0, $3 | 0) | 0)) {
      break label$2
     }
     $7 = HEAP32[($3 + 44 | 0) >> 2] | 0;
     break label$1;
    }
    $7 = 0;
    $14 = 0;
    label$45 : {
     if (($1 | 0) > (-1 | 0)) {
      break label$45
     }
     $13 = $4 + 10 | 0;
     $14 = 0;
     $7 = 0;
     label$46 : while (1) {
      HEAP32[($3 + 48 | 0) >> 2] = 0;
      $4 = (HEAPU8[($13 + 2 | 0) >> 0] | 0) << 8 | 0;
      $6 = HEAPU8[($13 + 3 | 0) >> 0] | 0;
      $1 = $13 + 4 | 0;
      $22 = Math_fround(0.0);
      label$47 : {
       label$48 : {
        $12 = HEAPU8[($13 + 1 | 0) >> 0] | 0;
        if ($12 & 2 | 0) {
         break label$48
        }
        $23 = Math_fround(0.0);
        break label$47;
       }
       $5 = HEAPU8[$1 >> 0] | 0;
       label$49 : {
        if (!($12 & 1 | 0)) {
         break label$49
        }
        $1 = HEAPU8[($13 + 6 | 0) >> 0] | 0 | ((HEAPU8[($13 + 7 | 0) >> 0] | 0) << 8 | 0) | 0;
        $22 = Math_fround(($1 << 8 | 0 | ($1 >>> 8 | 0) | 0) << 16 >> 16 | 0);
        $23 = Math_fround(($5 << 8 | 0 | (HEAPU8[($13 + 5 | 0) >> 0] | 0) | 0) << 16 >> 16 | 0);
        $1 = $13 + 8 | 0;
        break label$47;
       }
       $1 = $13 + 6 | 0;
       $22 = Math_fround(HEAP8[($13 + 5 | 0) >> 0] | 0 | 0);
       $23 = Math_fround($5 << 24 >> 24 | 0);
      }
      $4 = $4 | $6 | 0;
      label$50 : {
       label$51 : {
        if (!($12 & 8 | 0)) {
         break label$51
        }
        $13 = $1 + 2 | 0;
        $24 = Math_fround(0.0);
        $25 = Math_fround(0.0);
        $1 = HEAPU8[$1 >> 0] | 0 | ((HEAPU8[($1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
        $26 = Math_fround(Math_fround(($1 << 8 | 0 | ($1 >>> 8 | 0) | 0) << 16 >> 16 | 0) * Math_fround(.00006103515625));
        $27 = $26;
        break label$50;
       }
       label$52 : {
        if (!($12 & 64 | 0)) {
         break label$52
        }
        $6 = HEAPU8[($1 + 2 | 0) >> 0] | 0 | ((HEAPU8[($1 + 3 | 0) >> 0] | 0) << 8 | 0) | 0;
        $26 = Math_fround(Math_fround(($6 << 8 | 0 | ($6 >>> 8 | 0) | 0) << 16 >> 16 | 0) * Math_fround(.00006103515625));
        $6 = HEAPU8[$1 >> 0] | 0 | ((HEAPU8[($1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
        $27 = Math_fround(Math_fround(($6 << 8 | 0 | ($6 >>> 8 | 0) | 0) << 16 >> 16 | 0) * Math_fround(.00006103515625));
        $13 = $1 + 4 | 0;
        $24 = Math_fround(0.0);
        $25 = Math_fround(0.0);
        break label$50;
       }
       label$53 : {
        if (($12 << 24 >> 24 | 0) <= (-1 | 0)) {
         break label$53
        }
        $24 = Math_fround(0.0);
        $26 = Math_fround(1.0);
        $13 = $1;
        $25 = Math_fround(0.0);
        $27 = Math_fround(1.0);
        break label$50;
       }
       $6 = HEAPU8[($1 + 6 | 0) >> 0] | 0 | ((HEAPU8[($1 + 7 | 0) >> 0] | 0) << 8 | 0) | 0;
       $26 = Math_fround(Math_fround(($6 << 8 | 0 | ($6 >>> 8 | 0) | 0) << 16 >> 16 | 0) * Math_fround(.00006103515625));
       $6 = HEAPU8[($1 + 4 | 0) >> 0] | 0 | ((HEAPU8[($1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0;
       $24 = Math_fround(Math_fround(($6 << 8 | 0 | ($6 >>> 8 | 0) | 0) << 16 >> 16 | 0) * Math_fround(.00006103515625));
       $6 = HEAPU8[($1 + 2 | 0) >> 0] | 0 | ((HEAPU8[($1 + 3 | 0) >> 0] | 0) << 8 | 0) | 0;
       $25 = Math_fround(Math_fround(($6 << 8 | 0 | ($6 >>> 8 | 0) | 0) << 16 >> 16 | 0) * Math_fround(.00006103515625));
       $6 = HEAPU8[$1 >> 0] | 0 | ((HEAPU8[($1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
       $27 = Math_fround(Math_fround(($6 << 8 | 0 | ($6 >>> 8 | 0) | 0) << 16 >> 16 | 0) * Math_fround(.00006103515625));
       $13 = $1 + 8 | 0;
      }
      label$54 : {
       $5 = stbtt_GetGlyphShape_28stbtt_fontinfo_20const__2c_20int_2c_20stbtt_vertex___29($0 | 0, $4 | 0, $3 + 48 | 0 | 0) | 0;
       if (($5 | 0) < (1 | 0)) {
        break label$54
       }
       $28 = Math_fround(Math_sqrt(Math_fround(Math_fround($24 * $24) + Math_fround($26 * $26))));
       $29 = Math_fround(Math_sqrt(Math_fround(Math_fround($27 * $27) + Math_fround($25 * $25))));
       $4 = 0;
       $9 = HEAP32[($3 + 48 | 0) >> 2] | 0;
       label$55 : while (1) {
        label$56 : {
         label$57 : {
          $1 = $9 + Math_imul($4, 14) | 0;
          $30 = Math_fround(HEAP16[$1 >> 1] | 0 | 0);
          $31 = Math_fround(HEAP16[($1 + 2 | 0) >> 1] | 0 | 0);
          $32 = Math_fround($28 * Math_fround($22 + Math_fround(Math_fround($25 * $30) + Math_fround($26 * $31))));
          if (!(Math_fround(Math_abs($32)) < Math_fround(2147483648.0))) {
           break label$57
          }
          $6 = ~~$32;
          break label$56;
         }
         $6 = -2147483648;
        }
        HEAP16[($1 + 2 | 0) >> 1] = $6;
        label$58 : {
         label$59 : {
          $30 = Math_fround($29 * Math_fround($23 + Math_fround(Math_fround($27 * $30) + Math_fround($24 * $31))));
          if (!(Math_fround(Math_abs($30)) < Math_fround(2147483648.0))) {
           break label$59
          }
          $6 = ~~$30;
          break label$58;
         }
         $6 = -2147483648;
        }
        HEAP16[$1 >> 1] = $6;
        label$60 : {
         label$61 : {
          $30 = Math_fround(HEAP16[($1 + 4 | 0) >> 1] | 0 | 0);
          $31 = Math_fround(HEAP16[($1 + 6 | 0) >> 1] | 0 | 0);
          $32 = Math_fround($29 * Math_fround($23 + Math_fround(Math_fround($27 * $30) + Math_fround($24 * $31))));
          if (!(Math_fround(Math_abs($32)) < Math_fround(2147483648.0))) {
           break label$61
          }
          $6 = ~~$32;
          break label$60;
         }
         $6 = -2147483648;
        }
        HEAP16[($1 + 4 | 0) >> 1] = $6;
        label$62 : {
         label$63 : {
          $30 = Math_fround($28 * Math_fround($22 + Math_fround(Math_fround($25 * $30) + Math_fround($26 * $31))));
          if (!(Math_fround(Math_abs($30)) < Math_fround(2147483648.0))) {
           break label$63
          }
          $6 = ~~$30;
          break label$62;
         }
         $6 = -2147483648;
        }
        HEAP16[($1 + 6 | 0) >> 1] = $6;
        $4 = $4 + 1 | 0;
        if (($4 | 0) != ($5 | 0)) {
         continue label$55
        }
        break label$55;
       };
       label$64 : {
        $4 = $5 + $7 | 0;
        $1 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($4, 14) | 0) | 0;
        if ($1) {
         break label$64
        }
        label$65 : {
         if (!$14) {
          break label$65
         }
         ImGui__MemFree_28void__29($14 | 0);
        }
        ImGui__MemFree_28void__29($9 | 0);
        $7 = 0;
        break label$1;
       }
       label$66 : {
        label$67 : {
         label$68 : {
          if (($7 | 0) < (1 | 0)) {
           break label$68
          }
          if (!$14) {
           break label$68
          }
          $6 = Math_imul($7, 14);
          __memcpy((__memcpy($1 | 0, $14 | 0, $6 | 0) | 0) + $6 | 0 | 0, $9 | 0, Math_imul($5, 14) | 0) | 0;
          break label$67;
         }
         __memcpy($1 + Math_imul($7, 14) | 0 | 0, $9 | 0, Math_imul($5, 14) | 0) | 0;
         if (!$14) {
          break label$66
         }
        }
        ImGui__MemFree_28void__29($14 | 0);
       }
       ImGui__MemFree_28void__29($9 | 0);
       $7 = $4;
       $14 = $1;
      }
      if ($12 & 32 | 0) {
       continue label$46
      }
      break label$46;
     };
    }
    HEAP32[$2 >> 2] = $14;
    break label$1;
   }
   HEAP32[$2 >> 2] = $7;
  }
  __stack_pointer = $3 + 96 | 0;
  return $7 | 0;
 }
 
 function stbtt__run_charstring_28stbtt_fontinfo_20const__2c_20int_2c_20stbtt__csctx__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $8 = 0, $9 = 0, $7 = 0, $3 = 0, $18 = 0, $4 = 0, $10 = 0, $16 = 0, $23 = Math_fround(0), $24 = Math_fround(0), $14 = 0, $6 = 0, $15 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $26 = Math_fround(0), $25 = Math_fround(0), $19 = 0, $12 = 0, $28 = Math_fround(0), $27 = Math_fround(0), $17 = 0, $13 = 0, $11 = 0, $37 = 0, $22 = 0, i64toi32_i32$2 = 0, $34 = 0, $21 = 0, $20 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $51 = 0, $52 = 0, $36 = 0, $38 = 0, $978 = 0, $1207 = Math_fround(0), $1209 = Math_fround(0), $1822 = 0, $1825 = 0, $1860 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_f32$1 = Math_fround(0), wasm2js_i32$0 = 0;
  $3 = __stack_pointer - 400 | 0;
  __stack_pointer = $3;
  $4 = HEAP32[($0 + 76 | 0) >> 2] | 0;
  $5 = ($4 >> 31 | 0) & $4 | 0;
  $6 = 1;
  $7 = HEAP32[($0 + 68 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($4 | 0) >= (1 | 0)) {
     break label$2
    }
    $8 = $5;
    break label$1;
   }
   $8 = $5 + 1 | 0;
   $6 = (HEAPU8[($7 + $5 | 0) >> 0] | 0) << 8 | 0 | 1 | 0;
  }
  $9 = $0 + 100 | 0;
  $10 = 0;
  label$3 : {
   label$4 : {
    if (($8 | 0) < ($4 | 0)) {
     break label$4
    }
    $5 = $8;
    $11 = 0;
    break label$3;
   }
   $5 = $8 + 1 | 0;
   $11 = HEAPU8[($7 + $8 | 0) >> 0] | 0;
  }
  $12 = HEAP32[$9 >> 2] | 0;
  $13 = HEAP32[($0 + 92 | 0) >> 2] | 0;
  label$5 : {
   label$6 : {
    if (($5 | 0) < ($4 | 0)) {
     break label$6
    }
    $9 = 0;
    $14 = 0;
    break label$5;
   }
   $9 = 0;
   $14 = 0;
   $15 = HEAPU8[($7 + $5 | 0) >> 0] | 0;
   if (!$15) {
    break label$5
   }
   $9 = 0;
   $8 = ($5 + Math_imul($15, $1) | 0) + 1 | 0;
   $5 = ($8 | 0) < (0 | 0) ? $4 : ($4 | 0) < ($8 | 0) ? $4 : $8;
   $16 = $15 & 1 | 0;
   label$7 : {
    label$8 : {
     $17 = $15 + -1 | 0;
     if ($17) {
      break label$8
     }
     $8 = $5;
     break label$7;
    }
    $10 = $15 & 254 | 0;
    $9 = 0;
    $8 = $5;
    $14 = 0;
    label$9 : while (1) {
     label$10 : {
      label$11 : {
       if (($8 | 0) < ($4 | 0)) {
        break label$11
       }
       $18 = 0;
       break label$10;
      }
      $18 = HEAPU8[($7 + $8 | 0) >> 0] | 0;
      $5 = $8 + 1 | 0;
      $8 = $5;
     }
     $18 = $9 << 16 | 0 | (($18 & 255 | 0) << 8 | 0) | 0;
     $9 = 0;
     label$12 : {
      if (($8 | 0) >= ($4 | 0)) {
       break label$12
      }
      $9 = HEAPU8[($7 + $8 | 0) >> 0] | 0;
      $5 = $8 + 1 | 0;
      $8 = $5;
     }
     $9 = $18 | ($9 & 255 | 0) | 0;
     $14 = $14 + 2 | 0;
     if (($14 | 0) != ($10 | 0)) {
      continue label$9
     }
     break label$9;
    };
   }
   label$13 : {
    if (!$16) {
     break label$13
    }
    $14 = $9 << 8 | 0;
    $9 = 0;
    label$14 : {
     if (($8 | 0) >= ($4 | 0)) {
      break label$14
     }
     $5 = $8 + 1 | 0;
     $9 = HEAPU8[($7 + $8 | 0) >> 0] | 0;
    }
    $9 = $14 | ($9 & 255 | 0) | 0;
   }
   $19 = $15 & 1 | 0;
   label$15 : {
    label$16 : {
     if ($17) {
      break label$16
     }
     $8 = 0;
     break label$15;
    }
    $16 = $15 & 254 | 0;
    $14 = 0;
    $18 = 0;
    label$17 : while (1) {
     label$18 : {
      label$19 : {
       if (($5 | 0) < ($4 | 0)) {
        break label$19
       }
       $8 = $5;
       $5 = 0;
       break label$18;
      }
      $8 = $5 + 1 | 0;
      $5 = HEAPU8[($7 + $5 | 0) >> 0] | 0;
     }
     $10 = $14 << 16 | 0 | (($5 & 255 | 0) << 8 | 0) | 0;
     $14 = 0;
     label$20 : {
      label$21 : {
       if (($8 | 0) < ($4 | 0)) {
        break label$21
       }
       $5 = $8;
       break label$20;
      }
      $5 = $8 + 1 | 0;
      $14 = HEAPU8[($7 + $8 | 0) >> 0] | 0;
     }
     $14 = $10 | ($14 & 255 | 0) | 0;
     $18 = $18 + 2 | 0;
     if (($18 | 0) != ($16 | 0)) {
      continue label$17
     }
     break label$17;
    };
    $8 = $14 << 8 | 0;
   }
   label$22 : {
    if (!$19) {
     break label$22
    }
    $14 = 0;
    label$23 : {
     if (($5 | 0) >= ($4 | 0)) {
      break label$23
     }
     $14 = HEAPU8[($7 + $5 | 0) >> 0] | 0;
    }
    $14 = $8 | $14 | 0;
   }
   $10 = $15;
  }
  $8 = 0;
  label$24 : {
   $18 = $14 - $9 | 0;
   $5 = (Math_imul($10, $6 + $11 | 0) + $9 | 0) + 2 | 0;
   if (($18 | $5 | 0 | 0) < (0 | 0)) {
    break label$24
   }
   if (($4 | 0) < ($5 | 0)) {
    break label$24
   }
   if (($4 - $5 | 0 | 0) < ($18 | 0)) {
    break label$24
   }
   HEAP32[($3 + 48 | 0) >> 2] = $7 + $5 | 0;
   HEAP32[($3 + 56 | 0) >> 2] = $18;
   if (($18 | 0) < (1 | 0)) {
    break label$24
   }
   $14 = $2 + 4 | 0;
   $20 = $0 + 56 | 0;
   $5 = 0;
   $21 = 1;
   $11 = 0;
   $22 = 0;
   $17 = 0;
   $4 = 0;
   label$25 : {
    label$26 : while (1) {
     $7 = $5 + 1 | 0;
     HEAP32[($3 + 52 | 0) >> 2] = $7;
     label$27 : {
      label$28 : {
       label$29 : {
        label$30 : {
         label$31 : {
          label$32 : {
           label$33 : {
            label$34 : {
             label$35 : {
              label$36 : {
               label$37 : {
                label$38 : {
                 label$39 : {
                  label$40 : {
                   label$41 : {
                    label$42 : {
                     label$43 : {
                      label$44 : {
                       label$45 : {
                        label$46 : {
                         label$47 : {
                          label$48 : {
                           label$49 : {
                            label$50 : {
                             label$51 : {
                              label$52 : {
                               label$53 : {
                                label$54 : {
                                 label$55 : {
                                  label$56 : {
                                   $10 = HEAP32[($3 + 48 | 0) >> 2] | 0;
                                   $9 = HEAPU8[($10 + $5 | 0) >> 0] | 0;
                                   switch ($9 + -1 | 0 | 0) {
                                   case 28:
                                    break label$29;
                                   case 11:
                                    break label$39;
                                   case 13:
                                    break label$40;
                                   case 10:
                                    break label$41;
                                   case 9:
                                    break label$42;
                                   case 25:
                                   case 26:
                                    break label$43;
                                   case 24:
                                    break label$44;
                                   case 23:
                                    break label$45;
                                   case 7:
                                    break label$46;
                                   case 29:
                                    break label$47;
                                   case 30:
                                    break label$48;
                                   case 5:
                                    break label$49;
                                   case 6:
                                    break label$50;
                                   case 4:
                                    break label$51;
                                   case 21:
                                    break label$52;
                                   case 3:
                                    break label$53;
                                   case 20:
                                    break label$54;
                                   case 0:
                                   case 2:
                                   case 17:
                                   case 22:
                                    break label$55;
                                   case 18:
                                   case 19:
                                    break label$56;
                                   default:
                                    break label$38;
                                   };
                                  }
                                  label$57 : {
                                   if (!$21) {
                                    break label$57
                                   }
                                   $11 = $11 + (($4 | 0) / (2 | 0) | 0) | 0;
                                  }
                                  $21 = 0;
                                  $4 = (($11 + 7 | 0 | 0) / (8 | 0) | 0) + $7 | 0;
                                  HEAP32[($3 + 52 | 0) >> 2] = ($4 | 0) < (0 | 0) ? $18 : ($18 | 0) < ($4 | 0) ? $18 : $4;
                                  $4 = 0;
                                  break label$27;
                                 }
                                 $11 = $11 + (($4 | 0) / (2 | 0) | 0) | 0;
                                 $4 = 0;
                                 break label$27;
                                }
                                if (($4 | 0) < (2 | 0)) {
                                 break label$25
                                }
                                $4 = ($4 << 2 | 0) + ($3 + 192 | 0) | 0;
                                stbtt__csctx_rmove_to_28stbtt__csctx__2c_20float_2c_20float_29($2 | 0, Math_fround(Math_fround(HEAPF32[($4 + -8 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4 + -4 | 0) >> 2])));
                                break label$28;
                               }
                               if (($4 | 0) < (1 | 0)) {
                                break label$25
                               }
                               stbtt__csctx_rmove_to_28stbtt__csctx__2c_20float_2c_20float_29($2 | 0, Math_fround(Math_fround(0.0)), Math_fround(Math_fround(HEAPF32[((($4 << 2 | 0) + ($3 + 192 | 0) | 0) + -4 | 0) >> 2])));
                               break label$28;
                              }
                              if (($4 | 0) < (1 | 0)) {
                               break label$25
                              }
                              stbtt__csctx_rmove_to_28stbtt__csctx__2c_20float_2c_20float_29($2 | 0, Math_fround(Math_fround(HEAPF32[((($4 << 2 | 0) + ($3 + 192 | 0) | 0) + -4 | 0) >> 2])), Math_fround(Math_fround(0.0)));
                              break label$28;
                             }
                             $5 = 1;
                             $8 = 0;
                             if (($4 | 0) < (2 | 0)) {
                              break label$24
                             }
                             label$58 : while (1) {
                              $23 = Math_fround(HEAPF32[(($3 + 192 | 0) + ($5 << 2 | 0) | 0) >> 2]);
                              $24 = Math_fround(Math_fround(HEAPF32[(($3 + 192 | 0) + ($8 << 2 | 0) | 0) >> 2]) + Math_fround(HEAPF32[($2 + 16 | 0) >> 2]));
                              HEAPF32[($2 + 16 | 0) >> 2] = $24;
                              $23 = Math_fround($23 + Math_fround(HEAPF32[($2 + 20 | 0) >> 2]));
                              HEAPF32[($2 + 20 | 0) >> 2] = $23;
                              label$59 : {
                               label$60 : {
                                if (!(Math_fround(Math_abs($23)) < Math_fround(2147483648.0))) {
                                 break label$60
                                }
                                $5 = ~~$23;
                                break label$59;
                               }
                               $5 = -2147483648;
                              }
                              label$61 : {
                               label$62 : {
                                if (!(Math_fround(Math_abs($24)) < Math_fround(2147483648.0))) {
                                 break label$62
                                }
                                $9 = ~~$24;
                                break label$61;
                               }
                               $9 = -2147483648;
                              }
                              label$63 : {
                               label$64 : {
                                if (!(HEAP32[$2 >> 2] | 0)) {
                                 break label$64
                                }
                                label$65 : {
                                 label$66 : {
                                  if ((HEAP32[($2 + 28 | 0) >> 2] | 0 | 0) < ($9 | 0)) {
                                   break label$66
                                  }
                                  if (HEAP32[$14 >> 2] | 0) {
                                   break label$65
                                  }
                                 }
                                 HEAP32[($2 + 28 | 0) >> 2] = $9;
                                }
                                label$67 : {
                                 label$68 : {
                                  if ((HEAP32[($2 + 36 | 0) >> 2] | 0 | 0) < ($5 | 0)) {
                                   break label$68
                                  }
                                  if (HEAP32[$14 >> 2] | 0) {
                                   break label$67
                                  }
                                 }
                                 HEAP32[($2 + 36 | 0) >> 2] = $5;
                                }
                                label$69 : {
                                 label$70 : {
                                  if ((HEAP32[($2 + 24 | 0) >> 2] | 0 | 0) > ($9 | 0)) {
                                   break label$70
                                  }
                                  if (HEAP32[$14 >> 2] | 0) {
                                   break label$69
                                  }
                                 }
                                 HEAP32[($2 + 24 | 0) >> 2] = $9;
                                }
                                label$71 : {
                                 label$72 : {
                                  if ((HEAP32[($2 + 32 | 0) >> 2] | 0 | 0) > ($5 | 0)) {
                                   break label$72
                                  }
                                  if (HEAP32[$14 >> 2] | 0) {
                                   break label$71
                                  }
                                 }
                                 HEAP32[($2 + 32 | 0) >> 2] = $5;
                                }
                                HEAP32[($2 + 4 | 0) >> 2] = 1;
                                $7 = HEAP32[($2 + 44 | 0) >> 2] | 0;
                                break label$63;
                               }
                               $7 = HEAP32[($2 + 44 | 0) >> 2] | 0;
                               $18 = (HEAP32[($2 + 40 | 0) >> 2] | 0) + Math_imul($7, 14) | 0;
                               i64toi32_i32$1 = $18;
                               i64toi32_i32$0 = 0;
                               $47 = 0;
                               HEAP16[($18 + 4 | 0) >> 1] = $47;
                               HEAP16[($18 + 6 | 0) >> 1] = $47 >>> 16 | 0;
                               HEAP16[($18 + 8 | 0) >> 1] = i64toi32_i32$0;
                               HEAP16[($18 + 10 | 0) >> 1] = i64toi32_i32$0 >>> 16 | 0;
                               HEAP16[($18 + 2 | 0) >> 1] = $5;
                               HEAP16[$18 >> 1] = $9;
                               HEAP8[($18 + 12 | 0) >> 0] = 2;
                              }
                              HEAP32[($2 + 44 | 0) >> 2] = $7 + 1 | 0;
                              $8 = $8 + 2 | 0;
                              $5 = $8 | 1 | 0;
                              if (($5 | 0) < ($4 | 0)) {
                               continue label$58
                              }
                              break label$58;
                             };
                             $4 = 0;
                             break label$27;
                            }
                            $8 = 0;
                            if (($4 | 0) >= (1 | 0)) {
                             break label$36
                            }
                            break label$24;
                           }
                           $8 = 0;
                           if (($4 | 0) < (1 | 0)) {
                            break label$24
                           }
                           $5 = 0;
                           break label$33;
                          }
                          $8 = 0;
                          if (($4 | 0) >= (4 | 0)) {
                           break label$35
                          }
                          break label$24;
                         }
                         $8 = 0;
                         if (($4 | 0) < (4 | 0)) {
                          break label$24
                         }
                         $5 = 0;
                         break label$34;
                        }
                        $9 = 5;
                        $8 = 0;
                        $5 = 0;
                        if (($4 | 0) < (6 | 0)) {
                         break label$24
                        }
                        label$73 : while (1) {
                         $7 = $5 << 2 | 0;
                         $8 = ($3 + 192 | 0) + $7 | 0;
                         stbtt__csctx_rccurve_to_28stbtt__csctx__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($2 | 0, Math_fround(Math_fround(HEAPF32[$8 >> 2])), Math_fround(Math_fround(HEAPF32[(($3 + 192 | 0) + ($7 | 4 | 0) | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($8 + 8 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($8 + 12 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($8 + 16 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[(($3 + 192 | 0) + ($9 << 2 | 0) | 0) >> 2])));
                         $9 = $5 + 11 | 0;
                         $5 = $5 + 6 | 0;
                         if (($9 | 0) < ($4 | 0)) {
                          continue label$73
                         }
                         break label$73;
                        };
                        $4 = 0;
                        break label$27;
                       }
                       if (($4 | 0) < (8 | 0)) {
                        break label$25
                       }
                       $18 = $4 + -2 | 0;
                       $8 = 0;
                       $9 = 5;
                       label$74 : while (1) {
                        $7 = $8 << 2 | 0;
                        $5 = ($3 + 192 | 0) + $7 | 0;
                        stbtt__csctx_rccurve_to_28stbtt__csctx__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($2 | 0, Math_fround(Math_fround(HEAPF32[$5 >> 2])), Math_fround(Math_fround(HEAPF32[(($3 + 192 | 0) + ($7 | 4 | 0) | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5 + 8 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5 + 12 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5 + 16 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[(($3 + 192 | 0) + ($9 << 2 | 0) | 0) >> 2])));
                        $9 = $8 + 11 | 0;
                        $5 = $8 + 6 | 0;
                        $8 = $5;
                        if (($9 | 0) < ($18 | 0)) {
                         continue label$74
                        }
                        break label$74;
                       };
                       $8 = $5 | 1 | 0;
                       if (($8 | 0) >= ($4 | 0)) {
                        break label$25
                       }
                       $23 = Math_fround(HEAPF32[(($3 + 192 | 0) + ($8 << 2 | 0) | 0) >> 2]);
                       $24 = Math_fround(Math_fround(HEAPF32[(($3 + 192 | 0) + ($5 << 2 | 0) | 0) >> 2]) + Math_fround(HEAPF32[($2 + 16 | 0) >> 2]));
                       HEAPF32[($2 + 16 | 0) >> 2] = $24;
                       $23 = Math_fround($23 + Math_fround(HEAPF32[($2 + 20 | 0) >> 2]));
                       HEAPF32[($2 + 20 | 0) >> 2] = $23;
                       label$75 : {
                        label$76 : {
                         if (!(Math_fround(Math_abs($23)) < Math_fround(2147483648.0))) {
                          break label$76
                         }
                         $4 = ~~$23;
                         break label$75;
                        }
                        $4 = -2147483648;
                       }
                       label$77 : {
                        label$78 : {
                         if (!(Math_fround(Math_abs($24)) < Math_fround(2147483648.0))) {
                          break label$78
                         }
                         $8 = ~~$24;
                         break label$77;
                        }
                        $8 = -2147483648;
                       }
                       label$79 : {
                        label$80 : {
                         if (!(HEAP32[$2 >> 2] | 0)) {
                          break label$80
                         }
                         label$81 : {
                          label$82 : {
                           if ((HEAP32[($2 + 28 | 0) >> 2] | 0 | 0) < ($8 | 0)) {
                            break label$82
                           }
                           if (HEAP32[$14 >> 2] | 0) {
                            break label$81
                           }
                          }
                          HEAP32[($2 + 28 | 0) >> 2] = $8;
                         }
                         label$83 : {
                          label$84 : {
                           if ((HEAP32[($2 + 36 | 0) >> 2] | 0 | 0) < ($4 | 0)) {
                            break label$84
                           }
                           if (HEAP32[$14 >> 2] | 0) {
                            break label$83
                           }
                          }
                          HEAP32[($2 + 36 | 0) >> 2] = $4;
                         }
                         label$85 : {
                          label$86 : {
                           if ((HEAP32[($2 + 24 | 0) >> 2] | 0 | 0) > ($8 | 0)) {
                            break label$86
                           }
                           if (HEAP32[$14 >> 2] | 0) {
                            break label$85
                           }
                          }
                          HEAP32[($2 + 24 | 0) >> 2] = $8;
                         }
                         label$87 : {
                          label$88 : {
                           if ((HEAP32[($2 + 32 | 0) >> 2] | 0 | 0) > ($4 | 0)) {
                            break label$88
                           }
                           if (HEAP32[$14 >> 2] | 0) {
                            break label$87
                           }
                          }
                          HEAP32[($2 + 32 | 0) >> 2] = $4;
                         }
                         HEAP32[($2 + 4 | 0) >> 2] = 1;
                         $5 = HEAP32[($2 + 44 | 0) >> 2] | 0;
                         break label$79;
                        }
                        $5 = HEAP32[($2 + 44 | 0) >> 2] | 0;
                        $9 = (HEAP32[($2 + 40 | 0) >> 2] | 0) + Math_imul($5, 14) | 0;
                        i64toi32_i32$1 = $9;
                        i64toi32_i32$0 = 0;
                        $48 = 0;
                        HEAP16[($9 + 4 | 0) >> 1] = $48;
                        HEAP16[($9 + 6 | 0) >> 1] = $48 >>> 16 | 0;
                        HEAP16[($9 + 8 | 0) >> 1] = i64toi32_i32$0;
                        HEAP16[($9 + 10 | 0) >> 1] = i64toi32_i32$0 >>> 16 | 0;
                        HEAP16[($9 + 2 | 0) >> 1] = $4;
                        HEAP16[$9 >> 1] = $8;
                        HEAP8[($9 + 12 | 0) >> 0] = 2;
                       }
                       HEAP32[($2 + 44 | 0) >> 2] = $5 + 1 | 0;
                       $4 = 0;
                       break label$27;
                      }
                      if (($4 | 0) < (8 | 0)) {
                       break label$25
                      }
                      $10 = $4 + -6 | 0;
                      $8 = 0;
                      $5 = 1;
                      label$89 : while (1) {
                       $23 = Math_fround(HEAPF32[(($3 + 192 | 0) + ($5 << 2 | 0) | 0) >> 2]);
                       $9 = $8;
                       $16 = $8 << 2 | 0;
                       $24 = Math_fround(Math_fround(HEAPF32[(($3 + 192 | 0) + $16 | 0) >> 2]) + Math_fround(HEAPF32[($2 + 16 | 0) >> 2]));
                       HEAPF32[($2 + 16 | 0) >> 2] = $24;
                       $23 = Math_fround($23 + Math_fround(HEAPF32[($2 + 20 | 0) >> 2]));
                       HEAPF32[($2 + 20 | 0) >> 2] = $23;
                       label$90 : {
                        label$91 : {
                         if (!(Math_fround(Math_abs($23)) < Math_fround(2147483648.0))) {
                          break label$91
                         }
                         $8 = ~~$23;
                         break label$90;
                        }
                        $8 = -2147483648;
                       }
                       label$92 : {
                        label$93 : {
                         if (!(Math_fround(Math_abs($24)) < Math_fround(2147483648.0))) {
                          break label$93
                         }
                         $5 = ~~$24;
                         break label$92;
                        }
                        $5 = -2147483648;
                       }
                       label$94 : {
                        label$95 : {
                         if (!(HEAP32[$2 >> 2] | 0)) {
                          break label$95
                         }
                         label$96 : {
                          label$97 : {
                           if ((HEAP32[($2 + 28 | 0) >> 2] | 0 | 0) < ($5 | 0)) {
                            break label$97
                           }
                           if (HEAP32[$14 >> 2] | 0) {
                            break label$96
                           }
                          }
                          HEAP32[($2 + 28 | 0) >> 2] = $5;
                         }
                         label$98 : {
                          label$99 : {
                           if ((HEAP32[($2 + 36 | 0) >> 2] | 0 | 0) < ($8 | 0)) {
                            break label$99
                           }
                           if (HEAP32[$14 >> 2] | 0) {
                            break label$98
                           }
                          }
                          HEAP32[($2 + 36 | 0) >> 2] = $8;
                         }
                         label$100 : {
                          label$101 : {
                           if ((HEAP32[($2 + 24 | 0) >> 2] | 0 | 0) > ($5 | 0)) {
                            break label$101
                           }
                           if (HEAP32[$14 >> 2] | 0) {
                            break label$100
                           }
                          }
                          HEAP32[($2 + 24 | 0) >> 2] = $5;
                         }
                         label$102 : {
                          label$103 : {
                           if ((HEAP32[($2 + 32 | 0) >> 2] | 0 | 0) > ($8 | 0)) {
                            break label$103
                           }
                           if (HEAP32[$14 >> 2] | 0) {
                            break label$102
                           }
                          }
                          HEAP32[($2 + 32 | 0) >> 2] = $8;
                         }
                         HEAP32[($2 + 4 | 0) >> 2] = 1;
                         $7 = HEAP32[($2 + 44 | 0) >> 2] | 0;
                         break label$94;
                        }
                        $7 = HEAP32[($2 + 44 | 0) >> 2] | 0;
                        $18 = (HEAP32[($2 + 40 | 0) >> 2] | 0) + Math_imul($7, 14) | 0;
                        i64toi32_i32$1 = $18;
                        i64toi32_i32$0 = 0;
                        $49 = 0;
                        HEAP16[($18 + 4 | 0) >> 1] = $49;
                        HEAP16[($18 + 6 | 0) >> 1] = $49 >>> 16 | 0;
                        HEAP16[($18 + 8 | 0) >> 1] = i64toi32_i32$0;
                        HEAP16[($18 + 10 | 0) >> 1] = i64toi32_i32$0 >>> 16 | 0;
                        HEAP16[($18 + 2 | 0) >> 1] = $8;
                        HEAP16[$18 >> 1] = $5;
                        HEAP8[($18 + 12 | 0) >> 0] = 2;
                       }
                       HEAP32[($2 + 44 | 0) >> 2] = $7 + 1 | 0;
                       $8 = $9 + 2 | 0;
                       $5 = $8 | 1 | 0;
                       if (($5 | 0) < ($10 | 0)) {
                        continue label$89
                       }
                       break label$89;
                      };
                      $9 = $9 + 7 | 0;
                      if (($9 | 0) >= ($4 | 0)) {
                       break label$25
                      }
                      $4 = $16 + ($3 + 192 | 0) | 0;
                      stbtt__csctx_rccurve_to_28stbtt__csctx__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($2 | 0, Math_fround(Math_fround(HEAPF32[(($3 + 192 | 0) + ($8 << 2 | 0) | 0) >> 2])), Math_fround(Math_fround(HEAPF32[(($3 + 192 | 0) + ($5 << 2 | 0) | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4 + 16 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4 + 20 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4 + 24 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[(($3 + 192 | 0) + ($9 << 2 | 0) | 0) >> 2])));
                      $4 = 0;
                      break label$27;
                     }
                     if (($4 | 0) < (4 | 0)) {
                      break label$25
                     }
                     label$104 : {
                      $8 = $4 & 1 | 0;
                      $5 = $8 + 3 | 0;
                      if ($5 >>> 0 < $4 >>> 0) {
                       break label$104
                      }
                      $4 = 0;
                      break label$27;
                     }
                     $24 = (wasm2js_f32$0 = Math_fround(HEAPF32[($3 + 192 | 0) >> 2]), wasm2js_f32$1 = Math_fround(0.0), wasm2js_i32$0 = $8, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
                     $23 = Math_fround(HEAPF32[(($3 + 192 | 0) + ($5 << 2 | 0) | 0) >> 2]);
                     $5 = $8 << 2 | 0 | ($3 + 192 | 0) | 0;
                     $25 = Math_fround(HEAPF32[($5 + 8 | 0) >> 2]);
                     $26 = Math_fround(HEAPF32[$5 >> 2]);
                     $27 = Math_fround(HEAPF32[($5 + 4 | 0) >> 2]);
                     label$105 : {
                      label$106 : {
                       if (($9 | 0) == (27 | 0)) {
                        break label$106
                       }
                       stbtt__csctx_rccurve_to_28stbtt__csctx__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($2 | 0, Math_fround($24), Math_fround($26), Math_fround($27), Math_fround($25), Math_fround(Math_fround(0.0)), Math_fround($23));
                       break label$105;
                      }
                      stbtt__csctx_rccurve_to_28stbtt__csctx__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($2 | 0, Math_fround($26), Math_fround($24), Math_fround($27), Math_fround($25), Math_fround($23), Math_fround(Math_fround(0.0)));
                     }
                     label$107 : {
                      $5 = $8 + 7 | 0;
                      if ($5 >>> 0 < $4 >>> 0) {
                       break label$107
                      }
                      $4 = 0;
                      break label$27;
                     }
                     $8 = $8 | 4 | 0;
                     label$108 : while (1) {
                      $24 = Math_fround(HEAPF32[(($3 + 192 | 0) + ($5 << 2 | 0) | 0) >> 2]);
                      $5 = ($3 + 192 | 0) + ($8 << 2 | 0) | 0;
                      $23 = Math_fround(HEAPF32[$5 >> 2]);
                      $25 = Math_fround(HEAPF32[($5 + 8 | 0) >> 2]);
                      $26 = Math_fround(HEAPF32[($5 + 4 | 0) >> 2]);
                      label$109 : {
                       label$110 : {
                        if (($9 | 0) != (27 | 0)) {
                         break label$110
                        }
                        stbtt__csctx_rccurve_to_28stbtt__csctx__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($2 | 0, Math_fround($23), Math_fround(Math_fround(0.0)), Math_fround($26), Math_fround($25), Math_fround($24), Math_fround(Math_fround(0.0)));
                        break label$109;
                       }
                       stbtt__csctx_rccurve_to_28stbtt__csctx__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($2 | 0, Math_fround(Math_fround(0.0)), Math_fround($23), Math_fround($26), Math_fround($25), Math_fround(Math_fround(0.0)), Math_fround($24));
                      }
                      $5 = $8 + 7 | 0;
                      $8 = $8 + 4 | 0;
                      if (($5 | 0) < ($4 | 0)) {
                       continue label$108
                      }
                      break label$108;
                     };
                     $4 = 0;
                     break label$27;
                    }
                    if ($22) {
                     break label$30
                    }
                    $8 = HEAP32[($0 + 124 | 0) >> 2] | 0;
                    if (!$8) {
                     break label$30
                    }
                    $5 = ($8 >> 31 | 0) & $8 | 0;
                    $16 = HEAP32[($0 + 116 | 0) >> 2] | 0;
                    label$111 : {
                     if (($8 | 0) >= (1 | 0)) {
                      break label$111
                     }
                     $7 = $5;
                     break label$32;
                    }
                    $7 = $5 + 1 | 0;
                    label$112 : {
                     switch (HEAPU8[($16 + $5 | 0) >> 0] | 0 | 0) {
                     case 3:
                      break label$112;
                     case 0:
                      break label$32;
                     default:
                      break label$37;
                     };
                    }
                    $10 = 0;
                    label$113 : {
                     label$114 : {
                      if (($7 | 0) < ($8 | 0)) {
                       break label$114
                      }
                      $5 = $7;
                      $18 = 0;
                      break label$113;
                     }
                     $5 = $5 + 2 | 0;
                     $18 = HEAPU8[($16 + $7 | 0) >> 0] | 0;
                    }
                    label$115 : {
                     label$116 : {
                      if (($5 | 0) < ($8 | 0)) {
                       break label$116
                      }
                      $7 = $5;
                      break label$115;
                     }
                     $7 = $5 + 1 | 0;
                     $10 = HEAPU8[($16 + $5 | 0) >> 0] | 0;
                    }
                    $5 = $18 & 255 | 0;
                    $6 = 0;
                    label$117 : {
                     label$118 : {
                      if (($7 | 0) < ($8 | 0)) {
                       break label$118
                      }
                      $18 = $7;
                      $15 = 0;
                      break label$117;
                     }
                     $18 = $7 + 1 | 0;
                     $15 = HEAPU8[($16 + $7 | 0) >> 0] | 0;
                    }
                    $7 = $5 << 8 | 0;
                    $10 = $10 & 255 | 0;
                    label$119 : {
                     label$120 : {
                      if (($18 | 0) < ($8 | 0)) {
                       break label$120
                      }
                      $5 = $18;
                      break label$119;
                     }
                     $5 = $18 + 1 | 0;
                     $6 = HEAPU8[($16 + $18 | 0) >> 0] | 0;
                    }
                    $13 = $7 | $10 | 0;
                    if (!$13) {
                     break label$37
                    }
                    $7 = $6 | (($15 & 255 | 0) << 8 | 0) | 0;
                    $15 = 0;
                    label$121 : while (1) {
                     $6 = $7;
                     label$122 : {
                      label$123 : {
                       if (($5 | 0) < ($8 | 0)) {
                        break label$123
                       }
                       $7 = $5;
                       $12 = 0;
                       break label$122;
                      }
                      $7 = $5 + 1 | 0;
                      $12 = HEAPU8[($16 + $5 | 0) >> 0] | 0;
                     }
                     $10 = 0;
                     label$124 : {
                      label$125 : {
                       if (($7 | 0) < ($8 | 0)) {
                        break label$125
                       }
                       $18 = $7;
                       $5 = 0;
                       break label$124;
                      }
                      $18 = $7 + 1 | 0;
                      $5 = HEAPU8[($16 + $7 | 0) >> 0] | 0;
                     }
                     $7 = ($5 & 255 | 0) << 8 | 0;
                     label$126 : {
                      label$127 : {
                       if (($18 | 0) < ($8 | 0)) {
                        break label$127
                       }
                       $5 = $18;
                       break label$126;
                      }
                      $5 = $18 + 1 | 0;
                      $10 = HEAPU8[($16 + $18 | 0) >> 0] | 0;
                     }
                     $7 = $7 | ($10 & 255 | 0) | 0;
                     label$128 : {
                      if (($6 | 0) > ($1 | 0)) {
                       break label$128
                      }
                      if (($7 | 0) > ($1 | 0)) {
                       break label$31
                      }
                     }
                     $15 = $15 + 1 | 0;
                     if (($15 | 0) == ($13 | 0)) {
                      break label$37
                     }
                     continue label$121;
                    };
                   }
                   if (($17 | 0) < (1 | 0)) {
                    break label$25
                   }
                   $17 = $17 + -1 | 0;
                   $8 = ($3 + 64 | 0) + Math_imul($17, 12) | 0;
                   HEAP32[(($3 + 48 | 0) + 8 | 0) >> 2] = HEAP32[($8 + 8 | 0) >> 2] | 0;
                   i64toi32_i32$2 = $8;
                   i64toi32_i32$0 = HEAP32[$8 >> 2] | 0;
                   i64toi32_i32$1 = HEAP32[($8 + 4 | 0) >> 2] | 0;
                   $978 = i64toi32_i32$0;
                   i64toi32_i32$0 = $3;
                   HEAP32[($3 + 48 | 0) >> 2] = $978;
                   HEAP32[($3 + 52 | 0) >> 2] = i64toi32_i32$1;
                   break label$27;
                  }
                  $24 = Math_fround(HEAPF32[($2 + 12 | 0) >> 2]);
                  label$129 : {
                   $23 = Math_fround(HEAPF32[($2 + 8 | 0) >> 2]);
                   if ($23 != Math_fround(HEAPF32[($2 + 16 | 0) >> 2])) {
                    break label$129
                   }
                   if ($24 != Math_fround(HEAPF32[($2 + 20 | 0) >> 2])) {
                    break label$129
                   }
                   $8 = 1;
                   break label$24;
                  }
                  label$130 : {
                   label$131 : {
                    if (!(Math_fround(Math_abs($24)) < Math_fround(2147483648.0))) {
                     break label$131
                    }
                    $4 = ~~$24;
                    break label$130;
                   }
                   $4 = -2147483648;
                  }
                  label$132 : {
                   label$133 : {
                    if (!(Math_fround(Math_abs($23)) < Math_fround(2147483648.0))) {
                     break label$133
                    }
                    $8 = ~~$23;
                    break label$132;
                   }
                   $8 = -2147483648;
                  }
                  label$134 : {
                   label$135 : {
                    if (!(HEAP32[$2 >> 2] | 0)) {
                     break label$135
                    }
                    label$136 : {
                     label$137 : {
                      if ((HEAP32[($2 + 28 | 0) >> 2] | 0 | 0) < ($8 | 0)) {
                       break label$137
                      }
                      if (HEAP32[$14 >> 2] | 0) {
                       break label$136
                      }
                     }
                     HEAP32[($2 + 28 | 0) >> 2] = $8;
                    }
                    label$138 : {
                     label$139 : {
                      if ((HEAP32[($2 + 36 | 0) >> 2] | 0 | 0) < ($4 | 0)) {
                       break label$139
                      }
                      if (HEAP32[$14 >> 2] | 0) {
                       break label$138
                      }
                     }
                     HEAP32[($2 + 36 | 0) >> 2] = $4;
                    }
                    label$140 : {
                     label$141 : {
                      if ((HEAP32[($2 + 24 | 0) >> 2] | 0 | 0) > ($8 | 0)) {
                       break label$141
                      }
                      if (HEAP32[$14 >> 2] | 0) {
                       break label$140
                      }
                     }
                     HEAP32[($2 + 24 | 0) >> 2] = $8;
                    }
                    label$142 : {
                     label$143 : {
                      if ((HEAP32[($2 + 32 | 0) >> 2] | 0 | 0) > ($4 | 0)) {
                       break label$143
                      }
                      if (HEAP32[$14 >> 2] | 0) {
                       break label$142
                      }
                     }
                     HEAP32[($2 + 32 | 0) >> 2] = $4;
                    }
                    HEAP32[($2 + 4 | 0) >> 2] = 1;
                    $5 = HEAP32[($2 + 44 | 0) >> 2] | 0;
                    break label$134;
                   }
                   $5 = HEAP32[($2 + 44 | 0) >> 2] | 0;
                   $9 = (HEAP32[($2 + 40 | 0) >> 2] | 0) + Math_imul($5, 14) | 0;
                   i64toi32_i32$0 = $9;
                   i64toi32_i32$1 = 0;
                   $50 = 0;
                   HEAP16[($9 + 4 | 0) >> 1] = $50;
                   HEAP16[($9 + 6 | 0) >> 1] = $50 >>> 16 | 0;
                   HEAP16[($9 + 8 | 0) >> 1] = i64toi32_i32$1;
                   HEAP16[($9 + 10 | 0) >> 1] = i64toi32_i32$1 >>> 16 | 0;
                   HEAP16[($9 + 2 | 0) >> 1] = $4;
                   HEAP16[$9 >> 1] = $8;
                   HEAP8[($9 + 12 | 0) >> 0] = 2;
                  }
                  $8 = 1;
                  HEAP32[($2 + 44 | 0) >> 2] = $5 + 1 | 0;
                  break label$24;
                 }
                 $8 = 0;
                 if (($7 | 0) >= ($18 | 0)) {
                  break label$24
                 }
                 HEAP32[($3 + 52 | 0) >> 2] = $5 + 2 | 0;
                 label$144 : {
                  switch ((HEAPU8[($10 + $7 | 0) >> 0] | 0) + -34 | 0 | 0) {
                  case 0:
                   if (($4 | 0) < (7 | 0)) {
                    break label$24
                   }
                   $24 = Math_fround(HEAPF32[($3 + 216 | 0) >> 2]);
                   $23 = Math_fround(HEAPF32[($3 + 212 | 0) >> 2]);
                   $25 = Math_fround(HEAPF32[($3 + 208 | 0) >> 2]);
                   $26 = Math_fround(HEAPF32[($3 + 200 | 0) >> 2]);
                   stbtt__csctx_rccurve_to_28stbtt__csctx__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($2 | 0, Math_fround(Math_fround(HEAPF32[($3 + 192 | 0) >> 2])), Math_fround(Math_fround(0.0)), Math_fround(Math_fround(HEAPF32[($3 + 196 | 0) >> 2])), Math_fround($26), Math_fround(Math_fround(HEAPF32[($3 + 204 | 0) >> 2])), Math_fround(Math_fround(0.0)));
                   stbtt__csctx_rccurve_to_28stbtt__csctx__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($2 | 0, Math_fround($25), Math_fround(Math_fround(0.0)), Math_fround($23), Math_fround(Math_fround(-$26)), Math_fround($24), Math_fround(Math_fround(0.0)));
                   $4 = 0;
                   break label$27;
                  case 1:
                   if (($4 | 0) < (13 | 0)) {
                    break label$24
                   }
                   $24 = Math_fround(HEAPF32[($3 + 236 | 0) >> 2]);
                   $23 = Math_fround(HEAPF32[($3 + 232 | 0) >> 2]);
                   $25 = Math_fround(HEAPF32[($3 + 228 | 0) >> 2]);
                   $26 = Math_fround(HEAPF32[($3 + 224 | 0) >> 2]);
                   $27 = Math_fround(HEAPF32[($3 + 220 | 0) >> 2]);
                   $28 = Math_fround(HEAPF32[($3 + 216 | 0) >> 2]);
                   stbtt__csctx_rccurve_to_28stbtt__csctx__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($2 | 0, Math_fround(Math_fround(HEAPF32[($3 + 192 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($3 + 196 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($3 + 200 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($3 + 204 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($3 + 208 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($3 + 212 | 0) >> 2])));
                   stbtt__csctx_rccurve_to_28stbtt__csctx__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($2 | 0, Math_fround($28), Math_fround($27), Math_fround($26), Math_fround($25), Math_fround($23), Math_fround($24));
                   $4 = 0;
                   break label$27;
                  case 2:
                   if (($4 | 0) < (9 | 0)) {
                    break label$24
                   }
                   $23 = Math_fround(HEAPF32[($3 + 224 | 0) >> 2]);
                   $25 = Math_fround(HEAPF32[($3 + 216 | 0) >> 2]);
                   $26 = Math_fround(HEAPF32[($3 + 212 | 0) >> 2]);
                   $24 = Math_fround(HEAPF32[($3 + 220 | 0) >> 2]);
                   $27 = Math_fround(HEAPF32[($3 + 196 | 0) >> 2]);
                   $28 = Math_fround(HEAPF32[($3 + 204 | 0) >> 2]);
                   stbtt__csctx_rccurve_to_28stbtt__csctx__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($2 | 0, Math_fround(Math_fround(HEAPF32[($3 + 192 | 0) >> 2])), Math_fround($27), Math_fround(Math_fround(HEAPF32[($3 + 200 | 0) >> 2])), Math_fround($28), Math_fround(Math_fround(HEAPF32[($3 + 208 | 0) >> 2])), Math_fround(Math_fround(0.0)));
                   stbtt__csctx_rccurve_to_28stbtt__csctx__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($2 | 0, Math_fround($26), Math_fround(Math_fround(0.0)), Math_fround($25), Math_fround($24), Math_fround($23), Math_fround(Math_fround(-Math_fround($24 + Math_fround($27 + $28)))));
                   $4 = 0;
                   break label$27;
                  case 3:
                   break label$144;
                  default:
                   break label$24;
                  };
                 }
                 if (($4 | 0) < (11 | 0)) {
                  break label$24
                 }
                 $24 = Math_fround(HEAPF32[($3 + 232 | 0) >> 2]);
                 $23 = Math_fround(HEAPF32[($3 + 224 | 0) >> 2]);
                 $25 = Math_fround(HEAPF32[($3 + 216 | 0) >> 2]);
                 $26 = Math_fround(HEAPF32[($3 + 228 | 0) >> 2]);
                 $27 = Math_fround(HEAPF32[($3 + 220 | 0) >> 2]);
                 $28 = Math_fround(HEAPF32[($3 + 192 | 0) >> 2]);
                 $29 = Math_fround(HEAPF32[($3 + 196 | 0) >> 2]);
                 $30 = Math_fround(HEAPF32[($3 + 200 | 0) >> 2]);
                 $31 = Math_fround(HEAPF32[($3 + 204 | 0) >> 2]);
                 $32 = Math_fround(HEAPF32[($3 + 208 | 0) >> 2]);
                 $33 = Math_fround(HEAPF32[($3 + 212 | 0) >> 2]);
                 stbtt__csctx_rccurve_to_28stbtt__csctx__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($2 | 0, Math_fround($28), Math_fround($29), Math_fround($30), Math_fround($31), Math_fround($32), Math_fround($33));
                 $28 = Math_fround($23 + Math_fround($25 + Math_fround($32 + Math_fround($28 + $30))));
                 $1207 = Math_fround(-$28);
                 $1209 = Math_fround(Math_abs($28));
                 $28 = Math_fround($26 + Math_fround($27 + Math_fround($33 + Math_fround($29 + $31))));
                 $4 = $1209 > Math_fround(Math_abs($28));
                 stbtt__csctx_rccurve_to_28stbtt__csctx__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($2 | 0, Math_fround($25), Math_fround($27), Math_fround($23), Math_fround($26), Math_fround($4 ? $24 : $1207), Math_fround($4 ? Math_fround(-$28) : $24));
                 $4 = 0;
                 break label$27;
                }
                $8 = 0;
                label$148 : {
                 if ($9 >>> 0 > 31 >>> 0) {
                  break label$148
                 }
                 if (($9 | 0) != (28 | 0)) {
                  break label$24
                 }
                }
                label$149 : {
                 label$150 : {
                  if (($9 | 0) != (255 | 0)) {
                   break label$150
                  }
                  $16 = 0;
                  label$151 : {
                   label$152 : {
                    if (($7 | 0) < ($18 | 0)) {
                     break label$152
                    }
                    $5 = $7;
                    $9 = 0;
                    break label$151;
                   }
                   $5 = $5 + 2 | 0;
                   $9 = HEAPU8[($10 + $7 | 0) >> 0] | 0;
                  }
                  $7 = $9 & 255 | 0;
                  label$153 : {
                   label$154 : {
                    if (($5 | 0) < ($18 | 0)) {
                     break label$154
                    }
                    $9 = $5;
                    break label$153;
                   }
                   $9 = $5 + 1 | 0;
                   $16 = HEAPU8[($10 + $5 | 0) >> 0] | 0;
                  }
                  $16 = $7 << 16 | 0 | (($16 & 255 | 0) << 8 | 0) | 0;
                  $7 = 0;
                  label$155 : {
                   label$156 : {
                    if (($9 | 0) < ($18 | 0)) {
                     break label$156
                    }
                    $5 = $9;
                    $9 = 0;
                    break label$155;
                   }
                   $5 = $9 + 1 | 0;
                   $9 = HEAPU8[($10 + $9 | 0) >> 0] | 0;
                  }
                  $9 = ($16 | ($9 & 255 | 0) | 0) << 8 | 0;
                  label$157 : {
                   label$158 : {
                    if (($5 | 0) < ($18 | 0)) {
                     break label$158
                    }
                    $18 = $5;
                    break label$157;
                   }
                   $18 = $5 + 1 | 0;
                   $7 = HEAPU8[($10 + $5 | 0) >> 0] | 0;
                  }
                  HEAP32[($3 + 52 | 0) >> 2] = $18;
                  $24 = Math_fround(Math_fround($9 | ($7 & 255 | 0) | 0 | 0) * Math_fround(.0000152587890625));
                  break label$149;
                 }
                 HEAP32[($3 + 52 | 0) >> 2] = ($5 | 0) < (0 | 0) ? $18 : ($18 | 0) < ($5 | 0) ? $18 : $5;
                 $24 = Math_fround((stbtt__cff_int_28stbtt__buf__29($3 + 48 | 0 | 0) | 0) << 16 >> 16 | 0);
                }
                if (($4 | 0) > (47 | 0)) {
                 break label$24
                }
                HEAPF32[(($3 + 192 | 0) + ($4 << 2 | 0) | 0) >> 2] = $24;
                $4 = $4 + 1 | 0;
                break label$27;
               }
               $12 = 0;
               HEAP32[($3 + 32 | 0) >> 2] = 0;
               $13 = 0;
               break label$30;
              }
              $5 = 1;
              break label$33;
             }
             $5 = 1;
            }
            label$159 : while (1) {
             label$160 : {
              switch ($5 | 0) {
              case 0:
               label$162 : {
                $5 = $8 + 3 | 0;
                if (($5 | 0) < ($4 | 0)) {
                 break label$162
                }
                $4 = 0;
                break label$27;
               }
               $9 = $8 + 4 | 0;
               $23 = Math_fround(HEAPF32[(($3 + 192 | 0) + ($5 << 2 | 0) | 0) >> 2]);
               $5 = ($3 + 192 | 0) + ($8 << 2 | 0) | 0;
               $25 = Math_fround(HEAPF32[$5 >> 2]);
               $26 = Math_fround(HEAPF32[($5 + 8 | 0) >> 2]);
               $27 = Math_fround(HEAPF32[($5 + 4 | 0) >> 2]);
               $24 = Math_fround(0.0);
               label$163 : {
                if (($4 - $8 | 0 | 0) != (5 | 0)) {
                 break label$163
                }
                $24 = Math_fround(HEAPF32[(($3 + 192 | 0) + ($9 << 2 | 0) | 0) >> 2]);
               }
               stbtt__csctx_rccurve_to_28stbtt__csctx__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($2 | 0, Math_fround(Math_fround(0.0)), Math_fround($25), Math_fround($27), Math_fround($26), Math_fround($23), Math_fround($24));
               $8 = $9;
               $5 = 1;
               continue label$159;
              default:
               break label$160;
              };
             }
             label$164 : {
              $5 = $8 + 3 | 0;
              if (($5 | 0) < ($4 | 0)) {
               break label$164
              }
              $4 = 0;
              break label$27;
             }
             $7 = $8 + 4 | 0;
             $9 = ($3 + 192 | 0) + ($8 << 2 | 0) | 0;
             $23 = Math_fround(HEAPF32[$9 >> 2]);
             $25 = Math_fround(HEAPF32[($9 + 8 | 0) >> 2]);
             $26 = Math_fround(HEAPF32[($9 + 4 | 0) >> 2]);
             $24 = Math_fround(0.0);
             label$165 : {
              if (($4 - $8 | 0 | 0) != (5 | 0)) {
               break label$165
              }
              $24 = Math_fround(HEAPF32[(($3 + 192 | 0) + ($7 << 2 | 0) | 0) >> 2]);
             }
             stbtt__csctx_rccurve_to_28stbtt__csctx__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($2 | 0, Math_fround($23), Math_fround(Math_fround(0.0)), Math_fround($26), Math_fround($25), Math_fround($24), Math_fround(Math_fround(HEAPF32[(($3 + 192 | 0) + ($5 << 2 | 0) | 0) >> 2])));
             $8 = $7;
             $5 = 0;
             continue label$159;
            };
           }
           label$166 : while (1) {
            label$167 : {
             switch ($5 | 0) {
             case 0:
              label$169 : {
               if (($8 | 0) < ($4 | 0)) {
                break label$169
               }
               $4 = 0;
               break label$27;
              }
              $23 = Math_fround(HEAPF32[(($3 + 192 | 0) + ($8 << 2 | 0) | 0) >> 2]);
              $24 = Math_fround(Math_fround(HEAPF32[($2 + 20 | 0) >> 2]) + Math_fround(0.0));
              HEAPF32[($2 + 20 | 0) >> 2] = $24;
              $23 = Math_fround($23 + Math_fround(HEAPF32[($2 + 16 | 0) >> 2]));
              HEAPF32[($2 + 16 | 0) >> 2] = $23;
              label$170 : {
               label$171 : {
                if (!(Math_fround(Math_abs($24)) < Math_fround(2147483648.0))) {
                 break label$171
                }
                $5 = ~~$24;
                break label$170;
               }
               $5 = -2147483648;
              }
              label$172 : {
               label$173 : {
                if (!(Math_fround(Math_abs($23)) < Math_fround(2147483648.0))) {
                 break label$173
                }
                $9 = ~~$23;
                break label$172;
               }
               $9 = -2147483648;
              }
              label$174 : {
               label$175 : {
                if (!(HEAP32[$2 >> 2] | 0)) {
                 break label$175
                }
                label$176 : {
                 label$177 : {
                  if ((HEAP32[($2 + 28 | 0) >> 2] | 0 | 0) < ($9 | 0)) {
                   break label$177
                  }
                  if (HEAP32[$14 >> 2] | 0) {
                   break label$176
                  }
                 }
                 HEAP32[($2 + 28 | 0) >> 2] = $9;
                }
                label$178 : {
                 label$179 : {
                  if ((HEAP32[($2 + 36 | 0) >> 2] | 0 | 0) < ($5 | 0)) {
                   break label$179
                  }
                  if (HEAP32[$14 >> 2] | 0) {
                   break label$178
                  }
                 }
                 HEAP32[($2 + 36 | 0) >> 2] = $5;
                }
                label$180 : {
                 label$181 : {
                  if ((HEAP32[($2 + 24 | 0) >> 2] | 0 | 0) > ($9 | 0)) {
                   break label$181
                  }
                  if (HEAP32[$14 >> 2] | 0) {
                   break label$180
                  }
                 }
                 HEAP32[($2 + 24 | 0) >> 2] = $9;
                }
                label$182 : {
                 label$183 : {
                  if ((HEAP32[($2 + 32 | 0) >> 2] | 0 | 0) > ($5 | 0)) {
                   break label$183
                  }
                  if (HEAP32[$14 >> 2] | 0) {
                   break label$182
                  }
                 }
                 HEAP32[($2 + 32 | 0) >> 2] = $5;
                }
                HEAP32[($2 + 4 | 0) >> 2] = 1;
                $7 = HEAP32[($2 + 44 | 0) >> 2] | 0;
                break label$174;
               }
               $7 = HEAP32[($2 + 44 | 0) >> 2] | 0;
               $18 = (HEAP32[($2 + 40 | 0) >> 2] | 0) + Math_imul($7, 14) | 0;
               i64toi32_i32$0 = $18;
               i64toi32_i32$1 = 0;
               $51 = 0;
               HEAP16[($18 + 4 | 0) >> 1] = $51;
               HEAP16[($18 + 6 | 0) >> 1] = $51 >>> 16 | 0;
               HEAP16[($18 + 8 | 0) >> 1] = i64toi32_i32$1;
               HEAP16[($18 + 10 | 0) >> 1] = i64toi32_i32$1 >>> 16 | 0;
               HEAP16[($18 + 2 | 0) >> 1] = $5;
               HEAP16[$18 >> 1] = $9;
               HEAP8[($18 + 12 | 0) >> 0] = 2;
              }
              HEAP32[($2 + 44 | 0) >> 2] = $7 + 1 | 0;
              $8 = $8 + 1 | 0;
              $5 = 1;
              continue label$166;
             default:
              break label$167;
             };
            }
            label$184 : {
             if (($8 | 0) < ($4 | 0)) {
              break label$184
             }
             $4 = 0;
             break label$27;
            }
            $23 = Math_fround(HEAPF32[(($3 + 192 | 0) + ($8 << 2 | 0) | 0) >> 2]);
            $24 = Math_fround(Math_fround(HEAPF32[($2 + 16 | 0) >> 2]) + Math_fround(0.0));
            HEAPF32[($2 + 16 | 0) >> 2] = $24;
            $23 = Math_fround($23 + Math_fround(HEAPF32[($2 + 20 | 0) >> 2]));
            HEAPF32[($2 + 20 | 0) >> 2] = $23;
            label$185 : {
             label$186 : {
              if (!(Math_fround(Math_abs($24)) < Math_fround(2147483648.0))) {
               break label$186
              }
              $5 = ~~$24;
              break label$185;
             }
             $5 = -2147483648;
            }
            label$187 : {
             label$188 : {
              if (!(Math_fround(Math_abs($23)) < Math_fround(2147483648.0))) {
               break label$188
              }
              $9 = ~~$23;
              break label$187;
             }
             $9 = -2147483648;
            }
            label$189 : {
             label$190 : {
              if (!(HEAP32[$2 >> 2] | 0)) {
               break label$190
              }
              label$191 : {
               label$192 : {
                if ((HEAP32[($2 + 28 | 0) >> 2] | 0 | 0) < ($5 | 0)) {
                 break label$192
                }
                if (HEAP32[$14 >> 2] | 0) {
                 break label$191
                }
               }
               HEAP32[($2 + 28 | 0) >> 2] = $5;
              }
              label$193 : {
               label$194 : {
                if ((HEAP32[($2 + 36 | 0) >> 2] | 0 | 0) < ($9 | 0)) {
                 break label$194
                }
                if (HEAP32[$14 >> 2] | 0) {
                 break label$193
                }
               }
               HEAP32[($2 + 36 | 0) >> 2] = $9;
              }
              label$195 : {
               label$196 : {
                if ((HEAP32[($2 + 24 | 0) >> 2] | 0 | 0) > ($5 | 0)) {
                 break label$196
                }
                if (HEAP32[$14 >> 2] | 0) {
                 break label$195
                }
               }
               HEAP32[($2 + 24 | 0) >> 2] = $5;
              }
              label$197 : {
               label$198 : {
                if ((HEAP32[($2 + 32 | 0) >> 2] | 0 | 0) > ($9 | 0)) {
                 break label$198
                }
                if (HEAP32[$14 >> 2] | 0) {
                 break label$197
                }
               }
               HEAP32[($2 + 32 | 0) >> 2] = $9;
              }
              HEAP32[($2 + 4 | 0) >> 2] = 1;
              $7 = HEAP32[($2 + 44 | 0) >> 2] | 0;
              break label$189;
             }
             $7 = HEAP32[($2 + 44 | 0) >> 2] | 0;
             $18 = (HEAP32[($2 + 40 | 0) >> 2] | 0) + Math_imul($7, 14) | 0;
             i64toi32_i32$0 = $18;
             i64toi32_i32$1 = 0;
             $52 = 0;
             HEAP16[($18 + 4 | 0) >> 1] = $52;
             HEAP16[($18 + 6 | 0) >> 1] = $52 >>> 16 | 0;
             HEAP16[($18 + 8 | 0) >> 1] = i64toi32_i32$1;
             HEAP16[($18 + 10 | 0) >> 1] = i64toi32_i32$1 >>> 16 | 0;
             HEAP16[($18 + 2 | 0) >> 1] = $9;
             HEAP16[$18 >> 1] = $5;
             HEAP8[($18 + 12 | 0) >> 0] = 2;
            }
            HEAP32[($2 + 44 | 0) >> 2] = $7 + 1 | 0;
            $8 = $8 + 1 | 0;
            $5 = 0;
            continue label$166;
           };
          }
          $12 = 0;
          $5 = $7 + $1 | 0;
          $5 = ($5 | 0) < (0 | 0) ? $8 : ($8 | 0) < ($5 | 0) ? $8 : $5;
          if (($5 | 0) >= ($8 | 0)) {
           break label$31
          }
          $12 = HEAPU8[($16 + $5 | 0) >> 0] | 0;
         }
         $8 = HEAP32[($0 + 112 | 0) >> 2] | 0;
         $7 = ($8 >> 31 | 0) & $8 | 0;
         $13 = 1;
         $16 = HEAP32[($0 + 104 | 0) >> 2] | 0;
         label$199 : {
          label$200 : {
           if (($8 | 0) >= (1 | 0)) {
            break label$200
           }
           $5 = $7;
           break label$199;
          }
          $5 = $7 + 1 | 0;
          $13 = (HEAPU8[($16 + $7 | 0) >> 0] | 0) << 8 | 0 | 1 | 0;
         }
         $6 = 0;
         label$201 : {
          label$202 : {
           if (($5 | 0) < ($8 | 0)) {
            break label$202
           }
           $7 = $5;
           $34 = 0;
           break label$201;
          }
          $7 = $5 + 1 | 0;
          $34 = HEAPU8[($16 + $5 | 0) >> 0] | 0;
         }
         label$203 : {
          label$204 : {
           if (($7 | 0) < ($8 | 0)) {
            break label$204
           }
           $18 = 0;
           $10 = 0;
           break label$203;
          }
          $18 = 0;
          $10 = 0;
          $19 = HEAPU8[($16 + $7 | 0) >> 0] | 0;
          if (!$19) {
           break label$203
          }
          $18 = 0;
          $5 = ($7 + Math_imul($19, $12 & 255 | 0) | 0) + 1 | 0;
          $7 = ($5 | 0) < (0 | 0) ? $8 : ($8 | 0) < ($5 | 0) ? $8 : $5;
          $22 = $19 & 1 | 0;
          label$205 : {
           label$206 : {
            $12 = $19 + -1 | 0;
            if ($12) {
             break label$206
            }
            $5 = $7;
            break label$205;
           }
           $15 = $19 & 254 | 0;
           $18 = 0;
           $5 = $7;
           $10 = 0;
           label$207 : while (1) {
            label$208 : {
             label$209 : {
              if (($5 | 0) < ($8 | 0)) {
               break label$209
              }
              $6 = 0;
              break label$208;
             }
             $6 = HEAPU8[($16 + $5 | 0) >> 0] | 0;
             $7 = $5 + 1 | 0;
             $5 = $7;
            }
            $6 = $18 << 16 | 0 | (($6 & 255 | 0) << 8 | 0) | 0;
            $18 = 0;
            label$210 : {
             if (($5 | 0) >= ($8 | 0)) {
              break label$210
             }
             $18 = HEAPU8[($16 + $5 | 0) >> 0] | 0;
             $7 = $5 + 1 | 0;
             $5 = $7;
            }
            $18 = $6 | ($18 & 255 | 0) | 0;
            $10 = $10 + 2 | 0;
            if (($10 | 0) != ($15 | 0)) {
             continue label$207
            }
            break label$207;
           };
          }
          label$211 : {
           if (!$22) {
            break label$211
           }
           $10 = $18 << 8 | 0;
           $18 = 0;
           label$212 : {
            if (($5 | 0) >= ($8 | 0)) {
             break label$212
            }
            $7 = $5 + 1 | 0;
            $18 = HEAPU8[($16 + $5 | 0) >> 0] | 0;
           }
           $18 = $10 | ($18 & 255 | 0) | 0;
          }
          label$213 : {
           label$214 : {
            if ($12) {
             break label$214
            }
            $10 = 0;
            break label$213;
           }
           $12 = $19 & 254 | 0;
           $10 = 0;
           $6 = 0;
           label$215 : while (1) {
            label$216 : {
             label$217 : {
              if (($7 | 0) < ($8 | 0)) {
               break label$217
              }
              $5 = $7;
              $7 = 0;
              break label$216;
             }
             $5 = $7 + 1 | 0;
             $7 = HEAPU8[($16 + $7 | 0) >> 0] | 0;
            }
            $15 = $10 << 16 | 0 | (($7 & 255 | 0) << 8 | 0) | 0;
            $10 = 0;
            label$218 : {
             label$219 : {
              if (($5 | 0) < ($8 | 0)) {
               break label$219
              }
              $7 = $5;
              break label$218;
             }
             $7 = $5 + 1 | 0;
             $10 = HEAPU8[($16 + $5 | 0) >> 0] | 0;
            }
            $10 = $15 | ($10 & 255 | 0) | 0;
            $6 = $6 + 2 | 0;
            if (($6 | 0) != ($12 | 0)) {
             continue label$215
            }
            break label$215;
           };
          }
          label$220 : {
           if (!$22) {
            break label$220
           }
           $10 = $10 << 8 | 0;
           $5 = 0;
           label$221 : {
            if (($7 | 0) >= ($8 | 0)) {
             break label$221
            }
            $5 = HEAPU8[($16 + $7 | 0) >> 0] | 0;
           }
           $10 = $10 | ($5 & 255 | 0) | 0;
          }
          $6 = $19;
         }
         i64toi32_i32$0 = $3;
         i64toi32_i32$1 = 0;
         HEAP32[($3 + 384 | 0) >> 2] = 0;
         HEAP32[($3 + 388 | 0) >> 2] = i64toi32_i32$1;
         HEAP32[($3 + 392 | 0) >> 2] = 0;
         label$222 : {
          $7 = $10 - $18 | 0;
          $5 = (Math_imul($6, $34 + $13 | 0) + $18 | 0) + 2 | 0;
          if (($7 | $5 | 0 | 0) < (0 | 0)) {
           break label$222
          }
          if (($8 | 0) < ($5 | 0)) {
           break label$222
          }
          if (($8 - $5 | 0 | 0) < ($7 | 0)) {
           break label$222
          }
          HEAP32[($3 + 392 | 0) >> 2] = $7;
          HEAP32[($3 + 384 | 0) >> 2] = $16 + $5 | 0;
         }
         HEAP32[(($3 + 16 | 0) + 8 | 0) >> 2] = HEAP32[($20 + 8 | 0) >> 2] | 0;
         i64toi32_i32$2 = $20;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         HEAP32[($3 + 8 | 0) >> 2] = HEAP32[(($3 + 384 | 0) + 8 | 0) >> 2] | 0;
         $1822 = i64toi32_i32$1;
         i64toi32_i32$1 = $3;
         HEAP32[($3 + 16 | 0) >> 2] = $1822;
         HEAP32[($3 + 20 | 0) >> 2] = i64toi32_i32$0;
         i64toi32_i32$2 = $3;
         i64toi32_i32$0 = HEAP32[($3 + 384 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[($3 + 388 | 0) >> 2] | 0;
         $1825 = i64toi32_i32$0;
         i64toi32_i32$0 = $3;
         HEAP32[$3 >> 2] = $1825;
         HEAP32[($3 + 4 | 0) >> 2] = i64toi32_i32$1;
         stbtt__get_subrs_28stbtt__buf_2c_20stbtt__buf_29($3 + 32 | 0 | 0, $3 + 16 | 0 | 0, $3 | 0);
         $12 = HEAP32[($3 + 40 | 0) >> 2] | 0;
         $13 = HEAP32[($3 + 32 | 0) >> 2] | 0;
        }
        $22 = 1;
       }
       $8 = 0;
       if (($4 | 0) < (1 | 0)) {
        break label$24
       }
       if (($17 | 0) > (9 | 0)) {
        break label$24
       }
       $4 = $4 + -1 | 0;
       $24 = Math_fround(HEAPF32[(($3 + 192 | 0) + ($4 << 2 | 0) | 0) >> 2]);
       $8 = ($3 + 64 | 0) + Math_imul($17, 12) | 0;
       HEAP32[($8 + 8 | 0) >> 2] = HEAP32[(($3 + 48 | 0) + 8 | 0) >> 2] | 0;
       i64toi32_i32$2 = $3;
       i64toi32_i32$1 = HEAP32[($3 + 48 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($3 + 52 | 0) >> 2] | 0;
       $1860 = i64toi32_i32$1;
       i64toi32_i32$1 = $8;
       HEAP32[$8 >> 2] = $1860;
       HEAP32[($8 + 4 | 0) >> 2] = i64toi32_i32$0;
       $8 = ($9 | 0) == (10 | 0);
       label$223 : {
        label$224 : {
         if (!(Math_fround(Math_abs($24)) < Math_fround(2147483648.0))) {
          break label$224
         }
         $16 = ~~$24;
         break label$223;
        }
        $16 = -2147483648;
       }
       $18 = $13;
       $5 = $12;
       label$225 : {
        if ($8) {
         break label$225
        }
        $5 = HEAP32[($0 + 88 | 0) >> 2] | 0;
        $18 = HEAP32[($0 + 80 | 0) >> 2] | 0;
       }
       $10 = 0;
       $9 = ($5 >> 31 | 0) & $5 | 0;
       $8 = $9;
       $7 = 0;
       label$226 : {
        $6 = ($5 | 0) < (1 | 0);
        if ($6) {
         break label$226
        }
        $8 = $9 + 1 | 0;
        $7 = (HEAPU8[($18 + $9 | 0) >> 0] | 0) << 8 | 0;
       }
       label$227 : {
        if (($8 | 0) >= ($5 | 0)) {
         break label$227
        }
        $10 = HEAPU8[($18 + $8 | 0) >> 0] | 0;
       }
       $8 = 0;
       $7 = $10 | $7 | 0;
       $15 = ($7 >>> 0 > 33899 >>> 0 ? 32768 : $7 >>> 0 > 1239 >>> 0 ? 1131 : 107) + $16 | 0;
       if (($15 | 0) < (0 | 0)) {
        break label$24
       }
       if (($15 | 0) >= ($7 | 0)) {
        break label$24
       }
       $34 = 0;
       label$228 : {
        label$229 : {
         if (!$6) {
          break label$229
         }
         $8 = $9;
         $36 = 0;
         break label$228;
        }
        $8 = $9 + 1 | 0;
        $36 = (HEAPU8[($18 + $9 | 0) >> 0] | 0) << 8 | 0;
       }
       label$230 : {
        label$231 : {
         if (($8 | 0) < ($5 | 0)) {
          break label$231
         }
         $9 = $8;
         break label$230;
        }
        $9 = $8 + 1 | 0;
        $34 = HEAPU8[($18 + $8 | 0) >> 0] | 0;
       }
       $8 = 0;
       $6 = 0;
       $10 = 0;
       $16 = 0;
       label$232 : {
        if (($9 | 0) >= ($5 | 0)) {
         break label$232
        }
        $6 = 0;
        $10 = 0;
        $16 = 0;
        $37 = HEAPU8[($18 + $9 | 0) >> 0] | 0;
        if (!$37) {
         break label$232
        }
        $10 = 0;
        $9 = ($9 + Math_imul($15, $37) | 0) + 1 | 0;
        $7 = ($9 | 0) < (0 | 0) ? $5 : ($5 | 0) < ($9 | 0) ? $5 : $9;
        $38 = $37 & 1 | 0;
        label$233 : {
         label$234 : {
          $19 = $37 + -1 | 0;
          if ($19) {
           break label$234
          }
          $9 = $7;
          break label$233;
         }
         $15 = $37 & 254 | 0;
         $10 = 0;
         $9 = $7;
         $16 = 0;
         label$235 : while (1) {
          label$236 : {
           label$237 : {
            if (($9 | 0) < ($5 | 0)) {
             break label$237
            }
            $6 = 0;
            break label$236;
           }
           $6 = HEAPU8[($18 + $9 | 0) >> 0] | 0;
           $7 = $9 + 1 | 0;
           $9 = $7;
          }
          $6 = $10 << 16 | 0 | (($6 & 255 | 0) << 8 | 0) | 0;
          $10 = 0;
          label$238 : {
           if (($9 | 0) >= ($5 | 0)) {
            break label$238
           }
           $10 = HEAPU8[($18 + $9 | 0) >> 0] | 0;
           $7 = $9 + 1 | 0;
           $9 = $7;
          }
          $10 = $6 | ($10 & 255 | 0) | 0;
          $16 = $16 + 2 | 0;
          if (($16 | 0) != ($15 | 0)) {
           continue label$235
          }
          break label$235;
         };
        }
        label$239 : {
         if (!$38) {
          break label$239
         }
         $16 = $10 << 8 | 0;
         $10 = 0;
         label$240 : {
          if (($9 | 0) >= ($5 | 0)) {
           break label$240
          }
          $7 = $9 + 1 | 0;
          $10 = HEAPU8[($18 + $9 | 0) >> 0] | 0;
         }
         $10 = $16 | ($10 & 255 | 0) | 0;
        }
        label$241 : {
         label$242 : {
          if ($19) {
           break label$242
          }
          $16 = 0;
          break label$241;
         }
         $19 = $37 & 254 | 0;
         $16 = 0;
         $6 = 0;
         label$243 : while (1) {
          label$244 : {
           label$245 : {
            if (($7 | 0) < ($5 | 0)) {
             break label$245
            }
            $9 = $7;
            $7 = 0;
            break label$244;
           }
           $9 = $7 + 1 | 0;
           $7 = HEAPU8[($18 + $7 | 0) >> 0] | 0;
          }
          $15 = $16 << 16 | 0 | (($7 & 255 | 0) << 8 | 0) | 0;
          $16 = 0;
          label$246 : {
           label$247 : {
            if (($9 | 0) < ($5 | 0)) {
             break label$247
            }
            $7 = $9;
            break label$246;
           }
           $7 = $9 + 1 | 0;
           $16 = HEAPU8[($18 + $9 | 0) >> 0] | 0;
          }
          $16 = $15 | ($16 & 255 | 0) | 0;
          $6 = $6 + 2 | 0;
          if (($6 | 0) != ($19 | 0)) {
           continue label$243
          }
          break label$243;
         };
        }
        label$248 : {
         if (!$38) {
          break label$248
         }
         $16 = $16 << 8 | 0;
         $9 = 0;
         label$249 : {
          if (($7 | 0) >= ($5 | 0)) {
           break label$249
          }
          $9 = HEAPU8[($18 + $7 | 0) >> 0] | 0;
         }
         $16 = $16 | ($9 & 255 | 0) | 0;
        }
        $6 = $37;
       }
       $7 = $16 - $10 | 0;
       $9 = (Math_imul($6, ($36 | 1 | 0) + $34 | 0) + $10 | 0) + 2 | 0;
       if (($7 | $9 | 0 | 0) < (0 | 0)) {
        break label$24
       }
       if (($5 | 0) < ($9 | 0)) {
        break label$24
       }
       if (($5 - $9 | 0 | 0) < ($7 | 0)) {
        break label$24
       }
       HEAP32[($3 + 56 | 0) >> 2] = $7;
       HEAP32[($3 + 48 | 0) >> 2] = $18 + $9 | 0;
       if (($16 | 0) == ($10 | 0)) {
        break label$24
       }
       HEAP32[($3 + 52 | 0) >> 2] = 0;
       $17 = $17 + 1 | 0;
       break label$27;
      }
      $21 = 0;
      $4 = 0;
     }
     $5 = HEAP32[($3 + 52 | 0) >> 2] | 0;
     $18 = HEAP32[($3 + 56 | 0) >> 2] | 0;
     if (($5 | 0) < ($18 | 0)) {
      continue label$26
     }
     break label$26;
    };
   }
   $8 = 0;
  }
  __stack_pointer = $3 + 400 | 0;
  return $8 | 0;
 }
 
 function stbtt__tesselate_cubic_28stbtt__point__2c_20int__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = Math_fround($3);
  $4 = Math_fround($4);
  $5 = Math_fround($5);
  $6 = Math_fround($6);
  $7 = Math_fround($7);
  $8 = Math_fround($8);
  $9 = Math_fround($9);
  $10 = Math_fround($10);
  $11 = $11 | 0;
  var $12 = Math_fround(0), $13 = Math_fround(0), $21 = Math_fround(0), $29 = Math_fround(0), $35 = Math_fround(0), $43 = Math_fround(0), $49 = Math_fround(0), $62 = Math_fround(0), $68 = Math_fround(0), $92 = Math_fround(0), $97 = Math_fround(0), $106 = Math_fround(0), $115 = Math_fround(0);
  label$1 : {
   if (($11 | 0) > (16 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : while (1) {
     $12 = Math_fround($8 - $6);
     $21 = Math_fround($12 * $12);
     $12 = Math_fround($9 - $7);
     $29 = Math_fround(Math_sqrt(Math_fround($21 + Math_fround($12 * $12))));
     $12 = Math_fround($4 - $2);
     $35 = Math_fround($12 * $12);
     $12 = Math_fround($5 - $3);
     $43 = Math_fround(Math_sqrt(Math_fround($35 + Math_fround($12 * $12))));
     $12 = Math_fround($6 - $4);
     $49 = Math_fround($12 * $12);
     $12 = Math_fround($7 - $5);
     $12 = Math_fround($29 + Math_fround($43 + Math_fround(Math_sqrt(Math_fround($49 + Math_fround($12 * $12))))));
     $62 = Math_fround($12 * $12);
     $12 = Math_fround($8 - $2);
     $68 = Math_fround($12 * $12);
     $12 = Math_fround($9 - $3);
     $12 = Math_fround(Math_sqrt(Math_fround($68 + Math_fround($12 * $12))));
     if (!(Math_fround($62 - Math_fround($12 * $12)) > $10)) {
      break label$2
     }
     $12 = Math_fround(Math_fround($2 + $4) * Math_fround(.5));
     $92 = $12;
     $13 = Math_fround(Math_fround($3 + $5) * Math_fround(.5));
     $97 = $13;
     $4 = Math_fround(Math_fround($4 + $6) * Math_fround(.5));
     $12 = Math_fround(Math_fround($12 + $4) * Math_fround(.5));
     $106 = $12;
     $5 = Math_fround(Math_fround($5 + $7) * Math_fround(.5));
     $13 = Math_fround(Math_fround($13 + $5) * Math_fround(.5));
     $115 = $13;
     $6 = Math_fround(Math_fround($6 + $8) * Math_fround(.5));
     $4 = Math_fround(Math_fround($4 + $6) * Math_fround(.5));
     $12 = Math_fround(Math_fround($12 + $4) * Math_fround(.5));
     $7 = Math_fround(Math_fround($7 + $9) * Math_fround(.5));
     $5 = Math_fround(Math_fround($5 + $7) * Math_fround(.5));
     $13 = Math_fround(Math_fround($13 + $5) * Math_fround(.5));
     $11 = $11 + 1 | 0;
     stbtt__tesselate_cubic_28stbtt__point__2c_20int__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_29($0 | 0, $1 | 0, Math_fround($2), Math_fround($3), Math_fround($92), Math_fround($97), Math_fround($106), Math_fround($115), Math_fround($12), Math_fround($13), Math_fround($10), $11 | 0);
     $3 = $13;
     $2 = $12;
     if (($11 | 0) != (17 | 0)) {
      continue label$3
     }
     break label$1;
    };
   }
   $11 = HEAP32[$1 >> 2] | 0;
   label$4 : {
    if (!$0) {
     break label$4
    }
    $0 = $0 + ($11 << 3 | 0) | 0;
    HEAPF32[($0 + 4 | 0) >> 2] = $9;
    HEAPF32[$0 >> 2] = $8;
   }
   HEAP32[$1 >> 2] = $11 + 1 | 0;
  }
 }
 
 function stbtt__tesselate_curve_28stbtt__point__2c_20int__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = Math_fround($3);
  $4 = Math_fround($4);
  $5 = Math_fround($5);
  $6 = Math_fround($6);
  $7 = Math_fround($7);
  $8 = Math_fround($8);
  $9 = $9 | 0;
  var $11 = Math_fround(0), $12 = Math_fround(0), $10 = Math_fround(0), $13 = Math_fround(0), $32 = Math_fround(0), $104 = Math_fround(0);
  label$1 : {
   if (($9 | 0) > (16 | 0)) {
    break label$1
   }
   label$2 : {
    $10 = Math_fround(Math_fround(Math_fround(Math_fround($4 + $4) + $2) + $6) * Math_fround(.25));
    $11 = Math_fround(Math_fround(Math_fround($2 + $6) * Math_fround(.5)) - $10);
    $32 = Math_fround($11 * $11);
    $11 = Math_fround(Math_fround(Math_fround(Math_fround($5 + $5) + $3) + $7) * Math_fround(.25));
    $12 = Math_fround(Math_fround(Math_fround($3 + $7) * Math_fround(.5)) - $11);
    if (!(Math_fround($32 + Math_fround($12 * $12)) > $8)) {
     break label$2
    }
    $9 = $9 + 1 | 0;
    stbtt__tesselate_curve_28stbtt__point__2c_20int__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_29($0 | 0, $1 | 0, Math_fround($2), Math_fround($3), Math_fround(Math_fround(Math_fround($2 + $4) * Math_fround(.5))), Math_fround(Math_fround(Math_fround($3 + $5) * Math_fround(.5))), Math_fround($10), Math_fround($11), Math_fround($8), $9 | 0);
    if (($9 | 0) == (17 | 0)) {
     break label$1
    }
    $3 = Math_fround(Math_fround($4 + $6) * Math_fround(.5));
    $12 = Math_fround(Math_fround($3 + $3) + $10);
    $2 = Math_fround(Math_fround($5 + $7) * Math_fround(.5));
    $13 = Math_fround(Math_fround($2 + $2) + $11);
    label$3 : while (1) {
     $5 = Math_fround(Math_fround($12 + $6) * Math_fround(.25));
     $4 = Math_fround(Math_fround(Math_fround($10 + $6) * Math_fround(.5)) - $5);
     $104 = Math_fround($4 * $4);
     $4 = Math_fround(Math_fround($13 + $7) * Math_fround(.25));
     $12 = Math_fround(Math_fround(Math_fround($11 + $7) * Math_fround(.5)) - $4);
     if (!(Math_fround($104 + Math_fround($12 * $12)) > $8)) {
      break label$2
     }
     $9 = $9 + 1 | 0;
     stbtt__tesselate_curve_28stbtt__point__2c_20int__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_29($0 | 0, $1 | 0, Math_fround($10), Math_fround($11), Math_fround(Math_fround(Math_fround($10 + $3) * Math_fround(.5))), Math_fround(Math_fround(Math_fround($11 + $2) * Math_fround(.5))), Math_fround($5), Math_fround($4), Math_fround($8), $9 | 0);
     $2 = Math_fround(Math_fround($2 + $7) * Math_fround(.5));
     $13 = Math_fround(Math_fround($2 + $2) + $4);
     $3 = Math_fround(Math_fround($3 + $6) * Math_fround(.5));
     $12 = Math_fround(Math_fround($3 + $3) + $5);
     $11 = $4;
     $10 = $5;
     if (($9 | 0) != (17 | 0)) {
      continue label$3
     }
     break label$1;
    };
   }
   $9 = HEAP32[$1 >> 2] | 0;
   label$4 : {
    if (!$0) {
     break label$4
    }
    $0 = $0 + ($9 << 3 | 0) | 0;
    HEAPF32[($0 + 4 | 0) >> 2] = $7;
    HEAPF32[$0 >> 2] = $6;
   }
   HEAP32[$1 >> 2] = $9 + 1 | 0;
  }
 }
 
 function stbtt__sort_edges_quicksort_28stbtt__edge__2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $8 = 0, $4 = 0, $9 = 0, $2 = 0, $11 = 0, $10 = 0, $12 = 0, $13 = 0, $5 = Math_fround(0), $6 = 0, $3 = Math_fround(0), $7 = Math_fround(0), $68 = 0, $71 = 0, $81 = 0, $84 = 0, $90 = 0, $93 = 0, $109 = 0, $112 = 0, $115 = 0, $119 = 0, $126 = 0, $134 = 0, $171 = 0, $174 = 0, $177 = 0, $181 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  label$1 : {
   if (($1 | 0) < (13 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     $3 = Math_fround(HEAPF32[($0 + 4 | 0) >> 2]);
     $4 = $0 + Math_imul($1 >>> 1 | 0, 20) | 0;
     $5 = Math_fround(HEAPF32[($4 + 4 | 0) >> 2]);
     $6 = $1 + -1 | 0;
     $7 = Math_fround(HEAPF32[(($0 + Math_imul($6, 20) | 0) + 4 | 0) >> 2]);
     $8 = $5 < $7;
     if (($3 < $5 | 0) == ($8 | 0)) {
      break label$3
     }
     $9 = ($2 + 8 | 0) + 16 | 0;
     $8 = $0 + Math_imul($3 < $7 ^ $8 | 0 ? $6 : 0, 20) | 0;
     $10 = $8 + 16 | 0;
     HEAP32[$9 >> 2] = HEAP32[$10 >> 2] | 0;
     $11 = ($2 + 8 | 0) + 8 | 0;
     $12 = $8 + 8 | 0;
     i64toi32_i32$2 = $12;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $68 = i64toi32_i32$0;
     i64toi32_i32$0 = $11;
     HEAP32[i64toi32_i32$0 >> 2] = $68;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $8;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $71 = i64toi32_i32$1;
     i64toi32_i32$1 = $2;
     HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $71;
     HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
     $13 = $4 + 16 | 0;
     HEAP32[$10 >> 2] = HEAP32[$13 >> 2] | 0;
     $10 = $4 + 8 | 0;
     i64toi32_i32$2 = $10;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $81 = i64toi32_i32$0;
     i64toi32_i32$0 = $12;
     HEAP32[i64toi32_i32$0 >> 2] = $81;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $4;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $84 = i64toi32_i32$1;
     i64toi32_i32$1 = $8;
     HEAP32[i64toi32_i32$1 >> 2] = $84;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[$13 >> 2] = HEAP32[$9 >> 2] | 0;
     i64toi32_i32$2 = $11;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $90 = i64toi32_i32$0;
     i64toi32_i32$0 = $10;
     HEAP32[i64toi32_i32$0 >> 2] = $90;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $2;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
     $93 = i64toi32_i32$1;
     i64toi32_i32$1 = $4;
     HEAP32[i64toi32_i32$1 >> 2] = $93;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    }
    $12 = ($2 + 8 | 0) + 16 | 0;
    $8 = $0 + 16 | 0;
    HEAP32[$12 >> 2] = HEAP32[$8 >> 2] | 0;
    $13 = ($2 + 8 | 0) + 8 | 0;
    $9 = $0 + 8 | 0;
    i64toi32_i32$2 = $9;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $109 = i64toi32_i32$0;
    i64toi32_i32$0 = $13;
    HEAP32[i64toi32_i32$0 >> 2] = $109;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $112 = i64toi32_i32$1;
    i64toi32_i32$1 = $2;
    HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $112;
    HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $4;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $115 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $115;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $119 = i64toi32_i32$1;
    i64toi32_i32$1 = $9;
    HEAP32[i64toi32_i32$1 >> 2] = $119;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[$8 >> 2] = HEAP32[($4 + 16 | 0) >> 2] | 0;
    $10 = 1;
    label$4 : while (1) {
     i64toi32_i32$2 = $2;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
     $126 = i64toi32_i32$0;
     i64toi32_i32$0 = $4;
     HEAP32[i64toi32_i32$0 >> 2] = $126;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = HEAP32[$12 >> 2] | 0;
     i64toi32_i32$2 = $13;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $134 = i64toi32_i32$1;
     i64toi32_i32$1 = $4 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $134;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $5 = Math_fround(HEAPF32[($0 + 4 | 0) >> 2]);
     label$5 : while (1) {
      $9 = $10;
      $10 = $9 + 1 | 0;
      $11 = $0 + Math_imul($9, 20) | 0;
      if (Math_fround(HEAPF32[($11 + 4 | 0) >> 2]) < $5) {
       continue label$5
      }
      break label$5;
     };
     label$6 : while (1) {
      $8 = $6;
      $6 = $8 + -1 | 0;
      $4 = $0 + Math_imul($8, 20) | 0;
      if ($5 < Math_fround(HEAPF32[($4 + 4 | 0) >> 2])) {
       continue label$6
      }
      break label$6;
     };
     label$7 : {
      if (($9 | 0) >= ($8 | 0)) {
       break label$7
      }
      $8 = $11 + 16 | 0;
      HEAP32[$12 >> 2] = HEAP32[$8 >> 2] | 0;
      $9 = $11 + 8 | 0;
      i64toi32_i32$2 = $9;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $171 = i64toi32_i32$0;
      i64toi32_i32$0 = $13;
      HEAP32[i64toi32_i32$0 >> 2] = $171;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $11;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $174 = i64toi32_i32$1;
      i64toi32_i32$1 = $2;
      HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $174;
      HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $4;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $177 = i64toi32_i32$0;
      i64toi32_i32$0 = $11;
      HEAP32[i64toi32_i32$0 >> 2] = $177;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $181 = i64toi32_i32$1;
      i64toi32_i32$1 = $9;
      HEAP32[i64toi32_i32$1 >> 2] = $181;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[$8 >> 2] = HEAP32[($4 + 16 | 0) >> 2] | 0;
      continue label$4;
     }
     break label$4;
    };
    label$8 : {
     label$9 : {
      $1 = $1 - $9 | 0;
      if (($8 | 0) >= ($1 | 0)) {
       break label$9
      }
      stbtt__sort_edges_quicksort_28stbtt__edge__2c_20int_29($0 | 0, $8 | 0);
      $0 = $11;
      break label$8;
     }
     stbtt__sort_edges_quicksort_28stbtt__edge__2c_20int_29($11 | 0, $1 | 0);
     $1 = $8;
    }
    if (($1 | 0) > (12 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  __stack_pointer = $2 + 32 | 0;
 }
 
 function ImFontAtlasBuildFinish_28ImFontAtlas__29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0, $6 = 0, $9 = 0, $11 = 0, $1 = 0, $2 = 0, $16 = Math_fround(0), $4 = 0, $7 = 0, $10 = 0, $17 = Math_fround(0), $8 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, i64toi32_i32$1 = 0, $357 = 0, $614 = 0, $617 = Math_fround(0), $621 = Math_fround(0), $627 = Math_fround(0), $633 = Math_fround(0);
  $1 = HEAP32[($0 + 80 | 0) >> 2] | 0;
  $2 = HEAP32[($0 + 1128 | 0) >> 2] | 0;
  $3 = $1 + Math_imul($2, 28) | 0;
  $4 = $3 + 4 | 0;
  $5 = HEAPU16[($3 + 4 | 0) >> 1] | 0;
  $6 = HEAP32[($0 + 36 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((HEAPU8[$0 >> 0] | 0) & 2 | 0) {
     break label$2
    }
    $7 = $5 + 123 | 0;
    $8 = HEAPU16[($3 + 6 | 0) >> 1] | 0;
    label$3 : {
     $9 = HEAP32[($0 + 28 | 0) >> 2] | 0;
     if (!$9) {
      break label$3
     }
     $10 = $3 + 6 | 0;
     $5 = ($9 + $5 | 0) + Math_imul($6, $8) | 0;
     $6 = 73088;
     $11 = 0;
     label$4 : while (1) {
      $3 = 0;
      label$5 : while (1) {
       HEAP8[($5 + $3 | 0) >> 0] = (HEAPU8[($6 + $3 | 0) >> 0] | 0 | 0) == (46 | 0) ? -1 : 0;
       $9 = $3 | 1 | 0;
       HEAP8[($5 + $9 | 0) >> 0] = (HEAPU8[($6 + $9 | 0) >> 0] | 0 | 0) == (46 | 0) ? -1 : 0;
       $3 = $3 + 2 | 0;
       if (($3 | 0) != (122 | 0)) {
        continue label$5
       }
       break label$5;
      };
      $6 = $6 + 122 | 0;
      $3 = HEAP32[($0 + 36 | 0) >> 2] | 0;
      $5 = $5 + $3 | 0;
      $11 = $11 + 1 | 0;
      if (($11 | 0) != (27 | 0)) {
       continue label$4
      }
      break label$4;
     };
     $5 = ((HEAP32[($0 + 28 | 0) >> 2] | 0) + $7 | 0) + Math_imul($3, HEAPU16[$10 >> 1] | 0) | 0;
     $6 = 73088;
     $11 = 0;
     label$6 : while (1) {
      $3 = 0;
      label$7 : while (1) {
       HEAP8[($5 + $3 | 0) >> 0] = (HEAPU8[($6 + $3 | 0) >> 0] | 0 | 0) == (88 | 0) ? -1 : 0;
       $9 = $3 | 1 | 0;
       HEAP8[($5 + $9 | 0) >> 0] = (HEAPU8[($6 + $9 | 0) >> 0] | 0 | 0) == (88 | 0) ? -1 : 0;
       $3 = $3 + 2 | 0;
       if (($3 | 0) != (122 | 0)) {
        continue label$7
       }
       break label$7;
      };
      $6 = $6 + 122 | 0;
      $5 = $5 + (HEAP32[($0 + 36 | 0) >> 2] | 0) | 0;
      $11 = $11 + 1 | 0;
      if (($11 | 0) != (27 | 0)) {
       continue label$6
      }
      break label$1;
     };
    }
    $10 = HEAP32[($0 + 32 | 0) >> 2] | 0;
    $5 = ($10 + ($5 << 2 | 0) | 0) + (Math_imul($6, $8) << 2 | 0) | 0;
    $6 = 73088;
    $11 = 0;
    label$8 : while (1) {
     $3 = 0;
     label$9 : while (1) {
      HEAP32[($5 + ($3 << 2 | 0) | 0) >> 2] = (HEAPU8[($6 + $3 | 0) >> 0] | 0 | 0) == (46 | 0) ? -1 : 0;
      $9 = $3 | 1 | 0;
      HEAP32[($5 + ($9 << 2 | 0) | 0) >> 2] = (HEAPU8[($6 + $9 | 0) >> 0] | 0 | 0) == (46 | 0) ? -1 : 0;
      $3 = $3 + 2 | 0;
      if (($3 | 0) != (122 | 0)) {
       continue label$9
      }
      break label$9;
     };
     $6 = $6 + 122 | 0;
     $3 = HEAP32[($0 + 36 | 0) >> 2] | 0;
     $5 = $5 + ($3 << 2 | 0) | 0;
     $11 = $11 + 1 | 0;
     if (($11 | 0) != (27 | 0)) {
      continue label$8
     }
     break label$8;
    };
    $5 = ($10 + ($7 << 2 | 0) | 0) + (Math_imul($3, $8) << 2 | 0) | 0;
    $6 = 73088;
    $11 = 0;
    label$10 : while (1) {
     $3 = 0;
     label$11 : while (1) {
      HEAP32[($5 + ($3 << 2 | 0) | 0) >> 2] = (HEAPU8[($6 + $3 | 0) >> 0] | 0 | 0) == (88 | 0) ? -1 : 0;
      $9 = $3 | 1 | 0;
      HEAP32[($5 + ($9 << 2 | 0) | 0) >> 2] = (HEAPU8[($6 + $9 | 0) >> 0] | 0 | 0) == (88 | 0) ? -1 : 0;
      $3 = $3 + 2 | 0;
      if (($3 | 0) != (122 | 0)) {
       continue label$11
      }
      break label$11;
     };
     $6 = $6 + 122 | 0;
     $5 = $5 + ((HEAP32[($0 + 36 | 0) >> 2] | 0) << 2 | 0) | 0;
     $11 = $11 + 1 | 0;
     if (($11 | 0) != (27 | 0)) {
      continue label$10
     }
     break label$1;
    };
   }
   $3 = Math_imul($6, HEAPU16[($3 + 6 | 0) >> 1] | 0) + $5 | 0;
   $5 = $3 + 1 | 0;
   label$12 : {
    $9 = HEAP32[($0 + 28 | 0) >> 2] | 0;
    if (!$9) {
     break label$12
    }
    $6 = $3 + $6 | 0;
    HEAP8[(($6 + $9 | 0) + 1 | 0) >> 0] = 255;
    HEAP8[((HEAP32[($0 + 28 | 0) >> 2] | 0) + $6 | 0) >> 0] = 255;
    HEAP8[((HEAP32[($0 + 28 | 0) >> 2] | 0) + $5 | 0) >> 0] = 255;
    HEAP8[((HEAP32[($0 + 28 | 0) >> 2] | 0) + $3 | 0) >> 0] = 255;
    break label$1;
   }
   $9 = HEAP32[($0 + 32 | 0) >> 2] | 0;
   i64toi32_i32$1 = $9 + (($3 + $6 | 0) << 2 | 0) | 0;
   HEAP32[i64toi32_i32$1 >> 2] = -1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = -1;
   HEAP32[($9 + ($5 << 2 | 0) | 0) >> 2] = -1;
   HEAP32[($9 + ($3 << 2 | 0) | 0) >> 2] = -1;
  }
  $3 = HEAPU16[(($1 + Math_imul($2, 28) | 0) + 6 | 0) >> 1] | 0;
  HEAPF32[($0 + 52 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($0 + 44 | 0) >> 2]) * Math_fround(Math_fround((HEAPU16[$4 >> 1] | 0) >>> 0) + Math_fround(.5)));
  HEAPF32[($0 + 56 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($0 + 48 | 0) >> 2]) * Math_fround(Math_fround($3 >>> 0) + Math_fround(.5)));
  label$13 : {
   if ((HEAPU8[$0 >> 0] | 0) & 4 | 0) {
    break label$13
   }
   $12 = (HEAP32[($0 + 80 | 0) >> 2] | 0) + Math_imul(HEAP32[($0 + 1132 | 0) >> 2] | 0, 28) | 0;
   $13 = $12 + 6 | 0;
   $14 = $12 + 4 | 0;
   $10 = 0;
   $5 = 0;
   label$14 : while (1) {
    $7 = HEAPU16[$12 >> 1] | 0;
    $9 = $5;
    $5 = $7 - $5 | 0;
    $4 = $5 >>> 1 | 0;
    $15 = $4 + $9 | 0;
    label$15 : {
     label$16 : {
      $3 = HEAP32[($0 + 28 | 0) >> 2] | 0;
      if (!$3) {
       break label$16
      }
      $3 = $3 + (Math_imul($9 + (HEAPU16[$13 >> 1] | 0) | 0, HEAP32[($0 + 36 | 0) >> 2] | 0) + (HEAPU16[$14 >> 1] | 0) | 0) | 0;
      label$17 : {
       if ($5 >>> 0 < 2 >>> 0) {
        break label$17
       }
       memset($3 | 0, 0 | 0, ($4 >>> 0 > 1 >>> 0 ? $4 : 1) | 0) | 0;
      }
      label$18 : {
       if (!$9) {
        break label$18
       }
       memset($3 + $4 | 0 | 0, 255 | 0, $9 | 0) | 0;
      }
      if (($15 | 0) == ($7 | 0)) {
       break label$15
      }
      $357 = ($3 + $4 | 0) + $9 | 0;
      $3 = $7 - $15 | 0;
      memset($357 | 0, 0 | 0, ($3 >>> 0 > 1 >>> 0 ? $3 : 1) | 0) | 0;
      break label$15;
     }
     $3 = (HEAP32[($0 + 32 | 0) >> 2] | 0) + ((Math_imul($9 + (HEAPU16[$13 >> 1] | 0) | 0, HEAP32[($0 + 36 | 0) >> 2] | 0) + (HEAPU16[$14 >> 1] | 0) | 0) << 2 | 0) | 0;
     label$19 : {
      if ($5 >>> 0 < 2 >>> 0) {
       break label$19
      }
      $5 = ($10 + $7 | 0) >>> 1 | 0;
      $5 = $5 >>> 0 > 1 >>> 0 ? $5 : 1;
      $2 = $5 & 7 | 0;
      $11 = 0;
      $6 = 0;
      label$20 : {
       if (($5 + -1 | 0) >>> 0 < 7 >>> 0) {
        break label$20
       }
       $8 = $5 & 2147483640 | 0;
       $6 = 0;
       $1 = 0;
       label$21 : while (1) {
        $5 = $6 << 2 | 0;
        HEAP32[($3 + $5 | 0) >> 2] = 16777215;
        HEAP32[($3 + ($5 | 4 | 0) | 0) >> 2] = 16777215;
        HEAP32[($3 + ($5 | 8 | 0) | 0) >> 2] = 16777215;
        HEAP32[($3 + ($5 | 12 | 0) | 0) >> 2] = 16777215;
        HEAP32[($3 + ($5 | 16 | 0) | 0) >> 2] = 16777215;
        HEAP32[($3 + ($5 | 20 | 0) | 0) >> 2] = 16777215;
        HEAP32[($3 + ($5 | 24 | 0) | 0) >> 2] = 16777215;
        HEAP32[($3 + ($5 | 28 | 0) | 0) >> 2] = 16777215;
        $6 = $6 + 8 | 0;
        $1 = $1 + 8 | 0;
        if (($1 | 0) != ($8 | 0)) {
         continue label$21
        }
        break label$21;
       };
      }
      if (!$2) {
       break label$19
      }
      label$22 : while (1) {
       HEAP32[($3 + ($6 << 2 | 0) | 0) >> 2] = 16777215;
       $6 = $6 + 1 | 0;
       $11 = $11 + 1 | 0;
       if (($11 | 0) != ($2 | 0)) {
        continue label$22
       }
       break label$22;
      };
     }
     $5 = $9 << 2 | 0;
     label$23 : {
      if (!$9) {
       break label$23
      }
      memset($3 + ($4 << 2 | 0) | 0 | 0, 255 | 0, $5 | 0) | 0;
     }
     if (($15 | 0) == ($7 | 0)) {
      break label$15
     }
     $6 = $10 + $7 | 0;
     $6 = $6 - ($6 >>> 1 | 0) | 0;
     $1 = $6 >>> 0 > 1 >>> 0 ? $6 : 1;
     $2 = $1 & 7 | 0;
     $3 = ($3 + ($4 << 2 | 0) | 0) + $5 | 0;
     $11 = 0;
     $6 = 0;
     label$24 : {
      if (($1 + -1 | 0) >>> 0 < 7 >>> 0) {
       break label$24
      }
      $8 = $1 & -8 | 0;
      $6 = 0;
      $1 = 0;
      label$25 : while (1) {
       $5 = $6 << 2 | 0;
       HEAP32[($3 + $5 | 0) >> 2] = 16777215;
       HEAP32[($3 + ($5 | 4 | 0) | 0) >> 2] = 16777215;
       HEAP32[($3 + ($5 | 8 | 0) | 0) >> 2] = 16777215;
       HEAP32[($3 + ($5 | 12 | 0) | 0) >> 2] = 16777215;
       HEAP32[($3 + ($5 | 16 | 0) | 0) >> 2] = 16777215;
       HEAP32[($3 + ($5 | 20 | 0) | 0) >> 2] = 16777215;
       HEAP32[($3 + ($5 | 24 | 0) | 0) >> 2] = 16777215;
       HEAP32[($3 + ($5 | 28 | 0) | 0) >> 2] = 16777215;
       $6 = $6 + 8 | 0;
       $1 = $1 + 8 | 0;
       if (($1 | 0) != ($8 | 0)) {
        continue label$25
       }
       break label$25;
      };
     }
     if (!$2) {
      break label$15
     }
     label$26 : while (1) {
      HEAP32[($3 + ($6 << 2 | 0) | 0) >> 2] = 16777215;
      $6 = $6 + 1 | 0;
      $11 = $11 + 1 | 0;
      if (($11 | 0) != ($2 | 0)) {
       continue label$26
      }
      break label$26;
     };
    }
    $16 = Math_fround(HEAPF32[($0 + 48 | 0) >> 2]);
    $6 = HEAPU16[$13 >> 1] | 0;
    $3 = $0 + ($9 << 4 | 0) | 0;
    $17 = Math_fround(HEAPF32[($0 + 44 | 0) >> 2]);
    $11 = $4 + (HEAPU16[$14 >> 1] | 0) | 0;
    $5 = $9 + 1 | 0;
    HEAPF32[($3 + 104 | 0) >> 2] = Math_fround($17 * Math_fround(($11 + $5 | 0) >>> 0));
    HEAPF32[($3 + 96 | 0) >> 2] = Math_fround($17 * Math_fround(($11 + -1 | 0) >>> 0));
    $6 = $9 + $6 | 0;
    $16 = Math_fround(Math_fround(Math_fround($16 * Math_fround($6 >>> 0)) + Math_fround($16 * Math_fround(($6 + 1 | 0) >>> 0))) * Math_fround(.5));
    HEAPF32[($3 + 108 | 0) >> 2] = $16;
    HEAPF32[($3 + 100 | 0) >> 2] = $16;
    $10 = $10 + -1 | 0;
    if (($5 | 0) != (64 | 0)) {
     continue label$14
    }
    break label$14;
   };
  }
  $5 = 0;
  label$27 : {
   $6 = HEAP32[($0 + 72 | 0) >> 2] | 0;
   if (($6 | 0) <= (0 | 0)) {
    break label$27
   }
   label$28 : while (1) {
    label$29 : {
     $3 = (HEAP32[($0 + 80 | 0) >> 2] | 0) + Math_imul($5, 28) | 0;
     $9 = HEAP32[($3 + 24 | 0) >> 2] | 0;
     if (!$9) {
      break label$29
     }
     $11 = HEAP32[($3 + 8 | 0) >> 2] | 0;
     if (!$11) {
      break label$29
     }
     $614 = $11 & 65535 | 0;
     $16 = Math_fround(HEAPF32[($3 + 16 | 0) >> 2]);
     $617 = $16;
     $17 = Math_fround(HEAPF32[($3 + 20 | 0) >> 2]);
     $621 = $17;
     $6 = HEAPU16[$3 >> 1] | 0;
     $627 = Math_fround($16 + Math_fround($6 >>> 0));
     $11 = HEAPU16[($3 + 2 | 0) >> 1] | 0;
     $633 = Math_fround($17 + Math_fround($11 >>> 0));
     $16 = Math_fround(HEAPF32[($0 + 44 | 0) >> 2]);
     $1 = HEAPU16[($3 + 4 | 0) >> 1] | 0;
     $17 = Math_fround(HEAPF32[($0 + 48 | 0) >> 2]);
     $2 = HEAPU16[($3 + 6 | 0) >> 1] | 0;
     ImFont__AddGlyph_28ImFontConfig_20const__2c_20unsigned_20short_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($9 | 0, 0 | 0, $614 | 0, Math_fround($617), Math_fround($621), Math_fround($627), Math_fround($633), Math_fround(Math_fround($16 * Math_fround($1 >>> 0))), Math_fround(Math_fround($17 * Math_fround($2 >>> 0))), Math_fround(Math_fround($16 * Math_fround($6 + $1 | 0 | 0))), Math_fround(Math_fround($17 * Math_fround($11 + $2 | 0 | 0))), Math_fround(Math_fround(HEAPF32[($3 + 12 | 0) >> 2])));
     $6 = HEAP32[($0 + 72 | 0) >> 2] | 0;
    }
    $5 = $5 + 1 | 0;
    if (($5 | 0) < ($6 | 0)) {
     continue label$28
    }
    break label$28;
   };
  }
  label$30 : {
   $5 = HEAP32[($0 + 60 | 0) >> 2] | 0;
   if (($5 | 0) < (1 | 0)) {
    break label$30
   }
   $3 = 0;
   label$31 : while (1) {
    label$32 : {
     $6 = HEAP32[((HEAP32[($0 + 68 | 0) >> 2] | 0) + ($3 << 2 | 0) | 0) >> 2] | 0;
     if (!(HEAPU8[($6 + 72 | 0) >> 0] | 0)) {
      break label$32
     }
     ImFont__BuildLookupTable_28_29($6 | 0);
     $5 = HEAP32[($0 + 60 | 0) >> 2] | 0;
    }
    $3 = $3 + 1 | 0;
    if (($3 | 0) < ($5 | 0)) {
     continue label$31
    }
    break label$31;
   };
  }
  HEAP8[($0 + 24 | 0) >> 0] = 1;
 }
 
 function rect_height_compare_28void_20const__2c_20void_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = -1;
  label$1 : {
   $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   $4 = HEAP32[($1 + 8 | 0) >> 2] | 0;
   if (($3 | 0) > ($4 | 0)) {
    break label$1
   }
   $2 = 1;
   if (($3 | 0) < ($4 | 0)) {
    break label$1
   }
   $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
   $2 = ($2 | 0) > ($1 | 0) ? -1 : ($2 | 0) < ($1 | 0);
  }
  return $2 | 0;
 }
 
 function rect_original_order_28void_20const__2c_20void_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = HEAP32[($0 + 20 | 0) >> 2] | 0;
  $1 = HEAP32[($1 + 20 | 0) >> 2] | 0;
  return (($0 | 0) < ($1 | 0) ? -1 : ($0 | 0) > ($1 | 0)) | 0;
 }
 
 function ImFont__AddGlyph_28ImFontConfig_20const__2c_20unsigned_20short_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = Math_fround($3);
  $4 = Math_fround($4);
  $5 = Math_fround($5);
  $6 = Math_fround($6);
  $7 = Math_fround($7);
  $8 = Math_fround($8);
  $9 = Math_fround($9);
  $10 = Math_fround($10);
  $11 = Math_fround($11);
  var $12 = 0, $15 = 0, $16 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $17 = 0;
  label$1 : {
   if (!$1) {
    break label$1
   }
   $12 = HEAPU8[($1 + 28 | 0) >> 0] | 0;
   label$2 : {
    $13 = Math_fround(HEAPF32[($1 + 52 | 0) >> 2]);
    $14 = Math_fround(HEAPF32[($1 + 56 | 0) >> 2]);
    $13 = $13 > $11 ? $13 : $14 < $11 ? $14 : $11;
    if ($13 == $11) {
     break label$2
    }
    $15 = $12 & 255 | 0;
    label$3 : {
     label$4 : {
      $11 = Math_fround(Math_fround($13 - $11) * Math_fround(.5));
      if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
       break label$4
      }
      $16 = ~~$11;
      break label$3;
     }
     $16 = -2147483648;
    }
    $11 = $15 ? Math_fround($16 | 0) : $11;
    $5 = Math_fround($11 + $5);
    $3 = Math_fround($11 + $3);
   }
   $12 = $12 & 255 | 0;
   label$5 : {
    label$6 : {
     $11 = Math_fround($13 + Math_fround(.5));
     if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
      break label$6
     }
     $15 = ~~$11;
     break label$5;
    }
    $15 = -2147483648;
   }
   $11 = Math_fround(Math_fround(HEAPF32[($1 + 32 | 0) >> 2]) + ($12 ? Math_fround($15 | 0) : $13));
  }
  $1 = HEAP32[($0 + 32 | 0) >> 2] | 0;
  $12 = $1 + 1 | 0;
  label$7 : {
   $15 = HEAP32[($0 + 36 | 0) >> 2] | 0;
   if (($15 | 0) > ($1 | 0)) {
    break label$7
   }
   label$8 : {
    label$9 : {
     if ($15) {
      break label$9
     }
     $16 = 8;
     break label$8;
    }
    $16 = (($15 | 0) / (2 | 0) | 0) + $15 | 0;
   }
   $16 = ($16 | 0) > ($12 | 0) ? $16 : $12;
   if (($15 | 0) >= ($16 | 0)) {
    break label$7
   }
   $15 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($16, 40) | 0) | 0;
   label$10 : {
    $17 = HEAP32[($0 + 40 | 0) >> 2] | 0;
    if (!$17) {
     break label$10
    }
    __memcpy($15 | 0, $17 | 0, Math_imul(HEAP32[($0 + 32 | 0) >> 2] | 0, 40) | 0) | 0;
    ImGui__MemFree_28void__29(HEAP32[($0 + 40 | 0) >> 2] | 0 | 0);
   }
   HEAP32[($0 + 36 | 0) >> 2] = $16;
   HEAP32[($0 + 40 | 0) >> 2] = $15;
  }
  HEAP32[($0 + 32 | 0) >> 2] = $12;
  $1 = (HEAP32[($0 + 40 | 0) >> 2] | 0) + Math_imul($1, 40) | 0;
  HEAPF32[($1 + 36 | 0) >> 2] = $10;
  HEAPF32[($1 + 32 | 0) >> 2] = $9;
  HEAPF32[($1 + 28 | 0) >> 2] = $8;
  HEAPF32[($1 + 24 | 0) >> 2] = $7;
  HEAPF32[($1 + 20 | 0) >> 2] = $6;
  HEAPF32[($1 + 16 | 0) >> 2] = $5;
  HEAPF32[($1 + 12 | 0) >> 2] = $4;
  HEAPF32[($1 + 8 | 0) >> 2] = $3;
  HEAPF32[($1 + 4 | 0) >> 2] = $11;
  HEAP32[$1 >> 2] = ($4 != $6 ? ($3 != $5) << 1 | 0 : 0) | ($2 << 2 | 0) | 0;
  $1 = HEAP32[($0 + 48 | 0) >> 2] | 0;
  $12 = HEAP32[($1 + 12 | 0) >> 2] | 0;
  HEAP8[($0 + 72 | 0) >> 0] = 1;
  label$11 : {
   label$12 : {
    $11 = Math_fround(Math_fround($12 | 0) + Math_fround(.9900000095367432));
    $5 = Math_fround(Math_fround(Math_fround($9 - $7) * Math_fround(HEAP32[($1 + 36 | 0) >> 2] | 0 | 0)) + $11);
    if (!(Math_fround(Math_abs($5)) < Math_fround(2147483648.0))) {
     break label$12
    }
    $12 = ~~$5;
    break label$11;
   }
   $12 = -2147483648;
  }
  label$13 : {
   label$14 : {
    $11 = Math_fround(Math_fround(Math_fround($10 - $8) * Math_fround(HEAP32[($1 + 40 | 0) >> 2] | 0 | 0)) + $11);
    if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
     break label$14
    }
    $1 = ~~$11;
    break label$13;
   }
   $1 = -2147483648;
  }
  HEAP32[($0 + 88 | 0) >> 2] = Math_imul($1, $12) + (HEAP32[($0 + 88 | 0) >> 2] | 0) | 0;
 }
 
 function ImFont__BuildLookupTable_28_29($0) {
  $0 = $0 | 0;
  var $6 = 0, $4 = 0, $5 = 0, $8 = 0, $1 = 0, $2 = 0, $3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $10 = Math_fround(0), $7 = 0, $9 = 0, $9$hi = 0, $276 = 0, $281 = 0, $286 = 0, $291 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   label$2 : {
    $1 = HEAP32[($0 + 32 | 0) >> 2] | 0;
    if ($1) {
     break label$2
    }
    $2 = 0;
    break label$1;
   }
   $3 = $1 & 3 | 0;
   $4 = HEAP32[($0 + 40 | 0) >> 2] | 0;
   $5 = 0;
   $2 = 0;
   $6 = 0;
   label$3 : {
    if ($1 >>> 0 < 4 >>> 0) {
     break label$3
    }
    $7 = $1 & -4 | 0;
    $2 = 0;
    $6 = 0;
    $1 = 0;
    label$4 : while (1) {
     $8 = (HEAP32[($4 + Math_imul($6, 40) | 0) >> 2] | 0) >>> 2 | 0;
     $2 = ($2 | 0) > ($8 | 0) ? $2 : $8;
     $8 = (HEAP32[($4 + Math_imul($6 | 1 | 0, 40) | 0) >> 2] | 0) >>> 2 | 0;
     $2 = ($2 | 0) > ($8 | 0) ? $2 : $8;
     $8 = (HEAP32[($4 + Math_imul($6 | 2 | 0, 40) | 0) >> 2] | 0) >>> 2 | 0;
     $2 = ($2 | 0) > ($8 | 0) ? $2 : $8;
     $8 = (HEAP32[($4 + Math_imul($6 | 3 | 0, 40) | 0) >> 2] | 0) >>> 2 | 0;
     $2 = ($2 | 0) > ($8 | 0) ? $2 : $8;
     $6 = $6 + 4 | 0;
     $1 = $1 + 4 | 0;
     if (($1 | 0) != ($7 | 0)) {
      continue label$4
     }
     break label$4;
    };
   }
   if (!$3) {
    break label$1
   }
   label$5 : while (1) {
    $1 = (HEAP32[($4 + Math_imul($6, 40) | 0) >> 2] | 0) >>> 2 | 0;
    $2 = ($2 | 0) > ($1 | 0) ? $2 : $1;
    $6 = $6 + 1 | 0;
    $5 = $5 + 1 | 0;
    if (($5 | 0) != ($3 | 0)) {
     continue label$5
    }
    break label$5;
   };
  }
  label$6 : {
   $6 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   if (!$6) {
    break label$6
   }
   i64toi32_i32$1 = $0;
   i64toi32_i32$0 = 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
   ImGui__MemFree_28void__29($6 | 0);
   HEAP32[($0 + 8 | 0) >> 2] = 0;
  }
  label$7 : {
   $6 = HEAP32[($0 + 28 | 0) >> 2] | 0;
   if (!$6) {
    break label$7
   }
   i64toi32_i32$1 = $0;
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 20 | 0) >> 2] = 0;
   HEAP32[($0 + 24 | 0) >> 2] = i64toi32_i32$0;
   ImGui__MemFree_28void__29($6 | 0);
   HEAP32[($0 + 28 | 0) >> 2] = 0;
  }
  $6 = 0;
  HEAP16[($0 + 92 | 0) >> 1] = 0;
  HEAP8[($0 + 72 | 0) >> 0] = 0;
  ImFont__GrowIndex_28int_29($0 | 0, $2 + 1 | 0 | 0);
  label$8 : {
   $1 = HEAP32[($0 + 32 | 0) >> 2] | 0;
   if (($1 | 0) < (1 | 0)) {
    break label$8
   }
   $8 = HEAP32[($0 + 40 | 0) >> 2] | 0;
   $3 = HEAP32[($0 + 28 | 0) >> 2] | 0;
   $7 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   label$9 : while (1) {
    $5 = $8 + Math_imul($6, 40) | 0;
    $4 = HEAP32[$5 >> 2] | 0;
    HEAPF32[($7 + ($4 & -4 | 0) | 0) >> 2] = Math_fround(HEAPF32[($5 + 4 | 0) >> 2]);
    HEAP16[($3 + (($4 >>> 1 | 0) & 2147483646 | 0) | 0) >> 1] = $6;
    $5 = ($0 + ($4 >>> 17 | 0) | 0) + 92 | 0;
    HEAP8[$5 >> 0] = HEAPU8[$5 >> 0] | 0 | (1 << (($4 >>> 14 | 0) & 7 | 0) | 0) | 0;
    $6 = $6 + 1 | 0;
    if (($6 | 0) != ($1 | 0)) {
     continue label$9
    }
    break label$9;
   };
  }
  label$10 : {
   label$11 : {
    label$12 : {
     $6 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     if ($6 >>> 0 > 32 >>> 0) {
      break label$12
     }
     if (HEAP32[($0 + 44 | 0) >> 2] | 0) {
      break label$11
     }
     break label$10;
    }
    $4 = HEAPU16[((HEAP32[($0 + 28 | 0) >> 2] | 0) + 64 | 0) >> 1] | 0;
    if (!(wasm2js_i32$0 = HEAP32[($0 + 44 | 0) >> 2] | 0, wasm2js_i32$1 = (HEAP32[($0 + 40 | 0) >> 2] | 0) + Math_imul($4, 40) | 0, wasm2js_i32$2 = ($4 | 0) == (65535 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1)) {
     break label$10
    }
   }
   label$13 : {
    label$14 : {
     $5 = HEAP32[($0 + 40 | 0) >> 2] | 0;
     $4 = $1 + -1 | 0;
     if (((HEAP32[($5 + Math_imul($4, 40) | 0) >> 2] | 0) & -4 | 0 | 0) != (36 | 0)) {
      break label$14
     }
     $1 = $4;
     break label$13;
    }
    $4 = $1 + 1 | 0;
    label$15 : {
     $8 = HEAP32[($0 + 36 | 0) >> 2] | 0;
     if (($8 | 0) > ($1 | 0)) {
      break label$15
     }
     label$16 : {
      label$17 : {
       if ($8) {
        break label$17
       }
       $3 = 8;
       break label$16;
      }
      $3 = (($8 | 0) / (2 | 0) | 0) + $8 | 0;
     }
     $3 = ($3 | 0) > ($4 | 0) ? $3 : $4;
     if (($8 | 0) >= ($3 | 0)) {
      break label$15
     }
     $5 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($3, 40) | 0) | 0;
     label$18 : {
      $6 = HEAP32[($0 + 40 | 0) >> 2] | 0;
      if (!$6) {
       break label$18
      }
      __memcpy($5 | 0, $6 | 0, Math_imul(HEAP32[($0 + 32 | 0) >> 2] | 0, 40) | 0) | 0;
      ImGui__MemFree_28void__29(HEAP32[($0 + 40 | 0) >> 2] | 0 | 0);
     }
     HEAP32[($0 + 36 | 0) >> 2] = $3;
     HEAP32[($0 + 40 | 0) >> 2] = $5;
     $6 = HEAP32[($0 + 20 | 0) >> 2] | 0;
    }
    HEAP32[($0 + 32 | 0) >> 2] = $4;
   }
   $4 = $5 + Math_imul($1, 40) | 0;
   label$19 : {
    label$20 : {
     if ($6 >>> 0 > 32 >>> 0) {
      break label$20
     }
     $6 = HEAP32[($0 + 44 | 0) >> 2] | 0;
     break label$19;
    }
    $6 = HEAPU16[((HEAP32[($0 + 28 | 0) >> 2] | 0) + 64 | 0) >> 1] | 0;
    $6 = (wasm2js_i32$0 = HEAP32[($0 + 44 | 0) >> 2] | 0, wasm2js_i32$1 = $5 + Math_imul($6, 40) | 0, wasm2js_i32$2 = ($6 | 0) == (65535 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
   }
   i64toi32_i32$2 = $6;
   i64toi32_i32$0 = HEAP32[$6 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($6 + 4 | 0) >> 2] | 0;
   $9 = i64toi32_i32$0;
   $9$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $4;
   HEAP32[$4 >> 2] = $9;
   HEAP32[($4 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $6 + 32 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $276 = i64toi32_i32$1;
   i64toi32_i32$1 = $4 + 32 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $276;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $6 + 24 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $281 = i64toi32_i32$0;
   i64toi32_i32$0 = $4 + 24 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $281;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $6 + 16 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $286 = i64toi32_i32$1;
   i64toi32_i32$1 = $4 + 16 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $286;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $6 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $291 = i64toi32_i32$0;
   i64toi32_i32$0 = $4 + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $291;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $9$hi;
   HEAP32[$4 >> 2] = $9 & 3 | 0 | 36 | 0;
   $6 = $5 + Math_imul($1, 40) | 0;
   $10 = Math_fround(Math_fround(HEAPF32[($6 + 4 | 0) >> 2]) * Math_fround(4.0));
   HEAPF32[($6 + 4 | 0) >> 2] = $10;
   HEAPF32[((HEAP32[($0 + 8 | 0) >> 2] | 0) + 36 | 0) >> 2] = $10;
   HEAP16[((HEAP32[($0 + 28 | 0) >> 2] | 0) + (((HEAP32[$4 >> 2] | 0) >>> 1 | 0) & 2147483646 | 0) | 0) >> 1] = (HEAPU16[($0 + 32 | 0) >> 1] | 0) + -1 | 0;
   $6 = HEAP32[($0 + 20 | 0) >> 2] | 0;
  }
  label$21 : {
   label$22 : {
    if ($6 >>> 0 > 32 >>> 0) {
     break label$22
    }
    $4 = HEAP32[($0 + 44 | 0) >> 2] | 0;
    break label$21;
   }
   $4 = HEAPU16[((HEAP32[($0 + 28 | 0) >> 2] | 0) + 64 | 0) >> 1] | 0;
   $4 = (wasm2js_i32$0 = HEAP32[($0 + 44 | 0) >> 2] | 0, wasm2js_i32$1 = (HEAP32[($0 + 40 | 0) >> 2] | 0) + Math_imul($4, 40) | 0, wasm2js_i32$2 = ($4 | 0) == (65535 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  }
  label$23 : {
   if (!$4) {
    break label$23
   }
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) & -3 | 0;
   $6 = HEAP32[($0 + 20 | 0) >> 2] | 0;
  }
  label$24 : {
   label$25 : {
    if ($6 >>> 0 > 9 >>> 0) {
     break label$25
    }
    $4 = HEAP32[($0 + 44 | 0) >> 2] | 0;
    break label$24;
   }
   $4 = HEAPU16[((HEAP32[($0 + 28 | 0) >> 2] | 0) + 18 | 0) >> 1] | 0;
   $4 = (wasm2js_i32$0 = HEAP32[($0 + 44 | 0) >> 2] | 0, wasm2js_i32$1 = (HEAP32[($0 + 40 | 0) >> 2] | 0) + Math_imul($4, 40) | 0, wasm2js_i32$2 = ($4 | 0) == (65535 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  }
  label$26 : {
   if (!$4) {
    break label$26
   }
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) & -3 | 0;
   $6 = HEAP32[($0 + 20 | 0) >> 2] | 0;
  }
  $4 = HEAP32[($0 + 40 | 0) >> 2] | 0;
  $1 = HEAP32[($0 + 28 | 0) >> 2] | 0;
  label$27 : {
   $5 = HEAPU16[($0 + 60 | 0) >> 1] | 0;
   if (($5 | 0) != (65535 | 0)) {
    break label$27
   }
   label$28 : {
    label$29 : {
     if (!$4) {
      break label$29
     }
     label$30 : {
      label$31 : {
       if ($6 >>> 0 < 8231 >>> 0) {
        break label$31
       }
       $5 = 8230;
       if ((HEAPU16[($1 + 16460 | 0) >> 1] | 0 | 0) == (65535 | 0)) {
        break label$30
       }
       break label$28;
      }
      if ($6 >>> 0 < 134 >>> 0) {
       break label$29
      }
     }
     $5 = 133;
     if ((HEAPU16[($1 + 266 | 0) >> 1] | 0 | 0) != (65535 | 0)) {
      break label$28
     }
    }
    $5 = 65535;
   }
   HEAP16[($0 + 60 | 0) >> 1] = $5;
  }
  label$32 : {
   label$33 : {
    label$34 : {
     label$35 : {
      if (!$4) {
       break label$35
      }
      if ($6 >>> 0 < 47 >>> 0) {
       break label$35
      }
      $8 = 46;
      label$36 : {
       $3 = HEAPU16[($1 + 92 | 0) >> 1] | 0;
       if (($3 | 0) != (65535 | 0)) {
        break label$36
       }
       if ($6 >>> 0 < 65295 >>> 0) {
        break label$35
       }
       $8 = 65294;
       $3 = HEAPU16[($1 + 130588 | 0) >> 1] | 0;
       if (($3 | 0) == (65535 | 0)) {
        break label$35
       }
      }
      if (($5 | 0) != (65535 | 0)) {
       break label$34
      }
      HEAP16[($0 + 62 | 0) >> 1] = 3;
      HEAP16[($0 + 60 | 0) >> 1] = $8;
      $5 = (wasm2js_i32$0 = $4 + Math_imul($3, 40) | 0, wasm2js_i32$1 = HEAP32[($0 + 44 | 0) >> 2] | 0, wasm2js_i32$2 = $6 >>> 0 > $8 >>> 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
      $10 = Math_fround(Math_fround(Math_fround(HEAPF32[($5 + 16 | 0) >> 2]) - Math_fround(HEAPF32[($5 + 8 | 0) >> 2])) + Math_fround(1.0));
      HEAPF32[($0 + 68 | 0) >> 2] = $10;
      $10 = Math_fround(Math_fround($10 * Math_fround(3.0)) + Math_fround(-1.0));
      break label$33;
     }
     if (($5 | 0) == (65535 | 0)) {
      break label$32
     }
    }
    HEAP16[($0 + 62 | 0) >> 1] = 1;
    label$37 : {
     label$38 : {
      if ($6 >>> 0 > $5 >>> 0) {
       break label$38
      }
      $5 = HEAP32[($0 + 44 | 0) >> 2] | 0;
      break label$37;
     }
     $5 = HEAPU16[($1 + ($5 << 1 | 0) | 0) >> 1] | 0;
     $5 = (wasm2js_i32$0 = HEAP32[($0 + 44 | 0) >> 2] | 0, wasm2js_i32$1 = $4 + Math_imul($5, 40) | 0, wasm2js_i32$2 = ($5 | 0) == (65535 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
    }
    $10 = Math_fround(HEAPF32[($5 + 16 | 0) >> 2]);
    HEAPF32[($0 + 68 | 0) >> 2] = $10;
   }
   HEAPF32[($0 + 64 | 0) >> 2] = $10;
  }
  label$39 : {
   label$40 : {
    label$41 : {
     $8 = HEAPU16[($0 + 58 | 0) >> 1] | 0;
     if ($6 >>> 0 <= $8 >>> 0) {
      break label$41
     }
     $5 = 65535;
     $8 = HEAPU16[($1 + ($8 << 1 | 0) | 0) >> 1] | 0;
     if (($8 | 0) == (65535 | 0)) {
      break label$41
     }
     $8 = $4 + Math_imul($8, 40) | 0;
     HEAP32[($0 + 44 | 0) >> 2] = $8;
     if ($4) {
      break label$39
     }
     $3 = $0 + 44 | 0;
     break label$40;
    }
    HEAP32[($0 + 44 | 0) >> 2] = 0;
    $3 = $0 + 44 | 0;
    $5 = 65535;
    if (!$4) {
     break label$40
    }
    label$42 : {
     label$43 : {
      label$44 : {
       label$45 : {
        if ($6 >>> 0 < 65534 >>> 0) {
         break label$45
        }
        if ((HEAPU16[($1 + 131066 | 0) >> 1] | 0 | 0) == (65535 | 0)) {
         break label$44
        }
        $5 = 65533;
        break label$40;
       }
       if ($6 >>> 0 < 64 >>> 0) {
        break label$43
       }
      }
      if ((HEAPU16[($1 + 126 | 0) >> 1] | 0 | 0) == (65535 | 0)) {
       break label$42
      }
      $5 = 63;
      break label$40;
     }
     if ($6 >>> 0 < 33 >>> 0) {
      break label$40
     }
    }
    if ((HEAPU16[($1 + 64 | 0) >> 1] | 0 | 0) == (65535 | 0)) {
     break label$40
    }
    $5 = 32;
   }
   HEAP16[($0 + 58 | 0) >> 1] = $5;
   label$46 : {
    if ($6 >>> 0 <= $5 >>> 0) {
     break label$46
    }
    $6 = HEAPU16[($1 + ($5 << 1 | 0) | 0) >> 1] | 0;
    if (($6 | 0) == (65535 | 0)) {
     break label$46
    }
    $8 = $4 + Math_imul($6, 40) | 0;
    HEAP32[$3 >> 2] = $8;
    if ($4) {
     break label$39
    }
   }
   $8 = (Math_imul(HEAP32[($0 + 32 | 0) >> 2] | 0, 40) + $4 | 0) + -40 | 0;
   HEAP32[($0 + 44 | 0) >> 2] = $8;
   HEAP16[($0 + 58 | 0) >> 1] = (HEAP32[$8 >> 2] | 0) >>> 2 | 0;
  }
  HEAPF32[($0 + 12 | 0) >> 2] = Math_fround(HEAPF32[($8 + 4 | 0) >> 2]);
  $6 = $2 + 1 | 0;
  $3 = $6 & 1 | 0;
  $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
  label$47 : {
   label$48 : {
    if ($2) {
     break label$48
    }
    $6 = 0;
    break label$47;
   }
   $8 = $6 & -2 | 0;
   $6 = 0;
   $2 = 0;
   label$49 : while (1) {
    label$50 : {
     $5 = $6 << 2 | 0;
     $1 = $4 + $5 | 0;
     if (!(Math_fround(HEAPF32[$1 >> 2]) < Math_fround(0.0))) {
      break label$50
     }
     HEAPF32[$1 >> 2] = Math_fround(HEAPF32[($0 + 12 | 0) >> 2]);
    }
    label$51 : {
     $5 = $4 + ($5 | 4 | 0) | 0;
     if (!(Math_fround(HEAPF32[$5 >> 2]) < Math_fround(0.0))) {
      break label$51
     }
     HEAPF32[$5 >> 2] = Math_fround(HEAPF32[($0 + 12 | 0) >> 2]);
    }
    $6 = $6 + 2 | 0;
    $2 = $2 + 2 | 0;
    if (($2 | 0) != ($8 | 0)) {
     continue label$49
    }
    break label$49;
   };
  }
  label$52 : {
   if (!$3) {
    break label$52
   }
   $6 = $4 + ($6 << 2 | 0) | 0;
   if (!(Math_fround(HEAPF32[$6 >> 2]) < Math_fround(0.0))) {
    break label$52
   }
   HEAPF32[$6 >> 2] = Math_fround(HEAPF32[($0 + 12 | 0) >> 2]);
  }
 }
 
 function ImFont__GrowIndex_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  label$1 : {
   if ((HEAP32[($0 + 20 | 0) >> 2] | 0 | 0) >= ($1 | 0)) {
    break label$1
   }
   label$2 : {
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if (($2 | 0) >= ($1 | 0)) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($2) {
       break label$4
      }
      $3 = 8;
      break label$3;
     }
     $3 = (($2 | 0) / (2 | 0) | 0) + $2 | 0;
    }
    $3 = ($3 | 0) > ($1 | 0) ? $3 : $1;
    if (($2 | 0) >= ($3 | 0)) {
     break label$2
    }
    $2 = ImGui__MemAlloc_28unsigned_20long_29($3 << 2 | 0 | 0) | 0;
    label$5 : {
     $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     if (!$4) {
      break label$5
     }
     __memcpy($2 | 0, $4 | 0, (HEAP32[$0 >> 2] | 0) << 2 | 0 | 0) | 0;
     ImGui__MemFree_28void__29(HEAP32[($0 + 8 | 0) >> 2] | 0 | 0);
    }
    HEAP32[($0 + 4 | 0) >> 2] = $3;
    HEAP32[($0 + 8 | 0) >> 2] = $2;
   }
   label$6 : {
    $2 = HEAP32[$0 >> 2] | 0;
    if (($2 | 0) >= ($1 | 0)) {
     break label$6
    }
    $5 = ($2 ^ -1 | 0) + $1 | 0;
    label$7 : {
     $4 = ($1 - $2 | 0) & 3 | 0;
     if (!$4) {
      break label$7
     }
     $3 = 0;
     label$8 : while (1) {
      HEAP32[((HEAP32[($0 + 8 | 0) >> 2] | 0) + ($2 << 2 | 0) | 0) >> 2] = -1082130432;
      $2 = $2 + 1 | 0;
      $3 = $3 + 1 | 0;
      if (($3 | 0) != ($4 | 0)) {
       continue label$8
      }
      break label$8;
     };
    }
    if ($5 >>> 0 < 3 >>> 0) {
     break label$6
    }
    label$9 : while (1) {
     $3 = $2 << 2 | 0;
     HEAP32[((HEAP32[($0 + 8 | 0) >> 2] | 0) + $3 | 0) >> 2] = -1082130432;
     HEAP32[(($3 + (HEAP32[($0 + 8 | 0) >> 2] | 0) | 0) + 4 | 0) >> 2] = -1082130432;
     HEAP32[(($3 + (HEAP32[($0 + 8 | 0) >> 2] | 0) | 0) + 8 | 0) >> 2] = -1082130432;
     HEAP32[(($3 + (HEAP32[($0 + 8 | 0) >> 2] | 0) | 0) + 12 | 0) >> 2] = -1082130432;
     $2 = $2 + 4 | 0;
     if (($2 | 0) != ($1 | 0)) {
      continue label$9
     }
     break label$9;
    };
   }
   HEAP32[$0 >> 2] = $1;
   label$10 : {
    $2 = HEAP32[($0 + 24 | 0) >> 2] | 0;
    if (($2 | 0) >= ($1 | 0)) {
     break label$10
    }
    label$11 : {
     label$12 : {
      if ($2) {
       break label$12
      }
      $3 = 8;
      break label$11;
     }
     $3 = (($2 | 0) / (2 | 0) | 0) + $2 | 0;
    }
    $3 = ($3 | 0) > ($1 | 0) ? $3 : $1;
    if (($2 | 0) >= ($3 | 0)) {
     break label$10
    }
    $2 = ImGui__MemAlloc_28unsigned_20long_29($3 << 1 | 0 | 0) | 0;
    label$13 : {
     $4 = HEAP32[($0 + 28 | 0) >> 2] | 0;
     if (!$4) {
      break label$13
     }
     __memcpy($2 | 0, $4 | 0, (HEAP32[($0 + 20 | 0) >> 2] | 0) << 1 | 0 | 0) | 0;
     ImGui__MemFree_28void__29(HEAP32[($0 + 28 | 0) >> 2] | 0 | 0);
    }
    HEAP32[($0 + 24 | 0) >> 2] = $3;
    HEAP32[($0 + 28 | 0) >> 2] = $2;
   }
   label$14 : {
    $2 = HEAP32[($0 + 20 | 0) >> 2] | 0;
    if (($2 | 0) >= ($1 | 0)) {
     break label$14
    }
    $5 = ($2 ^ -1 | 0) + $1 | 0;
    label$15 : {
     $4 = ($1 - $2 | 0) & 3 | 0;
     if (!$4) {
      break label$15
     }
     $3 = 0;
     label$16 : while (1) {
      HEAP16[((HEAP32[($0 + 28 | 0) >> 2] | 0) + ($2 << 1 | 0) | 0) >> 1] = 65535;
      $2 = $2 + 1 | 0;
      $3 = $3 + 1 | 0;
      if (($3 | 0) != ($4 | 0)) {
       continue label$16
      }
      break label$16;
     };
    }
    if ($5 >>> 0 < 3 >>> 0) {
     break label$14
    }
    label$17 : while (1) {
     $3 = $2 << 1 | 0;
     HEAP16[((HEAP32[($0 + 28 | 0) >> 2] | 0) + $3 | 0) >> 1] = 65535;
     HEAP16[(($3 + (HEAP32[($0 + 28 | 0) >> 2] | 0) | 0) + 2 | 0) >> 1] = 65535;
     HEAP16[(($3 + (HEAP32[($0 + 28 | 0) >> 2] | 0) | 0) + 4 | 0) >> 1] = 65535;
     HEAP16[(($3 + (HEAP32[($0 + 28 | 0) >> 2] | 0) | 0) + 6 | 0) >> 1] = 65535;
     $2 = $2 + 4 | 0;
     if (($2 | 0) != ($1 | 0)) {
      continue label$17
     }
     break label$17;
    };
   }
   HEAP32[($0 + 20 | 0) >> 2] = $1;
  }
 }
 
 function ImFont__ImFont_28_29($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $5 = -1;
  HEAP16[(i64toi32_i32$1 + 58 | 0) >> 1] = $5;
  HEAP16[(i64toi32_i32$1 + 60 | 0) >> 1] = $5 >>> 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $6 = 0;
  HEAP16[(i64toi32_i32$1 + 62 | 0) >> 1] = $6;
  HEAP16[(i64toi32_i32$1 + 64 | 0) >> 1] = $6 >>> 16 | 0;
  HEAP16[(i64toi32_i32$1 + 66 | 0) >> 1] = i64toi32_i32$0;
  HEAP16[(i64toi32_i32$1 + 68 | 0) >> 1] = i64toi32_i32$0 >>> 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = 0;
  i64toi32_i32$1 = i64toi32_i32$1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 50 | 0;
  i64toi32_i32$0 = 0;
  $7 = 0;
  HEAP16[i64toi32_i32$1 >> 1] = $7;
  HEAP16[(i64toi32_i32$1 + 2 | 0) >> 1] = $7 >>> 16 | 0;
  HEAP16[(i64toi32_i32$1 + 4 | 0) >> 1] = i64toi32_i32$0;
  HEAP16[(i64toi32_i32$1 + 6 | 0) >> 1] = i64toi32_i32$0 >>> 16 | 0;
  $3 = $0 + 69 | 0;
  $4 = 0;
  HEAP8[$3 >> 0] = $4;
  HEAP8[($3 + 1 | 0) >> 0] = $4 >>> 8 | 0;
  HEAP8[($3 + 2 | 0) >> 0] = $4 >>> 16 | 0;
  HEAP8[($3 + 3 | 0) >> 0] = $4 >>> 24 | 0;
  i64toi32_i32$1 = $0 + 86 | 0;
  i64toi32_i32$0 = 0;
  $8 = 0;
  HEAP16[i64toi32_i32$1 >> 1] = $8;
  HEAP16[(i64toi32_i32$1 + 2 | 0) >> 1] = $8 >>> 16 | 0;
  HEAP16[(i64toi32_i32$1 + 4 | 0) >> 1] = i64toi32_i32$0;
  HEAP16[(i64toi32_i32$1 + 6 | 0) >> 1] = i64toi32_i32$0 >>> 16 | 0;
  return $0 | 0;
 }
 
 function ImFont___ImFont_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0 + 12 | 0) >> 2] = 0;
  HEAP32[($0 + 16 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   $1 = HEAP32[($0 + 40 | 0) >> 2] | 0;
   if (!$1) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 32 | 0) >> 2] = 0;
   HEAP32[($0 + 36 | 0) >> 2] = i64toi32_i32$0;
   ImGui__MemFree_28void__29($1 | 0);
   HEAP32[($0 + 40 | 0) >> 2] = 0;
  }
  label$2 : {
   $1 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   if (!$1) {
    break label$2
   }
   i64toi32_i32$0 = 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
   ImGui__MemFree_28void__29($1 | 0);
   HEAP32[($0 + 8 | 0) >> 2] = 0;
  }
  label$3 : {
   $1 = HEAP32[($0 + 28 | 0) >> 2] | 0;
   if (!$1) {
    break label$3
   }
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 20 | 0) >> 2] = 0;
   HEAP32[($0 + 24 | 0) >> 2] = i64toi32_i32$0;
   ImGui__MemFree_28void__29($1 | 0);
   HEAP32[($0 + 28 | 0) >> 2] = 0;
  }
  HEAP8[($0 + 72 | 0) >> 0] = 1;
  i64toi32_i32$0 = 0;
  HEAP32[($0 + 44 | 0) >> 2] = 0;
  HEAP32[($0 + 48 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0 + 88 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0 + 80 | 0) >> 2] = 0;
  HEAP32[($0 + 84 | 0) >> 2] = i64toi32_i32$0;
  label$4 : {
   $1 = HEAP32[($0 + 40 | 0) >> 2] | 0;
   if (!$1) {
    break label$4
   }
   ImGui__MemFree_28void__29($1 | 0);
   $1 = HEAP32[($0 + 28 | 0) >> 2] | 0;
   if (!$1) {
    break label$4
   }
   ImGui__MemFree_28void__29($1 | 0);
  }
  label$5 : {
   $1 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   if (!$1) {
    break label$5
   }
   ImGui__MemFree_28void__29($1 | 0);
  }
  return $0 | 0;
 }
 
 function ImFont__CalcTextSizeA_28float_2c_20float_2c_20float_2c_20char_20const__2c_20char_20const__2c_20char_20const___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = Math_fround($3);
  $4 = Math_fround($4);
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $9 = Math_fround(0), $11 = 0, $14 = 0, $10 = Math_fround(0), $15 = Math_fround(0), $16 = 0, $8 = 0, $12 = Math_fround(0), $13 = 0, $17 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $8 = __stack_pointer - 16 | 0;
  __stack_pointer = $8;
  label$1 : {
   if ($6) {
    break label$1
   }
   $6 = $5 + (strlen($5 | 0) | 0) | 0;
  }
  $9 = Math_fround(HEAPF32[($1 + 16 | 0) >> 2]);
  HEAP32[$0 >> 2] = 0;
  HEAP32[($0 + 4 | 0) >> 2] = 0;
  $10 = Math_fround(0.0);
  label$2 : {
   label$3 : {
    label$4 : {
     if ($6 >>> 0 > $5 >>> 0) {
      break label$4
     }
     $11 = $5;
     break label$3;
    }
    $12 = Math_fround($2 / $9);
    $13 = $1 + 12 | 0;
    $9 = Math_fround(0.0);
    label$5 : {
     label$6 : {
      label$7 : {
       if (!($4 > Math_fround(0.0))) {
        break label$7
       }
       $14 = 0;
       $15 = Math_fround(0.0);
       $10 = Math_fround(0.0);
       label$8 : while (1) {
        label$9 : {
         if ($14) {
          break label$9
         }
         $14 = ImFont__CalcWordWrapPositionA_28float_2c_20char_20const__2c_20char_20const__2c_20float_29_20const($1 | 0, Math_fround($12), $5 | 0, $6 | 0, Math_fround(Math_fround($4 - $9))) | 0;
        }
        label$10 : {
         label$11 : {
          if ($5 >>> 0 < $14 >>> 0) {
           break label$11
          }
          label$12 : {
           if (!($15 < $9)) {
            break label$12
           }
           HEAPF32[$0 >> 2] = $9;
           $15 = $9;
          }
          $10 = Math_fround($10 + $2);
          HEAPF32[($0 + 4 | 0) >> 2] = $10;
          label$13 : {
           label$14 : while (1) {
            label$15 : {
             $11 = HEAPU8[$5 >> 0] | 0;
             if (($11 | 0) == (32 | 0)) {
              break label$15
             }
             if (($11 | 0) != (9 | 0)) {
              break label$13
             }
            }
            $5 = $5 + 1 | 0;
            if (($5 | 0) != ($6 | 0)) {
             continue label$14
            }
            break label$14;
           };
           $11 = HEAPU8[$6 >> 0] | 0;
           $5 = $6;
          }
          $11 = $5 + (($11 & 255 | 0 | 0) == (10 | 0)) | 0;
          $9 = Math_fround(0.0);
          $14 = 0;
          break label$10;
         }
         $16 = HEAP8[$5 >> 0] | 0;
         HEAP32[($8 + 12 | 0) >> 2] = $16;
         label$16 : {
          label$17 : {
           if (($16 | 0) > (-1 | 0)) {
            break label$17
           }
           $11 = $5 + (ImTextCharFromUtf8_28unsigned_20int__2c_20char_20const__2c_20char_20const__29($8 + 12 | 0 | 0, $5 | 0, $6 | 0) | 0) | 0;
           $16 = HEAP32[($8 + 12 | 0) >> 2] | 0;
           break label$16;
          }
          $11 = $5 + 1 | 0;
         }
         label$18 : {
          if ($16 >>> 0 > 31 >>> 0) {
           break label$18
          }
          label$19 : {
           switch ($16 + -10 | 0 | 0) {
           case 3:
            break label$10;
           case 0:
            break label$19;
           default:
            break label$18;
           };
          }
          $10 = Math_fround($10 + $2);
          HEAPF32[($0 + 4 | 0) >> 2] = $10;
          $15 = $15 >= $9 ? $15 : $9;
          HEAPF32[$0 >> 2] = $15;
          $9 = Math_fround(0.0);
          break label$10;
         }
         $17 = Math_fround($9 + Math_fround($12 * Math_fround(HEAPF32[(wasm2js_i32$0 = (HEAP32[($1 + 8 | 0) >> 2] | 0) + ($16 << 2 | 0) | 0, wasm2js_i32$1 = $13, wasm2js_i32$2 = ($16 | 0) < (HEAP32[$1 >> 2] | 0 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) >> 2])));
         if ($17 >= $3) {
          break label$6
         }
         $9 = $17;
        }
        $5 = $11;
        if ($5 >>> 0 < $6 >>> 0) {
         continue label$8
        }
        break label$5;
       };
      }
      $15 = Math_fround(0.0);
      $10 = Math_fround(0.0);
      label$20 : while (1) {
       $14 = HEAP8[$5 >> 0] | 0;
       HEAP32[($8 + 12 | 0) >> 2] = $14;
       label$21 : {
        label$22 : {
         if (($14 | 0) < (0 | 0)) {
          break label$22
         }
         $11 = $5 + 1 | 0;
         break label$21;
        }
        $11 = $5 + (ImTextCharFromUtf8_28unsigned_20int__2c_20char_20const__2c_20char_20const__29($8 + 12 | 0 | 0, $5 | 0, $6 | 0) | 0) | 0;
        $14 = HEAP32[($8 + 12 | 0) >> 2] | 0;
       }
       label$23 : {
        label$24 : {
         if ($14 >>> 0 > 31 >>> 0) {
          break label$24
         }
         $16 = 1;
         label$25 : {
          switch ($14 + -10 | 0 | 0) {
          case 3:
           break label$23;
          case 0:
           break label$25;
          default:
           break label$24;
          };
         }
         $10 = Math_fround($10 + $2);
         HEAPF32[($0 + 4 | 0) >> 2] = $10;
         $15 = $15 >= $9 ? $15 : $9;
         HEAPF32[$0 >> 2] = $15;
         $9 = Math_fround(0.0);
         break label$23;
        }
        $4 = Math_fround($9 + Math_fround($12 * Math_fround(HEAPF32[(wasm2js_i32$0 = (HEAP32[($1 + 8 | 0) >> 2] | 0) + ($14 << 2 | 0) | 0, wasm2js_i32$1 = $13, wasm2js_i32$2 = ($14 | 0) < (HEAP32[$1 >> 2] | 0 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) >> 2])));
        $14 = $4 >= $3;
        $9 = $14 ? $9 : $4;
        $11 = $14 ? $5 : $11;
        $16 = $14 ^ 1 | 0;
       }
       if (!$16) {
        break label$5
       }
       $5 = $11;
       if ($5 >>> 0 < $6 >>> 0) {
        continue label$20
       }
       break label$5;
      };
     }
     $11 = $5;
    }
    label$26 : {
     if (!($15 < $9)) {
      break label$26
     }
     HEAPF32[$0 >> 2] = $9;
    }
    if ($9 > Math_fround(0.0)) {
     break label$3
    }
    if ($10 != Math_fround(0.0)) {
     break label$2
    }
   }
   HEAPF32[($0 + 4 | 0) >> 2] = Math_fround($10 + $2);
  }
  label$27 : {
   if (!$7) {
    break label$27
   }
   HEAP32[$7 >> 2] = $11;
  }
  __stack_pointer = $8 + 16 | 0;
 }
 
 function ImFont__RenderChar_28ImDrawList__2c_20float_2c_20ImVec2_20const__2c_20unsigned_20int_2c_20unsigned_20short_29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $7 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $6 = 0, $10 = Math_fround(0), $13 = 0, $14 = 0, $17 = 0, $8 = 0, $9 = 0, $11 = Math_fround(0), $12 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($0 + 20 | 0) >> 2] | 0) >>> 0 > $5 >>> 0) {
     break label$2
    }
    $5 = HEAP32[($0 + 44 | 0) >> 2] | 0;
    break label$1;
   }
   $5 = HEAPU16[((HEAP32[($0 + 28 | 0) >> 2] | 0) + ($5 << 1 | 0) | 0) >> 1] | 0;
   $5 = (wasm2js_i32$0 = HEAP32[($0 + 44 | 0) >> 2] | 0, wasm2js_i32$1 = (HEAP32[($0 + 40 | 0) >> 2] | 0) + Math_imul($5, 40) | 0, wasm2js_i32$2 = ($5 | 0) == (65535 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  }
  label$3 : {
   if (!$5) {
    break label$3
   }
   $6 = HEAP32[$5 >> 2] | 0;
   if (!($6 & 2 | 0)) {
    break label$3
   }
   $7 = Math_fround(1.0);
   label$4 : {
    if (!($2 >= Math_fround(0.0))) {
     break label$4
    }
    $7 = Math_fround($2 / Math_fround(HEAPF32[($0 + 16 | 0) >> 2]));
   }
   $8 = $6 & 1 | 0;
   $9 = $4 | 16777215 | 0;
   $2 = Math_fround(HEAPF32[$3 >> 2]);
   $10 = Math_fround(HEAPF32[($3 + 4 | 0) >> 2]);
   ImDrawList__PrimReserve_28int_2c_20int_29($1 | 0, 6 | 0, 4 | 0);
   $3 = HEAP32[($5 + 36 | 0) >> 2] | 0;
   $11 = Math_fround(HEAPF32[($5 + 20 | 0) >> 2]);
   $6 = HEAP32[($5 + 32 | 0) >> 2] | 0;
   $12 = Math_fround(HEAPF32[($5 + 16 | 0) >> 2]);
   $13 = HEAP32[($5 + 28 | 0) >> 2] | 0;
   $14 = HEAP32[($5 + 24 | 0) >> 2] | 0;
   $15 = Math_fround(HEAPF32[($5 + 8 | 0) >> 2]);
   $16 = Math_fround(HEAPF32[($5 + 12 | 0) >> 2]);
   $5 = HEAP32[($1 + 56 | 0) >> 2] | 0;
   $0 = HEAPU16[($1 + 40 | 0) >> 1] | 0;
   HEAP16[($5 + 6 | 0) >> 1] = $0;
   HEAP16[$5 >> 1] = $0;
   HEAP16[($5 + 10 | 0) >> 1] = $0 + 3 | 0;
   $17 = $0 + 2 | 0;
   HEAP16[($5 + 8 | 0) >> 1] = $17;
   HEAP16[($5 + 4 | 0) >> 1] = $17;
   HEAP16[($5 + 2 | 0) >> 1] = $0 + 1 | 0;
   $16 = Math_fround($16 * $7);
   label$5 : {
    label$6 : {
     if (!(Math_fround(Math_abs($10)) < Math_fround(2147483648.0))) {
      break label$6
     }
     $0 = ~~$10;
     break label$5;
    }
    $0 = -2147483648;
   }
   $5 = $8 ? $9 : $4;
   $4 = HEAP32[($1 + 52 | 0) >> 2] | 0;
   $10 = Math_fround($0 | 0);
   $16 = Math_fround($16 + $10);
   HEAPF32[($4 + 4 | 0) >> 2] = $16;
   $15 = Math_fround($15 * $7);
   label$7 : {
    label$8 : {
     if (!(Math_fround(Math_abs($2)) < Math_fround(2147483648.0))) {
      break label$8
     }
     $0 = ~~$2;
     break label$7;
    }
    $0 = -2147483648;
   }
   $2 = Math_fround($0 | 0);
   $15 = Math_fround($15 + $2);
   HEAPF32[$4 >> 2] = $15;
   $0 = HEAP32[($1 + 52 | 0) >> 2] | 0;
   HEAP32[($0 + 8 | 0) >> 2] = $14;
   HEAP32[($0 + 12 | 0) >> 2] = $13;
   $0 = HEAP32[($1 + 52 | 0) >> 2] | 0;
   $2 = Math_fround(Math_fround($12 * $7) + $2);
   HEAPF32[($0 + 20 | 0) >> 2] = $2;
   HEAP32[($0 + 16 | 0) >> 2] = $5;
   HEAPF32[($0 + 24 | 0) >> 2] = $16;
   $0 = HEAP32[($1 + 52 | 0) >> 2] | 0;
   HEAP32[($0 + 32 | 0) >> 2] = $13;
   HEAP32[($0 + 28 | 0) >> 2] = $6;
   $0 = HEAP32[($1 + 52 | 0) >> 2] | 0;
   HEAPF32[($0 + 40 | 0) >> 2] = $2;
   $7 = Math_fround(Math_fround($11 * $7) + $10);
   HEAPF32[($0 + 44 | 0) >> 2] = $7;
   HEAP32[($0 + 36 | 0) >> 2] = $5;
   $0 = HEAP32[($1 + 52 | 0) >> 2] | 0;
   HEAP32[($0 + 52 | 0) >> 2] = $3;
   HEAP32[($0 + 48 | 0) >> 2] = $6;
   $0 = HEAP32[($1 + 52 | 0) >> 2] | 0;
   HEAPF32[($0 + 60 | 0) >> 2] = $15;
   HEAPF32[($0 + 64 | 0) >> 2] = $7;
   HEAP32[($0 + 56 | 0) >> 2] = $5;
   $0 = HEAP32[($1 + 52 | 0) >> 2] | 0;
   HEAP32[($0 + 72 | 0) >> 2] = $3;
   HEAP32[($0 + 68 | 0) >> 2] = $14;
   $0 = HEAP32[($1 + 52 | 0) >> 2] | 0;
   HEAP32[($0 + 76 | 0) >> 2] = $5;
   HEAP32[($1 + 52 | 0) >> 2] = $0 + 80 | 0;
   HEAP32[($1 + 40 | 0) >> 2] = (HEAP32[($1 + 40 | 0) >> 2] | 0) + 4 | 0;
   HEAP32[($1 + 56 | 0) >> 2] = (HEAP32[($1 + 56 | 0) >> 2] | 0) + 12 | 0;
  }
 }
 
 function ImGui__RenderArrow_28ImDrawList__2c_20ImVec2_2c_20unsigned_20int_2c_20int_2c_20float_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = Math_fround($4);
  var $7 = Math_fround(0), $5 = 0, $6 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0);
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  $6 = Math_fround(HEAPF32[((HEAP32[($0 + 44 | 0) >> 2] | 0) + 12 | 0) >> 2]);
  $7 = Math_fround(Math_fround($6 * Math_fround(.4000000059604645)) * $4);
  $8 = Math_fround(HEAPF32[($1 + 4 | 0) >> 2]);
  $9 = Math_fround(HEAPF32[$1 >> 2]);
  $10 = Math_fround(0.0);
  $11 = Math_fround(0.0);
  $12 = Math_fround(0.0);
  $13 = Math_fround(0.0);
  $14 = Math_fround(0.0);
  $15 = Math_fround(0.0);
  label$1 : {
   label$2 : {
    switch ($3 | 0) {
    case 2:
     $7 = Math_fround(-$7);
    case 3:
     $10 = Math_fround($7 * Math_fround(.8659999966621399));
     $12 = Math_fround($7 * Math_fround(-.8659999966621399));
     $15 = Math_fround($7 * Math_fround(.75));
     $14 = Math_fround($7 * Math_fround(0.0));
     $11 = Math_fround($7 * Math_fround(-.75));
     $13 = $11;
     break label$1;
    case 0:
     $7 = Math_fround(-$7);
     break;
    case 1:
     break label$2;
    default:
     break label$1;
    };
   }
   $11 = Math_fround($7 * Math_fround(-.8659999966621399));
   $13 = Math_fround($7 * Math_fround(.8659999966621399));
   $15 = Math_fround($7 * Math_fround(0.0));
   $14 = Math_fround($7 * Math_fround(.75));
   $10 = Math_fround($7 * Math_fround(-.75));
   $12 = $10;
  }
  $6 = Math_fround($6 * Math_fround(.5));
  $7 = Math_fround($9 + $6);
  HEAPF32[($5 + 24 | 0) >> 2] = Math_fround($7 + $14);
  $4 = Math_fround($8 + Math_fround($6 * $4));
  HEAPF32[($5 + 28 | 0) >> 2] = Math_fround($4 + $15);
  HEAPF32[($5 + 20 | 0) >> 2] = Math_fround($4 + $13);
  HEAPF32[($5 + 16 | 0) >> 2] = Math_fround($7 + $12);
  HEAPF32[($5 + 12 | 0) >> 2] = Math_fround($4 + $11);
  HEAPF32[($5 + 8 | 0) >> 2] = Math_fround($7 + $10);
  ImDrawList__AddTriangleFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_29($0 | 0, $5 + 24 | 0 | 0, $5 + 16 | 0 | 0, $5 + 8 | 0 | 0, $2 | 0);
  __stack_pointer = $5 + 32 | 0;
 }
 
 function ImGui__RenderBullet_28ImDrawList__2c_20ImVec2_2c_20unsigned_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = Math_fround(0);
  label$1 : {
   if ($2 >>> 0 < 16777216 >>> 0) {
    break label$1
   }
   $3 = Math_fround(Math_fround(HEAPF32[((HEAP32[($0 + 44 | 0) >> 2] | 0) + 12 | 0) >> 2]) * Math_fround(.20000000298023224));
   if ($3 < Math_fround(.5)) {
    break label$1
   }
   ImDrawList___PathArcToN_28ImVec2_20const__2c_20float_2c_20float_2c_20float_2c_20int_29($0 | 0, $1 | 0, Math_fround($3), Math_fround(Math_fround(0.0)), Math_fround(Math_fround(5.4977874755859375)), 7 | 0);
   ImDrawList__AddConvexPolyFilled_28ImVec2_20const__2c_20int_2c_20unsigned_20int_29($0 | 0, HEAP32[($0 + 92 | 0) >> 2] | 0 | 0, HEAP32[($0 + 84 | 0) >> 2] | 0 | 0, $2 | 0);
   HEAP32[($0 + 84 | 0) >> 2] = 0;
  }
 }
 
 function ImGui__RenderCheckMark_28ImDrawList__2c_20ImVec2_2c_20unsigned_20int_2c_20float_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = Math_fround($3);
  var $9 = 0, $10 = 0, $6 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0);
  $4 = Math_fround($3 / Math_fround(5.0));
  $4 = $4 >= Math_fround(1.0) ? $4 : Math_fround(1.0);
  $5 = Math_fround($3 - Math_fround($4 * Math_fround(.5)));
  $3 = Math_fround($5 / Math_fround(3.0));
  $6 = Math_fround($4 * Math_fround(.25));
  $7 = Math_fround($3 + Math_fround($6 + Math_fround(HEAPF32[$1 >> 2])));
  $8 = Math_fround($7 - $3);
  $5 = Math_fround(Math_fround($5 + Math_fround($6 + Math_fround(HEAPF32[($1 + 4 | 0) >> 2]))) - Math_fround($3 * Math_fround(.5)));
  $6 = Math_fround($5 - $3);
  label$1 : {
   $1 = HEAP32[($0 + 84 | 0) >> 2] | 0;
   if (($1 | 0) != (HEAP32[($0 + 88 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $9 = $1 + 1 | 0;
   label$2 : {
    label$3 : {
     if ($1) {
      break label$3
     }
     $10 = 8;
     break label$2;
    }
    $10 = (($1 | 0) / (2 | 0) | 0) + $1 | 0;
   }
   $9 = ($10 | 0) > ($9 | 0) ? $10 : $9;
   if (($1 | 0) >= ($9 | 0)) {
    break label$1
   }
   $1 = ImGui__MemAlloc_28unsigned_20long_29($9 << 3 | 0 | 0) | 0;
   label$4 : {
    $10 = HEAP32[($0 + 92 | 0) >> 2] | 0;
    if (!$10) {
     break label$4
    }
    __memcpy($1 | 0, $10 | 0, (HEAP32[($0 + 84 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
    ImGui__MemFree_28void__29(HEAP32[($0 + 92 | 0) >> 2] | 0 | 0);
   }
   HEAP32[($0 + 88 | 0) >> 2] = $9;
   HEAP32[($0 + 92 | 0) >> 2] = $1;
   $1 = HEAP32[($0 + 84 | 0) >> 2] | 0;
  }
  $1 = (HEAP32[($0 + 92 | 0) >> 2] | 0) + ($1 << 3 | 0) | 0;
  HEAPF32[($1 + 4 | 0) >> 2] = $6;
  HEAPF32[$1 >> 2] = $8;
  $9 = HEAP32[($0 + 84 | 0) >> 2] | 0;
  $1 = $9 + 1 | 0;
  HEAP32[($0 + 84 | 0) >> 2] = $1;
  label$5 : {
   if (($1 | 0) != (HEAP32[($0 + 88 | 0) >> 2] | 0 | 0)) {
    break label$5
   }
   $9 = $9 + 2 | 0;
   label$6 : {
    label$7 : {
     if ($1) {
      break label$7
     }
     $10 = 8;
     break label$6;
    }
    $10 = (($1 | 0) / (2 | 0) | 0) + $1 | 0;
   }
   $9 = ($10 | 0) > ($9 | 0) ? $10 : $9;
   if (($1 | 0) >= ($9 | 0)) {
    break label$5
   }
   $1 = ImGui__MemAlloc_28unsigned_20long_29($9 << 3 | 0 | 0) | 0;
   label$8 : {
    $10 = HEAP32[($0 + 92 | 0) >> 2] | 0;
    if (!$10) {
     break label$8
    }
    __memcpy($1 | 0, $10 | 0, (HEAP32[($0 + 84 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
    ImGui__MemFree_28void__29(HEAP32[($0 + 92 | 0) >> 2] | 0 | 0);
   }
   HEAP32[($0 + 88 | 0) >> 2] = $9;
   HEAP32[($0 + 92 | 0) >> 2] = $1;
   $1 = HEAP32[($0 + 84 | 0) >> 2] | 0;
  }
  $6 = Math_fround(-$3);
  $1 = (HEAP32[($0 + 92 | 0) >> 2] | 0) + ($1 << 3 | 0) | 0;
  HEAPF32[($1 + 4 | 0) >> 2] = $5;
  HEAPF32[$1 >> 2] = $7;
  $9 = HEAP32[($0 + 84 | 0) >> 2] | 0;
  $1 = $9 + 1 | 0;
  HEAP32[($0 + 84 | 0) >> 2] = $1;
  label$9 : {
   if (($1 | 0) != (HEAP32[($0 + 88 | 0) >> 2] | 0 | 0)) {
    break label$9
   }
   $9 = $9 + 2 | 0;
   label$10 : {
    label$11 : {
     if ($1) {
      break label$11
     }
     $10 = 8;
     break label$10;
    }
    $10 = (($1 | 0) / (2 | 0) | 0) + $1 | 0;
   }
   $9 = ($10 | 0) > ($9 | 0) ? $10 : $9;
   if (($1 | 0) >= ($9 | 0)) {
    break label$9
   }
   $1 = ImGui__MemAlloc_28unsigned_20long_29($9 << 3 | 0 | 0) | 0;
   label$12 : {
    $10 = HEAP32[($0 + 92 | 0) >> 2] | 0;
    if (!$10) {
     break label$12
    }
    __memcpy($1 | 0, $10 | 0, (HEAP32[($0 + 84 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
    ImGui__MemFree_28void__29(HEAP32[($0 + 92 | 0) >> 2] | 0 | 0);
   }
   HEAP32[($0 + 88 | 0) >> 2] = $9;
   HEAP32[($0 + 92 | 0) >> 2] = $1;
   $1 = HEAP32[($0 + 84 | 0) >> 2] | 0;
  }
  $1 = (HEAP32[($0 + 92 | 0) >> 2] | 0) + ($1 << 3 | 0) | 0;
  HEAPF32[($1 + 4 | 0) >> 2] = Math_fround(Math_fround($6 + $6) + $5);
  HEAPF32[$1 >> 2] = Math_fround(Math_fround($3 + $3) + $7);
  $1 = (HEAP32[($0 + 84 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[($0 + 84 | 0) >> 2] = $1;
  ImDrawList__AddPolyline_28ImVec2_20const__2c_20int_2c_20unsigned_20int_2c_20int_2c_20float_29($0 | 0, HEAP32[($0 + 92 | 0) >> 2] | 0 | 0, $1 | 0, $2 | 0, 0 | 0, Math_fround($4));
  HEAP32[($0 + 84 | 0) >> 2] = 0;
 }
 
 function ImGui__RenderArrowDockMenu_28ImDrawList__2c_20ImVec2_2c_20float_2c_20unsigned_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = $3 | 0;
  var i64toi32_i32$0 = 0, $4 = 0, $11 = Math_fround(0), $6 = Math_fround(0), $9 = 0, i64toi32_i32$1 = 0, $8 = 0, $5 = Math_fround(0), $7 = Math_fround(0), i64toi32_i32$2 = 0, $10 = 0, $12 = Math_fround(0), $13 = Math_fround(0);
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  $5 = Math_fround($2 * Math_fround(.30000001192092896));
  $6 = Math_fround(HEAPF32[($1 + 4 | 0) >> 2]);
  $7 = Math_fround(HEAPF32[$1 >> 2]);
  label$1 : {
   if ($3 >>> 0 < 16777216 >>> 0) {
    break label$1
   }
   ImDrawList__PrimReserve_28int_2c_20int_29($0 | 0, 6 | 0, 4 | 0);
   i64toi32_i32$2 = HEAP32[($0 + 44 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $8 = i64toi32_i32$0;
   $1 = HEAP32[($0 + 56 | 0) >> 2] | 0;
   $9 = HEAPU16[($0 + 40 | 0) >> 1] | 0;
   HEAP16[($1 + 10 | 0) >> 1] = $9 + 3 | 0;
   $10 = $9 + 2 | 0;
   HEAP16[($1 + 8 | 0) >> 1] = $10;
   HEAP16[($1 + 6 | 0) >> 1] = $9;
   HEAP16[($1 + 4 | 0) >> 1] = $10;
   HEAP16[($1 + 2 | 0) >> 1] = $9 + 1 | 0;
   HEAP16[$1 >> 1] = $9;
   $1 = HEAP32[($0 + 52 | 0) >> 2] | 0;
   $11 = Math_fround(Math_fround($2 * Math_fround(.15000000596046448)) + $6);
   HEAPF32[($1 + 4 | 0) >> 2] = $11;
   $12 = Math_fround(Math_fround($2 * Math_fround(.20000000298023224)) + $7);
   HEAPF32[$1 >> 2] = $12;
   i64toi32_i32$0 = HEAP32[($0 + 52 | 0) >> 2] | 0;
   HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $8;
   HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
   $1 = HEAP32[($0 + 52 | 0) >> 2] | 0;
   $13 = Math_fround(Math_fround($2 * Math_fround(.800000011920929)) + $7);
   HEAPF32[($1 + 20 | 0) >> 2] = $13;
   HEAP32[($1 + 16 | 0) >> 2] = $3;
   HEAPF32[($1 + 24 | 0) >> 2] = $11;
   i64toi32_i32$0 = (HEAP32[($0 + 52 | 0) >> 2] | 0) + 28 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $8;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $1 = HEAP32[($0 + 52 | 0) >> 2] | 0;
   HEAPF32[($1 + 40 | 0) >> 2] = $13;
   $11 = Math_fround($5 + $6);
   HEAPF32[($1 + 44 | 0) >> 2] = $11;
   HEAP32[($1 + 36 | 0) >> 2] = $3;
   i64toi32_i32$0 = (HEAP32[($0 + 52 | 0) >> 2] | 0) + 48 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $8;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $1 = HEAP32[($0 + 52 | 0) >> 2] | 0;
   HEAPF32[($1 + 60 | 0) >> 2] = $12;
   HEAPF32[($1 + 64 | 0) >> 2] = $11;
   HEAP32[($1 + 56 | 0) >> 2] = $3;
   i64toi32_i32$0 = (HEAP32[($0 + 52 | 0) >> 2] | 0) + 68 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $8;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $1 = HEAP32[($0 + 52 | 0) >> 2] | 0;
   HEAP32[($1 + 76 | 0) >> 2] = $3;
   HEAP32[($0 + 52 | 0) >> 2] = $1 + 80 | 0;
   HEAP32[($0 + 40 | 0) >> 2] = (HEAP32[($0 + 40 | 0) >> 2] | 0) + 4 | 0;
   HEAP32[($0 + 56 | 0) >> 2] = (HEAP32[($0 + 56 | 0) >> 2] | 0) + 12 | 0;
  }
  $11 = Math_fround(Math_fround($2 * Math_fround(.8500000238418579)) + $6);
  HEAPF32[($4 + 12 | 0) >> 2] = $11;
  $6 = Math_fround(Math_fround($2 * Math_fround(.5)) + $7);
  HEAPF32[($4 + 8 | 0) >> 2] = $6;
  $2 = Math_fround($11 + Math_fround($2 * Math_fround(-.4000000059604645)));
  HEAPF32[($4 + 28 | 0) >> 2] = $2;
  HEAPF32[($4 + 24 | 0) >> 2] = Math_fround($6 - $5);
  HEAPF32[($4 + 20 | 0) >> 2] = $2;
  HEAPF32[($4 + 16 | 0) >> 2] = Math_fround($5 + $6);
  ImDrawList__AddTriangleFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_29($0 | 0, $4 + 24 | 0 | 0, $4 + 16 | 0 | 0, $4 + 8 | 0 | 0, $3 | 0);
  __stack_pointer = $4 + 32 | 0;
 }
 
 function ImGui__RenderRectFilledWithHole_28ImDrawList__2c_20ImRect_20const__2c_20ImRect_20const__2c_20unsigned_20int_2c_20float_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = Math_fround($4);
  var $5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $7 = Math_fround(0), $9 = Math_fround(0), $14 = 0, $15 = 0, $6 = Math_fround(0), $8 = Math_fround(0), $10 = Math_fround(0), $16 = 0, $17 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $11 = Math_fround(0), $26 = 0, $76 = 0, $27 = 0, $115 = 0, $165 = 0, $168 = 0, $229 = 0, $232 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  $6 = Math_fround(HEAPF32[($1 + 12 | 0) >> 2]);
  $7 = Math_fround(HEAPF32[($2 + 12 | 0) >> 2]);
  $8 = Math_fround(HEAPF32[($1 + 4 | 0) >> 2]);
  $9 = Math_fround(HEAPF32[($2 + 4 | 0) >> 2]);
  $10 = Math_fround(HEAPF32[($1 + 8 | 0) >> 2]);
  $11 = Math_fround(HEAPF32[($2 + 8 | 0) >> 2]);
  label$1 : {
   $12 = Math_fround(HEAPF32[$2 >> 2]);
   $13 = Math_fround(HEAPF32[$1 >> 2]);
   $14 = $12 > $13;
   if (!$14) {
    break label$1
   }
   HEAPF32[($5 + 8 | 0) >> 2] = $13;
   HEAPF32[($5 + 12 | 0) >> 2] = $9;
   HEAPF32[$5 >> 2] = $12;
   HEAPF32[($5 + 4 | 0) >> 2] = $7;
   ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29($0 | 0, $5 + 8 | 0 | 0, $5 | 0, $3 | 0, Math_fround($4), ($7 < $6 ^ 1 | 0) << 6 | 0 | ($9 > $8 ? 256 : 272) | 0 | 0);
  }
  label$2 : {
   $15 = $11 < $10;
   if (!$15) {
    break label$2
   }
   i64toi32_i32$0 = HEAP32[($2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($2 + 8 | 0) >> 2] | 0;
   $26 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$0 = __wasm_rotl_i64($26 | 0, i64toi32_i32$1 | 0, 32 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $76 = i64toi32_i32$0;
   i64toi32_i32$0 = $5;
   HEAP32[($5 + 8 | 0) >> 2] = $76;
   HEAP32[($5 + 12 | 0) >> 2] = i64toi32_i32$1;
   $10 = Math_fround(HEAPF32[($1 + 8 | 0) >> 2]);
   HEAPF32[($5 + 4 | 0) >> 2] = Math_fround(HEAPF32[($2 + 12 | 0) >> 2]);
   HEAPF32[$5 >> 2] = $10;
   ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29($0 | 0, $5 + 8 | 0 | 0, $5 | 0, $3 | 0, Math_fround($4), ($7 < $6 ^ 1 | 0) << 7 | 0 | ($9 > $8 ? 256 : 288) | 0 | 0);
  }
  label$3 : {
   $16 = $9 > $8;
   if (!$16) {
    break label$3
   }
   $9 = Math_fround(HEAPF32[$2 >> 2]);
   HEAPF32[($5 + 12 | 0) >> 2] = Math_fround(HEAPF32[($1 + 4 | 0) >> 2]);
   HEAPF32[($5 + 8 | 0) >> 2] = $9;
   i64toi32_i32$1 = HEAP32[($2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($2 + 8 | 0) >> 2] | 0;
   $27 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$1 = __wasm_rotl_i64($27 | 0, i64toi32_i32$0 | 0, 32 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $115 = i64toi32_i32$1;
   i64toi32_i32$1 = $5;
   HEAP32[$5 >> 2] = $115;
   HEAP32[($5 + 4 | 0) >> 2] = i64toi32_i32$0;
   ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29($0 | 0, $5 + 8 | 0 | 0, $5 | 0, $3 | 0, Math_fround($4), ($15 ^ 1 | 0) << 5 | 0 | ($14 ? 256 : 272) | 0 | 0);
  }
  label$4 : {
   $17 = $7 < $6;
   if (!$17) {
    break label$4
   }
   $7 = Math_fround(HEAPF32[$2 >> 2]);
   HEAPF32[($5 + 12 | 0) >> 2] = Math_fround(HEAPF32[($2 + 12 | 0) >> 2]);
   HEAPF32[($5 + 8 | 0) >> 2] = $7;
   $7 = Math_fround(HEAPF32[($2 + 8 | 0) >> 2]);
   HEAPF32[($5 + 4 | 0) >> 2] = Math_fround(HEAPF32[($1 + 12 | 0) >> 2]);
   HEAPF32[$5 >> 2] = $7;
   ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29($0 | 0, $5 + 8 | 0 | 0, $5 | 0, $3 | 0, Math_fround($4), ($15 ^ 1 | 0) << 7 | 0 | ($14 ? 256 : 320) | 0 | 0);
  }
  label$5 : {
   if (!$14) {
    break label$5
   }
   if (!$16) {
    break label$5
   }
   i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
   $165 = i64toi32_i32$0;
   i64toi32_i32$0 = $5;
   HEAP32[($5 + 8 | 0) >> 2] = $165;
   HEAP32[($5 + 12 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($2 + 4 | 0) >> 2] | 0;
   $168 = i64toi32_i32$1;
   i64toi32_i32$1 = $5;
   HEAP32[$5 >> 2] = $168;
   HEAP32[($5 + 4 | 0) >> 2] = i64toi32_i32$0;
   ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29($0 | 0, $5 + 8 | 0 | 0, $5 | 0, $3 | 0, Math_fround($4), 16 | 0);
  }
  label$6 : {
   if (!$15) {
    break label$6
   }
   if (!$16) {
    break label$6
   }
   $7 = Math_fround(HEAPF32[($2 + 8 | 0) >> 2]);
   HEAPF32[($5 + 12 | 0) >> 2] = Math_fround(HEAPF32[($1 + 4 | 0) >> 2]);
   HEAPF32[($5 + 8 | 0) >> 2] = $7;
   $7 = Math_fround(HEAPF32[($1 + 8 | 0) >> 2]);
   HEAPF32[($5 + 4 | 0) >> 2] = Math_fround(HEAPF32[($2 + 4 | 0) >> 2]);
   HEAPF32[$5 >> 2] = $7;
   ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29($0 | 0, $5 + 8 | 0 | 0, $5 | 0, $3 | 0, Math_fround($4), 32 | 0);
  }
  label$7 : {
   if (!$14) {
    break label$7
   }
   if (!$17) {
    break label$7
   }
   $7 = Math_fround(HEAPF32[$1 >> 2]);
   HEAPF32[($5 + 12 | 0) >> 2] = Math_fround(HEAPF32[($2 + 12 | 0) >> 2]);
   HEAPF32[($5 + 8 | 0) >> 2] = $7;
   $7 = Math_fround(HEAPF32[$2 >> 2]);
   HEAPF32[($5 + 4 | 0) >> 2] = Math_fround(HEAPF32[($1 + 12 | 0) >> 2]);
   HEAPF32[$5 >> 2] = $7;
   ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29($0 | 0, $5 + 8 | 0 | 0, $5 | 0, $3 | 0, Math_fround($4), 64 | 0);
  }
  label$8 : {
   if (!$15) {
    break label$8
   }
   if (!$17) {
    break label$8
   }
   i64toi32_i32$0 = HEAP32[($2 + 8 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($2 + 12 | 0) >> 2] | 0;
   $229 = i64toi32_i32$0;
   i64toi32_i32$0 = $5;
   HEAP32[($5 + 8 | 0) >> 2] = $229;
   HEAP32[($5 + 12 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[($1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($1 + 12 | 0) >> 2] | 0;
   $232 = i64toi32_i32$1;
   i64toi32_i32$1 = $5;
   HEAP32[$5 >> 2] = $232;
   HEAP32[($5 + 4 | 0) >> 2] = i64toi32_i32$0;
   ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29($0 | 0, $5 + 8 | 0 | 0, $5 | 0, $3 | 0, Math_fround($4), 128 | 0);
  }
  __stack_pointer = $5 + 16 | 0;
 }
 
 function ImGui__CalcRoundingFlagsForRectInRect_28ImRect_20const__2c_20ImRect_20const__2c_20float_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  var $3 = 0, $4 = 0, $5 = 0;
  $3 = Math_fround(HEAPF32[$0 >> 2]) <= Math_fround(Math_fround(HEAPF32[$1 >> 2]) + $2);
  $4 = Math_fround(HEAPF32[($0 + 4 | 0) >> 2]) <= Math_fround(Math_fround(HEAPF32[($1 + 4 | 0) >> 2]) + $2);
  $5 = Math_fround(HEAPF32[($0 + 8 | 0) >> 2]) >= Math_fround(Math_fround(HEAPF32[($1 + 8 | 0) >> 2]) - $2);
  $1 = Math_fround(HEAPF32[($0 + 12 | 0) >> 2]) >= Math_fround(Math_fround(HEAPF32[($1 + 12 | 0) >> 2]) - $2);
  return ($4 ? ($3 ? 272 : 256) : 256) | ($4 ? $5 << 5 | 0 : 0) | 0 | ($1 ? $3 << 6 | 0 : 0) | 0 | ($1 ? $5 << 7 | 0 : 0) | 0 | 0;
 }
 
 function stbtt__cff_get_index_28stbtt__buf__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $7 = 0, $4 = 0, $2 = 0, $6 = 0, $5 = 0, $3 = 0, $8 = 0, $9 = 0, $10 = 0;
  $2 = 0;
  $3 = HEAP32[($1 + 4 | 0) >> 2] | 0;
  $4 = $3;
  $5 = 0;
  label$1 : {
   $6 = HEAP32[($1 + 8 | 0) >> 2] | 0;
   if (($4 | 0) >= ($6 | 0)) {
    break label$1
   }
   $4 = $3 + 1 | 0;
   HEAP32[($1 + 4 | 0) >> 2] = $4;
   $5 = (HEAPU8[((HEAP32[$1 >> 2] | 0) + $3 | 0) >> 0] | 0) << 8 | 0;
  }
  label$2 : {
   label$3 : {
    if (($4 | 0) < ($6 | 0)) {
     break label$3
    }
    $7 = $4;
    break label$2;
   }
   $7 = $4 + 1 | 0;
   HEAP32[($1 + 4 | 0) >> 2] = $7;
   $2 = HEAPU8[((HEAP32[$1 >> 2] | 0) + $4 | 0) >> 0] | 0;
  }
  label$4 : {
   $2 = $5 | $2 | 0;
   if (!$2) {
    break label$4
   }
   label$5 : {
    label$6 : {
     if (($7 | 0) < ($6 | 0)) {
      break label$6
     }
     $5 = $7;
     $4 = 0;
     break label$5;
    }
    $5 = $7 + 1 | 0;
    HEAP32[($1 + 4 | 0) >> 2] = $5;
    $4 = HEAPU8[((HEAP32[$1 >> 2] | 0) + $7 | 0) >> 0] | 0;
   }
   $7 = $5 + Math_imul($4, $2) | 0;
   $7 = ($7 | 0) < (0 | 0) ? $6 : ($6 | 0) < ($7 | 0) ? $6 : $7;
   label$7 : {
    label$8 : {
     if ($4) {
      break label$8
     }
     $4 = -1;
     break label$7;
    }
    $8 = $4 & 1 | 0;
    label$9 : {
     label$10 : {
      if (($4 | 0) != (1 | 0)) {
       break label$10
      }
      $4 = 0;
      break label$9;
     }
     $9 = $4 & 254 | 0;
     $2 = 0;
     $5 = 0;
     label$11 : while (1) {
      label$12 : {
       label$13 : {
        if (($7 | 0) < ($6 | 0)) {
         break label$13
        }
        $4 = $7;
        $7 = 0;
        break label$12;
       }
       $4 = $7 + 1 | 0;
       HEAP32[($1 + 4 | 0) >> 2] = $4;
       $7 = HEAPU8[((HEAP32[$1 >> 2] | 0) + $7 | 0) >> 0] | 0;
      }
      $10 = $2 << 16 | 0 | (($7 & 255 | 0) << 8 | 0) | 0;
      $2 = 0;
      label$14 : {
       label$15 : {
        if (($4 | 0) < ($6 | 0)) {
         break label$15
        }
        $7 = $4;
        break label$14;
       }
       $7 = $4 + 1 | 0;
       HEAP32[($1 + 4 | 0) >> 2] = $7;
       $2 = HEAPU8[((HEAP32[$1 >> 2] | 0) + $4 | 0) >> 0] | 0;
      }
      $2 = $10 | ($2 & 255 | 0) | 0;
      $5 = $5 + 2 | 0;
      if (($5 | 0) != ($9 | 0)) {
       continue label$11
      }
      break label$11;
     };
     $4 = $2 << 8 | 0;
    }
    label$16 : {
     if (!$8) {
      break label$16
     }
     $2 = 0;
     label$17 : {
      if (($7 | 0) >= ($6 | 0)) {
       break label$17
      }
      $5 = $7 + 1 | 0;
      HEAP32[($1 + 4 | 0) >> 2] = $5;
      $2 = HEAPU8[((HEAP32[$1 >> 2] | 0) + $7 | 0) >> 0] | 0;
      $7 = $5;
     }
     $2 = $4 | $2 | 0;
    }
    $4 = $2 + -1 | 0;
   }
   $7 = $4 + $7 | 0;
   $7 = ($7 | 0) < (0 | 0) ? $6 : ($6 | 0) < ($7 | 0) ? $6 : $7;
   HEAP32[($1 + 4 | 0) >> 2] = $7;
  }
  HEAP32[($0 + 8 | 0) >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[($0 + 4 | 0) >> 2] = 0;
  label$18 : {
   $4 = $7 - $3 | 0;
   if (($4 | $3 | 0 | 0) < (0 | 0)) {
    break label$18
   }
   if (($6 | 0) < ($3 | 0)) {
    break label$18
   }
   if (($6 | 0) < ($7 | 0)) {
    break label$18
   }
   $7 = HEAP32[$1 >> 2] | 0;
   HEAP32[($0 + 8 | 0) >> 2] = $4;
   HEAP32[$0 >> 2] = $7 + $3 | 0;
  }
 }
 
 function stbtt__cff_int_28stbtt__buf__29($0) {
  $0 = $0 | 0;
  var $2 = 0, $1 = 0, $6 = 0, $4 = 0, $3 = 0, $5 = 0;
  $1 = 0;
  label$1 : {
   $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   if (($2 | 0) >= ($3 | 0)) {
    break label$1
   }
   $4 = $2 + 1 | 0;
   HEAP32[($0 + 4 | 0) >> 2] = $4;
   label$2 : {
    $5 = HEAP32[$0 >> 2] | 0;
    $6 = HEAPU8[($5 + $2 | 0) >> 0] | 0;
    if ((($6 + -32 | 0) & 255 | 0) >>> 0 > 214 >>> 0) {
     break label$2
    }
    return $6 + -139 | 0 | 0;
   }
   label$3 : {
    if ((($6 + 9 | 0) & 255 | 0) >>> 0 > 3 >>> 0) {
     break label$3
    }
    $6 = $6 << 8 | 0;
    $1 = 0;
    label$4 : {
     if (($4 | 0) >= ($3 | 0)) {
      break label$4
     }
     HEAP32[($0 + 4 | 0) >> 2] = $2 + 2 | 0;
     $1 = HEAPU8[($5 + $4 | 0) >> 0] | 0;
    }
    return ($6 + $1 | 0) + -63124 | 0 | 0;
   }
   label$5 : {
    if ((($6 + 5 | 0) & 255 | 0) >>> 0 > 3 >>> 0) {
     break label$5
    }
    $1 = 0;
    label$6 : {
     if (($4 | 0) >= ($3 | 0)) {
      break label$6
     }
     HEAP32[($0 + 4 | 0) >> 2] = $2 + 2 | 0;
     $1 = HEAPU8[($5 + $4 | 0) >> 0] | 0;
    }
    return 64148 - ($6 << 8 | 0 | $1 | 0) | 0 | 0;
   }
   label$7 : {
    switch ($6 + -28 | 0 | 0) {
    case 0:
     $1 = 0;
     label$9 : {
      label$10 : {
       if (($4 | 0) < ($3 | 0)) {
        break label$10
       }
       $2 = $4;
       $6 = 0;
       break label$9;
      }
      $2 = $2 + 2 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $2;
      $6 = (HEAPU8[($5 + $4 | 0) >> 0] | 0) << 8 | 0;
     }
     label$11 : {
      if (($2 | 0) >= ($3 | 0)) {
       break label$11
      }
      HEAP32[($0 + 4 | 0) >> 2] = $2 + 1 | 0;
      $1 = HEAPU8[($5 + $2 | 0) >> 0] | 0;
     }
     return $6 | $1 | 0 | 0;
    case 1:
     break label$7;
    default:
     break label$1;
    };
   }
   $6 = 0;
   label$12 : {
    label$13 : {
     if (($4 | 0) < ($3 | 0)) {
      break label$13
     }
     $2 = $4;
     $4 = 0;
     break label$12;
    }
    $2 = $2 + 2 | 0;
    HEAP32[($0 + 4 | 0) >> 2] = $2;
    $4 = (HEAPU8[($5 + $4 | 0) >> 0] | 0) << 8 | 0;
   }
   label$14 : {
    label$15 : {
     if (($2 | 0) < ($3 | 0)) {
      break label$15
     }
     $1 = $2;
     break label$14;
    }
    $1 = $2 + 1 | 0;
    HEAP32[($0 + 4 | 0) >> 2] = $1;
    $6 = HEAPU8[($5 + $2 | 0) >> 0] | 0;
   }
   $4 = $4 | $6 | 0;
   $6 = 0;
   label$16 : {
    label$17 : {
     if (($1 | 0) < ($3 | 0)) {
      break label$17
     }
     $2 = $1;
     $1 = 0;
     break label$16;
    }
    $2 = $1 + 1 | 0;
    HEAP32[($0 + 4 | 0) >> 2] = $2;
    $1 = (HEAPU8[($5 + $1 | 0) >> 0] | 0) << 8 | 0;
   }
   $1 = $4 << 16 | 0 | $1 | 0;
   label$18 : {
    if (($2 | 0) >= ($3 | 0)) {
     break label$18
    }
    HEAP32[($0 + 4 | 0) >> 2] = $2 + 1 | 0;
    $6 = HEAPU8[($5 + $2 | 0) >> 0] | 0;
   }
   $1 = $1 | $6 | 0;
  }
  return $1 | 0;
 }
 
 function stbtt__csctx_rmove_to_28stbtt__csctx__2c_20float_2c_20float_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = Math_fround($2);
  var $10 = 0, $7 = 0, $8 = 0, $3 = Math_fround(0), $5 = Math_fround(0), $9 = 0, i64toi32_i32$0 = 0, $4 = Math_fround(0), $6 = Math_fround(0), $12 = 0, $13 = 0;
  $3 = Math_fround(HEAPF32[($0 + 12 | 0) >> 2]);
  label$1 : {
   label$2 : {
    $4 = Math_fround(HEAPF32[($0 + 8 | 0) >> 2]);
    $5 = Math_fround(HEAPF32[($0 + 16 | 0) >> 2]);
    if ($4 != $5) {
     break label$2
    }
    $6 = Math_fround(HEAPF32[($0 + 20 | 0) >> 2]);
    if ($3 == $6) {
     break label$1
    }
   }
   label$3 : {
    label$4 : {
     if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
      break label$4
     }
     $7 = ~~$3;
     break label$3;
    }
    $7 = -2147483648;
   }
   label$5 : {
    label$6 : {
     if (!(Math_fround(Math_abs($4)) < Math_fround(2147483648.0))) {
      break label$6
     }
     $8 = ~~$4;
     break label$5;
    }
    $8 = -2147483648;
   }
   label$7 : {
    label$8 : {
     if (!(HEAP32[$0 >> 2] | 0)) {
      break label$8
     }
     label$9 : {
      label$10 : {
       if ((HEAP32[($0 + 28 | 0) >> 2] | 0 | 0) < ($8 | 0)) {
        break label$10
       }
       if (HEAP32[($0 + 4 | 0) >> 2] | 0) {
        break label$9
       }
      }
      HEAP32[($0 + 28 | 0) >> 2] = $8;
     }
     label$11 : {
      label$12 : {
       if ((HEAP32[($0 + 36 | 0) >> 2] | 0 | 0) < ($7 | 0)) {
        break label$12
       }
       if (HEAP32[($0 + 4 | 0) >> 2] | 0) {
        break label$11
       }
      }
      HEAP32[($0 + 36 | 0) >> 2] = $7;
     }
     label$13 : {
      label$14 : {
       if ((HEAP32[($0 + 24 | 0) >> 2] | 0 | 0) > ($8 | 0)) {
        break label$14
       }
       if (HEAP32[($0 + 4 | 0) >> 2] | 0) {
        break label$13
       }
      }
      HEAP32[($0 + 24 | 0) >> 2] = $8;
     }
     label$15 : {
      label$16 : {
       if ((HEAP32[($0 + 32 | 0) >> 2] | 0 | 0) > ($7 | 0)) {
        break label$16
       }
       if (HEAP32[($0 + 4 | 0) >> 2] | 0) {
        break label$15
       }
      }
      HEAP32[($0 + 32 | 0) >> 2] = $7;
     }
     HEAP32[($0 + 4 | 0) >> 2] = 1;
     $9 = HEAP32[($0 + 44 | 0) >> 2] | 0;
     break label$7;
    }
    $9 = HEAP32[($0 + 44 | 0) >> 2] | 0;
    $10 = (HEAP32[($0 + 40 | 0) >> 2] | 0) + Math_imul($9, 14) | 0;
    i64toi32_i32$0 = 0;
    $12 = 0;
    HEAP16[($10 + 4 | 0) >> 1] = $12;
    HEAP16[($10 + 6 | 0) >> 1] = $12 >>> 16 | 0;
    HEAP16[($10 + 8 | 0) >> 1] = i64toi32_i32$0;
    HEAP16[($10 + 10 | 0) >> 1] = i64toi32_i32$0 >>> 16 | 0;
    HEAP16[($10 + 2 | 0) >> 1] = $7;
    HEAP16[$10 >> 1] = $8;
    HEAP8[($10 + 12 | 0) >> 0] = 2;
    $5 = Math_fround(HEAPF32[($0 + 16 | 0) >> 2]);
   }
   HEAP32[($0 + 44 | 0) >> 2] = $9 + 1 | 0;
   $6 = Math_fround(HEAPF32[($0 + 20 | 0) >> 2]);
  }
  $3 = Math_fround($6 + $2);
  HEAPF32[($0 + 20 | 0) >> 2] = $3;
  $5 = Math_fround($5 + $1);
  HEAPF32[($0 + 8 | 0) >> 2] = $5;
  HEAPF32[($0 + 16 | 0) >> 2] = $5;
  HEAPF32[($0 + 12 | 0) >> 2] = $3;
  label$17 : {
   label$18 : {
    if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
     break label$18
    }
    $7 = ~~$3;
    break label$17;
   }
   $7 = -2147483648;
  }
  label$19 : {
   label$20 : {
    if (!(Math_fround(Math_abs($5)) < Math_fround(2147483648.0))) {
     break label$20
    }
    $8 = ~~$5;
    break label$19;
   }
   $8 = -2147483648;
  }
  label$21 : {
   label$22 : {
    if (!(HEAP32[$0 >> 2] | 0)) {
     break label$22
    }
    label$23 : {
     label$24 : {
      if ((HEAP32[($0 + 28 | 0) >> 2] | 0 | 0) < ($8 | 0)) {
       break label$24
      }
      if (HEAP32[($0 + 4 | 0) >> 2] | 0) {
       break label$23
      }
     }
     HEAP32[($0 + 28 | 0) >> 2] = $8;
    }
    label$25 : {
     label$26 : {
      if ((HEAP32[($0 + 36 | 0) >> 2] | 0 | 0) < ($7 | 0)) {
       break label$26
      }
      if (HEAP32[($0 + 4 | 0) >> 2] | 0) {
       break label$25
      }
     }
     HEAP32[($0 + 36 | 0) >> 2] = $7;
    }
    label$27 : {
     label$28 : {
      if ((HEAP32[($0 + 24 | 0) >> 2] | 0 | 0) > ($8 | 0)) {
       break label$28
      }
      if (HEAP32[($0 + 4 | 0) >> 2] | 0) {
       break label$27
      }
     }
     HEAP32[($0 + 24 | 0) >> 2] = $8;
    }
    label$29 : {
     label$30 : {
      if ((HEAP32[($0 + 32 | 0) >> 2] | 0 | 0) > ($7 | 0)) {
       break label$30
      }
      if (HEAP32[($0 + 4 | 0) >> 2] | 0) {
       break label$29
      }
     }
     HEAP32[($0 + 32 | 0) >> 2] = $7;
    }
    HEAP32[($0 + 4 | 0) >> 2] = 1;
    $9 = HEAP32[($0 + 44 | 0) >> 2] | 0;
    break label$21;
   }
   $9 = HEAP32[($0 + 44 | 0) >> 2] | 0;
   $10 = (HEAP32[($0 + 40 | 0) >> 2] | 0) + Math_imul($9, 14) | 0;
   i64toi32_i32$0 = 0;
   $13 = 0;
   HEAP16[($10 + 4 | 0) >> 1] = $13;
   HEAP16[($10 + 6 | 0) >> 1] = $13 >>> 16 | 0;
   HEAP16[($10 + 8 | 0) >> 1] = i64toi32_i32$0;
   HEAP16[($10 + 10 | 0) >> 1] = i64toi32_i32$0 >>> 16 | 0;
   HEAP16[($10 + 2 | 0) >> 1] = $7;
   HEAP16[$10 >> 1] = $8;
   HEAP8[($10 + 12 | 0) >> 0] = 1;
  }
  HEAP32[($0 + 44 | 0) >> 2] = $9 + 1 | 0;
 }
 
 function stbtt__csctx_rccurve_to_28stbtt__csctx__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = Math_fround($2);
  $3 = Math_fround($3);
  $4 = Math_fround($4);
  $5 = Math_fround($5);
  $6 = Math_fround($6);
  var $12 = 0, $13 = 0, $14 = 0, $7 = 0, $8 = 0, $11 = 0, $9 = 0, $10 = 0, $15 = 0;
  $2 = Math_fround(Math_fround(HEAPF32[($0 + 20 | 0) >> 2]) + $2);
  $4 = Math_fround($2 + $4);
  $6 = Math_fround($4 + $6);
  HEAPF32[($0 + 20 | 0) >> 2] = $6;
  $1 = Math_fround(Math_fround(HEAPF32[($0 + 16 | 0) >> 2]) + $1);
  $3 = Math_fround($1 + $3);
  $5 = Math_fround($3 + $5);
  HEAPF32[($0 + 16 | 0) >> 2] = $5;
  label$1 : {
   label$2 : {
    if (!(Math_fround(Math_abs($2)) < Math_fround(2147483648.0))) {
     break label$2
    }
    $7 = ~~$2;
    break label$1;
   }
   $7 = -2147483648;
  }
  label$3 : {
   label$4 : {
    if (!(Math_fround(Math_abs($1)) < Math_fround(2147483648.0))) {
     break label$4
    }
    $8 = ~~$1;
    break label$3;
   }
   $8 = -2147483648;
  }
  label$5 : {
   label$6 : {
    if (!(Math_fround(Math_abs($4)) < Math_fround(2147483648.0))) {
     break label$6
    }
    $9 = ~~$4;
    break label$5;
   }
   $9 = -2147483648;
  }
  label$7 : {
   label$8 : {
    if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
     break label$8
    }
    $10 = ~~$3;
    break label$7;
   }
   $10 = -2147483648;
  }
  label$9 : {
   label$10 : {
    if (!(Math_fround(Math_abs($6)) < Math_fround(2147483648.0))) {
     break label$10
    }
    $11 = ~~$6;
    break label$9;
   }
   $11 = -2147483648;
  }
  label$11 : {
   label$12 : {
    if (!(Math_fround(Math_abs($5)) < Math_fround(2147483648.0))) {
     break label$12
    }
    $12 = ~~$5;
    break label$11;
   }
   $12 = -2147483648;
  }
  label$13 : {
   label$14 : {
    if (!(HEAP32[$0 >> 2] | 0)) {
     break label$14
    }
    label$15 : {
     label$16 : {
      $13 = HEAP32[($0 + 28 | 0) >> 2] | 0;
      if (($13 | 0) < ($12 | 0)) {
       break label$16
      }
      if (HEAP32[($0 + 4 | 0) >> 2] | 0) {
       break label$15
      }
     }
     HEAP32[($0 + 28 | 0) >> 2] = $12;
     $13 = $12;
    }
    label$17 : {
     label$18 : {
      $14 = HEAP32[($0 + 36 | 0) >> 2] | 0;
      if (($14 | 0) < ($11 | 0)) {
       break label$18
      }
      if (HEAP32[($0 + 4 | 0) >> 2] | 0) {
       break label$17
      }
     }
     HEAP32[($0 + 36 | 0) >> 2] = $11;
     $14 = $11;
    }
    label$19 : {
     label$20 : {
      $15 = HEAP32[($0 + 24 | 0) >> 2] | 0;
      if (($15 | 0) > ($12 | 0)) {
       break label$20
      }
      if (HEAP32[($0 + 4 | 0) >> 2] | 0) {
       break label$19
      }
     }
     HEAP32[($0 + 24 | 0) >> 2] = $12;
     $15 = $12;
    }
    label$21 : {
     label$22 : {
      $12 = HEAP32[($0 + 32 | 0) >> 2] | 0;
      if (($12 | 0) > ($11 | 0)) {
       break label$22
      }
      if (HEAP32[($0 + 4 | 0) >> 2] | 0) {
       break label$21
      }
     }
     HEAP32[($0 + 32 | 0) >> 2] = $11;
     $12 = $11;
    }
    HEAP32[($0 + 4 | 0) >> 2] = 1;
    label$23 : {
     if (($13 | 0) >= ($8 | 0)) {
      break label$23
     }
     HEAP32[($0 + 28 | 0) >> 2] = $8;
     $13 = $8;
    }
    label$24 : {
     if (($14 | 0) >= ($7 | 0)) {
      break label$24
     }
     HEAP32[($0 + 36 | 0) >> 2] = $7;
     $14 = $7;
    }
    label$25 : {
     if (($15 | 0) <= ($8 | 0)) {
      break label$25
     }
     HEAP32[($0 + 24 | 0) >> 2] = $8;
     $15 = $8;
    }
    label$26 : {
     if (($12 | 0) <= ($7 | 0)) {
      break label$26
     }
     HEAP32[($0 + 32 | 0) >> 2] = $7;
     $12 = $7;
    }
    label$27 : {
     if (($13 | 0) >= ($10 | 0)) {
      break label$27
     }
     HEAP32[($0 + 28 | 0) >> 2] = $10;
    }
    label$28 : {
     if (($14 | 0) >= ($9 | 0)) {
      break label$28
     }
     HEAP32[($0 + 36 | 0) >> 2] = $9;
    }
    label$29 : {
     if (($15 | 0) <= ($10 | 0)) {
      break label$29
     }
     HEAP32[($0 + 24 | 0) >> 2] = $10;
    }
    label$30 : {
     if (($12 | 0) <= ($9 | 0)) {
      break label$30
     }
     HEAP32[($0 + 32 | 0) >> 2] = $9;
    }
    HEAP32[($0 + 4 | 0) >> 2] = 1;
    $14 = HEAP32[($0 + 44 | 0) >> 2] | 0;
    break label$13;
   }
   $14 = HEAP32[($0 + 44 | 0) >> 2] | 0;
   $13 = (HEAP32[($0 + 40 | 0) >> 2] | 0) + Math_imul($14, 14) | 0;
   HEAP16[($13 + 10 | 0) >> 1] = $9;
   HEAP16[($13 + 8 | 0) >> 1] = $10;
   HEAP16[($13 + 6 | 0) >> 1] = $7;
   HEAP16[($13 + 4 | 0) >> 1] = $8;
   HEAP16[($13 + 2 | 0) >> 1] = $11;
   HEAP16[$13 >> 1] = $12;
   HEAP8[($13 + 12 | 0) >> 0] = 4;
  }
  HEAP32[($0 + 44 | 0) >> 2] = $14 + 1 | 0;
 }
 
 function ImGui__TableSettingsCreate_28unsigned_20int_2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $5 = 0, $7 = 0, i64toi32_i32$0 = 0, $6 = 0, i64toi32_i32$1 = 0, $4 = 0, $8 = 0;
  label$1 : {
   $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $3 = HEAP32[($2 + 23428 | 0) >> 2] | 0;
   $4 = HEAP32[($2 + 23424 | 0) >> 2] | 0;
   $5 = (($1 << 4 | 0) + 27 | 0) & -8 | 0;
   $6 = $4 + $5 | 0;
   if (($3 | 0) >= ($6 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($3) {
      break label$3
     }
     $7 = 8;
     break label$2;
    }
    $7 = (($3 | 0) / (2 | 0) | 0) + $3 | 0;
   }
   $7 = ($7 | 0) > ($6 | 0) ? $7 : $6;
   if (($3 | 0) >= ($7 | 0)) {
    break label$1
   }
   $3 = ImGui__MemAlloc_28unsigned_20long_29($7 | 0) | 0;
   label$4 : {
    $8 = HEAP32[($2 + 23432 | 0) >> 2] | 0;
    if (!$8) {
     break label$4
    }
    __memcpy($3 | 0, $8 | 0, HEAP32[($2 + 23424 | 0) >> 2] | 0 | 0) | 0;
    ImGui__MemFree_28void__29(HEAP32[($2 + 23432 | 0) >> 2] | 0 | 0);
   }
   HEAP32[($2 + 23428 | 0) >> 2] = $7;
   HEAP32[($2 + 23432 | 0) >> 2] = $3;
  }
  HEAP32[($2 + 23424 | 0) >> 2] = $6;
  $2 = (HEAP32[($2 + 23432 | 0) >> 2] | 0) + $4 | 0;
  i64toi32_i32$1 = $2;
  i64toi32_i32$0 = 0;
  HEAP32[($2 + 4 | 0) >> 2] = 0;
  HEAP32[($2 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[$2 >> 2] = $5;
  i64toi32_i32$1 = $2 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($2 + 20 | 0) >> 2] = 0;
  $5 = $2 + 4 | 0;
  label$5 : {
   if (($1 | 0) < (1 | 0)) {
    break label$5
   }
   $7 = $1 & 1 | 0;
   $2 = $5 + 20 | 0;
   label$6 : {
    if (($1 | 0) == (1 | 0)) {
     break label$6
    }
    $4 = $1 & -2 | 0;
    $6 = 0;
    label$7 : while (1) {
     HEAP16[($2 + 12 | 0) >> 1] = 65535;
     i64toi32_i32$1 = $2;
     i64toi32_i32$0 = 0;
     HEAP32[$2 >> 2] = 0;
     HEAP32[($2 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($2 + 8 | 0) >> 2] = -1;
     i64toi32_i32$1 = $2;
     i64toi32_i32$0 = 0;
     HEAP32[($2 + 16 | 0) >> 2] = 0;
     HEAP32[($2 + 20 | 0) >> 2] = i64toi32_i32$0;
     HEAP16[($2 + 28 | 0) >> 1] = 65535;
     HEAP32[($2 + 24 | 0) >> 2] = -1;
     HEAP8[($2 + 14 | 0) >> 0] = (HEAPU8[($2 + 14 | 0) >> 0] | 0) & 240 | 0 | 4 | 0;
     $3 = $2 + 30 | 0;
     HEAP8[$3 >> 0] = (HEAPU8[$3 >> 0] | 0) & 240 | 0 | 4 | 0;
     $2 = $2 + 32 | 0;
     $6 = $6 + 2 | 0;
     if (($6 | 0) != ($4 | 0)) {
      continue label$7
     }
     break label$7;
    };
   }
   if (!$7) {
    break label$5
   }
   HEAP16[($2 + 12 | 0) >> 1] = 65535;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = 0;
   HEAP32[$2 >> 2] = 0;
   HEAP32[($2 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($2 + 8 | 0) >> 2] = -1;
   HEAP8[($2 + 14 | 0) >> 0] = (HEAPU8[($2 + 14 | 0) >> 0] | 0) & 240 | 0 | 4 | 0;
  }
  HEAP8[($5 + 16 | 0) >> 0] = 1;
  HEAP16[($5 + 14 | 0) >> 1] = $1;
  HEAP16[($5 + 12 | 0) >> 1] = $1;
  HEAP32[$5 >> 2] = $0;
  return $5 | 0;
 }
 
 function ImGui__TablePushBackgroundChannel_28_29() {
  var $2 = 0, $0 = 0, $1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $15 = 0, $21 = 0, $36 = 0, $39 = 0;
  $0 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $1 = HEAP32[($0 + 19200 | 0) >> 2] | 0;
  $0 = HEAP32[($0 + 16116 | 0) >> 2] | 0;
  i64toi32_i32$2 = $0;
  i64toi32_i32$0 = HEAP32[($0 + 580 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0 + 584 | 0) >> 2] | 0;
  $15 = i64toi32_i32$0;
  i64toi32_i32$0 = $1;
  HEAP32[(i64toi32_i32$0 + 316 | 0) >> 2] = $15;
  HEAP32[(i64toi32_i32$0 + 320 | 0) >> 2] = i64toi32_i32$1;
  $2 = $0 + 588 | 0;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = HEAP32[$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2 + 4 | 0) >> 2] | 0;
  $21 = i64toi32_i32$1;
  i64toi32_i32$1 = $1 + 324 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $21;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $3 = Math_fround(HEAPF32[($1 + 296 | 0) >> 2]);
  $4 = $1 + 292 | 0;
  $5 = Math_fround(HEAPF32[$4 >> 2]);
  $6 = Math_fround(HEAPF32[($1 + 288 | 0) >> 2]);
  $7 = Math_fround(HEAPF32[($1 + 284 | 0) >> 2]);
  i64toi32_i32$2 = $4;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $36 = i64toi32_i32$0;
  i64toi32_i32$0 = $2;
  HEAP32[$2 >> 2] = $36;
  HEAP32[($2 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1;
  i64toi32_i32$1 = HEAP32[($1 + 284 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($1 + 288 | 0) >> 2] | 0;
  $39 = i64toi32_i32$1;
  i64toi32_i32$1 = $0;
  HEAP32[($0 + 580 | 0) >> 2] = $39;
  HEAP32[($0 + 584 | 0) >> 2] = i64toi32_i32$0;
  $2 = HEAP32[($0 + 672 | 0) >> 2] | 0;
  HEAPF32[($2 + 96 | 0) >> 2] = $7;
  HEAPF32[($2 + 100 | 0) >> 2] = $6;
  HEAPF32[($2 + 104 | 0) >> 2] = $5;
  HEAPF32[($2 + 108 | 0) >> 2] = $3;
  $2 = HEAP32[($0 + 672 | 0) >> 2] | 0;
  $2 = (((HEAP32[($2 + 60 | 0) >> 2] | 0) << 4 | 0) + (HEAP32[($2 + 68 | 0) >> 2] | 0) | 0) + -16 | 0;
  HEAPF32[($2 + 12 | 0) >> 2] = $3;
  HEAPF32[($2 + 8 | 0) >> 2] = $5;
  HEAPF32[($2 + 4 | 0) >> 2] = $6;
  HEAPF32[$2 >> 2] = $7;
  ImDrawListSplitter__SetCurrentChannel_28ImDrawList__2c_20int_29(HEAP32[($1 + 352 | 0) >> 2] | 0 | 0, HEAP32[($0 + 672 | 0) >> 2] | 0 | 0, HEAPU16[($1 + 466 | 0) >> 1] | 0 | 0);
 }
 
 function ImGui__TablePopBackgroundChannel_28_29() {
  var $3 = 0, $0 = 0, $1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $8 = Math_fround(0), $6 = 0, $7 = 0, $33 = 0, $36 = 0;
  $0 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $1 = HEAP32[($0 + 19200 | 0) >> 2] | 0;
  $2 = Math_fround(HEAPF32[($1 + 328 | 0) >> 2]);
  $3 = $1 + 324 | 0;
  $4 = Math_fround(HEAPF32[$3 >> 2]);
  $5 = Math_fround(HEAPF32[($1 + 320 | 0) >> 2]);
  $6 = HEAP32[($1 + 16 | 0) >> 2] | 0;
  $7 = HEAP32[($1 + 72 | 0) >> 2] | 0;
  $8 = Math_fround(HEAPF32[($1 + 316 | 0) >> 2]);
  $0 = HEAP32[($0 + 16116 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[$3 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3 + 4 | 0) >> 2] | 0;
  $33 = i64toi32_i32$0;
  i64toi32_i32$0 = $0 + 588 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $33;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($1 + 316 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($1 + 320 | 0) >> 2] | 0;
  $36 = i64toi32_i32$1;
  i64toi32_i32$1 = $0;
  HEAP32[($0 + 580 | 0) >> 2] = $36;
  HEAP32[($0 + 584 | 0) >> 2] = i64toi32_i32$0;
  $3 = HEAP32[($0 + 672 | 0) >> 2] | 0;
  HEAPF32[($3 + 100 | 0) >> 2] = $5;
  HEAPF32[($3 + 104 | 0) >> 2] = $4;
  HEAPF32[($3 + 108 | 0) >> 2] = $2;
  HEAPF32[($3 + 96 | 0) >> 2] = $8;
  $3 = HEAP32[($0 + 672 | 0) >> 2] | 0;
  $3 = (((HEAP32[($3 + 60 | 0) >> 2] | 0) << 4 | 0) + (HEAP32[($3 + 68 | 0) >> 2] | 0) | 0) + -16 | 0;
  HEAPF32[($3 + 12 | 0) >> 2] = $2;
  HEAPF32[($3 + 8 | 0) >> 2] = $4;
  HEAPF32[($3 + 4 | 0) >> 2] = $5;
  HEAPF32[$3 >> 2] = $8;
  ImDrawListSplitter__SetCurrentChannel_28ImDrawList__2c_20int_29(HEAP32[($1 + 352 | 0) >> 2] | 0 | 0, HEAP32[($0 + 672 | 0) >> 2] | 0 | 0, HEAPU16[(($6 + Math_imul($7, 112) | 0) + 92 | 0) >> 1] | 0 | 0);
 }
 
 function ImGui__TableSettingsAddSettingsHandler_28_29() {
  var $0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1 = 0, $2 = 0, $3 = 0;
  $0 = __stack_pointer - 48 | 0;
  __stack_pointer = $0;
  $1 = $0 + 36 | 0;
  i64toi32_i32$1 = $1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $2 = $0 + 28 | 0;
  i64toi32_i32$1 = $2;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[($0 + 20 | 0) >> 2] = 0;
  HEAP32[($0 + 24 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0 + 8 | 0) >> 2] = 67022;
  $3 = ImHashStr_28char_20const__2c_20unsigned_20long_2c_20unsigned_20int_29(67022 | 0, 0 | 0, 0 | 0) | 0;
  HEAP32[$1 >> 2] = 22;
  HEAP32[$2 >> 2] = 23;
  HEAP32[($0 + 32 | 0) >> 2] = 24;
  HEAP32[($0 + 24 | 0) >> 2] = 25;
  HEAP32[($0 + 16 | 0) >> 2] = 26;
  HEAP32[($0 + 12 | 0) >> 2] = $3;
  ImGui__AddSettingsHandler_28ImGuiSettingsHandler_20const__29($0 + 8 | 0 | 0);
  __stack_pointer = $0 + 48 | 0;
 }
 
 function TableSettingsHandler_WriteAll_28ImGuiContext__2c_20ImGuiSettingsHandler__2c_20ImGuiTextBuffer__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $7 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = Math_fround(0), $13 = 0, $10 = 0, $11 = 0, $12 = 0, $43 = 0;
  $3 = __stack_pointer - 144 | 0;
  __stack_pointer = $3;
  label$1 : {
   $4 = HEAP32[($0 + 23432 | 0) >> 2] | 0;
   if (!$4) {
    break label$1
   }
   $5 = $4 + 4 | 0;
   label$2 : while (1) {
    label$3 : {
     $6 = HEAP32[$5 >> 2] | 0;
     if (!$6) {
      break label$3
     }
     $7 = HEAP32[($5 + 4 | 0) >> 2] | 0;
     if (!($7 & 15 | 0)) {
      break label$3
     }
     label$4 : {
      $4 = HEAP32[$2 >> 2] | 0;
      $8 = $4 + -1 | 0;
      $43 = $8 >>> 0 > $4 >>> 0 ? 0 : $8;
      $4 = HEAP16[($5 + 12 | 0) >> 1] | 0;
      $8 = ($43 + Math_imul($4, 50) | 0) + 30 | 0;
      if ((HEAP32[($2 + 4 | 0) >> 2] | 0 | 0) >= ($8 | 0)) {
       break label$4
      }
      $6 = ImGui__MemAlloc_28unsigned_20long_29($8 | 0) | 0;
      label$5 : {
       $4 = HEAP32[($2 + 8 | 0) >> 2] | 0;
       if (!$4) {
        break label$5
       }
       __memcpy($6 | 0, $4 | 0, HEAP32[$2 >> 2] | 0 | 0) | 0;
       ImGui__MemFree_28void__29(HEAP32[($2 + 8 | 0) >> 2] | 0 | 0);
      }
      HEAP32[($2 + 4 | 0) >> 2] = $8;
      HEAP32[($2 + 8 | 0) >> 2] = $6;
      $4 = HEAP16[($5 + 12 | 0) >> 1] | 0;
      $6 = HEAP32[$5 >> 2] | 0;
     }
     $8 = HEAP32[$1 >> 2] | 0;
     HEAP32[($3 + 136 | 0) >> 2] = $4;
     HEAP32[($3 + 132 | 0) >> 2] = $6;
     HEAP32[($3 + 128 | 0) >> 2] = $8;
     ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2 | 0, 69104 | 0, $3 + 128 | 0 | 0);
     label$6 : {
      $9 = Math_fround(HEAPF32[($5 + 8 | 0) >> 2]);
      if ($9 == Math_fround(0.0)) {
       break label$6
      }
      HEAPF64[($3 + 112 | 0) >> 3] = +$9;
      ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2 | 0, 68406 | 0, $3 + 112 | 0 | 0);
     }
     label$7 : {
      $4 = HEAP16[($5 + 12 | 0) >> 1] | 0;
      if (($4 | 0) < (1 | 0)) {
       break label$7
      }
      $10 = $7 & 8 | 0;
      $8 = $7 & 2 | 0;
      $11 = $7 & 4 | 0;
      $12 = $7 & 1 | 0;
      $7 = $5 + 20 | 0;
      $6 = 0;
      label$8 : while (1) {
       label$9 : {
        label$10 : {
         label$11 : {
          $13 = HEAP32[($7 + 4 | 0) >> 2] | 0 | $12 | 0 | $11 | 0 | $8 | 0;
          if ($13) {
           break label$11
          }
          if (!$10) {
           break label$11
          }
          if ((HEAPU16[($7 + 12 | 0) >> 1] | 0 | 0) != (65535 | 0)) {
           break label$10
          }
          break label$9;
         }
         if (($13 | 0) == (0 | 0)) {
          break label$9
         }
        }
        HEAP32[($3 + 96 | 0) >> 2] = $6;
        ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2 | 0, 67178 | 0, $3 + 96 | 0 | 0);
        label$12 : {
         $4 = HEAP32[($7 + 4 | 0) >> 2] | 0;
         if (!$4) {
          break label$12
         }
         HEAP32[($3 + 80 | 0) >> 2] = $4;
         ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2 | 0, 67511 | 0, $3 + 80 | 0 | 0);
        }
        label$13 : {
         if (!$12) {
          break label$13
         }
         label$14 : {
          $4 = HEAPU8[($7 + 14 | 0) >> 0] | 0;
          if (!($4 & 8 | 0)) {
           break label$14
          }
          HEAPF64[($3 + 64 | 0) >> 3] = +Math_fround(HEAPF32[$7 >> 2]);
          ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2 | 0, 66926 | 0, $3 + 64 | 0 | 0);
          $4 = HEAPU8[($7 + 14 | 0) >> 0] | 0;
         }
         if ($4 & 8 | 0) {
          break label$13
         }
         label$15 : {
          label$16 : {
           $9 = Math_fround(HEAPF32[$7 >> 2]);
           if (!(Math_fround(Math_abs($9)) < Math_fround(2147483648.0))) {
            break label$16
           }
           $4 = ~~$9;
           break label$15;
          }
          $4 = -2147483648;
         }
         HEAP32[($3 + 48 | 0) >> 2] = $4;
         ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2 | 0, 67200 | 0, $3 + 48 | 0 | 0);
        }
        label$17 : {
         if (!$11) {
          break label$17
         }
         HEAP32[($3 + 32 | 0) >> 2] = ((HEAPU8[($7 + 14 | 0) >> 0] | 0) >>> 2 | 0) & 1 | 0;
         ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2 | 0, 67210 | 0, $3 + 32 | 0 | 0);
        }
        label$18 : {
         if (!$8) {
          break label$18
         }
         HEAP32[($3 + 16 | 0) >> 2] = HEAP16[($7 + 10 | 0) >> 1] | 0;
         ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2 | 0, 67190 | 0, $3 + 16 | 0 | 0);
        }
        label$19 : {
         if (!$10) {
          break label$19
         }
         $4 = HEAP16[($7 + 12 | 0) >> 1] | 0;
         if (($4 | 0) == (-1 | 0)) {
          break label$19
         }
         $13 = HEAPU8[($7 + 14 | 0) >> 0] | 0;
         HEAP32[$3 >> 2] = $4;
         HEAP32[($3 + 4 | 0) >> 2] = ($13 & 3 | 0 | 0) == (1 | 0) ? 118 : 94;
         ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2 | 0, 67311 | 0, $3 | 0);
        }
        ImGuiTextBuffer__append_28char_20const__2c_20char_20const__29($2 | 0, 70526 | 0, 0 | 0);
        $4 = HEAPU16[($5 + 12 | 0) >> 1] | 0;
       }
       $7 = $7 + 16 | 0;
       $6 = $6 + 1 | 0;
       if (($6 | 0) < ($4 << 16 >> 16 | 0)) {
        continue label$8
       }
       break label$8;
      };
     }
     ImGuiTextBuffer__append_28char_20const__2c_20char_20const__29($2 | 0, 70526 | 0, 0 | 0);
     $4 = HEAP32[($0 + 23432 | 0) >> 2] | 0;
    }
    $5 = $5 + (HEAP32[($5 + -4 | 0) >> 2] | 0) | 0;
    if (($5 | 0) != (($4 + (HEAP32[($0 + 23424 | 0) >> 2] | 0) | 0) + 4 | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  __stack_pointer = $3 + 144 | 0;
 }
 
 function TableSettingsHandler_ReadLine_28ImGuiContext__2c_20ImGuiSettingsHandler__2c_20void__2c_20char_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $7 = 0, $6 = 0, $8 = 0;
  $4 = __stack_pointer - 144 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 140 | 0) >> 2] = 0;
  HEAP32[($4 + 136 | 0) >> 2] = 0;
  HEAP32[($4 + 132 | 0) >> 2] = 0;
  HEAP32[($4 + 128 | 0) >> 2] = 0;
  HEAP32[($4 + 112 | 0) >> 2] = $4 + 140 | 0;
  label$1 : {
   label$2 : {
    if ((sscanf($3 | 0, 66939 | 0, $4 + 112 | 0 | 0) | 0 | 0) != (1 | 0)) {
     break label$2
    }
    HEAPF32[($2 + 8 | 0) >> 2] = Math_fround(HEAPF32[($4 + 140 | 0) >> 2]);
    break label$1;
   }
   HEAP32[($4 + 100 | 0) >> 2] = $4 + 132 | 0;
   HEAP32[($4 + 96 | 0) >> 2] = $4 + 136 | 0;
   if ((sscanf($3 | 0, 66579 | 0, $4 + 96 | 0 | 0) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $5 = HEAP32[($4 + 136 | 0) >> 2] | 0;
   if (($5 | 0) < (0 | 0)) {
    break label$1
   }
   if (($5 | 0) >= (HEAP16[($2 + 12 | 0) >> 1] | 0 | 0)) {
    break label$1
   }
   $3 = ImStrSkipBlank_28char_20const__29($3 + (HEAP32[($4 + 132 | 0) >> 2] | 0) | 0 | 0) | 0;
   HEAP8[($4 + 127 | 0) >> 0] = 0;
   $6 = $2 + 20 | 0;
   $5 = HEAP32[($4 + 136 | 0) >> 2] | 0;
   $7 = $6 + ($5 << 4 | 0) | 0;
   HEAP16[($7 + 8 | 0) >> 1] = $5;
   HEAP32[($4 + 84 | 0) >> 2] = $4 + 132 | 0;
   HEAP32[($4 + 80 | 0) >> 2] = $4 + 128 | 0;
   label$3 : {
    if ((sscanf($3 | 0, 66668 | 0, $4 + 80 | 0 | 0) | 0 | 0) != (1 | 0)) {
     break label$3
    }
    $3 = ImStrSkipBlank_28char_20const__29($3 + (HEAP32[($4 + 132 | 0) >> 2] | 0) | 0 | 0) | 0;
    HEAP32[($7 + 4 | 0) >> 2] = HEAP32[($4 + 128 | 0) >> 2] | 0;
   }
   HEAP32[($4 + 68 | 0) >> 2] = $4 + 132 | 0;
   HEAP32[($4 + 64 | 0) >> 2] = $4 + 128 | 0;
   label$4 : {
    if ((sscanf($3 | 0, 66522 | 0, $4 + 64 | 0 | 0) | 0 | 0) != (1 | 0)) {
     break label$4
    }
    $3 = ImStrSkipBlank_28char_20const__29($3 + (HEAP32[($4 + 132 | 0) >> 2] | 0) | 0 | 0) | 0;
    HEAPF32[$7 >> 2] = Math_fround(HEAP32[($4 + 128 | 0) >> 2] | 0 | 0);
    $8 = $6 + ($5 << 4 | 0) | 0;
    HEAP8[($8 + 14 | 0) >> 0] = (HEAPU8[($8 + 14 | 0) >> 0] | 0) & 247 | 0;
    HEAP32[($2 + 4 | 0) >> 2] = HEAP32[($2 + 4 | 0) >> 2] | 0 | 1 | 0;
   }
   HEAP32[($4 + 52 | 0) >> 2] = $4 + 132 | 0;
   HEAP32[($4 + 48 | 0) >> 2] = $4 + 140 | 0;
   label$5 : {
    if ((sscanf($3 | 0, 66420 | 0, $4 + 48 | 0 | 0) | 0 | 0) != (1 | 0)) {
     break label$5
    }
    $3 = ImStrSkipBlank_28char_20const__29($3 + (HEAP32[($4 + 132 | 0) >> 2] | 0) | 0 | 0) | 0;
    HEAPF32[$7 >> 2] = Math_fround(HEAPF32[($4 + 140 | 0) >> 2]);
    $7 = $6 + ($5 << 4 | 0) | 0;
    HEAP8[($7 + 14 | 0) >> 0] = HEAPU8[($7 + 14 | 0) >> 0] | 0 | 8 | 0;
    HEAP32[($2 + 4 | 0) >> 2] = HEAP32[($2 + 4 | 0) >> 2] | 0 | 1 | 0;
   }
   HEAP32[($4 + 36 | 0) >> 2] = $4 + 132 | 0;
   HEAP32[($4 + 32 | 0) >> 2] = $4 + 128 | 0;
   label$6 : {
    if ((sscanf($3 | 0, 66548 | 0, $4 + 32 | 0 | 0) | 0 | 0) != (1 | 0)) {
     break label$6
    }
    $3 = ImStrSkipBlank_28char_20const__29($3 + (HEAP32[($4 + 132 | 0) >> 2] | 0) | 0 | 0) | 0;
    $7 = $6 + ($5 << 4 | 0) | 0;
    HEAP8[($7 + 14 | 0) >> 0] = ((HEAPU8[($4 + 128 | 0) >> 0] | 0) << 2 | 0) & 4 | 0 | ((HEAPU8[($7 + 14 | 0) >> 0] | 0) & 251 | 0) | 0;
    HEAP32[($2 + 4 | 0) >> 2] = HEAP32[($2 + 4 | 0) >> 2] | 0 | 4 | 0;
   }
   HEAP32[($4 + 20 | 0) >> 2] = $4 + 132 | 0;
   HEAP32[($4 + 16 | 0) >> 2] = $4 + 128 | 0;
   label$7 : {
    if ((sscanf($3 | 0, 66432 | 0, $4 + 16 | 0 | 0) | 0 | 0) != (1 | 0)) {
     break label$7
    }
    $3 = ImStrSkipBlank_28char_20const__29($3 + (HEAP32[($4 + 132 | 0) >> 2] | 0) | 0 | 0) | 0;
    HEAP16[(($6 + ($5 << 4 | 0) | 0) + 10 | 0) >> 1] = HEAP32[($4 + 128 | 0) >> 2] | 0;
    HEAP32[($2 + 4 | 0) >> 2] = HEAP32[($2 + 4 | 0) >> 2] | 0 | 2 | 0;
   }
   HEAP32[($4 + 8 | 0) >> 2] = $4 + 132 | 0;
   HEAP32[($4 + 4 | 0) >> 2] = $4 + 127 | 0;
   HEAP32[$4 >> 2] = $4 + 128 | 0;
   if ((sscanf($3 | 0, 66591 | 0, $4 | 0) | 0 | 0) != (2 | 0)) {
    break label$1
   }
   ImStrSkipBlank_28char_20const__29($3 + (HEAP32[($4 + 132 | 0) >> 2] | 0) | 0 | 0) | 0;
   $3 = $6 + ($5 << 4 | 0) | 0;
   HEAP16[($3 + 12 | 0) >> 1] = HEAP32[($4 + 128 | 0) >> 2] | 0;
   HEAP8[($3 + 14 | 0) >> 0] = (HEAPU8[($3 + 14 | 0) >> 0] | 0) & 252 | 0 | ((HEAPU8[($4 + 127 | 0) >> 0] | 0 | 0) == (94 | 0) ? 2 : 1) | 0;
   HEAP32[($2 + 4 | 0) >> 2] = HEAP32[($2 + 4 | 0) >> 2] | 0 | 8 | 0;
  }
  __stack_pointer = $4 + 144 | 0;
 }
 
 function TableSettingsHandler_ApplyAll_28ImGuiContext__2c_20ImGuiSettingsHandler__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $5 = 0, $2 = 0, $7 = 0, $8 = 0, $4 = 0, $9 = 0, $3 = 0, $6 = 0;
  label$1 : {
   $2 = HEAP32[($0 + 19232 | 0) >> 2] | 0;
   if (!$2) {
    break label$1
   }
   $3 = $2 & 1 | 0;
   $4 = HEAP32[($0 + 19240 | 0) >> 2] | 0;
   $5 = 0;
   label$2 : {
    if (($2 | 0) == (1 | 0)) {
     break label$2
    }
    $6 = $2 & -2 | 0;
    $5 = 0;
    $2 = 0;
    label$3 : while (1) {
     label$4 : {
      $7 = $5 << 3 | 0;
      $8 = HEAP32[(($4 + $7 | 0) + 4 | 0) >> 2] | 0;
      if (($8 | 0) == (-1 | 0)) {
       break label$4
      }
      $9 = HEAP32[($0 + 19228 | 0) >> 2] | 0;
      if (!$9) {
       break label$4
      }
      $8 = $9 + Math_imul($8, 488) | 0;
      HEAP32[($8 + 56 | 0) >> 2] = -1;
      HEAP8[($8 + 476 | 0) >> 0] = 1;
     }
     label$5 : {
      $7 = HEAP32[(($4 + ($7 | 8 | 0) | 0) + 4 | 0) >> 2] | 0;
      if (($7 | 0) == (-1 | 0)) {
       break label$5
      }
      $8 = HEAP32[($0 + 19228 | 0) >> 2] | 0;
      if (!$8) {
       break label$5
      }
      $7 = $8 + Math_imul($7, 488) | 0;
      HEAP32[($7 + 56 | 0) >> 2] = -1;
      HEAP8[($7 + 476 | 0) >> 0] = 1;
     }
     $5 = $5 + 2 | 0;
     $2 = $2 + 2 | 0;
     if (($2 | 0) != ($6 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   if (!$3) {
    break label$1
   }
   $5 = HEAP32[(($4 + ($5 << 3 | 0) | 0) + 4 | 0) >> 2] | 0;
   if (($5 | 0) == (-1 | 0)) {
    break label$1
   }
   $4 = HEAP32[($0 + 19228 | 0) >> 2] | 0;
   if (!$4) {
    break label$1
   }
   $5 = $4 + Math_imul($5, 488) | 0;
   HEAP32[($5 + 56 | 0) >> 2] = -1;
   HEAP8[($5 + 476 | 0) >> 0] = 1;
  }
 }
 
 function TableSettingsHandler_ReadOpen_28ImGuiContext__2c_20ImGuiSettingsHandler__2c_20char_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, i64toi32_i32$0 = 0, $6 = 0, $8 = 0, i64toi32_i32$1 = 0, $5 = 0, $7 = 0, $11 = 0, $9 = 0, $10 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $4 = 0;
  HEAP32[($3 + 12 | 0) >> 2] = 0;
  HEAP32[($3 + 8 | 0) >> 2] = 0;
  HEAP32[$3 >> 2] = $3 + 12 | 0;
  HEAP32[($3 + 4 | 0) >> 2] = $3 + 8 | 0;
  label$1 : {
   if ((sscanf($2 | 0, 67286 | 0, $3 | 0) | 0 | 0) < (2 | 0)) {
    break label$1
   }
   $5 = HEAP32[($3 + 12 | 0) >> 2] | 0;
   label$2 : {
    $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    $4 = HEAP32[($2 + 23432 | 0) >> 2] | 0;
    if (!$4) {
     break label$2
    }
    $6 = $4 + 4 | 0;
    $4 = $6;
    label$3 : {
     label$4 : while (1) {
      if ((HEAP32[$4 >> 2] | 0 | 0) == ($5 | 0)) {
       break label$3
      }
      $4 = $4 + (HEAP32[($4 + -4 | 0) >> 2] | 0) | 0;
      if (($4 | 0) != ($6 + (HEAP32[($2 + 23424 | 0) >> 2] | 0) | 0 | 0)) {
       continue label$4
      }
      break label$2;
     };
    }
    label$5 : {
     $7 = HEAP32[($3 + 8 | 0) >> 2] | 0;
     $8 = HEAP16[($4 + 14 | 0) >> 1] | 0;
     if (($7 | 0) > ($8 | 0)) {
      break label$5
     }
     i64toi32_i32$1 = $4;
     i64toi32_i32$0 = 0;
     HEAP32[$4 >> 2] = 0;
     HEAP32[($4 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($4 + 16 | 0) >> 2] = 0;
     i64toi32_i32$1 = $4 + 8 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     label$6 : {
      if (($8 | 0) < (1 | 0)) {
       break label$6
      }
      $9 = $8 & 1 | 0;
      $2 = $4 + 20 | 0;
      label$7 : {
       if (($8 | 0) == (1 | 0)) {
        break label$7
       }
       $10 = $8 & -2 | 0;
       $6 = 0;
       label$8 : while (1) {
        HEAP16[($2 + 12 | 0) >> 1] = 65535;
        i64toi32_i32$1 = $2;
        i64toi32_i32$0 = 0;
        HEAP32[$2 >> 2] = 0;
        HEAP32[($2 + 4 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[($2 + 8 | 0) >> 2] = -1;
        i64toi32_i32$1 = $2;
        i64toi32_i32$0 = 0;
        HEAP32[($2 + 16 | 0) >> 2] = 0;
        HEAP32[($2 + 20 | 0) >> 2] = i64toi32_i32$0;
        HEAP16[($2 + 28 | 0) >> 1] = 65535;
        HEAP32[($2 + 24 | 0) >> 2] = -1;
        HEAP8[($2 + 14 | 0) >> 0] = (HEAPU8[($2 + 14 | 0) >> 0] | 0) & 240 | 0 | 4 | 0;
        $11 = $2 + 30 | 0;
        HEAP8[$11 >> 0] = (HEAPU8[$11 >> 0] | 0) & 240 | 0 | 4 | 0;
        $2 = $2 + 32 | 0;
        $6 = $6 + 2 | 0;
        if (($6 | 0) != ($10 | 0)) {
         continue label$8
        }
        break label$8;
       };
      }
      if (!$9) {
       break label$6
      }
      HEAP16[($2 + 12 | 0) >> 1] = 65535;
      i64toi32_i32$1 = $2;
      i64toi32_i32$0 = 0;
      HEAP32[$2 >> 2] = 0;
      HEAP32[($2 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($2 + 8 | 0) >> 2] = -1;
      HEAP8[($2 + 14 | 0) >> 0] = (HEAPU8[($2 + 14 | 0) >> 0] | 0) & 240 | 0 | 4 | 0;
     }
     HEAP8[($4 + 16 | 0) >> 0] = 1;
     HEAP16[($4 + 14 | 0) >> 1] = $8;
     HEAP16[($4 + 12 | 0) >> 1] = $7;
     HEAP32[$4 >> 2] = $5;
     break label$1;
    }
    HEAP32[$4 >> 2] = 0;
    $5 = HEAP32[($3 + 12 | 0) >> 2] | 0;
   }
   $4 = ImGui__TableSettingsCreate_28unsigned_20int_2c_20int_29($5 | 0, HEAP32[($3 + 8 | 0) >> 2] | 0 | 0) | 0;
  }
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function TableSettingsHandler_ClearAll_28ImGuiContext__2c_20ImGuiSettingsHandler__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $5 = 0, $2 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $3 = 0, $6 = 0;
  label$1 : {
   $2 = HEAP32[($0 + 19232 | 0) >> 2] | 0;
   if (!$2) {
    break label$1
   }
   $3 = $2 & 1 | 0;
   $4 = HEAP32[($0 + 19240 | 0) >> 2] | 0;
   $5 = 0;
   label$2 : {
    if (($2 | 0) == (1 | 0)) {
     break label$2
    }
    $6 = $2 & -2 | 0;
    $5 = 0;
    $2 = 0;
    label$3 : while (1) {
     label$4 : {
      $7 = $5 << 3 | 0;
      $8 = HEAP32[(($4 + $7 | 0) + 4 | 0) >> 2] | 0;
      if (($8 | 0) == (-1 | 0)) {
       break label$4
      }
      $9 = HEAP32[($0 + 19228 | 0) >> 2] | 0;
      if (!$9) {
       break label$4
      }
      HEAP32[(($9 + Math_imul($8, 488) | 0) + 56 | 0) >> 2] = -1;
     }
     label$5 : {
      $7 = HEAP32[(($4 + ($7 | 8 | 0) | 0) + 4 | 0) >> 2] | 0;
      if (($7 | 0) == (-1 | 0)) {
       break label$5
      }
      $8 = HEAP32[($0 + 19228 | 0) >> 2] | 0;
      if (!$8) {
       break label$5
      }
      HEAP32[(($8 + Math_imul($7, 488) | 0) + 56 | 0) >> 2] = -1;
     }
     $5 = $5 + 2 | 0;
     $2 = $2 + 2 | 0;
     if (($2 | 0) != ($6 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   if (!$3) {
    break label$1
   }
   $5 = HEAP32[(($4 + ($5 << 3 | 0) | 0) + 4 | 0) >> 2] | 0;
   if (($5 | 0) == (-1 | 0)) {
    break label$1
   }
   $4 = HEAP32[($0 + 19228 | 0) >> 2] | 0;
   if (!$4) {
    break label$1
   }
   HEAP32[(($4 + Math_imul($5, 488) | 0) + 56 | 0) >> 2] = -1;
  }
  label$6 : {
   $5 = HEAP32[($0 + 23432 | 0) >> 2] | 0;
   if (!$5) {
    break label$6
   }
   HEAP32[($0 + 23424 | 0) >> 2] = 0;
   HEAP32[($0 + 23428 | 0) >> 2] = 0;
   ImGui__MemFree_28void__29($5 | 0);
   HEAP32[($0 + 23432 | 0) >> 2] = 0;
  }
 }
 
 function ImGui__TableGcCompactTransientBuffers_28ImGuiTable__29($0) {
  $0 = $0 | 0;
  var $2 = 0, $5 = 0, $3 = 0, i64toi32_i32$0 = 0, $6 = 0, $1 = 0, $4 = 0, $7 = 0;
  $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  HEAP32[($0 + 408 | 0) >> 2] = 0;
  label$1 : {
   $2 = HEAP32[($0 + 404 | 0) >> 2] | 0;
   if (!$2) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 396 | 0) >> 2] = 0;
   HEAP32[($0 + 400 | 0) >> 2] = i64toi32_i32$0;
   ImGui__MemFree_28void__29($2 | 0);
   HEAP32[($0 + 404 | 0) >> 2] = 0;
  }
  HEAP8[($0 + 473 | 0) >> 0] = 1;
  label$2 : {
   $2 = HEAP32[($0 + 348 | 0) >> 2] | 0;
   if (!$2) {
    break label$2
   }
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 340 | 0) >> 2] = 0;
   HEAP32[($0 + 344 | 0) >> 2] = i64toi32_i32$0;
   ImGui__MemFree_28void__29($2 | 0);
   HEAP32[($0 + 348 | 0) >> 2] = 0;
  }
  HEAP8[($0 + 485 | 0) >> 0] = 1;
  label$3 : {
   $3 = HEAP32[($0 + 64 | 0) >> 2] | 0;
   if (($3 | 0) < (1 | 0)) {
    break label$3
   }
   $4 = $3 & 7 | 0;
   $5 = HEAP32[($0 + 16 | 0) >> 2] | 0;
   $6 = 0;
   $2 = 0;
   label$4 : {
    if ($3 >>> 0 < 8 >>> 0) {
     break label$4
    }
    $7 = $3 & -8 | 0;
    $2 = 0;
    $3 = 0;
    label$5 : while (1) {
     HEAP16[(($5 + Math_imul($2, 112) | 0) + 80 | 0) >> 1] = 65535;
     HEAP16[(($5 + Math_imul($2 | 1 | 0, 112) | 0) + 80 | 0) >> 1] = 65535;
     HEAP16[(($5 + Math_imul($2 | 2 | 0, 112) | 0) + 80 | 0) >> 1] = 65535;
     HEAP16[(($5 + Math_imul($2 | 3 | 0, 112) | 0) + 80 | 0) >> 1] = 65535;
     HEAP16[(($5 + Math_imul($2 | 4 | 0, 112) | 0) + 80 | 0) >> 1] = 65535;
     HEAP16[(($5 + Math_imul($2 | 5 | 0, 112) | 0) + 80 | 0) >> 1] = 65535;
     HEAP16[(($5 + Math_imul($2 | 6 | 0, 112) | 0) + 80 | 0) >> 1] = 65535;
     HEAP16[(($5 + Math_imul($2 | 7 | 0, 112) | 0) + 80 | 0) >> 1] = 65535;
     $2 = $2 + 8 | 0;
     $3 = $3 + 8 | 0;
     if (($3 | 0) != ($7 | 0)) {
      continue label$5
     }
     break label$5;
    };
   }
   if (!$4) {
    break label$3
   }
   label$6 : while (1) {
    HEAP16[(($5 + Math_imul($2, 112) | 0) + 80 | 0) >> 1] = 65535;
    $2 = $2 + 1 | 0;
    $6 = $6 + 1 | 0;
    if (($6 | 0) != ($4 | 0)) {
     continue label$6
    }
    break label$6;
   };
  }
  HEAP32[((HEAP32[($1 + 19260 | 0) >> 2] | 0) + ((($0 - (HEAP32[($1 + 19228 | 0) >> 2] | 0) | 0 | 0) / (488 | 0) | 0) << 2 | 0) | 0) >> 2] = -1082130432;
 }
 
 function ImGui__TableGcCompactTransientBuffers_28ImGuiTableTempData__29($0) {
  $0 = $0 | 0;
  ImDrawListSplitter__ClearFreeMemory_28_29($0 + 16 | 0 | 0);
  HEAP32[($0 + 4 | 0) >> 2] = -1082130432;
 }
 
 function ImGui__TableGcCompactSettings_28_29() {
  var $0 = 0, $3 = 0, $1 = 0, $2 = 0, $5 = 0, $4 = 0, $6 = 0, $7 = 0;
  $0 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      $2 = HEAP32[($1 + 23432 | 0) >> 2] | 0;
      if (!$2) {
       break label$4
      }
      $3 = $2 + 4 | 0;
      $4 = HEAP32[($1 + 23424 | 0) >> 2] | 0;
      $5 = $3 + $4 | 0;
      label$5 : while (1) {
       label$6 : {
        if (!(HEAP32[$3 >> 2] | 0)) {
         break label$6
        }
        $0 = ($0 + ((HEAP16[($3 + 12 | 0) >> 1] | 0) << 4 | 0) | 0) + 20 | 0;
       }
       $3 = $3 + (HEAP32[($3 + -4 | 0) >> 2] | 0) | 0;
       if (($3 | 0) != ($5 | 0)) {
        continue label$5
       }
       break label$5;
      };
      if (($0 | 0) == ($4 | 0)) {
       break label$2
      }
      label$7 : {
       label$8 : {
        if (($0 | 0) >= (1 | 0)) {
         break label$8
        }
        $6 = 0;
        $0 = 0;
        break label$7;
       }
       $6 = ImGui__MemAlloc_28unsigned_20long_29($0 | 0) | 0;
       $2 = HEAP32[($1 + 23432 | 0) >> 2] | 0;
      }
      if (!$2) {
       break label$1
      }
      $3 = $2 + 4 | 0;
      $5 = 0;
      label$9 : while (1) {
       label$10 : {
        label$11 : {
         if (HEAP32[$3 >> 2] | 0) {
          break label$11
         }
         $4 = $5;
         break label$10;
        }
        label$12 : {
         $2 = (((HEAP16[($3 + 12 | 0) >> 1] | 0) << 4 | 0) + 27 | 0) & -8 | 0;
         $4 = $2 + $5 | 0;
         if (($0 | 0) >= ($4 | 0)) {
          break label$12
         }
         label$13 : {
          label$14 : {
           if ($0) {
            break label$14
           }
           $7 = 8;
           break label$13;
          }
          $7 = (($0 | 0) / (2 | 0) | 0) + $0 | 0;
         }
         $7 = ($7 | 0) > ($4 | 0) ? $7 : $4;
         if (($0 | 0) >= ($7 | 0)) {
          break label$12
         }
         $0 = ImGui__MemAlloc_28unsigned_20long_29($7 | 0) | 0;
         label$15 : {
          if (!$6) {
           break label$15
          }
          __memcpy($0 | 0, $6 | 0, $5 | 0) | 0;
          ImGui__MemFree_28void__29($6 | 0);
         }
         $6 = $0;
         $0 = $7;
        }
        $5 = $6 + $5 | 0;
        HEAP32[$5 >> 2] = $2;
        __memcpy($5 + 4 | 0 | 0, $3 | 0, ((HEAP16[($3 + 12 | 0) >> 1] | 0) << 4 | 0) + 20 | 0 | 0) | 0;
        $2 = HEAP32[($1 + 23432 | 0) >> 2] | 0;
        $5 = $4;
       }
       $3 = $3 + (HEAP32[($3 + -4 | 0) >> 2] | 0) | 0;
       if (($3 | 0) == (($2 + (HEAP32[($1 + 23424 | 0) >> 2] | 0) | 0) + 4 | 0 | 0)) {
        break label$3
       }
       continue label$9;
      };
     }
     $6 = 0;
     $0 = 0;
     if (HEAP32[($1 + 23424 | 0) >> 2] | 0) {
      break label$1
     }
     break label$2;
    }
    HEAP32[($1 + 23432 | 0) >> 2] = $6;
    HEAP32[($1 + 23424 | 0) >> 2] = $4;
    HEAP32[($1 + 23428 | 0) >> 2] = $0;
    if (!$2) {
     break label$2
    }
    ImGui__MemFree_28void__29($2 | 0);
    return;
   }
   return;
  }
  HEAP32[($1 + 23432 | 0) >> 2] = $6;
  HEAP32[($1 + 23424 | 0) >> 2] = 0;
  HEAP32[($1 + 23428 | 0) >> 2] = $0;
 }
 
 function ImGui__SetColumnOffset_28int_2c_20float_29($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $7 = 0, $8 = 0, $3 = 0, $12 = Math_fround(0), $2 = 0, $14 = Math_fround(0), $6 = Math_fround(0), $9 = 0, $5 = Math_fround(0), $13 = Math_fround(0), $4 = Math_fround(0), $10 = 0, $11 = 0, $15 = Math_fround(0);
  $2 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $3 = HEAP32[((HEAP32[($2 + 16116 | 0) >> 2] | 0) + 452 | 0) >> 2] | 0;
  $4 = Math_fround(HEAPF32[($3 + 24 | 0) >> 2]);
  $5 = Math_fround(HEAPF32[($3 + 20 | 0) >> 2]);
  $6 = Math_fround($4 - $5);
  $7 = HEAP32[($3 + 4 | 0) >> 2] | 0;
  $8 = $7 & 8 | 0;
  $9 = HEAP32[($3 + 100 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($7 & 4 | 0) {
      break label$3
     }
     $10 = HEAP32[($3 + 16 | 0) >> 2] | 0;
     $11 = $10 + -1 | 0;
     label$4 : {
      if (!$8) {
       break label$4
      }
      label$5 : while (1) {
       label$6 : {
        if (($0 | 0) > (-1 | 0)) {
         break label$6
        }
        $0 = HEAP32[($3 + 12 | 0) >> 2] | 0;
       }
       if (($0 | 0) >= ($11 | 0)) {
        break label$2
       }
       $8 = HEAPU8[($3 + 9 | 0) >> 0] | 0;
       $7 = $0;
       label$7 : {
        if (($0 | 0) > (-1 | 0)) {
         break label$7
        }
        $7 = HEAP32[($3 + 12 | 0) >> 2] | 0;
       }
       $7 = $9 + Math_imul($7, 28) | 0;
       $8 = $8 & 255 | 0;
       $12 = Math_fround(HEAPF32[($8 ? $7 + 4 | 0 : $7) >> 2]);
       $13 = Math_fround(HEAPF32[($8 ? $7 + 32 | 0 : $7 + 28 | 0) >> 2]);
       HEAPF32[($9 + Math_imul($0, 28) | 0) >> 2] = Math_fround(Math_fround($1 - $5) / $6);
       $14 = Math_fround(HEAPF32[($2 + 14508 | 0) >> 2]);
       $12 = Math_fround(Math_fround($13 - $12) * $6);
       $1 = Math_fround($1 + ($14 >= $12 ? $14 : $12));
       $0 = $0 + 1 | 0;
       continue label$5;
      };
     }
     $14 = Math_fround(HEAPF32[($2 + 14508 | 0) >> 2]);
     $15 = Math_fround(-$14);
     label$8 : while (1) {
      label$9 : {
       if (($0 | 0) > (-1 | 0)) {
        break label$9
       }
       $0 = HEAP32[($3 + 12 | 0) >> 2] | 0;
      }
      $12 = Math_fround(0.0);
      label$10 : {
       $7 = ($0 | 0) >= ($11 | 0);
       if ($7) {
        break label$10
       }
       $2 = HEAPU8[($3 + 9 | 0) >> 0] | 0;
       $8 = $0;
       label$11 : {
        if (($0 | 0) > (-1 | 0)) {
         break label$11
        }
        $8 = HEAP32[($3 + 12 | 0) >> 2] | 0;
       }
       $8 = $9 + Math_imul($8, 28) | 0;
       $2 = $2 & 255 | 0;
       $12 = Math_fround(Math_fround(Math_fround(HEAPF32[($2 ? $8 + 32 | 0 : $8 + 28 | 0) >> 2]) - Math_fround(HEAPF32[($2 ? $8 + 4 | 0 : $8) >> 2])) * $6);
      }
      $13 = Math_fround(Math_fround($15 * Math_fround($10 - $0 | 0 | 0)) + $4);
      $1 = $13 > $1 ? $1 : $13;
      HEAPF32[($9 + Math_imul($0, 28) | 0) >> 2] = Math_fround(Math_fround($1 - $5) / $6);
      if ($7) {
       break label$1
      }
      $0 = $0 + 1 | 0;
      $1 = Math_fround($1 + ($14 >= $12 ? $14 : $12));
      continue label$8;
     };
    }
    label$12 : {
     if ($8) {
      break label$12
     }
     $7 = HEAP32[($3 + 16 | 0) >> 2] | 0;
     $12 = Math_fround(-Math_fround(HEAPF32[($2 + 14508 | 0) >> 2]));
     label$13 : {
      if (($0 | 0) > (-1 | 0)) {
       break label$13
      }
      $0 = HEAP32[($3 + 12 | 0) >> 2] | 0;
     }
     $12 = Math_fround(Math_fround($12 * Math_fround($7 - $0 | 0 | 0)) + $4);
     $1 = $12 > $1 ? $1 : $12;
     break label$2;
    }
    if (($0 | 0) > (-1 | 0)) {
     break label$2
    }
    $0 = HEAP32[($3 + 12 | 0) >> 2] | 0;
   }
   HEAPF32[($9 + Math_imul($0, 28) | 0) >> 2] = Math_fround(Math_fround($1 - $5) / $6);
  }
 }
 
 function ImGui__PushColumnsBackground_28_29() {
  var $2 = 0, i64toi32_i32$1 = 0, $1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $0 = 0, $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $18 = 0, $24 = 0, $39 = 0, $42 = 0;
  label$1 : {
   $0 = HEAP32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 16116 | 0) >> 2] | 0;
   $1 = HEAP32[($0 + 452 | 0) >> 2] | 0;
   if ((HEAP32[($1 + 16 | 0) >> 2] | 0 | 0) == (1 | 0)) {
    break label$1
   }
   i64toi32_i32$2 = $0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 580 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 584 | 0) >> 2] | 0;
   $18 = i64toi32_i32$0;
   i64toi32_i32$0 = $1;
   HEAP32[(i64toi32_i32$0 + 60 | 0) >> 2] = $18;
   HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] = i64toi32_i32$1;
   $2 = i64toi32_i32$2 + 588 | 0;
   i64toi32_i32$2 = $2;
   i64toi32_i32$1 = HEAP32[$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($2 + 4 | 0) >> 2] | 0;
   $24 = i64toi32_i32$1;
   i64toi32_i32$1 = $1 + 68 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $24;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $3 = Math_fround(HEAPF32[($1 + 56 | 0) >> 2]);
   $4 = $1 + 52 | 0;
   $5 = Math_fround(HEAPF32[$4 >> 2]);
   $6 = Math_fround(HEAPF32[($1 + 48 | 0) >> 2]);
   $7 = Math_fround(HEAPF32[($1 + 44 | 0) >> 2]);
   i64toi32_i32$2 = $4;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $39 = i64toi32_i32$0;
   i64toi32_i32$0 = $2;
   HEAP32[$2 >> 2] = $39;
   HEAP32[($2 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1;
   i64toi32_i32$1 = HEAP32[($1 + 44 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($1 + 48 | 0) >> 2] | 0;
   $42 = i64toi32_i32$1;
   i64toi32_i32$1 = $0;
   HEAP32[(i64toi32_i32$1 + 580 | 0) >> 2] = $42;
   HEAP32[(i64toi32_i32$1 + 584 | 0) >> 2] = i64toi32_i32$0;
   $2 = HEAP32[(i64toi32_i32$1 + 672 | 0) >> 2] | 0;
   HEAPF32[($2 + 96 | 0) >> 2] = $7;
   HEAPF32[($2 + 100 | 0) >> 2] = $6;
   HEAPF32[($2 + 104 | 0) >> 2] = $5;
   HEAPF32[($2 + 108 | 0) >> 2] = $3;
   $2 = HEAP32[(i64toi32_i32$1 + 672 | 0) >> 2] | 0;
   $2 = (((HEAP32[($2 + 60 | 0) >> 2] | 0) << 4 | 0) + (HEAP32[($2 + 68 | 0) >> 2] | 0) | 0) + -16 | 0;
   HEAPF32[($2 + 12 | 0) >> 2] = $3;
   HEAPF32[($2 + 8 | 0) >> 2] = $5;
   HEAPF32[($2 + 4 | 0) >> 2] = $6;
   HEAPF32[$2 >> 2] = $7;
   ImDrawListSplitter__SetCurrentChannel_28ImDrawList__2c_20int_29($1 + 104 | 0 | 0, HEAP32[(i64toi32_i32$1 + 672 | 0) >> 2] | 0 | 0, 0 | 0);
  }
 }
 
 function ImGui__PopColumnsBackground_28_29() {
  var $3 = 0, $1 = 0, $0 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $30 = 0, $33 = 0;
  label$1 : {
   $0 = HEAP32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 16116 | 0) >> 2] | 0;
   $1 = HEAP32[($0 + 452 | 0) >> 2] | 0;
   if ((HEAP32[($1 + 16 | 0) >> 2] | 0 | 0) == (1 | 0)) {
    break label$1
   }
   $2 = Math_fround(HEAPF32[($1 + 72 | 0) >> 2]);
   $3 = $1 + 68 | 0;
   $4 = Math_fround(HEAPF32[$3 >> 2]);
   $5 = Math_fround(HEAPF32[($1 + 64 | 0) >> 2]);
   $6 = Math_fround(HEAPF32[($1 + 60 | 0) >> 2]);
   i64toi32_i32$0 = HEAP32[$3 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($3 + 4 | 0) >> 2] | 0;
   $30 = i64toi32_i32$0;
   i64toi32_i32$0 = $0 + 588 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $30;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[($1 + 60 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($1 + 64 | 0) >> 2] | 0;
   $33 = i64toi32_i32$1;
   i64toi32_i32$1 = $0;
   HEAP32[($0 + 580 | 0) >> 2] = $33;
   HEAP32[($0 + 584 | 0) >> 2] = i64toi32_i32$0;
   $3 = HEAP32[($0 + 672 | 0) >> 2] | 0;
   HEAPF32[($3 + 100 | 0) >> 2] = $5;
   HEAPF32[($3 + 104 | 0) >> 2] = $4;
   HEAPF32[($3 + 108 | 0) >> 2] = $2;
   HEAPF32[($3 + 96 | 0) >> 2] = $6;
   $3 = HEAP32[($0 + 672 | 0) >> 2] | 0;
   $3 = (((HEAP32[($3 + 60 | 0) >> 2] | 0) << 4 | 0) + (HEAP32[($3 + 68 | 0) >> 2] | 0) | 0) + -16 | 0;
   HEAPF32[($3 + 12 | 0) >> 2] = $2;
   HEAPF32[($3 + 8 | 0) >> 2] = $4;
   HEAPF32[($3 + 4 | 0) >> 2] = $5;
   HEAPF32[$3 >> 2] = $6;
   ImDrawListSplitter__SetCurrentChannel_28ImDrawList__2c_20int_29($1 + 104 | 0 | 0, HEAP32[($0 + 672 | 0) >> 2] | 0 | 0, (HEAP32[($1 + 12 | 0) >> 2] | 0) + 1 | 0 | 0);
  }
 }
 
 function ImGui__EndColumns_28_29() {
  var $5 = 0, $7 = 0, $6 = Math_fround(0), $4 = Math_fround(0), $2 = 0, $3 = 0, $13 = 0, $0 = 0, $14 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $12 = 0, $8 = Math_fround(0), i64toi32_i32$2 = 0, $1 = 0, $11 = 0, $9 = Math_fround(0), $15 = 0, $10 = Math_fround(0), $377 = 0, $380 = 0, $16 = 0, $16$hi = 0, $390 = 0;
  $0 = __stack_pointer - 48 | 0;
  __stack_pointer = $0;
  $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $2 = HEAP32[($1 + 16116 | 0) >> 2] | 0;
  HEAP8[($2 + 221 | 0) >> 0] = 1;
  $3 = HEAP32[($2 + 452 | 0) >> 2] | 0;
  ImGui__PopItemWidth_28_29();
  label$1 : {
   if ((HEAP32[($3 + 16 | 0) >> 2] | 0 | 0) < (2 | 0)) {
    break label$1
   }
   ImGui__PopClipRect_28_29();
   ImDrawListSplitter__Merge_28ImDrawList__29($3 + 104 | 0 | 0, HEAP32[($2 + 672 | 0) >> 2] | 0 | 0);
  }
  $4 = Math_fround(HEAPF32[($3 + 32 | 0) >> 2]);
  $5 = $2 + 296 | 0;
  $6 = Math_fround(HEAPF32[$5 >> 2]);
  $4 = $4 >= $6 ? $4 : $6;
  HEAPF32[($3 + 32 | 0) >> 2] = $4;
  $7 = HEAP32[($3 + 4 | 0) >> 2] | 0;
  HEAPF32[$5 >> 2] = $4;
  label$2 : {
   if ($7 & 16 | 0) {
    break label$2
   }
   HEAPF32[($2 + 316 | 0) >> 2] = Math_fround(HEAPF32[($3 + 40 | 0) >> 2]);
  }
  $5 = 0;
  label$3 : {
   if ($7 & 1 | 0) {
    break label$3
   }
   $5 = 0;
   if (HEAPU8[($2 + 224 | 0) >> 0] | 0) {
    break label$3
   }
   $5 = 0;
   if ((HEAP32[($3 + 16 | 0) >> 2] | 0 | 0) < (2 | 0)) {
    break label$3
   }
   $6 = Math_fround(HEAPF32[($2 + 592 | 0) >> 2]);
   $8 = $4 < $6 ? $4 : $6;
   $4 = Math_fround(HEAPF32[($3 + 36 | 0) >> 2]);
   $6 = Math_fround(HEAPF32[($2 + 584 | 0) >> 2]);
   $9 = $4 >= $6 ? $4 : $6;
   $10 = Math_fround($9 + Math_fround(1.0));
   $11 = $7 & 2 | 0;
   $12 = -1;
   $7 = 1;
   label$4 : while (1) {
    $4 = Math_fround(HEAPF32[($2 + 64 | 0) >> 2]);
    label$5 : {
     label$6 : {
      $5 = HEAP32[((HEAP32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 16116 | 0) >> 2] | 0) + 452 | 0) >> 2] | 0;
      if ($5) {
       break label$6
      }
      $6 = Math_fround(0.0);
      break label$5;
     }
     $6 = Math_fround(HEAPF32[($5 + 20 | 0) >> 2]);
     $6 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($5 + 24 | 0) >> 2]) - $6) * Math_fround(HEAPF32[((HEAP32[($5 + 100 | 0) >> 2] | 0) + Math_imul($7, 28) | 0) >> 2])) + $6);
    }
    $13 = HEAP32[($3 + 100 | 0) >> 2] | 0;
    $5 = HEAP32[$3 >> 2] | 0;
    HEAPF32[($0 + 44 | 0) >> 2] = $8;
    $4 = Math_fround($4 + $6);
    HEAPF32[($0 + 40 | 0) >> 2] = Math_fround($4 + Math_fround(4.0));
    HEAPF32[($0 + 36 | 0) >> 2] = $9;
    HEAPF32[($0 + 32 | 0) >> 2] = Math_fround($4 + Math_fround(-4.0));
    label$7 : {
     $5 = $5 + $7 | 0;
     if (!(ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($0 + 32 | 0 | 0, $5 | 0, 0 | 0, 8 | 0) | 0)) {
      break label$7
     }
     HEAP8[($0 + 31 | 0) >> 0] = 0;
     HEAP8[($0 + 30 | 0) >> 0] = 0;
     $14 = 1;
     label$8 : {
      label$9 : {
       if ($11) {
        break label$9
       }
       ImGui__ButtonBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20bool__2c_20bool__2c_20int_29($0 + 32 | 0 | 0, $5 | 0, $0 + 31 | 0 | 0, $0 + 30 | 0 | 0, 0 | 0) | 0;
       $15 = HEAPU8[($0 + 31 | 0) >> 0] | 0;
       $5 = HEAPU8[($0 + 30 | 0) >> 0] | 0;
       if (!(($15 | $5 | 0) & 255 | 0)) {
        break label$9
       }
       HEAP32[($1 + 19036 | 0) >> 2] = 4;
       label$10 : {
        if (!$5) {
         break label$10
        }
        $12 = (HEAPU8[(($13 + Math_imul($7, 28) | 0) + 8 | 0) >> 0] | 0) & 2 | 0 ? $12 : $7;
       }
       $14 = !$5;
       $5 = 28;
       if ($15 & 255 | 0) {
        break label$8
       }
      }
      $5 = 27;
     }
     $5 = ImGui__GetColorU32_28int_2c_20float_29(($14 ? $5 : 29) | 0, Math_fround(Math_fround(1.0))) | 0;
     $14 = HEAP32[($2 + 672 | 0) >> 2] | 0;
     HEAPF32[($0 + 20 | 0) >> 2] = $10;
     label$11 : {
      label$12 : {
       if (!(Math_fround(Math_abs($4)) < Math_fround(2147483648.0))) {
        break label$12
       }
       $13 = ~~$4;
       break label$11;
      }
      $13 = -2147483648;
     }
     $4 = Math_fround($13 | 0);
     HEAPF32[($0 + 16 | 0) >> 2] = $4;
     HEAPF32[($0 + 12 | 0) >> 2] = $8;
     HEAPF32[($0 + 8 | 0) >> 2] = $4;
     ImDrawList__AddLine_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_29($14 | 0, $0 + 16 | 0 | 0, $0 + 8 | 0 | 0, $5 | 0, Math_fround(Math_fround(1.0)));
    }
    $7 = $7 + 1 | 0;
    $5 = HEAP32[($3 + 16 | 0) >> 2] | 0;
    if (($7 | 0) < ($5 | 0)) {
     continue label$4
    }
    break label$4;
   };
   label$13 : {
    if (($12 | 0) != (-1 | 0)) {
     break label$13
    }
    $5 = 0;
    break label$3;
   }
   label$14 : {
    if (HEAPU8[($3 + 9 | 0) >> 0] | 0) {
     break label$14
    }
    $7 = 0;
    if (($5 | 0) < (0 | 0)) {
     break label$14
    }
    $13 = $5 + 1 | 0;
    $11 = $13 & 3 | 0;
    $14 = HEAP32[($3 + 100 | 0) >> 2] | 0;
    label$15 : {
     if ($5 >>> 0 < 3 >>> 0) {
      break label$15
     }
     $1 = $13 & -4 | 0;
     $7 = 0;
     $5 = 0;
     label$16 : while (1) {
      $13 = $14 + Math_imul($7, 28) | 0;
      HEAPF32[($13 + 4 | 0) >> 2] = Math_fround(HEAPF32[$13 >> 2]);
      $13 = $14 + Math_imul($7 | 1 | 0, 28) | 0;
      HEAPF32[($13 + 4 | 0) >> 2] = Math_fround(HEAPF32[$13 >> 2]);
      $13 = $14 + Math_imul($7 | 2 | 0, 28) | 0;
      HEAPF32[($13 + 4 | 0) >> 2] = Math_fround(HEAPF32[$13 >> 2]);
      $13 = $14 + Math_imul($7 | 3 | 0, 28) | 0;
      HEAPF32[($13 + 4 | 0) >> 2] = Math_fround(HEAPF32[$13 >> 2]);
      $7 = $7 + 4 | 0;
      $5 = $5 + 4 | 0;
      if (($5 | 0) != ($1 | 0)) {
       continue label$16
      }
      break label$16;
     };
    }
    if (!$11) {
     break label$14
    }
    $5 = 0;
    label$17 : while (1) {
     $13 = $14 + Math_imul($7, 28) | 0;
     HEAPF32[($13 + 4 | 0) >> 2] = Math_fround(HEAPF32[$13 >> 2]);
     $7 = $7 + 1 | 0;
     $5 = $5 + 1 | 0;
     if (($5 | 0) != ($11 | 0)) {
      continue label$17
     }
     break label$17;
    };
   }
   HEAP8[($3 + 9 | 0) >> 0] = 1;
   $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $7 = HEAP32[($5 + 16116 | 0) >> 2] | 0;
   $4 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($5 + 3520 | 0) >> 2]) - Math_fround(HEAPF32[($5 + 16212 | 0) >> 2])) + Math_fround(4.0)) - Math_fround(HEAPF32[($7 + 64 | 0) >> 2]));
   label$18 : {
    label$19 : {
     $7 = HEAP32[($7 + 452 | 0) >> 2] | 0;
     if ($7) {
      break label$19
     }
     $6 = Math_fround(0.0);
     break label$18;
    }
    label$20 : {
     label$21 : {
      if (($12 | 0) <= (0 | 0)) {
       break label$21
      }
      $14 = $12 + -1 | 0;
      break label$20;
     }
     $14 = HEAP32[($7 + 12 | 0) >> 2] | 0;
    }
    $6 = Math_fround(HEAPF32[($7 + 20 | 0) >> 2]);
    $6 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($7 + 24 | 0) >> 2]) - $6) * Math_fround(HEAPF32[((HEAP32[($7 + 100 | 0) >> 2] | 0) + Math_imul($14, 28) | 0) >> 2])) + $6);
   }
   $8 = Math_fround(HEAPF32[($5 + 14508 | 0) >> 2]);
   $6 = Math_fround($6 + $8);
   $4 = $4 >= $6 ? $4 : $6;
   label$22 : {
    if (!((HEAPU8[($3 + 4 | 0) >> 0] | 0) & 4 | 0)) {
     break label$22
    }
    label$23 : {
     label$24 : {
      if ($7) {
       break label$24
      }
      $6 = Math_fround(0.0);
      break label$23;
     }
     label$25 : {
      label$26 : {
       if (($12 | 0) <= (-2 | 0)) {
        break label$26
       }
       $5 = $12 + 1 | 0;
       break label$25;
      }
      $5 = HEAP32[($7 + 12 | 0) >> 2] | 0;
     }
     $6 = Math_fround(HEAPF32[($7 + 20 | 0) >> 2]);
     $6 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($7 + 24 | 0) >> 2]) - $6) * Math_fround(HEAPF32[((HEAP32[($7 + 100 | 0) >> 2] | 0) + Math_imul($5, 28) | 0) >> 2])) + $6);
    }
    $6 = Math_fround($6 - $8);
    $4 = $4 < $6 ? $4 : $6;
   }
   ImGui__SetColumnOffset_28int_2c_20float_29($12 | 0, Math_fround($4));
   $5 = 1;
  }
  HEAP8[($3 + 9 | 0) >> 0] = $5;
  $7 = $2 + 572 | 0;
  i64toi32_i32$2 = $7;
  i64toi32_i32$0 = HEAP32[$7 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($7 + 4 | 0) >> 2] | 0;
  $377 = i64toi32_i32$0;
  i64toi32_i32$0 = $2 + 556 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $377;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = HEAP32[($2 + 564 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2 + 568 | 0) >> 2] | 0;
  $380 = i64toi32_i32$1;
  i64toi32_i32$1 = $2;
  HEAP32[($2 + 548 | 0) >> 2] = $380;
  HEAP32[($2 + 552 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $3 + 84 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $16 = i64toi32_i32$0;
  $16$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $3;
  i64toi32_i32$1 = HEAP32[($3 + 76 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3 + 80 | 0) >> 2] | 0;
  HEAP32[($2 + 452 | 0) >> 2] = 0;
  HEAP32[($2 + 364 | 0) >> 2] = 0;
  $390 = i64toi32_i32$1;
  i64toi32_i32$1 = $2;
  HEAP32[($2 + 564 | 0) >> 2] = $390;
  HEAP32[($2 + 568 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $16$hi;
  i64toi32_i32$1 = $7;
  HEAP32[$7 >> 2] = $16;
  HEAP32[($7 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$27 : {
   label$28 : {
    $4 = Math_fround(Math_fround(Math_fround(HEAPF32[($2 + 64 | 0) >> 2]) + Math_fround(HEAPF32[($2 + 360 | 0) >> 2])) + Math_fround(0.0));
    if (!(Math_fround(Math_abs($4)) < Math_fround(2147483648.0))) {
     break label$28
    }
    $3 = ~~$4;
    break label$27;
   }
   $3 = -2147483648;
  }
  HEAPF32[($2 + 292 | 0) >> 2] = Math_fround($3 | 0);
  __stack_pointer = $0 + 48 | 0;
 }
 
 function ImGui__TextEx_28char_20const__2c_20char_20const__2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $5 = 0, $8 = Math_fround(0), $10 = Math_fround(0), $4 = 0, $7 = Math_fround(0), $6 = 0, $9 = Math_fround(0), $12 = Math_fround(0), i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $13 = Math_fround(0), $11 = 0, $230 = 0;
  $3 = __stack_pointer - 64 | 0;
  __stack_pointer = $3;
  $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $5 = HEAP32[($4 + 16116 | 0) >> 2] | 0;
  HEAP8[($5 + 221 | 0) >> 0] = 1;
  label$1 : {
   if (HEAPU8[($5 + 224 | 0) >> 0] | 0) {
    break label$1
   }
   $6 = ($0 | 0) == ($1 | 0);
   $0 = $6 ? 70527 : $0;
   label$2 : {
    $1 = $6 ? 70527 : $1;
    if ($1) {
     break label$2
    }
    $1 = $0 + (strlen($0 | 0) | 0) | 0;
   }
   $7 = Math_fround(Math_fround(HEAPF32[($5 + 296 | 0) >> 2]) + Math_fround(HEAPF32[($5 + 348 | 0) >> 2]));
   $8 = Math_fround(HEAPF32[($5 + 472 | 0) >> 2]);
   $9 = Math_fround(HEAPF32[($5 + 292 | 0) >> 2]);
   label$3 : {
    label$4 : {
     if (($1 - $0 | 0 | 0) < (2001 | 0)) {
      break label$4
     }
     $10 = Math_fround(0.0);
     if (!($8 >= Math_fround(0.0))) {
      break label$3
     }
    }
    $10 = Math_fround(0.0);
    label$5 : {
     if (!($8 >= Math_fround(0.0))) {
      break label$5
     }
     $10 = Math_fround(ImGui__CalcWrapWidthForPos_28ImVec2_20const__2c_20float_29($5 + 292 | 0 | 0, Math_fround($8)));
    }
    ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($3 + 56 | 0 | 0, $0 | 0, $1 | 0, 0 | 0, Math_fround($10));
    HEAPF32[($3 + 44 | 0) >> 2] = $7;
    HEAPF32[($3 + 52 | 0) >> 2] = Math_fround($7 + Math_fround(HEAPF32[($3 + 60 | 0) >> 2]));
    HEAPF32[($3 + 40 | 0) >> 2] = $9;
    HEAPF32[($3 + 48 | 0) >> 2] = Math_fround($9 + Math_fround(HEAPF32[($3 + 56 | 0) >> 2]));
    ImGui__ItemSize_28ImVec2_20const__2c_20float_29($3 + 56 | 0 | 0, Math_fround(Math_fround(0.0)));
    if (!(ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($3 + 40 | 0 | 0, 0 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$1
    }
    i64toi32_i32$0 = HEAP32[($3 + 40 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($3 + 44 | 0) >> 2] | 0;
    $11 = i64toi32_i32$0;
    i64toi32_i32$0 = $3;
    HEAP32[($3 + 32 | 0) >> 2] = $11;
    HEAP32[($3 + 36 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$0 = $3;
    HEAP32[$3 >> 2] = $11;
    HEAP32[($3 + 4 | 0) >> 2] = i64toi32_i32$1;
    ImGui__RenderTextWrapped_28ImVec2_2c_20char_20const__2c_20char_20const__2c_20float_29($3 | 0, $0 | 0, $1 | 0, Math_fround($10));
    break label$1;
   }
   $12 = Math_fround(ImGui__GetTextLineHeight_28_29());
   HEAP32[($3 + 56 | 0) >> 2] = 0;
   label$6 : {
    label$7 : {
     if (!(HEAPU8[($4 + 23484 | 0) >> 0] | 0)) {
      break label$7
     }
     $8 = $7;
     break label$6;
    }
    label$8 : {
     label$9 : {
      $8 = Math_fround(Math_fround(Math_fround(HEAPF32[($5 + 584 | 0) >> 2]) - $7) / $12);
      if (!(Math_fround(Math_abs($8)) < Math_fround(2147483648.0))) {
       break label$9
      }
      $4 = ~~$8;
      break label$8;
     }
     $4 = -2147483648;
    }
    label$10 : {
     if (($4 | 0) >= (1 | 0)) {
      break label$10
     }
     $8 = $7;
     break label$6;
    }
    label$11 : {
     label$12 : {
      if ($0 >>> 0 < $1 >>> 0) {
       break label$12
      }
      $5 = 0;
      $10 = Math_fround(0.0);
      break label$11;
     }
     $5 = 0;
     label$13 : {
      if ($2 & 1 | 0) {
       break label$13
      }
      $10 = Math_fround(0.0);
      label$14 : while (1) {
       $6 = memchr($0 | 0, 10 | 0, $1 - $0 | 0 | 0) | 0;
       $6 = $6 ? $6 : $1;
       ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($3 + 40 | 0 | 0, $0 | 0, $6 | 0, 0 | 0, Math_fround(Math_fround(-1.0)));
       $8 = Math_fround(HEAPF32[($3 + 40 | 0) >> 2]);
       $10 = $10 >= $8 ? $10 : $8;
       HEAPF32[($3 + 56 | 0) >> 2] = $10;
       $5 = $5 + 1 | 0;
       $0 = $6 + 1 | 0;
       if ($0 >>> 0 >= $1 >>> 0) {
        break label$11
       }
       if (($5 | 0) < ($4 | 0)) {
        continue label$14
       }
       break label$11;
      };
     }
     label$15 : while (1) {
      $5 = $5 + 1 | 0;
      $10 = Math_fround(0.0);
      $0 = memchr($0 | 0, 10 | 0, $1 - $0 | 0 | 0) | 0;
      $0 = ($0 ? $0 : $1) + 1 | 0;
      if ($0 >>> 0 >= $1 >>> 0) {
       break label$11
      }
      if (($5 | 0) < ($4 | 0)) {
       continue label$15
      }
      break label$15;
     };
    }
    $8 = Math_fround(Math_fround(Math_fround($5 | 0) * $12) + $7);
   }
   label$16 : {
    if ($0 >>> 0 >= $1 >>> 0) {
     break label$16
    }
    HEAPF32[($3 + 44 | 0) >> 2] = $8;
    HEAPF32[($3 + 52 | 0) >> 2] = Math_fround($12 + $8);
    HEAPF32[($3 + 40 | 0) >> 2] = $9;
    HEAPF32[($3 + 48 | 0) >> 2] = Math_fround($9 + Math_fround(3402823466385288598117041.0e14));
    label$17 : {
     label$18 : while (1) {
      if (ImGui__IsClippedEx_28ImRect_20const__2c_20unsigned_20int_29($3 + 40 | 0 | 0, 0 | 0) | 0) {
       break label$17
      }
      $5 = memchr($0 | 0, 10 | 0, $1 - $0 | 0 | 0) | 0;
      $5 = $5 ? $5 : $1;
      ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($3 + 24 | 0 | 0, $0 | 0, $5 | 0, 0 | 0, Math_fround(Math_fround(-1.0)));
      HEAPF32[($3 + 16 | 0) >> 2] = $9;
      $13 = Math_fround(HEAPF32[($3 + 24 | 0) >> 2]);
      $10 = $10 >= $13 ? $10 : $13;
      HEAPF32[($3 + 56 | 0) >> 2] = $10;
      HEAPF32[($3 + 20 | 0) >> 2] = $8;
      i64toi32_i32$1 = HEAP32[($3 + 16 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($3 + 20 | 0) >> 2] | 0;
      $230 = i64toi32_i32$1;
      i64toi32_i32$1 = $3;
      HEAP32[($3 + 8 | 0) >> 2] = $230;
      HEAP32[($3 + 12 | 0) >> 2] = i64toi32_i32$0;
      ImGui__RenderText_28ImVec2_2c_20char_20const__2c_20char_20const__2c_20bool_29($3 + 8 | 0 | 0, $0 | 0, $5 | 0, 0 | 0);
      HEAPF32[($3 + 44 | 0) >> 2] = Math_fround($12 + Math_fround(HEAPF32[($3 + 44 | 0) >> 2]));
      HEAPF32[($3 + 52 | 0) >> 2] = Math_fround($12 + Math_fround(HEAPF32[($3 + 52 | 0) >> 2]));
      $8 = Math_fround($12 + $8);
      $0 = $5 + 1 | 0;
      if ($0 >>> 0 < $1 >>> 0) {
       continue label$18
      }
      break label$18;
     };
    }
    $5 = 0;
    label$19 : {
     if ($0 >>> 0 >= $1 >>> 0) {
      break label$19
     }
     $5 = 0;
     label$20 : {
      if ($2 & 1 | 0) {
       break label$20
      }
      label$21 : while (1) {
       $4 = memchr($0 | 0, 10 | 0, $1 - $0 | 0 | 0) | 0;
       $4 = $4 ? $4 : $1;
       ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($3 + 24 | 0 | 0, $0 | 0, $4 | 0, 0 | 0, Math_fround(Math_fround(-1.0)));
       $13 = Math_fround(HEAPF32[($3 + 24 | 0) >> 2]);
       $10 = $10 >= $13 ? $10 : $13;
       HEAPF32[($3 + 56 | 0) >> 2] = $10;
       $5 = $5 + 1 | 0;
       $0 = $4 + 1 | 0;
       if ($0 >>> 0 < $1 >>> 0) {
        continue label$21
       }
       break label$19;
      };
     }
     label$22 : while (1) {
      $5 = $5 + 1 | 0;
      $0 = memchr($0 | 0, 10 | 0, $1 - $0 | 0 | 0) | 0;
      $0 = ($0 ? $0 : $1) + 1 | 0;
      if ($0 >>> 0 < $1 >>> 0) {
       continue label$22
      }
      break label$22;
     };
    }
    $8 = Math_fround(Math_fround(Math_fround($5 | 0) * $12) + $8);
   }
   $8 = Math_fround($8 - $7);
   HEAPF32[($3 + 60 | 0) >> 2] = $8;
   HEAPF32[($3 + 52 | 0) >> 2] = Math_fround($7 + $8);
   HEAPF32[($3 + 44 | 0) >> 2] = $7;
   HEAPF32[($3 + 40 | 0) >> 2] = $9;
   HEAPF32[($3 + 48 | 0) >> 2] = Math_fround($9 + $10);
   ImGui__ItemSize_28ImVec2_20const__2c_20float_29($3 + 56 | 0 | 0, Math_fround(Math_fround(0.0)));
   ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($3 + 40 | 0 | 0, 0 | 0, 0 | 0, 0 | 0) | 0;
  }
  __stack_pointer = $3 + 64 | 0;
 }
 
 function ImGui__Text_28char_20const__2c_20____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[($2 + 4 | 0) >> 2] = $1;
  $3 = HEAP32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 16116 | 0) >> 2] | 0;
  HEAP8[($3 + 221 | 0) >> 0] = 1;
  label$1 : {
   if (HEAPU8[($3 + 224 | 0) >> 0] | 0) {
    break label$1
   }
   ImFormatStringToTempBufferV_28char_20const___2c_20char_20const___2c_20char_20const__2c_20void__29($2 + 12 | 0 | 0, $2 + 8 | 0 | 0, $0 | 0, $1 | 0);
   ImGui__TextEx_28char_20const__2c_20char_20const__2c_20int_29(HEAP32[($2 + 12 | 0) >> 2] | 0 | 0, HEAP32[($2 + 8 | 0) >> 2] | 0 | 0, 1 | 0);
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function ImGui__TextV_28char_20const__2c_20void__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = HEAP32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 16116 | 0) >> 2] | 0;
  HEAP8[($3 + 221 | 0) >> 0] = 1;
  label$1 : {
   if (HEAPU8[($3 + 224 | 0) >> 0] | 0) {
    break label$1
   }
   ImFormatStringToTempBufferV_28char_20const___2c_20char_20const___2c_20char_20const__2c_20void__29($2 + 12 | 0 | 0, $2 + 8 | 0 | 0, $0 | 0, $1 | 0);
   ImGui__TextEx_28char_20const__2c_20char_20const__2c_20int_29(HEAP32[($2 + 12 | 0) >> 2] | 0 | 0, HEAP32[($2 + 8 | 0) >> 2] | 0 | 0, 1 | 0);
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function ImGui__TextColored_28ImVec4_20const__2c_20char_20const__2c_20____29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 4 | 0) >> 2] = $2;
  ImGui__PushStyleColor_28int_2c_20ImVec4_20const__29(0 | 0, $0 | 0);
  $0 = HEAP32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 16116 | 0) >> 2] | 0;
  HEAP8[($0 + 221 | 0) >> 0] = 1;
  label$1 : {
   if (HEAPU8[($0 + 224 | 0) >> 0] | 0) {
    break label$1
   }
   ImFormatStringToTempBufferV_28char_20const___2c_20char_20const___2c_20char_20const__2c_20void__29($3 + 12 | 0 | 0, $3 + 8 | 0 | 0, $1 | 0, $2 | 0);
   ImGui__TextEx_28char_20const__2c_20char_20const__2c_20int_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3 + 8 | 0) >> 2] | 0 | 0, 1 | 0);
  }
  ImGui__PopStyleColor_28int_29(1 | 0);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function ImGui__ButtonBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20bool__2c_20bool__2c_20int_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $6 = 0, $5 = 0, $9 = 0, $7 = 0, $10 = 0, $8 = 0, $11 = 0, $12 = Math_fround(0), $14 = Math_fround(0), $13 = 0;
  $5 = 0;
  $6 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $7 = HEAP32[($6 + 16116 | 0) >> 2] | 0;
  HEAP8[($7 + 221 | 0) >> 0] = 1;
  $8 = HEAP32[($6 + 16120 | 0) >> 2] | 0;
  $9 = 0;
  label$1 : {
   $10 = !($4 & 7 | 0) | $4 | 0;
   $4 = $4 & 1008 | 0 ? $10 : $10 | 32 | 0;
   if (!($4 & 2048 | 0)) {
    break label$1
   }
   $9 = 0;
   if (!$8) {
    break label$1
   }
   $9 = 0;
   if ((HEAP32[($8 + 836 | 0) >> 2] | 0 | 0) != (HEAP32[($7 + 836 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   HEAP32[($6 + 16120 | 0) >> 2] = $7;
   $9 = 1;
  }
  $10 = ImGui__ItemHoverable_28ImRect_20const__2c_20unsigned_20int_29($0 | 0, $1 | 0) | 0;
  $11 = HEAPU8[($6 + 19040 | 0) >> 0] | 0;
  label$2 : {
   label$3 : {
    if (!$10) {
     break label$3
    }
    label$4 : {
     if ($11 & 255 | 0) {
      break label$4
     }
     $10 = 0;
     $5 = 1;
     break label$2;
    }
    $11 = 1;
    $5 = 1;
    if ((HEAP32[($6 + 19064 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
     break label$3
    }
    $11 = 1;
    $5 = ((HEAPU8[($6 + 19044 | 0) >> 0] | 0) & 2 | 0) >>> 1 | 0;
   }
   $10 = 0;
   if (!($11 & 255 | 0)) {
    break label$2
   }
   if (!($4 & 512 | 0)) {
    break label$2
   }
   if ((HEAPU8[($6 + 19044 | 0) >> 0] | 0) & 4 | 0) {
    break label$2
   }
   if (!(ImGui__IsItemHovered_28int_29(128 | 0) | 0)) {
    break label$2
   }
   ImGui__SetHoveredID_28unsigned_20int_29($1 | 0);
   $5 = 1;
   $12 = Math_fround(HEAPF32[($6 + 16184 | 0) >> 2]);
   if (!($12 >= Math_fround(.699999988079071))) {
    break label$2
   }
   if (!(Math_fround($12 - Math_fround(HEAPF32[($6 + 24 | 0) >> 2])) <= Math_fround(.699999988079071))) {
    break label$2
   }
   HEAP32[($6 + 19152 | 0) >> 2] = $1;
   ImGui__FocusWindow_28ImGuiWindow__29($7 | 0);
   $5 = 1;
   $10 = 1;
  }
  label$5 : {
   if (!$9) {
    break label$5
   }
   HEAP32[($6 + 16120 | 0) >> 2] = $8;
  }
  label$6 : {
   label$7 : {
    label$8 : {
     if (($5 & (($4 & 4096 | 0) >>> 12 | 0) | 0 | 0) != (1 | 0)) {
      break label$8
     }
     $9 = 0;
     $11 = $4 & 2097152 | 0 ? 0 : $1;
     $5 = HEAP32[($6 + 16176 | 0) >> 2] | 0;
     if (($5 | 0) == ($1 | 0)) {
      break label$7
     }
     if (!$5) {
      break label$7
     }
     break label$6;
    }
    $9 = 0;
    $11 = $4 & 2097152 | 0 ? 0 : $1;
    if (!$5) {
     break label$6
    }
   }
   $5 = -1;
   $9 = -1;
   label$9 : {
    if (!($4 & 1 | 0)) {
     break label$9
    }
    $9 = (ImGui__IsMouseClicked_28int_2c_20unsigned_20int_2c_20int_29(0 | 0, $11 | 0, 0 | 0) | 0) + -1 | 0;
    $5 = (ImGui__IsMouseReleased_28int_2c_20unsigned_20int_29(0 | 0, $11 | 0) | 0) + -1 | 0;
   }
   label$10 : {
    if (!($4 & 2 | 0)) {
     break label$10
    }
    $8 = ImGui__IsMouseClicked_28int_2c_20unsigned_20int_2c_20int_29(1 | 0, $11 | 0, 0 | 0) | 0;
    $5 = ImGui__IsMouseReleased_28int_2c_20unsigned_20int_29(1 | 0, $11 | 0) | 0 ? (($5 | 0) == (-1 | 0) ? 1 : $5) : $5;
    $9 = $8 ? (($9 | 0) == (-1 | 0) ? 1 : $9) : $9;
   }
   label$11 : {
    if (!($4 & 4 | 0)) {
     break label$11
    }
    $8 = ImGui__IsMouseClicked_28int_2c_20unsigned_20int_2c_20int_29(2 | 0, $11 | 0, 0 | 0) | 0;
    $5 = ImGui__IsMouseReleased_28int_2c_20unsigned_20int_29(2 | 0, $11 | 0) | 0 ? (($5 | 0) == (-1 | 0) ? 2 : $5) : $5;
    $9 = $8 ? (($9 | 0) == (-1 | 0) ? 2 : $9) : $9;
   }
   label$12 : {
    label$13 : {
     label$14 : {
      if (!($4 & 65536 | 0)) {
       break label$14
      }
      if (HEAPU8[($6 + 3548 | 0) >> 0] | 0) {
       break label$13
      }
      if (HEAPU8[($6 + 3549 | 0) >> 0] | 0) {
       break label$13
      }
      if (HEAPU8[($6 + 3550 | 0) >> 0] | 0) {
       break label$13
      }
     }
     label$15 : {
      if (($9 | 0) == (-1 | 0)) {
       break label$15
      }
      if ((HEAP32[($6 + 16192 | 0) >> 2] | 0 | 0) == ($1 | 0)) {
       break label$15
      }
      label$16 : {
       if ($4 & 1048576 | 0) {
        break label$16
       }
       ImGui__SetKeyOwner_28ImGuiKey_2c_20unsigned_20int_2c_20int_29($9 + 641 | 0 | 0, $1 | 0, 0 | 0);
      }
      label$17 : {
       if (!($4 & 96 | 0)) {
        break label$17
       }
       ImGui__SetActiveID_28unsigned_20int_2c_20ImGuiWindow__29($1 | 0, $7 | 0);
       HEAP32[($6 + 16228 | 0) >> 2] = $9;
       label$18 : {
        if ($4 & 262144 | 0) {
         break label$18
        }
        ImGui__SetFocusID_28unsigned_20int_2c_20ImGuiWindow__29($1 | 0, $7 | 0);
       }
       ImGui__FocusWindow_28ImGuiWindow__29($7 | 0);
      }
      label$19 : {
       if ($4 & 16 | 0) {
        break label$19
       }
       if (!($4 & 256 | 0)) {
        break label$15
       }
       if ((HEAPU16[(($6 + ($9 << 1 | 0) | 0) + 14090 | 0) >> 1] | 0 | 0) != (2 | 0)) {
        break label$15
       }
      }
      label$20 : {
       label$21 : {
        if (!($4 & 131072 | 0)) {
         break label$21
        }
        ImGui__ClearActiveID_28_29();
        break label$20;
       }
       ImGui__SetActiveID_28unsigned_20int_2c_20ImGuiWindow__29($1 | 0, $7 | 0);
      }
      label$22 : {
       if ($4 & 262144 | 0) {
        break label$22
       }
       ImGui__SetFocusID_28unsigned_20int_2c_20ImGuiWindow__29($1 | 0, $7 | 0);
      }
      HEAP32[($6 + 16228 | 0) >> 2] = $9;
      ImGui__FocusWindow_28ImGuiWindow__29($7 | 0);
      $10 = 1;
     }
     $9 = $4 & 1024 | 0;
     label$23 : {
      label$24 : {
       if ($4 & 128 | 0) {
        break label$24
       }
       $8 = $10;
       break label$23;
      }
      label$25 : {
       if (($5 | 0) != (-1 | 0)) {
        break label$25
       }
       $8 = $10;
       break label$23;
      }
      $8 = 1;
      label$26 : {
       if (!$9) {
        break label$26
       }
       $8 = $10 | (Math_fround(HEAPF32[(($6 + ($5 << 2 | 0) | 0) + 14148 | 0) >> 2]) >= Math_fround(HEAPF32[($6 + 52 | 0) >> 2]) ^ 1 | 0) | 0;
      }
      label$27 : {
       if ($4 & 262144 | 0) {
        break label$27
       }
       ImGui__SetFocusID_28unsigned_20int_2c_20ImGuiWindow__29($1 | 0, $7 | 0);
      }
      ImGui__ClearActiveID_28_29();
     }
     label$28 : {
      if ((HEAP32[($6 + 16192 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
       break label$28
      }
      if (!$9) {
       break label$28
      }
      $5 = HEAP32[($6 + 16228 | 0) >> 2] | 0;
      if (!(Math_fround(HEAPF32[(($6 + ($5 << 2 | 0) | 0) + 14128 | 0) >> 2]) > Math_fround(0.0))) {
       break label$28
      }
      $9 = 1;
      $10 = 0;
      if (!(($8 | (ImGui__IsMouseClicked_28int_2c_20unsigned_20int_2c_20int_29($5 | 0, $11 | 0, 1 | 0) | 0) | 0) & 1 | 0)) {
       break label$6
      }
      break label$12;
     }
     $10 = $8;
    }
    $9 = 1;
    $5 = $10 & 1 | 0;
    $10 = 0;
    if (!$5) {
     break label$6
    }
   }
   $9 = 1;
   HEAP8[($6 + 18710 | 0) >> 0] = 1;
   $10 = 1;
  }
  label$29 : {
   if ((HEAP32[($6 + 18652 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
    break label$29
   }
   if (HEAPU8[($6 + 18710 | 0) >> 0] | 0) {
    break label$29
   }
   if (!(HEAPU8[($6 + 18711 | 0) >> 0] | 0)) {
    break label$29
   }
   label$30 : {
    label$31 : {
     $5 = HEAP32[($6 + 16192 | 0) >> 2] | 0;
     if (!$5) {
      break label$31
     }
     if (($5 | 0) == ($1 | 0)) {
      break label$31
     }
     if (($5 | 0) != (HEAP32[($7 + 156 | 0) >> 2] | 0 | 0)) {
      break label$29
     }
     if (!($4 & 524288 | 0)) {
      break label$30
     }
     break label$29;
    }
    if ($4 & 524288 | 0) {
     break label$29
    }
   }
   $9 = 1;
  }
  label$32 : {
   if ((HEAP32[($6 + 18664 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
    break label$32
   }
   $8 = HEAP32[($6 + 18660 | 0) >> 2] | 0;
   label$33 : {
    $5 = (HEAP32[($6 + 18668 | 0) >> 2] | 0 | 0) == ($1 | 0);
    if ($5) {
     break label$33
    }
    if (!($4 & 1024 | 0)) {
     break label$33
    }
    $5 = ImGui__GetKeyData_28ImGuiKey_29(524 | 0) | 0;
    $13 = ImGui__GetKeyData_28ImGuiKey_29(622 | 0) | 0;
    $12 = Math_fround(HEAPF32[($5 + 4 | 0) >> 2]);
    $14 = Math_fround(HEAPF32[($13 + 4 | 0) >> 2]);
    $12 = $12 >= $14 ? $12 : $14;
    $5 = (ImGui__CalcTypematicRepeatAmount_28float_2c_20float_2c_20float_2c_20float_29(Math_fround(Math_fround($12 - Math_fround(HEAPF32[($6 + 24 | 0) >> 2]))), Math_fround($12), Math_fround(Math_fround(HEAPF32[($6 + 52 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6 + 56 | 0) >> 2]))) | 0 | 0) > (0 | 0);
   }
   label$34 : {
    if (($8 | 0) == ($1 | 0)) {
     break label$34
    }
    if (!$5) {
     break label$32
    }
   }
   ImGui__SetActiveID_28unsigned_20int_2c_20ImGuiWindow__29($1 | 0, $7 | 0);
   HEAP32[($6 + 16224 | 0) >> 2] = 5;
   $10 = 1;
   if ($4 & 262144 | 0) {
    break label$32
   }
   ImGui__SetFocusID_28unsigned_20int_2c_20ImGuiWindow__29($1 | 0, $7 | 0);
  }
  $8 = 0;
  label$35 : {
   label$36 : {
    if ((HEAP32[($6 + 16192 | 0) >> 2] | 0 | 0) == ($1 | 0)) {
     break label$36
    }
    $5 = $10;
    break label$35;
   }
   $5 = 0;
   $7 = 0;
   label$37 : {
    label$38 : {
     label$39 : {
      label$40 : {
       switch ((HEAP32[($6 + 16224 | 0) >> 2] | 0) + -1 | 0 | 0) {
       case 0:
        label$42 : {
         if (!(HEAPU8[($6 + 16204 | 0) >> 0] | 0)) {
          break label$42
         }
         $12 = Math_fround(HEAPF32[$0 >> 2]);
         HEAPF32[($6 + 16216 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6 + 3524 | 0) >> 2]) - Math_fround(HEAPF32[($0 + 4 | 0) >> 2]));
         HEAPF32[($6 + 16212 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6 + 3520 | 0) >> 2]) - $12);
        }
        $7 = 1;
        label$43 : {
         $1 = HEAP32[($6 + 16228 | 0) >> 2] | 0;
         $8 = ImGui__IsMouseDown_28int_2c_20unsigned_20int_29($1 | 0, $11 | 0) | 0;
         if ($8) {
          break label$43
         }
         label$44 : {
          label$45 : {
           if (($4 >>> 5 | 0) & $9 | 0) {
            break label$45
           }
           if (!($4 & 64 | 0)) {
            break label$44
           }
          }
          if (HEAPU8[($6 + 19040 | 0) >> 0] | 0) {
           break label$44
          }
          $0 = 0;
          $7 = 0;
          label$46 : {
           if (!($4 & 256 | 0)) {
            break label$46
           }
           $7 = 0;
           if (!(HEAPU8[(($6 + $1 | 0) + 14110 | 0) >> 0] | 0)) {
            break label$46
           }
           $7 = (HEAPU16[(($6 + ($1 << 1 | 0) | 0) + 14100 | 0) >> 1] | 0 | 0) == (2 | 0);
          }
          label$47 : {
           if (!($4 & 1024 | 0)) {
            break label$47
           }
           $0 = Math_fround(HEAPF32[(($6 + ($1 << 2 | 0) | 0) + 14148 | 0) >> 2]) >= Math_fround(HEAPF32[($6 + 52 | 0) >> 2]);
          }
          $10 = $10 | ((ImGui__TestKeyOwner_28ImGuiKey_2c_20unsigned_20int_29($1 + 641 | 0 | 0, $11 | 0) | 0) & (($7 | $0 | 0) ^ 1 | 0) | 0) | 0;
         }
         ImGui__ClearActiveID_28_29();
         $7 = 0;
        }
        if ($4 & 262144 | 0) {
         break label$39
        }
        HEAP8[($6 + 18710 | 0) >> 0] = 1;
        if ($10) {
         break label$37
        }
        break label$35;
       case 4:
        break label$40;
       default:
        break label$39;
       };
      }
      if ((HEAP32[($6 + 18664 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
       break label$38
      }
      $7 = 0;
     }
     $8 = ($7 | 0) != (0 | 0);
     if (!$10) {
      break label$35
     }
     break label$37;
    }
    ImGui__ClearActiveID_28_29();
    $8 = 0;
    $5 = 0;
    if (!$10) {
     break label$35
    }
   }
   $5 = 1;
   HEAP8[($6 + 16207 | 0) >> 0] = 1;
  }
  label$48 : {
   if (!$2) {
    break label$48
   }
   HEAP8[$2 >> 0] = $9;
  }
  label$49 : {
   if (!$3) {
    break label$49
   }
   HEAP8[$3 >> 0] = $8;
  }
  return $5 | 0;
 }
 
 function ImGui__ArrowButtonEx_28char_20const__2c_20int_2c_20ImVec2_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $9 = Math_fround(0), $7 = 0, $6 = 0, i64toi32_i32$2 = 0, $12 = Math_fround(0), $8 = 0, $10 = 0, $11 = Math_fround(0), $5 = 0, $10$hi = 0, $13 = 0, $13$hi = 0, $145 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $4 = __stack_pointer - 80 | 0;
  __stack_pointer = $4;
  $5 = 0;
  $6 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $7 = HEAP32[($6 + 16116 | 0) >> 2] | 0;
  HEAP8[($7 + 221 | 0) >> 0] = 1;
  label$1 : {
   if (HEAPU8[($7 + 224 | 0) >> 0] | 0) {
    break label$1
   }
   $5 = 0;
   $0 = ImGuiWindow__GetID_28char_20const__2c_20char_20const__29($7 | 0, $0 | 0, 0 | 0) | 0;
   $8 = $7 + 292 | 0;
   $9 = Math_fround(HEAPF32[$8 >> 2]);
   i64toi32_i32$2 = $8;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $10 = i64toi32_i32$0;
   $10$hi = i64toi32_i32$1;
   $11 = Math_fround(HEAPF32[$2 >> 2]);
   $12 = Math_fround(HEAPF32[($2 + 4 | 0) >> 2]);
   HEAPF32[($4 + 76 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($7 + 296 | 0) >> 2]) + $12);
   i64toi32_i32$0 = $4;
   HEAP32[($4 + 64 | 0) >> 2] = $10;
   HEAP32[($4 + 68 | 0) >> 2] = i64toi32_i32$1;
   HEAPF32[($4 + 72 | 0) >> 2] = Math_fround($9 + $11);
   $9 = Math_fround(-1.0);
   label$2 : {
    if (!($12 >= Math_fround(ImGui__GetFrameHeight_28_29()))) {
     break label$2
    }
    $9 = Math_fround(HEAPF32[($6 + 14460 | 0) >> 2]);
   }
   ImGui__ItemSize_28ImVec2_20const__2c_20float_29($2 | 0, Math_fround($9));
   if (!(ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($4 + 64 | 0 | 0, $0 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $5 = ImGui__ButtonBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20bool__2c_20bool__2c_20int_29($4 + 64 | 0 | 0, $0 | 0, $4 + 63 | 0 | 0, $4 + 62 | 0 | 0, ((HEAP32[($6 + 18284 | 0) >> 2] | 0) << 9 | 0) & 1024 | 0 | $3 | 0 | 0) | 0;
   $3 = ImGui__GetColorU32_28int_2c_20float_29((wasm2js_i32$0 = HEAPU8[($4 + 62 | 0) >> 0] | 0 ? 23 : 22, wasm2js_i32$1 = 21, wasm2js_i32$2 = HEAPU8[($4 + 63 | 0) >> 0] | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0, Math_fround(Math_fround(1.0))) | 0;
   $8 = ImGui__GetColorU32_28int_2c_20float_29(0 | 0, Math_fround(Math_fround(1.0))) | 0;
   ImGui__RenderNavHighlight_28ImRect_20const__2c_20unsigned_20int_2c_20int_29($4 + 64 | 0 | 0, $0 | 0, 1 | 0);
   i64toi32_i32$2 = $4;
   i64toi32_i32$1 = HEAP32[($4 + 64 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($4 + 68 | 0) >> 2] | 0;
   $10 = i64toi32_i32$1;
   $10$hi = i64toi32_i32$0;
   i64toi32_i32$1 = $4;
   HEAP32[($4 + 48 | 0) >> 2] = $10;
   HEAP32[($4 + 52 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $4;
   i64toi32_i32$0 = HEAP32[($4 + 72 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($4 + 76 | 0) >> 2] | 0;
   $13 = i64toi32_i32$0;
   $13$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $4;
   HEAP32[($4 + 40 | 0) >> 2] = $13;
   HEAP32[($4 + 44 | 0) >> 2] = i64toi32_i32$1;
   $9 = Math_fround(HEAPF32[($6 + 14464 | 0) >> 2]);
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$0 = $4;
   HEAP32[($4 + 24 | 0) >> 2] = $10;
   HEAP32[($4 + 28 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $13$hi;
   i64toi32_i32$0 = $4;
   HEAP32[($4 + 16 | 0) >> 2] = $13;
   HEAP32[($4 + 20 | 0) >> 2] = i64toi32_i32$1;
   ImGui__RenderFrame_28ImVec2_2c_20ImVec2_2c_20unsigned_20int_2c_20bool_2c_20float_29($4 + 24 | 0 | 0, $4 + 16 | 0 | 0, $3 | 0, 1 | 0, Math_fround($9));
   $7 = HEAP32[($7 + 672 | 0) >> 2] | 0;
   $9 = Math_fround(HEAPF32[$2 >> 2]);
   $11 = Math_fround(HEAPF32[($6 + 15488 | 0) >> 2]);
   $12 = Math_fround(Math_fround(Math_fround(HEAPF32[($2 + 4 | 0) >> 2]) - $11) * Math_fround(.5));
   HEAPF32[($4 + 36 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4 + 68 | 0) >> 2]) + ($12 <= Math_fround(0.0) ? Math_fround(0.0) : $12));
   $9 = Math_fround(Math_fround($9 - $11) * Math_fround(.5));
   HEAPF32[($4 + 32 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4 + 64 | 0) >> 2]) + ($9 <= Math_fround(0.0) ? Math_fround(0.0) : $9));
   i64toi32_i32$2 = $4;
   i64toi32_i32$1 = HEAP32[($4 + 32 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($4 + 36 | 0) >> 2] | 0;
   $145 = i64toi32_i32$1;
   i64toi32_i32$1 = $4;
   HEAP32[($4 + 8 | 0) >> 2] = $145;
   HEAP32[($4 + 12 | 0) >> 2] = i64toi32_i32$0;
   ImGui__RenderArrow_28ImDrawList__2c_20ImVec2_2c_20unsigned_20int_2c_20int_2c_20float_29($7 | 0, $4 + 8 | 0 | 0, $8 | 0, $1 | 0, Math_fround(Math_fround(1.0)));
  }
  __stack_pointer = $4 + 80 | 0;
  return $5 | 0;
 }
 
 function ImGui__CloseButton_28unsigned_20int_2c_20ImVec2_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $8 = Math_fround(0), $4 = Math_fround(0), $9 = Math_fround(0), $7 = Math_fround(0), $3 = 0, $6 = 0, $10 = Math_fround(0), $5 = Math_fround(0);
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $4 = Math_fround(HEAPF32[($3 + 14456 | 0) >> 2]);
  $5 = Math_fround(HEAPF32[($3 + 14460 | 0) >> 2]);
  $6 = HEAP32[($3 + 16116 | 0) >> 2] | 0;
  $7 = Math_fround(HEAPF32[($3 + 15488 | 0) >> 2]);
  $8 = Math_fround(HEAPF32[$1 >> 2]);
  $9 = Math_fround(HEAPF32[($1 + 4 | 0) >> 2]);
  HEAPF32[($2 + 36 | 0) >> 2] = $9;
  HEAPF32[($2 + 32 | 0) >> 2] = $8;
  $5 = Math_fround(Math_fround($7 + $9) + Math_fround($5 + $5));
  HEAPF32[($2 + 44 | 0) >> 2] = $5;
  $4 = Math_fround(Math_fround($7 + $8) + Math_fround($4 + $4));
  HEAPF32[($2 + 40 | 0) >> 2] = $4;
  label$1 : {
   $7 = Math_fround($4 - $8);
   $10 = Math_fround($5 - $9);
   if (!(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($6 + 508 | 0) >> 2]) - Math_fround(HEAPF32[($6 + 500 | 0) >> 2])) * Math_fround(Math_fround(HEAPF32[($6 + 512 | 0) >> 2]) - Math_fround(HEAPF32[($6 + 504 | 0) >> 2]))) / Math_fround($7 * $10)) < Math_fround(1.5))) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $10 = Math_fround($10 * Math_fround(-.25));
     if (!(Math_fround(Math_abs($10)) < Math_fround(2147483648.0))) {
      break label$3
     }
     $1 = ~~$10;
     break label$2;
    }
    $1 = -2147483648;
   }
   $10 = Math_fround($1 | 0);
   HEAPF32[($2 + 44 | 0) >> 2] = Math_fround($5 + $10);
   label$4 : {
    label$5 : {
     $7 = Math_fround($7 * Math_fround(-.25));
     if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
      break label$5
     }
     $1 = ~~$7;
     break label$4;
    }
    $1 = -2147483648;
   }
   $7 = Math_fround($1 | 0);
   HEAPF32[($2 + 40 | 0) >> 2] = Math_fround($4 + $7);
   HEAPF32[($2 + 36 | 0) >> 2] = Math_fround($9 - $10);
   HEAPF32[($2 + 32 | 0) >> 2] = Math_fround($8 - $7);
  }
  $1 = ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($2 + 32 | 0 | 0, $0 | 0, 0 | 0, 0 | 0) | 0;
  $0 = ImGui__ButtonBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20bool__2c_20bool__2c_20int_29($2 + 32 | 0 | 0, $0 | 0, $2 + 31 | 0 | 0, $2 + 30 | 0 | 0, 0 | 0) | 0;
  label$6 : {
   if (!$1) {
    break label$6
   }
   $1 = ImGui__GetColorU32_28int_2c_20float_29((HEAPU8[($2 + 30 | 0) >> 0] | 0 ? 23 : 22) | 0, Math_fround(Math_fround(1.0))) | 0;
   HEAPF32[($2 + 20 | 0) >> 2] = Math_fround(Math_fround($9 + $5) * Math_fround(.5));
   HEAPF32[($2 + 16 | 0) >> 2] = Math_fround(Math_fround($8 + $4) * Math_fround(.5));
   label$7 : {
    if (!(HEAPU8[($2 + 31 | 0) >> 0] | 0)) {
     break label$7
    }
    ImDrawList__AddCircleFilled_28ImVec2_20const__2c_20float_2c_20unsigned_20int_2c_20int_29(HEAP32[($6 + 672 | 0) >> 2] | 0 | 0, $2 + 16 | 0 | 0, Math_fround(Math_fround(Math_max(Math_fround(Math_fround(Math_fround(HEAPF32[($3 + 15488 | 0) >> 2]) * Math_fround(.5)) + Math_fround(1.0)), Math_fround(2.0)))), $1 | 0, 12 | 0);
   }
   $8 = Math_fround(HEAPF32[($3 + 15488 | 0) >> 2]);
   $3 = ImGui__GetColorU32_28int_2c_20float_29(0 | 0, Math_fround(Math_fround(1.0))) | 0;
   $9 = Math_fround(Math_fround(HEAPF32[($2 + 20 | 0) >> 2]) + Math_fround(-.5));
   HEAPF32[($2 + 20 | 0) >> 2] = $9;
   $4 = Math_fround(Math_fround(HEAPF32[($2 + 16 | 0) >> 2]) + Math_fround(-.5));
   HEAPF32[($2 + 16 | 0) >> 2] = $4;
   $1 = HEAP32[($6 + 672 | 0) >> 2] | 0;
   $8 = Math_fround(Math_fround(Math_fround($8 * Math_fround(.5)) * Math_fround(.707099974155426)) + Math_fround(-1.0));
   HEAPF32[($2 + 12 | 0) >> 2] = Math_fround($8 + $9);
   HEAPF32[($2 + 8 | 0) >> 2] = Math_fround($8 + $4);
   HEAPF32[($2 + 4 | 0) >> 2] = Math_fround($9 - $8);
   HEAPF32[$2 >> 2] = Math_fround($4 - $8);
   ImDrawList__AddLine_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_29($1 | 0, $2 + 8 | 0 | 0, $2 | 0, $3 | 0, Math_fround(Math_fround(1.0)));
   $6 = HEAP32[($6 + 672 | 0) >> 2] | 0;
   $9 = Math_fround(HEAPF32[($2 + 20 | 0) >> 2]);
   HEAPF32[($2 + 12 | 0) >> 2] = Math_fround($9 - $8);
   $4 = Math_fround(HEAPF32[($2 + 16 | 0) >> 2]);
   HEAPF32[($2 + 8 | 0) >> 2] = Math_fround($8 + $4);
   HEAPF32[($2 + 4 | 0) >> 2] = Math_fround($8 + $9);
   HEAPF32[$2 >> 2] = Math_fround($4 - $8);
   ImDrawList__AddLine_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_29($6 | 0, $2 + 8 | 0 | 0, $2 | 0, $3 | 0, Math_fround(Math_fround(1.0)));
  }
  __stack_pointer = $2 + 48 | 0;
  return $0 | 0;
 }
 
 function ImGui__CollapseButton_28unsigned_20int_2c_20ImVec2_20const__2c_20ImGuiDockNode__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $6 = Math_fround(0), i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5 = 0, $7 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $12 = 0, $36 = Math_fround(0), $46 = 0, $11 = 0, $13 = 0, $129 = 0, $143 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3 = __stack_pointer - 64 | 0;
  __stack_pointer = $3;
  $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $5 = HEAP32[($4 + 16116 | 0) >> 2] | 0;
  $6 = Math_fround(HEAPF32[($4 + 14456 | 0) >> 2]);
  $7 = Math_fround(HEAPF32[$1 >> 2]);
  i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
  $9 = Math_fround(HEAPF32[($4 + 15488 | 0) >> 2]);
  $36 = Math_fround($9 + Math_fround(HEAPF32[($1 + 4 | 0) >> 2]));
  $1 = $4 + 14460 | 0;
  $10 = Math_fround(HEAPF32[$1 >> 2]);
  HEAPF32[(($3 + 48 | 0) + 12 | 0) >> 2] = Math_fround($36 + Math_fround($10 + $10));
  $46 = i64toi32_i32$0;
  i64toi32_i32$0 = $3;
  HEAP32[($3 + 48 | 0) >> 2] = $46;
  HEAP32[($3 + 52 | 0) >> 2] = i64toi32_i32$1;
  HEAPF32[($3 + 56 | 0) >> 2] = Math_fround(Math_fround($9 + $7) + Math_fround($6 + $6));
  ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($3 + 48 | 0 | 0, $0 | 0, 0 | 0, 0 | 0) | 0;
  $0 = ImGui__ButtonBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20bool__2c_20bool__2c_20int_29($3 + 48 | 0 | 0, $0 | 0, $3 + 47 | 0 | 0, $3 + 46 | 0 | 0, 0 | 0) | 0;
  $11 = ImGui__GetColorU32_28int_2c_20float_29((wasm2js_i32$0 = HEAPU8[($3 + 46 | 0) >> 0] | 0 ? 23 : 22, wasm2js_i32$1 = 21, wasm2js_i32$2 = HEAPU8[($3 + 47 | 0) >> 0] | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0, Math_fround(Math_fround(1.0))) | 0;
  $12 = ImGui__GetColorU32_28int_2c_20float_29(0 | 0, Math_fround(Math_fround(1.0))) | 0;
  label$1 : {
   if (!(HEAPU8[($3 + 47 | 0) >> 0] | 0 | (HEAPU8[($3 + 46 | 0) >> 0] | 0) | 0)) {
    break label$1
   }
   $13 = HEAP32[($5 + 672 | 0) >> 2] | 0;
   HEAPF32[($3 + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($3 + 52 | 0) >> 2]) + Math_fround(HEAPF32[($3 + 60 | 0) >> 2])) * Math_fround(.5)) + Math_fround(-.5));
   HEAPF32[($3 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($3 + 48 | 0) >> 2]) + Math_fround(HEAPF32[($3 + 56 | 0) >> 2])) * Math_fround(.5)) + Math_fround(0.0));
   ImDrawList__AddCircleFilled_28ImVec2_20const__2c_20float_2c_20unsigned_20int_2c_20int_29($13 | 0, $3 + 32 | 0 | 0, Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($4 + 15488 | 0) >> 2]) * Math_fround(.5)) + Math_fround(1.0))), $11 | 0, 12 | 0);
  }
  $6 = Math_fround(Math_fround(HEAPF32[($3 + 48 | 0) >> 2]) + Math_fround(HEAPF32[($4 + 14456 | 0) >> 2]));
  $7 = Math_fround(Math_fround(HEAPF32[($3 + 52 | 0) >> 2]) + Math_fround(HEAPF32[$1 >> 2]));
  $1 = HEAP32[($5 + 672 | 0) >> 2] | 0;
  label$2 : {
   label$3 : {
    if (!$2) {
     break label$3
    }
    HEAPF32[($3 + 28 | 0) >> 2] = $7;
    HEAPF32[($3 + 24 | 0) >> 2] = $6;
    $6 = Math_fround(HEAPF32[($4 + 15488 | 0) >> 2]);
    i64toi32_i32$1 = HEAP32[($3 + 24 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($3 + 28 | 0) >> 2] | 0;
    $129 = i64toi32_i32$1;
    i64toi32_i32$1 = $3;
    HEAP32[($3 + 8 | 0) >> 2] = $129;
    HEAP32[($3 + 12 | 0) >> 2] = i64toi32_i32$0;
    ImGui__RenderArrowDockMenu_28ImDrawList__2c_20ImVec2_2c_20float_2c_20unsigned_20int_29($1 | 0, $3 + 8 | 0 | 0, Math_fround($6), $12 | 0);
    break label$2;
   }
   HEAPF32[($3 + 20 | 0) >> 2] = $7;
   HEAPF32[($3 + 16 | 0) >> 2] = $6;
   $4 = HEAPU8[($5 + 222 | 0) >> 0] | 0;
   i64toi32_i32$0 = HEAP32[($3 + 16 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($3 + 20 | 0) >> 2] | 0;
   $143 = i64toi32_i32$0;
   i64toi32_i32$0 = $3;
   HEAP32[$3 >> 2] = $143;
   HEAP32[($3 + 4 | 0) >> 2] = i64toi32_i32$1;
   ImGui__RenderArrow_28ImDrawList__2c_20ImVec2_2c_20unsigned_20int_2c_20int_2c_20float_29($1 | 0, $3 | 0, $12 | 0, ($4 ? 1 : 3) | 0, Math_fround(Math_fround(1.0)));
  }
  label$4 : {
   if (!(ImGui__IsItemActive_28_29() | 0)) {
    break label$4
   }
   if (!(ImGui__IsMouseDragging_28int_2c_20float_29(0 | 0, Math_fround(Math_fround(-1.0))) | 0)) {
    break label$4
   }
   ImGui__StartMouseMovingWindowOrNode_28ImGuiWindow__2c_20ImGuiDockNode__2c_20bool_29($5 | 0, $2 | 0, 1 | 0);
  }
  __stack_pointer = $3 + 64 | 0;
  return $0 | 0;
 }
 
 function ImGui__Scrollbar_28ImGuiAxis_29($0) {
  $0 = $0 | 0;
  var $2 = 0, i64toi32_i32$0 = Math_fround(0), i64toi32_i32$1 = 0, $1 = 0, $6 = Math_fround(0), $8 = Math_fround(0), $4 = Math_fround(0), $7 = Math_fround(0), $5 = Math_fround(0), $10$hi = 0, $9 = 0, $10 = 0, i64toi32_i32$2 = 0, $11$hi = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $11 = 0, $3 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  $2 = HEAP32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 16116 | 0) >> 2] | 0;
  $3 = ImGuiWindow__GetID_28char_20const__2c_20char_20const__29($2 | 0, ($0 ? 67402 : 67423) | 0, 0 | 0) | 0;
  $4 = Math_fround(HEAPF32[(($2 + (($0 ^ 1 | 0) << 2 | 0) | 0) + 208 | 0) >> 2]);
  $5 = Math_fround(HEAPF32[($2 + 124 | 0) >> 2]);
  label$1 : {
   label$2 : {
    if ($0) {
     break label$2
    }
    $6 = Math_fround(HEAPF32[($2 + 76 | 0) >> 2]);
    $7 = Math_fround(HEAPF32[($2 + 68 | 0) >> 2]);
    $8 = Math_fround(HEAPF32[($2 + 516 | 0) >> 2]);
    HEAPF32[($1 + 24 | 0) >> 2] = Math_fround(HEAPF32[($2 + 524 | 0) >> 2]);
    $6 = Math_fround($7 + $6);
    HEAPF32[($1 + 28 | 0) >> 2] = $6;
    $4 = Math_fround(Math_fround($6 - $5) - $4);
    $7 = $7 >= $4 ? $7 : $4;
    $9 = HEAPU8[($2 + 217 | 0) >> 0] | 0 ? 320 : 448;
    break label$1;
   }
   $7 = Math_fround(HEAPF32[($2 + 520 | 0) >> 2]);
   $6 = Math_fround(HEAPF32[($2 + 72 | 0) >> 2]);
   $8 = Math_fround(HEAPF32[($2 + 64 | 0) >> 2]);
   HEAPF32[($1 + 28 | 0) >> 2] = Math_fround(HEAPF32[($2 + 528 | 0) >> 2]);
   $6 = Math_fround($8 + $6);
   HEAPF32[($1 + 24 | 0) >> 2] = $6;
   $4 = Math_fround(Math_fround($6 - $5) - $4);
   $8 = $8 >= $4 ? $8 : $4;
   $9 = ((HEAP32[($2 + 8 | 0) >> 2] | 0) & 1025 | 0 | 0) == (1 | 0) ? 288 : 256;
   $9 = HEAPU8[($2 + 216 | 0) >> 0] | 0 ? $9 : $9 | 128 | 0;
  }
  HEAPF32[($1 + 20 | 0) >> 2] = $7;
  HEAPF32[($1 + 16 | 0) >> 2] = $8;
  $2 = $2 + ($0 << 2 | 0) | 0;
  $4 = Math_fround(HEAPF32[($2 + 88 | 0) >> 2]);
  $8 = Math_fround(HEAPF32[($2 + 112 | 0) >> 2]);
  $5 = Math_fround(HEAPF32[($2 + 516 | 0) >> 2]);
  $7 = Math_fround(HEAPF32[($2 + 524 | 0) >> 2]);
  label$3 : {
   label$4 : {
    $2 = $2 + 168 | 0;
    $6 = Math_fround(HEAPF32[$2 >> 2]);
    if (!(Math_fround(Math_abs($6)) < Math_fround(9223372036854775808.0))) {
     break label$4
    }
    i64toi32_i32$0 = $6;
    if (Math_fround(Math_abs(i64toi32_i32$0)) >= Math_fround(1.0)) {
     if (i64toi32_i32$0 > Math_fround(0.0)) {
      $17 = ~~Math_fround(Math_min(Math_fround(Math_floor(Math_fround(i64toi32_i32$0 / Math_fround(4294967296.0)))), Math_fround(Math_fround(4294967296.0) - Math_fround(1.0)))) >>> 0
     } else {
      $17 = ~~Math_fround(Math_ceil(Math_fround(Math_fround(i64toi32_i32$0 - Math_fround(~~i64toi32_i32$0 >>> 0 >>> 0)) / Math_fround(4294967296.0)))) >>> 0
     }
     $18 = $17;
    } else {
     $18 = 0
    }
    i64toi32_i32$1 = $18;
    $10 = ~~i64toi32_i32$0 >>> 0;
    $10$hi = i64toi32_i32$1;
    break label$3;
   }
   i64toi32_i32$1 = -2147483648;
   $10 = 0;
   $10$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $10$hi;
  i64toi32_i32$2 = $1;
  HEAP32[($1 + 8 | 0) >> 2] = $10;
  HEAP32[($1 + 12 | 0) >> 2] = i64toi32_i32$1;
  label$5 : {
   label$6 : {
    $5 = Math_fround($7 - $5);
    if (!(Math_fround(Math_abs($5)) < Math_fround(9223372036854775808.0))) {
     break label$6
    }
    i64toi32_i32$0 = $5;
    if (Math_fround(Math_abs(i64toi32_i32$0)) >= Math_fround(1.0)) {
     if (i64toi32_i32$0 > Math_fround(0.0)) {
      $19 = ~~Math_fround(Math_min(Math_fround(Math_floor(Math_fround(i64toi32_i32$0 / Math_fround(4294967296.0)))), Math_fround(Math_fround(4294967296.0) - Math_fround(1.0)))) >>> 0
     } else {
      $19 = ~~Math_fround(Math_ceil(Math_fround(Math_fround(i64toi32_i32$0 - Math_fround(~~i64toi32_i32$0 >>> 0 >>> 0)) / Math_fround(4294967296.0)))) >>> 0
     }
     $20 = $19;
    } else {
     $20 = 0
    }
    i64toi32_i32$1 = $20;
    $10 = ~~i64toi32_i32$0 >>> 0;
    $10$hi = i64toi32_i32$1;
    break label$5;
   }
   i64toi32_i32$1 = -2147483648;
   $10 = 0;
   $10$hi = i64toi32_i32$1;
  }
  label$7 : {
   label$8 : {
    $8 = Math_fround(Math_fround($8 + $8) + $4);
    if (!(Math_fround(Math_abs($8)) < Math_fround(9223372036854775808.0))) {
     break label$8
    }
    i64toi32_i32$0 = $8;
    if (Math_fround(Math_abs(i64toi32_i32$0)) >= Math_fround(1.0)) {
     if (i64toi32_i32$0 > Math_fround(0.0)) {
      $21 = ~~Math_fround(Math_min(Math_fround(Math_floor(Math_fround(i64toi32_i32$0 / Math_fround(4294967296.0)))), Math_fround(Math_fround(4294967296.0) - Math_fround(1.0)))) >>> 0
     } else {
      $21 = ~~Math_fround(Math_ceil(Math_fround(Math_fround(i64toi32_i32$0 - Math_fround(~~i64toi32_i32$0 >>> 0 >>> 0)) / Math_fround(4294967296.0)))) >>> 0
     }
     $22 = $21;
    } else {
     $22 = 0
    }
    i64toi32_i32$1 = $22;
    $11 = ~~i64toi32_i32$0 >>> 0;
    $11$hi = i64toi32_i32$1;
    break label$7;
   }
   i64toi32_i32$1 = -2147483648;
   $11 = 0;
   $11$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $10$hi;
  i64toi32_i32$1 = $11$hi;
  i64toi32_i32$1 = $10$hi;
  i64toi32_i32$2 = $11$hi;
  ImGui__ScrollbarEx_28ImRect_20const__2c_20unsigned_20int_2c_20ImGuiAxis_2c_20long_20long__2c_20long_20long_2c_20long_20long_2c_20int_29($1 + 16 | 0 | 0, $3 | 0, $0 | 0, $1 + 8 | 0 | 0, $10 | 0, i64toi32_i32$1 | 0, $11 | 0, i64toi32_i32$2 | 0, $9 | 0) | 0;
  i64toi32_i32$2 = HEAP32[($1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1 + 12 | 0) >> 2] | 0;
  HEAPF32[$2 >> 2] = Math_fround(+(i64toi32_i32$2 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 | 0));
  __stack_pointer = $1 + 32 | 0;
 }
 
 function ImGui__ScrollbarEx_28ImRect_20const__2c_20unsigned_20int_2c_20ImGuiAxis_2c_20long_20long__2c_20long_20long_2c_20long_20long_2c_20int_29($0, $1, $2, $3, $4, $4$hi, $5, $5$hi, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  $5 = $5 | 0;
  $5$hi = $5$hi | 0;
  $6 = $6 | 0;
  var $11 = Math_fround(0), $7 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $12 = Math_fround(0), i64toi32_i32$3 = 0, $8 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $13 = Math_fround(0), $9 = 0, $21 = Math_fround(0), i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $19 = Math_fround(0), $16 = 0, i64toi32_i32$7 = Math_fround(0), $10 = 0, $17 = 0, $17$hi = 0, $18 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $20 = Math_fround(0), $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $79 = 0, $166 = Math_fround(0), $167 = Math_fround(0), $168 = Math_fround(0), $169 = Math_fround(0), $171 = Math_fround(0), $172 = 0, $172$hi = 0, $173 = 0, $173$hi = 0, $178 = 0, $178$hi = 0, $196 = Math_fround(0), $199 = Math_fround(0), $203 = 0, $203$hi = 0, $22 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $7 = __stack_pointer - 48 | 0;
  __stack_pointer = $7;
  $8 = 0;
  label$1 : {
   $9 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $10 = HEAP32[($9 + 16116 | 0) >> 2] | 0;
   if (HEAPU8[($10 + 224 | 0) >> 0] | 0) {
    break label$1
   }
   $11 = Math_fround(Math_fround(HEAPF32[($0 + 8 | 0) >> 2]) - Math_fround(HEAPF32[$0 >> 2]));
   if ($11 <= Math_fround(0.0)) {
    break label$1
   }
   $12 = Math_fround(Math_fround(HEAPF32[($0 + 12 | 0) >> 2]) - Math_fround(HEAPF32[($0 + 4 | 0) >> 2]));
   if ($12 <= Math_fround(0.0)) {
    break label$1
   }
   $13 = Math_fround(1.0);
   label$2 : {
    if (($2 | 0) != (1 | 0)) {
     break label$2
    }
    $14 = Math_fround(HEAPF32[($9 + 14460 | 0) >> 2]);
    $14 = Math_fround($14 + $14);
    $15 = Math_fround(HEAPF32[($9 + 15488 | 0) >> 2]);
    if (!($12 < Math_fround($14 + $15))) {
     break label$2
    }
    $13 = Math_fround(Math_fround($12 - $15) / $14);
    if ($13 < Math_fround(0.0)) {
     break label$1
    }
    $13 = Math_fround(Math_min($13, Math_fround(1.0)));
    if ($13 <= Math_fround(0.0)) {
     break label$1
    }
   }
   $8 = ($7 + 32 | 0) + 8 | 0;
   i64toi32_i32$2 = $0 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $79 = i64toi32_i32$0;
   i64toi32_i32$0 = $8;
   HEAP32[i64toi32_i32$0 >> 2] = $79;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   label$3 : {
    label$4 : {
     $11 = Math_fround(Math_fround($11 + Math_fround(-2.0)) * Math_fround(.5));
     if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
      break label$4
     }
     $16 = ~~$11;
     break label$3;
    }
    $16 = -2147483648;
   }
   i64toi32_i32$2 = $0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $17 = i64toi32_i32$1;
   $17$hi = i64toi32_i32$0;
   $11 = ($16 | 0) < (0 | 0) ? Math_fround(0.0) : Math_fround(Math_min(Math_fround($16 | 0), Math_fround(3.0)));
   $14 = Math_fround(Math_fround(HEAPF32[$8 >> 2]) - $11);
   HEAPF32[$8 >> 2] = $14;
   label$5 : {
    label$6 : {
     $12 = Math_fround(Math_fround($12 + Math_fround(-2.0)) * Math_fround(.5));
     if (!(Math_fround(Math_abs($12)) < Math_fround(2147483648.0))) {
      break label$6
     }
     $8 = ~~$12;
     break label$5;
    }
    $8 = -2147483648;
   }
   $16 = $0 + 8 | 0;
   $18 = $7 + 44 | 0;
   $12 = ($8 | 0) < (0 | 0) ? Math_fround(0.0) : Math_fround(Math_min(Math_fround($8 | 0), Math_fround(3.0)));
   $15 = Math_fround(Math_fround(HEAPF32[$18 >> 2]) - $12);
   HEAPF32[$18 >> 2] = $15;
   i64toi32_i32$0 = $17$hi;
   i64toi32_i32$1 = $7;
   HEAP32[($7 + 32 | 0) >> 2] = $17;
   HEAP32[($7 + 36 | 0) >> 2] = i64toi32_i32$0;
   $12 = Math_fround($12 + Math_fround(HEAPF32[($7 + 36 | 0) >> 2]));
   HEAPF32[($7 + 36 | 0) >> 2] = $12;
   $19 = Math_fround($11 + Math_fround(HEAPF32[($7 + 32 | 0) >> 2]));
   HEAPF32[($7 + 32 | 0) >> 2] = $19;
   $11 = Math_fround(HEAPF32[($9 + 14520 | 0) >> 2]);
   HEAP8[($7 + 31 | 0) >> 0] = 0;
   HEAP8[($7 + 30 | 0) >> 0] = 0;
   ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($0 | 0, $1 | 0, 0 | 0, 8 | 0) | 0;
   ImGui__ButtonBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20bool__2c_20bool__2c_20int_29($7 + 32 | 0 | 0, $1 | 0, $7 + 30 | 0 | 0, $7 + 31 | 0 | 0, 262144 | 0) | 0;
   $12 = $2 ? Math_fround($15 - $12) : Math_fround($14 - $19);
   $166 = $12;
   $167 = $11;
   $168 = $12;
   $169 = $12;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$1 = $4;
   i64toi32_i32$2 = 0;
   $171 = Math_fround(+(i64toi32_i32$1 >>> 0) + 4294967296.0 * +(i64toi32_i32$0 | 0));
   i64toi32_i32$0 = $5$hi;
   $172 = $5;
   $172$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   $173 = i64toi32_i32$1;
   $173$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$2 = $5;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$3 = $4;
   if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
    $49 = 1
   } else {
    if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $50 = 0
     } else {
      $50 = 1
     }
     $51 = $50;
    } else {
     $51 = 0
    }
    $49 = $51;
   }
   i64toi32_i32$4 = $49;
   i64toi32_i32$2 = $172$hi;
   i64toi32_i32$0 = $173$hi;
   i64toi32_i32$1 = i64toi32_i32$4 ? $172 : $173;
   i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$0;
   $17 = i64toi32_i32$1;
   $17$hi = i64toi32_i32$3;
   $178 = i64toi32_i32$1;
   $178$hi = i64toi32_i32$3;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 1;
   if ((i64toi32_i32$3 | 0) > (i64toi32_i32$1 | 0)) {
    $52 = 1
   } else {
    if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$4 >>> 0 <= i64toi32_i32$0 >>> 0) {
      $53 = 0
     } else {
      $53 = 1
     }
     $54 = $53;
    } else {
     $54 = 0
    }
    $52 = $54;
   }
   i64toi32_i32$2 = $52;
   i64toi32_i32$4 = $178$hi;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$2 ? $178 : 1;
   i64toi32_i32$0 = i64toi32_i32$2 ? i64toi32_i32$4 : i64toi32_i32$3;
   i64toi32_i32$2 = 0;
   $14 = Math_fround($169 * Math_fround($171 / Math_fround(+(i64toi32_i32$1 >>> 0) + 4294967296.0 * +(i64toi32_i32$0 | 0))));
   $14 = $14 < $11 ? $167 : $14 > $12 ? $168 : $14;
   $20 = Math_fround($166 - $14);
   $196 = $20;
   i64toi32_i32$2 = $3;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = 0;
   $199 = Math_fround(+(i64toi32_i32$0 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 | 0));
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$2 = $5;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $4;
   i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
   i64toi32_i32$5 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$0 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
   $4 = i64toi32_i32$4;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   $203 = $4;
   $203$hi = $4$hi;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$1 = $4;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 1;
   if (($4$hi | 0) > (i64toi32_i32$2 | 0)) {
    $55 = 1
   } else {
    if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $56 = 0
     } else {
      $56 = 1
     }
     $57 = $56;
    } else {
     $57 = 0
    }
    $55 = $57;
   }
   i64toi32_i32$0 = $55;
   i64toi32_i32$1 = $203$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = i64toi32_i32$0 ? $203 : 1;
   i64toi32_i32$3 = i64toi32_i32$0 ? i64toi32_i32$1 : i64toi32_i32$5;
   i64toi32_i32$0 = 0;
   $19 = Math_fround(+(i64toi32_i32$2 >>> 0) + 4294967296.0 * +(i64toi32_i32$3 | 0));
   $11 = Math_fround($199 / $19);
   $11 = Math_fround(Math_fround($196 * ($11 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($11, Math_fround(1.0))))) / $12);
   label$7 : {
    if (!($13 >= Math_fround(1.0))) {
     break label$7
    }
    $15 = Math_fround($14 / $12);
    if (!($15 < Math_fround(1.0))) {
     break label$7
    }
    if (!((HEAPU8[($7 + 31 | 0) >> 0] | 0) & 255 | 0)) {
     break label$7
    }
    $8 = $2 << 2 | 0;
    $21 = Math_fround(HEAPF32[(($7 + 32 | 0) + $8 | 0) >> 2]);
    $22 = Math_fround(HEAPF32[(($9 + $8 | 0) + 3520 | 0) >> 2]);
    ImGui__SetHoveredID_28unsigned_20int_29($1 | 0);
    $21 = Math_fround(Math_fround($22 - $21) / $12);
    $21 = $21 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($21, Math_fround(1.0)));
    label$8 : {
     label$9 : {
      label$10 : {
       if (HEAPU8[($9 + 16204 | 0) >> 0] | 0) {
        break label$10
       }
       $11 = Math_fround(HEAPF32[($9 + 23264 | 0) >> 2]);
       break label$9;
      }
      label$11 : {
       label$12 : {
        if ($21 < $11) {
         break label$12
        }
        if (!($21 > Math_fround($15 + $11))) {
         break label$11
        }
       }
       HEAP32[($9 + 23264 | 0) >> 2] = 0;
       $8 = 1;
       $11 = Math_fround(0.0);
       break label$8;
      }
      $11 = Math_fround(Math_fround($21 - $11) + Math_fround($15 * Math_fround(-.5)));
      HEAPF32[($9 + 23264 | 0) >> 2] = $11;
     }
     $8 = 0;
    }
    label$13 : {
     label$14 : {
      $11 = Math_fround(Math_fround(Math_fround($21 - $11) + Math_fround($15 * Math_fround(-.5))) / Math_fround(Math_fround(1.0) - $15));
      $11 = Math_fround(($11 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($11, Math_fround(1.0)))) * $19);
      if (!(Math_fround(Math_abs($11)) < Math_fround(9223372036854775808.0))) {
       break label$14
      }
      i64toi32_i32$7 = $11;
      if (Math_fround(Math_abs($11)) >= Math_fround(1.0)) {
       if (i64toi32_i32$7 > Math_fround(0.0)) {
        $58 = ~~Math_fround(Math_min(Math_fround(Math_floor(Math_fround(i64toi32_i32$7 / Math_fround(4294967296.0)))), Math_fround(Math_fround(4294967296.0) - Math_fround(1.0)))) >>> 0
       } else {
        $58 = ~~Math_fround(Math_ceil(Math_fround(Math_fround(i64toi32_i32$7 - Math_fround(~~i64toi32_i32$7 >>> 0 >>> 0)) / Math_fround(4294967296.0)))) >>> 0
       }
       $59 = $58;
      } else {
       $59 = 0
      }
      i64toi32_i32$3 = $59;
      $4 = ~~i64toi32_i32$7 >>> 0;
      $4$hi = i64toi32_i32$3;
      break label$13;
     }
     i64toi32_i32$3 = -2147483648;
     $4 = 0;
     $4$hi = i64toi32_i32$3;
    }
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$2 = $3;
    HEAP32[i64toi32_i32$2 >> 2] = $4;
    HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$3;
    i64toi32_i32$2 = $4;
    i64toi32_i32$0 = 0;
    $11 = Math_fround(Math_fround(+(i64toi32_i32$2 >>> 0) + 4294967296.0 * +(i64toi32_i32$3 | 0)) / $19);
    $11 = Math_fround(Math_fround($20 * ($11 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(Math_min($11, Math_fround(1.0))))) / $12);
    if (!$8) {
     break label$7
    }
    HEAPF32[($9 + 23264 | 0) >> 2] = Math_fround(Math_fround(Math_fround(-$15) * Math_fround(.5)) + Math_fround($21 - $11));
   }
   $8 = ImGui__GetColorU32_28int_2c_20float_29(14 | 0, Math_fround(Math_fround(1.0))) | 0;
   $1 = ImGui__GetColorU32_28int_2c_20float_29((wasm2js_i32$0 = 17, wasm2js_i32$1 = HEAPU8[($7 + 30 | 0) >> 0] | 0 ? 16 : 15, wasm2js_i32$2 = HEAPU8[($7 + 31 | 0) >> 0] | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0, Math_fround($13)) | 0;
   ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29(HEAP32[($10 + 672 | 0) >> 2] | 0 | 0, $0 | 0, $16 | 0, $8 | 0, Math_fround(Math_fround(HEAPF32[($10 + 120 | 0) >> 2])), $6 | 0);
   $12 = Math_fround(HEAPF32[($7 + 32 | 0) >> 2]);
   label$15 : {
    label$16 : {
     if ($2) {
      break label$16
     }
     $12 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($7 + 40 | 0) >> 2]) - $12) * $11) + $12);
     $11 = Math_fround($14 + $12);
     $13 = Math_fround(HEAPF32[($7 + 44 | 0) >> 2]);
     $15 = Math_fround(HEAPF32[($7 + 36 | 0) >> 2]);
     break label$15;
    }
    $13 = Math_fround(HEAPF32[($7 + 36 | 0) >> 2]);
    $15 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($7 + 44 | 0) >> 2]) - $13) * $11) + $13);
    $13 = Math_fround($14 + $15);
    $11 = Math_fround(HEAPF32[($7 + 40 | 0) >> 2]);
   }
   HEAPF32[($7 + 20 | 0) >> 2] = $13;
   HEAPF32[($7 + 16 | 0) >> 2] = $11;
   HEAPF32[($7 + 12 | 0) >> 2] = $15;
   HEAPF32[($7 + 8 | 0) >> 2] = $12;
   ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29(HEAP32[($10 + 672 | 0) >> 2] | 0 | 0, $7 + 8 | 0 | 0, $7 + 16 | 0 | 0, $1 | 0, Math_fround(Math_fround(HEAPF32[($9 + 14516 | 0) >> 2])), 0 | 0);
   $8 = (HEAPU8[($7 + 31 | 0) >> 0] | 0 | 0) != (0 | 0);
  }
  __stack_pointer = $7 + 48 | 0;
  return $8 | 0;
 }
 
 function ImGui__Checkbox_28char_20const__2c_20bool__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $7 = Math_fround(0), $5 = 0, $8 = Math_fround(0), $13 = Math_fround(0), i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4 = 0, $6 = 0, $11 = 0, $12 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $14 = Math_fround(0), $3 = 0, $15 = 0, $136 = 0, $139 = 0, $216 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2 = __stack_pointer - 112 | 0;
  __stack_pointer = $2;
  $3 = 0;
  $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $5 = HEAP32[($4 + 16116 | 0) >> 2] | 0;
  HEAP8[($5 + 221 | 0) >> 0] = 1;
  label$1 : {
   if (HEAPU8[($5 + 224 | 0) >> 0] | 0) {
    break label$1
   }
   $3 = 0;
   $6 = ImGuiWindow__GetID_28char_20const__2c_20char_20const__29($5 | 0, $0 | 0, 0 | 0) | 0;
   ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($2 + 96 | 0 | 0, $0 | 0, 0 | 0, 1 | 0, Math_fround(Math_fround(-1.0)));
   $7 = Math_fround(0.0);
   $8 = Math_fround(ImGui__GetFrameHeight_28_29());
   $9 = HEAP32[($5 + 296 | 0) >> 2] | 0;
   $10 = (wasm2js_scratch_store_i32(2, $9), wasm2js_scratch_load_f32());
   $11 = HEAP32[($5 + 292 | 0) >> 2] | 0;
   $12 = (wasm2js_scratch_store_i32(2, $11), wasm2js_scratch_load_f32());
   label$2 : {
    $13 = Math_fround(HEAPF32[($2 + 96 | 0) >> 2]);
    if (!($13 > Math_fround(0.0))) {
     break label$2
    }
    $7 = Math_fround($13 + Math_fround(HEAPF32[($4 + 14480 | 0) >> 2]));
   }
   $13 = Math_fround(HEAPF32[($4 + 14460 | 0) >> 2]);
   $14 = Math_fround(Math_fround(Math_fround($13 + $13) + Math_fround(HEAPF32[($2 + 100 | 0) >> 2])) + $10);
   HEAPF32[($2 + 92 | 0) >> 2] = $14;
   HEAP32[($2 + 84 | 0) >> 2] = $9;
   HEAP32[($2 + 80 | 0) >> 2] = $11;
   $7 = Math_fround(Math_fround($8 + $7) + $12);
   HEAPF32[($2 + 88 | 0) >> 2] = $7;
   HEAPF32[($2 + 108 | 0) >> 2] = Math_fround($14 - $10);
   HEAPF32[($2 + 104 | 0) >> 2] = Math_fround($7 - $12);
   ImGui__ItemSize_28ImVec2_20const__2c_20float_29($2 + 104 | 0 | 0, Math_fround($13));
   if (!(ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($2 + 80 | 0 | 0, $6 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   label$3 : {
    $3 = ImGui__ButtonBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20bool__2c_20bool__2c_20int_29($2 + 80 | 0 | 0, $6 | 0, $2 + 79 | 0 | 0, $2 + 78 | 0 | 0, 0 | 0) | 0;
    if (!$3) {
     break label$3
    }
    HEAP8[$1 >> 0] = (HEAPU8[$1 >> 0] | 0) ^ 1 | 0;
    ImGui__MarkItemEdited_28unsigned_20int_29($6 | 0);
   }
   ImGui__RenderNavHighlight_28ImRect_20const__2c_20unsigned_20int_2c_20int_29($2 + 80 | 0 | 0, $6 | 0, 1 | 0);
   HEAP32[($2 + 68 | 0) >> 2] = $9;
   HEAP32[($2 + 64 | 0) >> 2] = $11;
   $14 = Math_fround($8 + $10);
   HEAPF32[($2 + 60 | 0) >> 2] = $14;
   $13 = Math_fround($8 + $12);
   HEAPF32[($2 + 56 | 0) >> 2] = $13;
   $6 = ImGui__GetColorU32_28int_2c_20float_29((wasm2js_i32$0 = HEAPU8[($2 + 78 | 0) >> 0] | 0 ? 9 : 8, wasm2js_i32$1 = 7, wasm2js_i32$2 = HEAPU8[($2 + 79 | 0) >> 0] | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0, Math_fround(Math_fround(1.0))) | 0;
   $7 = Math_fround(HEAPF32[($4 + 14464 | 0) >> 2]);
   i64toi32_i32$0 = HEAP32[($2 + 64 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($2 + 68 | 0) >> 2] | 0;
   $136 = i64toi32_i32$0;
   i64toi32_i32$0 = $2;
   HEAP32[($2 + 24 | 0) >> 2] = $136;
   HEAP32[($2 + 28 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[($2 + 56 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($2 + 60 | 0) >> 2] | 0;
   $139 = i64toi32_i32$1;
   i64toi32_i32$1 = $2;
   HEAP32[($2 + 16 | 0) >> 2] = $139;
   HEAP32[($2 + 20 | 0) >> 2] = i64toi32_i32$0;
   ImGui__RenderFrame_28ImVec2_2c_20ImVec2_2c_20unsigned_20int_2c_20bool_2c_20float_29($2 + 24 | 0 | 0, $2 + 16 | 0 | 0, $6 | 0, 1 | 0, Math_fround($7));
   $6 = ImGui__GetColorU32_28int_2c_20float_29(18 | 0, Math_fround(Math_fround(1.0))) | 0;
   label$4 : {
    label$5 : {
     $9 = (HEAP32[($4 + 18284 | 0) >> 2] | 0) & 64 | 0;
     if (!$9) {
      break label$5
     }
     label$6 : {
      label$7 : {
       $8 = Math_fround($8 / Math_fround(3.5999999046325684));
       if (!(Math_fround(Math_abs($8)) < Math_fround(2147483648.0))) {
        break label$7
       }
       $11 = ~~$8;
       break label$6;
      }
      $11 = -2147483648;
     }
     $5 = HEAP32[($5 + 672 | 0) >> 2] | 0;
     $8 = Math_fround(Math_max(Math_fround($11 | 0), Math_fround(1.0)));
     HEAPF32[($2 + 108 | 0) >> 2] = Math_fround($8 + $10);
     HEAPF32[($2 + 104 | 0) >> 2] = Math_fround($8 + $12);
     HEAPF32[($2 + 52 | 0) >> 2] = Math_fround($14 - $8);
     HEAPF32[($2 + 48 | 0) >> 2] = Math_fround($13 - $8);
     ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29($5 | 0, $2 + 104 | 0 | 0, $2 + 48 | 0 | 0, $6 | 0, Math_fround(Math_fround(HEAPF32[($4 + 14464 | 0) >> 2])), 0 | 0);
     break label$4;
    }
    if (!(HEAPU8[$1 >> 0] | 0)) {
     break label$4
    }
    label$8 : {
     label$9 : {
      $7 = Math_fround($8 / Math_fround(6.0));
      if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
       break label$9
      }
      $11 = ~~$7;
      break label$8;
     }
     $11 = -2147483648;
    }
    $5 = HEAP32[($5 + 672 | 0) >> 2] | 0;
    $7 = Math_fround(Math_max(Math_fround($11 | 0), Math_fround(1.0)));
    HEAPF32[($2 + 44 | 0) >> 2] = Math_fround($7 + $10);
    HEAPF32[($2 + 40 | 0) >> 2] = Math_fround($7 + $12);
    i64toi32_i32$0 = HEAP32[($2 + 40 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($2 + 44 | 0) >> 2] | 0;
    $216 = i64toi32_i32$0;
    i64toi32_i32$0 = $2;
    HEAP32[($2 + 8 | 0) >> 2] = $216;
    HEAP32[($2 + 12 | 0) >> 2] = i64toi32_i32$1;
    ImGui__RenderCheckMark_28ImDrawList__2c_20ImVec2_2c_20unsigned_20int_2c_20float_29($5 | 0, $2 + 8 | 0 | 0, $6 | 0, Math_fround(Math_fround($8 - Math_fround($7 + $7))));
   }
   $12 = Math_fround(HEAPF32[($4 + 14480 | 0) >> 2]);
   HEAPF32[($2 + 108 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4 + 14460 | 0) >> 2]) + $10);
   HEAPF32[($2 + 104 | 0) >> 2] = Math_fround($13 + $12);
   label$10 : {
    if (!(HEAPU8[($4 + 23484 | 0) >> 0] | 0)) {
     break label$10
    }
    $5 = 67358;
    label$11 : {
     if ($9) {
      break label$11
     }
     $5 = HEAPU8[$1 >> 0] | 0 ? 67362 : 67384;
    }
    ImGui__LogRenderedText_28ImVec2_20const__2c_20char_20const__2c_20char_20const__29($2 + 104 | 0 | 0, $5 | 0, 0 | 0);
   }
   if (!(Math_fround(HEAPF32[($2 + 96 | 0) >> 2]) > Math_fround(0.0))) {
    break label$1
   }
   i64toi32_i32$1 = HEAP32[($2 + 104 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($2 + 108 | 0) >> 2] | 0;
   $15 = i64toi32_i32$1;
   i64toi32_i32$1 = $2;
   HEAP32[($2 + 32 | 0) >> 2] = $15;
   HEAP32[($2 + 36 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $2;
   HEAP32[$2 >> 2] = $15;
   HEAP32[($2 + 4 | 0) >> 2] = i64toi32_i32$0;
   ImGui__RenderText_28ImVec2_2c_20char_20const__2c_20char_20const__2c_20bool_29($2 | 0, $0 | 0, 0 | 0, 1 | 0);
  }
  __stack_pointer = $2 + 112 | 0;
  return $3 | 0;
 }
 
 function ImGui__SplitterBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20ImGuiAxis_2c_20float__2c_20float__2c_20float_2c_20float_2c_20float_2c_20float_2c_20unsigned_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = Math_fround($5);
  $6 = Math_fround($6);
  $7 = Math_fround($7);
  $8 = Math_fround($8);
  $9 = $9 | 0;
  var $10 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = Math_fround(0), $13 = 0, $33 = 0, $57 = 0, $98 = 0, $101 = 0, $115 = 0, $118 = 0, $130 = 0, $133 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_f32$1 = Math_fround(0), wasm2js_i32$0 = 0;
  $10 = __stack_pointer - 48 | 0;
  __stack_pointer = $10;
  $11 = 0;
  $12 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $13 = HEAP32[($12 + 16116 | 0) >> 2] | 0;
  label$1 : {
   if (!(ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($0 | 0, $1 | 0, 0 | 0, 8 | 0) | 0)) {
    break label$1
   }
   $11 = ($10 + 24 | 0) + 8 | 0;
   i64toi32_i32$2 = $0 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $33 = i64toi32_i32$0;
   i64toi32_i32$0 = $11;
   HEAP32[i64toi32_i32$0 >> 2] = $33;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $15 = ($2 | 0) == (1 | 0);
   $16 = $15 ? Math_fround(0.0) : $7;
   HEAPF32[$11 >> 2] = Math_fround($16 + Math_fround(HEAPF32[$11 >> 2]));
   $11 = $10 + 36 | 0;
   $7 = $15 ? $7 : Math_fround(0.0);
   HEAPF32[$11 >> 2] = Math_fround($7 + Math_fround(HEAPF32[$11 >> 2]));
   $57 = i64toi32_i32$1;
   i64toi32_i32$1 = $10;
   HEAP32[($10 + 24 | 0) >> 2] = $57;
   HEAP32[($10 + 28 | 0) >> 2] = i64toi32_i32$0;
   HEAPF32[($10 + 24 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10 + 24 | 0) >> 2]) - $16);
   HEAPF32[($10 + 28 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10 + 28 | 0) >> 2]) - $7);
   ImGui__ButtonBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20bool__2c_20bool__2c_20int_29($10 + 24 | 0 | 0, $1 | 0, $10 + 47 | 0 | 0, $10 + 46 | 0 | 0, 6144 | 0) | 0;
   label$2 : {
    if (!(HEAPU8[($10 + 47 | 0) >> 0] | 0)) {
     break label$2
    }
    $11 = $12 + 18288 | 0;
    HEAP32[$11 >> 2] = HEAP32[$11 >> 2] | 0 | 1 | 0;
   }
   label$3 : {
    if ((HEAP32[($12 + 16192 | 0) >> 2] | 0 | 0) == ($1 | 0)) {
     break label$3
    }
    ImGui__SetItemAllowOverlap_28_29();
   }
   label$4 : {
    label$5 : {
     if (HEAPU8[($10 + 46 | 0) >> 0] | 0) {
      break label$5
     }
     label$6 : {
      if (HEAPU8[($10 + 47 | 0) >> 0] | 0) {
       break label$6
      }
      i64toi32_i32$2 = $0 + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $98 = i64toi32_i32$0;
      i64toi32_i32$0 = ($10 + 8 | 0) + 8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $98;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $101 = i64toi32_i32$1;
      i64toi32_i32$1 = $10;
      HEAP32[($10 + 8 | 0) >> 2] = $101;
      HEAP32[($10 + 12 | 0) >> 2] = i64toi32_i32$0;
      break label$4;
     }
     label$7 : {
      if ((HEAP32[($12 + 16176 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
       break label$7
      }
      if (Math_fround(HEAPF32[($12 + 16184 | 0) >> 2]) >= $8) {
       break label$5
      }
     }
     i64toi32_i32$2 = $0 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $115 = i64toi32_i32$0;
     i64toi32_i32$0 = ($10 + 8 | 0) + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $115;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $118 = i64toi32_i32$1;
     i64toi32_i32$1 = $10;
     HEAP32[($10 + 8 | 0) >> 2] = $118;
     HEAP32[($10 + 12 | 0) >> 2] = i64toi32_i32$0;
     break label$4;
    }
    $15 = ($2 | 0) == (1 | 0);
    ImGui__SetMouseCursor_28int_29(($15 ? 3 : 4) | 0);
    $11 = HEAPU8[($10 + 46 | 0) >> 0] | 0;
    i64toi32_i32$2 = $0 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $130 = i64toi32_i32$0;
    i64toi32_i32$0 = ($10 + 8 | 0) + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $130;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $133 = i64toi32_i32$1;
    i64toi32_i32$1 = $10;
    HEAP32[($10 + 8 | 0) >> 2] = $133;
    HEAP32[($10 + 12 | 0) >> 2] = i64toi32_i32$0;
    if (!$11) {
     break label$4
    }
    $7 = Math_fround(Math_fround(HEAPF32[$4 >> 2]) - $6);
    $7 = $7 <= Math_fround(0.0) ? Math_fround(0.0) : $7;
    $16 = Math_fround(HEAPF32[$3 >> 2]);
    $6 = Math_fround($16 - $5);
    $6 = Math_fround(-($6 <= Math_fround(0.0) ? Math_fround(0.0) : $6));
    $5 = (wasm2js_f32$0 = Math_fround(Math_fround(Math_fround(HEAPF32[($12 + 3524 | 0) >> 2]) - Math_fround(HEAPF32[($12 + 16216 | 0) >> 2])) - Math_fround(HEAPF32[($10 + 28 | 0) >> 2])), wasm2js_f32$1 = Math_fround(Math_fround(Math_fround(HEAPF32[($12 + 3520 | 0) >> 2]) - Math_fround(HEAPF32[($12 + 16212 | 0) >> 2])) - Math_fround(HEAPF32[($10 + 24 | 0) >> 2])), wasm2js_i32$0 = $15, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
    $6 = $5 < $6 ? $6 : $5;
    $7 = $6 > $7 ? $7 : $6;
    if ($7 == Math_fround(0.0)) {
     break label$4
    }
    HEAPF32[$3 >> 2] = Math_fround($16 + $7);
    HEAPF32[$4 >> 2] = Math_fround(Math_fround(HEAPF32[$4 >> 2]) - $7);
    $0 = $10 + 20 | 0;
    $6 = $2 ? $7 : Math_fround(0.0);
    HEAPF32[$0 >> 2] = Math_fround($6 + Math_fround(HEAPF32[$0 >> 2]));
    $7 = $2 ? Math_fround(0.0) : $7;
    HEAPF32[($10 + 8 | 0) >> 2] = Math_fround($7 + Math_fround(HEAPF32[($10 + 8 | 0) >> 2]));
    HEAPF32[($10 + 12 | 0) >> 2] = Math_fround($6 + Math_fround(HEAPF32[($10 + 12 | 0) >> 2]));
    HEAPF32[($10 + 16 | 0) >> 2] = Math_fround($7 + Math_fround(HEAPF32[($10 + 16 | 0) >> 2]));
    ImGui__MarkItemEdited_28unsigned_20int_29($1 | 0);
   }
   label$8 : {
    if ($9 >>> 0 < 16777216 >>> 0) {
     break label$8
    }
    ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29(HEAP32[($13 + 672 | 0) >> 2] | 0 | 0, $10 + 8 | 0 | 0, $10 + 16 | 0 | 0, $9 | 0, Math_fround(Math_fround(0.0)), 0 | 0);
   }
   $0 = 29;
   label$9 : {
    if (HEAPU8[($10 + 46 | 0) >> 0] | 0) {
     break label$9
    }
    label$10 : {
     if (HEAPU8[($10 + 47 | 0) >> 0] | 0) {
      break label$10
     }
     $0 = 27;
     break label$9;
    }
    $0 = Math_fround(HEAPF32[($12 + 16184 | 0) >> 2]) >= $8 ? 28 : 27;
   }
   $0 = ImGui__GetColorU32_28int_2c_20float_29($0 | 0, Math_fround(Math_fround(1.0))) | 0;
   ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29(HEAP32[($13 + 672 | 0) >> 2] | 0 | 0, $10 + 8 | 0 | 0, $10 + 16 | 0 | 0, $0 | 0, Math_fround(Math_fround(0.0)), 0 | 0);
   $11 = (HEAPU8[($10 + 46 | 0) >> 0] | 0 | 0) != (0 | 0);
  }
  __stack_pointer = $10 + 48 | 0;
  return $11 | 0;
 }
 
 function ImGui__ShrinkWidths_28ImGuiShrinkWidthItem__2c_20int_2c_20float_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  var $3 = Math_fround(0), $9 = 0, $4 = 0, $5 = Math_fround(0), $12 = 0, $11 = 0, $8 = 0, $6 = Math_fround(0), $7 = 0, $13 = Math_fround(0), $10 = 0, $252 = Math_fround(0);
  label$1 : {
   label$2 : {
    switch ($1 | 0) {
    case 1:
     $3 = Math_fround(HEAPF32[($0 + 4 | 0) >> 2]);
     if (!($3 >= Math_fround(0.0))) {
      break label$1
     }
     $3 = Math_fround($3 - $2);
     HEAPF32[($0 + 4 | 0) >> 2] = $3 >= Math_fround(1.0) ? $3 : Math_fround(1.0);
     break label$1;
    case 0:
     break label$1;
    default:
     break label$2;
    };
   }
   qsort($0 | 0, $1 | 0, 12 | 0, 27 | 0);
   label$4 : {
    if (!($2 > Math_fround(0.0))) {
     break label$4
    }
    if (($1 | 0) < (2 | 0)) {
     break label$4
    }
    $4 = 1;
    label$5 : while (1) {
     $3 = Math_fround(HEAPF32[($0 + 4 | 0) >> 2]);
     label$6 : {
      label$7 : {
       if (($4 | 0) >= ($1 | 0)) {
        break label$7
       }
       label$8 : {
        label$9 : while (1) {
         $5 = Math_fround(HEAPF32[(($0 + Math_imul($4, 12) | 0) + 4 | 0) >> 2]);
         if (!($3 <= $5)) {
          break label$8
         }
         $4 = $4 + 1 | 0;
         if (($4 | 0) != ($1 | 0)) {
          continue label$9
         }
         break label$9;
        };
        $4 = $1;
        break label$7;
       }
       if (!($5 >= Math_fround(0.0))) {
        break label$7
       }
       $3 = Math_fround($3 - $5);
       break label$6;
      }
      $3 = Math_fround($3 + Math_fround(-1.0));
     }
     if ($3 <= Math_fround(0.0)) {
      break label$4
     }
     $5 = Math_fround($4 | 0);
     $6 = Math_fround($2 / $5);
     $3 = $6 < $3 ? $6 : $3;
     label$10 : {
      if (($4 | 0) < (1 | 0)) {
       break label$10
      }
      $7 = $4 & 3 | 0;
      $8 = 0;
      $9 = 0;
      label$11 : {
       if ($4 >>> 0 < 4 >>> 0) {
        break label$11
       }
       $10 = $4 & -4 | 0;
       $9 = 0;
       $11 = 0;
       label$12 : while (1) {
        $12 = $0 + Math_imul($9, 12) | 0;
        HEAPF32[($12 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($12 + 4 | 0) >> 2]) - $3);
        $12 = $0 + Math_imul($9 | 1 | 0, 12) | 0;
        HEAPF32[($12 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($12 + 4 | 0) >> 2]) - $3);
        $12 = $0 + Math_imul($9 | 2 | 0, 12) | 0;
        HEAPF32[($12 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($12 + 4 | 0) >> 2]) - $3);
        $12 = $0 + Math_imul($9 | 3 | 0, 12) | 0;
        HEAPF32[($12 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($12 + 4 | 0) >> 2]) - $3);
        $9 = $9 + 4 | 0;
        $11 = $11 + 4 | 0;
        if (($11 | 0) != ($10 | 0)) {
         continue label$12
        }
        break label$12;
       };
      }
      if (!$7) {
       break label$10
      }
      label$13 : while (1) {
       $11 = $0 + Math_imul($9, 12) | 0;
       HEAPF32[($11 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($11 + 4 | 0) >> 2]) - $3);
       $9 = $9 + 1 | 0;
       $8 = $8 + 1 | 0;
       if (($8 | 0) != ($7 | 0)) {
        continue label$13
       }
       break label$13;
      };
     }
     $2 = Math_fround($2 - Math_fround($3 * $5));
     if (!($2 > Math_fround(0.0))) {
      break label$4
     }
     if (($4 | 0) < ($1 | 0)) {
      continue label$5
     }
     break label$5;
    };
   }
   if (($1 | 0) < (1 | 0)) {
    break label$1
   }
   $7 = $1 & 1 | 0;
   label$14 : {
    label$15 : {
     if (($1 | 0) != (1 | 0)) {
      break label$15
     }
     $9 = 0;
     $3 = Math_fround(0.0);
     break label$14;
    }
    $12 = $1 & -2 | 0;
    $9 = 0;
    $3 = Math_fround(0.0);
    $4 = 0;
    label$16 : while (1) {
     label$17 : {
      label$18 : {
       $8 = $0 + Math_imul($9, 12) | 0;
       $5 = Math_fround(HEAPF32[($8 + 4 | 0) >> 2]);
       if (!(Math_fround(Math_abs($5)) < Math_fround(2147483648.0))) {
        break label$18
       }
       $11 = ~~$5;
       break label$17;
      }
      $11 = -2147483648;
     }
     $6 = Math_fround($11 | 0);
     HEAPF32[($8 + 4 | 0) >> 2] = $6;
     label$19 : {
      label$20 : {
       $8 = $0 + Math_imul($9 | 1 | 0, 12) | 0;
       $2 = Math_fround(HEAPF32[($8 + 4 | 0) >> 2]);
       if (!(Math_fround(Math_abs($2)) < Math_fround(2147483648.0))) {
        break label$20
       }
       $11 = ~~$2;
       break label$19;
      }
      $11 = -2147483648;
     }
     $13 = Math_fround($11 | 0);
     HEAPF32[($8 + 4 | 0) >> 2] = $13;
     $3 = Math_fround(Math_fround($3 + Math_fround($5 - $6)) + Math_fround($2 - $13));
     $9 = $9 + 2 | 0;
     $4 = $4 + 2 | 0;
     if (($4 | 0) != ($12 | 0)) {
      continue label$16
     }
     break label$16;
    };
   }
   label$21 : {
    if (!$7) {
     break label$21
    }
    label$22 : {
     label$23 : {
      $4 = $0 + Math_imul($9, 12) | 0;
      $5 = Math_fround(HEAPF32[($4 + 4 | 0) >> 2]);
      if (!(Math_fround(Math_abs($5)) < Math_fround(2147483648.0))) {
       break label$23
      }
      $9 = ~~$5;
      break label$22;
     }
     $9 = -2147483648;
    }
    $2 = Math_fround($9 | 0);
    HEAPF32[($4 + 4 | 0) >> 2] = $2;
    $3 = Math_fround($3 + Math_fround($5 - $2));
   }
   if (!($3 > Math_fround(0.0))) {
    break label$1
   }
   label$24 : while (1) {
    $9 = 0;
    label$25 : {
     if (!($3 > Math_fround(0.0))) {
      break label$25
     }
     label$26 : while (1) {
      $4 = $0 + Math_imul($9, 12) | 0;
      $5 = Math_fround(HEAPF32[($4 + 4 | 0) >> 2]);
      $252 = $5;
      $5 = Math_fround(Math_fround(HEAPF32[($4 + 8 | 0) >> 2]) - $5);
      $5 = $5 < Math_fround(1.0) ? $5 : Math_fround(1.0);
      HEAPF32[($4 + 4 | 0) >> 2] = Math_fround($252 + $5);
      $3 = Math_fround($3 - $5);
      $9 = $9 + 1 | 0;
      if ($9 >>> 0 >= $1 >>> 0) {
       break label$25
      }
      if ($3 > Math_fround(0.0)) {
       continue label$26
      }
      break label$26;
     };
    }
    if ($3 > Math_fround(0.0)) {
     continue label$24
    }
    break label$24;
   };
  }
 }
 
 function ShrinkWidthItemComparer_28void_20const__2c_20void_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = Math_fround(0);
  label$1 : {
   label$2 : {
    $2 = Math_fround(Math_fround(HEAPF32[($1 + 4 | 0) >> 2]) - Math_fround(HEAPF32[($0 + 4 | 0) >> 2]));
    if (!(Math_fround(Math_abs($2)) < Math_fround(2147483648.0))) {
     break label$2
    }
    $3 = ~~$2;
    break label$1;
   }
   $3 = -2147483648;
  }
  label$3 : {
   if ($3) {
    break label$3
   }
   $3 = (HEAP32[$1 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) | 0;
  }
  return $3 | 0;
 }
 
 function ImGui__BeginCombo_28char_20const__2c_20char_20const__2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $5 = 0, $8 = Math_fround(0), $4 = 0, $15 = Math_fround(0), $13 = Math_fround(0), i64toi32_i32$1 = 0, $6 = 0, $9 = 0, $14 = 0, $10 = 0, $16 = Math_fround(0), i64toi32_i32$4 = 0, $20 = 0, $11 = Math_fround(0), $12 = 0, $14$hi = 0, $19 = 0, $17 = Math_fround(0), $18 = Math_fround(0), i64toi32_i32$3 = 0, $34 = 0, $21 = 0, $7 = 0, $108 = 0, $109 = Math_fround(0), $235 = 0, $21$hi = 0, $267 = 0, $328 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3 = __stack_pointer - 144 | 0;
  __stack_pointer = $3;
  $4 = 0;
  $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $6 = HEAP32[($5 + 16116 | 0) >> 2] | 0;
  HEAP8[($6 + 221 | 0) >> 0] = 1;
  $7 = HEAP32[($5 + 18340 | 0) >> 2] | 0;
  HEAP32[($5 + 18340 | 0) >> 2] = 0;
  label$1 : {
   if (HEAPU8[($6 + 224 | 0) >> 0] | 0) {
    break label$1
   }
   $8 = Math_fround(0.0);
   $9 = ImGuiWindow__GetID_28char_20const__2c_20char_20const__29($6 | 0, $0 | 0, 0 | 0) | 0;
   label$2 : {
    $10 = $2 & 32 | 0;
    if ($10) {
     break label$2
    }
    $8 = Math_fround(ImGui__GetFrameHeight_28_29());
   }
   ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($3 + 128 | 0 | 0, $0 | 0, 0 | 0, 1 | 0, Math_fround(Math_fround(-1.0)));
   $11 = $8;
   label$3 : {
    $12 = $2 & 64 | 0;
    if ($12) {
     break label$3
    }
    $11 = Math_fround(ImGui__CalcItemWidth_28_29());
   }
   $4 = $6 + 292 | 0;
   $13 = Math_fround(HEAPF32[$4 >> 2]);
   i64toi32_i32$2 = $4;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $14 = i64toi32_i32$0;
   $14$hi = i64toi32_i32$1;
   $15 = Math_fround(HEAPF32[($5 + 14460 | 0) >> 2]);
   $16 = Math_fround(Math_fround(Math_fround($15 + $15) + Math_fround(HEAPF32[($3 + 132 | 0) >> 2])) + Math_fround(HEAPF32[($6 + 296 | 0) >> 2]));
   HEAPF32[(($3 + 112 | 0) + 12 | 0) >> 2] = $16;
   i64toi32_i32$0 = $3;
   HEAP32[($3 + 112 | 0) >> 2] = $14;
   HEAP32[($3 + 116 | 0) >> 2] = i64toi32_i32$1;
   $17 = Math_fround($11 + $13);
   HEAPF32[($3 + 120 | 0) >> 2] = $17;
   $13 = Math_fround(0.0);
   label$4 : {
    $18 = Math_fround(HEAPF32[($3 + 128 | 0) >> 2]);
    if (!($18 > Math_fround(0.0))) {
     break label$4
    }
    $13 = Math_fround($18 + Math_fround(HEAPF32[($5 + 14480 | 0) >> 2]));
   }
   $16 = Math_fround($16 + Math_fround(0.0));
   HEAPF32[(($3 + 96 | 0) + 12 | 0) >> 2] = $16;
   $13 = Math_fround($13 + $17);
   HEAPF32[($3 + 104 | 0) >> 2] = $13;
   i64toi32_i32$1 = $14$hi;
   i64toi32_i32$0 = $3;
   HEAP32[($3 + 96 | 0) >> 2] = $14;
   HEAP32[($3 + 100 | 0) >> 2] = i64toi32_i32$1;
   HEAPF32[($3 + 136 | 0) >> 2] = Math_fround($13 - (wasm2js_scratch_store_i32(2, $14), wasm2js_scratch_load_f32()));
   $108 = $3;
   $109 = $16;
   i64toi32_i32$2 = $14;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $34 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $34 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   HEAPF32[($108 + 140 | 0) >> 2] = Math_fround($109 - (wasm2js_scratch_store_i32(2, $34), wasm2js_scratch_load_f32()));
   ImGui__ItemSize_28ImVec2_20const__2c_20float_29($3 + 136 | 0 | 0, Math_fround($15));
   $4 = 0;
   if (!(ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($3 + 96 | 0 | 0, $9 | 0, $3 + 112 | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $4 = ImGui__ButtonBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20bool__2c_20bool__2c_20int_29($3 + 112 | 0 | 0, $9 | 0, $3 + 95 | 0 | 0, $3 + 94 | 0 | 0, 0 | 0) | 0;
   label$5 : {
    $19 = ImHashStr_28char_20const__2c_20unsigned_20long_2c_20unsigned_20int_29(66173 | 0, 0 | 0, $9 | 0) | 0;
    $20 = ImGui__IsPopupOpen_28unsigned_20int_2c_20int_29($19 | 0, 0 | 0) | 0;
    if ($20) {
     break label$5
    }
    if (!$4) {
     break label$5
    }
    ImGui__OpenPopupEx_28unsigned_20int_2c_20int_29($19 | 0, 0 | 0);
    $20 = 1;
   }
   $4 = ImGui__GetColorU32_28int_2c_20float_29((HEAPU8[($3 + 95 | 0) >> 0] | 0 ? 8 : 7) | 0, Math_fround(Math_fround(1.0))) | 0;
   $15 = Math_fround(HEAPF32[($3 + 112 | 0) >> 2]);
   $13 = Math_fround(HEAPF32[($3 + 120 | 0) >> 2]);
   ImGui__RenderNavHighlight_28ImRect_20const__2c_20unsigned_20int_2c_20int_29($3 + 112 | 0 | 0, $9 | 0, 1 | 0);
   $13 = Math_fround($13 - $8);
   $15 = $15 >= $13 ? $15 : $13;
   label$6 : {
    if ($12) {
     break label$6
    }
    $9 = HEAP32[($6 + 672 | 0) >> 2] | 0;
    HEAPF32[($3 + 140 | 0) >> 2] = Math_fround(HEAPF32[($3 + 124 | 0) >> 2]);
    HEAPF32[($3 + 136 | 0) >> 2] = $15;
    ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29($9 | 0, $3 + 112 | 0 | 0, $3 + 136 | 0 | 0, $4 | 0, Math_fround(Math_fround(HEAPF32[($5 + 14464 | 0) >> 2])), ($10 ? 240 : 80) | 0);
   }
   label$7 : {
    if ($10) {
     break label$7
    }
    $4 = ImGui__GetColorU32_28int_2c_20float_29((wasm2js_i32$0 = 22, wasm2js_i32$1 = (HEAPU8[($3 + 95 | 0) >> 0] | 0) & 1 | 0 ? 22 : 21, wasm2js_i32$2 = $20, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0, Math_fround(Math_fround(1.0))) | 0;
    $10 = ImGui__GetColorU32_28int_2c_20float_29(0 | 0, Math_fround(Math_fround(1.0))) | 0;
    $9 = HEAP32[($6 + 672 | 0) >> 2] | 0;
    HEAPF32[($3 + 140 | 0) >> 2] = Math_fround(HEAPF32[($3 + 116 | 0) >> 2]);
    HEAPF32[($3 + 136 | 0) >> 2] = $15;
    ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29($9 | 0, $3 + 136 | 0 | 0, $3 + 120 | 0 | 0, $4 | 0, Math_fround(Math_fround(HEAPF32[($5 + 14464 | 0) >> 2])), ($11 <= $8 ? 240 : 160) | 0);
    if (!(Math_fround(Math_fround($8 + $15) - Math_fround(HEAPF32[($5 + 14456 | 0) >> 2])) <= Math_fround(HEAPF32[($3 + 120 | 0) >> 2]))) {
     break label$7
    }
    $6 = HEAP32[($6 + 672 | 0) >> 2] | 0;
    $8 = Math_fround(HEAPF32[($5 + 14460 | 0) >> 2]);
    HEAPF32[($3 + 84 | 0) >> 2] = Math_fround($8 + Math_fround(HEAPF32[($3 + 116 | 0) >> 2]));
    HEAPF32[($3 + 80 | 0) >> 2] = Math_fround($15 + $8);
    i64toi32_i32$1 = $3;
    i64toi32_i32$0 = HEAP32[($3 + 80 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($3 + 84 | 0) >> 2] | 0;
    $235 = i64toi32_i32$0;
    i64toi32_i32$0 = $3;
    HEAP32[($3 + 32 | 0) >> 2] = $235;
    HEAP32[($3 + 36 | 0) >> 2] = i64toi32_i32$2;
    ImGui__RenderArrow_28ImDrawList__2c_20ImVec2_2c_20unsigned_20int_2c_20int_2c_20float_29($6 | 0, $3 + 32 | 0 | 0, $10 | 0, 3 | 0, Math_fround(Math_fround(1.0)));
   }
   i64toi32_i32$1 = $3;
   i64toi32_i32$2 = HEAP32[($3 + 112 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($3 + 116 | 0) >> 2] | 0;
   $14 = i64toi32_i32$2;
   $14$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $3;
   HEAP32[($3 + 72 | 0) >> 2] = $14;
   HEAP32[($3 + 76 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $3;
   i64toi32_i32$0 = HEAP32[($3 + 120 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[($3 + 124 | 0) >> 2] | 0;
   $21 = i64toi32_i32$0;
   $21$hi = i64toi32_i32$2;
   i64toi32_i32$0 = $3;
   HEAP32[($3 + 64 | 0) >> 2] = $21;
   HEAP32[($3 + 68 | 0) >> 2] = i64toi32_i32$2;
   $8 = Math_fround(HEAPF32[($5 + 14464 | 0) >> 2]);
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$0 = $3;
   HEAP32[($3 + 24 | 0) >> 2] = $14;
   HEAP32[($3 + 28 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$2 = $21$hi;
   i64toi32_i32$0 = $3;
   HEAP32[($3 + 16 | 0) >> 2] = $21;
   HEAP32[($3 + 20 | 0) >> 2] = i64toi32_i32$2;
   ImGui__RenderFrameBorder_28ImVec2_2c_20ImVec2_2c_20float_29($3 + 24 | 0 | 0, $3 + 16 | 0 | 0, Math_fround($8));
   label$8 : {
    label$9 : {
     if (!($2 & 1048576 | 0)) {
      break label$9
     }
     $8 = Math_fround(HEAPF32[($3 + 124 | 0) >> 2]);
     i64toi32_i32$1 = $3;
     i64toi32_i32$2 = HEAP32[($3 + 112 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($3 + 116 | 0) >> 2] | 0;
     $267 = i64toi32_i32$2;
     i64toi32_i32$2 = $5;
     HEAP32[(i64toi32_i32$2 + 23196 | 0) >> 2] = $267;
     HEAP32[(i64toi32_i32$2 + 23200 | 0) >> 2] = i64toi32_i32$0;
     HEAPF32[(i64toi32_i32$2 + 23208 | 0) >> 2] = $8;
     HEAPF32[(i64toi32_i32$2 + 23204 | 0) >> 2] = $15;
     break label$8;
    }
    if (!$1) {
     break label$8
    }
    if ($12) {
     break label$8
    }
    label$10 : {
     if (!(HEAPU8[($5 + 23484 | 0) >> 0] | 0)) {
      break label$10
     }
     ImGui__LogSetNextTextDecoration_28char_20const__2c_20char_20const__29(65538 | 0, 65536 | 0);
    }
    $8 = Math_fround(HEAPF32[($5 + 14460 | 0) >> 2]);
    HEAPF32[($3 + 136 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3 + 112 | 0) >> 2]) + Math_fround(HEAPF32[($5 + 14456 | 0) >> 2]));
    HEAPF32[($3 + 140 | 0) >> 2] = Math_fround($8 + Math_fround(HEAPF32[($3 + 116 | 0) >> 2]));
    HEAPF32[($3 + 60 | 0) >> 2] = Math_fround(HEAPF32[($3 + 124 | 0) >> 2]);
    HEAPF32[($3 + 56 | 0) >> 2] = $15;
    i64toi32_i32$2 = $3;
    i64toi32_i32$0 = 0;
    HEAP32[($3 + 48 | 0) >> 2] = 0;
    HEAP32[($3 + 52 | 0) >> 2] = i64toi32_i32$0;
    ImGui__RenderTextClipped_28ImVec2_20const__2c_20ImVec2_20const__2c_20char_20const__2c_20char_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImRect_20const__29($3 + 136 | 0 | 0, $3 + 56 | 0 | 0, $1 | 0, 0 | 0, 0 | 0, $3 + 48 | 0 | 0, 0 | 0);
   }
   label$11 : {
    if (!(Math_fround(HEAPF32[($3 + 128 | 0) >> 2]) > Math_fround(0.0))) {
     break label$11
    }
    $8 = Math_fround(HEAPF32[($5 + 14480 | 0) >> 2]);
    HEAPF32[($3 + 44 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3 + 116 | 0) >> 2]) + Math_fround(HEAPF32[($5 + 14460 | 0) >> 2]));
    HEAPF32[($3 + 40 | 0) >> 2] = Math_fround($8 + Math_fround(HEAPF32[($3 + 120 | 0) >> 2]));
    i64toi32_i32$1 = $3;
    i64toi32_i32$0 = HEAP32[($3 + 40 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($3 + 44 | 0) >> 2] | 0;
    $328 = i64toi32_i32$0;
    i64toi32_i32$0 = $3;
    HEAP32[($3 + 8 | 0) >> 2] = $328;
    HEAP32[($3 + 12 | 0) >> 2] = i64toi32_i32$2;
    ImGui__RenderText_28ImVec2_2c_20char_20const__2c_20char_20const__2c_20bool_29($3 + 8 | 0 | 0, $0 | 0, 0 | 0, 1 | 0);
   }
   $4 = 0;
   if (!$20) {
    break label$1
   }
   HEAP32[($5 + 18340 | 0) >> 2] = $7;
   $4 = ImGui__BeginComboPopup_28unsigned_20int_2c_20ImRect_20const__2c_20int_29($19 | 0, $3 + 112 | 0 | 0, $2 | 0) | 0;
  }
  __stack_pointer = $3 + 144 | 0;
  return $4 | 0;
 }
 
 function ImGui__BeginComboPopup_28unsigned_20int_2c_20ImRect_20const__2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $6 = Math_fround(0), $5 = 0, i64toi32_i32$0 = 0, $7 = Math_fround(0), $75 = Math_fround(0);
  $3 = __stack_pointer - 64 | 0;
  __stack_pointer = $3;
  $4 = 0;
  $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (ImGui__IsPopupOpen_28unsigned_20int_2c_20int_29($0 | 0, 0 | 0) | 0) {
     break label$2
    }
    HEAP32[($5 + 18340 | 0) >> 2] = 0;
    break label$1;
   }
   $6 = Math_fround(Math_fround(HEAPF32[($1 + 8 | 0) >> 2]) - Math_fround(HEAPF32[$1 >> 2]));
   label$3 : {
    label$4 : {
     $4 = HEAP32[($5 + 18340 | 0) >> 2] | 0;
     if (!($4 & 16 | 0)) {
      break label$4
     }
     $4 = $5 + 18404 | 0;
     $7 = Math_fround(HEAPF32[$4 >> 2]);
     HEAPF32[$4 >> 2] = $7 >= $6 ? $7 : $6;
     break label$3;
    }
    $0 = 8;
    label$5 : {
     $2 = $2 & 30 | 0 ? $2 : $2 | 4 | 0;
     if ($2 & 4 | 0) {
      break label$5
     }
     $0 = 4;
     if ($2 & 2 | 0) {
      break label$5
     }
     $0 = $2 & 8 | 0 ? 20 : -1;
    }
    i64toi32_i32$0 = 0;
    HEAP32[($3 + 48 | 0) >> 2] = 0;
    HEAP32[($3 + 52 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 2139095039;
    HEAP32[($3 + 24 | 0) >> 2] = 2139095039;
    HEAP32[($3 + 28 | 0) >> 2] = i64toi32_i32$0;
    label$6 : {
     label$7 : {
      label$8 : {
       if ($4 & 2 | 0) {
        break label$8
       }
       HEAPF32[($3 + 48 | 0) >> 2] = $6;
       break label$7;
      }
      label$9 : {
       if (!(Math_fround(HEAPF32[($5 + 18376 | 0) >> 2]) <= Math_fround(0.0))) {
        break label$9
       }
       HEAPF32[($3 + 48 | 0) >> 2] = $6;
      }
      if (!(Math_fround(HEAPF32[($5 + 18380 | 0) >> 2]) <= Math_fround(0.0))) {
       break label$6
      }
     }
     label$10 : {
      label$11 : {
       if (($0 | 0) >= (1 | 0)) {
        break label$11
       }
       $6 = Math_fround(3402823466385288598117041.0e14);
       break label$10;
      }
      $4 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
      $6 = Math_fround(HEAPF32[($4 + 14408 | 0) >> 2]);
      $75 = Math_fround($6 + $6);
      $6 = Math_fround(HEAPF32[($4 + 14476 | 0) >> 2]);
      $6 = Math_fround($75 + Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($4 + 15488 | 0) >> 2]) + $6) * Math_fround($0 | 0)) - $6));
     }
     HEAPF32[($3 + 28 | 0) >> 2] = $6;
    }
    ImGui__SetNextWindowSizeConstraints_28ImVec2_20const__2c_20ImVec2_20const__2c_20void_20_28__29_28ImGuiSizeCallbackData__29_2c_20void__29($3 + 48 | 0 | 0, $3 + 24 | 0 | 0, 0 | 0, 0 | 0);
   }
   HEAP32[$3 >> 2] = HEAP32[($5 + 18560 | 0) >> 2] | 0;
   ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($3 + 48 | 0 | 0, 16 | 0, 67165 | 0, $3 | 0) | 0;
   label$12 : {
    $4 = ImGui__FindWindowByName_28char_20const__29($3 + 48 | 0 | 0) | 0;
    if (!$4) {
     break label$12
    }
    if (!(HEAPU8[($4 + 220 | 0) >> 0] | 0)) {
     break label$12
    }
    ImGui__CalcWindowNextAutoFitSize_28ImGuiWindow__29($3 + 40 | 0 | 0, $4 | 0);
    HEAP32[($4 + 252 | 0) >> 2] = $2 & 1 | 0 ? 0 : 3;
    ImGui__GetPopupAllowedExtentRect_28ImGuiWindow__29($3 + 24 | 0 | 0, $4 | 0);
    $6 = Math_fround(HEAPF32[$1 >> 2]);
    HEAPF32[($3 + 12 | 0) >> 2] = Math_fround(HEAPF32[($1 + 12 | 0) >> 2]);
    HEAPF32[($3 + 8 | 0) >> 2] = $6;
    ImGui__FindBestWindowPosForPopupEx_28ImVec2_20const__2c_20ImVec2_20const__2c_20int__2c_20ImRect_20const__2c_20ImRect_20const__2c_20ImGuiPopupPositionPolicy_29($3 + 16 | 0 | 0, $3 + 8 | 0 | 0, $3 + 40 | 0 | 0, $4 + 252 | 0 | 0, $3 + 24 | 0 | 0, $1 | 0, 1 | 0);
    i64toi32_i32$0 = 0;
    HEAP32[($3 + 8 | 0) >> 2] = 0;
    HEAP32[($3 + 12 | 0) >> 2] = i64toi32_i32$0;
    ImGui__SetNextWindowPos_28ImVec2_20const__2c_20int_2c_20ImVec2_20const__29($3 + 16 | 0 | 0, 0 | 0, $3 + 8 | 0 | 0);
   }
   $6 = Math_fround(HEAPF32[($5 + 14456 | 0) >> 2]);
   HEAPF32[($3 + 28 | 0) >> 2] = Math_fround(HEAPF32[($5 + 14408 | 0) >> 2]);
   HEAPF32[($3 + 24 | 0) >> 2] = $6;
   ImGui__PushStyleVar_28int_2c_20ImVec2_20const__29(2 | 0, $3 + 24 | 0 | 0);
   $4 = ImGui__Begin_28char_20const__2c_20bool__2c_20int_29($3 + 48 | 0 | 0, 0 | 0, 67109191 | 0) | 0;
   ImGui__PopStyleVar_28int_29(1 | 0);
   if ($4) {
    break label$1
   }
   ImGui__EndPopup_28_29();
  }
  __stack_pointer = $3 + 64 | 0;
  return $4 | 0;
 }
 
 function ImGui__Selectable_28char_20const__2c_20bool_2c_20int_2c_20ImVec2_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $7 = 0, $9 = Math_fround(0), $6 = 0, $10 = Math_fround(0), $11 = Math_fround(0), i64toi32_i32$0 = 0, $13 = 0, i64toi32_i32$1 = 0, $8 = 0, $12 = Math_fround(0), $14 = Math_fround(0), $16 = Math_fround(0), $17 = 0, $19 = 0, $20 = 0, $15 = Math_fround(0), $18 = 0, $21 = 0, $22 = 0, $348 = 0, $21$hi = 0, $22$hi = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_f32$1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $4 = __stack_pointer - 112 | 0;
  __stack_pointer = $4;
  $5 = 0;
  $6 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $7 = HEAP32[($6 + 16116 | 0) >> 2] | 0;
  HEAP8[($7 + 221 | 0) >> 0] = 1;
  label$1 : {
   if (HEAPU8[($7 + 224 | 0) >> 0] | 0) {
    break label$1
   }
   $8 = ImGuiWindow__GetID_28char_20const__2c_20char_20const__29($7 | 0, $0 | 0, 0 | 0) | 0;
   ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($4 + 104 | 0 | 0, $0 | 0, 0 | 0, 1 | 0, Math_fround(Math_fround(-1.0)));
   $9 = Math_fround(HEAPF32[$3 >> 2]);
   $10 = Math_fround(HEAPF32[($3 + 4 | 0) >> 2]);
   HEAPF32[($4 + 100 | 0) >> 2] = (wasm2js_f32$0 = $10, wasm2js_f32$1 = Math_fround(HEAPF32[($4 + 108 | 0) >> 2]), wasm2js_i32$0 = $10 != Math_fround(0.0), wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
   HEAPF32[($4 + 96 | 0) >> 2] = (wasm2js_f32$0 = $9, wasm2js_f32$1 = Math_fround(HEAPF32[($4 + 104 | 0) >> 2]), wasm2js_i32$0 = $9 != Math_fround(0.0), wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
   $10 = Math_fround(HEAPF32[($7 + 296 | 0) >> 2]);
   $11 = Math_fround(HEAPF32[($7 + 348 | 0) >> 2]);
   $12 = Math_fround(HEAPF32[($7 + 292 | 0) >> 2]);
   ImGui__ItemSize_28ImVec2_20const__2c_20float_29($4 + 96 | 0 | 0, Math_fround(Math_fround(0.0)));
   $9 = $12;
   label$2 : {
    $13 = $2 & 2 | 0;
    if (!$13) {
     break label$2
    }
    $9 = Math_fround(HEAPF32[($7 + 564 | 0) >> 2]);
   }
   $10 = Math_fround($10 + $11);
   label$3 : {
    label$4 : {
     if ($2 & 16777216 | 0) {
      break label$4
     }
     if (Math_fround(HEAPF32[$3 >> 2]) == Math_fround(0.0)) {
      break label$4
     }
     $11 = Math_fround(HEAPF32[($4 + 96 | 0) >> 2]);
     break label$3;
    }
    $11 = Math_fround(HEAPF32[($4 + 104 | 0) >> 2]);
    $14 = Math_fround(Math_fround(HEAPF32[($7 + ($13 ? 572 : 556) | 0) >> 2]) - $9);
    $11 = $11 >= $14 ? $11 : $14;
    HEAPF32[($4 + 96 | 0) >> 2] = $11;
   }
   HEAPF32[($4 + 92 | 0) >> 2] = $10;
   HEAPF32[($4 + 88 | 0) >> 2] = $12;
   $12 = Math_fround($10 + Math_fround(HEAPF32[($4 + 100 | 0) >> 2]));
   HEAPF32[($4 + 84 | 0) >> 2] = $12;
   $11 = Math_fround($9 + $11);
   HEAPF32[($4 + 80 | 0) >> 2] = $11;
   HEAPF32[($4 + 76 | 0) >> 2] = $12;
   HEAPF32[($4 + 72 | 0) >> 2] = $11;
   HEAPF32[($4 + 68 | 0) >> 2] = $10;
   HEAPF32[($4 + 64 | 0) >> 2] = $9;
   label$5 : {
    if ($2 & 67108864 | 0) {
     break label$5
    }
    $14 = Math_fround(0.0);
    label$6 : {
     if ($13) {
      break label$6
     }
     $14 = Math_fround(HEAPF32[($6 + 14472 | 0) >> 2]);
    }
    $15 = Math_fround(HEAPF32[($6 + 14476 | 0) >> 2]);
    label$7 : {
     label$8 : {
      $16 = Math_fround($14 * Math_fround(.5));
      if (!(Math_fround(Math_abs($16)) < Math_fround(2147483648.0))) {
       break label$8
      }
      $5 = ~~$16;
      break label$7;
     }
     $5 = -2147483648;
    }
    $16 = Math_fround($5 | 0);
    HEAPF32[($4 + 64 | 0) >> 2] = Math_fround($9 - $16);
    HEAPF32[($4 + 72 | 0) >> 2] = Math_fround($11 + Math_fround($14 - $16));
    label$9 : {
     label$10 : {
      $9 = Math_fround($15 * Math_fround(.5));
      if (!(Math_fround(Math_abs($9)) < Math_fround(2147483648.0))) {
       break label$10
      }
      $5 = ~~$9;
      break label$9;
     }
     $5 = -2147483648;
    }
    $9 = Math_fround($5 | 0);
    HEAPF32[($4 + 68 | 0) >> 2] = Math_fround($10 - $9);
    HEAPF32[($4 + 76 | 0) >> 2] = Math_fround($12 + Math_fround($15 - $9));
   }
   $9 = Math_fround(HEAPF32[($7 + 588 | 0) >> 2]);
   $10 = Math_fround(HEAPF32[($7 + 580 | 0) >> 2]);
   label$11 : {
    if (!$13) {
     break label$11
    }
    HEAPF32[($7 + 580 | 0) >> 2] = Math_fround(HEAPF32[($7 + 564 | 0) >> 2]);
    HEAPF32[($7 + 588 | 0) >> 2] = Math_fround(HEAPF32[($7 + 572 | 0) >> 2]);
   }
   $5 = 0;
   $17 = $2 & 8 | 0;
   $3 = ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($4 + 64 | 0 | 0, $8 | 0, 0 | 0, $17 >>> 1 | 0 | 0) | 0;
   label$12 : {
    if (!$13) {
     break label$12
    }
    HEAPF32[($7 + 588 | 0) >> 2] = $9;
    HEAPF32[($7 + 580 | 0) >> 2] = $10;
   }
   if (!$3) {
    break label$1
   }
   label$13 : {
    $17 = !$17 | (((HEAPU8[($6 + 18252 | 0) >> 0] | 0) & 4 | 0) >>> 2 | 0) | 0;
    if ($17) {
     break label$13
    }
    ImGui__BeginDisabled_28bool_29(1 | 0);
   }
   label$14 : {
    if (!$13) {
     break label$14
    }
    label$15 : {
     if (!(HEAP32[($7 + 452 | 0) >> 2] | 0)) {
      break label$15
     }
     ImGui__PushColumnsBackground_28_29();
     break label$14;
    }
    if (!(HEAP32[($6 + 19200 | 0) >> 2] | 0)) {
     break label$14
    }
    ImGui__TablePushBackgroundChannel_28_29();
   }
   $5 = ($2 >>> 7 | 0) & 1048576 | 0 | (($2 >>> 3 | 0) & 131072 | 0) | 0 | (($2 >>> 18 | 0) & 16 | 0) | 0 | (($2 >>> 16 | 0) & 128 | 0) | 0;
   $18 = $2 & 16 | 0;
   $19 = ImGui__ButtonBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20bool__2c_20bool__2c_20int_29($4 + 64 | 0 | 0, $8 | 0, $4 + 63 | 0 | 0, $4 + 62 | 0 | 0, ($2 & 4 | 0 ? $5 | 288 | 0 : $5) | ($18 << 8 | 0) | 0 | 0) | 0;
   label$16 : {
    label$17 : {
     label$18 : {
      label$19 : {
       if (!($2 & 2097152 | 0)) {
        break label$19
       }
       $5 = HEAP32[($6 + 18680 | 0) >> 2] | 0;
       if (!$5) {
        break label$19
       }
       $20 = (HEAP32[($6 + 18684 | 0) >> 2] | 0 | 0) == (HEAP32[($6 + 18248 | 0) >> 2] | 0 | 0) & ($5 | 0) == ($8 | 0) | 0;
       $3 = $20 | $1 | 0;
       $5 = 1;
       if (!($19 | $20 | 0)) {
        break label$18
       }
       break label$17;
      }
      $5 = 1;
      $3 = $1;
      if ($19) {
       break label$17
      }
     }
     $5 = 0;
     if (!($2 & 33554432 | 0)) {
      break label$16
     }
     if (!((HEAPU8[($4 + 63 | 0) >> 0] | 0) & 255 | 0)) {
      break label$16
     }
    }
    label$20 : {
     label$21 : {
      if (HEAPU8[($6 + 18711 | 0) >> 0] | 0) {
       break label$21
      }
      if ((HEAP32[($6 + 18648 | 0) >> 2] | 0 | 0) != ($7 | 0)) {
       break label$21
      }
      $19 = HEAP32[($6 + 18704 | 0) >> 2] | 0;
      if (($19 | 0) != (HEAP32[($7 + 380 | 0) >> 2] | 0 | 0)) {
       break label$21
      }
      $20 = HEAP32[($6 + 18248 | 0) >> 2] | 0;
      $9 = Math_fround(HEAPF32[($7 + 308 | 0) >> 2]);
      $10 = Math_fround(HEAPF32[($7 + 312 | 0) >> 2]);
      HEAPF32[($4 + 52 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4 + 76 | 0) >> 2]) - $10);
      HEAPF32[($4 + 48 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4 + 72 | 0) >> 2]) - $9);
      HEAPF32[($4 + 44 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4 + 68 | 0) >> 2]) - $10);
      HEAPF32[($4 + 40 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4 + 64 | 0) >> 2]) - $9);
      ImGui__SetNavID_28unsigned_20int_2c_20ImGuiNavLayer_2c_20unsigned_20int_2c_20ImRect_20const__29($8 | 0, $19 | 0, $20 | 0, $4 + 40 | 0 | 0);
      HEAP8[($6 + 18710 | 0) >> 0] = 1;
      if ($5) {
       break label$20
      }
      $5 = 0;
      break label$16;
     }
     if ($5) {
      break label$20
     }
     $5 = 0;
     break label$16;
    }
    ImGui__MarkItemEdited_28unsigned_20int_29($8 | 0);
    $5 = 1;
   }
   label$22 : {
    if (!$18) {
     break label$22
    }
    ImGui__SetItemAllowOverlap_28_29();
   }
   label$23 : {
    if (($3 | 0) == ($1 | 0)) {
     break label$23
    }
    $1 = $6 + 18288 | 0;
    HEAP32[$1 >> 2] = HEAP32[$1 >> 2] | 0 | 8 | 0;
   }
   label$24 : {
    $348 = $3 ^ -1 | 0;
    $3 = HEAPU8[($4 + 63 | 0) >> 0] | 0;
    if ($348 & !$3 | 0) {
     break label$24
    }
    $3 = ImGui__GetColorU32_28int_2c_20float_29((wasm2js_i32$0 = HEAPU8[($4 + 62 | 0) >> 0] | 0 ? 26 : 25, wasm2js_i32$1 = 24, wasm2js_i32$2 = $3, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0, Math_fround(Math_fround(1.0))) | 0;
    i64toi32_i32$0 = HEAP32[($4 + 64 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($4 + 68 | 0) >> 2] | 0;
    $21 = i64toi32_i32$0;
    $21$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $4;
    HEAP32[($4 + 32 | 0) >> 2] = $21;
    HEAP32[($4 + 36 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[($4 + 72 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($4 + 76 | 0) >> 2] | 0;
    $22 = i64toi32_i32$1;
    $22$hi = i64toi32_i32$0;
    i64toi32_i32$1 = $4;
    HEAP32[($4 + 24 | 0) >> 2] = $22;
    HEAP32[($4 + 28 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $21$hi;
    i64toi32_i32$1 = $4;
    HEAP32[($4 + 16 | 0) >> 2] = $21;
    HEAP32[($4 + 20 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $22$hi;
    i64toi32_i32$1 = $4;
    HEAP32[($4 + 8 | 0) >> 2] = $22;
    HEAP32[($4 + 12 | 0) >> 2] = i64toi32_i32$0;
    ImGui__RenderFrame_28ImVec2_2c_20ImVec2_2c_20unsigned_20int_2c_20bool_2c_20float_29($4 + 16 | 0 | 0, $4 + 8 | 0 | 0, $3 | 0, 0 | 0, Math_fround(Math_fround(0.0)));
   }
   ImGui__RenderNavHighlight_28ImRect_20const__2c_20unsigned_20int_2c_20int_29($4 + 64 | 0 | 0, $8 | 0, 10 | 0);
   label$25 : {
    if (!$13) {
     break label$25
    }
    label$26 : {
     if (!(HEAP32[($7 + 452 | 0) >> 2] | 0)) {
      break label$26
     }
     ImGui__PopColumnsBackground_28_29();
     break label$25;
    }
    if (!(HEAP32[($6 + 19200 | 0) >> 2] | 0)) {
     break label$25
    }
    ImGui__TablePopBackgroundChannel_28_29();
   }
   ImGui__RenderTextClipped_28ImVec2_20const__2c_20ImVec2_20const__2c_20char_20const__2c_20char_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImRect_20const__29($4 + 88 | 0 | 0, $4 + 80 | 0 | 0, $0 | 0, 0 | 0, $4 + 104 | 0 | 0, $6 + 14556 | 0 | 0, $4 + 64 | 0 | 0);
   label$27 : {
    if (!$5) {
     break label$27
    }
    if ($2 & 1 | 0) {
     break label$27
    }
    if (!((HEAP32[($7 + 8 | 0) >> 2] | 0) & 67108864 | 0)) {
     break label$27
    }
    if ((HEAPU8[($6 + 18284 | 0) >> 0] | 0) & 32 | 0) {
     break label$27
    }
    ImGui__CloseCurrentPopup_28_29();
   }
   if ($17) {
    break label$1
   }
   ImGui__EndDisabled_28_29();
  }
  __stack_pointer = $4 + 112 | 0;
  return $5 | 0;
 }
 
 function ImGuiMenuColumns__Update_28float_2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = $2 | 0;
  var $5 = 0, $6 = 0, $4 = 0, $3 = 0, $9 = 0, $10 = 0, $7 = 0, $46 = 0;
  $3 = 0;
  $4 = 0;
  $5 = 0;
  $6 = 0;
  label$1 : {
   if ($2) {
    break label$1
   }
   $3 = HEAPU16[($0 + 24 | 0) >> 1] | 0;
   $4 = HEAPU16[($0 + 22 | 0) >> 1] | 0;
   $5 = HEAPU16[($0 + 20 | 0) >> 1] | 0;
   $6 = HEAPU16[($0 + 18 | 0) >> 1] | 0;
  }
  $9 = 0;
  HEAP16[($0 + 18 | 0) >> 1] = $9;
  HEAP16[($0 + 20 | 0) >> 1] = $9 >>> 16 | 0;
  $10 = 0;
  HEAP16[($0 + 22 | 0) >> 1] = $10;
  HEAP16[($0 + 24 | 0) >> 1] = $10 >>> 16 | 0;
  HEAP32[($0 + 4 | 0) >> 2] = 0;
  label$2 : {
   label$3 : {
    if (!($1 < Math_fround(4294967296.0) & $1 >= Math_fround(0.0) | 0)) {
     break label$3
    }
    $2 = ~~$1 >>> 0;
    break label$2;
   }
   $2 = 0;
  }
  HEAP16[($0 + 8 | 0) >> 1] = $2;
  $7 = ($6 & 65535 | 0 ? ($5 & 65535 | 0 ? $2 : 0) : 0) + $6 | 0;
  HEAP16[($0 + 12 | 0) >> 1] = $7;
  $46 = $7 + $5 | 0;
  $5 = $5 | $6 | 0;
  $6 = $46 + ($5 & 65535 | 0 ? ($4 & 65535 | 0 ? $2 : 0) : 0) | 0;
  HEAP16[($0 + 14 | 0) >> 1] = $6;
  $2 = ($6 + $4 | 0) + (($4 | $5 | 0) & 65535 | 0 ? ($3 & 65535 | 0 ? $2 : 0) : 0) | 0;
  HEAP16[($0 + 16 | 0) >> 1] = $2;
  HEAP32[$0 >> 2] = ($2 + $3 | 0) & 65535 | 0;
 }
 
 function ImGui__MenuItemEx_28char_20const__2c_20char_20const__2c_20char_20const__2c_20bool_2c_20bool_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $8 = 0, $12 = 0, $13 = 0, $14 = Math_fround(0), $18 = 0, $16 = Math_fround(0), $7 = 0, $15 = Math_fround(0), i64toi32_i32$0 = 0, $19 = 0, i64toi32_i32$1 = 0, $17 = Math_fround(0), $10 = Math_fround(0), $9 = Math_fround(0), $11 = 0, $138 = 0, $250 = 0, $279 = 0, $344 = 0, $363 = 0, $389 = 0, $423 = 0;
  $5 = __stack_pointer - 96 | 0;
  __stack_pointer = $5;
  $6 = 0;
  $7 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $8 = HEAP32[($7 + 16116 | 0) >> 2] | 0;
  HEAP8[($8 + 221 | 0) >> 0] = 1;
  label$1 : {
   if (HEAPU8[($8 + 224 | 0) >> 0] | 0) {
    break label$1
   }
   $9 = Math_fround(HEAPF32[($8 + 296 | 0) >> 2]);
   $10 = Math_fround(HEAPF32[($8 + 292 | 0) >> 2]);
   $11 = 0;
   ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($5 + 88 | 0 | 0, $0 | 0, 0 | 0, 1 | 0, Math_fround(Math_fround(-1.0)));
   label$2 : {
    $6 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
    $12 = HEAP32[($6 + 18560 | 0) >> 2] | 0;
    if ((HEAP32[($6 + 18548 | 0) >> 2] | 0 | 0) <= ($12 | 0)) {
     break label$2
    }
    $13 = HEAP32[($6 + 16116 | 0) >> 2] | 0;
    if ((HEAPU8[($13 + 11 | 0) >> 0] | 0) & 16 | 0) {
     break label$2
    }
    $6 = (HEAP32[($6 + 18556 | 0) >> 2] | 0) + Math_imul($12, 40) | 0;
    if ((HEAP32[($13 + 380 | 0) >> 2] | 0 | 0) != (HEAP32[($6 + 12 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    $6 = HEAP32[($6 + 4 | 0) >> 2] | 0;
    if (!$6) {
     break label$2
    }
    if (!((HEAPU8[($6 + 11 | 0) >> 0] | 0) & 16 | 0)) {
     break label$2
    }
    $11 = 1;
    ImGui__PushItemFlag_28int_2c_20bool_29(256 | 0, 1 | 0);
   }
   ImGui__PushID_28char_20const__29($0 | 0);
   label$3 : {
    if ($4) {
     break label$3
    }
    ImGui__BeginDisabled_28bool_29(1 | 0);
   }
   label$4 : {
    label$5 : {
     if (HEAP32[($8 + 460 | 0) >> 2] | 0) {
      break label$5
     }
     label$6 : {
      label$7 : {
       $14 = Math_fround(HEAPF32[($7 + 14472 | 0) >> 2]);
       $15 = Math_fround($14 * Math_fround(.5));
       if (!(Math_fround(Math_abs($15)) < Math_fround(2147483648.0))) {
        break label$7
       }
       $6 = ~~$15;
       break label$6;
      }
      $6 = -2147483648;
     }
     $15 = Math_fround(HEAPF32[($5 + 88 | 0) >> 2]);
     $16 = Math_fround(Math_fround(HEAPF32[($8 + 292 | 0) >> 2]) + Math_fround($6 | 0));
     HEAPF32[($8 + 292 | 0) >> 2] = $16;
     $2 = HEAPU16[($8 + 412 | 0) >> 1] | 0;
     $10 = Math_fround(HEAPF32[($8 + 348 | 0) >> 2]);
     $9 = Math_fround(HEAPF32[($8 + 296 | 0) >> 2]);
     HEAPF32[($5 + 84 | 0) >> 2] = Math_fround(HEAPF32[($7 + 14476 | 0) >> 2]);
     HEAPF32[($5 + 80 | 0) >> 2] = Math_fround($14 + $14);
     ImGui__PushStyleVar_28int_2c_20ImVec2_20const__29(14 | 0, $5 + 80 | 0 | 0);
     HEAP32[($5 + 84 | 0) >> 2] = 0;
     HEAPF32[($5 + 80 | 0) >> 2] = $15;
     $6 = ImGui__Selectable_28char_20const__2c_20bool_2c_20int_2c_20ImVec2_20const__29(70527 | 0, $3 | 0, 176160768 | 0, $5 + 80 | 0 | 0) | 0;
     ImGui__PopStyleVar_28int_29(1 | 0);
     label$8 : {
      if (!((HEAPU8[($7 + 18289 | 0) >> 0] | 0) & 2 | 0)) {
       break label$8
      }
      HEAPF32[($5 + 76 | 0) >> 2] = Math_fround($9 + $10);
      HEAPF32[($5 + 72 | 0) >> 2] = Math_fround($16 + Math_fround(($2 & 65535 | 0) >>> 0));
      i64toi32_i32$0 = HEAP32[($5 + 72 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($5 + 76 | 0) >> 2] | 0;
      $138 = i64toi32_i32$0;
      i64toi32_i32$0 = $5;
      HEAP32[$5 >> 2] = $138;
      HEAP32[($5 + 4 | 0) >> 2] = i64toi32_i32$1;
      ImGui__RenderText_28ImVec2_2c_20char_20const__2c_20char_20const__2c_20bool_29($5 | 0, $0 | 0, 0 | 0, 1 | 0);
     }
     label$9 : {
      label$10 : {
       $14 = Math_fround(Math_fround(HEAPF32[($7 + 14472 | 0) >> 2]) * Math_fround(-.5));
       if (!(Math_fround(Math_abs($14)) < Math_fround(2147483648.0))) {
        break label$10
       }
       $7 = ~~$14;
       break label$9;
      }
      $7 = -2147483648;
     }
     HEAPF32[($8 + 292 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8 + 292 | 0) >> 2]) + Math_fround($7 | 0));
     break label$4;
    }
    $15 = Math_fround(0.0);
    $14 = Math_fround(0.0);
    label$11 : {
     if (!$1) {
      break label$11
     }
     $14 = Math_fround(0.0);
     if (!(HEAPU8[$1 >> 0] | 0)) {
      break label$11
     }
     ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($5 + 80 | 0 | 0, $1 | 0, 0 | 0, 0 | 0, Math_fround(Math_fround(-1.0)));
     $14 = Math_fround(HEAPF32[($5 + 80 | 0) >> 2]);
    }
    label$12 : {
     if (!$2) {
      break label$12
     }
     if (!(HEAPU8[$2 >> 0] | 0)) {
      break label$12
     }
     ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($5 + 80 | 0 | 0, $2 | 0, 0 | 0, 0 | 0, Math_fround(Math_fround(-1.0)));
     $15 = Math_fround(HEAPF32[($5 + 80 | 0) >> 2]);
    }
    $13 = $8 + 418 | 0;
    $6 = HEAPU16[$13 >> 1] | 0;
    label$13 : {
     label$14 : {
      if (!($14 < Math_fround(4294967296.0) & $14 >= Math_fround(0.0) | 0)) {
       break label$14
      }
      $12 = ~~$14 >>> 0;
      break label$13;
     }
     $12 = 0;
    }
    $17 = Math_fround(HEAPF32[($7 + 15488 | 0) >> 2]);
    $16 = Math_fround(HEAPF32[($5 + 88 | 0) >> 2]);
    $6 = $6 >>> 0 > $12 >>> 0 ? $6 : $12;
    HEAP16[$13 >> 1] = $6;
    $18 = $8 + 420 | 0;
    $12 = HEAPU16[$18 >> 1] | 0;
    label$15 : {
     label$16 : {
      if (!($16 < Math_fround(4294967296.0) & $16 >= Math_fround(0.0) | 0)) {
       break label$16
      }
      $13 = ~~$16 >>> 0;
      break label$15;
     }
     $13 = 0;
    }
    $12 = $12 >>> 0 > $13 >>> 0 ? $12 : $13;
    HEAP16[$18 >> 1] = $12;
    $19 = $8 + 422 | 0;
    $13 = HEAPU16[$19 >> 1] | 0;
    label$17 : {
     label$18 : {
      if (!($15 < Math_fround(4294967296.0) & $15 >= Math_fround(0.0) | 0)) {
       break label$18
      }
      $18 = ~~$15 >>> 0;
      break label$17;
     }
     $18 = 0;
    }
    $13 = $13 >>> 0 > $18 >>> 0 ? $13 : $18;
    HEAP16[$19 >> 1] = $13;
    label$19 : {
     label$20 : {
      $16 = Math_fround($17 * Math_fround(1.2000000476837158));
      if (!(Math_fround(Math_abs($16)) < Math_fround(2147483648.0))) {
       break label$20
      }
      $18 = ~~$16;
      break label$19;
     }
     $18 = -2147483648;
    }
    $19 = $8 + 424 | 0;
    $250 = $19;
    $19 = HEAPU16[$19 >> 1] | 0;
    $18 = $18 & 65535 | 0;
    $18 = $19 >>> 0 > $18 >>> 0 ? $19 : $18;
    HEAP16[$250 >> 1] = $18;
    $19 = HEAPU16[($8 + 408 | 0) >> 1] | 0;
    $279 = ((($12 + $6 | 0) + $13 | 0) + $18 | 0) + ($6 ? ($12 ? $19 : 0) : 0) | 0;
    $6 = $12 | $6 | 0;
    $6 = (($279 + ($6 ? ($13 ? $19 : 0) : 0) | 0) + ($13 | $6 | 0 ? ($18 ? $19 : 0) : 0) | 0) & 65535 | 0;
    HEAP32[($8 + 404 | 0) >> 2] = $6;
    $12 = HEAP32[($8 + 400 | 0) >> 2] | 0;
    ImGui__GetContentRegionAvail_28_29($5 + 80 | 0 | 0);
    $16 = Math_fround(HEAPF32[($5 + 80 | 0) >> 2]);
    HEAPF32[($5 + 84 | 0) >> 2] = Math_fround(HEAPF32[($5 + 92 | 0) >> 2]);
    $17 = Math_fround(($12 >>> 0 > $6 >>> 0 ? $12 : $6) >>> 0);
    HEAPF32[($5 + 80 | 0) >> 2] = $17;
    $6 = ImGui__Selectable_28char_20const__2c_20bool_2c_20int_2c_20ImVec2_20const__29(70527 | 0, 0 | 0, 192937984 | 0, $5 + 80 | 0 | 0) | 0;
    if (!((HEAPU8[($7 + 18289 | 0) >> 0] | 0) & 2 | 0)) {
     break label$4
    }
    $16 = Math_fround($16 - $17);
    $12 = $16 <= Math_fround(0.0);
    $13 = HEAPU16[($8 + 412 | 0) >> 1] | 0;
    $17 = Math_fround($9 + Math_fround(0.0));
    HEAPF32[($5 + 68 | 0) >> 2] = $17;
    HEAPF32[($5 + 64 | 0) >> 2] = Math_fround($10 + Math_fround($13 >>> 0));
    i64toi32_i32$1 = HEAP32[($5 + 64 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($5 + 68 | 0) >> 2] | 0;
    $344 = i64toi32_i32$1;
    i64toi32_i32$1 = $5;
    HEAP32[($5 + 32 | 0) >> 2] = $344;
    HEAP32[($5 + 36 | 0) >> 2] = i64toi32_i32$0;
    ImGui__RenderText_28ImVec2_2c_20char_20const__2c_20char_20const__2c_20bool_29($5 + 32 | 0 | 0, $0 | 0, 0 | 0, 1 | 0);
    label$21 : {
     if (!($14 > Math_fround(0.0))) {
      break label$21
     }
     $0 = HEAPU16[($8 + 410 | 0) >> 1] | 0;
     HEAPF32[($5 + 60 | 0) >> 2] = $17;
     HEAPF32[($5 + 56 | 0) >> 2] = Math_fround($10 + Math_fround($0 >>> 0));
     i64toi32_i32$0 = HEAP32[($5 + 56 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($5 + 60 | 0) >> 2] | 0;
     $363 = i64toi32_i32$0;
     i64toi32_i32$0 = $5;
     HEAP32[($5 + 24 | 0) >> 2] = $363;
     HEAP32[($5 + 28 | 0) >> 2] = i64toi32_i32$1;
     ImGui__RenderText_28ImVec2_2c_20char_20const__2c_20char_20const__2c_20bool_29($5 + 24 | 0 | 0, $1 | 0, 0 | 0, 1 | 0);
    }
    $14 = $12 ? Math_fround(0.0) : $16;
    label$22 : {
     if (!($15 > Math_fround(0.0))) {
      break label$22
     }
     ImGui__PushStyleColor_28int_2c_20ImVec4_20const__29(0 | 0, $7 + 14612 | 0 | 0);
     $0 = HEAPU16[($8 + 414 | 0) >> 1] | 0;
     HEAPF32[($5 + 52 | 0) >> 2] = $17;
     HEAPF32[($5 + 48 | 0) >> 2] = Math_fround($10 + Math_fround($14 + Math_fround($0 >>> 0)));
     i64toi32_i32$1 = HEAP32[($5 + 48 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($5 + 52 | 0) >> 2] | 0;
     $389 = i64toi32_i32$1;
     i64toi32_i32$1 = $5;
     HEAP32[($5 + 16 | 0) >> 2] = $389;
     HEAP32[($5 + 20 | 0) >> 2] = i64toi32_i32$0;
     ImGui__RenderText_28ImVec2_2c_20char_20const__2c_20char_20const__2c_20bool_29($5 + 16 | 0 | 0, $2 | 0, 0 | 0, 0 | 0);
     ImGui__PopStyleColor_28int_29(1 | 0);
    }
    if (!$3) {
     break label$4
    }
    $0 = HEAPU16[($8 + 416 | 0) >> 1] | 0;
    $8 = HEAP32[($8 + 672 | 0) >> 2] | 0;
    $15 = Math_fround(HEAPF32[($7 + 15488 | 0) >> 2]);
    HEAPF32[($5 + 44 | 0) >> 2] = Math_fround($9 + Math_fround(Math_fround($15 * Math_fround(.1340000033378601)) * Math_fround(.5)));
    HEAPF32[($5 + 40 | 0) >> 2] = Math_fround($10 + Math_fround(Math_fround($15 * Math_fround(.4000000059604645)) + Math_fround($14 + Math_fround($0 >>> 0))));
    $0 = ImGui__GetColorU32_28int_2c_20float_29(0 | 0, Math_fround(Math_fround(1.0))) | 0;
    $14 = Math_fround(HEAPF32[($7 + 15488 | 0) >> 2]);
    i64toi32_i32$0 = HEAP32[($5 + 40 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($5 + 44 | 0) >> 2] | 0;
    $423 = i64toi32_i32$0;
    i64toi32_i32$0 = $5;
    HEAP32[($5 + 8 | 0) >> 2] = $423;
    HEAP32[($5 + 12 | 0) >> 2] = i64toi32_i32$1;
    ImGui__RenderCheckMark_28ImDrawList__2c_20ImVec2_2c_20unsigned_20int_2c_20float_29($8 | 0, $5 + 8 | 0 | 0, $0 | 0, Math_fround(Math_fround($14 * Math_fround(.8659999966621399))));
   }
   label$23 : {
    if ($4) {
     break label$23
    }
    ImGui__EndDisabled_28_29();
   }
   ImGui__PopID_28_29();
   if (!$11) {
    break label$1
   }
   ImGui__PopItemFlag_28_29();
  }
  __stack_pointer = $5 + 96 | 0;
  return $6 | 0;
 }
 
 function ImGui__MenuItem_28char_20const__2c_20char_20const__2c_20bool_2c_20bool_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  return ImGui__MenuItemEx_28char_20const__2c_20char_20const__2c_20char_20const__2c_20bool_2c_20bool_29($0 | 0, 0 | 0, $1 | 0, $2 | 0, $3 | 0) | 0 | 0;
 }
 
 function ImGuiTabBar__ImGuiTabBar_28_29($0) {
  $0 = $0 | 0;
  $0 = memset($0 | 0, 0 | 0, 144 | 0) | 0;
  HEAP16[($0 + 108 | 0) >> 1] = 65535;
  HEAP32[($0 + 32 | 0) >> 2] = -1;
  HEAP32[($0 + 36 | 0) >> 2] = -1;
  return $0 | 0;
 }
 
 function ImGui__BeginTabBarEx_28ImGuiTabBar__2c_20ImRect_20const__2c_20int_2c_20ImGuiDockNode__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $5 = 0, $8 = 0, $4 = 0, $6 = 0, i64toi32_i32$0 = 0, $14 = Math_fround(0), $11 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $17 = Math_fround(0), $10 = 0, $15 = Math_fround(0), $13 = 0, $18 = Math_fround(0), $12 = 0, $7 = 0, $9 = 0, $25 = 0, $117 = 0, $172 = 0, $178 = 0, $200 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  label$1 : {
   $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $6 = HEAP32[($5 + 16116 | 0) >> 2] | 0;
   $7 = HEAPU8[($6 + 224 | 0) >> 0] | 0;
   if ($7) {
    break label$1
   }
   $8 = $5;
   label$2 : {
    $9 = $2 & 1048576 | 0;
    if ($9) {
     break label$2
    }
    ImGui__PushOverrideID_28unsigned_20int_29(HEAP32[($0 + 16 | 0) >> 2] | 0 | 0);
    $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   }
   $10 = -1;
   label$3 : {
    label$4 : {
     $11 = HEAP32[($8 + 19288 | 0) >> 2] | 0;
     if ($11 >>> 0 <= $0 >>> 0) {
      break label$4
     }
     $12 = $0;
     break label$3;
    }
    $12 = $0;
    if (($11 + Math_imul(HEAP32[($8 + 19280 | 0) >> 2] | 0, 144) | 0) >>> 0 <= $0 >>> 0) {
     break label$3
    }
    $10 = ($0 - $11 | 0 | 0) / (144 | 0) | 0;
    $12 = 0;
   }
   label$5 : {
    $8 = HEAP32[($5 + 19312 | 0) >> 2] | 0;
    if (($8 | 0) != (HEAP32[($5 + 19316 | 0) >> 2] | 0 | 0)) {
     break label$5
    }
    $11 = $8 + 1 | 0;
    label$6 : {
     label$7 : {
      if ($8) {
       break label$7
      }
      $13 = 8;
      break label$6;
     }
     $13 = (($8 | 0) / (2 | 0) | 0) + $8 | 0;
    }
    $11 = ($13 | 0) > ($11 | 0) ? $13 : $11;
    if (($8 | 0) >= ($11 | 0)) {
     break label$5
    }
    $8 = ImGui__MemAlloc_28unsigned_20long_29($11 << 3 | 0 | 0) | 0;
    label$8 : {
     $13 = HEAP32[($5 + 19320 | 0) >> 2] | 0;
     if (!$13) {
      break label$8
     }
     __memcpy($8 | 0, $13 | 0, (HEAP32[($5 + 19312 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
     ImGui__MemFree_28void__29(HEAP32[($5 + 19320 | 0) >> 2] | 0 | 0);
    }
    HEAP32[($5 + 19316 | 0) >> 2] = $11;
    HEAP32[($5 + 19320 | 0) >> 2] = $8;
    $8 = HEAP32[($5 + 19312 | 0) >> 2] | 0;
   }
   $8 = (HEAP32[($5 + 19320 | 0) >> 2] | 0) + ($8 << 3 | 0) | 0;
   HEAP32[($8 + 4 | 0) >> 2] = $10;
   HEAP32[$8 >> 2] = $12;
   HEAP32[($5 + 19276 | 0) >> 2] = $0;
   HEAP32[($5 + 19312 | 0) >> 2] = (HEAP32[($5 + 19312 | 0) >> 2] | 0) + 1 | 0;
   i64toi32_i32$2 = $6;
   i64toi32_i32$0 = HEAP32[($6 + 292 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($6 + 296 | 0) >> 2] | 0;
   $117 = i64toi32_i32$0;
   i64toi32_i32$0 = $0;
   HEAP32[($0 + 124 | 0) >> 2] = $117;
   HEAP32[($0 + 128 | 0) >> 2] = i64toi32_i32$1;
   label$9 : {
    $8 = HEAP32[($0 + 32 | 0) >> 2] | 0;
    if (($8 | 0) != (HEAP32[($5 + 16016 | 0) >> 2] | 0 | 0)) {
     break label$9
    }
    $14 = Math_fround(HEAPF32[($0 + 52 | 0) >> 2]);
    $15 = Math_fround(HEAPF32[($0 + 112 | 0) >> 2]);
    HEAP32[($6 + 292 | 0) >> 2] = HEAP32[($0 + 40 | 0) >> 2] | 0;
    HEAPF32[($6 + 296 | 0) >> 2] = Math_fround($14 + $15);
    HEAP8[($0 + 102 | 0) >> 0] = (HEAPU8[($0 + 102 | 0) >> 0] | 0) + 1 | 0;
    break label$1;
   }
   label$10 : {
    label$11 : {
     label$12 : {
      if (((HEAP32[($0 + 12 | 0) >> 2] | 0) ^ $2 | 0) & 1 | 0) {
       break label$12
      }
      if ($2 & 1048577 | 0) {
       break label$10
      }
      if ((HEAPU8[($0 + 105 | 0) >> 0] | 0) & 255 | 0) {
       break label$11
      }
      break label$10;
     }
     if ($9) {
      break label$10
     }
    }
    $10 = HEAP32[$0 >> 2] | 0;
    if ($10 >>> 0 < 2 >>> 0) {
     break label$10
    }
    qsort(HEAP32[($0 + 8 | 0) >> 2] | 0 | 0, $10 | 0, 48 | 0, 28 | 0);
    $8 = HEAP32[($0 + 32 | 0) >> 2] | 0;
   }
   HEAP8[($0 + 105 | 0) >> 0] = 0;
   $2 = $2 & 192 | 0 ? $2 : $2 | 64 | 0;
   HEAP32[($0 + 12 | 0) >> 2] = $2;
   i64toi32_i32$2 = $1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $172 = i64toi32_i32$1;
   i64toi32_i32$1 = $0;
   HEAP32[($0 + 40 | 0) >> 2] = $172;
   HEAP32[($0 + 44 | 0) >> 2] = i64toi32_i32$0;
   $10 = $0 + 48 | 0;
   i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $178 = i64toi32_i32$0;
   i64toi32_i32$0 = $10;
   HEAP32[i64toi32_i32$0 >> 2] = $178;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP8[($0 + 103 | 0) >> 0] = 1;
   HEAP32[($0 + 36 | 0) >> 2] = $8;
   HEAP32[($0 + 32 | 0) >> 2] = HEAP32[($5 + 16016 | 0) >> 2] | 0;
   $14 = Math_fround(HEAPF32[($0 + 56 | 0) >> 2]);
   HEAP32[($0 + 56 | 0) >> 2] = 0;
   HEAPF32[($0 + 60 | 0) >> 2] = $14;
   $14 = Math_fround(HEAPF32[($5 + 14476 | 0) >> 2]);
   HEAPF32[($0 + 112 | 0) >> 2] = $14;
   i64toi32_i32$2 = $5 + 14456 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $25 = -65536;
   HEAP16[($0 + 106 | 0) >> 1] = $25;
   HEAP16[($0 + 108 | 0) >> 1] = $25 >>> 16 | 0;
   $200 = i64toi32_i32$1;
   i64toi32_i32$1 = $0;
   HEAP32[($0 + 116 | 0) >> 2] = $200;
   HEAP32[($0 + 120 | 0) >> 2] = i64toi32_i32$0;
   HEAP8[($0 + 102 | 0) >> 0] = 1;
   $5 = $0 + 52 | 0;
   $15 = Math_fround(HEAPF32[$5 >> 2]);
   HEAP32[($6 + 292 | 0) >> 2] = HEAP32[($0 + 40 | 0) >> 2] | 0;
   HEAPF32[($6 + 296 | 0) >> 2] = Math_fround($14 + $15);
   $2 = ImGui__GetColorU32_28int_2c_20float_29(($2 & 2097152 | 0 ? 35 : 37) | 0, Math_fround(Math_fround(1.0))) | 0;
   $14 = Math_fround(Math_fround(HEAPF32[$5 >> 2]) + Math_fround(-1.0));
   label$13 : {
    if (!$3) {
     break label$13
    }
    $0 = HEAP32[($6 + 672 | 0) >> 2] | 0;
    $17 = Math_fround(HEAPF32[($3 + 60 | 0) >> 2]);
    $15 = Math_fround(HEAPF32[($6 + 124 | 0) >> 2]);
    $18 = Math_fround(HEAPF32[($3 + 52 | 0) >> 2]);
    HEAPF32[($4 + 12 | 0) >> 2] = $14;
    HEAPF32[($4 + 8 | 0) >> 2] = Math_fround($18 + $15);
    HEAPF32[($4 + 4 | 0) >> 2] = $14;
    HEAPF32[$4 >> 2] = Math_fround(Math_fround($18 + $17) - $15);
    ImDrawList__AddLine_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_29($0 | 0, $4 + 8 | 0 | 0, $4 | 0, $2 | 0, Math_fround(Math_fround(1.0)));
    break label$1;
   }
   $15 = Math_fround(HEAPF32[$10 >> 2]);
   $5 = HEAP32[($6 + 672 | 0) >> 2] | 0;
   $18 = Math_fround(HEAPF32[($0 + 40 | 0) >> 2]);
   $17 = Math_fround(HEAPF32[($6 + 112 | 0) >> 2]);
   HEAPF32[($4 + 12 | 0) >> 2] = $14;
   label$14 : {
    label$15 : {
     $17 = Math_fround($17 * Math_fround(.5));
     if (!(Math_fround(Math_abs($17)) < Math_fround(2147483648.0))) {
      break label$15
     }
     $0 = ~~$17;
     break label$14;
    }
    $0 = -2147483648;
   }
   $17 = Math_fround($0 | 0);
   HEAPF32[($4 + 8 | 0) >> 2] = Math_fround($18 - $17);
   HEAPF32[($4 + 4 | 0) >> 2] = $14;
   HEAPF32[$4 >> 2] = Math_fround($15 + $17);
   ImDrawList__AddLine_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_29($5 | 0, $4 + 8 | 0 | 0, $4 | 0, $2 | 0, Math_fround(Math_fround(1.0)));
  }
  __stack_pointer = $4 + 16 | 0;
  return !$7 | 0;
 }
 
 function TabItemComparerByBeginOrder_28void_20const__2c_20void_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return (HEAP16[($0 + 40 | 0) >> 1] | 0) - (HEAP16[($1 + 40 | 0) >> 1] | 0) | 0 | 0;
 }
 
 function ImGui__EndTabBar_28_29() {
  var $2 = 0, $1 = 0, $0 = 0, $5 = Math_fround(0), $3 = 0, $4 = Math_fround(0), $6 = Math_fround(0), i64toi32_i32$1 = 0;
  label$1 : {
   $0 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $1 = HEAP32[($0 + 16116 | 0) >> 2] | 0;
   if (HEAPU8[($1 + 224 | 0) >> 0] | 0) {
    break label$1
   }
   $2 = HEAP32[($0 + 19276 | 0) >> 2] | 0;
   if (!$2) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[($2 + 103 | 0) >> 0] | 0)) {
     break label$2
    }
    ImGui__TabBarLayout_28ImGuiTabBar__29($2 | 0);
   }
   label$3 : {
    label$4 : {
     label$5 : {
      if (HEAPU8[($2 + 104 | 0) >> 0] | 0) {
       break label$5
      }
      if (!(HEAP32[($2 + 28 | 0) >> 2] | 0)) {
       break label$5
      }
      if (((HEAP32[($2 + 36 | 0) >> 2] | 0) + 1 | 0 | 0) >= (HEAP32[($0 + 16016 | 0) >> 2] | 0 | 0)) {
       break label$4
      }
     }
     $3 = $1 + 296 | 0;
     $4 = Math_fround(HEAPF32[($2 + 52 | 0) >> 2]);
     $5 = Math_fround(Math_fround(HEAPF32[$3 >> 2]) - $4);
     $6 = Math_fround(HEAPF32[($2 + 56 | 0) >> 2]);
     $5 = $5 >= $6 ? $5 : $6;
     HEAPF32[($2 + 56 | 0) >> 2] = $5;
     HEAPF32[$3 >> 2] = Math_fround($4 + $5);
     break label$3;
    }
    HEAPF32[($1 + 296 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($2 + 52 | 0) >> 2]) + Math_fround(HEAPF32[($2 + 60 | 0) >> 2]));
   }
   label$6 : {
    if ((HEAP8[($2 + 102 | 0) >> 0] | 0 | 0) < (2 | 0)) {
     break label$6
    }
    i64toi32_i32$1 = HEAP32[($2 + 128 | 0) >> 2] | 0;
    HEAP32[($1 + 292 | 0) >> 2] = HEAP32[($2 + 124 | 0) >> 2] | 0;
    HEAP32[($1 + 296 | 0) >> 2] = i64toi32_i32$1;
   }
   HEAP16[($2 + 108 | 0) >> 1] = 65535;
   label$7 : {
    if ((HEAPU8[($2 + 14 | 0) >> 0] | 0) & 16 | 0) {
     break label$7
    }
    ImGui__PopID_28_29();
   }
   $1 = HEAP32[($0 + 19312 | 0) >> 2] | 0;
   $2 = $1 + -1 | 0;
   HEAP32[($0 + 19312 | 0) >> 2] = $2;
   label$8 : {
    label$9 : {
     if ($2) {
      break label$9
     }
     $2 = 0;
     break label$8;
    }
    $1 = (($1 << 3 | 0) + (HEAP32[($0 + 19320 | 0) >> 2] | 0) | 0) + -16 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    if ($2) {
     break label$8
    }
    $2 = (HEAP32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 19288 | 0) >> 2] | 0) + Math_imul(HEAP32[($1 + 4 | 0) >> 2] | 0, 144) | 0;
   }
   HEAP32[($0 + 19276 | 0) >> 2] = $2;
  }
 }
 
 function ImGui__TabBarLayout_28ImGuiTabBar__29($0) {
  $0 = $0 | 0;
  var $8 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $7 = 0, $17 = Math_fround(0), $5 = 0, i64toi32_i32$2 = 0, $19 = Math_fround(0), $4 = 0, $1 = 0, $20 = Math_fround(0), $6 = 0, $9 = 0, $25 = Math_fround(0), $3 = 0, $16 = 0, $28 = Math_fround(0), $2 = 0, $10 = 0, $23 = 0, $15 = 0, $27 = Math_fround(0), $11 = 0, $22 = 0, $29 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $24 = Math_fround(0), $30 = Math_fround(0), $18 = 0, $18$hi = 0, $62 = 0, $63 = 0, $21 = 0, $26 = 0, $26$hi = 0, $92 = 0, $97 = 0, $102 = 0, $107 = 0, $112 = 0, $117 = 0, $318 = 0, $325 = 0, $332 = 0, $339 = 0, $346 = 0, $349 = 0, $376 = 0, $380 = 0, $384 = 0, $388 = 0, $392 = 0, $395 = 0, $448 = 0, $452 = 0, $709 = 0, $793 = 0, $797 = 0, $853 = 0, $870 = 0, $1664 = 0;
  $1 = __stack_pointer - 160 | 0;
  __stack_pointer = $1;
  $2 = 0;
  $3 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  HEAP8[($0 + 103 | 0) >> 0] = 0;
  HEAP32[(($1 + 32 | 0) + 32 | 0) >> 2] = 0;
  i64toi32_i32$1 = ($1 + 32 | 0) + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = ($1 + 32 | 0) + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    $4 = HEAP32[$0 >> 2] | 0;
    if (($4 | 0) >= (1 | 0)) {
     break label$2
    }
    $5 = 0;
    break label$1;
   }
   $6 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   $5 = 0;
   $2 = 0;
   $7 = 0;
   label$3 : while (1) {
    label$4 : {
     label$5 : {
      label$6 : {
       $8 = $6 + Math_imul($7, 48) | 0;
       if ((HEAP32[($8 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($0 + 36 | 0) >> 2] | 0 | 0)) {
        break label$6
       }
       if (!((HEAPU8[($8 + 44 | 0) >> 0] | 0) & 255 | 0)) {
        break label$5
       }
      }
      label$7 : {
       $8 = HEAP32[$8 >> 2] | 0;
       if ((HEAP32[($0 + 28 | 0) >> 2] | 0 | 0) != ($8 | 0)) {
        break label$7
       }
       HEAP32[($0 + 28 | 0) >> 2] = 0;
      }
      label$8 : {
       if ((HEAP32[($0 + 20 | 0) >> 2] | 0 | 0) != ($8 | 0)) {
        break label$8
       }
       HEAP32[($0 + 20 | 0) >> 2] = 0;
      }
      if ((HEAP32[($0 + 24 | 0) >> 2] | 0 | 0) != ($8 | 0)) {
       break label$4
      }
      HEAP32[($0 + 24 | 0) >> 2] = 0;
      break label$4;
     }
     label$9 : {
      if (($5 | 0) == ($7 | 0)) {
       break label$9
      }
      $6 = $6 + Math_imul($5, 48) | 0;
      i64toi32_i32$2 = $8;
      i64toi32_i32$0 = HEAP32[$8 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($8 + 4 | 0) >> 2] | 0;
      $92 = i64toi32_i32$0;
      i64toi32_i32$0 = $6;
      HEAP32[i64toi32_i32$0 >> 2] = $92;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $8 + 37 | 0;
      i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      $97 = i64toi32_i32$1;
      i64toi32_i32$1 = $6 + 37 | 0;
      $62 = $97;
      HEAP8[i64toi32_i32$1 >> 0] = $62;
      HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $62 >>> 8 | 0;
      HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $62 >>> 16 | 0;
      HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $62 >>> 24 | 0;
      HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
      HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
      HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
      HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
      i64toi32_i32$2 = $8 + 32 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $102 = i64toi32_i32$0;
      i64toi32_i32$0 = $6 + 32 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $102;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $8 + 24 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $107 = i64toi32_i32$1;
      i64toi32_i32$1 = $6 + 24 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $107;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $8 + 16 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $112 = i64toi32_i32$0;
      i64toi32_i32$0 = $6 + 16 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $112;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $8 + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $117 = i64toi32_i32$1;
      i64toi32_i32$1 = $6 + 8 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $117;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $6 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     }
     $8 = $6 + Math_imul($5, 48) | 0;
     HEAP16[($8 + 42 | 0) >> 1] = $5;
     $4 = HEAP32[($8 + 4 | 0) >> 2] | 0;
     $9 = $4 & 64 | 0;
     $10 = $9 >>> 6 | 0 ? 0 : $4 & 128 | 0 ? 2 : 1;
     label$10 : {
      if (($5 | 0) < (1 | 0)) {
       break label$10
      }
      $8 = HEAP32[($8 + -44 | 0) >> 2] | 0;
      $2 = ($4 & 192 | 0 | 0) != (128 | 0) & ($8 & 192 | 0 | 0) == (128 | 0) | 0 | (($9 | 0) != (0 | 0) & !($8 & 64 | 0) | 0) | 0 | $2 | 0;
     }
     $8 = ($1 + 32 | 0) + Math_imul($10, 12) | 0;
     HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 1 | 0;
     $5 = $5 + 1 | 0;
     $4 = HEAP32[$0 >> 2] | 0;
    }
    $7 = $7 + 1 | 0;
    if (($7 | 0) < ($4 | 0)) {
     continue label$3
    }
    break label$3;
   };
  }
  label$11 : {
   if (($4 | 0) == ($5 | 0)) {
    break label$11
   }
   label$12 : {
    $8 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if (($8 | 0) >= ($5 | 0)) {
     break label$12
    }
    label$13 : {
     label$14 : {
      if ($8) {
       break label$14
      }
      $7 = 8;
      break label$13;
     }
     $7 = (($8 | 0) / (2 | 0) | 0) + $8 | 0;
    }
    $7 = ($7 | 0) > ($5 | 0) ? $7 : $5;
    if (($8 | 0) >= ($7 | 0)) {
     break label$12
    }
    $8 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($7, 48) | 0) | 0;
    label$15 : {
     $6 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     if (!$6) {
      break label$15
     }
     __memcpy($8 | 0, $6 | 0, Math_imul(HEAP32[$0 >> 2] | 0, 48) | 0) | 0;
     ImGui__MemFree_28void__29(HEAP32[($0 + 8 | 0) >> 2] | 0 | 0);
    }
    HEAP32[($0 + 4 | 0) >> 2] = $7;
    HEAP32[($0 + 8 | 0) >> 2] = $8;
   }
   HEAP32[$0 >> 2] = $5;
  }
  label$16 : {
   if (($2 & $5 >>> 0 > 1 >>> 0 | 0 | 0) != (1 | 0)) {
    break label$16
   }
   qsort(HEAP32[($0 + 8 | 0) >> 2] | 0 | 0, $5 | 0, 48 | 0, 29 | 0);
  }
  $11 = HEAP32[($1 + 44 | 0) >> 2] | 0;
  $12 = HEAP32[($1 + 56 | 0) >> 2] | 0;
  $13 = Math_fround(0.0);
  $14 = Math_fround(0.0);
  label$17 : {
   $15 = HEAP32[($1 + 32 | 0) >> 2] | 0;
   if (($15 | 0) < (1 | 0)) {
    break label$17
   }
   $14 = Math_fround(0.0);
   if (($12 + $11 | 0 | 0) < (1 | 0)) {
    break label$17
   }
   $14 = Math_fround(HEAPF32[($3 + 14480 | 0) >> 2]);
  }
  HEAPF32[($1 + 40 | 0) >> 2] = $14;
  label$18 : {
   if (($11 | 0) < (1 | 0)) {
    break label$18
   }
   if (($12 | 0) < (1 | 0)) {
    break label$18
   }
   $13 = Math_fround(HEAPF32[($3 + 14480 | 0) >> 2]);
  }
  HEAPF32[($1 + 52 | 0) >> 2] = $13;
  label$19 : {
   $2 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   if (!$2) {
    break label$19
   }
   HEAP32[($0 + 24 | 0) >> 2] = 0;
   HEAP32[($0 + 20 | 0) >> 2] = $2;
  }
  label$20 : {
   $7 = HEAP32[($0 + 96 | 0) >> 2] | 0;
   if (!$7) {
    break label$20
   }
   label$21 : {
    $6 = HEAP32[$0 >> 2] | 0;
    if (($6 | 0) < (1 | 0)) {
     break label$21
    }
    $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    $8 = 0;
    label$22 : {
     label$23 : while (1) {
      $4 = $5 + Math_imul($8, 48) | 0;
      if ((HEAP32[$4 >> 2] | 0 | 0) == ($7 | 0)) {
       break label$22
      }
      $8 = $8 + 1 | 0;
      if (($8 | 0) == ($6 | 0)) {
       break label$21
      }
      continue label$23;
     };
    }
    $7 = HEAP32[(($5 + Math_imul($8, 48) | 0) + 4 | 0) >> 2] | 0;
    if ($7 & 32 | 0) {
     break label$21
    }
    $10 = HEAP16[($0 + 100 | 0) >> 1] | 0;
    $8 = $8 + $10 | 0;
    if (($8 | 0) < (0 | 0)) {
     break label$21
    }
    if (($8 | 0) >= ($6 | 0)) {
     break label$21
    }
    $8 = $5 + Math_imul($8, 48) | 0;
    $5 = HEAP32[($8 + 4 | 0) >> 2] | 0;
    if ($5 & 32 | 0) {
     break label$21
    }
    if (($5 ^ $7 | 0) & 192 | 0) {
     break label$21
    }
    i64toi32_i32$2 = $4 + 40 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $318 = i64toi32_i32$0;
    i64toi32_i32$0 = ($1 + 80 | 0) + 40 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $318;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $7 = ($1 + 80 | 0) + 32 | 0;
    i64toi32_i32$2 = $4 + 32 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $325 = i64toi32_i32$1;
    i64toi32_i32$1 = $7;
    HEAP32[i64toi32_i32$1 >> 2] = $325;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $5 = ($1 + 80 | 0) + 24 | 0;
    i64toi32_i32$2 = $4 + 24 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $332 = i64toi32_i32$0;
    i64toi32_i32$0 = $5;
    HEAP32[i64toi32_i32$0 >> 2] = $332;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $6 = ($1 + 80 | 0) + 16 | 0;
    i64toi32_i32$2 = $4 + 16 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $339 = i64toi32_i32$1;
    i64toi32_i32$1 = $6;
    HEAP32[i64toi32_i32$1 >> 2] = $339;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $9 = ($1 + 80 | 0) + 8 | 0;
    i64toi32_i32$2 = $4 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $346 = i64toi32_i32$0;
    i64toi32_i32$0 = $9;
    HEAP32[i64toi32_i32$0 >> 2] = $346;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $4;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $349 = i64toi32_i32$1;
    i64toi32_i32$1 = $1;
    HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] = $349;
    HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] = i64toi32_i32$0;
    $16 = ($10 | 0) > (0 | 0);
    $4 = $10 >> 31 | 0;
    memmove(($16 ? i64toi32_i32$2 : $8 + 48 | 0) | 0, ($16 ? i64toi32_i32$2 + 48 | 0 : $8) | 0, Math_imul(($10 ^ $4 | 0) - $4 | 0, 48) | 0) | 0;
    i64toi32_i32$2 = (i64toi32_i32$1 + 80 | 0) + 37 | 0;
    i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $376 = i64toi32_i32$0;
    i64toi32_i32$0 = $8 + 37 | 0;
    $63 = $376;
    HEAP8[i64toi32_i32$0 >> 0] = $63;
    HEAP8[(i64toi32_i32$0 + 1 | 0) >> 0] = $63 >>> 8 | 0;
    HEAP8[(i64toi32_i32$0 + 2 | 0) >> 0] = $63 >>> 16 | 0;
    HEAP8[(i64toi32_i32$0 + 3 | 0) >> 0] = $63 >>> 24 | 0;
    HEAP8[(i64toi32_i32$0 + 4 | 0) >> 0] = i64toi32_i32$1;
    HEAP8[(i64toi32_i32$0 + 5 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
    HEAP8[(i64toi32_i32$0 + 6 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
    HEAP8[(i64toi32_i32$0 + 7 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
    i64toi32_i32$2 = $7;
    i64toi32_i32$1 = HEAP32[$7 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($7 + 4 | 0) >> 2] | 0;
    $380 = i64toi32_i32$1;
    i64toi32_i32$1 = $8 + 32 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $380;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $5;
    i64toi32_i32$0 = HEAP32[$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($5 + 4 | 0) >> 2] | 0;
    $384 = i64toi32_i32$0;
    i64toi32_i32$0 = $8 + 24 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $384;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $6;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $388 = i64toi32_i32$1;
    i64toi32_i32$1 = $8 + 16 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $388;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $9;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $392 = i64toi32_i32$0;
    i64toi32_i32$0 = $8 + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $392;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] | 0;
    $395 = i64toi32_i32$1;
    i64toi32_i32$1 = $8;
    HEAP32[$8 >> 2] = $395;
    HEAP32[($8 + 4 | 0) >> 2] = i64toi32_i32$0;
    label$24 : {
     if (!((HEAPU8[($0 + 14 | 0) >> 0] | 0) & 64 | 0)) {
      break label$24
     }
     ImGui__MarkIniSettingsDirty_28_29();
    }
    $8 = HEAP32[($0 + 96 | 0) >> 2] | 0;
    $2 = ($8 | 0) == (HEAP32[($0 + 20 | 0) >> 2] | 0 | 0) ? $8 : $2;
   }
   HEAP32[($0 + 96 | 0) >> 2] = 0;
  }
  label$25 : {
   if (!((HEAPU8[($0 + 12 | 0) >> 0] | 0) & 4 | 0)) {
    break label$25
   }
   $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $17 = Math_fround(HEAPF32[($8 + 14460 | 0) >> 2]);
   $9 = HEAP32[($8 + 16116 | 0) >> 2] | 0;
   i64toi32_i32$2 = $9;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 292 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 296 | 0) >> 2] | 0;
   $18 = i64toi32_i32$0;
   $18$hi = i64toi32_i32$1;
   $19 = Math_fround(HEAPF32[($8 + 15488 | 0) >> 2]);
   $20 = Math_fround(HEAPF32[($0 + 40 | 0) >> 2]);
   HEAP32[(i64toi32_i32$2 + 296 | 0) >> 2] = HEAP32[($0 + 44 | 0) >> 2] | 0;
   HEAPF32[(i64toi32_i32$2 + 292 | 0) >> 2] = Math_fround($20 - $17);
   HEAPF32[($0 + 40 | 0) >> 2] = Math_fround(Math_fround($19 + $17) + Math_fround(HEAPF32[($0 + 40 | 0) >> 2]));
   i64toi32_i32$2 = $8 + 14604 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $448 = i64toi32_i32$1;
   i64toi32_i32$1 = ($1 + 80 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $448;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $8 + 14596 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $452 = i64toi32_i32$0;
   i64toi32_i32$0 = $1;
   HEAP32[(i64toi32_i32$0 + 80 | 0) >> 2] = $452;
   HEAP32[(i64toi32_i32$0 + 84 | 0) >> 2] = i64toi32_i32$1;
   HEAPF32[(i64toi32_i32$0 + 92 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[(i64toi32_i32$0 + 92 | 0) >> 2]) * Math_fround(.5));
   ImGui__PushStyleColor_28int_2c_20ImVec4_20const__29(0 | 0, i64toi32_i32$0 + 80 | 0 | 0);
   i64toi32_i32$0 = (i64toi32_i32$0 + 144 | 0) + 8 | 0;
   i64toi32_i32$1 = 0;
   HEAP32[i64toi32_i32$0 >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$0 = $1;
   i64toi32_i32$1 = 0;
   HEAP32[(i64toi32_i32$0 + 144 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 148 | 0) >> 2] = i64toi32_i32$1;
   ImGui__PushStyleColor_28int_2c_20ImVec4_20const__29(21 | 0, i64toi32_i32$0 + 144 | 0 | 0);
   $8 = ImGui__BeginCombo_28char_20const__2c_20char_20const__2c_20int_29(65674 | 0, 0 | 0, 80 | 0) | 0;
   ImGui__PopStyleColor_28int_29(2 | 0);
   label$26 : {
    if ($8) {
     break label$26
    }
    i64toi32_i32$1 = $18$hi;
    i64toi32_i32$0 = $9;
    HEAP32[(i64toi32_i32$0 + 292 | 0) >> 2] = $18;
    HEAP32[(i64toi32_i32$0 + 296 | 0) >> 2] = i64toi32_i32$1;
    break label$25;
   }
   label$27 : {
    $5 = HEAP32[$0 >> 2] | 0;
    if (($5 | 0) > (0 | 0)) {
     break label$27
    }
    ImGui__EndPopup_28_29();
    i64toi32_i32$1 = $18$hi;
    i64toi32_i32$0 = $9;
    HEAP32[(i64toi32_i32$0 + 292 | 0) >> 2] = $18;
    HEAP32[(i64toi32_i32$0 + 296 | 0) >> 2] = i64toi32_i32$1;
    break label$25;
   }
   $6 = 0;
   $8 = 0;
   label$28 : while (1) {
    label$29 : {
     $7 = (HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul($8, 48) | 0;
     if ((HEAPU8[($7 + 6 | 0) >> 0] | 0) & 32 | 0) {
      break label$29
     }
     label$30 : {
      label$31 : {
       $5 = HEAP32[($7 + 8 | 0) >> 2] | 0;
       if (!$5) {
        break label$31
       }
       $5 = HEAP32[$5 >> 2] | 0;
       break label$30;
      }
      label$32 : {
       $5 = HEAP32[($7 + 36 | 0) >> 2] | 0;
       if (($5 | 0) != (-1 | 0)) {
        break label$32
       }
       $5 = 67672;
       break label$30;
      }
      $5 = (HEAP32[($0 + 140 | 0) >> 2] | 0) + $5 | 0;
     }
     $4 = HEAP32[$7 >> 2] | 0;
     $10 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     i64toi32_i32$0 = $1;
     i64toi32_i32$1 = 0;
     HEAP32[(i64toi32_i32$0 + 144 | 0) >> 2] = 0;
     HEAP32[(i64toi32_i32$0 + 148 | 0) >> 2] = i64toi32_i32$1;
     $6 = ImGui__Selectable_28char_20const__2c_20bool_2c_20int_2c_20ImVec2_20const__29($5 | 0, ($10 | 0) == ($4 | 0) | 0, 0 | 0, i64toi32_i32$0 + 144 | 0 | 0) | 0 ? $7 : $6;
     $5 = HEAP32[$0 >> 2] | 0;
    }
    $8 = $8 + 1 | 0;
    if (($8 | 0) < ($5 | 0)) {
     continue label$28
    }
    break label$28;
   };
   ImGui__EndPopup_28_29();
   i64toi32_i32$1 = $18$hi;
   i64toi32_i32$0 = $9;
   HEAP32[(i64toi32_i32$0 + 292 | 0) >> 2] = $18;
   HEAP32[(i64toi32_i32$0 + 296 | 0) >> 2] = i64toi32_i32$1;
   if (!$6) {
    break label$25
   }
   $2 = HEAP32[$6 >> 2] | 0;
   HEAP32[($0 + 20 | 0) >> 2] = $2;
  }
  $10 = 0;
  HEAP32[($1 + 20 | 0) >> 2] = 0;
  HEAP32[($1 + 28 | 0) >> 2] = $15;
  $21 = $12 + $15 | 0;
  HEAP32[($1 + 24 | 0) >> 2] = $21;
  $7 = HEAP32[$0 >> 2] | 0;
  $8 = $7;
  label$33 : {
   $5 = HEAP32[($3 + 19328 | 0) >> 2] | 0;
   if (($5 | 0) >= ($8 | 0)) {
    break label$33
   }
   label$34 : {
    label$35 : {
     if ($5) {
      break label$35
     }
     $6 = 8;
     break label$34;
    }
    $6 = (($5 | 0) / (2 | 0) | 0) + $5 | 0;
   }
   $8 = $7;
   $6 = ($6 | 0) > ($8 | 0) ? $6 : $8;
   if (($5 | 0) >= ($6 | 0)) {
    break label$33
   }
   $8 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($6, 12) | 0) | 0;
   label$36 : {
    $5 = HEAP32[($3 + 19332 | 0) >> 2] | 0;
    if (!$5) {
     break label$36
    }
    __memcpy($8 | 0, $5 | 0, Math_imul(HEAP32[($3 + 19324 | 0) >> 2] | 0, 12) | 0) | 0;
    ImGui__MemFree_28void__29(HEAP32[($3 + 19332 | 0) >> 2] | 0 | 0);
   }
   HEAP32[($3 + 19328 | 0) >> 2] = $6;
   HEAP32[($3 + 19332 | 0) >> 2] = $8;
   $8 = HEAP32[$0 >> 2] | 0;
  }
  HEAP32[($3 + 19324 | 0) >> 2] = $7;
  label$37 : {
   label$38 : {
    if (($8 | 0) >= (1 | 0)) {
     break label$38
    }
    $19 = Math_fround(0.0);
    $20 = Math_fround(0.0);
    $17 = Math_fround(0.0);
    $6 = 0;
    break label$37;
   }
   $6 = 0;
   $4 = -1;
   $10 = 0;
   $7 = 0;
   label$39 : while (1) {
    $8 = (HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul($7, 48) | 0;
    label$40 : {
     label$41 : {
      if (!$6) {
       break label$41
      }
      if ((HEAP32[($6 + 16 | 0) >> 2] | 0 | 0) >= (HEAP32[($8 + 16 | 0) >> 2] | 0 | 0)) {
       break label$40
      }
     }
     $6 = (HEAPU8[($8 + 6 | 0) >> 0] | 0) & 32 | 0 ? $6 : $8;
    }
    $5 = HEAP32[$8 >> 2] | 0;
    label$42 : {
     if ($2) {
      break label$42
     }
     $2 = (HEAP32[($3 + 18680 | 0) >> 2] | 0 | 0) == ($5 | 0) ? $5 : 0;
    }
    label$43 : {
     label$44 : {
      $9 = HEAP32[($8 + 8 | 0) >> 2] | 0;
      if (!$9) {
       break label$44
      }
      $16 = HEAP32[$9 >> 2] | 0;
      break label$43;
     }
     label$45 : {
      $9 = HEAP32[($8 + 36 | 0) >> 2] | 0;
      if (($9 | 0) != (-1 | 0)) {
       break label$45
      }
      $16 = 67672;
      break label$43;
     }
     $16 = (HEAP32[($0 + 140 | 0) >> 2] | 0) + $9 | 0;
    }
    $9 = HEAP32[($0 + 20 | 0) >> 2] | 0;
    label$46 : {
     $17 = Math_fround(HEAPF32[($8 + 32 | 0) >> 2]);
     if ($17 >= Math_fround(0.0)) {
      break label$46
     }
     $22 = HEAP32[($8 + 4 | 0) >> 2] | 0;
     $23 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
     ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($1 + 80 | 0 | 0, $16 | 0, 0 | 0, 1 | 0, Math_fround(Math_fround(-1.0)));
     $17 = Math_fround(HEAPF32[($23 + 14456 | 0) >> 2]);
     $19 = Math_fround(1.0);
     $20 = Math_fround(HEAPF32[($1 + 80 | 0) >> 2]);
     label$47 : {
      if (($22 & 1048577 | 0 | 0) == (1048576 | 0)) {
       break label$47
      }
      $19 = Math_fround(Math_fround(HEAPF32[($23 + 14480 | 0) >> 2]) + Math_fround(HEAPF32[($23 + 15488 | 0) >> 2]));
     }
     $17 = Math_fround(Math_fround($20 + $17) + Math_fround($17 + $19));
     $19 = Math_fround(Math_fround(HEAPF32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 15488 | 0) >> 2]) * Math_fround(20.0));
     $17 = $17 < $19 ? $17 : $19;
    }
    $9 = ($5 | 0) == ($9 | 0);
    HEAPF32[($8 + 28 | 0) >> 2] = $17;
    $19 = Math_fround(0.0);
    label$48 : {
     $5 = HEAP32[($8 + 4 | 0) >> 2] | 0;
     $5 = $5 & 64 | 0 ? 0 : $5 & 128 | 0 ? 2 : 1;
     if (($5 | 0) != ($4 | 0)) {
      break label$48
     }
     $19 = Math_fround(HEAPF32[($3 + 14480 | 0) >> 2]);
    }
    $10 = $9 | $10 | 0;
    $4 = ($1 + 32 | 0) + Math_imul($5, 12) | 0;
    HEAPF32[($4 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4 + 4 | 0) >> 2]) + Math_fround($17 + $19));
    $4 = ($1 + 20 | 0) + ($5 << 2 | 0) | 0;
    $709 = $4;
    $4 = HEAP32[$4 >> 2] | 0;
    HEAP32[$709 >> 2] = $4 + 1 | 0;
    $4 = (HEAP32[($3 + 19332 | 0) >> 2] | 0) + Math_imul($4, 12) | 0;
    HEAPF32[($4 + 8 | 0) >> 2] = $17;
    HEAP32[$4 >> 2] = $7;
    HEAPF32[($4 + 4 | 0) >> 2] = $17;
    HEAPF32[($8 + 24 | 0) >> 2] = $17 >= Math_fround(1.0) ? $17 : Math_fround(1.0);
    $4 = $5;
    $7 = $7 + 1 | 0;
    $8 = HEAP32[$0 >> 2] | 0;
    if (($7 | 0) < ($8 | 0)) {
     continue label$39
    }
    break label$39;
   };
   $19 = Math_fround(HEAPF32[($1 + 60 | 0) >> 2]);
   $20 = Math_fround(HEAPF32[($1 + 48 | 0) >> 2]);
   $17 = Math_fround(HEAPF32[($1 + 36 | 0) >> 2]);
  }
  $17 = Math_fround($17 + $14);
  $24 = Math_fround($20 + $13);
  $19 = Math_fround($19 + Math_fround(0.0));
  $25 = Math_fround(Math_fround(Math_fround($17 + Math_fround(0.0)) + $24) + $19);
  HEAPF32[($0 + 68 | 0) >> 2] = $25;
  label$49 : {
   $20 = Math_fround(HEAPF32[($0 + 48 | 0) >> 2]);
   if (!($25 > Math_fround($20 - Math_fround(HEAPF32[($0 + 40 | 0) >> 2])))) {
    break label$49
   }
   if (($8 | 0) <= (1 | 0)) {
    break label$49
   }
   if (((HEAP32[($0 + 12 | 0) >> 2] | 0) & 144 | 0 | 0) != (128 | 0)) {
    break label$49
   }
   $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $25 = Math_fround(HEAPF32[($8 + 14460 | 0) >> 2]);
   $9 = HEAP32[($8 + 16116 | 0) >> 2] | 0;
   i64toi32_i32$2 = $9;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 292 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 296 | 0) >> 2] | 0;
   $26 = i64toi32_i32$1;
   $26$hi = i64toi32_i32$0;
   $27 = Math_fround(HEAPF32[($8 + 15488 | 0) >> 2]);
   i64toi32_i32$2 = $8 + 14604 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $793 = i64toi32_i32$0;
   i64toi32_i32$0 = ($1 + 80 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $793;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $8 + 14596 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $797 = i64toi32_i32$1;
   i64toi32_i32$1 = $1;
   HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] = $797;
   HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] = i64toi32_i32$0;
   HEAPF32[(i64toi32_i32$1 + 92 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[(i64toi32_i32$1 + 92 | 0) >> 2]) * Math_fround(.5));
   ImGui__PushStyleColor_28int_2c_20ImVec4_20const__29(0 | 0, i64toi32_i32$1 + 80 | 0 | 0);
   i64toi32_i32$1 = (i64toi32_i32$1 + 144 | 0) + 8 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] = i64toi32_i32$0;
   ImGui__PushStyleColor_28int_2c_20ImVec4_20const__29(21 | 0, i64toi32_i32$1 + 144 | 0 | 0);
   $8 = $8 + 52 | 0;
   i64toi32_i32$2 = $8;
   i64toi32_i32$0 = HEAP32[$8 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($8 + 4 | 0) >> 2] | 0;
   $18 = i64toi32_i32$0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $8;
   i64toi32_i32$1 = 1045220557;
   HEAP32[$8 >> 2] = 1048576e3;
   HEAP32[($8 + 4 | 0) >> 2] = i64toi32_i32$1;
   $28 = Math_fround(HEAPF32[($0 + 40 | 0) >> 2]);
   $29 = Math_fround(HEAPF32[($0 + 48 | 0) >> 2]);
   $7 = $9 + 296 | 0;
   $5 = $0 + 44 | 0;
   HEAP32[$7 >> 2] = HEAP32[$5 >> 2] | 0;
   $20 = Math_fround($27 + Math_fround(-2.0));
   $30 = Math_fround($20 + $20);
   $29 = Math_fround($29 - $30);
   $28 = $28 >= $29 ? $28 : $29;
   HEAPF32[($9 + 292 | 0) >> 2] = $28;
   $25 = Math_fround($27 + Math_fround($25 + $25));
   HEAPF32[($1 + 140 | 0) >> 2] = $25;
   HEAPF32[($1 + 136 | 0) >> 2] = $20;
   i64toi32_i32$2 = $1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 136 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 140 | 0) >> 2] | 0;
   $853 = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$2;
   HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $853;
   HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
   $4 = ImGui__ArrowButtonEx_28char_20const__2c_20int_2c_20ImVec2_2c_20int_29(67687 | 0, 0 | 0, i64toi32_i32$1 + 8 | 0 | 0, 1040 | 0) | 0;
   HEAP32[$7 >> 2] = HEAP32[$5 >> 2] | 0;
   HEAPF32[($9 + 292 | 0) >> 2] = Math_fround($20 + $28);
   HEAPF32[(i64toi32_i32$1 + 132 | 0) >> 2] = $25;
   HEAPF32[(i64toi32_i32$1 + 128 | 0) >> 2] = $20;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 128 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$1 + 132 | 0) >> 2] | 0;
   $870 = i64toi32_i32$0;
   i64toi32_i32$0 = i64toi32_i32$2;
   HEAP32[i64toi32_i32$0 >> 2] = $870;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $7 = ImGui__ArrowButtonEx_28char_20const__2c_20int_2c_20ImVec2_2c_20int_29(67683 | 0, 1 | 0, i64toi32_i32$0 | 0, 1040 | 0) | 0;
   ImGui__PopStyleColor_28int_29(2 | 0);
   i64toi32_i32$1 = $18$hi;
   i64toi32_i32$0 = $8;
   HEAP32[$8 >> 2] = $18;
   HEAP32[($8 + 4 | 0) >> 2] = i64toi32_i32$1;
   label$50 : {
    $16 = $7 ? 1 : 0 - $4 | 0;
    if (!$16) {
     break label$50
    }
    $7 = HEAP32[($0 + 20 | 0) >> 2] | 0;
    if (!$7) {
     break label$50
    }
    $5 = HEAP32[$0 >> 2] | 0;
    if (($5 | 0) < (1 | 0)) {
     break label$50
    }
    $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    $8 = 0;
    label$51 : {
     label$52 : while (1) {
      if ((HEAP32[($4 + Math_imul($8, 48) | 0) >> 2] | 0 | 0) == ($7 | 0)) {
       break label$51
      }
      $8 = $8 + 1 | 0;
      if (($8 | 0) == ($5 | 0)) {
       break label$50
      }
      continue label$52;
     };
    }
    $7 = $8 + $16 | 0;
    label$53 : {
     label$54 : while (1) {
      label$55 : {
       $23 = ($7 | 0) > (-1 | 0) ? (($7 | 0) < ($5 | 0) ? $7 : $8) : $8;
       $22 = $4 + Math_imul($23, 48) | 0;
       if ((HEAPU8[($22 + 6 | 0) >> 0] | 0) & 32 | 0) {
        break label$55
       }
       i64toi32_i32$1 = $26$hi;
       i64toi32_i32$0 = $9;
       HEAP32[(i64toi32_i32$0 + 292 | 0) >> 2] = $26;
       HEAP32[(i64toi32_i32$0 + 296 | 0) >> 2] = i64toi32_i32$1;
       $20 = Math_fround(Math_fround(HEAPF32[($0 + 48 | 0) >> 2]) - Math_fround($30 + Math_fround(1.0)));
       HEAPF32[($0 + 48 | 0) >> 2] = $20;
       break label$53;
      }
      label$56 : {
       $7 = $7 + $16 | 0;
       if (($7 | 0) < (0 | 0)) {
        break label$56
       }
       $8 = $8 + $16 | 0;
       if (($7 | 0) < ($5 | 0)) {
        continue label$54
       }
      }
      break label$54;
     };
     i64toi32_i32$1 = $26$hi;
     i64toi32_i32$0 = $9;
     HEAP32[(i64toi32_i32$0 + 292 | 0) >> 2] = $26;
     HEAP32[(i64toi32_i32$0 + 296 | 0) >> 2] = i64toi32_i32$1;
     $20 = Math_fround(Math_fround(HEAPF32[($0 + 48 | 0) >> 2]) - Math_fround($30 + Math_fround(1.0)));
     HEAPF32[($0 + 48 | 0) >> 2] = $20;
     if (!$4) {
      break label$49
     }
    }
    $2 = HEAP32[($4 + Math_imul($23, 48) | 0) >> 2] | 0;
    if ((HEAPU8[(($22 + 4 | 0) + 2 | 0) >> 0] | 0) & 32 | 0) {
     break label$49
    }
    HEAP32[($0 + 20 | 0) >> 2] = $2;
    break label$49;
   }
   i64toi32_i32$1 = $26$hi;
   i64toi32_i32$0 = $9;
   HEAP32[(i64toi32_i32$0 + 292 | 0) >> 2] = $26;
   HEAP32[(i64toi32_i32$0 + 296 | 0) >> 2] = i64toi32_i32$1;
   $20 = Math_fround(Math_fround(HEAPF32[($0 + 48 | 0) >> 2]) - Math_fround($30 + Math_fround(1.0)));
   HEAPF32[($0 + 48 | 0) >> 2] = $20;
  }
  label$57 : {
   label$58 : {
    label$59 : {
     $25 = Math_fround($17 + $19);
     $20 = Math_fround($20 - Math_fround(HEAPF32[($0 + 40 | 0) >> 2]));
     $7 = $25 < $20;
     if (!$7) {
      break label$59
     }
     $17 = Math_fround($24 - Math_fround(Math_fround($20 - $17) - $19));
     if ($17 >= Math_fround(0.0)) {
      break label$58
     }
     break label$57;
    }
    $17 = Math_fround($25 - $20);
   }
   if (!($17 >= Math_fround(1.0))) {
    break label$57
   }
   label$60 : {
    if (!$7) {
     break label$60
    }
    if (!((HEAP32[($0 + 12 | 0) >> 2] | 0) & 64 | 0)) {
     break label$57
    }
   }
   $8 = $7 ? $21 : 0;
   $7 = $7 ? $11 : $21;
   ImGui__ShrinkWidths_28ImGuiShrinkWidthItem__2c_20int_2c_20float_29((HEAP32[($3 + 19332 | 0) >> 2] | 0) + Math_imul($8, 12) | 0 | 0, $7 | 0, Math_fround($17));
   if (($7 | 0) < (1 | 0)) {
    break label$57
   }
   $9 = $8 + $7 | 0;
   $16 = HEAP32[($3 + 19332 | 0) >> 2] | 0;
   label$61 : while (1) {
    label$62 : {
     label$63 : {
      $5 = $16 + Math_imul($8, 12) | 0;
      $17 = Math_fround(HEAPF32[($5 + 4 | 0) >> 2]);
      if (!(Math_fround(Math_abs($17)) < Math_fround(2147483648.0))) {
       break label$63
      }
      $7 = ~~$17;
      break label$62;
     }
     $7 = -2147483648;
    }
    label$64 : {
     if (($7 | 0) < (0 | 0)) {
      break label$64
     }
     $5 = (HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[$5 >> 2] | 0, 48) | 0;
     $4 = HEAP32[($5 + 4 | 0) >> 2] | 0;
     $4 = ($1 + 32 | 0) + Math_imul($4 & 64 | 0 ? 0 : $4 & 128 | 0 ? 2 : 1, 12) | 0;
     $17 = Math_fround(Math_max(Math_fround($7 | 0), Math_fround(1.0)));
     HEAPF32[($4 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4 + 4 | 0) >> 2]) - Math_fround(Math_fround(HEAPF32[($5 + 24 | 0) >> 2]) - $17));
     HEAPF32[($5 + 24 | 0) >> 2] = $17;
    }
    $8 = $8 + 1 | 0;
    if (($8 | 0) < ($9 | 0)) {
     continue label$61
    }
    break label$61;
   };
  }
  $17 = Math_fround(0.0);
  label$65 : {
   if (($15 | 0) < (1 | 0)) {
    break label$65
   }
   $22 = $15 & 1 | 0;
   $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   label$66 : {
    label$67 : {
     $4 = $15 + -1 | 0;
     if ($4) {
      break label$67
     }
     $17 = Math_fround(0.0);
     $8 = 0;
     break label$66;
    }
    $23 = $15 & -2 | 0;
    $17 = Math_fround(0.0);
    $8 = 0;
    $9 = 0;
    label$68 : while (1) {
     $7 = $5 + Math_imul($8, 48) | 0;
     HEAP32[($7 + 36 | 0) >> 2] = -1;
     HEAPF32[($7 + 20 | 0) >> 2] = $17;
     $20 = Math_fround(HEAPF32[($7 + 24 | 0) >> 2]);
     $19 = Math_fround(0.0);
     label$69 : {
      if (($8 | 0) >= ($4 | 0)) {
       break label$69
      }
      $19 = Math_fround(HEAPF32[($3 + 14480 | 0) >> 2]);
     }
     $16 = $8 | 1 | 0;
     $7 = $5 + Math_imul($16, 48) | 0;
     HEAP32[($7 + 36 | 0) >> 2] = -1;
     $19 = Math_fround($17 + Math_fround($20 + $19));
     HEAPF32[($7 + 20 | 0) >> 2] = $19;
     $20 = Math_fround(HEAPF32[($7 + 24 | 0) >> 2]);
     $17 = Math_fround(0.0);
     label$70 : {
      if (($16 | 0) >= ($4 | 0)) {
       break label$70
      }
      $17 = Math_fround(HEAPF32[($3 + 14480 | 0) >> 2]);
     }
     $8 = $8 + 2 | 0;
     $17 = Math_fround($19 + Math_fround($20 + $17));
     $9 = $9 + 2 | 0;
     if (($9 | 0) != ($23 | 0)) {
      continue label$68
     }
     break label$68;
    };
   }
   if (!$22) {
    break label$65
   }
   $7 = $5 + Math_imul($8, 48) | 0;
   HEAP32[($7 + 36 | 0) >> 2] = -1;
   HEAPF32[($7 + 20 | 0) >> 2] = $17;
   $20 = Math_fround(HEAPF32[($7 + 24 | 0) >> 2]);
   $19 = Math_fround(0.0);
   label$71 : {
    if (($8 | 0) >= ($4 | 0)) {
     break label$71
    }
    $19 = Math_fround(HEAPF32[($3 + 14480 | 0) >> 2]);
   }
   $17 = Math_fround($17 + Math_fround($20 + $19));
  }
  $24 = Math_fround(HEAPF32[($1 + 36 | 0) >> 2]);
  $19 = Math_fround($24 + $14);
  $27 = Math_fround(($19 >= Math_fround(0.0) ? $19 : Math_fround(0.0)) + Math_fround(0.0));
  $17 = Math_fround($17 + $14);
  label$72 : {
   if (($11 | 0) < (1 | 0)) {
    break label$72
   }
   $22 = $11 & 1 | 0;
   $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   label$73 : {
    label$74 : {
     $4 = $11 + -1 | 0;
     if ($4) {
      break label$74
     }
     $8 = 0;
     break label$73;
    }
    $23 = $11 & -2 | 0;
    $8 = 0;
    $9 = 0;
    label$75 : while (1) {
     $7 = $5 + Math_imul($8 + $15 | 0, 48) | 0;
     HEAP32[($7 + 36 | 0) >> 2] = -1;
     HEAPF32[($7 + 20 | 0) >> 2] = $17;
     $25 = Math_fround(HEAPF32[($7 + 24 | 0) >> 2]);
     $19 = Math_fround(0.0);
     $20 = Math_fround(0.0);
     label$76 : {
      if (($8 | 0) >= ($4 | 0)) {
       break label$76
      }
      $20 = Math_fround(HEAPF32[($3 + 14480 | 0) >> 2]);
     }
     $16 = $8 | 1 | 0;
     $7 = $5 + Math_imul($16 + $15 | 0, 48) | 0;
     HEAP32[($7 + 36 | 0) >> 2] = -1;
     $17 = Math_fround($17 + Math_fround($25 + $20));
     HEAPF32[($7 + 20 | 0) >> 2] = $17;
     $20 = Math_fround(HEAPF32[($7 + 24 | 0) >> 2]);
     label$77 : {
      if (($16 | 0) >= ($4 | 0)) {
       break label$77
      }
      $19 = Math_fround(HEAPF32[($3 + 14480 | 0) >> 2]);
     }
     $8 = $8 + 2 | 0;
     $17 = Math_fround($17 + Math_fround($20 + $19));
     $9 = $9 + 2 | 0;
     if (($9 | 0) != ($23 | 0)) {
      continue label$75
     }
     break label$75;
    };
   }
   if (!$22) {
    break label$72
   }
   $7 = $5 + Math_imul($8 + $15 | 0, 48) | 0;
   HEAP32[($7 + 36 | 0) >> 2] = -1;
   HEAPF32[($7 + 20 | 0) >> 2] = $17;
   $20 = Math_fround(HEAPF32[($7 + 24 | 0) >> 2]);
   $19 = Math_fround(0.0);
   label$78 : {
    if (($8 | 0) >= ($4 | 0)) {
     break label$78
    }
    $19 = Math_fround(HEAPF32[($3 + 14480 | 0) >> 2]);
   }
   $17 = Math_fround($17 + Math_fround($20 + $19));
  }
  $19 = Math_fround(Math_fround(HEAPF32[($1 + 48 | 0) >> 2]) + $13);
  $27 = Math_fround($27 + ($19 >= Math_fround(0.0) ? $19 : Math_fround(0.0)));
  label$79 : {
   if (($12 | 0) < (1 | 0)) {
    break label$79
   }
   $5 = $11 + $15 | 0;
   $19 = Math_fround(Math_fround(Math_fround(HEAPF32[($0 + 48 | 0) >> 2]) - Math_fround(HEAPF32[($0 + 40 | 0) >> 2])) - Math_fround(HEAPF32[($1 + 60 | 0) >> 2]));
   $19 = $19 <= Math_fround(0.0) ? Math_fround(0.0) : $19;
   $17 = Math_fround($17 + $13);
   $17 = $19 < $17 ? $19 : $17;
   $11 = $12 & 1 | 0;
   $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   label$80 : {
    label$81 : {
     $9 = $12 + -1 | 0;
     if ($9) {
      break label$81
     }
     $8 = 0;
     break label$80;
    }
    $22 = $12 & -2 | 0;
    $8 = 0;
    $16 = 0;
    label$82 : while (1) {
     $7 = $4 + Math_imul($8 + $5 | 0, 48) | 0;
     HEAP32[($7 + 36 | 0) >> 2] = -1;
     HEAPF32[($7 + 20 | 0) >> 2] = $17;
     $25 = Math_fround(HEAPF32[($7 + 24 | 0) >> 2]);
     $19 = Math_fround(0.0);
     $20 = Math_fround(0.0);
     label$83 : {
      if (($8 | 0) >= ($9 | 0)) {
       break label$83
      }
      $20 = Math_fround(HEAPF32[($3 + 14480 | 0) >> 2]);
     }
     $23 = $8 | 1 | 0;
     $7 = $4 + Math_imul($23 + $5 | 0, 48) | 0;
     HEAP32[($7 + 36 | 0) >> 2] = -1;
     $17 = Math_fround($17 + Math_fround($25 + $20));
     HEAPF32[($7 + 20 | 0) >> 2] = $17;
     $20 = Math_fround(HEAPF32[($7 + 24 | 0) >> 2]);
     label$84 : {
      if (($23 | 0) >= ($9 | 0)) {
       break label$84
      }
      $19 = Math_fround(HEAPF32[($3 + 14480 | 0) >> 2]);
     }
     $8 = $8 + 2 | 0;
     $17 = Math_fround($17 + Math_fround($20 + $19));
     $16 = $16 + 2 | 0;
     if (($16 | 0) != ($22 | 0)) {
      continue label$82
     }
     break label$82;
    };
   }
   if (!$11) {
    break label$79
   }
   $8 = $4 + Math_imul($8 + $5 | 0, 48) | 0;
   HEAP32[($8 + 36 | 0) >> 2] = -1;
   HEAPF32[($8 + 20 | 0) >> 2] = $17;
  }
  $20 = Math_fround(HEAPF32[($1 + 60 | 0) >> 2]);
  $17 = Math_fround($20 + Math_fround(0.0));
  HEAPF32[($0 + 64 | 0) >> 2] = Math_fround($27 + ($17 >= Math_fround(0.0) ? $17 : Math_fround(0.0)));
  label$85 : {
   if ((HEAP32[($0 + 136 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
    break label$85
   }
   $8 = ImGui__MemAlloc_28unsigned_20long_29(0 | 0) | 0;
   label$86 : {
    $7 = HEAP32[($0 + 140 | 0) >> 2] | 0;
    if (!$7) {
     break label$86
    }
    __memcpy($8 | 0, $7 | 0, HEAP32[($0 + 132 | 0) >> 2] | 0 | 0) | 0;
    ImGui__MemFree_28void__29(HEAP32[($0 + 140 | 0) >> 2] | 0 | 0);
   }
   HEAP32[($0 + 136 | 0) >> 2] = 0;
   HEAP32[($0 + 140 | 0) >> 2] = $8;
  }
  HEAP32[($0 + 132 | 0) >> 2] = 0;
  label$87 : {
   label$88 : {
    label$89 : {
     if ($10 & 1 | 0) {
      break label$89
     }
     HEAP32[($0 + 20 | 0) >> 2] = 0;
     break label$88;
    }
    $8 = HEAP32[($0 + 20 | 0) >> 2] | 0;
    if ($8) {
     break label$87
    }
   }
   $8 = 0;
   if (HEAP32[($0 + 24 | 0) >> 2] | 0) {
    break label$87
   }
   if (!$6) {
    break label$87
   }
   $8 = HEAP32[$6 >> 2] | 0;
   HEAP32[($0 + 20 | 0) >> 2] = $8;
   $2 = $8;
  }
  HEAP8[($0 + 104 | 0) >> 0] = 0;
  HEAP32[($0 + 28 | 0) >> 2] = $8;
  label$90 : {
   $8 = HEAP32[($3 + 18992 | 0) >> 2] | 0;
   if (!$8) {
    break label$90
   }
   $7 = HEAP32[($8 + 932 | 0) >> 2] | 0;
   if (!$7) {
    break label$90
   }
   if ((HEAP32[($7 + 48 | 0) >> 2] | 0 | 0) != ($0 | 0)) {
    break label$90
   }
   $2 = HEAP32[($8 + 160 | 0) >> 2] | 0;
   HEAP32[($0 + 28 | 0) >> 2] = $2;
  }
  label$91 : {
   if (!$2) {
    break label$91
   }
   $5 = HEAP32[$0 >> 2] | 0;
   if (($5 | 0) < (1 | 0)) {
    break label$91
   }
   $7 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   $8 = 0;
   label$92 : {
    label$93 : while (1) {
     if ((HEAP32[($7 + Math_imul($8, 48) | 0) >> 2] | 0 | 0) == ($2 | 0)) {
      break label$92
     }
     $8 = $8 + 1 | 0;
     if (($8 | 0) == ($5 | 0)) {
      break label$91
     }
     continue label$93;
    };
   }
   $7 = $7 + Math_imul($8, 48) | 0;
   if ((HEAPU8[($7 + 4 | 0) >> 0] | 0) & 192 | 0) {
    break label$91
   }
   $17 = Math_fround(HEAPF32[($7 + 24 | 0) >> 2]);
   $25 = Math_fround(HEAPF32[($7 + 20 | 0) >> 2]);
   $19 = Math_fround(HEAPF32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 15488 | 0) >> 2]);
   HEAP32[($0 + 80 | 0) >> 2] = 0;
   $25 = Math_fround($25 - $24);
   $17 = Math_fround(Math_fround($17 + $25) + (($8 + 1 | 0 | 0) < ($5 - $12 | 0 | 0) ? $19 : Math_fround(1.0)));
   label$94 : {
    label$95 : {
     label$96 : {
      $27 = Math_fround(HEAPF32[($0 + 76 | 0) >> 2]);
      $19 = Math_fround($25 - (($8 | 0) < ($15 | 0) ? Math_fround(-0.0) : $19));
      if ($27 > $19) {
       break label$96
      }
      $25 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($0 + 48 | 0) >> 2]) - Math_fround(HEAPF32[($0 + 40 | 0) >> 2])) - $24) - $20) - $13);
      if (!(Math_fround($17 - $19) >= $25)) {
       break label$95
      }
     }
     $25 = Math_fround(HEAPF32[($0 + 72 | 0) >> 2]);
     break label$94;
    }
    $28 = Math_fround($17 - $25);
    if (!($27 < $28)) {
     break label$91
    }
    $25 = Math_fround($19 - $25);
    $17 = Math_fround(HEAPF32[($0 + 72 | 0) >> 2]);
    $19 = $28;
   }
   HEAPF32[($0 + 76 | 0) >> 2] = $19;
   $17 = Math_fround($25 - $17);
   HEAPF32[($0 + 80 | 0) >> 2] = $17 >= Math_fround(0.0) ? $17 : Math_fround(0.0);
  }
  $19 = Math_fround(HEAPF32[($0 + 72 | 0) >> 2]);
  $25 = Math_fround(HEAPF32[($0 + 48 | 0) >> 2]);
  $27 = Math_fround(HEAPF32[($0 + 40 | 0) >> 2]);
  $17 = Math_fround(Math_fround(HEAPF32[($0 + 64 | 0) >> 2]) - Math_fround($25 - $27));
  $19 = $17 > $19 ? $19 : $17;
  $19 = $19 >= Math_fround(0.0) ? $19 : Math_fround(0.0);
  HEAPF32[($0 + 72 | 0) >> 2] = $19;
  $28 = Math_fround(HEAPF32[($0 + 76 | 0) >> 2]);
  $17 = $17 > $28 ? $28 : $17;
  $17 = $17 >= Math_fround(0.0) ? $17 : Math_fround(0.0);
  HEAPF32[($0 + 76 | 0) >> 2] = $17;
  label$97 : {
   label$98 : {
    if ($19 == $17) {
     break label$98
    }
    $28 = Math_fround(HEAPF32[($0 + 84 | 0) >> 2]);
    $30 = Math_fround(HEAPF32[($3 + 15488 | 0) >> 2]);
    $29 = Math_fround($30 * Math_fround(70.0));
    $28 = $28 >= $29 ? $28 : $29;
    $29 = Math_fround(Math_fround(Math_abs(Math_fround($17 - $19))) / Math_fround(.30000001192092896));
    $28 = $28 >= $29 ? $28 : $29;
    HEAPF32[($0 + 84 | 0) >> 2] = $28;
    label$99 : {
     if (((HEAP32[($0 + 36 | 0) >> 2] | 0) + 1 | 0 | 0) < (HEAP32[($3 + 16016 | 0) >> 2] | 0 | 0)) {
      break label$99
     }
     if (Math_fround(HEAPF32[($0 + 80 | 0) >> 2]) > Math_fround($30 * Math_fround(10.0))) {
      break label$99
     }
     $28 = Math_fround($28 * Math_fround(HEAPF32[($3 + 24 | 0) >> 2]));
     label$100 : {
      if (!($19 < $17)) {
       break label$100
      }
      $19 = Math_fround($19 + $28);
      HEAPF32[($0 + 72 | 0) >> 2] = $19 < $17 ? $19 : $17;
      break label$97;
     }
     label$101 : {
      if ($19 > $17) {
       break label$101
      }
      HEAPF32[($0 + 72 | 0) >> 2] = $19;
      break label$97;
     }
     $19 = Math_fround($19 - $28);
     $17 = $19 >= $17 ? $19 : $17;
    }
    HEAPF32[($0 + 72 | 0) >> 2] = $17;
    break label$97;
   }
   HEAP32[($0 + 84 | 0) >> 2] = 0;
  }
  HEAPF32[($0 + 92 | 0) >> 2] = Math_fround(Math_fround($25 - $20) - $13);
  HEAPF32[($0 + 88 | 0) >> 2] = Math_fround($14 + Math_fround($27 + $24));
  $8 = HEAP32[($3 + 16116 | 0) >> 2] | 0;
  i64toi32_i32$2 = $0;
  i64toi32_i32$1 = HEAP32[($0 + 40 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0 + 44 | 0) >> 2] | 0;
  $1664 = i64toi32_i32$1;
  i64toi32_i32$1 = $8;
  HEAP32[($8 + 292 | 0) >> 2] = $1664;
  HEAP32[($8 + 296 | 0) >> 2] = i64toi32_i32$0;
  $17 = Math_fround(HEAPF32[($0 + 44 | 0) >> 2]);
  $19 = Math_fround(HEAPF32[($0 + 52 | 0) >> 2]);
  HEAPF32[($1 + 80 | 0) >> 2] = Math_fround(HEAPF32[($0 + 64 | 0) >> 2]);
  HEAPF32[($1 + 84 | 0) >> 2] = Math_fround($19 - $17);
  ImGui__ItemSize_28ImVec2_20const__2c_20float_29($1 + 80 | 0 | 0, Math_fround(Math_fround(HEAPF32[($0 + 120 | 0) >> 2])));
  $8 = $8 + 324 | 0;
  $17 = Math_fround(HEAPF32[$8 >> 2]);
  $19 = Math_fround(Math_fround(HEAPF32[($0 + 40 | 0) >> 2]) + Math_fround(HEAPF32[($0 + 68 | 0) >> 2]));
  HEAPF32[$8 >> 2] = $17 >= $19 ? $17 : $19;
  __stack_pointer = $1 + 160 | 0;
 }
 
 function TabItemComparerBySection_28void_20const__2c_20void_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  label$1 : {
   $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $3 = $2 & 64 | 0 ? 0 : $2 & 128 | 0 ? 2 : 1;
   $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
   $2 = $2 & 64 | 0 ? 0 : $2 & 128 | 0 ? 2 : 1;
   if (($3 | 0) == ($2 | 0)) {
    break label$1
   }
   return $3 - $2 | 0 | 0;
  }
  return (HEAP16[($0 + 42 | 0) >> 1] | 0) - (HEAP16[($1 + 42 | 0) >> 1] | 0) | 0 | 0;
 }
 
 function ImGui__TabBarFindTabByID_28ImGuiTabBar__2c_20unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = 0;
  label$1 : {
   if (!$1) {
    break label$1
   }
   $3 = HEAP32[$0 >> 2] | 0;
   if (($3 | 0) < (1 | 0)) {
    break label$1
   }
   $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   $0 = 0;
   label$2 : while (1) {
    $2 = $4 + Math_imul($0, 48) | 0;
    if ((HEAP32[$2 >> 2] | 0 | 0) == ($1 | 0)) {
     break label$1
    }
    $0 = $0 + 1 | 0;
    if (($0 | 0) != ($3 | 0)) {
     continue label$2
    }
    break label$2;
   };
   $2 = 0;
  }
  return $2 | 0;
 }
 
 function ImGui__TabBarFindMostRecentlySelectedTabForActiveWindow_28ImGuiTabBar__29($0) {
  $0 = $0 | 0;
  var $2 = 0, $4 = 0, $1 = 0, $5 = 0, $3 = 0;
  label$1 : {
   label$2 : {
    $1 = HEAP32[$0 >> 2] | 0;
    if (($1 | 0) >= (1 | 0)) {
     break label$2
    }
    $2 = 0;
    break label$1;
   }
   $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   $2 = 0;
   $0 = 0;
   label$3 : while (1) {
    $4 = $3 + Math_imul($0, 48) | 0;
    label$4 : {
     label$5 : {
      if (!$2) {
       break label$5
      }
      if ((HEAP32[($2 + 16 | 0) >> 2] | 0 | 0) >= (HEAP32[($4 + 16 | 0) >> 2] | 0 | 0)) {
       break label$4
      }
     }
     $5 = HEAP32[($4 + 8 | 0) >> 2] | 0;
     if (!$5) {
      break label$4
     }
     $2 = HEAPU8[($5 + 220 | 0) >> 0] | 0 ? $4 : $2;
    }
    $0 = $0 + 1 | 0;
    if (($0 | 0) != ($1 | 0)) {
     continue label$3
    }
    break label$3;
   };
  }
  return $2 | 0;
 }
 
 function ImGui__TabBarGetTabName_28ImGuiTabBar__2c_20ImGuiTabItem__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  label$1 : {
   $2 = HEAP32[($1 + 8 | 0) >> 2] | 0;
   if (!$2) {
    break label$1
   }
   return HEAP32[$2 >> 2] | 0 | 0;
  }
  label$2 : {
   $1 = HEAP32[($1 + 36 | 0) >> 2] | 0;
   if (($1 | 0) != (-1 | 0)) {
    break label$2
   }
   return 67672 | 0;
  }
  return (HEAP32[($0 + 140 | 0) >> 2] | 0) + $1 | 0 | 0;
 }
 
 function ImGui__TabBarAddTab_28ImGuiTabBar__2c_20int_2c_20ImGuiWindow__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $6 = 0, $7 = 0, $8 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3 = 0, $4 = 0, $5 = 0;
  label$1 : {
   $3 = HEAP32[($0 + 32 | 0) >> 2] | 0;
   if (($3 | 0) != (-1 | 0)) {
    break label$1
   }
   $3 = (HEAP32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 16016 | 0) >> 2] | 0) + -1 | 0;
  }
  $4 = HEAP32[($2 + 160 | 0) >> 2] | 0;
  $5 = HEAPU8[($2 + 229 | 0) >> 0] | 0;
  label$2 : {
   $6 = HEAP32[$0 >> 2] | 0;
   if (($6 | 0) != (HEAP32[($0 + 4 | 0) >> 2] | 0 | 0)) {
    break label$2
   }
   $7 = $6 + 1 | 0;
   label$3 : {
    label$4 : {
     if ($6) {
      break label$4
     }
     $8 = 8;
     break label$3;
    }
    $8 = (($6 | 0) / (2 | 0) | 0) + $6 | 0;
   }
   $7 = ($8 | 0) > ($7 | 0) ? $8 : $7;
   if (($6 | 0) >= ($7 | 0)) {
    break label$2
   }
   $6 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($7, 48) | 0) | 0;
   label$5 : {
    $8 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    if (!$8) {
     break label$5
    }
    __memcpy($6 | 0, $8 | 0, Math_imul(HEAP32[$0 >> 2] | 0, 48) | 0) | 0;
    ImGui__MemFree_28void__29(HEAP32[($0 + 8 | 0) >> 2] | 0 | 0);
   }
   HEAP32[($0 + 4 | 0) >> 2] = $7;
   HEAP32[($0 + 8 | 0) >> 2] = $6;
   $6 = HEAP32[$0 >> 2] | 0;
  }
  $6 = (HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul($6, 48) | 0;
  i64toi32_i32$1 = $6;
  i64toi32_i32$0 = 0;
  HEAP32[($6 + 20 | 0) >> 2] = 0;
  HEAP32[($6 + 24 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($6 + 16 | 0) >> 2] = -1;
  HEAP32[($6 + 12 | 0) >> 2] = $3;
  HEAP32[($6 + 8 | 0) >> 2] = $2;
  HEAP32[($6 + 4 | 0) >> 2] = $5 & 255 | 0 ? $1 : $1 | 1048576 | 0;
  HEAP32[$6 >> 2] = $4;
  HEAP32[($6 + 44 | 0) >> 2] = 0;
  i64toi32_i32$1 = $6;
  i64toi32_i32$0 = -1;
  HEAP32[($6 + 36 | 0) >> 2] = -1;
  HEAP32[($6 + 40 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $6 + 28 | 0;
  i64toi32_i32$0 = -1082130432;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 1 | 0;
 }
 
 function ImGui__TabBarRemoveTab_28ImGuiTabBar__2c_20unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $2 = 0, $5 = 0, $3 = 0;
  label$1 : {
   if (!$1) {
    break label$1
   }
   $2 = HEAP32[$0 >> 2] | 0;
   if (($2 | 0) < (1 | 0)) {
    break label$1
   }
   $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   $4 = 0;
   label$2 : {
    label$3 : while (1) {
     $5 = $3 + Math_imul($4, 48) | 0;
     if ((HEAP32[$5 >> 2] | 0 | 0) == ($1 | 0)) {
      break label$2
     }
     $4 = $4 + 1 | 0;
     if (($4 | 0) == ($2 | 0)) {
      break label$1
     }
     continue label$3;
    };
   }
   memmove($5 | 0, $5 + 48 | 0 | 0, Math_imul($2 + ($4 ^ -1 | 0) | 0, 48) | 0) | 0;
   HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1 | 0;
  }
  label$4 : {
   if ((HEAP32[($0 + 28 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
    break label$4
   }
   HEAP32[($0 + 28 | 0) >> 2] = 0;
  }
  label$5 : {
   if ((HEAP32[($0 + 20 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
    break label$5
   }
   HEAP32[($0 + 20 | 0) >> 2] = 0;
  }
  label$6 : {
   if ((HEAP32[($0 + 24 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
    break label$6
   }
   HEAP32[($0 + 24 | 0) >> 2] = 0;
  }
 }
 
 function ImGui__TabBarCloseTab_28ImGuiTabBar__2c_20ImGuiTabItem__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  label$1 : {
   $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
   if ($2 & 2097152 | 0) {
    break label$1
   }
   label$2 : {
    if ($2 & 1 | 0) {
     break label$2
    }
    HEAP8[($1 + 44 | 0) >> 0] = 1;
    if ((HEAP32[($0 + 28 | 0) >> 2] | 0 | 0) != (HEAP32[$1 >> 2] | 0 | 0)) {
     break label$1
    }
    HEAP32[($1 + 12 | 0) >> 2] = -1;
    HEAP32[($0 + 20 | 0) >> 2] = 0;
    HEAP32[($0 + 24 | 0) >> 2] = 0;
    return;
   }
   $1 = HEAP32[$1 >> 2] | 0;
   if ((HEAP32[($0 + 28 | 0) >> 2] | 0 | 0) == ($1 | 0)) {
    break label$1
   }
   HEAP32[($0 + 24 | 0) >> 2] = $1;
  }
 }
 
 function ImGui__TabBarQueueReorderFromMousePos_28ImGuiTabBar__2c_20ImGuiTabItem__2c_20ImVec2_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $6 = 0, $12 = 0, $7 = 0, $3 = Math_fround(0), $13 = 0, $11 = 0, $4 = 0, $5 = 0, $9 = Math_fround(0), $8 = 0, $10 = 0;
  label$1 : {
   if (!((HEAPU8[($0 + 12 | 0) >> 0] | 0) & 1 | 0)) {
    break label$1
   }
   $3 = Math_fround(0.0);
   label$2 : {
    $4 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    if ($4 & 192 | 0) {
     break label$2
    }
    $3 = Math_fround(HEAPF32[($0 + 76 | 0) >> 2]);
   }
   $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   $6 = $1 - $5 | 0;
   $7 = ($6 | 0) / (48 | 0) | 0;
   if (($6 | 0) < (-47 | 0)) {
    break label$1
   }
   $8 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   $3 = Math_fround(Math_fround(HEAPF32[($0 + 40 | 0) >> 2]) - $3);
   $9 = Math_fround(HEAPF32[$2 >> 2]);
   $2 = (Math_fround($3 + Math_fround(HEAPF32[($1 + 20 | 0) >> 2])) > $9 ^ 1 | 0) & 1 | 0;
   $10 = $2 ? 1 : -1;
   $11 = HEAP32[$0 >> 2] | 0;
   label$3 : {
    label$4 : {
     if ($2) {
      break label$4
     }
     $2 = $7;
     if (($7 | 0) >= ($11 | 0)) {
      break label$3
     }
     $6 = $7;
     $2 = $6;
     label$5 : while (1) {
      $12 = $6;
      $13 = $5 + Math_imul($6, 48) | 0;
      $6 = HEAP32[($13 + 4 | 0) >> 2] | 0;
      if ($6 & 32 | 0) {
       break label$3
      }
      if (($6 ^ $4 | 0) & 192 | 0) {
       break label$3
      }
      label$6 : {
       if (!($9 > Math_fround(Math_fround($3 + Math_fround(HEAPF32[($13 + 20 | 0) >> 2])) - Math_fround(HEAPF32[($8 + 14480 | 0) >> 2])))) {
        break label$6
       }
       $2 = $12;
       break label$3;
      }
      label$7 : {
       $6 = $12 + $10 | 0;
       if (($6 | 0) >= (0 | 0)) {
        break label$7
       }
       $2 = $12;
       break label$3;
      }
      $2 = $12;
      if (($6 | 0) < ($11 | 0)) {
       continue label$5
      }
      break label$3;
     };
    }
    $2 = $7;
    if (($7 | 0) >= ($11 | 0)) {
     break label$3
    }
    $6 = $7;
    $2 = $6;
    label$8 : while (1) {
     $12 = $6;
     $6 = $5 + Math_imul($6, 48) | 0;
     $13 = HEAP32[($6 + 4 | 0) >> 2] | 0;
     if ($13 & 32 | 0) {
      break label$3
     }
     if (($13 ^ $4 | 0) & 192 | 0) {
      break label$3
     }
     label$9 : {
      if (!($9 < Math_fround(Math_fround(HEAPF32[($8 + 14480 | 0) >> 2]) + Math_fround(Math_fround($3 + Math_fround(HEAPF32[($6 + 20 | 0) >> 2])) + Math_fround(HEAPF32[($6 + 24 | 0) >> 2]))))) {
       break label$9
      }
      $2 = $12;
      break label$3;
     }
     label$10 : {
      $6 = $12 + $10 | 0;
      if (($6 | 0) >= (0 | 0)) {
       break label$10
      }
      $2 = $12;
      break label$3;
     }
     $2 = $12;
     if (($6 | 0) < ($11 | 0)) {
      continue label$8
     }
     break label$8;
    };
   }
   if (($2 | 0) == ($7 | 0)) {
    break label$1
   }
   $1 = HEAP32[$1 >> 2] | 0;
   HEAP16[($0 + 100 | 0) >> 1] = $2 - $7 | 0;
   HEAP32[($0 + 96 | 0) >> 2] = $1;
  }
 }
 
 function ImGui__TabItemEx_28ImGuiTabBar__2c_20char_20const__2c_20bool__2c_20int_2c_20ImGuiWindow__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $7 = 0, $6 = 0, $17 = Math_fround(0), $16 = Math_fround(0), $14 = 0, $15 = Math_fround(0), $8 = 0, i64toi32_i32$2 = 0, $9 = 0, $13 = 0, $18 = Math_fround(0), $23 = 0, $24 = 0, $11 = 0, $10 = 0, $19 = Math_fround(0), $20 = Math_fround(0), $12 = 0, $26 = 0, $21 = 0, $25 = 0, $25$hi = 0, $47 = 0, $50 = 0, $57 = 0, $60 = 0, $22 = 0, $611 = 0, $630 = 0, $638 = 0;
  $5 = __stack_pointer - 96 | 0;
  __stack_pointer = $5;
  $6 = 0;
  $7 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  label$1 : {
   if (!(HEAPU8[($0 + 103 | 0) >> 0] | 0)) {
    break label$1
   }
   $8 = $5 + 88 | 0;
   $9 = $7 + 18276 | 0;
   HEAP32[$8 >> 2] = HEAP32[$9 >> 2] | 0;
   $10 = $5 + 80 | 0;
   $11 = $7 + 18268 | 0;
   i64toi32_i32$2 = $11;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $47 = i64toi32_i32$0;
   i64toi32_i32$0 = $10;
   HEAP32[i64toi32_i32$0 >> 2] = $47;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $7;
   i64toi32_i32$1 = HEAP32[($7 + 18260 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($7 + 18264 | 0) >> 2] | 0;
   $50 = i64toi32_i32$1;
   i64toi32_i32$1 = $5;
   HEAP32[($5 + 72 | 0) >> 2] = $50;
   HEAP32[($5 + 76 | 0) >> 2] = i64toi32_i32$0;
   ImGui__TabBarLayout_28ImGuiTabBar__29($0 | 0);
   HEAP8[$9 >> 0] = HEAPU8[$8 >> 0] | 0;
   i64toi32_i32$2 = $10;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $57 = i64toi32_i32$0;
   i64toi32_i32$0 = $11;
   HEAP32[i64toi32_i32$0 >> 2] = $57;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $5;
   i64toi32_i32$1 = HEAP32[($5 + 72 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($5 + 76 | 0) >> 2] | 0;
   $60 = i64toi32_i32$1;
   i64toi32_i32$1 = $7;
   HEAP32[(i64toi32_i32$1 + 18260 | 0) >> 2] = $60;
   HEAP32[(i64toi32_i32$1 + 18264 | 0) >> 2] = i64toi32_i32$0;
  }
  label$2 : {
   $10 = HEAP32[($7 + 16116 | 0) >> 2] | 0;
   if (HEAPU8[($10 + 224 | 0) >> 0] | 0) {
    break label$2
   }
   label$3 : {
    label$4 : {
     if (!$4) {
      break label$4
     }
     $8 = HEAP32[($4 + 160 | 0) >> 2] | 0;
     ImGui__KeepAliveID_28unsigned_20int_29($8 | 0);
     break label$3;
    }
    $8 = ImGuiWindow__GetID_28char_20const__2c_20char_20const__29(HEAP32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 16116 | 0) >> 2] | 0 | 0, $1 | 0, 0 | 0) | 0;
   }
   label$5 : {
    if (!$2) {
     break label$5
    }
    if (HEAPU8[$2 >> 0] | 0) {
     break label$5
    }
    i64toi32_i32$1 = ($5 + 72 | 0) + 8 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $5;
    i64toi32_i32$0 = 0;
    HEAP32[($5 + 72 | 0) >> 2] = 0;
    HEAP32[($5 + 76 | 0) >> 2] = i64toi32_i32$0;
    $6 = 0;
    ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($5 + 72 | 0 | 0, $8 | 0, 0 | 0, 8 | 0) | 0;
    break label$2;
   }
   $6 = $3 & 1048576 | 0;
   $11 = $2 | $6 | 0 ? $3 : $3 | 1048576 | 0;
   $12 = $6 ? 0 : $2;
   $3 = HEAP32[$0 >> 2] | 0;
   label$6 : {
    label$7 : {
     if (!$8) {
      break label$7
     }
     if (($3 | 0) < (1 | 0)) {
      break label$7
     }
     $9 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     $13 = 0;
     $6 = 0;
     label$8 : while (1) {
      $2 = $9 + Math_imul($6, 48) | 0;
      if ((HEAP32[$2 >> 2] | 0 | 0) == ($8 | 0)) {
       break label$6
      }
      $6 = $6 + 1 | 0;
      if (($6 | 0) != ($3 | 0)) {
       continue label$8
      }
      break label$8;
     };
    }
    label$9 : {
     if (($3 | 0) != (HEAP32[($0 + 4 | 0) >> 2] | 0 | 0)) {
      break label$9
     }
     $6 = $3 + 1 | 0;
     label$10 : {
      label$11 : {
       if ($3) {
        break label$11
       }
       $2 = 8;
       break label$10;
      }
      $2 = (($3 | 0) / (2 | 0) | 0) + $3 | 0;
     }
     $6 = ($2 | 0) > ($6 | 0) ? $2 : $6;
     if (($3 | 0) >= ($6 | 0)) {
      break label$9
     }
     $2 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($6, 48) | 0) | 0;
     label$12 : {
      $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      if (!$3) {
       break label$12
      }
      __memcpy($2 | 0, $3 | 0, Math_imul(HEAP32[$0 >> 2] | 0, 48) | 0) | 0;
      ImGui__MemFree_28void__29(HEAP32[($0 + 8 | 0) >> 2] | 0 | 0);
     }
     HEAP32[($0 + 4 | 0) >> 2] = $6;
     HEAP32[($0 + 8 | 0) >> 2] = $2;
     $3 = HEAP32[$0 >> 2] | 0;
    }
    $6 = (HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul($3, 48) | 0;
    i64toi32_i32$1 = $6;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = -1;
    HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] = 0;
    i64toi32_i32$0 = -1;
    HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = -1;
    HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
    i64toi32_i32$0 = -1;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $6 + 28 | 0;
    i64toi32_i32$0 = -1082130432;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $13 = 1;
    $6 = HEAP32[$0 >> 2] | 0;
    HEAP32[$0 >> 2] = $6 + 1 | 0;
    $9 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    $2 = $9 + Math_imul($6, 48) | 0;
    HEAP32[$2 >> 2] = $8;
    HEAP8[($0 + 105 | 0) >> 0] = 1;
   }
   HEAP16[($0 + 108 | 0) >> 1] = ($2 - $9 | 0 | 0) / (48 | 0) | 0;
   $6 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
   ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($5 + 72 | 0 | 0, $1 | 0, 0 | 0, 1 | 0, Math_fround(Math_fround(-1.0)));
   $9 = $11 & 1 | 0;
   $3 = $6 + 14460 | 0;
   $14 = $6 + 14456 | 0;
   label$13 : {
    label$14 : {
     if ($12) {
      break label$14
     }
     $15 = Math_fround(1.0);
     if (!$9) {
      break label$13
     }
    }
    $15 = Math_fround(Math_fround(HEAPF32[($6 + 14480 | 0) >> 2]) + Math_fround(HEAPF32[($6 + 15488 | 0) >> 2]));
   }
   $16 = Math_fround(HEAPF32[$3 >> 2]);
   $17 = Math_fround(HEAPF32[$14 >> 2]);
   $18 = Math_fround(HEAPF32[($5 + 72 | 0) >> 2]);
   $19 = Math_fround(HEAPF32[($5 + 76 | 0) >> 2]);
   $20 = Math_fround(HEAPF32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 15488 | 0) >> 2]);
   HEAP32[($2 + 32 | 0) >> 2] = -1082130432;
   label$15 : {
    label$16 : {
     if ((HEAPU8[($7 + 18260 | 0) >> 0] | 0) & 1 | 0) {
      break label$16
     }
     $17 = Math_fround(Math_fround($18 + $17) + Math_fround($17 + $15));
     $15 = Math_fround($20 * Math_fround(20.0));
     $17 = $17 < $15 ? $17 : $15;
     break label$15;
    }
    $17 = Math_fround(HEAPF32[($7 + 18264 | 0) >> 2]);
    HEAPF32[($2 + 32 | 0) >> 2] = $17;
   }
   label$17 : {
    if (!$13) {
     break label$17
    }
    HEAPF32[($2 + 24 | 0) >> 2] = Math_fround(Math_max($17, Math_fround(1.0)));
   }
   HEAPF32[($2 + 28 | 0) >> 2] = $17;
   $6 = HEAPU16[($0 + 106 | 0) >> 1] | 0;
   HEAP16[($0 + 106 | 0) >> 1] = $6 + 1 | 0;
   HEAP16[($2 + 40 | 0) >> 1] = $6;
   $3 = HEAP32[($7 + 16016 | 0) >> 2] | 0;
   $21 = 0;
   label$18 : {
    if (!$9) {
     break label$18
    }
    $21 = !((HEAPU8[($2 + 4 | 0) >> 0] | 0) & 1 | 0);
   }
   $6 = HEAP32[($2 + 12 | 0) >> 2] | 0;
   $22 = HEAP32[($0 + 12 | 0) >> 2] | 0;
   $23 = HEAP32[($0 + 36 | 0) >> 2] | 0;
   HEAP32[($2 + 8 | 0) >> 2] = $4;
   HEAP32[($2 + 4 | 0) >> 2] = $11;
   HEAP32[($2 + 12 | 0) >> 2] = $3;
   $9 = $11 & 2097152 | 0;
   label$19 : {
    label$20 : {
     if (!$4) {
      break label$20
     }
     HEAP32[($2 + 36 | 0) >> 2] = -1;
     break label$19;
    }
    $14 = HEAP32[($0 + 132 | 0) >> 2] | 0;
    $24 = $14 + -1 | 0;
    HEAP32[($2 + 36 | 0) >> 2] = $24 >>> 0 > $14 >>> 0 ? 0 : $24;
    ImGuiTextBuffer__append_28char_20const__2c_20char_20const__29($0 + 132 | 0 | 0, $1 | 0, ($1 + (strlen($1 | 0) | 0) | 0) + 1 | 0 | 0);
   }
   $14 = $6 + 1 | 0;
   $23 = $23 + 1 | 0;
   label$21 : {
    if ($9) {
     break label$21
    }
    label$22 : {
     if (($14 | 0) >= ($3 | 0)) {
      break label$22
     }
     if (!((HEAPU8[($0 + 12 | 0) >> 0] | 0) & 2 | 0)) {
      break label$22
     }
     if (HEAP32[($0 + 24 | 0) >> 2] | 0) {
      break label$22
     }
     label$23 : {
      if (($23 | 0) >= ($3 | 0)) {
       break label$23
      }
      if (HEAP32[($0 + 20 | 0) >> 2] | 0) {
       break label$22
      }
     }
     HEAP32[($0 + 24 | 0) >> 2] = HEAP32[$2 >> 2] | 0;
    }
    if (!($11 & 2 | 0)) {
     break label$21
    }
    if ((HEAP32[($0 + 20 | 0) >> 2] | 0 | 0) == ($8 | 0)) {
     break label$21
    }
    HEAP32[($0 + 24 | 0) >> 2] = HEAP32[$2 >> 2] | 0;
   }
   label$24 : {
    label$25 : {
     if ((HEAP32[($0 + 28 | 0) >> 2] | 0 | 0) != ($8 | 0)) {
      break label$25
     }
     $6 = 1;
     HEAP8[($0 + 104 | 0) >> 0] = 1;
     break label$24;
    }
    $6 = 0;
    if (HEAP32[($0 + 20 | 0) >> 2] | 0) {
     break label$24
    }
    if ($4) {
     break label$24
    }
    if (($23 | 0) >= ($3 | 0)) {
     break label$24
    }
    if ((HEAP32[$0 >> 2] | 0 | 0) != (1 | 0)) {
     break label$24
    }
    $6 = !((HEAPU8[($0 + 12 | 0) >> 0] | 0) & 2 | 0);
   }
   label$26 : {
    if (($14 | 0) >= ($3 | 0)) {
     break label$26
    }
    if (!($13 | ($23 | 0) >= ($3 | 0) | 0)) {
     break label$26
    }
    i64toi32_i32$1 = ($5 + 72 | 0) + 8 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $5;
    i64toi32_i32$0 = 0;
    HEAP32[($5 + 72 | 0) >> 2] = 0;
    HEAP32[($5 + 76 | 0) >> 2] = i64toi32_i32$0;
    ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($5 + 72 | 0 | 0, $8 | 0, 0 | 0, 8 | 0) | 0;
    $6 = !$9 & $6 | 0;
    break label$2;
   }
   $17 = Math_fround($16 + $16);
   label$27 : {
    if ((HEAP32[($0 + 20 | 0) >> 2] | 0 | 0) != ($8 | 0)) {
     break label$27
    }
    HEAP32[($2 + 16 | 0) >> 2] = HEAP32[($7 + 16016 | 0) >> 2] | 0;
   }
   $15 = Math_fround($17 + $19);
   $17 = Math_fround(HEAPF32[($2 + 20 | 0) >> 2]);
   $19 = Math_fround(HEAPF32[($2 + 24 | 0) >> 2]);
   i64toi32_i32$2 = $10;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 292 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 296 | 0) >> 2] | 0;
   $25 = i64toi32_i32$0;
   $25$hi = i64toi32_i32$1;
   label$28 : {
    label$29 : {
     $13 = (HEAP32[($2 + 4 | 0) >> 2] | 0) & 192 | 0;
     if ($13) {
      break label$29
     }
     label$30 : {
      label$31 : {
       $17 = Math_fround($17 - Math_fround(HEAPF32[($0 + 72 | 0) >> 2]));
       if (!(Math_fround(Math_abs($17)) < Math_fround(2147483648.0))) {
        break label$31
       }
       $23 = ~~$17;
       break label$30;
      }
      $23 = -2147483648;
     }
     $16 = Math_fround($23 | 0);
     $17 = Math_fround(HEAPF32[($0 + 40 | 0) >> 2]);
     break label$28;
    }
    $16 = Math_fround(HEAPF32[($0 + 40 | 0) >> 2]);
   }
   $18 = Math_fround(HEAPF32[($0 + 44 | 0) >> 2]);
   $17 = Math_fround($17 + $16);
   HEAPF32[($10 + 292 | 0) >> 2] = $17;
   $16 = Math_fround($18 + Math_fround(0.0));
   HEAPF32[($10 + 296 | 0) >> 2] = $16;
   $18 = Math_fround($15 + $16);
   HEAPF32[($5 + 84 | 0) >> 2] = $18;
   $15 = Math_fround($19 + $17);
   HEAPF32[($5 + 80 | 0) >> 2] = $15;
   HEAPF32[($5 + 76 | 0) >> 2] = $16;
   HEAPF32[($5 + 72 | 0) >> 2] = $17;
   label$32 : {
    label$33 : {
     if (!$13) {
      break label$33
     }
     $23 = 0;
     break label$32;
    }
    $19 = Math_fround(HEAPF32[($0 + 92 | 0) >> 2]);
    label$34 : {
     $20 = Math_fround(HEAPF32[($0 + 88 | 0) >> 2]);
     if ($17 < $20) {
      break label$34
     }
     if ($15 > $19) {
      break label$34
     }
     $23 = 0;
     break label$32;
    }
    HEAPF32[($5 + 68 | 0) >> 2] = Math_fround($16 + Math_fround(-1.0));
    HEAPF32[($5 + 64 | 0) >> 2] = $17 >= $20 ? $17 : $20;
    HEAPF32[($5 + 60 | 0) >> 2] = $18;
    HEAPF32[($5 + 56 | 0) >> 2] = $19;
    $23 = 1;
    ImGui__PushClipRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20bool_29($5 + 64 | 0 | 0, $5 + 56 | 0 | 0, 1 | 0);
    $16 = Math_fround(HEAPF32[($5 + 76 | 0) >> 2]);
    $18 = Math_fround(HEAPF32[($5 + 84 | 0) >> 2]);
    $17 = Math_fround(HEAPF32[($5 + 72 | 0) >> 2]);
    $15 = Math_fround(HEAPF32[($5 + 80 | 0) >> 2]);
   }
   $13 = $10 + 316 | 0;
   i64toi32_i32$2 = $13;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $26 = i64toi32_i32$1;
   HEAPF32[($5 + 68 | 0) >> 2] = Math_fround($18 - $16);
   HEAPF32[($5 + 64 | 0) >> 2] = Math_fround($15 - $17);
   ImGui__ItemSize_28ImVec2_20const__2c_20float_29($5 + 64 | 0 | 0, Math_fround(Math_fround(HEAPF32[($7 + 14460 | 0) >> 2])));
   i64toi32_i32$1 = i64toi32_i32$2;
   HEAP32[i64toi32_i32$1 >> 2] = $26;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   label$35 : {
    if (ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($5 + 72 | 0 | 0, $8 | 0, 0 | 0, 0 | 0) | 0) {
     break label$35
    }
    label$36 : {
     if (!$23) {
      break label$36
     }
     ImGui__PopClipRect_28_29();
    }
    i64toi32_i32$0 = $25$hi;
    i64toi32_i32$1 = $10;
    HEAP32[(i64toi32_i32$1 + 292 | 0) >> 2] = $25;
    HEAP32[(i64toi32_i32$1 + 296 | 0) >> 2] = i64toi32_i32$0;
    break label$2;
   }
   $13 = $9 ? 4128 : 4112;
   label$37 : {
    if (!(HEAPU8[($7 + 19040 | 0) >> 0] | 0)) {
     break label$37
    }
    label$38 : {
     if ((HEAP32[($7 + 19072 | 0) >> 2] | 0 | 0) != (-1 | 0)) {
      break label$38
     }
     $13 = $13 | 512 | 0;
     break label$37;
    }
    $13 = strcmp(67565 | 0, $7 + 19076 | 0 | 0) | 0 ? $13 | 512 | 0 : $13;
   }
   $13 = ImGui__ButtonBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20bool__2c_20bool__2c_20int_29($5 + 72 | 0 | 0, $8 | 0, $5 + 64 | 0 | 0, $5 + 56 | 0 | 0, $13 | 0) | 0;
   label$39 : {
    if ($9) {
     break label$39
    }
    if (!$13) {
     break label$39
    }
    HEAP32[($0 + 24 | 0) >> 2] = HEAP32[$2 >> 2] | 0;
   }
   $24 = HEAP32[($7 + 16192 | 0) >> 2] | 0;
   label$40 : {
    label$41 : {
     label$42 : {
      label$43 : {
       if (!$4) {
        break label$43
       }
       if (!((HEAPU8[($5 + 56 | 0) >> 0] | 0) & 255 | 0)) {
        break label$43
       }
       if (($24 | 0) != ($8 | 0)) {
        break label$43
       }
       if (!(HEAPU8[($7 + 16204 | 0) >> 0] | 0)) {
        break label$42
       }
       HEAP32[($7 + 16220 | 0) >> 2] = $4;
       break label$42;
      }
      label$44 : {
       if (($24 | 0) == ($8 | 0)) {
        break label$44
       }
       ImGui__SetItemAllowOverlap_28_29();
      }
      if (!$4) {
       break label$41
      }
     }
     $24 = HEAP32[($4 + 932 | 0) >> 2] | 0;
     if (!$24) {
      break label$41
     }
     if (HEAP32[($24 + 24 | 0) >> 2] | 0) {
      break label$41
     }
     if ((HEAP32[($24 + 16 | 0) >> 2] | 0) & 1024 | 0) {
      break label$41
     }
     if (!(HEAPU8[($5 + 56 | 0) >> 0] | 0)) {
      break label$41
     }
     if ((HEAP32[($24 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$41
     }
     if (!(ImGui__IsMouseDragging_28int_2c_20float_29(0 | 0, Math_fround(Math_fround(0.0))) | 0)) {
      break label$41
     }
     ImGui__StartMouseMovingWindow_28ImGuiWindow__29($4 | 0);
     break label$40;
    }
    if (!(HEAPU8[($5 + 56 | 0) >> 0] | 0)) {
     break label$40
    }
    if (($14 | 0) < ($3 | 0)) {
     break label$40
    }
    $3 = 0;
    if (!(ImGui__IsMouseDragging_28int_2c_20float_29(0 | 0, Math_fround(Math_fround(-1.0))) | 0)) {
     break label$40
    }
    $17 = Math_fround(0.0);
    label$45 : {
     label$46 : {
      if (!(HEAPU8[($7 + 19040 | 0) >> 0] | 0)) {
       break label$46
      }
      $14 = 0;
      break label$45;
     }
     label$47 : {
      if ($4) {
       break label$47
      }
      if (!((HEAP32[($0 + 12 | 0) >> 2] | 0) & 1 | 0)) {
       break label$40
      }
     }
     $17 = Math_fround(0.0);
     label$48 : {
      label$49 : {
       $16 = Math_fround(HEAPF32[($7 + 188 | 0) >> 2]);
       if (!($16 < Math_fround(0.0))) {
        break label$49
       }
       $15 = Math_fround(HEAPF32[($7 + 3520 | 0) >> 2]);
       $18 = Math_fround(HEAPF32[($5 + 72 | 0) >> 2]);
       if (!($15 < $18)) {
        break label$49
       }
       i64toi32_i32$2 = $7;
       i64toi32_i32$0 = HEAP32[($7 + 3520 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($7 + 3524 | 0) >> 2] | 0;
       $611 = i64toi32_i32$0;
       i64toi32_i32$0 = $5;
       HEAP32[($5 + 48 | 0) >> 2] = $611;
       HEAP32[($5 + 52 | 0) >> 2] = i64toi32_i32$1;
       $17 = Math_fround($18 - $15);
       $14 = 0;
       $3 = 1;
       $24 = $5 + 48 | 0;
       break label$48;
      }
      label$50 : {
       if ($16 > Math_fround(0.0)) {
        break label$50
       }
       $14 = 0;
       break label$45;
      }
      $14 = 0;
      $16 = Math_fround(HEAPF32[($7 + 3520 | 0) >> 2]);
      $15 = Math_fround(HEAPF32[($5 + 80 | 0) >> 2]);
      if (!($16 > $15)) {
       break label$45
      }
      i64toi32_i32$2 = $7;
      i64toi32_i32$1 = HEAP32[($7 + 3520 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($7 + 3524 | 0) >> 2] | 0;
      $630 = i64toi32_i32$1;
      i64toi32_i32$1 = $5;
      HEAP32[($5 + 40 | 0) >> 2] = $630;
      HEAP32[($5 + 44 | 0) >> 2] = i64toi32_i32$0;
      $17 = Math_fround($16 - $15);
      $14 = 1;
      $3 = 0;
      $24 = $5 + 40 | 0;
     }
     i64toi32_i32$2 = $24;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $638 = i64toi32_i32$0;
     i64toi32_i32$0 = $5;
     HEAP32[($5 + 16 | 0) >> 2] = $638;
     HEAP32[($5 + 20 | 0) >> 2] = i64toi32_i32$1;
     ImGui__TabBarQueueReorderFromMousePos_28ImGuiTabBar__2c_20ImGuiTabItem__2c_20ImVec2_29($0 | 0, $2 | 0, $5 + 16 | 0 | 0);
    }
    if (!$4) {
     break label$40
    }
    if ((HEAPU8[($4 + 8 | 0) >> 0] | 0) & 4 | 0) {
     break label$40
    }
    label$51 : {
     label$52 : {
      if (!(HEAPU8[($7 + 19040 | 0) >> 0] | 0)) {
       break label$52
      }
      if ((HEAP32[($7 + 19064 | 0) >> 2] | 0 | 0) == ($8 | 0)) {
       break label$51
      }
     }
     $16 = Math_fround(HEAPF32[($7 + 3524 | 0) >> 2]);
     $15 = Math_fround(Math_fround(HEAPF32[($5 + 76 | 0) >> 2]) - $16);
     $16 = Math_fround($16 - Math_fround(HEAPF32[($5 + 84 | 0) >> 2]));
     $19 = $15 >= $16 ? $15 : $16;
     $16 = Math_fround(HEAPF32[($7 + 15488 | 0) >> 2]);
     $18 = Math_fround($16 * Math_fround(4.0));
     $15 = Math_fround(Math_fround(Math_fround(Math_abs(Math_fround(HEAPF32[($7 + 14168 | 0) >> 2]))) - Math_fround($16 + $16)) * Math_fround(.20000000298023224));
     $15 = Math_fround(Math_fround($16 * Math_fround(1.5)) + ($15 < Math_fround(0.0) ? Math_fround(0.0) : $15 > $18 ? $18 : $15));
     label$53 : {
      if (!($17 > Math_fround($16 * Math_fround(2.200000047683716)))) {
       break label$53
      }
      label$54 : {
       if (!$3) {
        break label$54
       }
       if (($2 | 0) == (HEAP32[($0 + 8 | 0) >> 2] | 0 | 0)) {
        break label$51
       }
      }
      if (!$14) {
       break label$53
      }
      if ((($2 - (HEAP32[($0 + 8 | 0) >> 2] | 0) | 0 | 0) / (48 | 0) | 0 | 0) == ((HEAP32[$0 >> 2] | 0) + -1 | 0 | 0)) {
       break label$51
      }
      if ($19 >= $15) {
       break label$51
      }
      break label$40;
     }
     if (!($19 >= $15)) {
      break label$40
     }
    }
    ImGui__DockContextQueueUndockWindow_28ImGuiContext__2c_20ImGuiWindow__29($7 | 0, $4 | 0);
    HEAP32[($7 + 16128 | 0) >> 2] = $4;
    ImGui__SetActiveID_28unsigned_20int_2c_20ImGuiWindow__29(HEAP32[($4 + 156 | 0) >> 2] | 0 | 0, $4 | 0);
    $3 = HEAP32[($7 + 16128 | 0) >> 2] | 0;
    $17 = Math_fround(HEAPF32[($3 + 68 | 0) >> 2]);
    $16 = Math_fround(HEAPF32[($3 + 64 | 0) >> 2]);
    $15 = Math_fround(HEAPF32[($5 + 76 | 0) >> 2]);
    $18 = Math_fround(HEAPF32[($5 + 72 | 0) >> 2]);
    HEAP8[($7 + 16206 | 0) >> 0] = 1;
    HEAPF32[($7 + 16212 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($7 + 16212 | 0) >> 2]) - Math_fround($16 - $18));
    $3 = $7 + 16216 | 0;
    HEAPF32[$3 >> 2] = Math_fround(Math_fround(HEAPF32[$3 >> 2]) - Math_fround($17 - $15));
    ImGui__SetActiveIdUsingAllKeyboardKeys_28_29();
   }
   $3 = HEAP32[($10 + 672 | 0) >> 2] | 0;
   $14 = 34;
   label$55 : {
    if (HEAPU8[($5 + 56 | 0) >> 0] | 0 | (HEAPU8[($5 + 64 | 0) >> 0] | 0) | 0) {
     break label$55
    }
    $14 = $22 & 2097152 | 0;
    label$56 : {
     if (!$6) {
      break label$56
     }
     $14 = $14 ? 35 : 37;
     break label$55;
    }
    $14 = $14 ? 33 : 36;
   }
   ImGui__TabItemBackground_28ImDrawList__2c_20ImRect_20const__2c_20int_2c_20unsigned_20int_29($3 | 0, $5 + 72 | 0 | 0, $11 | 0, ImGui__GetColorU32_28int_2c_20float_29($14 | 0, Math_fround(Math_fround(1.0))) | 0 | 0);
   ImGui__RenderNavHighlight_28ImRect_20const__2c_20unsigned_20int_2c_20int_29($5 + 72 | 0 | 0, $8 | 0, 1 | 0);
   label$57 : {
    if (!(ImGui__IsItemHovered_28int_29(32 | 0) | 0)) {
     break label$57
    }
    label$58 : {
     label$59 : {
      if (ImGui__IsMouseClicked_28int_2c_20bool_29(1 | 0, 0 | 0) | 0) {
       break label$59
      }
      $14 = ImGui__IsMouseReleased_28int_29(1 | 0) | 0;
      if ($9) {
       break label$57
      }
      if ($14) {
       break label$58
      }
      break label$57;
     }
     if ($9) {
      break label$57
     }
    }
    HEAP32[($0 + 24 | 0) >> 2] = HEAP32[$2 >> 2] | 0;
   }
   $11 = ((HEAP32[($0 + 12 | 0) >> 2] | 0) >>> 1 | 0) & 4 | 0 | $11 | 0;
   label$60 : {
    label$61 : {
     if ($12) {
      break label$61
     }
     $14 = 0;
     break label$60;
    }
    $14 = $8;
    label$62 : {
     if (!$4) {
      break label$62
     }
     $14 = HEAP32[($4 + 4 | 0) >> 2] | 0;
    }
    $14 = ImGui__GetIDWithSeed_28char_20const__2c_20char_20const__2c_20unsigned_20int_29(67648 | 0, 0 | 0, $14 | 0) | 0;
   }
   i64toi32_i32$2 = $0;
   i64toi32_i32$1 = HEAP32[($0 + 116 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0 + 120 | 0) >> 2] | 0;
   $26 = i64toi32_i32$1;
   i64toi32_i32$1 = $5;
   HEAP32[($5 + 8 | 0) >> 2] = $26;
   HEAP32[($5 + 12 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $5;
   HEAP32[($5 + 24 | 0) >> 2] = $26;
   HEAP32[($5 + 28 | 0) >> 2] = i64toi32_i32$0;
   ImGui__TabItemLabelAndCloseButton_28ImDrawList__2c_20ImRect_20const__2c_20int_2c_20ImVec2_2c_20char_20const__2c_20unsigned_20int_2c_20unsigned_20int_2c_20bool_2c_20bool__2c_20bool__29($3 | 0, $5 + 72 | 0 | 0, ($21 ? $11 & -2 | 0 : $11) | 0, $5 + 8 | 0 | 0, $1 | 0, $8 | 0, $14 | 0, $6 | 0, $5 + 39 | 0 | 0, $5 + 38 | 0 | 0);
   label$63 : {
    if (!$12) {
     break label$63
    }
    if (!((HEAPU8[($5 + 39 | 0) >> 0] | 0) & 255 | 0)) {
     break label$63
    }
    HEAP8[$12 >> 0] = 0;
    $3 = HEAP32[($2 + 4 | 0) >> 2] | 0;
    if ($3 & 2097152 | 0) {
     break label$63
    }
    label$64 : {
     if ($3 & 1 | 0) {
      break label$64
     }
     HEAP8[($2 + 44 | 0) >> 0] = 1;
     if ((HEAP32[($0 + 28 | 0) >> 2] | 0 | 0) != (HEAP32[$2 >> 2] | 0 | 0)) {
      break label$63
     }
     HEAP32[($2 + 12 | 0) >> 2] = -1;
     i64toi32_i32$1 = $0;
     i64toi32_i32$0 = 0;
     HEAP32[($0 + 20 | 0) >> 2] = 0;
     HEAP32[($0 + 24 | 0) >> 2] = i64toi32_i32$0;
     break label$63;
    }
    $3 = HEAP32[$2 >> 2] | 0;
    if ((HEAP32[($0 + 28 | 0) >> 2] | 0 | 0) == ($3 | 0)) {
     break label$63
    }
    HEAP32[($0 + 24 | 0) >> 2] = $3;
   }
   label$65 : {
    if (!$4) {
     break label$65
    }
    label$66 : {
     if (HEAPU8[($5 + 64 | 0) >> 0] | 0) {
      break label$66
     }
     if ((HEAP32[($7 + 16172 | 0) >> 2] | 0 | 0) != ($14 | 0)) {
      break label$65
     }
    }
    $3 = $7 + 18288 | 0;
    HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 0 | 128 | 0;
   }
   label$67 : {
    if (!$23) {
     break label$67
    }
    ImGui__PopClipRect_28_29();
   }
   i64toi32_i32$0 = $25$hi;
   i64toi32_i32$1 = $10;
   HEAP32[(i64toi32_i32$1 + 292 | 0) >> 2] = $25;
   HEAP32[(i64toi32_i32$1 + 296 | 0) >> 2] = i64toi32_i32$0;
   label$68 : {
    if (!(HEAPU8[($5 + 38 | 0) >> 0] | 0)) {
     break label$68
    }
    if ((HEAP32[($7 + 16172 | 0) >> 2] | 0 | 0) != ($8 | 0)) {
     break label$68
    }
    if ((HEAPU8[($5 + 56 | 0) >> 0] | 0) & 255 | 0) {
     break label$68
    }
    if ((HEAPU8[($0 + 12 | 0) >> 0] | 0) & 32 | 0) {
     break label$68
    }
    if ((HEAPU8[($2 + 4 | 0) >> 0] | 0) & 16 | 0) {
     break label$68
    }
    if (!(ImGui__IsItemHovered_28int_29(2048 | 0) | 0)) {
     break label$68
    }
    $0 = ImGui__FindRenderedTextEnd_28char_20const__2c_20char_20const__29($1 | 0, 0 | 0) | 0;
    HEAP32[($5 + 4 | 0) >> 2] = $1;
    HEAP32[$5 >> 2] = $0 - $1 | 0;
    ImGui__SetTooltip_28char_20const__2c_20____29(66038 | 0, $5 | 0);
   }
   $6 = $9 ? $13 : $6;
  }
  __stack_pointer = $5 + 96 | 0;
  return $6 | 0;
 }
 
 function ImGui__TabItemBackground_28ImDrawList__2c_20ImRect_20const__2c_20int_2c_20unsigned_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = Math_fround(0), $4 = 0, $11 = 0, $7 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $8 = Math_fround(0), $13 = 0, $5 = 0, $12 = Math_fround(0);
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $5 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  $6 = Math_fround(HEAPF32[($5 + ($2 & 2097152 | 0 ? 14464 : 14532) | 0) >> 2]);
  $7 = Math_fround(HEAPF32[$1 >> 2]);
  $8 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 8 | 0) >> 2]) - $7) * Math_fround(.5)) + Math_fround(-1.0));
  $6 = $6 < $8 ? $6 : $8;
  $6 = $6 <= Math_fround(0.0) ? Math_fround(0.0) : $6;
  $8 = Math_fround(($2 & 8388608 | 0 ? Math_fround(0.0) : Math_fround(-1.0)) + Math_fround(HEAPF32[($1 + 12 | 0) >> 2]));
  $9 = Math_fround(Math_fround(HEAPF32[($1 + 4 | 0) >> 2]) + Math_fround(1.0));
  label$1 : {
   $2 = HEAP32[($0 + 84 | 0) >> 2] | 0;
   if (($2 | 0) != (HEAP32[($0 + 88 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $10 = $2 + 1 | 0;
   label$2 : {
    label$3 : {
     if ($2) {
      break label$3
     }
     $11 = 8;
     break label$2;
    }
    $11 = (($2 | 0) / (2 | 0) | 0) + $2 | 0;
   }
   $10 = ($11 | 0) > ($10 | 0) ? $11 : $10;
   if (($2 | 0) >= ($10 | 0)) {
    break label$1
   }
   $2 = ImGui__MemAlloc_28unsigned_20long_29($10 << 3 | 0 | 0) | 0;
   label$4 : {
    $11 = HEAP32[($0 + 92 | 0) >> 2] | 0;
    if (!$11) {
     break label$4
    }
    __memcpy($2 | 0, $11 | 0, (HEAP32[($0 + 84 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
    ImGui__MemFree_28void__29(HEAP32[($0 + 92 | 0) >> 2] | 0 | 0);
   }
   HEAP32[($0 + 88 | 0) >> 2] = $10;
   HEAP32[($0 + 92 | 0) >> 2] = $2;
   $2 = HEAP32[($0 + 84 | 0) >> 2] | 0;
  }
  $2 = (HEAP32[($0 + 92 | 0) >> 2] | 0) + ($2 << 3 | 0) | 0;
  HEAPF32[($2 + 4 | 0) >> 2] = $8;
  HEAPF32[$2 >> 2] = $7;
  HEAP32[($0 + 84 | 0) >> 2] = (HEAP32[($0 + 84 | 0) >> 2] | 0) + 1 | 0;
  $12 = Math_fround(HEAPF32[$1 >> 2]);
  $7 = Math_fround($9 + $6);
  HEAPF32[($4 + 12 | 0) >> 2] = $7;
  HEAPF32[($4 + 8 | 0) >> 2] = Math_fround($6 + $12);
  ImDrawList__PathArcToFast_28ImVec2_20const__2c_20float_2c_20int_2c_20int_29($0 | 0, $4 + 8 | 0 | 0, Math_fround($6), 6 | 0, 9 | 0);
  $9 = Math_fround(HEAPF32[($1 + 8 | 0) >> 2]);
  HEAPF32[($4 + 12 | 0) >> 2] = $7;
  HEAPF32[($4 + 8 | 0) >> 2] = Math_fround($9 - $6);
  ImDrawList__PathArcToFast_28ImVec2_20const__2c_20float_2c_20int_2c_20int_29($0 | 0, $4 + 8 | 0 | 0, Math_fround($6), 9 | 0, 12 | 0);
  $10 = HEAP32[($1 + 8 | 0) >> 2] | 0;
  label$5 : {
   $2 = HEAP32[($0 + 84 | 0) >> 2] | 0;
   if (($2 | 0) != (HEAP32[($0 + 88 | 0) >> 2] | 0 | 0)) {
    break label$5
   }
   $11 = $2 + 1 | 0;
   label$6 : {
    label$7 : {
     if ($2) {
      break label$7
     }
     $13 = 8;
     break label$6;
    }
    $13 = (($2 | 0) / (2 | 0) | 0) + $2 | 0;
   }
   $11 = ($13 | 0) > ($11 | 0) ? $13 : $11;
   if (($2 | 0) >= ($11 | 0)) {
    break label$5
   }
   $2 = ImGui__MemAlloc_28unsigned_20long_29($11 << 3 | 0 | 0) | 0;
   label$8 : {
    $13 = HEAP32[($0 + 92 | 0) >> 2] | 0;
    if (!$13) {
     break label$8
    }
    __memcpy($2 | 0, $13 | 0, (HEAP32[($0 + 84 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
    ImGui__MemFree_28void__29(HEAP32[($0 + 92 | 0) >> 2] | 0 | 0);
   }
   HEAP32[($0 + 88 | 0) >> 2] = $11;
   HEAP32[($0 + 92 | 0) >> 2] = $2;
   $2 = HEAP32[($0 + 84 | 0) >> 2] | 0;
  }
  $2 = (HEAP32[($0 + 92 | 0) >> 2] | 0) + ($2 << 3 | 0) | 0;
  HEAPF32[($2 + 4 | 0) >> 2] = $8;
  HEAP32[$2 >> 2] = $10;
  $2 = (HEAP32[($0 + 84 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[($0 + 84 | 0) >> 2] = $2;
  ImDrawList__AddConvexPolyFilled_28ImVec2_20const__2c_20int_2c_20unsigned_20int_29($0 | 0, HEAP32[($0 + 92 | 0) >> 2] | 0 | 0, $2 | 0, $3 | 0);
  HEAP32[($0 + 84 | 0) >> 2] = 0;
  label$9 : {
   if (!(Math_fround(HEAPF32[($5 + 14536 | 0) >> 2]) > Math_fround(0.0))) {
    break label$9
   }
   $9 = Math_fround(Math_fround(HEAPF32[$1 >> 2]) + Math_fround(.5));
   label$10 : {
    label$11 : {
     if (!(HEAP32[($0 + 88 | 0) >> 2] | 0)) {
      break label$11
     }
     $2 = HEAP32[($0 + 92 | 0) >> 2] | 0;
     $3 = 0;
     break label$10;
    }
    $2 = ImGui__MemAlloc_28unsigned_20long_29(64 | 0) | 0;
    label$12 : {
     $3 = HEAP32[($0 + 92 | 0) >> 2] | 0;
     if (!$3) {
      break label$12
     }
     __memcpy($2 | 0, $3 | 0, (HEAP32[($0 + 84 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
     ImGui__MemFree_28void__29(HEAP32[($0 + 92 | 0) >> 2] | 0 | 0);
    }
    HEAP32[($0 + 88 | 0) >> 2] = 8;
    HEAP32[($0 + 92 | 0) >> 2] = $2;
    $3 = HEAP32[($0 + 84 | 0) >> 2] | 0;
   }
   $2 = $2 + ($3 << 3 | 0) | 0;
   HEAPF32[($2 + 4 | 0) >> 2] = $8;
   HEAPF32[$2 >> 2] = $9;
   HEAP32[($0 + 84 | 0) >> 2] = (HEAP32[($0 + 84 | 0) >> 2] | 0) + 1 | 0;
   $9 = Math_fround(HEAPF32[$1 >> 2]);
   $7 = Math_fround($7 + Math_fround(.5));
   HEAPF32[($4 + 12 | 0) >> 2] = $7;
   HEAPF32[($4 + 8 | 0) >> 2] = Math_fround(Math_fround($6 + $9) + Math_fround(.5));
   ImDrawList__PathArcToFast_28ImVec2_20const__2c_20float_2c_20int_2c_20int_29($0 | 0, $4 + 8 | 0 | 0, Math_fround($6), 6 | 0, 9 | 0);
   $9 = Math_fround(HEAPF32[($1 + 8 | 0) >> 2]);
   HEAPF32[($4 + 12 | 0) >> 2] = $7;
   HEAPF32[($4 + 8 | 0) >> 2] = Math_fround(Math_fround($9 - $6) + Math_fround(-.5));
   ImDrawList__PathArcToFast_28ImVec2_20const__2c_20float_2c_20int_2c_20int_29($0 | 0, $4 + 8 | 0 | 0, Math_fround($6), 9 | 0, 12 | 0);
   $6 = Math_fround(Math_fround(HEAPF32[($1 + 8 | 0) >> 2]) + Math_fround(-.5));
   label$13 : {
    $1 = HEAP32[($0 + 84 | 0) >> 2] | 0;
    if (($1 | 0) != (HEAP32[($0 + 88 | 0) >> 2] | 0 | 0)) {
     break label$13
    }
    $2 = $1 + 1 | 0;
    label$14 : {
     label$15 : {
      if ($1) {
       break label$15
      }
      $3 = 8;
      break label$14;
     }
     $3 = (($1 | 0) / (2 | 0) | 0) + $1 | 0;
    }
    $2 = ($3 | 0) > ($2 | 0) ? $3 : $2;
    if (($1 | 0) >= ($2 | 0)) {
     break label$13
    }
    $1 = ImGui__MemAlloc_28unsigned_20long_29($2 << 3 | 0 | 0) | 0;
    label$16 : {
     $3 = HEAP32[($0 + 92 | 0) >> 2] | 0;
     if (!$3) {
      break label$16
     }
     __memcpy($1 | 0, $3 | 0, (HEAP32[($0 + 84 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
     ImGui__MemFree_28void__29(HEAP32[($0 + 92 | 0) >> 2] | 0 | 0);
    }
    HEAP32[($0 + 88 | 0) >> 2] = $2;
    HEAP32[($0 + 92 | 0) >> 2] = $1;
    $1 = HEAP32[($0 + 84 | 0) >> 2] | 0;
   }
   $1 = (HEAP32[($0 + 92 | 0) >> 2] | 0) + ($1 << 3 | 0) | 0;
   HEAPF32[($1 + 4 | 0) >> 2] = $8;
   HEAPF32[$1 >> 2] = $6;
   HEAP32[($0 + 84 | 0) >> 2] = (HEAP32[($0 + 84 | 0) >> 2] | 0) + 1 | 0;
   $1 = ImGui__GetColorU32_28int_2c_20float_29(5 | 0, Math_fround(Math_fround(1.0))) | 0;
   ImDrawList__AddPolyline_28ImVec2_20const__2c_20int_2c_20unsigned_20int_2c_20int_2c_20float_29($0 | 0, HEAP32[($0 + 92 | 0) >> 2] | 0 | 0, HEAP32[($0 + 84 | 0) >> 2] | 0 | 0, $1 | 0, 0 | 0, Math_fround(Math_fround(HEAPF32[($5 + 14536 | 0) >> 2])));
   HEAP32[($0 + 84 | 0) >> 2] = 0;
  }
  __stack_pointer = $4 + 16 | 0;
 }
 
 function ImGui__TabItemLabelAndCloseButton_28ImDrawList__2c_20ImRect_20const__2c_20int_2c_20ImVec2_2c_20char_20const__2c_20unsigned_20int_2c_20unsigned_20int_2c_20bool_2c_20bool__2c_20bool__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $10 = 0, $11 = 0, $15 = Math_fround(0), $17 = Math_fround(0), $13 = Math_fround(0), $18 = Math_fround(0), $12 = Math_fround(0), $14 = Math_fround(0), $16 = Math_fround(0), $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $153 = 0, $160 = 0, $167 = 0, $174 = 0, $181 = 0, $188 = 0, $191 = 0, $202 = 0, $205 = 0, $208 = 0, $211 = 0, $214 = 0, $217 = 0, $220 = 0, $278 = 0;
  $10 = __stack_pointer - 112 | 0;
  __stack_pointer = $10;
  $11 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($10 + 104 | 0 | 0, $4 | 0, 0 | 0, 1 | 0, Math_fround(Math_fround(-1.0)));
  label$1 : {
   if (!$8) {
    break label$1
   }
   HEAP8[$8 >> 0] = 0;
  }
  label$2 : {
   if (!$9) {
    break label$2
   }
   HEAP8[$9 >> 0] = 0;
  }
  label$3 : {
   $12 = Math_fround(HEAPF32[($1 + 8 | 0) >> 2]);
   $13 = Math_fround(HEAPF32[$1 >> 2]);
   $14 = Math_fround($12 - $13);
   if ($14 <= Math_fround(1.0)) {
    break label$3
   }
   $15 = Math_fround(HEAPF32[($3 + 4 | 0) >> 2]);
   $16 = Math_fround(HEAPF32[($1 + 4 | 0) >> 2]);
   $17 = Math_fround(HEAPF32[$3 >> 2]);
   HEAPF32[($10 + 100 | 0) >> 2] = Math_fround(HEAPF32[($1 + 12 | 0) >> 2]);
   $18 = Math_fround($12 - $17);
   HEAPF32[($10 + 96 | 0) >> 2] = $18;
   HEAPF32[($10 + 92 | 0) >> 2] = Math_fround($16 + $15);
   $15 = Math_fround($13 + $17);
   HEAPF32[($10 + 88 | 0) >> 2] = $15;
   label$4 : {
    if (!$9) {
     break label$4
    }
    HEAP8[$9 >> 0] = Math_fround($15 + Math_fround(HEAPF32[($10 + 104 | 0) >> 2])) > $18;
   }
   $9 = $10 + 96 | 0;
   $15 = Math_fround(HEAPF32[($11 + 15488 | 0) >> 2]);
   HEAPF32[($10 + 84 | 0) >> 2] = $16;
   $17 = Math_fround(Math_fround($12 - Math_fround($17 + $17)) - $15);
   $13 = $13 >= $17 ? $13 : $17;
   HEAPF32[($10 + 80 | 0) >> 2] = $13;
   label$5 : {
    label$6 : {
     label$7 : {
      if (!$6) {
       break label$7
      }
      label$8 : {
       if ($7) {
        break label$8
       }
       $17 = Math_fround(HEAPF32[($11 + 14540 | 0) >> 2]);
       if (!($14 >= ($15 >= $17 ? $15 : $17))) {
        break label$7
       }
      }
      label$9 : {
       $7 = HEAP32[($11 + 16172 | 0) >> 2] | 0;
       if (($7 | 0) == ($5 | 0)) {
        break label$9
       }
       if (($7 | 0) == ($6 | 0)) {
        break label$9
       }
       $7 = HEAP32[($11 + 16192 | 0) >> 2] | 0;
       if (($7 | 0) == ($5 | 0)) {
        break label$9
       }
       if (($7 | 0) != ($6 | 0)) {
        break label$7
       }
      }
      $17 = Math_fround(HEAPF32[($1 + 8 | 0) >> 2]);
      $5 = $10 + 72 | 0;
      $7 = $11 + 18336 | 0;
      HEAP32[$5 >> 2] = HEAP32[$7 >> 2] | 0;
      $19 = $10 + 64 | 0;
      $20 = $11 + 18328 | 0;
      i64toi32_i32$2 = $20;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $153 = i64toi32_i32$0;
      i64toi32_i32$0 = $19;
      HEAP32[i64toi32_i32$0 >> 2] = $153;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $21 = $10 + 56 | 0;
      $22 = $11 + 18320 | 0;
      i64toi32_i32$2 = $22;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $160 = i64toi32_i32$1;
      i64toi32_i32$1 = $21;
      HEAP32[i64toi32_i32$1 >> 2] = $160;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $23 = $10 + 48 | 0;
      $24 = $11 + 18312 | 0;
      i64toi32_i32$2 = $24;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $167 = i64toi32_i32$0;
      i64toi32_i32$0 = $23;
      HEAP32[i64toi32_i32$0 >> 2] = $167;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $25 = $10 + 40 | 0;
      $26 = $11 + 18304 | 0;
      i64toi32_i32$2 = $26;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $174 = i64toi32_i32$1;
      i64toi32_i32$1 = $25;
      HEAP32[i64toi32_i32$1 >> 2] = $174;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $27 = $10 + 32 | 0;
      $28 = $11 + 18296 | 0;
      i64toi32_i32$2 = $28;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $181 = i64toi32_i32$0;
      i64toi32_i32$0 = $27;
      HEAP32[i64toi32_i32$0 >> 2] = $181;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $29 = $10 + 24 | 0;
      $30 = $11 + 18288 | 0;
      i64toi32_i32$2 = $30;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $188 = i64toi32_i32$1;
      i64toi32_i32$1 = $29;
      HEAP32[i64toi32_i32$1 >> 2] = $188;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $11;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 18280 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 18284 | 0) >> 2] | 0;
      $191 = i64toi32_i32$0;
      i64toi32_i32$0 = $10;
      HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = $191;
      HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$1;
      ImGui__PushStyleVar_28int_2c_20ImVec2_20const__29(11 | 0, $3 | 0);
      $1 = ImGui__CloseButton_28unsigned_20int_2c_20ImVec2_20const__29($6 | 0, i64toi32_i32$0 + 80 | 0 | 0) | 0;
      ImGui__PopStyleVar_28int_29(1 | 0);
      HEAP32[$7 >> 2] = HEAP32[$5 >> 2] | 0;
      i64toi32_i32$2 = $19;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $202 = i64toi32_i32$1;
      i64toi32_i32$1 = $20;
      HEAP32[i64toi32_i32$1 >> 2] = $202;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $21;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $205 = i64toi32_i32$0;
      i64toi32_i32$0 = $22;
      HEAP32[i64toi32_i32$0 >> 2] = $205;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $23;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $208 = i64toi32_i32$1;
      i64toi32_i32$1 = $24;
      HEAP32[i64toi32_i32$1 >> 2] = $208;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $25;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $211 = i64toi32_i32$0;
      i64toi32_i32$0 = $26;
      HEAP32[i64toi32_i32$0 >> 2] = $211;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $27;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $214 = i64toi32_i32$1;
      i64toi32_i32$1 = $28;
      HEAP32[i64toi32_i32$1 >> 2] = $214;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $29;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $217 = i64toi32_i32$0;
      i64toi32_i32$0 = $30;
      HEAP32[i64toi32_i32$0 >> 2] = $217;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $10;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
      $220 = i64toi32_i32$1;
      i64toi32_i32$1 = $11;
      HEAP32[(i64toi32_i32$1 + 18280 | 0) >> 2] = $220;
      HEAP32[(i64toi32_i32$1 + 18284 | 0) >> 2] = i64toi32_i32$0;
      $11 = $2 & Math_fround($15 + $13) <= $17 | 0;
      label$10 : {
       if ($2 & 4 | 0) {
        break label$10
       }
       $1 = $1 | (ImGui__IsMouseClicked_28int_2c_20bool_29(2 | 0, 0 | 0) | 0) | 0;
      }
      $13 = $11 ? Math_fround($15 * Math_fround(.800000011920929)) : Math_fround(0.0);
      break label$6;
     }
     $17 = Math_fround(HEAPF32[($1 + 8 | 0) >> 2]);
     label$11 : {
      if (!($2 & 1 | 0)) {
       break label$11
      }
      $12 = Math_fround($15 + $13);
      if (!($12 <= $17)) {
       break label$11
      }
      $17 = Math_fround(HEAPF32[($11 + 14456 | 0) >> 2]);
      $14 = Math_fround(HEAPF32[($11 + 14460 | 0) >> 2]);
      HEAPF32[($10 + 12 | 0) >> 2] = Math_fround(Math_fround($16 + Math_fround(Math_fround($15 + $16) + Math_fround($14 + $14))) * Math_fround(.5));
      HEAPF32[($10 + 8 | 0) >> 2] = Math_fround(Math_fround($13 + Math_fround($12 + Math_fround($17 + $17))) * Math_fround(.5));
      $1 = 0;
      $11 = ImGui__GetColorU32_28int_2c_20float_29(0 | 0, Math_fround(Math_fround(1.0))) | 0;
      i64toi32_i32$2 = $10;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
      $278 = i64toi32_i32$0;
      i64toi32_i32$0 = i64toi32_i32$2;
      HEAP32[i64toi32_i32$0 >> 2] = $278;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      ImGui__RenderBullet_28ImDrawList__2c_20ImVec2_2c_20unsigned_20int_29($0 | 0, i64toi32_i32$0 | 0, $11 | 0);
      $13 = Math_fround($15 * Math_fround(.800000011920929));
      $15 = $13;
      break label$6;
     }
     $15 = Math_fround($17 + Math_fround(-1.0));
     $1 = 0;
     break label$5;
    }
    HEAPF32[($10 + 96 | 0) >> 2] = Math_fround($18 - $13);
    $18 = Math_fround($18 - $15);
    $15 = $18;
   }
   ImGui__RenderTextEllipsis_28ImDrawList__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20float_2c_20float_2c_20char_20const__2c_20char_20const__2c_20ImVec2_20const__29($0 | 0, $10 + 88 | 0 | 0, $9 | 0, Math_fround($18), Math_fround($15), $4 | 0, 0 | 0, $10 + 104 | 0 | 0);
   if (!$8) {
    break label$3
   }
   HEAP8[$8 >> 0] = $1;
  }
  __stack_pointer = $10 + 112 | 0;
 }
 
 function ImGui__TabItemCalcSize_28ImGuiWindow__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $4 = 0, $7 = Math_fround(0), $3 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0);
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = HEAP32[$1 >> 2] | 0;
  $4 = 1;
  label$1 : {
   if (HEAPU8[($1 + 229 | 0) >> 0] | 0) {
    break label$1
   }
   $4 = ((HEAPU8[($1 + 10 | 0) >> 0] | 0) & 16 | 0) >>> 4 | 0;
  }
  $1 = HEAP32[(0 + 92720 | 0) >> 2] | 0;
  ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($2 + 8 | 0 | 0, $3 | 0, 0 | 0, 1 | 0, Math_fround(Math_fround(-1.0)));
  $5 = Math_fround(HEAPF32[($1 + 14460 | 0) >> 2]);
  $6 = Math_fround(HEAPF32[($1 + 14456 | 0) >> 2]);
  $7 = Math_fround(1.0);
  $8 = Math_fround(HEAPF32[($2 + 12 | 0) >> 2]);
  $9 = Math_fround(HEAPF32[($2 + 8 | 0) >> 2]);
  label$2 : {
   if (!$4) {
    break label$2
   }
   $7 = Math_fround(Math_fround(HEAPF32[($1 + 14480 | 0) >> 2]) + Math_fround(HEAPF32[($1 + 15488 | 0) >> 2]));
  }
  $10 = Math_fround(HEAPF32[((HEAP32[(0 + 92720 | 0) >> 2] | 0) + 15488 | 0) >> 2]);
  HEAPF32[($0 + 4 | 0) >> 2] = Math_fround(Math_fround($5 + $5) + $8);
  $5 = Math_fround(Math_fround($9 + $6) + Math_fround($6 + $7));
  $6 = Math_fround($10 * Math_fround(20.0));
  HEAPF32[$0 >> 2] = $5 < $6 ? $5 : $6;
  __stack_pointer = $2 + 16 | 0;
 }
 
 function acosf($0) {
  $0 = Math_fround($0);
  var $3 = Math_fround(0), $2 = 0, $1 = 0, $4 = Math_fround(0);
  label$1 : {
   $1 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
   $2 = $1 & 2147483647 | 0;
   if ($2 >>> 0 < 1065353216 >>> 0) {
    break label$1
   }
   label$2 : {
    if (($2 | 0) != (1065353216 | 0)) {
     break label$2
    }
    return Math_fround(($1 | 0) > (-1 | 0) ? Math_fround(0.0) : Math_fround(3.141592502593994));
   }
   return Math_fround(Math_fround(Math_fround(0.0) / Math_fround($0 - $0)));
  }
  label$3 : {
   label$4 : {
    if ($2 >>> 0 > 1056964607 >>> 0) {
     break label$4
    }
    $3 = Math_fround(1.570796251296997);
    if ($2 >>> 0 < 847249409 >>> 0) {
     break label$3
    }
    return Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(7.549789415861596e-08) - Math_fround($0 * Math_fround(R(Math_fround(Math_fround($0 * $0)))))) - $0) + Math_fround(1.570796251296997)));
   }
   label$5 : {
    if (($1 | 0) > (-1 | 0)) {
     break label$5
    }
    $0 = Math_fround(Math_fround($0 + Math_fround(1.0)) * Math_fround(.5));
    $3 = Math_fround(sqrtf(Math_fround($0)));
    $0 = Math_fround(Math_fround(1.570796251296997) - Math_fround($3 + Math_fround(Math_fround($3 * Math_fround(R(Math_fround($0)))) + Math_fround(-7.549789415861596e-08))));
    return Math_fround(Math_fround($0 + $0));
   }
   $3 = Math_fround(Math_fround(Math_fround(1.0) - $0) * Math_fround(.5));
   $4 = Math_fround(sqrtf(Math_fround($3)));
   $0 = (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($4), wasm2js_scratch_load_i32(2)) & -4096 | 0), wasm2js_scratch_load_f32());
   $0 = Math_fround(Math_fround(Math_fround($4 * Math_fround(R(Math_fround($3)))) + Math_fround(Math_fround($3 - Math_fround($0 * $0)) / Math_fround($4 + $0))) + $0);
   $3 = Math_fround($0 + $0);
  }
  return Math_fround($3);
 }
 
 function R($0) {
  $0 = Math_fround($0);
  return Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($0 * Math_fround(Math_fround($0 * Math_fround(-.008656363002955914)) + Math_fround(-.04274342209100723))) + Math_fround(.16666586697101593)) * $0) / Math_fround(Math_fround($0 * Math_fround(-.7066296339035034)) + Math_fround(1.0))));
 }
 
 function __cosdf($0) {
  $0 = +$0;
  var $1 = 0.0;
  $0 = $0 * $0;
  $1 = $0 * $0;
  return Math_fround(Math_fround($0 * $1 * ($0 * 2.439044879627741e-05 + -.001388676377460993) + ($1 * .04166662332373906 + ($0 * -.499999997251031 + 1.0))));
 }
 
 function __sindf($0) {
  $0 = +$0;
  var $1 = 0.0, $2 = 0.0;
  $1 = $0 * $0;
  $2 = $1 * $0;
  return Math_fround(Math_fround($2 * ($1 * $1) * ($1 * 2.718311493989822e-06 + -1.9839334836096632e-04) + ($2 * ($1 * .008333329385889463 + -.16666666641626524) + $0)));
 }
 
 function __rem_pio2_large($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $12 = 0.0, $11 = 0, $6 = 0, $5 = 0, $19 = 0.0, $14 = 0, $15 = 0, $9 = 0, $8 = 0, $22 = 0, $10 = 0, $20 = 0, $13 = 0, $23 = 0.0, $7 = 0, $17 = 0, $21 = 0, $16 = 0, $18 = 0, $206 = 0, $209 = 0, $526 = 0.0, $564 = 0.0;
  $5 = __stack_pointer - 560 | 0;
  __stack_pointer = $5;
  $6 = ($2 + -3 | 0 | 0) / (24 | 0) | 0;
  $7 = ($6 | 0) > (0 | 0) ? $6 : 0;
  $8 = Math_imul($7, -24) + $2 | 0;
  label$1 : {
   $9 = HEAP32[(($4 << 2 | 0) + 88368 | 0) >> 2] | 0;
   $10 = $3 + -1 | 0;
   if (($9 + $10 | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $11 = $9 + $3 | 0;
   $2 = $7 - $10 | 0;
   $6 = 0;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      if (($2 | 0) >= (0 | 0)) {
       break label$4
      }
      $12 = 0.0;
      break label$3;
     }
     $12 = +(HEAP32[(($2 << 2 | 0) + 88384 | 0) >> 2] | 0 | 0);
    }
    HEAPF64[(($5 + 320 | 0) + ($6 << 3 | 0) | 0) >> 3] = $12;
    $2 = $2 + 1 | 0;
    $6 = $6 + 1 | 0;
    if (($6 | 0) != ($11 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $13 = $8 + -24 | 0;
  $11 = 0;
  $14 = ($9 | 0) > (0 | 0) ? $9 : 0;
  $15 = ($3 | 0) < (1 | 0);
  label$5 : while (1) {
   label$6 : {
    label$7 : {
     if (!$15) {
      break label$7
     }
     $12 = 0.0;
     break label$6;
    }
    $6 = $11 + $10 | 0;
    $2 = 0;
    $12 = 0.0;
    label$8 : while (1) {
     $12 = +HEAPF64[($0 + ($2 << 3 | 0) | 0) >> 3] * +HEAPF64[(($5 + 320 | 0) + (($6 - $2 | 0) << 3 | 0) | 0) >> 3] + $12;
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($3 | 0)) {
      continue label$8
     }
     break label$8;
    };
   }
   HEAPF64[($5 + ($11 << 3 | 0) | 0) >> 3] = $12;
   $2 = ($11 | 0) == ($14 | 0);
   $11 = $11 + 1 | 0;
   if (!$2) {
    continue label$5
   }
   break label$5;
  };
  $16 = 47 - $8 | 0;
  $17 = 48 - $8 | 0;
  $18 = $8 + -25 | 0;
  $11 = $9;
  label$9 : {
   label$10 : while (1) {
    $12 = +HEAPF64[($5 + ($11 << 3 | 0) | 0) >> 3];
    $2 = 0;
    $6 = $11;
    label$11 : {
     $10 = ($11 | 0) < (1 | 0);
     if ($10) {
      break label$11
     }
     label$12 : while (1) {
      $14 = $2 << 2 | 0;
      label$13 : {
       label$14 : {
        $19 = $12 * 5.9604644775390625e-08;
        if (!(Math_abs($19) < 2147483648.0)) {
         break label$14
        }
        $15 = ~~$19;
        break label$13;
       }
       $15 = -2147483648;
      }
      $14 = ($5 + 480 | 0) + $14 | 0;
      label$15 : {
       label$16 : {
        $19 = +($15 | 0);
        $12 = $19 * -16777216.0 + $12;
        if (!(Math_abs($12) < 2147483648.0)) {
         break label$16
        }
        $15 = ~~$12;
        break label$15;
       }
       $15 = -2147483648;
      }
      HEAP32[$14 >> 2] = $15;
      $6 = $6 + -1 | 0;
      $12 = +HEAPF64[($5 + ($6 << 3 | 0) | 0) >> 3] + $19;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($11 | 0)) {
       continue label$12
      }
      break label$12;
     };
    }
    $12 = +scalbn(+$12, $13 | 0);
    label$17 : {
     label$18 : {
      $12 = $12 + +floor(+($12 * .125)) * -8.0;
      if (!(Math_abs($12) < 2147483648.0)) {
       break label$18
      }
      $20 = ~~$12;
      break label$17;
     }
     $20 = -2147483648;
    }
    $12 = $12 - +($20 | 0);
    label$19 : {
     label$20 : {
      label$21 : {
       label$22 : {
        label$23 : {
         $21 = ($13 | 0) < (1 | 0);
         if ($21) {
          break label$23
         }
         $2 = (($11 << 2 | 0) + ($5 + 480 | 0) | 0) + -4 | 0;
         $206 = $2;
         $2 = HEAP32[$2 >> 2] | 0;
         $209 = $2;
         $2 = $2 >> $17 | 0;
         $6 = $209 - ($2 << $17 | 0) | 0;
         HEAP32[$206 >> 2] = $6;
         $22 = $6 >> $16 | 0;
         $20 = $2 + $20 | 0;
         break label$22;
        }
        if ($13) {
         break label$21
        }
        $22 = (HEAP32[((($11 << 2 | 0) + ($5 + 480 | 0) | 0) + -4 | 0) >> 2] | 0) >> 23 | 0;
       }
       if (($22 | 0) < (1 | 0)) {
        break label$19
       }
       break label$20;
      }
      $22 = 2;
      if ($12 >= .5) {
       break label$20
      }
      $22 = 0;
      break label$19;
     }
     $2 = 0;
     $15 = 0;
     label$24 : {
      if ($10) {
       break label$24
      }
      label$25 : while (1) {
       $10 = ($5 + 480 | 0) + ($2 << 2 | 0) | 0;
       $6 = HEAP32[$10 >> 2] | 0;
       $14 = 16777215;
       label$26 : {
        label$27 : {
         if ($15) {
          break label$27
         }
         $14 = 16777216;
         if ($6) {
          break label$27
         }
         $15 = 0;
         break label$26;
        }
        HEAP32[$10 >> 2] = $14 - $6 | 0;
        $15 = 1;
       }
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($11 | 0)) {
        continue label$25
       }
       break label$25;
      };
     }
     label$28 : {
      if ($21) {
       break label$28
      }
      $2 = 8388607;
      label$29 : {
       switch ($18 | 0) {
       case 1:
        $2 = 4194303;
        break;
       case 0:
        break label$29;
       default:
        break label$28;
       };
      }
      $6 = (($11 << 2 | 0) + ($5 + 480 | 0) | 0) + -4 | 0;
      HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) & $2 | 0;
     }
     $20 = $20 + 1 | 0;
     if (($22 | 0) != (2 | 0)) {
      break label$19
     }
     $12 = 1.0 - $12;
     $22 = 2;
     if (!$15) {
      break label$19
     }
     $12 = $12 - +scalbn(+(1.0), $13 | 0);
    }
    label$31 : {
     if ($12 != 0.0) {
      break label$31
     }
     $6 = 0;
     $2 = $11;
     label$32 : {
      if (($2 | 0) <= ($9 | 0)) {
       break label$32
      }
      label$33 : while (1) {
       $2 = $2 + -1 | 0;
       $6 = HEAP32[(($5 + 480 | 0) + ($2 << 2 | 0) | 0) >> 2] | 0 | $6 | 0;
       if (($2 | 0) > ($9 | 0)) {
        continue label$33
       }
       break label$33;
      };
      if (!$6) {
       break label$32
      }
      $8 = $13;
      label$34 : while (1) {
       $8 = $8 + -24 | 0;
       $11 = $11 + -1 | 0;
       if (!(HEAP32[(($5 + 480 | 0) + ($11 << 2 | 0) | 0) >> 2] | 0)) {
        continue label$34
       }
       break label$9;
      };
     }
     $2 = 1;
     label$35 : while (1) {
      $6 = $2;
      $2 = $2 + 1 | 0;
      if (!(HEAP32[(($5 + 480 | 0) + (($9 - $6 | 0) << 2 | 0) | 0) >> 2] | 0)) {
       continue label$35
      }
      break label$35;
     };
     $14 = $6 + $11 | 0;
     label$36 : while (1) {
      $6 = $11 + $3 | 0;
      $11 = $11 + 1 | 0;
      HEAPF64[(($5 + 320 | 0) + ($6 << 3 | 0) | 0) >> 3] = +(HEAP32[((($11 + $7 | 0) << 2 | 0) + 88384 | 0) >> 2] | 0 | 0);
      $2 = 0;
      $12 = 0.0;
      label$37 : {
       if (($3 | 0) < (1 | 0)) {
        break label$37
       }
       label$38 : while (1) {
        $12 = +HEAPF64[($0 + ($2 << 3 | 0) | 0) >> 3] * +HEAPF64[(($5 + 320 | 0) + (($6 - $2 | 0) << 3 | 0) | 0) >> 3] + $12;
        $2 = $2 + 1 | 0;
        if (($2 | 0) != ($3 | 0)) {
         continue label$38
        }
        break label$38;
       };
      }
      HEAPF64[($5 + ($11 << 3 | 0) | 0) >> 3] = $12;
      if (($11 | 0) < ($14 | 0)) {
       continue label$36
      }
      break label$36;
     };
     $11 = $14;
     continue label$10;
    }
    break label$10;
   };
   label$39 : {
    label$40 : {
     $12 = +scalbn(+$12, 24 - $8 | 0 | 0);
     if (!($12 >= 16777216.0)) {
      break label$40
     }
     $3 = $11 << 2 | 0;
     label$41 : {
      label$42 : {
       $19 = $12 * 5.9604644775390625e-08;
       if (!(Math_abs($19) < 2147483648.0)) {
        break label$42
       }
       $2 = ~~$19;
       break label$41;
      }
      $2 = -2147483648;
     }
     $3 = ($5 + 480 | 0) + $3 | 0;
     label$43 : {
      label$44 : {
       $12 = +($2 | 0) * -16777216.0 + $12;
       if (!(Math_abs($12) < 2147483648.0)) {
        break label$44
       }
       $6 = ~~$12;
       break label$43;
      }
      $6 = -2147483648;
     }
     HEAP32[$3 >> 2] = $6;
     $11 = $11 + 1 | 0;
     break label$39;
    }
    label$45 : {
     label$46 : {
      if (!(Math_abs($12) < 2147483648.0)) {
       break label$46
      }
      $2 = ~~$12;
      break label$45;
     }
     $2 = -2147483648;
    }
    $8 = $13;
   }
   HEAP32[(($5 + 480 | 0) + ($11 << 2 | 0) | 0) >> 2] = $2;
  }
  $12 = +scalbn(+(1.0), $8 | 0);
  label$47 : {
   if (($11 | 0) <= (-1 | 0)) {
    break label$47
   }
   $3 = $11;
   label$48 : while (1) {
    $2 = $3;
    HEAPF64[($5 + ($2 << 3 | 0) | 0) >> 3] = $12 * +(HEAP32[(($5 + 480 | 0) + ($2 << 2 | 0) | 0) >> 2] | 0 | 0);
    $3 = $2 + -1 | 0;
    $12 = $12 * 5.9604644775390625e-08;
    if ($2) {
     continue label$48
    }
    break label$48;
   };
   $14 = 0;
   if (($11 | 0) < (0 | 0)) {
    break label$47
   }
   $9 = ($9 | 0) > (0 | 0) ? $9 : 0;
   $6 = $11;
   label$49 : while (1) {
    $0 = $9 >>> 0 < $14 >>> 0 ? $9 : $14;
    $15 = $11 - $6 | 0;
    $2 = 0;
    $12 = 0.0;
    label$50 : while (1) {
     $12 = +HEAPF64[(($2 << 3 | 0) + 91152 | 0) >> 3] * +HEAPF64[($5 + (($2 + $6 | 0) << 3 | 0) | 0) >> 3] + $12;
     $3 = ($2 | 0) != ($0 | 0);
     $2 = $2 + 1 | 0;
     if ($3) {
      continue label$50
     }
     break label$50;
    };
    HEAPF64[(($5 + 160 | 0) + ($15 << 3 | 0) | 0) >> 3] = $12;
    $6 = $6 + -1 | 0;
    $2 = ($14 | 0) != ($11 | 0);
    $14 = $14 + 1 | 0;
    if ($2) {
     continue label$49
    }
    break label$49;
   };
  }
  label$51 : {
   label$52 : {
    label$53 : {
     switch ($4 | 0) {
     case 3:
      $23 = 0.0;
      label$56 : {
       if (($11 | 0) < (1 | 0)) {
        break label$56
       }
       $12 = +HEAPF64[(($5 + 160 | 0) + ($11 << 3 | 0) | 0) >> 3];
       $2 = $11;
       label$57 : while (1) {
        $3 = $2 + -1 | 0;
        $6 = ($5 + 160 | 0) + ($3 << 3 | 0) | 0;
        $19 = +HEAPF64[$6 >> 3];
        $526 = $19;
        $19 = $19 + $12;
        HEAPF64[(($5 + 160 | 0) + ($2 << 3 | 0) | 0) >> 3] = $12 + ($526 - $19);
        HEAPF64[$6 >> 3] = $19;
        $6 = $2 >>> 0 > 1 >>> 0;
        $12 = $19;
        $2 = $3;
        if ($6) {
         continue label$57
        }
        break label$57;
       };
       if (($11 | 0) < (2 | 0)) {
        break label$56
       }
       $12 = +HEAPF64[(($5 + 160 | 0) + ($11 << 3 | 0) | 0) >> 3];
       $2 = $11;
       label$58 : while (1) {
        $3 = $2 + -1 | 0;
        $6 = ($5 + 160 | 0) + ($3 << 3 | 0) | 0;
        $19 = +HEAPF64[$6 >> 3];
        $564 = $19;
        $19 = $19 + $12;
        HEAPF64[(($5 + 160 | 0) + ($2 << 3 | 0) | 0) >> 3] = $12 + ($564 - $19);
        HEAPF64[$6 >> 3] = $19;
        $6 = $2 >>> 0 > 2 >>> 0;
        $12 = $19;
        $2 = $3;
        if ($6) {
         continue label$58
        }
        break label$58;
       };
       $23 = 0.0;
       if (($11 | 0) <= (1 | 0)) {
        break label$56
       }
       label$59 : while (1) {
        $23 = $23 + +HEAPF64[(($5 + 160 | 0) + ($11 << 3 | 0) | 0) >> 3];
        $2 = ($11 | 0) > (2 | 0);
        $11 = $11 + -1 | 0;
        if ($2) {
         continue label$59
        }
        break label$59;
       };
      }
      $12 = +HEAPF64[($5 + 160 | 0) >> 3];
      if ($22) {
       break label$52
      }
      HEAPF64[$1 >> 3] = $12;
      $12 = +HEAPF64[($5 + 168 | 0) >> 3];
      HEAPF64[($1 + 16 | 0) >> 3] = $23;
      HEAPF64[($1 + 8 | 0) >> 3] = $12;
      break label$51;
     case 0:
      $12 = 0.0;
      label$60 : {
       if (($11 | 0) < (0 | 0)) {
        break label$60
       }
       label$61 : while (1) {
        $2 = $11;
        $11 = $2 + -1 | 0;
        $12 = $12 + +HEAPF64[(($5 + 160 | 0) + ($2 << 3 | 0) | 0) >> 3];
        if ($2) {
         continue label$61
        }
        break label$61;
       };
      }
      HEAPF64[$1 >> 3] = $22 ? -$12 : $12;
      break label$51;
     case 1:
     case 2:
      break label$53;
     default:
      break label$51;
     };
    }
    $12 = 0.0;
    label$62 : {
     if (($11 | 0) < (0 | 0)) {
      break label$62
     }
     $3 = $11;
     label$63 : while (1) {
      $2 = $3;
      $3 = $2 + -1 | 0;
      $12 = $12 + +HEAPF64[(($5 + 160 | 0) + ($2 << 3 | 0) | 0) >> 3];
      if ($2) {
       continue label$63
      }
      break label$63;
     };
    }
    HEAPF64[$1 >> 3] = $22 ? -$12 : $12;
    $12 = +HEAPF64[($5 + 160 | 0) >> 3] - $12;
    $2 = 1;
    label$64 : {
     if (($11 | 0) < (1 | 0)) {
      break label$64
     }
     label$65 : while (1) {
      $12 = $12 + +HEAPF64[(($5 + 160 | 0) + ($2 << 3 | 0) | 0) >> 3];
      $3 = ($2 | 0) != ($11 | 0);
      $2 = $2 + 1 | 0;
      if ($3) {
       continue label$65
      }
      break label$65;
     };
    }
    HEAPF64[($1 + 8 | 0) >> 3] = $22 ? -$12 : $12;
    break label$51;
   }
   HEAPF64[$1 >> 3] = -$12;
   $12 = +HEAPF64[($5 + 168 | 0) >> 3];
   HEAPF64[($1 + 16 | 0) >> 3] = -$23;
   HEAPF64[($1 + 8 | 0) >> 3] = -$12;
  }
  __stack_pointer = $5 + 560 | 0;
  return $20 & 7 | 0 | 0;
 }
 
 function __rem_pio2f($0, $1) {
  $0 = Math_fround($0);
  $1 = $1 | 0;
  var $4 = 0, $6 = 0.0, $2 = 0, $3 = 0, $5 = 0.0, $7 = 0.0, $8 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    $3 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
    $4 = $3 & 2147483647 | 0;
    if ($4 >>> 0 > 1305022426 >>> 0) {
     break label$2
    }
    $5 = +$0;
    $6 = $5 * .6366197723675814 + 6755399441055744.0 + -6755399441055744.0;
    $7 = $5 + $6 * -1.5707963109016418 + $6 * -1.5893254773528196e-08;
    HEAPF64[$1 >> 3] = $7;
    $3 = $7 < -.7853981852531433;
    label$3 : {
     label$4 : {
      if (!(Math_abs($6) < 2147483648.0)) {
       break label$4
      }
      $4 = ~~$6;
      break label$3;
     }
     $4 = -2147483648;
    }
    label$5 : {
     if (!$3) {
      break label$5
     }
     $6 = $6 + -1.0;
     HEAPF64[$1 >> 3] = $5 + $6 * -1.5707963109016418 + $6 * -1.5893254773528196e-08;
     $4 = $4 + -1 | 0;
     break label$1;
    }
    if (!($7 > .7853981852531433)) {
     break label$1
    }
    $6 = $6 + 1.0;
    HEAPF64[$1 >> 3] = $5 + $6 * -1.5707963109016418 + $6 * -1.5893254773528196e-08;
    $4 = $4 + 1 | 0;
    break label$1;
   }
   label$6 : {
    if ($4 >>> 0 < 2139095040 >>> 0) {
     break label$6
    }
    HEAPF64[$1 >> 3] = +Math_fround($0 - $0);
    $4 = 0;
    break label$1;
   }
   $8 = ($4 >>> 23 | 0) + -150 | 0;
   HEAPF64[($2 + 8 | 0) >> 3] = +(wasm2js_scratch_store_i32(2, $4 - ($8 << 23 | 0) | 0), wasm2js_scratch_load_f32());
   $4 = __rem_pio2_large($2 + 8 | 0 | 0, $2 | 0, $8 | 0, 1 | 0, 0 | 0) | 0;
   $6 = +HEAPF64[$2 >> 3];
   label$7 : {
    if (($3 | 0) > (-1 | 0)) {
     break label$7
    }
    HEAPF64[$1 >> 3] = -$6;
    $4 = 0 - $4 | 0;
    break label$1;
   }
   HEAPF64[$1 >> 3] = $6;
  }
  __stack_pointer = $2 + 16 | 0;
  return $4 | 0;
 }
 
 function cosf($0) {
  $0 = Math_fround($0);
  var $4 = Math_fround(0), $1 = 0, $3 = 0, $2 = 0, $5 = 0.0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  label$1 : {
   label$2 : {
    $2 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
    $3 = $2 & 2147483647 | 0;
    if ($3 >>> 0 > 1061752794 >>> 0) {
     break label$2
    }
    $4 = Math_fround(1.0);
    if ($3 >>> 0 < 964689920 >>> 0) {
     break label$1
    }
    $4 = Math_fround(__cosdf(+(+$0)));
    break label$1;
   }
   label$3 : {
    if ($3 >>> 0 > 1081824209 >>> 0) {
     break label$3
    }
    label$4 : {
     if ($3 >>> 0 < 1075235812 >>> 0) {
      break label$4
     }
     $4 = Math_fround(-Math_fround(__cosdf(+((($2 | 0) < (0 | 0) ? 3.141592653589793 : -3.141592653589793) + +$0))));
     break label$1;
    }
    $5 = +$0;
    label$5 : {
     if (($2 | 0) > (-1 | 0)) {
      break label$5
     }
     $4 = Math_fround(__sindf(+($5 + 1.5707963267948966)));
     break label$1;
    }
    $4 = Math_fround(__sindf(+(1.5707963267948966 - $5)));
    break label$1;
   }
   label$6 : {
    if ($3 >>> 0 > 1088565717 >>> 0) {
     break label$6
    }
    label$7 : {
     if ($3 >>> 0 < 1085271520 >>> 0) {
      break label$7
     }
     $4 = Math_fround(__cosdf(+((($2 | 0) < (0 | 0) ? 6.283185307179586 : -6.283185307179586) + +$0)));
     break label$1;
    }
    label$8 : {
     if (($2 | 0) > (-1 | 0)) {
      break label$8
     }
     $4 = Math_fround(__sindf(+(-4.71238898038469 - +$0)));
     break label$1;
    }
    $4 = Math_fround(__sindf(+(+$0 + -4.71238898038469)));
    break label$1;
   }
   label$9 : {
    if ($3 >>> 0 < 2139095040 >>> 0) {
     break label$9
    }
    $4 = Math_fround($0 - $0);
    break label$1;
   }
   label$10 : {
    switch ((__rem_pio2f(Math_fround($0), $1 + 8 | 0 | 0) | 0) & 3 | 0 | 0) {
    case 0:
     $4 = Math_fround(__cosdf(+(+HEAPF64[($1 + 8 | 0) >> 3])));
     break label$1;
    case 1:
     $4 = Math_fround(__sindf(+-+HEAPF64[($1 + 8 | 0) >> 3]));
     break label$1;
    case 2:
     $4 = Math_fround(-Math_fround(__cosdf(+(+HEAPF64[($1 + 8 | 0) >> 3]))));
     break label$1;
    default:
     break label$10;
    };
   }
   $4 = Math_fround(__sindf(+(+HEAPF64[($1 + 8 | 0) >> 3])));
  }
  __stack_pointer = $1 + 16 | 0;
  return Math_fround($4);
 }
 
 function __memcpy($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $5 = 0;
  label$1 : {
   if ($2 >>> 0 < 512 >>> 0) {
    break label$1
   }
   emscripten_memcpy_big($0 | 0, $1 | 0, $2 | 0);
   return $0 | 0;
  }
  $3 = $0 + $2 | 0;
  label$2 : {
   label$3 : {
    if (($1 ^ $0 | 0) & 3 | 0) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ($0 & 3 | 0) {
       break label$5
      }
      $2 = $0;
      break label$4;
     }
     label$6 : {
      if ($2) {
       break label$6
      }
      $2 = $0;
      break label$4;
     }
     $2 = $0;
     label$7 : while (1) {
      HEAP8[$2 >> 0] = HEAPU8[$1 >> 0] | 0;
      $1 = $1 + 1 | 0;
      $2 = $2 + 1 | 0;
      if (!($2 & 3 | 0)) {
       break label$4
      }
      if ($2 >>> 0 < $3 >>> 0) {
       continue label$7
      }
      break label$7;
     };
    }
    label$8 : {
     $4 = $3 & -4 | 0;
     if ($4 >>> 0 < 64 >>> 0) {
      break label$8
     }
     $5 = $4 + -64 | 0;
     if ($2 >>> 0 > $5 >>> 0) {
      break label$8
     }
     label$9 : while (1) {
      HEAP32[$2 >> 2] = HEAP32[$1 >> 2] | 0;
      HEAP32[($2 + 4 | 0) >> 2] = HEAP32[($1 + 4 | 0) >> 2] | 0;
      HEAP32[($2 + 8 | 0) >> 2] = HEAP32[($1 + 8 | 0) >> 2] | 0;
      HEAP32[($2 + 12 | 0) >> 2] = HEAP32[($1 + 12 | 0) >> 2] | 0;
      HEAP32[($2 + 16 | 0) >> 2] = HEAP32[($1 + 16 | 0) >> 2] | 0;
      HEAP32[($2 + 20 | 0) >> 2] = HEAP32[($1 + 20 | 0) >> 2] | 0;
      HEAP32[($2 + 24 | 0) >> 2] = HEAP32[($1 + 24 | 0) >> 2] | 0;
      HEAP32[($2 + 28 | 0) >> 2] = HEAP32[($1 + 28 | 0) >> 2] | 0;
      HEAP32[($2 + 32 | 0) >> 2] = HEAP32[($1 + 32 | 0) >> 2] | 0;
      HEAP32[($2 + 36 | 0) >> 2] = HEAP32[($1 + 36 | 0) >> 2] | 0;
      HEAP32[($2 + 40 | 0) >> 2] = HEAP32[($1 + 40 | 0) >> 2] | 0;
      HEAP32[($2 + 44 | 0) >> 2] = HEAP32[($1 + 44 | 0) >> 2] | 0;
      HEAP32[($2 + 48 | 0) >> 2] = HEAP32[($1 + 48 | 0) >> 2] | 0;
      HEAP32[($2 + 52 | 0) >> 2] = HEAP32[($1 + 52 | 0) >> 2] | 0;
      HEAP32[($2 + 56 | 0) >> 2] = HEAP32[($1 + 56 | 0) >> 2] | 0;
      HEAP32[($2 + 60 | 0) >> 2] = HEAP32[($1 + 60 | 0) >> 2] | 0;
      $1 = $1 + 64 | 0;
      $2 = $2 + 64 | 0;
      if ($2 >>> 0 <= $5 >>> 0) {
       continue label$9
      }
      break label$9;
     };
    }
    if ($2 >>> 0 >= $4 >>> 0) {
     break label$2
    }
    label$10 : while (1) {
     HEAP32[$2 >> 2] = HEAP32[$1 >> 2] | 0;
     $1 = $1 + 4 | 0;
     $2 = $2 + 4 | 0;
     if ($2 >>> 0 < $4 >>> 0) {
      continue label$10
     }
     break label$2;
    };
   }
   label$11 : {
    if ($3 >>> 0 >= 4 >>> 0) {
     break label$11
    }
    $2 = $0;
    break label$2;
   }
   label$12 : {
    $4 = $3 + -4 | 0;
    if ($4 >>> 0 >= $0 >>> 0) {
     break label$12
    }
    $2 = $0;
    break label$2;
   }
   $2 = $0;
   label$13 : while (1) {
    HEAP8[$2 >> 0] = HEAPU8[$1 >> 0] | 0;
    HEAP8[($2 + 1 | 0) >> 0] = HEAPU8[($1 + 1 | 0) >> 0] | 0;
    HEAP8[($2 + 2 | 0) >> 0] = HEAPU8[($1 + 2 | 0) >> 0] | 0;
    HEAP8[($2 + 3 | 0) >> 0] = HEAPU8[($1 + 3 | 0) >> 0] | 0;
    $1 = $1 + 4 | 0;
    $2 = $2 + 4 | 0;
    if ($2 >>> 0 <= $4 >>> 0) {
     continue label$13
    }
    break label$13;
   };
  }
  label$14 : {
   if ($2 >>> 0 >= $3 >>> 0) {
    break label$14
   }
   label$15 : while (1) {
    HEAP8[$2 >> 0] = HEAPU8[$1 >> 0] | 0;
    $1 = $1 + 1 | 0;
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($3 | 0)) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0 | 0;
 }
 
 function memmove($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  label$1 : {
   if (($0 | 0) == ($1 | 0)) {
    break label$1
   }
   label$2 : {
    $3 = $0 + $2 | 0;
    if (($1 - $3 | 0) >>> 0 > (0 - ($2 << 1 | 0) | 0) >>> 0) {
     break label$2
    }
    return __memcpy($0 | 0, $1 | 0, $2 | 0) | 0 | 0;
   }
   $4 = ($1 ^ $0 | 0) & 3 | 0;
   label$3 : {
    label$4 : {
     label$5 : {
      if ($0 >>> 0 >= $1 >>> 0) {
       break label$5
      }
      label$6 : {
       if (!$4) {
        break label$6
       }
       $3 = $0;
       break label$3;
      }
      label$7 : {
       if ($0 & 3 | 0) {
        break label$7
       }
       $3 = $0;
       break label$4;
      }
      $3 = $0;
      label$8 : while (1) {
       if (!$2) {
        break label$1
       }
       HEAP8[$3 >> 0] = HEAPU8[$1 >> 0] | 0;
       $1 = $1 + 1 | 0;
       $2 = $2 + -1 | 0;
       $3 = $3 + 1 | 0;
       if (!($3 & 3 | 0)) {
        break label$4
       }
       continue label$8;
      };
     }
     label$9 : {
      if ($4) {
       break label$9
      }
      label$10 : {
       if (!($3 & 3 | 0)) {
        break label$10
       }
       label$11 : while (1) {
        if (!$2) {
         break label$1
        }
        $2 = $2 + -1 | 0;
        $3 = $0 + $2 | 0;
        HEAP8[$3 >> 0] = HEAPU8[($1 + $2 | 0) >> 0] | 0;
        if ($3 & 3 | 0) {
         continue label$11
        }
        break label$11;
       };
      }
      if ($2 >>> 0 <= 3 >>> 0) {
       break label$9
      }
      label$12 : while (1) {
       $2 = $2 + -4 | 0;
       HEAP32[($0 + $2 | 0) >> 2] = HEAP32[($1 + $2 | 0) >> 2] | 0;
       if ($2 >>> 0 > 3 >>> 0) {
        continue label$12
       }
       break label$12;
      };
     }
     if (!$2) {
      break label$1
     }
     label$13 : while (1) {
      $2 = $2 + -1 | 0;
      HEAP8[($0 + $2 | 0) >> 0] = HEAPU8[($1 + $2 | 0) >> 0] | 0;
      if ($2) {
       continue label$13
      }
      break label$1;
     };
    }
    if ($2 >>> 0 <= 3 >>> 0) {
     break label$3
    }
    label$14 : while (1) {
     HEAP32[$3 >> 2] = HEAP32[$1 >> 2] | 0;
     $1 = $1 + 4 | 0;
     $3 = $3 + 4 | 0;
     $2 = $2 + -4 | 0;
     if ($2 >>> 0 > 3 >>> 0) {
      continue label$14
     }
     break label$14;
    };
   }
   if (!$2) {
    break label$1
   }
   label$15 : while (1) {
    HEAP8[$3 >> 0] = HEAPU8[$1 >> 0] | 0;
    $3 = $3 + 1 | 0;
    $1 = $1 + 1 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0 | 0;
 }
 
 function memset($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, i64toi32_i32$0 = 0, $4 = 0, i64toi32_i32$1 = 0, $6 = 0, $5 = 0, $6$hi = 0;
  label$1 : {
   if (!$2) {
    break label$1
   }
   HEAP8[$0 >> 0] = $1;
   $3 = $2 + $0 | 0;
   HEAP8[($3 + -1 | 0) >> 0] = $1;
   if ($2 >>> 0 < 3 >>> 0) {
    break label$1
   }
   HEAP8[($0 + 2 | 0) >> 0] = $1;
   HEAP8[($0 + 1 | 0) >> 0] = $1;
   HEAP8[($3 + -3 | 0) >> 0] = $1;
   HEAP8[($3 + -2 | 0) >> 0] = $1;
   if ($2 >>> 0 < 7 >>> 0) {
    break label$1
   }
   HEAP8[($0 + 3 | 0) >> 0] = $1;
   HEAP8[($3 + -4 | 0) >> 0] = $1;
   if ($2 >>> 0 < 9 >>> 0) {
    break label$1
   }
   $4 = (0 - $0 | 0) & 3 | 0;
   $3 = $0 + $4 | 0;
   $1 = Math_imul($1 & 255 | 0, 16843009);
   HEAP32[$3 >> 2] = $1;
   $4 = ($2 - $4 | 0) & -4 | 0;
   $2 = $3 + $4 | 0;
   HEAP32[($2 + -4 | 0) >> 2] = $1;
   if ($4 >>> 0 < 9 >>> 0) {
    break label$1
   }
   HEAP32[($3 + 8 | 0) >> 2] = $1;
   HEAP32[($3 + 4 | 0) >> 2] = $1;
   HEAP32[($2 + -8 | 0) >> 2] = $1;
   HEAP32[($2 + -12 | 0) >> 2] = $1;
   if ($4 >>> 0 < 25 >>> 0) {
    break label$1
   }
   HEAP32[($3 + 24 | 0) >> 2] = $1;
   HEAP32[($3 + 20 | 0) >> 2] = $1;
   HEAP32[($3 + 16 | 0) >> 2] = $1;
   HEAP32[($3 + 12 | 0) >> 2] = $1;
   HEAP32[($2 + -16 | 0) >> 2] = $1;
   HEAP32[($2 + -20 | 0) >> 2] = $1;
   HEAP32[($2 + -24 | 0) >> 2] = $1;
   HEAP32[($2 + -28 | 0) >> 2] = $1;
   $5 = $3 & 4 | 0 | 24 | 0;
   $2 = $4 - $5 | 0;
   if ($2 >>> 0 < 32 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$1 = __wasm_i64_mul($1 | 0, i64toi32_i32$0 | 0, 1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $6 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$0;
   $1 = $3 + $5 | 0;
   label$2 : while (1) {
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$1 = $1;
    HEAP32[($1 + 24 | 0) >> 2] = $6;
    HEAP32[($1 + 28 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1;
    HEAP32[($1 + 16 | 0) >> 2] = $6;
    HEAP32[($1 + 20 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1;
    HEAP32[($1 + 8 | 0) >> 2] = $6;
    HEAP32[($1 + 12 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1;
    HEAP32[$1 >> 2] = $6;
    HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $1 = $1 + 32 | 0;
    $2 = $2 + -32 | 0;
    if ($2 >>> 0 > 31 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0 | 0;
 }
 
 function __lockfile($0) {
  $0 = $0 | 0;
  return 1 | 0;
 }
 
 function __unlockfile($0) {
  $0 = $0 | 0;
 }
 
 function dummy($0) {
  $0 = $0 | 0;
 }
 
 function fclose($0) {
  $0 = $0 | 0;
  var $1 = 0, $4 = 0, $5 = 0, $2 = 0, $3 = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
     break label$2
    }
    $1 = 1;
    break label$1;
   }
   $1 = !(__lockfile($0 | 0) | 0);
  }
  $2 = fflush($0 | 0) | 0;
  $3 = FUNCTION_TABLE[HEAP32[($0 + 12 | 0) >> 2] | 0 | 0]($0) | 0;
  label$3 : {
   if ($1) {
    break label$3
   }
   __unlockfile($0 | 0);
  }
  label$4 : {
   if ((HEAPU8[$0 >> 0] | 0) & 1 | 0) {
    break label$4
   }
   dummy($0 | 0);
   $1 = __ofl_lock() | 0;
   label$5 : {
    $4 = HEAP32[($0 + 52 | 0) >> 2] | 0;
    if (!$4) {
     break label$5
    }
    HEAP32[($4 + 56 | 0) >> 2] = HEAP32[($0 + 56 | 0) >> 2] | 0;
   }
   label$6 : {
    $5 = HEAP32[($0 + 56 | 0) >> 2] | 0;
    if (!$5) {
     break label$6
    }
    HEAP32[($5 + 52 | 0) >> 2] = $4;
   }
   label$7 : {
    if ((HEAP32[$1 >> 2] | 0 | 0) != ($0 | 0)) {
     break label$7
    }
    HEAP32[$1 >> 2] = $5;
   }
   __ofl_unlock();
   free(HEAP32[($0 + 96 | 0) >> 2] | 0 | 0);
   free($0 | 0);
  }
  return $3 | $2 | 0 | 0;
 }
 
 function fflush($0) {
  $0 = $0 | 0;
  var $1 = 0, i64toi32_i32$1 = 0, $2 = 0, i64toi32_i32$0 = 0, $3 = 0;
  label$1 : {
   if ($0) {
    break label$1
   }
   $1 = 0;
   label$2 : {
    if (!(HEAP32[(0 + 92440 | 0) >> 2] | 0)) {
     break label$2
    }
    $1 = fflush(HEAP32[(0 + 92440 | 0) >> 2] | 0 | 0) | 0;
   }
   label$3 : {
    if (!(HEAP32[(0 + 92592 | 0) >> 2] | 0)) {
     break label$3
    }
    $1 = fflush(HEAP32[(0 + 92592 | 0) >> 2] | 0 | 0) | 0 | $1 | 0;
   }
   label$4 : {
    $0 = HEAP32[(__ofl_lock() | 0) >> 2] | 0;
    if (!$0) {
     break label$4
    }
    label$5 : while (1) {
     $2 = 0;
     label$6 : {
      if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$6
      }
      $2 = __lockfile($0 | 0) | 0;
     }
     label$7 : {
      if ((HEAP32[($0 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0 + 28 | 0) >> 2] | 0 | 0)) {
       break label$7
      }
      $1 = fflush($0 | 0) | 0 | $1 | 0;
     }
     label$8 : {
      if (!$2) {
       break label$8
      }
      __unlockfile($0 | 0);
     }
     $0 = HEAP32[($0 + 56 | 0) >> 2] | 0;
     if ($0) {
      continue label$5
     }
     break label$5;
    };
   }
   __ofl_unlock();
   return $1 | 0;
  }
  $2 = 0;
  label$9 : {
   if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$9
   }
   $2 = __lockfile($0 | 0) | 0;
  }
  label$10 : {
   label$11 : {
    label$12 : {
     if ((HEAP32[($0 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0 + 28 | 0) >> 2] | 0 | 0)) {
      break label$12
     }
     FUNCTION_TABLE[HEAP32[($0 + 36 | 0) >> 2] | 0 | 0]($0, 0, 0) | 0;
     if (HEAP32[($0 + 20 | 0) >> 2] | 0) {
      break label$12
     }
     $1 = -1;
     if ($2) {
      break label$11
     }
     break label$10;
    }
    label$13 : {
     $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     if (($1 | 0) == ($3 | 0)) {
      break label$13
     }
     i64toi32_i32$1 = $1 - $3 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     i64toi32_i32$0 = FUNCTION_TABLE[HEAP32[($0 + 40 | 0) >> 2] | 0 | 0]($0, i64toi32_i32$1, i64toi32_i32$0, 1) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    }
    $1 = 0;
    HEAP32[($0 + 28 | 0) >> 2] = 0;
    i64toi32_i32$0 = $0;
    i64toi32_i32$1 = 0;
    HEAP32[($0 + 16 | 0) >> 2] = 0;
    HEAP32[($0 + 20 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$0 = $0;
    i64toi32_i32$1 = 0;
    HEAP32[($0 + 4 | 0) >> 2] = 0;
    HEAP32[($0 + 8 | 0) >> 2] = i64toi32_i32$1;
    if (!$2) {
     break label$10
    }
   }
   __unlockfile($0 | 0);
  }
  return $1 | 0;
 }
 
 function floor($0) {
  $0 = +$0;
  return +Math_floor($0);
 }
 
 function __errno_location() {
  return 92752 | 0;
 }
 
 function __fmodeflags($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = 2;
  label$1 : {
   if (strchr($0 | 0, 43 | 0) | 0) {
    break label$1
   }
   $1 = (HEAPU8[$0 >> 0] | 0 | 0) != (114 | 0);
  }
  $1 = strchr($0 | 0, 120 | 0) | 0 ? $1 | 128 | 0 : $1;
  $1 = strchr($0 | 0, 101 | 0) | 0 ? $1 | 524288 | 0 : $1;
  $0 = HEAPU8[$0 >> 0] | 0;
  $1 = ($0 | 0) == (114 | 0) ? $1 : $1 | 64 | 0;
  $1 = ($0 | 0) == (119 | 0) ? $1 | 512 | 0 : $1;
  return (($0 | 0) == (97 | 0) ? $1 | 1024 | 0 : $1) | 0;
 }
 
 function __stdio_seek($0, $1, $1$hi, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = __lseek(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0, $1 | 0, i64toi32_i32$0 | 0, $2 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function __stdio_write($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $5 = 0, $8 = 0, $6 = 0, $7 = 0, $9 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  $4 = HEAP32[($0 + 28 | 0) >> 2] | 0;
  HEAP32[($3 + 16 | 0) >> 2] = $4;
  $5 = HEAP32[($0 + 20 | 0) >> 2] | 0;
  HEAP32[($3 + 28 | 0) >> 2] = $2;
  HEAP32[($3 + 24 | 0) >> 2] = $1;
  $1 = $5 - $4 | 0;
  HEAP32[($3 + 20 | 0) >> 2] = $1;
  $6 = $1 + $2 | 0;
  $4 = $3 + 16 | 0;
  $7 = 2;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (!(__wasi_syscall_ret(__wasi_fd_write(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0, $3 + 16 | 0 | 0, 2 | 0, $3 + 12 | 0 | 0) | 0 | 0) | 0)) {
        break label$5
       }
       $5 = $4;
       break label$4;
      }
      label$6 : while (1) {
       $1 = HEAP32[($3 + 12 | 0) >> 2] | 0;
       if (($6 | 0) == ($1 | 0)) {
        break label$3
       }
       label$7 : {
        if (($1 | 0) > (-1 | 0)) {
         break label$7
        }
        $5 = $4;
        break label$2;
       }
       $8 = HEAP32[($4 + 4 | 0) >> 2] | 0;
       $9 = $1 >>> 0 > $8 >>> 0;
       $5 = $4 + ($9 << 3 | 0) | 0;
       $8 = $1 - ($9 ? $8 : 0) | 0;
       HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $8 | 0;
       $4 = $4 + ($9 ? 12 : 4) | 0;
       HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) - $8 | 0;
       $6 = $6 - $1 | 0;
       $4 = $5;
       $7 = $7 - $9 | 0;
       if (!(__wasi_syscall_ret(__wasi_fd_write(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0, $4 | 0, $7 | 0, $3 + 12 | 0 | 0) | 0 | 0) | 0)) {
        continue label$6
       }
       break label$6;
      };
     }
     if (($6 | 0) != (-1 | 0)) {
      break label$2
     }
    }
    $1 = HEAP32[($0 + 44 | 0) >> 2] | 0;
    HEAP32[($0 + 28 | 0) >> 2] = $1;
    HEAP32[($0 + 20 | 0) >> 2] = $1;
    HEAP32[($0 + 16 | 0) >> 2] = $1 + (HEAP32[($0 + 48 | 0) >> 2] | 0) | 0;
    $1 = $2;
    break label$1;
   }
   $1 = 0;
   HEAP32[($0 + 28 | 0) >> 2] = 0;
   HEAP32[($0 + 16 | 0) >> 2] = 0;
   HEAP32[($0 + 20 | 0) >> 2] = 0;
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 0 | 32 | 0;
   if (($7 | 0) == (2 | 0)) {
    break label$1
   }
   $1 = $2 - (HEAP32[($5 + 4 | 0) >> 2] | 0) | 0;
  }
  __stack_pointer = $3 + 32 | 0;
  return $1 | 0;
 }
 
 function __stdio_read($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $3 = 0, $4 = 0, $6 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 16 | 0) >> 2] = $1;
  $4 = 0;
  $5 = HEAP32[($0 + 48 | 0) >> 2] | 0;
  HEAP32[($3 + 20 | 0) >> 2] = $2 - (($5 | 0) != (0 | 0)) | 0;
  $6 = HEAP32[($0 + 44 | 0) >> 2] | 0;
  HEAP32[($3 + 28 | 0) >> 2] = $5;
  HEAP32[($3 + 24 | 0) >> 2] = $6;
  $5 = 32;
  label$1 : {
   label$2 : {
    label$3 : {
     if (__wasi_syscall_ret(__wasi_fd_read(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0, $3 + 16 | 0 | 0, 2 | 0, $3 + 12 | 0 | 0) | 0 | 0) | 0) {
      break label$3
     }
     $5 = HEAP32[($3 + 12 | 0) >> 2] | 0;
     if (($5 | 0) > (0 | 0)) {
      break label$2
     }
     $5 = $5 ? 32 : 16;
    }
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 0 | $5 | 0;
    break label$1;
   }
   $4 = $5;
   $6 = HEAP32[($3 + 20 | 0) >> 2] | 0;
   if ($5 >>> 0 <= $6 >>> 0) {
    break label$1
   }
   $4 = HEAP32[($0 + 44 | 0) >> 2] | 0;
   HEAP32[($0 + 4 | 0) >> 2] = $4;
   HEAP32[($0 + 8 | 0) >> 2] = $4 + ($5 - $6 | 0) | 0;
   label$4 : {
    if (!(HEAP32[($0 + 48 | 0) >> 2] | 0)) {
     break label$4
    }
    HEAP32[($0 + 4 | 0) >> 2] = $4 + 1 | 0;
    HEAP8[(($2 + $1 | 0) + -1 | 0) >> 0] = HEAPU8[$4 >> 0] | 0;
   }
   $4 = $2;
  }
  __stack_pointer = $3 + 32 | 0;
  return $4 | 0;
 }
 
 function dummy_1($0) {
  $0 = $0 | 0;
  return $0 | 0;
 }
 
 function __stdio_close($0) {
  $0 = $0 | 0;
  return __wasi_fd_close(dummy_1(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0;
 }
 
 function __fdopen($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $34 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (strchr(67339 | 0, HEAP8[$1 >> 0] | 0 | 0) | 0) {
       break label$4
      }
      (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 28), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      break label$3;
     }
     $3 = malloc(1176 | 0) | 0;
     if ($3) {
      break label$2
     }
    }
    $3 = 0;
    break label$1;
   }
   memset($3 | 0, 0 | 0, 144 | 0) | 0;
   label$5 : {
    if (strchr($1 | 0, 43 | 0) | 0) {
     break label$5
    }
    HEAP32[$3 >> 2] = (HEAPU8[$1 >> 0] | 0 | 0) == (114 | 0) ? 8 : 4;
   }
   label$6 : {
    label$7 : {
     if ((HEAPU8[$1 >> 0] | 0 | 0) == (97 | 0)) {
      break label$7
     }
     $1 = HEAP32[$3 >> 2] | 0;
     break label$6;
    }
    label$8 : {
     $1 = __syscall_fcntl64($0 | 0, 3 | 0, 0 | 0) | 0;
     if ($1 & 1024 | 0) {
      break label$8
     }
     i64toi32_i32$1 = $1 | 1024 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $34 = i64toi32_i32$1;
     i64toi32_i32$1 = $2;
     HEAP32[($2 + 16 | 0) >> 2] = $34;
     HEAP32[($2 + 20 | 0) >> 2] = i64toi32_i32$0;
     __syscall_fcntl64($0 | 0, 4 | 0, $2 + 16 | 0 | 0) | 0;
    }
    $1 = HEAP32[$3 >> 2] | 0 | 128 | 0;
    HEAP32[$3 >> 2] = $1;
   }
   HEAP32[($3 + 80 | 0) >> 2] = -1;
   HEAP32[($3 + 48 | 0) >> 2] = 1024;
   HEAP32[($3 + 60 | 0) >> 2] = $0;
   HEAP32[($3 + 44 | 0) >> 2] = $3 + 152 | 0;
   label$9 : {
    if ($1 & 8 | 0) {
     break label$9
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = $2;
    HEAP32[$2 >> 2] = $2 + 24 | 0;
    HEAP32[($2 + 4 | 0) >> 2] = i64toi32_i32$0;
    if (__syscall_ioctl($0 | 0, 21523 | 0, $2 | 0) | 0) {
     break label$9
    }
    HEAP32[($3 + 80 | 0) >> 2] = 10;
   }
   HEAP32[($3 + 40 | 0) >> 2] = 30;
   HEAP32[($3 + 36 | 0) >> 2] = 31;
   HEAP32[($3 + 32 | 0) >> 2] = 32;
   HEAP32[($3 + 12 | 0) >> 2] = 33;
   label$10 : {
    if (HEAPU8[(0 + 92757 | 0) >> 0] | 0) {
     break label$10
    }
    HEAP32[($3 + 76 | 0) >> 2] = -1;
   }
   $3 = __ofl_add($3 | 0) | 0;
  }
  __stack_pointer = $2 + 32 | 0;
  return $3 | 0;
 }
 
 function fopen($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $4 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    label$3 : {
     if (strchr(67339 | 0, HEAP8[$1 >> 0] | 0 | 0) | 0) {
      break label$3
     }
     (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 28), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     break label$2;
    }
    $3 = __fmodeflags($1 | 0) | 0;
    HEAP32[$2 >> 2] = 438;
    HEAP32[($2 + 4 | 0) >> 2] = 0;
    $4 = 0;
    $0 = __syscall_ret(__syscall_openat(-100 | 0, $0 | 0, $3 | 32768 | 0 | 0, $2 | 0) | 0 | 0) | 0;
    if (($0 | 0) < (0 | 0)) {
     break label$1
    }
    $4 = __fdopen($0 | 0, $1 | 0) | 0;
    if ($4) {
     break label$1
    }
    __wasi_fd_close($0 | 0) | 0;
   }
   $4 = 0;
  }
  __stack_pointer = $2 + 16 | 0;
  return $4 | 0;
 }
 
 function __toread($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = HEAP32[($0 + 72 | 0) >> 2] | 0;
  HEAP32[($0 + 72 | 0) >> 2] = $1 + -1 | 0 | $1 | 0;
  label$1 : {
   if ((HEAP32[($0 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0 + 28 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0 + 36 | 0) >> 2] | 0 | 0]($0, 0, 0) | 0;
  }
  HEAP32[($0 + 28 | 0) >> 2] = 0;
  HEAP32[($0 + 16 | 0) >> 2] = 0;
  HEAP32[($0 + 20 | 0) >> 2] = 0;
  label$2 : {
   $1 = HEAP32[$0 >> 2] | 0;
   if (!($1 & 4 | 0)) {
    break label$2
   }
   HEAP32[$0 >> 2] = $1 | 32 | 0;
   return -1 | 0;
  }
  $2 = (HEAP32[($0 + 44 | 0) >> 2] | 0) + (HEAP32[($0 + 48 | 0) >> 2] | 0) | 0;
  HEAP32[($0 + 8 | 0) >> 2] = $2;
  HEAP32[($0 + 4 | 0) >> 2] = $2;
  return ($1 << 27 | 0) >> 31 | 0 | 0;
 }
 
 function fread($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, $7 = 0, $5 = 0, $4 = 0;
  $4 = 0;
  label$1 : {
   if ((HEAP32[($3 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $4 = __lockfile($3 | 0) | 0;
  }
  $5 = Math_imul($2, $1);
  $6 = HEAP32[($3 + 72 | 0) >> 2] | 0;
  HEAP32[($3 + 72 | 0) >> 2] = $6 + -1 | 0 | $6 | 0;
  label$2 : {
   label$3 : {
    $6 = HEAP32[($3 + 4 | 0) >> 2] | 0;
    $7 = HEAP32[($3 + 8 | 0) >> 2] | 0;
    if (($6 | 0) != ($7 | 0)) {
     break label$3
    }
    $6 = $5;
    break label$2;
   }
   $7 = $7 - $6 | 0;
   $7 = $7 >>> 0 < $5 >>> 0 ? $7 : $5;
   __memcpy($0 | 0, $6 | 0, $7 | 0) | 0;
   HEAP32[($3 + 4 | 0) >> 2] = (HEAP32[($3 + 4 | 0) >> 2] | 0) + $7 | 0;
   $6 = $5 - $7 | 0;
   $0 = $0 + $7 | 0;
  }
  label$4 : {
   if (!$6) {
    break label$4
   }
   label$5 : while (1) {
    label$6 : {
     label$7 : {
      if (__toread($3 | 0) | 0) {
       break label$7
      }
      $7 = FUNCTION_TABLE[HEAP32[($3 + 32 | 0) >> 2] | 0 | 0]($3, $0, $6) | 0;
      if ($7) {
       break label$6
      }
     }
     label$8 : {
      if (!$4) {
       break label$8
      }
      __unlockfile($3 | 0);
     }
     return (($5 - $6 | 0) >>> 0) / ($1 >>> 0) | 0 | 0;
    }
    $0 = $0 + $7 | 0;
    $6 = $6 - $7 | 0;
    if ($6) {
     continue label$5
    }
    break label$5;
   };
  }
  $0 = $1 ? $2 : 0;
  label$9 : {
   if (!$4) {
    break label$9
   }
   __unlockfile($3 | 0);
  }
  return $0 | 0;
 }
 
 function __fseeko_unlocked($0, $1, $1$hi, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $3 = 0, $12 = 0, $13 = 0, $14 = 0, $18 = 0, $18$hi = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   label$2 : {
    if ($2 >>> 0 < 3 >>> 0) {
     break label$2
    }
    (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 28), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    break label$1;
   }
   label$3 : {
    if (($2 | 0) != (1 | 0)) {
     break label$3
    }
    $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    if (!$3) {
     break label$3
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $3 - (HEAP32[($0 + 4 | 0) >> 2] | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $18 = i64toi32_i32$1;
    $18$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1;
    i64toi32_i32$1 = $18$hi;
    i64toi32_i32$3 = $18;
    i64toi32_i32$5 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
    $1 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
    $1$hi = i64toi32_i32$5;
   }
   label$4 : {
    if ((HEAP32[($0 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0 + 28 | 0) >> 2] | 0 | 0)) {
     break label$4
    }
    FUNCTION_TABLE[HEAP32[($0 + 36 | 0) >> 2] | 0 | 0]($0, 0, 0) | 0;
    if (!(HEAP32[($0 + 20 | 0) >> 2] | 0)) {
     break label$1
    }
   }
   HEAP32[($0 + 28 | 0) >> 2] = 0;
   i64toi32_i32$2 = $0;
   i64toi32_i32$5 = 0;
   HEAP32[($0 + 16 | 0) >> 2] = 0;
   HEAP32[($0 + 20 | 0) >> 2] = i64toi32_i32$5;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$5 = FUNCTION_TABLE[HEAP32[($0 + 40 | 0) >> 2] | 0 | 0]($0, $1, i64toi32_i32$5, $2) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$2 | 0) < (i64toi32_i32$5 | 0)) {
    $12 = 1
   } else {
    if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$5 | 0)) {
     if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $13 = 0
     } else {
      $13 = 1
     }
     $14 = $13;
    } else {
     $14 = 0
    }
    $12 = $14;
   }
   if ($12) {
    break label$1
   }
   i64toi32_i32$2 = $0;
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 4 | 0) >> 2] = 0;
   HEAP32[($0 + 8 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) & -17 | 0;
   return 0 | 0;
  }
  return -1 | 0;
 }
 
 function __fseeko($0, $1, $1$hi, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, $3 = 0;
  label$1 : {
   if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   return __fseeko_unlocked($0 | 0, $1 | 0, i64toi32_i32$0 | 0, $2 | 0) | 0 | 0;
  }
  $3 = __lockfile($0 | 0) | 0;
  i64toi32_i32$0 = $1$hi;
  $2 = __fseeko_unlocked($0 | 0, $1 | 0, i64toi32_i32$0 | 0, $2 | 0) | 0;
  label$2 : {
   if (!$3) {
    break label$2
   }
   __unlockfile($0 | 0);
  }
  return $2 | 0;
 }
 
 function fseek($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $1;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  return __fseeko($0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, $2 | 0) | 0 | 0;
 }
 
 function __ftello_unlocked($0) {
  $0 = $0 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $3$hi = 0, $3 = 0, $13 = 0, $14 = 0, $15 = 0, i64toi32_i32$4 = 0, $1 = 0, $39 = 0, $39$hi = 0;
  $1 = HEAP32[($0 + 40 | 0) >> 2] | 0;
  $2 = 1;
  label$1 : {
   if (!((HEAPU8[$0 >> 0] | 0) & 128 | 0)) {
    break label$1
   }
   $2 = (HEAP32[($0 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0 + 28 | 0) >> 2] | 0 | 0) ? 1 : 2;
  }
  label$2 : {
   i64toi32_i32$0 = 0;
   i64toi32_i32$0 = FUNCTION_TABLE[$1 | 0]($0, 0, i64toi32_i32$0, $2) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $3 = i64toi32_i32$0;
   $3$hi = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
    $13 = 1
   } else {
    if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $14 = 0
     } else {
      $14 = 1
     }
     $15 = $14;
    } else {
     $15 = 0
    }
    $13 = $15;
   }
   if ($13) {
    break label$2
   }
   label$3 : {
    label$4 : {
     $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     if (!$2) {
      break label$4
     }
     $0 = $0 + 4 | 0;
     break label$3;
    }
    $2 = HEAP32[($0 + 28 | 0) >> 2] | 0;
    if (!$2) {
     break label$2
    }
    $0 = $0 + 20 | 0;
   }
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = (HEAP32[$0 >> 2] | 0) - $2 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
   $39 = i64toi32_i32$1;
   $39$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3;
   i64toi32_i32$1 = $39$hi;
   i64toi32_i32$0 = $39;
   i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $3 = i64toi32_i32$4;
   $3$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$3 = $3;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
  return i64toi32_i32$3 | 0;
 }
 
 function __ftello($0) {
  $0 = $0 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $1 = 0, $2 = 0, $2$hi = 0;
  label$1 : {
   if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = __ftello_unlocked($0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
   return i64toi32_i32$0 | 0;
  }
  $1 = __lockfile($0 | 0) | 0;
  i64toi32_i32$0 = __ftello_unlocked($0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $2 = i64toi32_i32$0;
  $2$hi = i64toi32_i32$1;
  label$2 : {
   if (!$1) {
    break label$2
   }
   __unlockfile($0 | 0);
  }
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function ftell($0) {
  $0 = $0 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $7 = 0, $8 = 0, $9 = 0, $1 = 0, $1$hi = 0, i64toi32_i32$3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   i64toi32_i32$0 = __ftello($0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $1 = i64toi32_i32$0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = -2147483648;
   if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
    $7 = 1
   } else {
    if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $8 = 0
     } else {
      $8 = 1
     }
     $9 = $8;
    } else {
     $9 = 0
    }
    $7 = $9;
   }
   if ($7) {
    break label$1
   }
   (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 61), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   return -1 | 0;
  }
  i64toi32_i32$2 = $1$hi;
  return $1 | 0;
 }
 
 function __towrite($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = HEAP32[($0 + 72 | 0) >> 2] | 0;
  HEAP32[($0 + 72 | 0) >> 2] = $1 + -1 | 0 | $1 | 0;
  label$1 : {
   $1 = HEAP32[$0 >> 2] | 0;
   if (!($1 & 8 | 0)) {
    break label$1
   }
   HEAP32[$0 >> 2] = $1 | 32 | 0;
   return -1 | 0;
  }
  HEAP32[($0 + 4 | 0) >> 2] = 0;
  HEAP32[($0 + 8 | 0) >> 2] = 0;
  $1 = HEAP32[($0 + 44 | 0) >> 2] | 0;
  HEAP32[($0 + 28 | 0) >> 2] = $1;
  HEAP32[($0 + 20 | 0) >> 2] = $1;
  HEAP32[($0 + 16 | 0) >> 2] = $1 + (HEAP32[($0 + 48 | 0) >> 2] | 0) | 0;
  return 0 | 0;
 }
 
 function __fwritex($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0;
  label$1 : {
   label$2 : {
    $3 = HEAP32[($2 + 16 | 0) >> 2] | 0;
    if ($3) {
     break label$2
    }
    $4 = 0;
    if (__towrite($2 | 0) | 0) {
     break label$1
    }
    $3 = HEAP32[($2 + 16 | 0) >> 2] | 0;
   }
   label$3 : {
    $5 = HEAP32[($2 + 20 | 0) >> 2] | 0;
    if (($3 - $5 | 0) >>> 0 >= $1 >>> 0) {
     break label$3
    }
    return FUNCTION_TABLE[HEAP32[($2 + 36 | 0) >> 2] | 0 | 0]($2, $0, $1) | 0 | 0;
   }
   label$4 : {
    label$5 : {
     if ((HEAP32[($2 + 80 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
      break label$5
     }
     $3 = 0;
     break label$4;
    }
    $4 = $1;
    label$6 : while (1) {
     label$7 : {
      $3 = $4;
      if ($3) {
       break label$7
      }
      $3 = 0;
      break label$4;
     }
     $4 = $3 + -1 | 0;
     if ((HEAPU8[($0 + $4 | 0) >> 0] | 0 | 0) != (10 | 0)) {
      continue label$6
     }
     break label$6;
    };
    $4 = FUNCTION_TABLE[HEAP32[($2 + 36 | 0) >> 2] | 0 | 0]($2, $0, $3) | 0;
    if ($4 >>> 0 < $3 >>> 0) {
     break label$1
    }
    $0 = $0 + $3 | 0;
    $1 = $1 - $3 | 0;
    $5 = HEAP32[($2 + 20 | 0) >> 2] | 0;
   }
   __memcpy($5 | 0, $0 | 0, $1 | 0) | 0;
   HEAP32[($2 + 20 | 0) >> 2] = (HEAP32[($2 + 20 | 0) >> 2] | 0) + $1 | 0;
   $4 = $3 + $1 | 0;
  }
  return $4 | 0;
 }
 
 function fwrite($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $4 = Math_imul($2, $1);
  label$1 : {
   label$2 : {
    if ((HEAP32[($3 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$2
    }
    $0 = __fwritex($0 | 0, $4 | 0, $3 | 0) | 0;
    break label$1;
   }
   $5 = __lockfile($3 | 0) | 0;
   $0 = __fwritex($0 | 0, $4 | 0, $3 | 0) | 0;
   if (!$5) {
    break label$1
   }
   __unlockfile($3 | 0);
  }
  label$3 : {
   if (($0 | 0) != ($4 | 0)) {
    break label$3
   }
   return ($1 ? $2 : 0) | 0;
  }
  return ($0 >>> 0) / ($1 >>> 0) | 0 | 0;
 }
 
 function __lseek($0, $1, $1$hi, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  i64toi32_i32$0 = $1$hi;
  $2 = __wasi_syscall_ret(legalfunc$__wasi_fd_seek($0 | 0, $1 | 0, i64toi32_i32$0 | 0, $2 & 255 | 0 | 0, $3 + 8 | 0 | 0) | 0 | 0) | 0;
  i64toi32_i32$2 = $3;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $1 = i64toi32_i32$0;
  $1$hi = i64toi32_i32$1;
  __stack_pointer = i64toi32_i32$2 + 16 | 0;
  i64toi32_i32$1 = -1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$3 = $2 ? -1 : $1;
  i64toi32_i32$2 = $2 ? i64toi32_i32$1 : i64toi32_i32$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$3 | 0;
 }
 
 function memchr($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = ($2 | 0) != (0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($0 & 3 | 0)) {
      break label$3
     }
     if (!$2) {
      break label$3
     }
     $4 = $1 & 255 | 0;
     label$4 : while (1) {
      if ((HEAPU8[$0 >> 0] | 0 | 0) == ($4 | 0)) {
       break label$2
      }
      $2 = $2 + -1 | 0;
      $3 = ($2 | 0) != (0 | 0);
      $0 = $0 + 1 | 0;
      if (!($0 & 3 | 0)) {
       break label$3
      }
      if ($2) {
       continue label$4
      }
      break label$4;
     };
    }
    if (!$3) {
     break label$1
    }
    label$5 : {
     if ((HEAPU8[$0 >> 0] | 0 | 0) == ($1 & 255 | 0 | 0)) {
      break label$5
     }
     if ($2 >>> 0 < 4 >>> 0) {
      break label$5
     }
     $4 = Math_imul($1 & 255 | 0, 16843009);
     label$6 : while (1) {
      $3 = (HEAP32[$0 >> 2] | 0) ^ $4 | 0;
      if ((($3 ^ -1 | 0) & ($3 + -16843009 | 0) | 0) & -2139062144 | 0) {
       break label$2
      }
      $0 = $0 + 4 | 0;
      $2 = $2 + -4 | 0;
      if ($2 >>> 0 > 3 >>> 0) {
       continue label$6
      }
      break label$6;
     };
    }
    if (!$2) {
     break label$1
    }
   }
   $3 = $1 & 255 | 0;
   label$7 : while (1) {
    label$8 : {
     if ((HEAPU8[$0 >> 0] | 0 | 0) != ($3 | 0)) {
      break label$8
     }
     return $0 | 0;
    }
    $0 = $0 + 1 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue label$7
    }
    break label$7;
   };
  }
  return 0 | 0;
 }
 
 function memcmp($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($2 >>> 0 < 4 >>> 0) {
      break label$3
     }
     if (($1 | $0 | 0) & 3 | 0) {
      break label$2
     }
     label$4 : while (1) {
      if ((HEAP32[$0 >> 2] | 0 | 0) != (HEAP32[$1 >> 2] | 0 | 0)) {
       break label$2
      }
      $1 = $1 + 4 | 0;
      $0 = $0 + 4 | 0;
      $2 = $2 + -4 | 0;
      if ($2 >>> 0 > 3 >>> 0) {
       continue label$4
      }
      break label$4;
     };
    }
    if (!$2) {
     break label$1
    }
   }
   label$5 : {
    label$6 : while (1) {
     $3 = HEAPU8[$0 >> 0] | 0;
     $4 = HEAPU8[$1 >> 0] | 0;
     if (($3 | 0) != ($4 | 0)) {
      break label$5
     }
     $1 = $1 + 1 | 0;
     $0 = $0 + 1 | 0;
     $2 = $2 + -1 | 0;
     if (!$2) {
      break label$1
     }
     continue label$6;
    };
   }
   return $3 - $4 | 0 | 0;
  }
  return 0 | 0;
 }
 
 function __lock($0) {
  $0 = $0 | 0;
 }
 
 function __unlock($0) {
  $0 = $0 | 0;
 }
 
 function __ofl_lock() {
  __lock(92812 | 0);
  return 92816 | 0;
 }
 
 function __ofl_unlock() {
  __unlock(92812 | 0);
 }
 
 function __ofl_add($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __ofl_lock() | 0;
  HEAP32[($0 + 56 | 0) >> 2] = HEAP32[$1 >> 2] | 0;
  label$1 : {
   $2 = HEAP32[$1 >> 2] | 0;
   if (!$2) {
    break label$1
   }
   HEAP32[($2 + 52 | 0) >> 2] = $0;
  }
  HEAP32[$1 >> 2] = $0;
  __ofl_unlock();
  return $0 | 0;
 }
 
 function iprintf($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[($2 + 12 | 0) >> 2] = $1;
  $1 = vfiprintf(92296 | 0, $0 | 0, $1 | 0) | 0;
  __stack_pointer = $2 + 16 | 0;
  return $1 | 0;
 }
 
 function __qsort_r($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $9 = 0, $8 = 0, $6 = 0, $7 = 0, $34 = 0;
  $5 = __stack_pointer - 208 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 8 | 0) >> 2] = 1;
  HEAP32[($5 + 12 | 0) >> 2] = 0;
  label$1 : {
   $6 = Math_imul($2, $1);
   if (!$6) {
    break label$1
   }
   HEAP32[($5 + 16 | 0) >> 2] = $2;
   HEAP32[($5 + 20 | 0) >> 2] = $2;
   $7 = 0 - $2 | 0;
   $1 = $2;
   $8 = $1;
   $9 = 2;
   label$2 : while (1) {
    $34 = $8 + $2 | 0;
    $8 = $1;
    $1 = $34 + $1 | 0;
    HEAP32[(($5 + 16 | 0) + ($9 << 2 | 0) | 0) >> 2] = $1;
    $9 = $9 + 1 | 0;
    if ($1 >>> 0 < $6 >>> 0) {
     continue label$2
    }
    break label$2;
   };
   label$3 : {
    label$4 : {
     $8 = ($0 + $6 | 0) + $7 | 0;
     if ($8 >>> 0 > $0 >>> 0) {
      break label$4
     }
     $8 = 0;
     $9 = 0;
     $1 = 1;
     break label$3;
    }
    $9 = 1;
    $1 = 1;
    label$5 : while (1) {
     label$6 : {
      label$7 : {
       if (($9 & 3 | 0 | 0) != (3 | 0)) {
        break label$7
       }
       sift($0 | 0, $2 | 0, $3 | 0, $4 | 0, $1 | 0, $5 + 16 | 0 | 0);
       shr($5 + 8 | 0 | 0, 2 | 0);
       $1 = $1 + 2 | 0;
       break label$6;
      }
      label$8 : {
       label$9 : {
        $9 = $1 + -1 | 0;
        if ((HEAP32[(($5 + 16 | 0) + ($9 << 2 | 0) | 0) >> 2] | 0) >>> 0 < ($8 - $0 | 0) >>> 0) {
         break label$9
        }
        trinkle($0 | 0, $2 | 0, $3 | 0, $4 | 0, $5 + 8 | 0 | 0, $1 | 0, 0 | 0, $5 + 16 | 0 | 0);
        break label$8;
       }
       sift($0 | 0, $2 | 0, $3 | 0, $4 | 0, $1 | 0, $5 + 16 | 0 | 0);
      }
      label$10 : {
       if (($1 | 0) != (1 | 0)) {
        break label$10
       }
       shl($5 + 8 | 0 | 0, 1 | 0);
       $1 = 0;
       break label$6;
      }
      shl($5 + 8 | 0 | 0, $9 | 0);
      $1 = 1;
     }
     $6 = HEAP32[($5 + 8 | 0) >> 2] | 0;
     $9 = $6 | 1 | 0;
     HEAP32[($5 + 8 | 0) >> 2] = $9;
     $0 = $0 + $2 | 0;
     if ($0 >>> 0 < $8 >>> 0) {
      continue label$5
     }
     break label$5;
    };
    $8 = (HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) != (0 | 0);
    $9 = $6 >>> 0 > 1 >>> 0;
   }
   trinkle($0 | 0, $2 | 0, $3 | 0, $4 | 0, $5 + 8 | 0 | 0, $1 | 0, 0 | 0, $5 + 16 | 0 | 0);
   label$11 : {
    if (($1 | 0) != (1 | 0)) {
     break label$11
    }
    if ($9) {
     break label$11
    }
    if (!$8) {
     break label$1
    }
   }
   label$12 : while (1) {
    label$13 : {
     label$14 : {
      if (($1 | 0) > (1 | 0)) {
       break label$14
      }
      $9 = pntz($5 + 8 | 0 | 0) | 0;
      shr($5 + 8 | 0 | 0, $9 | 0);
      $1 = $9 + $1 | 0;
      $9 = HEAP32[($5 + 8 | 0) >> 2] | 0;
      break label$13;
     }
     shl($5 + 8 | 0 | 0, 2 | 0);
     HEAP32[($5 + 8 | 0) >> 2] = (HEAP32[($5 + 8 | 0) >> 2] | 0) ^ 7 | 0;
     shr($5 + 8 | 0 | 0, 1 | 0);
     $6 = $0 + $7 | 0;
     $8 = $1 + -2 | 0;
     trinkle($6 - (HEAP32[(($5 + 16 | 0) + ($8 << 2 | 0) | 0) >> 2] | 0) | 0 | 0, $2 | 0, $3 | 0, $4 | 0, $5 + 8 | 0 | 0, $1 + -1 | 0 | 0, 1 | 0, $5 + 16 | 0 | 0);
     shl($5 + 8 | 0 | 0, 1 | 0);
     $9 = HEAP32[($5 + 8 | 0) >> 2] | 0 | 1 | 0;
     HEAP32[($5 + 8 | 0) >> 2] = $9;
     trinkle($6 | 0, $2 | 0, $3 | 0, $4 | 0, $5 + 8 | 0 | 0, $8 | 0, 1 | 0, $5 + 16 | 0 | 0);
     $1 = $8;
    }
    $0 = $0 + $7 | 0;
    if (($1 | 0) != (1 | 0)) {
     continue label$12
    }
    $8 = HEAP32[($5 + 12 | 0) >> 2] | 0;
    if (($9 | 0) != (1 | 0)) {
     continue label$12
    }
    if ($8) {
     continue label$12
    }
    break label$12;
   };
  }
  __stack_pointer = $5 + 208 | 0;
 }
 
 function sift($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $9 = 0, $6 = 0, $7 = 0, $11 = 0, $10 = 0, $12 = 0, $8 = 0;
  $6 = __stack_pointer - 240 | 0;
  __stack_pointer = $6;
  HEAP32[$6 >> 2] = $0;
  $7 = 1;
  label$1 : {
   if (($4 | 0) < (2 | 0)) {
    break label$1
   }
   $8 = 0 - $1 | 0;
   $7 = 1;
   $9 = $0;
   label$2 : while (1) {
    label$3 : {
     $9 = $9 + $8 | 0;
     $10 = $4 + -2 | 0;
     $11 = $9 - (HEAP32[($5 + ($10 << 2 | 0) | 0) >> 2] | 0) | 0;
     if ((FUNCTION_TABLE[$2 | 0]($0, $11, $3) | 0 | 0) < (0 | 0)) {
      break label$3
     }
     if ((FUNCTION_TABLE[$2 | 0]($0, $9, $3) | 0 | 0) > (-1 | 0)) {
      break label$1
     }
    }
    $12 = (FUNCTION_TABLE[$2 | 0]($11, $9, $3) | 0 | 0) > (-1 | 0);
    $9 = $12 ? $11 : $9;
    HEAP32[($6 + ($7 << 2 | 0) | 0) >> 2] = $9;
    $7 = $7 + 1 | 0;
    $4 = $12 ? $4 + -1 | 0 : $10;
    if (($4 | 0) > (1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  cycle($1 | 0, $6 | 0, $7 | 0);
  __stack_pointer = $6 + 240 | 0;
 }
 
 function shr($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $2 = 0, $3 = 0;
  $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ($1 >>> 0 > 31 >>> 0) {
     break label$2
    }
    $3 = HEAP32[$0 >> 2] | 0;
    $4 = $2;
    break label$1;
   }
   $1 = $1 + -32 | 0;
   $4 = 0;
   $3 = $2;
  }
  HEAP32[($0 + 4 | 0) >> 2] = $4 >>> $1 | 0;
  HEAP32[$0 >> 2] = $4 << (32 - $1 | 0) | 0 | ($3 >>> $1 | 0) | 0;
 }
 
 function trinkle($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $9 = 0, $8 = 0, $10 = 0, $12 = 0, $11 = 0;
  $8 = __stack_pointer - 240 | 0;
  __stack_pointer = $8;
  $9 = HEAP32[$4 >> 2] | 0;
  HEAP32[($8 + 232 | 0) >> 2] = $9;
  $4 = HEAP32[($4 + 4 | 0) >> 2] | 0;
  HEAP32[$8 >> 2] = $0;
  HEAP32[($8 + 236 | 0) >> 2] = $4;
  $10 = 1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (($9 | 0) != (1 | 0)) {
       break label$4
      }
      if ($4) {
       break label$4
      }
      $4 = $0;
      break label$3;
     }
     $11 = 0 - $1 | 0;
     $9 = $0;
     $10 = 1;
     label$5 : while (1) {
      label$6 : {
       $12 = $7 + ($5 << 2 | 0) | 0;
       $4 = $9 - (HEAP32[$12 >> 2] | 0) | 0;
       if ((FUNCTION_TABLE[$2 | 0]($4, $0, $3) | 0 | 0) >= (1 | 0)) {
        break label$6
       }
       $4 = $9;
       break label$3;
      }
      label$7 : {
       label$8 : {
        if ($6) {
         break label$8
        }
        if (($5 | 0) < (2 | 0)) {
         break label$8
        }
        $6 = HEAP32[($12 + -8 | 0) >> 2] | 0;
        $12 = $9 + $11 | 0;
        if ((FUNCTION_TABLE[$2 | 0]($12, $4, $3) | 0 | 0) > (-1 | 0)) {
         break label$7
        }
        if ((FUNCTION_TABLE[$2 | 0]($12 - $6 | 0, $4, $3) | 0 | 0) > (-1 | 0)) {
         break label$7
        }
       }
       HEAP32[($8 + ($10 << 2 | 0) | 0) >> 2] = $4;
       $9 = pntz($8 + 232 | 0 | 0) | 0;
       shr($8 + 232 | 0 | 0, $9 | 0);
       $10 = $10 + 1 | 0;
       $5 = $9 + $5 | 0;
       $6 = 0;
       $9 = $4;
       if ((HEAP32[($8 + 232 | 0) >> 2] | 0 | 0) != (1 | 0)) {
        continue label$5
       }
       $9 = $4;
       if (HEAP32[($8 + 236 | 0) >> 2] | 0) {
        continue label$5
       }
       break label$2;
      }
      break label$5;
     };
     $4 = $9;
     break label$2;
    }
    if ($6) {
     break label$1
    }
   }
   cycle($1 | 0, $8 | 0, $10 | 0);
   sift($4 | 0, $1 | 0, $2 | 0, $3 | 0, $5 | 0, $7 | 0);
  }
  __stack_pointer = $8 + 240 | 0;
 }
 
 function shl($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  label$1 : {
   label$2 : {
    if ($1 >>> 0 > 31 >>> 0) {
     break label$2
    }
    $2 = $0 + 4 | 0;
    $3 = HEAP32[$0 >> 2] | 0;
    break label$1;
   }
   $1 = $1 + -32 | 0;
   $3 = 0;
   $2 = $0;
  }
  $2 = HEAP32[$2 >> 2] | 0;
  HEAP32[$0 >> 2] = $3 << $1 | 0;
  HEAP32[($0 + 4 | 0) >> 2] = $3 >>> (32 - $1 | 0) | 0 | ($2 << $1 | 0) | 0;
 }
 
 function pntz($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   $1 = __builtin_ctz((HEAP32[$0 >> 2] | 0) + -1 | 0 | 0) | 0;
   if ($1) {
    break label$1
   }
   $0 = __builtin_ctz(HEAP32[($0 + 4 | 0) >> 2] | 0 | 0) | 0;
   $1 = $0 ? $0 + 32 | 0 : 0;
  }
  return $1 | 0;
 }
 
 function cycle($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $6 = 0, $5 = 0, $3 = 0, $7 = 0, $4 = 0;
  $3 = __stack_pointer - 256 | 0;
  __stack_pointer = $3;
  label$1 : {
   if (($2 | 0) < (2 | 0)) {
    break label$1
   }
   $4 = $1 + ($2 << 2 | 0) | 0;
   HEAP32[$4 >> 2] = $3;
   if (!$0) {
    break label$1
   }
   label$2 : while (1) {
    $5 = $0 >>> 0 < 256 >>> 0 ? $0 : 256;
    __memcpy(HEAP32[$4 >> 2] | 0 | 0, HEAP32[$1 >> 2] | 0 | 0, $5 | 0) | 0;
    $6 = 0;
    label$3 : while (1) {
     $7 = $1 + ($6 << 2 | 0) | 0;
     $6 = $6 + 1 | 0;
     __memcpy(HEAP32[$7 >> 2] | 0 | 0, HEAP32[($1 + ($6 << 2 | 0) | 0) >> 2] | 0 | 0, $5 | 0) | 0;
     HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + $5 | 0;
     if (($6 | 0) != ($2 | 0)) {
      continue label$3
     }
     break label$3;
    };
    $0 = $0 - $5 | 0;
    if ($0) {
     continue label$2
    }
    break label$2;
   };
  }
  __stack_pointer = $3 + 256 | 0;
 }
 
 function __builtin_ctz($0) {
  $0 = $0 | 0;
  return a_ctz_32($0 | 0) | 0 | 0;
 }
 
 function a_ctz_32($0) {
  $0 = $0 | 0;
  return HEAP8[((Math_imul((0 - $0 | 0) & $0 | 0, 124511785) >>> 27 | 0) + 91216 | 0) >> 0] | 0 | 0;
 }
 
 function qsort($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  __qsort_r($0 | 0, $1 | 0, $2 | 0, 34 | 0, $3 | 0);
 }
 
 function wrapper_cmp($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return FUNCTION_TABLE[$2 | 0]($0, $1) | 0 | 0;
 }
 
 function scalbn($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8 = 0, $32 = 0.0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (($1 | 0) < (1024 | 0)) {
     break label$2
    }
    $0 = $0 * 8988465674311579538646525.0e283;
    label$3 : {
     if ($1 >>> 0 >= 2047 >>> 0) {
      break label$3
     }
     $1 = $1 + -1023 | 0;
     break label$1;
    }
    $0 = $0 * 8988465674311579538646525.0e283;
    $1 = (($1 | 0) < (3069 | 0) ? $1 : 3069) + -2046 | 0;
    break label$1;
   }
   if (($1 | 0) > (-1023 | 0)) {
    break label$1
   }
   $0 = $0 * 2.004168360008973e-292;
   label$4 : {
    if ($1 >>> 0 <= -1992 >>> 0) {
     break label$4
    }
    $1 = $1 + 969 | 0;
    break label$1;
   }
   $0 = $0 * 2.004168360008973e-292;
   $1 = (($1 | 0) > (-2960 | 0) ? $1 : -2960) + 1938 | 0;
  }
  $32 = $0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $1 + 1023 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $8 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $8 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  wasm2js_scratch_store_i32(0 | 0, $8 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
  return +($32 * +wasm2js_scratch_load_f64());
 }
 
 function sinf($0) {
  $0 = Math_fround($0);
  var $1 = 0, $3 = 0, $4 = 0.0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  label$1 : {
   label$2 : {
    $2 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
    $3 = $2 & 2147483647 | 0;
    if ($3 >>> 0 > 1061752794 >>> 0) {
     break label$2
    }
    if ($3 >>> 0 < 964689920 >>> 0) {
     break label$1
    }
    $0 = Math_fround(__sindf(+(+$0)));
    break label$1;
   }
   label$3 : {
    if ($3 >>> 0 > 1081824209 >>> 0) {
     break label$3
    }
    $4 = +$0;
    label$4 : {
     if ($3 >>> 0 > 1075235811 >>> 0) {
      break label$4
     }
     label$5 : {
      if (($2 | 0) > (-1 | 0)) {
       break label$5
      }
      $0 = Math_fround(-Math_fround(__cosdf(+($4 + 1.5707963267948966))));
      break label$1;
     }
     $0 = Math_fround(__cosdf(+($4 + -1.5707963267948966)));
     break label$1;
    }
    $0 = Math_fround(__sindf(+-((($2 | 0) > (-1 | 0) ? -3.141592653589793 : 3.141592653589793) + $4)));
    break label$1;
   }
   label$6 : {
    if ($3 >>> 0 > 1088565717 >>> 0) {
     break label$6
    }
    label$7 : {
     if ($3 >>> 0 > 1085271519 >>> 0) {
      break label$7
     }
     $4 = +$0;
     label$8 : {
      if (($2 | 0) > (-1 | 0)) {
       break label$8
      }
      $0 = Math_fround(__cosdf(+($4 + 4.71238898038469)));
      break label$1;
     }
     $0 = Math_fround(-Math_fround(__cosdf(+($4 + -4.71238898038469))));
     break label$1;
    }
    $0 = Math_fround(__sindf(+((($2 | 0) < (0 | 0) ? 6.283185307179586 : -6.283185307179586) + +$0)));
    break label$1;
   }
   label$9 : {
    if ($3 >>> 0 < 2139095040 >>> 0) {
     break label$9
    }
    $0 = Math_fround($0 - $0);
    break label$1;
   }
   label$10 : {
    switch ((__rem_pio2f(Math_fround($0), $1 + 8 | 0 | 0) | 0) & 3 | 0 | 0) {
    case 0:
     $0 = Math_fround(__sindf(+(+HEAPF64[($1 + 8 | 0) >> 3])));
     break label$1;
    case 1:
     $0 = Math_fround(__cosdf(+(+HEAPF64[($1 + 8 | 0) >> 3])));
     break label$1;
    case 2:
     $0 = Math_fround(__sindf(+-+HEAPF64[($1 + 8 | 0) >> 3]));
     break label$1;
    default:
     break label$10;
    };
   }
   $0 = Math_fround(-Math_fround(__cosdf(+(+HEAPF64[($1 + 8 | 0) >> 3]))));
  }
  __stack_pointer = $1 + 16 | 0;
  return Math_fround($0);
 }
 
 function sqrtf($0) {
  $0 = Math_fround($0);
  return Math_fround(Math_fround(Math_sqrt($0)));
 }
 
 function sscanf($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $2;
  $2 = vsscanf($0 | 0, $1 | 0, $2 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $2 | 0;
 }
 
 function __emscripten_stdout_close($0) {
  $0 = $0 | 0;
  return 0 | 0;
 }
 
 function __emscripten_stdout_seek($0, $1, $1$hi, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  i64toi32_i32$HIGH_BITS = 0;
  return 0 | 0;
 }
 
 function strchr($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = __strchrnul($0 | 0, $1 | 0) | 0;
  return ((HEAPU8[$0 >> 0] | 0 | 0) == ($1 & 255 | 0 | 0) ? $0 : 0) | 0;
 }
 
 function __strchrnul($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0;
  label$1 : {
   label$2 : {
    $2 = $1 & 255 | 0;
    if (!$2) {
     break label$2
    }
    label$3 : {
     if (!($0 & 3 | 0)) {
      break label$3
     }
     label$4 : while (1) {
      $3 = HEAPU8[$0 >> 0] | 0;
      if (!$3) {
       break label$1
      }
      if (($3 | 0) == ($1 & 255 | 0 | 0)) {
       break label$1
      }
      $0 = $0 + 1 | 0;
      if ($0 & 3 | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    label$5 : {
     $3 = HEAP32[$0 >> 2] | 0;
     if ((($3 ^ -1 | 0) & ($3 + -16843009 | 0) | 0) & -2139062144 | 0) {
      break label$5
     }
     $2 = Math_imul($2, 16843009);
     label$6 : while (1) {
      $3 = $3 ^ $2 | 0;
      if ((($3 ^ -1 | 0) & ($3 + -16843009 | 0) | 0) & -2139062144 | 0) {
       break label$5
      }
      $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      $0 = $0 + 4 | 0;
      if (!((($3 ^ -1 | 0) & ($3 + -16843009 | 0) | 0) & -2139062144 | 0)) {
       continue label$6
      }
      break label$6;
     };
    }
    label$7 : {
     label$8 : while (1) {
      $3 = $0;
      $2 = HEAPU8[$3 >> 0] | 0;
      if (!$2) {
       break label$7
      }
      $0 = $3 + 1 | 0;
      if (($2 | 0) != ($1 & 255 | 0 | 0)) {
       continue label$8
      }
      break label$8;
     };
    }
    return $3 | 0;
   }
   return $0 + (strlen($0 | 0) | 0) | 0 | 0;
  }
  return $0 | 0;
 }
 
 function strcmp($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0;
  $2 = HEAPU8[$1 >> 0] | 0;
  label$1 : {
   $3 = HEAPU8[$0 >> 0] | 0;
   if (!$3) {
    break label$1
   }
   if (($3 | 0) != ($2 & 255 | 0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2 = HEAPU8[($1 + 1 | 0) >> 0] | 0;
    $3 = HEAPU8[($0 + 1 | 0) >> 0] | 0;
    if (!$3) {
     break label$1
    }
    $1 = $1 + 1 | 0;
    $0 = $0 + 1 | 0;
    if (($3 | 0) == ($2 & 255 | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $3 - ($2 & 255 | 0) | 0 | 0;
 }
 
 function strlen($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = $0;
  label$1 : {
   label$2 : {
    if (!($1 & 3 | 0)) {
     break label$2
    }
    $1 = $0;
    label$3 : while (1) {
     if (!(HEAPU8[$1 >> 0] | 0)) {
      break label$1
     }
     $1 = $1 + 1 | 0;
     if ($1 & 3 | 0) {
      continue label$3
     }
     break label$3;
    };
   }
   label$4 : while (1) {
    $2 = $1;
    $1 = $1 + 4 | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    if (!((($3 ^ -1 | 0) & ($3 + -16843009 | 0) | 0) & -2139062144 | 0)) {
     continue label$4
    }
    break label$4;
   };
   label$5 : while (1) {
    $1 = $2;
    $2 = $1 + 1 | 0;
    if (HEAPU8[$1 >> 0] | 0) {
     continue label$5
    }
    break label$5;
   };
  }
  return $1 - $0 | 0 | 0;
 }
 
 function strncmp($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $5 = 0;
  label$1 : {
   if ($2) {
    break label$1
   }
   return 0 | 0;
  }
  $3 = 0;
  label$2 : {
   $4 = HEAPU8[$0 >> 0] | 0;
   if (!$4) {
    break label$2
   }
   label$3 : {
    label$4 : while (1) {
     $5 = HEAPU8[$1 >> 0] | 0;
     if (!$5) {
      break label$3
     }
     $2 = $2 + -1 | 0;
     if (!$2) {
      break label$3
     }
     if (($4 & 255 | 0 | 0) != ($5 | 0)) {
      break label$3
     }
     $1 = $1 + 1 | 0;
     $4 = HEAPU8[($0 + 1 | 0) >> 0] | 0;
     $0 = $0 + 1 | 0;
     if ($4) {
      continue label$4
     }
     break label$2;
    };
   }
   $3 = $4;
  }
  return ($3 & 255 | 0) - (HEAPU8[$1 >> 0] | 0) | 0 | 0;
 }
 
 function strstr($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  label$1 : {
   $2 = HEAP8[$1 >> 0] | 0;
   if ($2) {
    break label$1
   }
   return $0 | 0;
  }
  $3 = 0;
  label$2 : {
   $0 = strchr($0 | 0, $2 | 0) | 0;
   if (!$0) {
    break label$2
   }
   label$3 : {
    if (HEAPU8[($1 + 1 | 0) >> 0] | 0) {
     break label$3
    }
    return $0 | 0;
   }
   if (!(HEAPU8[($0 + 1 | 0) >> 0] | 0)) {
    break label$2
   }
   label$4 : {
    if (HEAPU8[($1 + 2 | 0) >> 0] | 0) {
     break label$4
    }
    return twobyte_strstr($0 | 0, $1 | 0) | 0 | 0;
   }
   if (!(HEAPU8[($0 + 2 | 0) >> 0] | 0)) {
    break label$2
   }
   label$5 : {
    if (HEAPU8[($1 + 3 | 0) >> 0] | 0) {
     break label$5
    }
    return threebyte_strstr($0 | 0, $1 | 0) | 0 | 0;
   }
   if (!(HEAPU8[($0 + 3 | 0) >> 0] | 0)) {
    break label$2
   }
   label$6 : {
    if (HEAPU8[($1 + 4 | 0) >> 0] | 0) {
     break label$6
    }
    return fourbyte_strstr($0 | 0, $1 | 0) | 0 | 0;
   }
   $3 = twoway_strstr($0 | 0, $1 | 0) | 0;
  }
  return $3 | 0;
 }
 
 function twobyte_strstr($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $4 = 0, $3 = 0, $5 = 0;
  $2 = HEAPU8[($0 + 1 | 0) >> 0] | 0;
  $3 = ($2 | 0) != (0 | 0);
  label$1 : {
   if (!$2) {
    break label$1
   }
   $4 = (HEAPU8[$0 >> 0] | 0) << 8 | 0 | $2 | 0;
   $5 = (HEAPU8[$1 >> 0] | 0) << 8 | 0 | (HEAPU8[($1 + 1 | 0) >> 0] | 0) | 0;
   if (($4 | 0) == ($5 | 0)) {
    break label$1
   }
   $1 = $0 + 1 | 0;
   label$2 : while (1) {
    $0 = $1;
    $2 = HEAPU8[($0 + 1 | 0) >> 0] | 0;
    $3 = ($2 | 0) != (0 | 0);
    if (!$2) {
     break label$1
    }
    $1 = $0 + 1 | 0;
    $4 = ($4 << 8 | 0) & 65280 | 0 | $2 | 0;
    if (($4 | 0) != ($5 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return ($3 ? $0 : 0) | 0;
 }
 
 function threebyte_strstr($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0, $4 = 0, $5 = 0;
  $2 = $0 + 2 | 0;
  $3 = HEAPU8[($0 + 2 | 0) >> 0] | 0;
  $4 = ($3 | 0) != (0 | 0);
  label$1 : {
   label$2 : {
    if (!$3) {
     break label$2
    }
    $3 = (HEAPU8[($0 + 1 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[$0 >> 0] | 0) << 24 | 0) | 0 | ($3 << 8 | 0) | 0;
    $5 = (HEAPU8[($1 + 1 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[$1 >> 0] | 0) << 24 | 0) | 0 | ((HEAPU8[($1 + 2 | 0) >> 0] | 0) << 8 | 0) | 0;
    if (($3 | 0) == ($5 | 0)) {
     break label$2
    }
    label$3 : while (1) {
     $1 = $2 + 1 | 0;
     $0 = HEAPU8[($2 + 1 | 0) >> 0] | 0;
     $4 = ($0 | 0) != (0 | 0);
     if (!$0) {
      break label$1
     }
     $2 = $1;
     $3 = ($3 | $0 | 0) << 8 | 0;
     if (($3 | 0) != ($5 | 0)) {
      continue label$3
     }
     break label$1;
    };
   }
   $1 = $2;
  }
  return ($4 ? $1 + -2 | 0 : 0) | 0;
 }
 
 function fourbyte_strstr($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0, $5 = 0, $6 = 0, $4 = 0;
  $2 = $0 + 3 | 0;
  $3 = HEAPU8[($0 + 3 | 0) >> 0] | 0;
  $4 = ($3 | 0) != (0 | 0);
  label$1 : {
   label$2 : {
    if (!$3) {
     break label$2
    }
    $5 = (HEAPU8[($0 + 1 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[$0 >> 0] | 0) << 24 | 0) | 0 | ((HEAPU8[($0 + 2 | 0) >> 0] | 0) << 8 | 0) | 0 | $3 | 0;
    $6 = $1;
    $0 = HEAPU8[$6 >> 0] | 0 | ((HEAPU8[($6 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($6 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($6 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $1 = $0 << 24 | 0 | (($0 & 65280 | 0) << 8 | 0) | 0 | (($0 >>> 8 | 0) & 65280 | 0 | ($0 >>> 24 | 0) | 0) | 0;
    if (($5 | 0) == ($1 | 0)) {
     break label$2
    }
    label$3 : while (1) {
     $3 = $2 + 1 | 0;
     $0 = HEAPU8[($2 + 1 | 0) >> 0] | 0;
     $4 = ($0 | 0) != (0 | 0);
     if (!$0) {
      break label$1
     }
     $2 = $3;
     $5 = $5 << 8 | 0 | $0 | 0;
     if (($5 | 0) != ($1 | 0)) {
      continue label$3
     }
     break label$1;
    };
   }
   $3 = $2;
  }
  return ($4 ? $3 + -3 | 0 : 0) | 0;
 }
 
 function twoway_strstr($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $6 = 0, $8 = 0, $3 = 0, $7 = 0, $2 = 0, $5 = 0, $11 = 0, $10 = 0, $9 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $12 = 0, $13 = 0, $14 = 0;
  $2 = __stack_pointer - 1056 | 0;
  __stack_pointer = $2;
  i64toi32_i32$1 = $2 + 1048 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2 + 1040 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2;
  i64toi32_i32$0 = 0;
  HEAP32[($2 + 1032 | 0) >> 2] = 0;
  HEAP32[($2 + 1036 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2;
  i64toi32_i32$0 = 0;
  HEAP32[($2 + 1024 | 0) >> 2] = 0;
  HEAP32[($2 + 1028 | 0) >> 2] = i64toi32_i32$0;
  $3 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        $4 = HEAPU8[$1 >> 0] | 0;
        if ($4) {
         break label$6
        }
        $5 = -1;
        $6 = 1;
        break label$5;
       }
       label$7 : while (1) {
        if (!(HEAPU8[($0 + $3 | 0) >> 0] | 0)) {
         break label$2
        }
        $3 = $3 + 1 | 0;
        HEAP32[($2 + (($4 & 255 | 0) << 2 | 0) | 0) >> 2] = $3;
        $6 = ($2 + 1024 | 0) + (($4 >>> 3 | 0) & 28 | 0) | 0;
        HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 0 | (1 << $4 | 0) | 0;
        $4 = HEAPU8[($1 + $3 | 0) >> 0] | 0;
        if ($4) {
         continue label$7
        }
        break label$7;
       };
       $6 = 1;
       $5 = -1;
       if ($3 >>> 0 > 1 >>> 0) {
        break label$4
       }
      }
      $7 = -1;
      $8 = 1;
      break label$3;
     }
     $8 = 0;
     $9 = 1;
     $4 = 1;
     label$8 : while (1) {
      label$9 : {
       label$10 : {
        $7 = HEAPU8[($1 + ($4 + $5 | 0) | 0) >> 0] | 0;
        $10 = HEAPU8[($1 + $6 | 0) >> 0] | 0;
        if (($7 | 0) != ($10 | 0)) {
         break label$10
        }
        label$11 : {
         if (($4 | 0) != ($9 | 0)) {
          break label$11
         }
         $8 = $9 + $8 | 0;
         $4 = 1;
         break label$9;
        }
        $4 = $4 + 1 | 0;
        break label$9;
       }
       label$12 : {
        if ($7 >>> 0 <= $10 >>> 0) {
         break label$12
        }
        $9 = $6 - $5 | 0;
        $4 = 1;
        $8 = $6;
        break label$9;
       }
       $4 = 1;
       $5 = $8;
       $8 = $8 + 1 | 0;
       $9 = 1;
      }
      $6 = $4 + $8 | 0;
      if ($6 >>> 0 < $3 >>> 0) {
       continue label$8
      }
      break label$8;
     };
     $8 = 1;
     $7 = -1;
     label$13 : {
      if ($3 >>> 0 > 1 >>> 0) {
       break label$13
      }
      $6 = $9;
      break label$3;
     }
     $6 = 0;
     $11 = 1;
     $4 = 1;
     label$14 : while (1) {
      label$15 : {
       label$16 : {
        $10 = HEAPU8[($1 + ($4 + $7 | 0) | 0) >> 0] | 0;
        $12 = HEAPU8[($1 + $8 | 0) >> 0] | 0;
        if (($10 | 0) != ($12 | 0)) {
         break label$16
        }
        label$17 : {
         if (($4 | 0) != ($11 | 0)) {
          break label$17
         }
         $6 = $11 + $6 | 0;
         $4 = 1;
         break label$15;
        }
        $4 = $4 + 1 | 0;
        break label$15;
       }
       label$18 : {
        if ($10 >>> 0 >= $12 >>> 0) {
         break label$18
        }
        $11 = $8 - $7 | 0;
        $4 = 1;
        $6 = $8;
        break label$15;
       }
       $4 = 1;
       $7 = $6;
       $6 = $6 + 1 | 0;
       $11 = 1;
      }
      $8 = $4 + $6 | 0;
      if ($8 >>> 0 < $3 >>> 0) {
       continue label$14
      }
      break label$14;
     };
     $6 = $9;
     $8 = $11;
    }
    label$19 : {
     label$20 : {
      $4 = ($7 + 1 | 0) >>> 0 > ($5 + 1 | 0) >>> 0;
      $13 = $4 ? $8 : $6;
      $11 = $4 ? $7 : $5;
      $10 = $11 + 1 | 0;
      if (!(memcmp($1 | 0, $1 + $13 | 0 | 0, $10 | 0) | 0)) {
       break label$20
      }
      $4 = $3 + ($11 ^ -1 | 0) | 0;
      $13 = ($11 >>> 0 > $4 >>> 0 ? $11 : $4) + 1 | 0;
      $14 = 0;
      break label$19;
     }
     $14 = $3 - $13 | 0;
    }
    $9 = $3 + -1 | 0;
    $12 = $3 | 63 | 0;
    $7 = 0;
    $6 = $0;
    label$21 : while (1) {
     label$22 : {
      if (($0 - $6 | 0) >>> 0 >= $3 >>> 0) {
       break label$22
      }
      label$23 : {
       $4 = memchr($0 | 0, 0 | 0, $12 | 0) | 0;
       if (!$4) {
        break label$23
       }
       $0 = $4;
       if (($4 - $6 | 0) >>> 0 < $3 >>> 0) {
        break label$2
       }
       break label$22;
      }
      $0 = $0 + $12 | 0;
     }
     label$24 : {
      label$25 : {
       label$26 : {
        $4 = HEAPU8[($6 + $9 | 0) >> 0] | 0;
        if (((HEAP32[(($2 + 1024 | 0) + (($4 >>> 3 | 0) & 28 | 0) | 0) >> 2] | 0) >>> $4 | 0) & 1 | 0) {
         break label$26
        }
        $4 = $3;
        break label$25;
       }
       label$27 : {
        $4 = HEAP32[($2 + ($4 << 2 | 0) | 0) >> 2] | 0;
        if (($3 | 0) == ($4 | 0)) {
         break label$27
        }
        $4 = $3 - $4 | 0;
        $4 = $4 >>> 0 > $7 >>> 0 ? $4 : $7;
        break label$25;
       }
       $4 = $10;
       label$28 : {
        label$29 : {
         $8 = $4 >>> 0 > $7 >>> 0 ? $4 : $7;
         $5 = HEAPU8[($1 + $8 | 0) >> 0] | 0;
         if (!$5) {
          break label$29
         }
         label$30 : while (1) {
          if (($5 & 255 | 0 | 0) != (HEAPU8[($6 + $8 | 0) >> 0] | 0 | 0)) {
           break label$28
          }
          $8 = $8 + 1 | 0;
          $5 = HEAPU8[($1 + $8 | 0) >> 0] | 0;
          if ($5) {
           continue label$30
          }
          break label$30;
         };
         $4 = $10;
        }
        label$31 : while (1) {
         if ($4 >>> 0 <= $7 >>> 0) {
          break label$1
         }
         $4 = $4 + -1 | 0;
         if ((HEAPU8[($1 + $4 | 0) >> 0] | 0 | 0) == (HEAPU8[($6 + $4 | 0) >> 0] | 0 | 0)) {
          continue label$31
         }
         break label$31;
        };
        $4 = $13;
        $7 = $14;
        break label$24;
       }
       $4 = $8 - $11 | 0;
      }
      $7 = 0;
     }
     $6 = $6 + $4 | 0;
     continue label$21;
    };
   }
   $6 = 0;
  }
  __stack_pointer = $2 + 1056 | 0;
  return $6 | 0;
 }
 
 function __uflow($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = -1;
  label$1 : {
   if (__toread($0 | 0) | 0) {
    break label$1
   }
   if ((FUNCTION_TABLE[HEAP32[($0 + 32 | 0) >> 2] | 0 | 0]($0, $1 + 15 | 0, 1) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $2 = HEAPU8[($1 + 15 | 0) >> 0] | 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return $2 | 0;
 }
 
 function __shlim($0, $1, $1$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2 = 0, $3 = 0, i64toi32_i32$2 = 0, $11 = 0, $12 = 0, $14 = 0, $13 = 0, $21$hi = 0, i64toi32_i32$3 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0;
  HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = $1;
  HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] = $1$hi;
  $2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = (HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] | 0) - $2 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $13 = i64toi32_i32$1;
  i64toi32_i32$1 = $0;
  HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = $13;
  HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$0;
  $3 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
  label$1 : {
   i64toi32_i32$0 = $1$hi;
   if (!($1 | $1$hi | 0)) {
    break label$1
   }
   i64toi32_i32$1 = $3 - $2 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   $21$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $21$hi;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $1;
   if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
    $11 = 1
   } else {
    if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
      $12 = 0
     } else {
      $12 = 1
     }
     $14 = $12;
    } else {
     $14 = 0
    }
    $11 = $14;
   }
   if ($11) {
    break label$1
   }
   i64toi32_i32$2 = $1$hi;
   $3 = $2 + $1 | 0;
  }
  HEAP32[($0 + 104 | 0) >> 2] = $3;
 }
 
 function __shgetc($0) {
  $0 = $0 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $1 = 0, $3$hi = 0, $4$hi = 0, $2 = 0, $3 = 0, $5 = 0, $4 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $7 = 0, $7$hi = 0, $15 = 0, $15$hi = 0, $35 = 0, $40 = 0, $40$hi = 0, $59 = 0, $59$hi = 0, $67 = 0, $74 = 0, $74$hi = 0;
  i64toi32_i32$2 = $0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 120 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 124 | 0) >> 2] | 0;
  $7 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$1;
  $1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $2 = HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] | 0;
  i64toi32_i32$0 = $1 - $2 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
  $15 = i64toi32_i32$0;
  $15$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$2 = $7;
  i64toi32_i32$0 = $15$hi;
  i64toi32_i32$3 = $15;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $3 = i64toi32_i32$4;
  $3$hi = i64toi32_i32$5;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] | 0;
     $4 = i64toi32_i32$5;
     $4$hi = i64toi32_i32$2;
     if (!(i64toi32_i32$5 | i64toi32_i32$2 | 0)) {
      break label$3
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $3;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4;
     if ((i64toi32_i32$2 | 0) > (i64toi32_i32$5 | 0)) {
      $26 = 1
     } else {
      if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        $27 = 0
       } else {
        $27 = 1
       }
       $28 = $27;
      } else {
       $28 = 0
      }
      $26 = $28;
     }
     if ($26) {
      break label$2
     }
    }
    $2 = __uflow($0 | 0) | 0;
    if (($2 | 0) > (-1 | 0)) {
     break label$1
    }
    $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    $2 = HEAP32[($0 + 44 | 0) >> 2] | 0;
   }
   i64toi32_i32$2 = $0;
   i64toi32_i32$1 = -1;
   HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] = -1;
   HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[(i64toi32_i32$2 + 104 | 0) >> 2] = $1;
   $35 = i64toi32_i32$2;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $2 - $1 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
   $40 = i64toi32_i32$2;
   $40$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$3 = $3;
   i64toi32_i32$2 = $40$hi;
   i64toi32_i32$5 = $40;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   i64toi32_i32$3 = $35;
   HEAP32[(i64toi32_i32$3 + 120 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(i64toi32_i32$3 + 124 | 0) >> 2] = i64toi32_i32$4;
   return -1 | 0;
  }
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$1 = $3;
  i64toi32_i32$3 = 0;
  i64toi32_i32$5 = 1;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
  i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $3 = i64toi32_i32$2;
  $3$hi = i64toi32_i32$0;
  $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
  label$4 : {
   i64toi32_i32$4 = $0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
   $4 = i64toi32_i32$0;
   $4$hi = i64toi32_i32$1;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 0;
   if ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0) {
    break label$4
   }
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$5 = $4;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$0 = $3;
   i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
   i64toi32_i32$2 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$2 | 0;
   $4 = i64toi32_i32$3;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$5 = $5 - $1 | 0;
   i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
   $59 = i64toi32_i32$5;
   $59$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$5 = $59$hi;
   i64toi32_i32$0 = $59;
   if ((i64toi32_i32$2 | 0) > (i64toi32_i32$5 | 0)) {
    $29 = 1
   } else {
    if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$5 | 0)) {
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
      $30 = 0
     } else {
      $30 = 1
     }
     $31 = $30;
    } else {
     $31 = 0
    }
    $29 = $31;
   }
   if ($29) {
    break label$4
   }
   i64toi32_i32$4 = $4$hi;
   $5 = $1 + $4 | 0;
  }
  HEAP32[($0 + 104 | 0) >> 2] = $5;
  $67 = $0;
  i64toi32_i32$4 = $3$hi;
  $5 = HEAP32[($0 + 44 | 0) >> 2] | 0;
  i64toi32_i32$2 = $5 - $1 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
  $74 = i64toi32_i32$2;
  $74$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$0 = $3;
  i64toi32_i32$2 = $74$hi;
  i64toi32_i32$5 = $74;
  i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
   i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
  }
  i64toi32_i32$0 = $67;
  HEAP32[(i64toi32_i32$0 + 120 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[(i64toi32_i32$0 + 124 | 0) >> 2] = i64toi32_i32$3;
  label$5 : {
   if ($1 >>> 0 > $5 >>> 0) {
    break label$5
   }
   HEAP8[($1 + -1 | 0) >> 0] = $2;
  }
  return $2 | 0;
 }
 
 function isspace($0) {
  $0 = $0 | 0;
  return ($0 | 0) == (32 | 0) | ($0 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function copysignl($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $22 = 0, $23 = 0, $24 = 0, $7 = 0, $11 = 0, $18$hi = 0, $20 = 0, $20$hi = 0, $21 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0;
  HEAP32[i64toi32_i32$1 >> 2] = $1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7 = i64toi32_i32$1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $22 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $22 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $11 = $22 & 32768 | 0;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $23 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $23 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $11 | ($23 & 32767 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $18$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $20 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $20$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $18$hi;
  i64toi32_i32$0 = $24;
  i64toi32_i32$2 = $20$hi;
  i64toi32_i32$3 = $20;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $21 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  i64toi32_i32$0 = $7;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $21;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function scalbnl($0, $1, $1$hi, $2, $2$hi, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4 = 0, i64toi32_i32$4 = 0, $20 = 0, $70 = 0, $71 = 0, $71$hi = 0, $72 = 0, $72$hi = 0, $76$hi = 0, $80 = 0, $83 = 0;
  $4 = __stack_pointer - 80 | 0;
  __stack_pointer = $4;
  label$1 : {
   label$2 : {
    if (($3 | 0) < (16384 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 2147352576;
    __multf3($4 + 32 | 0 | 0, $1 | 0, i64toi32_i32$0 | 0, $2 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = ($4 + 32 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $2 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $4;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
    $1 = i64toi32_i32$2;
    $1$hi = i64toi32_i32$3;
    label$3 : {
     if ($3 >>> 0 >= 32767 >>> 0) {
      break label$3
     }
     $3 = $3 + -16383 | 0;
     break label$1;
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 2147352576;
    __multf3($4 + 16 | 0 | 0, $1 | 0, i64toi32_i32$3 | 0, $2 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $3 = (($3 | 0) < (49149 | 0) ? $3 : 49149) + -32766 | 0;
    i64toi32_i32$2 = ($4 + 16 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $4;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$0;
    break label$1;
   }
   if (($3 | 0) > (-16383 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 7471104;
   __multf3($4 + 64 | 0 | 0, $1 | 0, i64toi32_i32$0 | 0, $2 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = ($4 + 64 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $2 = i64toi32_i32$3;
   $2$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $4;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
   $1 = i64toi32_i32$2;
   $1$hi = i64toi32_i32$3;
   label$4 : {
    if ($3 >>> 0 <= -32652 >>> 0) {
     break label$4
    }
    $3 = $3 + 16269 | 0;
    break label$1;
   }
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 7471104;
   __multf3($4 + 48 | 0 | 0, $1 | 0, i64toi32_i32$3 | 0, $2 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $3 = (($3 | 0) > (-48920 | 0) ? $3 : -48920) + 32538 | 0;
   i64toi32_i32$2 = ($4 + 48 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $2 = i64toi32_i32$0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $4;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
   $1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$0;
  }
  $70 = $4;
  i64toi32_i32$0 = $1$hi;
  $71 = $1;
  $71$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  $72 = $2;
  $72$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3 + 16383 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $20 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $20 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $76$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $71$hi;
  i64toi32_i32$2 = $72$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = $76$hi;
  __multf3($70 | 0, $71 | 0, i64toi32_i32$1 | 0, $72 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $20 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $4 + 8 | 0;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $80 = i64toi32_i32$3;
  i64toi32_i32$3 = $0;
  HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $80;
  HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $83 = i64toi32_i32$0;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $83;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  __stack_pointer = i64toi32_i32$2 + 80 | 0;
 }
 
 function __fpclassifyl($0, $0$hi, $1, $1$hi) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2$hi = 0, $2 = 0, $13 = 0, $3 = 0, $4 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $2 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $2$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $13 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $13 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3 = $13 & 32767 | 0;
    if (($3 | 0) == (32767 | 0)) {
     break label$2
    }
    $4 = 4;
    if ($3) {
     break label$1
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = $2;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$3 = $0;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    return (!(i64toi32_i32$1 | i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0) ? 2 : 3) | 0;
   }
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$2 = $2;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $4 = !(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0);
  }
  return $4 | 0;
 }
 
 function fmodl($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $5 = 0, i64toi32_i32$5 = 0, $10$hi = 0, $10 = 0, $9$hi = 0, $8 = 0, $9 = 0, i64toi32_i32$6 = 0, $6 = 0, $11$hi = 0, $52 = 0, $7 = 0, $53 = 0, $54 = 0, $55 = 0, $11 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $123$hi = 0, $126 = 0, $127$hi = 0, $148 = 0, $148$hi = 0, $150$hi = 0, $153 = 0, $153$hi = 0, $155$hi = 0, $167$hi = 0, $170 = 0, $171$hi = 0, $200 = 0, $200$hi = 0, $202$hi = 0, $211 = 0, $212 = 0, $212$hi = 0, $214 = 0, $214$hi = 0, $220$hi = 0, $221 = 0, $221$hi = 0, $228 = 0, $228$hi = 0, $233$hi = 0;
  $5 = __stack_pointer - 128 | 0;
  __stack_pointer = $5;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 0;
     if (!(__letf2($3 | 0, i64toi32_i32$0 | 0, $4 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0)) {
      break label$3
     }
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$2 = $4$hi;
     $6 = __fpclassifyl($3 | 0, i64toi32_i32$3 | 0, $4 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 48;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $52 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $52 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7 = $52;
     $8 = $7 & 32767 | 0;
     if (($8 | 0) == (32767 | 0)) {
      break label$3
     }
     if ($6) {
      break label$2
     }
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    __multf3($5 + 16 | 0 | 0, $1 | 0, i64toi32_i32$3 | 0, $2 | 0, i64toi32_i32$1 | 0, $3 | 0, i64toi32_i32$2 | 0, $4 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
    $4 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$1 = (i64toi32_i32$1 + 16 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $3 = i64toi32_i32$2;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$3 = i64toi32_i32$2;
    __divtf3($5 | 0, $4 | 0, i64toi32_i32$0 | 0, $3 | 0, i64toi32_i32$2 | 0, $4 | 0, i64toi32_i32$0 | 0, $3 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$2 = $5 + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $5;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $4 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$2 = $2;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$0 = -1;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
    $9 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $9$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$3 = $4;
    i64toi32_i32$2 = 2147483647;
    i64toi32_i32$0 = -1;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    $10 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    $10$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$0 = $10$hi;
    if ((__letf2($1 | 0, i64toi32_i32$2 | 0, $9 | 0, i64toi32_i32$3 | 0, $3 | 0, i64toi32_i32$1 | 0, $10 | 0, i64toi32_i32$0 | 0) | 0 | 0) > (0 | 0)) {
     break label$4
    }
    label$5 : {
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$2 = $10$hi;
     if (!(__letf2($1 | 0, i64toi32_i32$0 | 0, $9 | 0, i64toi32_i32$1 | 0, $3 | 0, i64toi32_i32$3 | 0, $10 | 0, i64toi32_i32$2 | 0) | 0)) {
      break label$5
     }
     i64toi32_i32$2 = $1$hi;
     $4 = $1;
     $4$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 0;
    __multf3($5 + 112 | 0 | 0, $1 | 0, i64toi32_i32$2 | 0, $2 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$3 = $5 + 120 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $2 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$3 = $5;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
    $4 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $4;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 48;
   i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $53 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $53 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
   }
   $6 = $53 & 32767 | 0;
   label$6 : {
    label$7 : {
     if (!$8) {
      break label$7
     }
     i64toi32_i32$1 = $1$hi;
     $4 = $1;
     $4$hi = i64toi32_i32$1;
     break label$6;
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 1081540608;
    __multf3($5 + 96 | 0 | 0, $1 | 0, i64toi32_i32$1 | 0, $9 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$3 = $5 + 104 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $9 = i64toi32_i32$2;
    $9$hi = i64toi32_i32$0;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $54 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $54 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $8 = $54 + -120 | 0;
    i64toi32_i32$0 = $5;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
    $4 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$3;
   }
   label$8 : {
    if ($6) {
     break label$8
    }
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 1081540608;
    __multf3($5 + 80 | 0 | 0, $3 | 0, i64toi32_i32$3 | 0, $10 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = $5 + 88 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $10 = i64toi32_i32$1;
    $10$hi = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $55 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $55 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $6 = $55 + -120 | 0;
    i64toi32_i32$0 = $5;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 80 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 84 | 0) >> 2] | 0;
    $3 = i64toi32_i32$1;
    $3$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $10$hi;
   i64toi32_i32$0 = $10;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $11 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $11$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $9$hi;
   i64toi32_i32$1 = $9;
   i64toi32_i32$2 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
   $9 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
   $9$hi = i64toi32_i32$1;
   label$9 : {
    if (($8 | 0) <= ($6 | 0)) {
     break label$9
    }
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       i64toi32_i32$1 = $9$hi;
       i64toi32_i32$1 = $11$hi;
       i64toi32_i32$1 = $9$hi;
       i64toi32_i32$2 = $9;
       i64toi32_i32$0 = $11$hi;
       i64toi32_i32$3 = $11;
       i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
       i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
       i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
       $123$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$1 = $4;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$3 = $3;
       $126 = $4$hi >>> 0 < i64toi32_i32$2 >>> 0 | (($4$hi | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$1 = 0;
       $127$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $123$hi;
       i64toi32_i32$3 = i64toi32_i32$4;
       i64toi32_i32$5 = $127$hi;
       i64toi32_i32$2 = $126;
       i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
       i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
       i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
       $10 = i64toi32_i32$0;
       $10$hi = i64toi32_i32$4;
       i64toi32_i32$1 = i64toi32_i32$0;
       i64toi32_i32$3 = 0;
       i64toi32_i32$2 = 0;
       if ((i64toi32_i32$4 | 0) < (i64toi32_i32$3 | 0)) {
        $56 = 1
       } else {
        if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$3 | 0)) {
         if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$2 >>> 0) {
          $57 = 0
         } else {
          $57 = 1
         }
         $58 = $57;
        } else {
         $58 = 0
        }
        $56 = $58;
       }
       if ($56) {
        break label$12
       }
       label$13 : {
        i64toi32_i32$1 = $10$hi;
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$1 = $3$hi;
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$2 = $4;
        i64toi32_i32$4 = $3$hi;
        i64toi32_i32$3 = $3;
        i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
        i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
        $4 = i64toi32_i32$5;
        $4$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$1 = $10;
        i64toi32_i32$2 = $4$hi;
        i64toi32_i32$3 = $4;
        i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
        i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
         break label$13
        }
        i64toi32_i32$0 = $1$hi;
        i64toi32_i32$0 = $2$hi;
        i64toi32_i32$0 = $1$hi;
        i64toi32_i32$2 = $2$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$1 = 0;
        __multf3($5 + 32 | 0 | 0, $1 | 0, i64toi32_i32$0 | 0, $2 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$2 = $5 + 40 | 0;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $2 = i64toi32_i32$1;
        $2$hi = i64toi32_i32$3;
        i64toi32_i32$2 = $5;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
        $4 = i64toi32_i32$3;
        $4$hi = i64toi32_i32$1;
        break label$1;
       }
       i64toi32_i32$1 = $10$hi;
       i64toi32_i32$2 = $10;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        $59 = 0;
       } else {
        i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
        $59 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       }
       $148 = $59;
       $148$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $4$hi;
       i64toi32_i32$1 = $4;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 63;
       i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $60 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
        $60 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
       }
       $150$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $148$hi;
       i64toi32_i32$3 = $148;
       i64toi32_i32$1 = $150$hi;
       i64toi32_i32$0 = $60;
       i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
       $9 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
       $9$hi = i64toi32_i32$1;
       break label$11;
      }
      i64toi32_i32$1 = $9$hi;
      i64toi32_i32$2 = $9;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 1;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       $61 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
       $61 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      }
      $153 = $61;
      $153$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$1 = $4;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 63;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $62 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       $62 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      $155$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $153$hi;
      i64toi32_i32$3 = $153;
      i64toi32_i32$1 = $155$hi;
      i64toi32_i32$0 = $62;
      i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      $9 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      $9$hi = i64toi32_i32$1;
     }
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = $4;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $63 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $63 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $4 = $63;
     $4$hi = i64toi32_i32$3;
     $8 = $8 + -1 | 0;
     if (($8 | 0) > ($6 | 0)) {
      continue label$10
     }
     break label$10;
    };
    $8 = $6;
   }
   label$14 : {
    label$15 : {
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$1 = $9;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$0 = $11;
     i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
     i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
     $167$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$0 = $3;
     $170 = $4$hi >>> 0 < i64toi32_i32$1 >>> 0 | (($4$hi | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $171$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $167$hi;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$5 = $171$hi;
     i64toi32_i32$1 = $170;
     i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
     $10 = i64toi32_i32$2;
     $10$hi = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$0 | 0)) {
      $64 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$0 | 0)) {
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
        $65 = 0
       } else {
        $65 = 1
       }
       $66 = $65;
      } else {
       $66 = 0
      }
      $64 = $66;
     }
     if ($64) {
      break label$15
     }
     i64toi32_i32$3 = $9$hi;
     $10 = $9;
     $10$hi = i64toi32_i32$3;
     break label$14;
    }
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$1 = $4;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$0 = $3;
    i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
    $4 = i64toi32_i32$5;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$3 = $10;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = $4;
    i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$14
    }
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 0;
    __multf3($5 + 48 | 0 | 0, $1 | 0, i64toi32_i32$2 | 0, $2 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $5 + 56 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $2 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$1 = $5;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
    $4 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   label$16 : {
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$1 = $10;
    i64toi32_i32$0 = 65535;
    i64toi32_i32$2 = -1;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$16
    }
    label$17 : while (1) {
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = $4;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 63;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $67 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $67 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     $3 = $67;
     $3$hi = i64toi32_i32$3;
     $8 = $8 + -1 | 0;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$1 = $4;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $68 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
      $68 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $4 = $68;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     $200 = $3;
     $200$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$3 = $10;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $69 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $69 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     }
     $202$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $200$hi;
     i64toi32_i32$2 = $200;
     i64toi32_i32$3 = $202$hi;
     i64toi32_i32$0 = $69;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $10 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     $10$hi = i64toi32_i32$3;
     i64toi32_i32$1 = $10;
     i64toi32_i32$2 = 65536;
     i64toi32_i32$0 = 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
      continue label$17
     }
     break label$17;
    };
   }
   $6 = $7 & 32768 | 0;
   label$18 : {
    if (($8 | 0) > (0 | 0)) {
     break label$18
    }
    $211 = $5 + 64 | 0;
    i64toi32_i32$1 = $4$hi;
    $212 = $4;
    $212$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$0 = $10;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$2 = -1;
    i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
    $214 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
    $214$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = $8 + 120 | 0 | $6 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 48;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $70 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $70 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $220$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $214$hi;
    i64toi32_i32$3 = $214;
    i64toi32_i32$1 = $220$hi;
    i64toi32_i32$2 = $70;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $221 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $221$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $212$hi;
    i64toi32_i32$3 = $221$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 1065811968;
    __multf3($211 | 0, $212 | 0, i64toi32_i32$1 | 0, $221 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$3 = $5 + 72 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $2 = i64toi32_i32$2;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$3 = $5;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $4 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = $10$hi;
   i64toi32_i32$3 = $10;
   i64toi32_i32$0 = 65535;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $228 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $228$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = $8 | $6 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 48;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $71 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $71 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $233$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $228$hi;
   i64toi32_i32$0 = $228;
   i64toi32_i32$2 = $233$hi;
   i64toi32_i32$1 = $71;
   i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
   $2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $2$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $4;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
  __stack_pointer = $5 + 128 | 0;
 }
 
 function fabsl($0, $1, $1$hi, $2, $2$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $5 = i64toi32_i32$2 & -1 | 0;
  i64toi32_i32$2 = $0;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  HEAP32[i64toi32_i32$2 >> 2] = $1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function __floatscan($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $10 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $6 = 0, $5 = 0, $5$hi = 0, $4 = 0, $9 = 0, $11 = 0, $11$hi = 0, $7 = 0, $8 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $12 = 0, $12$hi = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  i64toi32_i32$0 = 0;
  $5 = 0;
  $5$hi = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    if ($2 >>> 0 > 2 >>> 0) {
     break label$2
    }
    $6 = $1 + 4 | 0;
    $2 = $2 << 2 | 0;
    $7 = HEAP32[($2 + 91308 | 0) >> 2] | 0;
    $8 = HEAP32[($2 + 91296 | 0) >> 2] | 0;
    label$3 : while (1) {
     label$4 : {
      label$5 : {
       $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       if (($2 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$5
       }
       HEAP32[$6 >> 2] = $2 + 1 | 0;
       $2 = HEAPU8[$2 >> 0] | 0;
       break label$4;
      }
      $2 = __shgetc($1 | 0) | 0;
     }
     if (isspace($2 | 0) | 0) {
      continue label$3
     }
     break label$3;
    };
    $9 = 1;
    label$6 : {
     label$7 : {
      switch ($2 + -43 | 0 | 0) {
      case 0:
      case 2:
       break label$7;
      default:
       break label$6;
      };
     }
     $9 = ($2 | 0) == (45 | 0) ? -1 : 1;
     label$8 : {
      $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
      if (($2 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
       break label$8
      }
      HEAP32[$6 >> 2] = $2 + 1 | 0;
      $2 = HEAPU8[$2 >> 0] | 0;
      break label$6;
     }
     $2 = __shgetc($1 | 0) | 0;
    }
    $10 = 0;
    label$9 : {
     label$10 : {
      label$11 : {
       label$12 : while (1) {
        if (($2 | 32 | 0 | 0) != (HEAP8[($10 + 65540 | 0) >> 0] | 0 | 0)) {
         break label$11
        }
        label$13 : {
         if ($10 >>> 0 > 6 >>> 0) {
          break label$13
         }
         label$14 : {
          $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
          if (($2 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
           break label$14
          }
          HEAP32[$6 >> 2] = $2 + 1 | 0;
          $2 = HEAPU8[$2 >> 0] | 0;
          break label$13;
         }
         $2 = __shgetc($1 | 0) | 0;
        }
        $10 = $10 + 1 | 0;
        if (($10 | 0) != (8 | 0)) {
         continue label$12
        }
        break label$10;
       };
      }
      label$15 : {
       if (($10 | 0) == (3 | 0)) {
        break label$15
       }
       if (($10 | 0) == (8 | 0)) {
        break label$10
       }
       if (!$3) {
        break label$9
       }
       if ($10 >>> 0 < 4 >>> 0) {
        break label$9
       }
       if (($10 | 0) == (8 | 0)) {
        break label$10
       }
      }
      label$16 : {
       i64toi32_i32$2 = $1;
       i64toi32_i32$0 = HEAP32[($1 + 112 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($1 + 116 | 0) >> 2] | 0;
       $5 = i64toi32_i32$0;
       $5$hi = i64toi32_i32$1;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
        $20 = 1
       } else {
        if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
         if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $21 = 0
         } else {
          $21 = 1
         }
         $22 = $21;
        } else {
         $22 = 0
        }
        $20 = $22;
       }
       if ($20) {
        break label$16
       }
       HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1 | 0;
      }
      if (!$3) {
       break label$10
      }
      if ($10 >>> 0 < 4 >>> 0) {
       break label$10
      }
      i64toi32_i32$2 = $5$hi;
      i64toi32_i32$3 = $5;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
       $23 = 1
      } else {
       if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
         $24 = 0
        } else {
         $24 = 1
        }
        $25 = $24;
       } else {
        $25 = 0
       }
       $23 = $25;
      }
      $1 = $23;
      label$17 : while (1) {
       label$18 : {
        if ($1) {
         break label$18
        }
        HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1 | 0;
       }
       $10 = $10 + -1 | 0;
       if ($10 >>> 0 > 3 >>> 0) {
        continue label$17
       }
       break label$17;
      };
     }
     __extendsftf2($4 | 0, Math_fround(Math_fround(Math_fround($9 | 0) * Math_fround(Infinity))));
     i64toi32_i32$0 = $4 + 8 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $11 = i64toi32_i32$3;
     $11$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $4;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $5 = i64toi32_i32$2;
     $5$hi = i64toi32_i32$3;
     break label$1;
    }
    label$19 : {
     label$20 : {
      label$21 : {
       if ($10) {
        break label$21
       }
       $10 = 0;
       label$22 : while (1) {
        if (($2 | 32 | 0 | 0) != (HEAP8[($10 + 66372 | 0) >> 0] | 0 | 0)) {
         break label$21
        }
        label$23 : {
         if ($10 >>> 0 > 1 >>> 0) {
          break label$23
         }
         label$24 : {
          $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
          if (($2 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
           break label$24
          }
          HEAP32[$6 >> 2] = $2 + 1 | 0;
          $2 = HEAPU8[$2 >> 0] | 0;
          break label$23;
         }
         $2 = __shgetc($1 | 0) | 0;
        }
        $10 = $10 + 1 | 0;
        if (($10 | 0) != (3 | 0)) {
         continue label$22
        }
        break label$20;
       };
      }
      label$25 : {
       switch ($10 | 0) {
       case 0:
        label$27 : {
         if (($2 | 0) != (48 | 0)) {
          break label$27
         }
         label$28 : {
          label$29 : {
           $10 = HEAP32[($1 + 4 | 0) >> 2] | 0;
           if (($10 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
            break label$29
           }
           HEAP32[$6 >> 2] = $10 + 1 | 0;
           $10 = HEAPU8[$10 >> 0] | 0;
           break label$28;
          }
          $10 = __shgetc($1 | 0) | 0;
         }
         label$30 : {
          if (($10 & -33 | 0 | 0) != (88 | 0)) {
           break label$30
          }
          hexfloat($4 + 16 | 0 | 0, $1 | 0, $8 | 0, $7 | 0, $9 | 0, $3 | 0);
          i64toi32_i32$0 = $4 + 24 | 0;
          i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
          $11 = i64toi32_i32$3;
          $11$hi = i64toi32_i32$2;
          i64toi32_i32$0 = $4;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
          $5 = i64toi32_i32$2;
          $5$hi = i64toi32_i32$3;
          break label$1;
         }
         i64toi32_i32$0 = $1;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 112 | 0) >> 2] | 0;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 116 | 0) >> 2] | 0;
         i64toi32_i32$0 = i64toi32_i32$3;
         i64toi32_i32$3 = 0;
         i64toi32_i32$1 = 0;
         if ((i64toi32_i32$2 | 0) < (i64toi32_i32$3 | 0)) {
          $26 = 1
         } else {
          if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$3 | 0)) {
           if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
            $27 = 0
           } else {
            $27 = 1
           }
           $28 = $27;
          } else {
           $28 = 0
          }
          $26 = $28;
         }
         if ($26) {
          break label$27
         }
         HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1 | 0;
        }
        decfloat($4 + 32 | 0 | 0, $1 | 0, $2 | 0, $8 | 0, $7 | 0, $9 | 0, $3 | 0);
        i64toi32_i32$1 = $4 + 40 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $11 = i64toi32_i32$0;
        $11$hi = i64toi32_i32$2;
        i64toi32_i32$1 = $4;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
        $5 = i64toi32_i32$2;
        $5$hi = i64toi32_i32$0;
        break label$1;
       case 3:
        break label$20;
       default:
        break label$25;
       };
      }
      i64toi32_i32$0 = 0;
      $5 = 0;
      $5$hi = i64toi32_i32$0;
      label$31 : {
       i64toi32_i32$1 = $1;
       i64toi32_i32$0 = HEAP32[($1 + 112 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[($1 + 116 | 0) >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$2 | 0) < (i64toi32_i32$0 | 0)) {
        $29 = 1
       } else {
        if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$0 | 0)) {
         if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $30 = 0
         } else {
          $30 = 1
         }
         $31 = $30;
        } else {
         $31 = 0
        }
        $29 = $31;
       }
       if ($29) {
        break label$31
       }
       HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1 | 0;
      }
      (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 28), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      break label$19;
     }
     label$32 : {
      label$33 : {
       $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       if (($2 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$33
       }
       HEAP32[$6 >> 2] = $2 + 1 | 0;
       $2 = HEAPU8[$2 >> 0] | 0;
       break label$32;
      }
      $2 = __shgetc($1 | 0) | 0;
     }
     label$34 : {
      label$35 : {
       if (($2 | 0) != (40 | 0)) {
        break label$35
       }
       $10 = 1;
       break label$34;
      }
      i64toi32_i32$1 = 0;
      $5 = 0;
      $5$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 2147450880;
      $11 = 0;
      $11$hi = i64toi32_i32$1;
      i64toi32_i32$3 = $1;
      i64toi32_i32$1 = HEAP32[($1 + 112 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[($1 + 116 | 0) >> 2] | 0;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
       $32 = 1
      } else {
       if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
         $33 = 0
        } else {
         $33 = 1
        }
        $34 = $33;
       } else {
        $34 = 0
       }
       $32 = $34;
      }
      if ($32) {
       break label$1
      }
      HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1 | 0;
      break label$1;
     }
     label$36 : while (1) {
      label$37 : {
       label$38 : {
        $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
        if (($2 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
         break label$38
        }
        HEAP32[$6 >> 2] = $2 + 1 | 0;
        $2 = HEAPU8[$2 >> 0] | 0;
        break label$37;
       }
       $2 = __shgetc($1 | 0) | 0;
      }
      $9 = $2 + -65 | 0;
      label$39 : {
       label$40 : {
        if (($2 + -48 | 0) >>> 0 < 10 >>> 0) {
         break label$40
        }
        if ($9 >>> 0 < 26 >>> 0) {
         break label$40
        }
        $9 = $2 + -97 | 0;
        if (($2 | 0) == (95 | 0)) {
         break label$40
        }
        if ($9 >>> 0 >= 26 >>> 0) {
         break label$39
        }
       }
       $10 = $10 + 1 | 0;
       continue label$36;
      }
      break label$36;
     };
     i64toi32_i32$3 = 2147450880;
     $11 = 0;
     $11$hi = i64toi32_i32$3;
     if (($2 | 0) == (41 | 0)) {
      break label$1
     }
     label$41 : {
      i64toi32_i32$0 = $1;
      i64toi32_i32$3 = HEAP32[($1 + 112 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[($1 + 116 | 0) >> 2] | 0;
      $12 = i64toi32_i32$3;
      $12$hi = i64toi32_i32$2;
      i64toi32_i32$0 = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 0;
      if ((i64toi32_i32$2 | 0) < (i64toi32_i32$3 | 0)) {
       $35 = 1
      } else {
       if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$3 | 0)) {
        if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
         $36 = 0
        } else {
         $36 = 1
        }
        $37 = $36;
       } else {
        $37 = 0
       }
       $35 = $37;
      }
      if ($35) {
       break label$41
      }
      HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1 | 0;
     }
     label$42 : {
      label$43 : {
       if (!$3) {
        break label$43
       }
       if ($10) {
        break label$42
       }
       i64toi32_i32$0 = 0;
       $5 = 0;
       $5$hi = i64toi32_i32$0;
       break label$1;
      }
      (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 28), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      i64toi32_i32$0 = 0;
      $5 = 0;
      $5$hi = i64toi32_i32$0;
      break label$19;
     }
     label$44 : while (1) {
      $10 = $10 + -1 | 0;
      label$45 : {
       i64toi32_i32$0 = $12$hi;
       i64toi32_i32$1 = $12;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$0 | 0) < (i64toi32_i32$2 | 0)) {
        $38 = 1
       } else {
        if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$2 | 0)) {
         if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $39 = 0
         } else {
          $39 = 1
         }
         $40 = $39;
        } else {
         $40 = 0
        }
        $38 = $40;
       }
       if ($38) {
        break label$45
       }
       HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1 | 0;
      }
      i64toi32_i32$1 = 0;
      $5 = 0;
      $5$hi = i64toi32_i32$1;
      if ($10) {
       continue label$44
      }
      break label$1;
     };
    }
    i64toi32_i32$1 = $5$hi;
    __shlim($1 | 0, $5 | 0, i64toi32_i32$1 | 0);
   }
   i64toi32_i32$1 = 0;
   $11 = 0;
   $11$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $5;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $11$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $11;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
  __stack_pointer = $4 + 48 | 0;
 }
 
 function hexfloat($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, $6 = 0, $7 = 0, $13$hi = 0, $17$hi = 0, $13 = 0, $17 = 0, $11$hi = 0, $14$hi = 0, $9$hi = 0, $11 = 0, $14 = 0, $15$hi = 0, $9 = 0, $12 = 0, $15 = 0, $8 = 0, $10 = 0, $20$hi = 0, $20 = 0, $16 = 0, $18 = 0, $19 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $126 = 0, $127 = 0, $128 = 0, $130 = 0, $125 = 0, $125$hi = 0, $129 = 0, $129$hi = 0, $140 = 0, $140$hi = 0, $144 = 0, $144$hi = 0, $162 = 0, $162$hi = 0, $166 = 0, $166$hi = 0, $266$hi = 0, $273$hi = 0, $282 = 0, $282$hi = 0, $286 = 0, $286$hi = 0, $290 = 0, $290$hi = 0, $294 = 0, $294$hi = 0, $304 = 0, $304$hi = 0, $320$hi = 0, $131 = 0, $325 = 0, $325$hi = 0, $329$hi = 0, $132 = 0, $332 = 0, $332$hi = 0, $349$hi = 0, $357 = 0, $358 = 0, $361$hi = 0, $385 = 0, $385$hi = 0, $389 = 0, $389$hi = 0, $425 = 0, $425$hi = 0, $429 = 0, $429$hi = 0, $433 = 0, $433$hi = 0, $437 = 0, $437$hi = 0, $446 = 0, $446$hi = 0, $449 = 0, $449$hi = 0, $453 = 0, $453$hi = 0, $457 = 0, $457$hi = 0, $459 = 0, $459$hi = 0, $463 = 0, $463$hi = 0, $467 = 0, $467$hi = 0, $471 = 0, $471$hi = 0, $503 = 0, $503$hi = 0, $507 = 0, $507$hi = 0, $511 = 0, $511$hi = 0, $515 = 0, $515$hi = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6 = __stack_pointer - 432 | 0;
  __stack_pointer = $6;
  label$1 : {
   label$2 : {
    $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    if (($7 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    HEAP32[($1 + 4 | 0) >> 2] = $7 + 1 | 0;
    $7 = HEAPU8[$7 >> 0] | 0;
    break label$1;
   }
   $7 = __shgetc($1 | 0) | 0;
  }
  $8 = 0;
  i64toi32_i32$0 = 0;
  $9 = 0;
  $9$hi = i64toi32_i32$0;
  $10 = 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : while (1) {
      label$7 : {
       if (($7 | 0) == (48 | 0)) {
        break label$7
       }
       if (($7 | 0) != (46 | 0)) {
        break label$3
       }
       $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       if (($7 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$5
       }
       HEAP32[($1 + 4 | 0) >> 2] = $7 + 1 | 0;
       $7 = HEAPU8[$7 >> 0] | 0;
       break label$4;
      }
      label$8 : {
       $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       if (($7 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$8
       }
       $10 = 1;
       HEAP32[($1 + 4 | 0) >> 2] = $7 + 1 | 0;
       $7 = HEAPU8[$7 >> 0] | 0;
       continue label$6;
      }
      $10 = 1;
      $7 = __shgetc($1 | 0) | 0;
      continue label$6;
     };
    }
    $7 = __shgetc($1 | 0) | 0;
   }
   $8 = 1;
   i64toi32_i32$0 = 0;
   $9 = 0;
   $9$hi = i64toi32_i32$0;
   if (($7 | 0) != (48 | 0)) {
    break label$3
   }
   label$9 : while (1) {
    label$10 : {
     label$11 : {
      $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
      if (($7 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
       break label$11
      }
      HEAP32[($1 + 4 | 0) >> 2] = $7 + 1 | 0;
      $7 = HEAPU8[$7 >> 0] | 0;
      break label$10;
     }
     $7 = __shgetc($1 | 0) | 0;
    }
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$2 = $9;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $9 = i64toi32_i32$4;
    $9$hi = i64toi32_i32$5;
    if (($7 | 0) == (48 | 0)) {
     continue label$9
    }
    break label$9;
   };
   $8 = 1;
   $10 = 1;
  }
  i64toi32_i32$5 = 1073676288;
  $11 = 0;
  $11$hi = i64toi32_i32$5;
  $12 = 0;
  i64toi32_i32$5 = 0;
  $13 = 0;
  $13$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $14 = 0;
  $14$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $15 = 0;
  $15$hi = i64toi32_i32$5;
  $16 = 0;
  i64toi32_i32$5 = 0;
  $17 = 0;
  $17$hi = i64toi32_i32$5;
  label$12 : {
   label$13 : while (1) {
    $18 = $7 | 32 | 0;
    label$14 : {
     label$15 : {
      $19 = $7 + -48 | 0;
      if ($19 >>> 0 < 10 >>> 0) {
       break label$15
      }
      label$16 : {
       if (($18 + -97 | 0) >>> 0 < 6 >>> 0) {
        break label$16
       }
       if (($7 | 0) != (46 | 0)) {
        break label$12
       }
      }
      if (($7 | 0) != (46 | 0)) {
       break label$15
      }
      if ($8) {
       break label$12
      }
      $8 = 1;
      i64toi32_i32$5 = $17$hi;
      $9 = $17;
      $9$hi = i64toi32_i32$5;
      break label$14;
     }
     $7 = ($7 | 0) > (57 | 0) ? $18 + -87 | 0 : $19;
     label$17 : {
      label$18 : {
       i64toi32_i32$5 = $17$hi;
       i64toi32_i32$0 = $17;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 7;
       if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
        $104 = 1
       } else {
        if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
         if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
          $105 = 0
         } else {
          $105 = 1
         }
         $106 = $105;
        } else {
         $106 = 0
        }
        $104 = $106;
       }
       if ($104) {
        break label$18
       }
       $12 = $7 + ($12 << 4 | 0) | 0;
       break label$17;
      }
      label$19 : {
       i64toi32_i32$0 = $17$hi;
       i64toi32_i32$3 = $17;
       i64toi32_i32$5 = 0;
       i64toi32_i32$2 = 28;
       if (i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
        break label$19
       }
       __floatsitf($6 + 48 | 0 | 0, $7 | 0);
       i64toi32_i32$3 = $15$hi;
       i64toi32_i32$3 = $11$hi;
       i64toi32_i32$3 = $15$hi;
       i64toi32_i32$0 = $11$hi;
       i64toi32_i32$2 = 0;
       i64toi32_i32$5 = 1073414144;
       __multf3($6 + 32 | 0 | 0, $15 | 0, i64toi32_i32$3 | 0, $11 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = $6;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
       $125 = i64toi32_i32$5;
       $125$hi = i64toi32_i32$2;
       i64toi32_i32$0 = (i64toi32_i32$0 + 48 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $129 = i64toi32_i32$2;
       $129$hi = i64toi32_i32$5;
       i64toi32_i32$0 = $6;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
       $15 = i64toi32_i32$5;
       $15$hi = i64toi32_i32$2;
       i64toi32_i32$0 = (i64toi32_i32$0 + 32 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $11 = i64toi32_i32$2;
       $11$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $125$hi;
       i64toi32_i32$2 = $129$hi;
       i64toi32_i32$0 = $15$hi;
       i64toi32_i32$3 = $11$hi;
       __multf3($6 + 16 | 0 | 0, $125 | 0, i64toi32_i32$5 | 0, $129 | 0, i64toi32_i32$2 | 0, $15 | 0, i64toi32_i32$0 | 0, $11 | 0, i64toi32_i32$3 | 0);
       i64toi32_i32$2 = $6;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
       $140 = i64toi32_i32$3;
       $140$hi = i64toi32_i32$0;
       i64toi32_i32$2 = (i64toi32_i32$2 + 16 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $144 = i64toi32_i32$0;
       $144$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $13$hi;
       i64toi32_i32$3 = $14$hi;
       i64toi32_i32$3 = $140$hi;
       i64toi32_i32$0 = $144$hi;
       i64toi32_i32$2 = $13$hi;
       i64toi32_i32$5 = $14$hi;
       __addtf3($6 | 0, $140 | 0, i64toi32_i32$3 | 0, $144 | 0, i64toi32_i32$0 | 0, $13 | 0, i64toi32_i32$2 | 0, $14 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = $6 + 8 | 0;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $14 = i64toi32_i32$5;
       $14$hi = i64toi32_i32$2;
       i64toi32_i32$0 = $6;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $13 = i64toi32_i32$2;
       $13$hi = i64toi32_i32$5;
       break label$17;
      }
      if (!$7) {
       break label$17
      }
      if ($16) {
       break label$17
      }
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 1073610752;
      __multf3($6 + 80 | 0 | 0, $15 | 0, i64toi32_i32$5 | 0, $11 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$2 = $6;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] | 0;
      $162 = i64toi32_i32$3;
      $162$hi = i64toi32_i32$0;
      i64toi32_i32$2 = (i64toi32_i32$2 + 80 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $166 = i64toi32_i32$0;
      $166$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = $14$hi;
      i64toi32_i32$3 = $162$hi;
      i64toi32_i32$0 = $166$hi;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$5 = $14$hi;
      __addtf3($6 + 64 | 0 | 0, $162 | 0, i64toi32_i32$3 | 0, $166 | 0, i64toi32_i32$0 | 0, $13 | 0, i64toi32_i32$2 | 0, $14 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$0 = ($6 + 64 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $14 = i64toi32_i32$5;
      $14$hi = i64toi32_i32$2;
      $16 = 1;
      i64toi32_i32$0 = $6;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
      $13 = i64toi32_i32$2;
      $13$hi = i64toi32_i32$5;
     }
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$0 = $17;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $17 = i64toi32_i32$1;
     $17$hi = i64toi32_i32$4;
     $10 = 1;
    }
    label$20 : {
     $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
     if (($7 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
      break label$20
     }
     HEAP32[($1 + 4 | 0) >> 2] = $7 + 1 | 0;
     $7 = HEAPU8[$7 >> 0] | 0;
     continue label$13;
    }
    $7 = __shgetc($1 | 0) | 0;
    continue label$13;
   };
  }
  label$21 : {
   label$22 : {
    if ($10) {
     break label$22
    }
    label$23 : {
     label$24 : {
      label$25 : {
       i64toi32_i32$5 = $1;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 112 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 116 | 0) >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$4;
       i64toi32_i32$4 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$0 | 0) < (i64toi32_i32$4 | 0)) {
        $107 = 1
       } else {
        if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$4 | 0)) {
         if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $108 = 0
         } else {
          $108 = 1
         }
         $109 = $108;
        } else {
         $109 = 0
        }
        $107 = $109;
       }
       if ($107) {
        break label$25
       }
       $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       HEAP32[($1 + 4 | 0) >> 2] = $7 + -1 | 0;
       if (!$5) {
        break label$24
       }
       HEAP32[($1 + 4 | 0) >> 2] = $7 + -2 | 0;
       if (!$8) {
        break label$23
       }
       HEAP32[($1 + 4 | 0) >> 2] = $7 + -3 | 0;
       break label$23;
      }
      if ($5) {
       break label$23
      }
     }
     i64toi32_i32$5 = 0;
     __shlim($1 | 0, 0 | 0, i64toi32_i32$5 | 0);
    }
    __extenddftf2($6 + 96 | 0 | 0, +(+($4 | 0) * 0.0));
    i64toi32_i32$3 = $6 + 104 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $17 = i64toi32_i32$5;
    $17$hi = i64toi32_i32$0;
    i64toi32_i32$3 = $6;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 96 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 100 | 0) >> 2] | 0;
    $13 = i64toi32_i32$0;
    $13$hi = i64toi32_i32$5;
    break label$21;
   }
   label$26 : {
    i64toi32_i32$5 = $17$hi;
    i64toi32_i32$3 = $17;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 7;
    if ((i64toi32_i32$5 | 0) > (i64toi32_i32$0 | 0)) {
     $110 = 1
    } else {
     if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$4 >>> 0) {
       $111 = 0
      } else {
       $111 = 1
      }
      $112 = $111;
     } else {
      $112 = 0
     }
     $110 = $112;
    }
    if ($110) {
     break label$26
    }
    i64toi32_i32$3 = $17$hi;
    $11 = $17;
    $11$hi = i64toi32_i32$3;
    label$27 : while (1) {
     $12 = $12 << 4 | 0;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$4 = $11;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $11 = i64toi32_i32$2;
     $11$hi = i64toi32_i32$1;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 8;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | 0) {
      continue label$27
     }
     break label$27;
    };
   }
   label$28 : {
    label$29 : {
     label$30 : {
      label$31 : {
       if (($7 & -33 | 0 | 0) != (80 | 0)) {
        break label$31
       }
       i64toi32_i32$3 = scanexp($1 | 0, $5 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $11 = i64toi32_i32$3;
       $11$hi = i64toi32_i32$1;
       i64toi32_i32$0 = i64toi32_i32$3;
       i64toi32_i32$3 = -2147483648;
       i64toi32_i32$4 = 0;
       if ((i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
        break label$28
       }
       label$32 : {
        if (!$5) {
         break label$32
        }
        i64toi32_i32$4 = $1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
        i64toi32_i32$4 = i64toi32_i32$0;
        i64toi32_i32$0 = -1;
        i64toi32_i32$3 = -1;
        if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
         $113 = 1
        } else {
         if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
          if (i64toi32_i32$4 >>> 0 <= i64toi32_i32$3 >>> 0) {
           $114 = 0
          } else {
           $114 = 1
          }
          $115 = $114;
         } else {
          $115 = 0
         }
         $113 = $115;
        }
        if ($113) {
         break label$30
        }
        break label$29;
       }
       i64toi32_i32$4 = 0;
       $13 = 0;
       $13$hi = i64toi32_i32$4;
       i64toi32_i32$4 = 0;
       __shlim($1 | 0, 0 | 0, i64toi32_i32$4 | 0);
       i64toi32_i32$4 = 0;
       $17 = 0;
       $17$hi = i64toi32_i32$4;
       break label$21;
      }
      i64toi32_i32$4 = 0;
      $11 = 0;
      $11$hi = i64toi32_i32$4;
      i64toi32_i32$3 = $1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
       $116 = 1
      } else {
       if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
        if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
         $117 = 0
        } else {
         $117 = 1
        }
        $118 = $117;
       } else {
        $118 = 0
       }
       $116 = $118;
      }
      if ($116) {
       break label$28
      }
     }
     HEAP32[($1 + 4 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    i64toi32_i32$3 = 0;
    $11 = 0;
    $11$hi = i64toi32_i32$3;
   }
   label$33 : {
    if ($12) {
     break label$33
    }
    __extenddftf2($6 + 112 | 0 | 0, +(+($4 | 0) * 0.0));
    i64toi32_i32$0 = $6 + 120 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $17 = i64toi32_i32$3;
    $17$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $6;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 112 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 116 | 0) >> 2] | 0;
    $13 = i64toi32_i32$1;
    $13$hi = i64toi32_i32$3;
    break label$21;
   }
   label$34 : {
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$3 = $17$hi;
    i64toi32_i32$5 = $8;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$1 = $17$hi;
    i64toi32_i32$4 = i64toi32_i32$5 ? $9 : $17;
    i64toi32_i32$0 = i64toi32_i32$5 ? i64toi32_i32$3 : i64toi32_i32$1;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 2;
    i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
     $119 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
     $119 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
    }
    $266$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $11$hi;
    i64toi32_i32$4 = $266$hi;
    i64toi32_i32$0 = $119;
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$1 = $11;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$0 = -1;
    i64toi32_i32$1 = -32;
    i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $17 = i64toi32_i32$5;
    $17$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $273$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $17$hi;
    i64toi32_i32$2 = i64toi32_i32$5;
    i64toi32_i32$4 = $273$hi;
    i64toi32_i32$1 = 0 - $3 | 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$4 | 0)) {
     $120 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0) {
       $121 = 0
      } else {
       $121 = 1
      }
      $122 = $121;
     } else {
      $122 = 0
     }
     $120 = $122;
    }
    if ($120) {
     break label$34
    }
    (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    __floatsitf($6 + 160 | 0 | 0, $4 | 0);
    i64toi32_i32$1 = $6;
    i64toi32_i32$2 = HEAP32[($6 + 160 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($6 + 164 | 0) >> 2] | 0;
    $282 = i64toi32_i32$2;
    $282$hi = i64toi32_i32$3;
    i64toi32_i32$1 = ($6 + 160 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $286 = i64toi32_i32$3;
    $286$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $282$hi;
    i64toi32_i32$3 = $286$hi;
    i64toi32_i32$1 = -1;
    i64toi32_i32$4 = 2147418111;
    __multf3($6 + 144 | 0 | 0, $282 | 0, i64toi32_i32$2 | 0, $286 | 0, i64toi32_i32$3 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$3 = $6;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 144 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 148 | 0) >> 2] | 0;
    $290 = i64toi32_i32$4;
    $290$hi = i64toi32_i32$1;
    i64toi32_i32$3 = (i64toi32_i32$3 + 144 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $294 = i64toi32_i32$1;
    $294$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $290$hi;
    i64toi32_i32$1 = $294$hi;
    i64toi32_i32$3 = -1;
    i64toi32_i32$2 = 2147418111;
    __multf3($6 + 128 | 0 | 0, $290 | 0, i64toi32_i32$4 | 0, $294 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$3 | 0, -1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$1 = ($6 + 128 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $17 = i64toi32_i32$2;
    $17$hi = i64toi32_i32$3;
    i64toi32_i32$1 = $6;
    i64toi32_i32$3 = HEAP32[($6 + 128 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($6 + 132 | 0) >> 2] | 0;
    $13 = i64toi32_i32$3;
    $13$hi = i64toi32_i32$2;
    break label$21;
   }
   label$35 : {
    i64toi32_i32$2 = $17$hi;
    i64toi32_i32$3 = $3 + -226 | 0;
    i64toi32_i32$2 = i64toi32_i32$3 >> 31 | 0;
    $304 = i64toi32_i32$3;
    $304$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $17$hi;
    i64toi32_i32$1 = $17;
    i64toi32_i32$3 = $304$hi;
    i64toi32_i32$4 = $304;
    if ((i64toi32_i32$2 | 0) < (i64toi32_i32$3 | 0)) {
     $123 = 1
    } else {
     if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$3 | 0)) {
      if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$4 >>> 0) {
       $124 = 0
      } else {
       $124 = 1
      }
      $126 = $124;
     } else {
      $126 = 0
     }
     $123 = $126;
    }
    if ($123) {
     break label$35
    }
    label$36 : {
     if (($12 | 0) <= (-1 | 0)) {
      break label$36
     }
     label$37 : while (1) {
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$1 = $14$hi;
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = -1073807360;
      __addtf3($6 + 416 | 0 | 0, $13 | 0, i64toi32_i32$1 | 0, $14 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      i64toi32_i32$1 = 1073610752;
      $7 = __getf2($13 | 0, i64toi32_i32$3 | 0, $14 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$4 = $6;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 416 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 420 | 0) >> 2] | 0;
      $320$hi = i64toi32_i32$2;
      i64toi32_i32$2 = i64toi32_i32$3;
      $7 = ($7 | 0) > (-1 | 0);
      i64toi32_i32$0 = $7;
      i64toi32_i32$2 = $320$hi;
      $131 = i64toi32_i32$1;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$3 = i64toi32_i32$0 ? $131 : $13;
      i64toi32_i32$4 = i64toi32_i32$0 ? i64toi32_i32$2 : i64toi32_i32$1;
      $325 = i64toi32_i32$3;
      $325$hi = i64toi32_i32$4;
      i64toi32_i32$0 = ($6 + 416 | 0) + 8 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $329$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $14$hi;
      i64toi32_i32$2 = $7;
      i64toi32_i32$3 = $329$hi;
      $132 = i64toi32_i32$4;
      i64toi32_i32$4 = $14$hi;
      i64toi32_i32$1 = i64toi32_i32$2 ? $132 : $14;
      i64toi32_i32$0 = i64toi32_i32$2 ? i64toi32_i32$3 : i64toi32_i32$4;
      $332 = i64toi32_i32$1;
      $332$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$2 = $325$hi;
      i64toi32_i32$4 = $332$hi;
      __addtf3($6 + 400 | 0 | 0, $13 | 0, i64toi32_i32$0 | 0, $14 | 0, i64toi32_i32$1 | 0, $325 | 0, i64toi32_i32$2 | 0, $332 | 0, i64toi32_i32$4 | 0);
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$1 = $17;
      i64toi32_i32$2 = -1;
      i64toi32_i32$0 = -1;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $17 = i64toi32_i32$3;
      $17$hi = i64toi32_i32$5;
      i64toi32_i32$4 = ($6 + 400 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
      $14 = i64toi32_i32$5;
      $14$hi = i64toi32_i32$1;
      i64toi32_i32$4 = $6;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 400 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 404 | 0) >> 2] | 0;
      $13 = i64toi32_i32$1;
      $13$hi = i64toi32_i32$5;
      $12 = $12 << 1 | 0 | $7 | 0;
      if (($12 | 0) > (-1 | 0)) {
       continue label$37
      }
      break label$37;
     };
    }
    label$38 : {
     label$39 : {
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$1 = $3;
      i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
      $349$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$4 = $17;
      i64toi32_i32$1 = $349$hi;
      i64toi32_i32$0 = $3;
      i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
      i64toi32_i32$3 = (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$1 | 0;
      i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$2;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = 32;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $9 = i64toi32_i32$1;
      $9$hi = i64toi32_i32$2;
      $7 = i64toi32_i32$1;
      $357 = (i64toi32_i32$1 | 0) > (0 | 0) ? i64toi32_i32$1 : 0;
      $358 = $2;
      i64toi32_i32$2 = 0;
      $361$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $9$hi;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$5 = $361$hi;
      i64toi32_i32$0 = $2;
      if ((i64toi32_i32$2 | 0) < (i64toi32_i32$5 | 0)) {
       $127 = 1
      } else {
       if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$5 | 0)) {
        if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
         $128 = 0
        } else {
         $128 = 1
        }
        $130 = $128;
       } else {
        $130 = 0
       }
       $127 = $130;
      }
      $7 = $127 ? $357 : $358;
      if (($7 | 0) < (113 | 0)) {
       break label$39
      }
      __floatsitf($6 + 384 | 0 | 0, $4 | 0);
      i64toi32_i32$0 = $6 + 392 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $9 = i64toi32_i32$3;
      $9$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      $11 = 0;
      $11$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $6;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 384 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 388 | 0) >> 2] | 0;
      $15 = i64toi32_i32$2;
      $15$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      $20 = 0;
      $20$hi = i64toi32_i32$3;
      break label$38;
     }
     __extenddftf2($6 + 352 | 0 | 0, +(+scalbn(+(1.0), 144 - $7 | 0 | 0)));
     __floatsitf($6 + 336 | 0 | 0, $4 | 0);
     i64toi32_i32$0 = $6;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 352 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 356 | 0) >> 2] | 0;
     $385 = i64toi32_i32$3;
     $385$hi = i64toi32_i32$2;
     i64toi32_i32$0 = (i64toi32_i32$0 + 352 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $389 = i64toi32_i32$2;
     $389$hi = i64toi32_i32$3;
     i64toi32_i32$0 = $6;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 336 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 340 | 0) >> 2] | 0;
     $15 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$2;
     i64toi32_i32$0 = (i64toi32_i32$0 + 336 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $9 = i64toi32_i32$2;
     $9$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $385$hi;
     i64toi32_i32$2 = $389$hi;
     i64toi32_i32$0 = $15$hi;
     i64toi32_i32$5 = $9$hi;
     copysignl($6 + 368 | 0 | 0, $385 | 0, i64toi32_i32$3 | 0, $389 | 0, i64toi32_i32$2 | 0, $15 | 0, i64toi32_i32$0 | 0, $9 | 0, i64toi32_i32$5 | 0);
     i64toi32_i32$2 = ($6 + 368 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $20 = i64toi32_i32$5;
     $20$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $6;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 368 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 372 | 0) >> 2] | 0;
     $11 = i64toi32_i32$0;
     $11$hi = i64toi32_i32$5;
    }
    i64toi32_i32$5 = $13$hi;
    i64toi32_i32$5 = $14$hi;
    i64toi32_i32$5 = $13$hi;
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    $7 = (($7 | 0) < (32 | 0) & (__letf2($13 | 0, i64toi32_i32$5 | 0, $14 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0 | 0) != (0 | 0) | 0) & !($12 & 1 | 0) | 0;
    __floatunsitf($6 + 320 | 0 | 0, $12 + $7 | 0 | 0);
    i64toi32_i32$3 = $15$hi;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$0 = $6;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 320 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 324 | 0) >> 2] | 0;
    $425 = i64toi32_i32$3;
    $425$hi = i64toi32_i32$2;
    i64toi32_i32$0 = (i64toi32_i32$0 + 320 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $429 = i64toi32_i32$2;
    $429$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $15$hi;
    i64toi32_i32$2 = $9$hi;
    i64toi32_i32$0 = $425$hi;
    i64toi32_i32$5 = $429$hi;
    __multf3($6 + 304 | 0 | 0, $15 | 0, i64toi32_i32$3 | 0, $9 | 0, i64toi32_i32$2 | 0, $425 | 0, i64toi32_i32$0 | 0, $429 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$2 = $6;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 304 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 308 | 0) >> 2] | 0;
    $433 = i64toi32_i32$5;
    $433$hi = i64toi32_i32$0;
    i64toi32_i32$2 = (i64toi32_i32$2 + 304 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $437 = i64toi32_i32$0;
    $437$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$5 = $433$hi;
    i64toi32_i32$0 = $437$hi;
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$3 = $20$hi;
    __addtf3($6 + 272 | 0 | 0, $433 | 0, i64toi32_i32$5 | 0, $437 | 0, i64toi32_i32$0 | 0, $11 | 0, i64toi32_i32$2 | 0, $20 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = $15$hi;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$3 = $13$hi;
    i64toi32_i32$4 = $7;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = $13$hi;
    i64toi32_i32$5 = i64toi32_i32$4 ? 0 : $13;
    i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$3 : i64toi32_i32$2;
    $446 = i64toi32_i32$5;
    $446$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$4;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = $14$hi;
    i64toi32_i32$2 = i64toi32_i32$3 ? 0 : $14;
    i64toi32_i32$4 = i64toi32_i32$3 ? i64toi32_i32$0 : i64toi32_i32$5;
    $449 = i64toi32_i32$2;
    $449$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $15$hi;
    i64toi32_i32$2 = $9$hi;
    i64toi32_i32$3 = $446$hi;
    i64toi32_i32$5 = $449$hi;
    __multf3($6 + 288 | 0 | 0, $15 | 0, i64toi32_i32$4 | 0, $9 | 0, i64toi32_i32$2 | 0, $446 | 0, i64toi32_i32$3 | 0, $449 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$2 = $6;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 288 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 292 | 0) >> 2] | 0;
    $453 = i64toi32_i32$5;
    $453$hi = i64toi32_i32$3;
    i64toi32_i32$2 = (i64toi32_i32$2 + 288 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $457 = i64toi32_i32$3;
    $457$hi = i64toi32_i32$5;
    i64toi32_i32$2 = $6;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 272 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 276 | 0) >> 2] | 0;
    $459 = i64toi32_i32$5;
    $459$hi = i64toi32_i32$3;
    i64toi32_i32$2 = (i64toi32_i32$2 + 272 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $463 = i64toi32_i32$3;
    $463$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $453$hi;
    i64toi32_i32$3 = $457$hi;
    i64toi32_i32$2 = $459$hi;
    i64toi32_i32$4 = $463$hi;
    __addtf3($6 + 256 | 0 | 0, $453 | 0, i64toi32_i32$5 | 0, $457 | 0, i64toi32_i32$3 | 0, $459 | 0, i64toi32_i32$2 | 0, $463 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$3 = $6;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 256 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 260 | 0) >> 2] | 0;
    $467 = i64toi32_i32$4;
    $467$hi = i64toi32_i32$2;
    i64toi32_i32$3 = (i64toi32_i32$3 + 256 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $471 = i64toi32_i32$2;
    $471$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $11$hi;
    i64toi32_i32$4 = $20$hi;
    i64toi32_i32$4 = $467$hi;
    i64toi32_i32$2 = $471$hi;
    i64toi32_i32$3 = $11$hi;
    i64toi32_i32$5 = $20$hi;
    __subtf3($6 + 240 | 0 | 0, $467 | 0, i64toi32_i32$4 | 0, $471 | 0, i64toi32_i32$2 | 0, $11 | 0, i64toi32_i32$3 | 0, $20 | 0, i64toi32_i32$5 | 0);
    label$40 : {
     i64toi32_i32$2 = $6;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 240 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 244 | 0) >> 2] | 0;
     $13 = i64toi32_i32$5;
     $13$hi = i64toi32_i32$3;
     i64toi32_i32$2 = (i64toi32_i32$2 + 240 | 0) + 8 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $14 = i64toi32_i32$3;
     $14$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$3 = $14$hi;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = 0;
     if (__letf2($13 | 0, i64toi32_i32$5 | 0, $14 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0) | 0) {
      break label$40
     }
     (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    i64toi32_i32$4 = $13$hi;
    i64toi32_i32$4 = $14$hi;
    i64toi32_i32$4 = $17$hi;
    i64toi32_i32$4 = $13$hi;
    i64toi32_i32$2 = $14$hi;
    scalbnl($6 + 224 | 0 | 0, $13 | 0, i64toi32_i32$4 | 0, $14 | 0, i64toi32_i32$2 | 0, $17 | 0);
    i64toi32_i32$3 = ($6 + 224 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $17 = i64toi32_i32$2;
    $17$hi = i64toi32_i32$4;
    i64toi32_i32$3 = $6;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 224 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 228 | 0) >> 2] | 0;
    $13 = i64toi32_i32$4;
    $13$hi = i64toi32_i32$2;
    break label$21;
   }
   (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   __floatsitf($6 + 208 | 0 | 0, $4 | 0);
   i64toi32_i32$3 = $6;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 208 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 212 | 0) >> 2] | 0;
   $503 = i64toi32_i32$2;
   $503$hi = i64toi32_i32$4;
   i64toi32_i32$3 = (i64toi32_i32$3 + 208 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   $507 = i64toi32_i32$4;
   $507$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $503$hi;
   i64toi32_i32$4 = $507$hi;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 65536;
   __multf3($6 + 192 | 0 | 0, $503 | 0, i64toi32_i32$2 | 0, $507 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0);
   i64toi32_i32$4 = $6;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 192 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 196 | 0) >> 2] | 0;
   $511 = i64toi32_i32$5;
   $511$hi = i64toi32_i32$3;
   i64toi32_i32$4 = (i64toi32_i32$4 + 192 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $515 = i64toi32_i32$3;
   $515$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $511$hi;
   i64toi32_i32$3 = $515$hi;
   i64toi32_i32$4 = 0;
   i64toi32_i32$2 = 65536;
   __multf3($6 + 176 | 0 | 0, $511 | 0, i64toi32_i32$5 | 0, $515 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0);
   i64toi32_i32$3 = ($6 + 176 | 0) + 8 | 0;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   $17 = i64toi32_i32$2;
   $17$hi = i64toi32_i32$4;
   i64toi32_i32$3 = $6;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 176 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 180 | 0) >> 2] | 0;
   $13 = i64toi32_i32$4;
   $13$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $13$hi;
  i64toi32_i32$4 = $0;
  HEAP32[i64toi32_i32$4 >> 2] = $13;
  HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $17$hi;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $17;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$2;
  __stack_pointer = $6 + 432 | 0;
 }
 
 function decfloat($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, $7 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $11$hi = 0, $11 = 0, $15 = 0, $16$hi = 0, i64toi32_i32$4 = 0, $16 = 0, $8 = 0, $14 = 0, $12 = 0, $17 = 0, $21$hi = 0, $18 = 0, $20$hi = 0, $21 = 0, $20 = 0, $13 = 0, $9 = 0, $19 = 0, $22$hi = 0, $23$hi = 0, $22 = 0, $23 = 0, $10 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $24 = 0.0, $126 = 0, $232 = 0, $232$hi = 0, $236 = 0, $236$hi = 0, $238 = 0, $238$hi = 0, $242 = 0, $242$hi = 0, $252$hi = 0, $261 = 0, $261$hi = 0, $265 = 0, $265$hi = 0, $269 = 0, $269$hi = 0, $273 = 0, $273$hi = 0, $283 = 0, $283$hi = 0, $292 = 0, $292$hi = 0, $296 = 0, $296$hi = 0, $300 = 0, $300$hi = 0, $304 = 0, $304$hi = 0, $353 = 0, $353$hi = 0, $357 = 0, $357$hi = 0, $359 = 0, $359$hi = 0, $363 = 0, $363$hi = 0, $382 = 0, $382$hi = 0, $386 = 0, $386$hi = 0, $388 = 0, $388$hi = 0, $392 = 0, $392$hi = 0, $403 = 0, $403$hi = 0, $407 = 0, $407$hi = 0, $409 = 0, $409$hi = 0, $413 = 0, $413$hi = 0, $441 = 0, $441$hi = 0, $445 = 0, $445$hi = 0, $447 = 0, $447$hi = 0, $451 = 0, $451$hi = 0, $461 = 0, $461$hi = 0, $465 = 0, $465$hi = 0, $467 = 0, $467$hi = 0, $471 = 0, $471$hi = 0, $510 = 0, $588$hi = 0, $590$hi = 0, $598 = 0, $598$hi = 0, $739 = 0, $739$hi = 0, $743 = 0, $743$hi = 0, $745 = 0, $745$hi = 0, $749 = 0, $749$hi = 0, $768 = 0, $768$hi = 0, $772 = 0, $772$hi = 0, $814 = 0, $875 = 0, $875$hi = 0, $879 = 0, $879$hi = 0, $898 = 0, $898$hi = 0, $902 = 0, $902$hi = 0, $920 = 0, $920$hi = 0, $924 = 0, $924$hi = 0, $961 = 0, $961$hi = 0, $965 = 0, $965$hi = 0, $984 = 0, $984$hi = 0, $988 = 0, $988$hi = 0, $1011 = 0, $1011$hi = 0, $1015 = 0, $1015$hi = 0, $1031 = 0, $1031$hi = 0, $1035 = 0, $1035$hi = 0, $1049 = 0, $1049$hi = 0, $1053 = 0, $1053$hi = 0, $1074 = 0, $1074$hi = 0, $1078 = 0, $1078$hi = 0, $1101 = 0, $1101$hi = 0, $1105 = 0, $1105$hi = 0, $1110$hi = 0, $181 = 0, $1117$hi = 0, $182 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7 = __stack_pointer - 8976 | 0;
  __stack_pointer = $7;
  $8 = 0;
  $9 = 0 - $4 | 0;
  $10 = $9 - $3 | 0;
  i64toi32_i32$0 = 0;
  $11 = 0;
  $11$hi = i64toi32_i32$0;
  $12 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : while (1) {
      label$5 : {
       if (($2 | 0) == (48 | 0)) {
        break label$5
       }
       if (($2 | 0) != (46 | 0)) {
        break label$1
       }
       $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       if (($2 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$3
       }
       HEAP32[($1 + 4 | 0) >> 2] = $2 + 1 | 0;
       $2 = HEAPU8[$2 >> 0] | 0;
       break label$2;
      }
      label$6 : {
       $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       if (($2 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$6
       }
       $12 = 1;
       HEAP32[($1 + 4 | 0) >> 2] = $2 + 1 | 0;
       $2 = HEAPU8[$2 >> 0] | 0;
       continue label$4;
      }
      $12 = 1;
      $2 = __shgetc($1 | 0) | 0;
      continue label$4;
     };
    }
    $2 = __shgetc($1 | 0) | 0;
   }
   $8 = 1;
   i64toi32_i32$0 = 0;
   $11 = 0;
   $11$hi = i64toi32_i32$0;
   if (($2 | 0) != (48 | 0)) {
    break label$1
   }
   label$7 : while (1) {
    label$8 : {
     label$9 : {
      $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
      if (($2 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
       break label$9
      }
      HEAP32[($1 + 4 | 0) >> 2] = $2 + 1 | 0;
      $2 = HEAPU8[$2 >> 0] | 0;
      break label$8;
     }
     $2 = __shgetc($1 | 0) | 0;
    }
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$2 = $11;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $11 = i64toi32_i32$4;
    $11$hi = i64toi32_i32$5;
    if (($2 | 0) == (48 | 0)) {
     continue label$7
    }
    break label$7;
   };
   $12 = 1;
   $8 = 1;
  }
  $13 = 0;
  HEAP32[($7 + 784 | 0) >> 2] = 0;
  $14 = $2 + -48 | 0;
  label$10 : {
   label$11 : {
    label$12 : {
     label$13 : {
      label$14 : {
       label$15 : {
        label$16 : {
         $15 = ($2 | 0) == (46 | 0);
         if ($15) {
          break label$16
         }
         i64toi32_i32$5 = 0;
         $16 = 0;
         $16$hi = i64toi32_i32$5;
         if ($14 >>> 0 <= 9 >>> 0) {
          break label$16
         }
         $17 = 0;
         $18 = 0;
         break label$15;
        }
        i64toi32_i32$5 = 0;
        $16 = 0;
        $16$hi = i64toi32_i32$5;
        $18 = 0;
        $17 = 0;
        $13 = 0;
        label$17 : while (1) {
         label$18 : {
          label$19 : {
           if (!($15 & 1 | 0)) {
            break label$19
           }
           label$20 : {
            if ($8) {
             break label$20
            }
            i64toi32_i32$5 = $16$hi;
            $11 = $16;
            $11$hi = i64toi32_i32$5;
            $8 = 1;
            break label$18;
           }
           $15 = !$12;
           break label$14;
          }
          i64toi32_i32$5 = $16$hi;
          i64toi32_i32$0 = $16;
          i64toi32_i32$2 = 0;
          i64toi32_i32$3 = 1;
          i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
          i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
          if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
          }
          $16 = i64toi32_i32$1;
          $16$hi = i64toi32_i32$4;
          label$21 : {
           if (($17 | 0) > (2044 | 0)) {
            break label$21
           }
           $12 = ($2 | 0) == (48 | 0);
           i64toi32_i32$4 = $16$hi;
           $19 = $16;
           $15 = ($7 + 784 | 0) + ($17 << 2 | 0) | 0;
           label$22 : {
            if (!$18) {
             break label$22
            }
            $14 = ($2 + Math_imul(HEAP32[$15 >> 2] | 0, 10) | 0) + -48 | 0;
           }
           $13 = $12 ? $13 : $19;
           HEAP32[$15 >> 2] = $14;
           $12 = 1;
           $2 = $18 + 1 | 0;
           $126 = $2;
           $2 = ($2 | 0) == (9 | 0);
           $18 = $2 ? 0 : $126;
           $17 = $17 + $2 | 0;
           break label$18;
          }
          if (($2 | 0) == (48 | 0)) {
           break label$18
          }
          HEAP32[($7 + 8960 | 0) >> 2] = HEAP32[($7 + 8960 | 0) >> 2] | 0 | 1 | 0;
          $13 = 18396;
         }
         label$23 : {
          label$24 : {
           $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
           if (($2 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
            break label$24
           }
           HEAP32[($1 + 4 | 0) >> 2] = $2 + 1 | 0;
           $2 = HEAPU8[$2 >> 0] | 0;
           break label$23;
          }
          $2 = __shgetc($1 | 0) | 0;
         }
         $14 = $2 + -48 | 0;
         $15 = ($2 | 0) == (46 | 0);
         if ($15) {
          continue label$17
         }
         if ($14 >>> 0 < 10 >>> 0) {
          continue label$17
         }
         break label$17;
        };
       }
       i64toi32_i32$4 = $11$hi;
       i64toi32_i32$4 = $16$hi;
       i64toi32_i32$2 = $8;
       i64toi32_i32$4 = $11$hi;
       i64toi32_i32$0 = $16$hi;
       i64toi32_i32$3 = i64toi32_i32$2 ? $11 : $16;
       i64toi32_i32$5 = i64toi32_i32$2 ? i64toi32_i32$4 : i64toi32_i32$0;
       $11 = i64toi32_i32$3;
       $11$hi = i64toi32_i32$5;
       label$25 : {
        if (!$12) {
         break label$25
        }
        if (($2 & -33 | 0 | 0) != (69 | 0)) {
         break label$25
        }
        label$26 : {
         i64toi32_i32$5 = scanexp($1 | 0, $6 | 0) | 0;
         i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
         $20 = i64toi32_i32$5;
         $20$hi = i64toi32_i32$3;
         i64toi32_i32$2 = i64toi32_i32$5;
         i64toi32_i32$5 = -2147483648;
         i64toi32_i32$0 = 0;
         if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
          break label$26
         }
         if (!$6) {
          break label$12
         }
         i64toi32_i32$2 = 0;
         $20 = 0;
         $20$hi = i64toi32_i32$2;
         i64toi32_i32$0 = $1;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 112 | 0) >> 2] | 0;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 116 | 0) >> 2] | 0;
         i64toi32_i32$0 = i64toi32_i32$2;
         i64toi32_i32$2 = 0;
         i64toi32_i32$5 = 0;
         if ((i64toi32_i32$3 | 0) < (i64toi32_i32$2 | 0)) {
          $165 = 1
         } else {
          if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$2 | 0)) {
           if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$5 >>> 0) {
            $166 = 0
           } else {
            $166 = 1
           }
           $167 = $166;
          } else {
           $167 = 0
          }
          $165 = $167;
         }
         if ($165) {
          break label$26
         }
         HEAP32[($1 + 4 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
        }
        i64toi32_i32$0 = $20$hi;
        i64toi32_i32$0 = $11$hi;
        i64toi32_i32$0 = $20$hi;
        i64toi32_i32$5 = $20;
        i64toi32_i32$3 = $11$hi;
        i64toi32_i32$2 = $11;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        $11 = i64toi32_i32$4;
        $11$hi = i64toi32_i32$1;
        break label$11;
       }
       $15 = !$12;
       if (($2 | 0) < (0 | 0)) {
        break label$13
       }
      }
      i64toi32_i32$0 = $1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 112 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 116 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$5 | 0) < (i64toi32_i32$1 | 0)) {
       $168 = 1
      } else {
       if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$2 >>> 0) {
         $169 = 0
        } else {
         $169 = 1
        }
        $170 = $169;
       } else {
        $170 = 0
       }
       $168 = $170;
      }
      if ($168) {
       break label$13
      }
      HEAP32[($1 + 4 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
     }
     if (!$15) {
      break label$11
     }
     (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 28), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    i64toi32_i32$0 = 0;
    $16 = 0;
    $16$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    __shlim($1 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$0 = 0;
    $11 = 0;
    $11$hi = i64toi32_i32$0;
    break label$10;
   }
   label$27 : {
    $1 = HEAP32[($7 + 784 | 0) >> 2] | 0;
    if ($1) {
     break label$27
    }
    __extenddftf2($7 | 0, +(+($5 | 0) * 0.0));
    i64toi32_i32$2 = $7 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $11 = i64toi32_i32$0;
    $11$hi = i64toi32_i32$5;
    i64toi32_i32$2 = $7;
    i64toi32_i32$5 = HEAP32[$7 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($7 + 4 | 0) >> 2] | 0;
    $16 = i64toi32_i32$5;
    $16$hi = i64toi32_i32$0;
    break label$10;
   }
   label$28 : {
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$2 = $16;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 9;
    if ((i64toi32_i32$0 | 0) > (i64toi32_i32$5 | 0)) {
     $171 = 1
    } else {
     if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$5 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$1 >>> 0) {
       $172 = 0
      } else {
       $172 = 1
      }
      $173 = $172;
     } else {
      $173 = 0
     }
     $171 = $173;
    }
    if ($171) {
     break label$28
    }
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$2 = $16$hi;
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$1 = $11;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$5 = $16;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0) {
     break label$28
    }
    label$29 : {
     if (($3 | 0) > (30 | 0)) {
      break label$29
     }
     if ($1 >>> $3 | 0) {
      break label$28
     }
    }
    __floatsitf($7 + 48 | 0 | 0, $5 | 0);
    __floatunsitf($7 + 32 | 0 | 0, $1 | 0);
    i64toi32_i32$5 = $7;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 48 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 52 | 0) >> 2] | 0;
    $232 = i64toi32_i32$1;
    $232$hi = i64toi32_i32$2;
    i64toi32_i32$5 = (i64toi32_i32$5 + 48 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $236 = i64toi32_i32$2;
    $236$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 32 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 36 | 0) >> 2] | 0;
    $238 = i64toi32_i32$1;
    $238$hi = i64toi32_i32$2;
    i64toi32_i32$5 = (i64toi32_i32$5 + 32 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $242 = i64toi32_i32$2;
    $242$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $232$hi;
    i64toi32_i32$2 = $236$hi;
    i64toi32_i32$5 = $238$hi;
    i64toi32_i32$0 = $242$hi;
    __multf3($7 + 16 | 0 | 0, $232 | 0, i64toi32_i32$1 | 0, $236 | 0, i64toi32_i32$2 | 0, $238 | 0, i64toi32_i32$5 | 0, $242 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$2 = ($7 + 16 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $11 = i64toi32_i32$0;
    $11$hi = i64toi32_i32$5;
    i64toi32_i32$2 = $7;
    i64toi32_i32$5 = HEAP32[($7 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($7 + 20 | 0) >> 2] | 0;
    $16 = i64toi32_i32$5;
    $16$hi = i64toi32_i32$0;
    break label$10;
   }
   label$30 : {
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$0 = 0;
    $252$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$2 = $11;
    i64toi32_i32$5 = $252$hi;
    i64toi32_i32$1 = $9 >>> 1 | 0;
    if ((i64toi32_i32$0 | 0) < (i64toi32_i32$5 | 0)) {
     $174 = 1
    } else {
     if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$5 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0) {
       $175 = 0
      } else {
       $175 = 1
      }
      $176 = $175;
     } else {
      $176 = 0
     }
     $174 = $176;
    }
    if ($174) {
     break label$30
    }
    (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    __floatsitf($7 + 96 | 0 | 0, $5 | 0);
    i64toi32_i32$1 = $7;
    i64toi32_i32$2 = HEAP32[($7 + 96 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($7 + 100 | 0) >> 2] | 0;
    $261 = i64toi32_i32$2;
    $261$hi = i64toi32_i32$0;
    i64toi32_i32$1 = ($7 + 96 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $265 = i64toi32_i32$0;
    $265$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $261$hi;
    i64toi32_i32$0 = $265$hi;
    i64toi32_i32$1 = -1;
    i64toi32_i32$5 = 2147418111;
    __multf3($7 + 80 | 0 | 0, $261 | 0, i64toi32_i32$2 | 0, $265 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$0 = $7;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 80 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 84 | 0) >> 2] | 0;
    $269 = i64toi32_i32$5;
    $269$hi = i64toi32_i32$1;
    i64toi32_i32$0 = (i64toi32_i32$0 + 80 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $273 = i64toi32_i32$1;
    $273$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $269$hi;
    i64toi32_i32$1 = $273$hi;
    i64toi32_i32$0 = -1;
    i64toi32_i32$2 = 2147418111;
    __multf3($7 + 64 | 0 | 0, $269 | 0, i64toi32_i32$5 | 0, $273 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$1 = ($7 + 64 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $11 = i64toi32_i32$2;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$1 = $7;
    i64toi32_i32$0 = HEAP32[($7 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7 + 68 | 0) >> 2] | 0;
    $16 = i64toi32_i32$0;
    $16$hi = i64toi32_i32$2;
    break label$10;
   }
   label$31 : {
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$0 = $4 + -226 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
    $283 = i64toi32_i32$0;
    $283$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$1 = $11;
    i64toi32_i32$0 = $283$hi;
    i64toi32_i32$5 = $283;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$0 | 0)) {
     $177 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       $178 = 0
      } else {
       $178 = 1
      }
      $179 = $178;
     } else {
      $179 = 0
     }
     $177 = $179;
    }
    if ($177) {
     break label$31
    }
    (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    __floatsitf($7 + 144 | 0 | 0, $5 | 0);
    i64toi32_i32$5 = $7;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 144 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 148 | 0) >> 2] | 0;
    $292 = i64toi32_i32$1;
    $292$hi = i64toi32_i32$2;
    i64toi32_i32$5 = (i64toi32_i32$5 + 144 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $296 = i64toi32_i32$2;
    $296$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $292$hi;
    i64toi32_i32$2 = $296$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 65536;
    __multf3($7 + 128 | 0 | 0, $292 | 0, i64toi32_i32$1 | 0, $296 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$2 = $7;
    i64toi32_i32$0 = HEAP32[($7 + 128 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7 + 132 | 0) >> 2] | 0;
    $300 = i64toi32_i32$0;
    $300$hi = i64toi32_i32$5;
    i64toi32_i32$2 = ($7 + 128 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $304 = i64toi32_i32$5;
    $304$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $300$hi;
    i64toi32_i32$5 = $304$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 65536;
    __multf3($7 + 112 | 0 | 0, $300 | 0, i64toi32_i32$0 | 0, $304 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$5 = ($7 + 112 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $11 = i64toi32_i32$1;
    $11$hi = i64toi32_i32$2;
    i64toi32_i32$5 = $7;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 112 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 116 | 0) >> 2] | 0;
    $16 = i64toi32_i32$2;
    $16$hi = i64toi32_i32$1;
    break label$10;
   }
   label$32 : {
    if (!$18) {
     break label$32
    }
    label$33 : {
     if (($18 | 0) > (8 | 0)) {
      break label$33
     }
     $2 = ($7 + 784 | 0) + ($17 << 2 | 0) | 0;
     $1 = HEAP32[$2 >> 2] | 0;
     label$34 : while (1) {
      $1 = Math_imul($1, 10);
      $18 = $18 + 1 | 0;
      if (($18 | 0) != (9 | 0)) {
       continue label$34
      }
      break label$34;
     };
     HEAP32[$2 >> 2] = $1;
    }
    $17 = $17 + 1 | 0;
   }
   i64toi32_i32$1 = $11$hi;
   $8 = $11;
   label$35 : {
    if (($13 | 0) >= (9 | 0)) {
     break label$35
    }
    if (($13 | 0) > ($8 | 0)) {
     break label$35
    }
    if (($8 | 0) > (17 | 0)) {
     break label$35
    }
    label$36 : {
     if (($8 | 0) != (9 | 0)) {
      break label$36
     }
     __floatsitf($7 + 192 | 0 | 0, $5 | 0);
     __floatunsitf($7 + 176 | 0 | 0, HEAP32[($7 + 784 | 0) >> 2] | 0 | 0);
     i64toi32_i32$5 = $7;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 192 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 196 | 0) >> 2] | 0;
     $353 = i64toi32_i32$1;
     $353$hi = i64toi32_i32$2;
     i64toi32_i32$5 = (i64toi32_i32$5 + 192 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $357 = i64toi32_i32$2;
     $357$hi = i64toi32_i32$1;
     i64toi32_i32$5 = $7;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 176 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 180 | 0) >> 2] | 0;
     $359 = i64toi32_i32$1;
     $359$hi = i64toi32_i32$2;
     i64toi32_i32$5 = (i64toi32_i32$5 + 176 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $363 = i64toi32_i32$2;
     $363$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $353$hi;
     i64toi32_i32$2 = $357$hi;
     i64toi32_i32$5 = $359$hi;
     i64toi32_i32$0 = $363$hi;
     __multf3($7 + 160 | 0 | 0, $353 | 0, i64toi32_i32$1 | 0, $357 | 0, i64toi32_i32$2 | 0, $359 | 0, i64toi32_i32$5 | 0, $363 | 0, i64toi32_i32$0 | 0);
     i64toi32_i32$2 = ($7 + 160 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $11 = i64toi32_i32$0;
     $11$hi = i64toi32_i32$5;
     i64toi32_i32$2 = $7;
     i64toi32_i32$5 = HEAP32[($7 + 160 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($7 + 164 | 0) >> 2] | 0;
     $16 = i64toi32_i32$5;
     $16$hi = i64toi32_i32$0;
     break label$10;
    }
    label$37 : {
     if (($8 | 0) > (8 | 0)) {
      break label$37
     }
     __floatsitf($7 + 272 | 0 | 0, $5 | 0);
     __floatunsitf($7 + 256 | 0 | 0, HEAP32[($7 + 784 | 0) >> 2] | 0 | 0);
     i64toi32_i32$2 = $7;
     i64toi32_i32$0 = HEAP32[($7 + 272 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[($7 + 276 | 0) >> 2] | 0;
     $382 = i64toi32_i32$0;
     $382$hi = i64toi32_i32$5;
     i64toi32_i32$2 = ($7 + 272 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $386 = i64toi32_i32$5;
     $386$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $7;
     i64toi32_i32$0 = HEAP32[($7 + 256 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[($7 + 260 | 0) >> 2] | 0;
     $388 = i64toi32_i32$0;
     $388$hi = i64toi32_i32$5;
     i64toi32_i32$2 = ($7 + 256 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $392 = i64toi32_i32$5;
     $392$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $382$hi;
     i64toi32_i32$5 = $386$hi;
     i64toi32_i32$2 = $388$hi;
     i64toi32_i32$1 = $392$hi;
     __multf3($7 + 240 | 0 | 0, $382 | 0, i64toi32_i32$0 | 0, $386 | 0, i64toi32_i32$5 | 0, $388 | 0, i64toi32_i32$2 | 0, $392 | 0, i64toi32_i32$1 | 0);
     __floatsitf($7 + 224 | 0 | 0, HEAP32[(((8 - $8 | 0) << 2 | 0) + 91264 | 0) >> 2] | 0 | 0);
     i64toi32_i32$5 = $7;
     i64toi32_i32$1 = HEAP32[($7 + 240 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7 + 244 | 0) >> 2] | 0;
     $403 = i64toi32_i32$1;
     $403$hi = i64toi32_i32$2;
     i64toi32_i32$5 = ($7 + 240 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $407 = i64toi32_i32$2;
     $407$hi = i64toi32_i32$1;
     i64toi32_i32$5 = $7;
     i64toi32_i32$1 = HEAP32[($7 + 224 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7 + 228 | 0) >> 2] | 0;
     $409 = i64toi32_i32$1;
     $409$hi = i64toi32_i32$2;
     i64toi32_i32$5 = ($7 + 224 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $413 = i64toi32_i32$2;
     $413$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $403$hi;
     i64toi32_i32$2 = $407$hi;
     i64toi32_i32$5 = $409$hi;
     i64toi32_i32$0 = $413$hi;
     __divtf3($7 + 208 | 0 | 0, $403 | 0, i64toi32_i32$1 | 0, $407 | 0, i64toi32_i32$2 | 0, $409 | 0, i64toi32_i32$5 | 0, $413 | 0, i64toi32_i32$0 | 0);
     i64toi32_i32$2 = ($7 + 208 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $11 = i64toi32_i32$0;
     $11$hi = i64toi32_i32$5;
     i64toi32_i32$2 = $7;
     i64toi32_i32$5 = HEAP32[($7 + 208 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($7 + 212 | 0) >> 2] | 0;
     $16 = i64toi32_i32$5;
     $16$hi = i64toi32_i32$0;
     break label$10;
    }
    $1 = HEAP32[($7 + 784 | 0) >> 2] | 0;
    label$38 : {
     $2 = ($3 + Math_imul($8, -3) | 0) + 27 | 0;
     if (($2 | 0) > (30 | 0)) {
      break label$38
     }
     if ($1 >>> $2 | 0) {
      break label$35
     }
    }
    __floatsitf($7 + 352 | 0 | 0, $5 | 0);
    __floatunsitf($7 + 336 | 0 | 0, $1 | 0);
    i64toi32_i32$2 = $7;
    i64toi32_i32$0 = HEAP32[($7 + 352 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7 + 356 | 0) >> 2] | 0;
    $441 = i64toi32_i32$0;
    $441$hi = i64toi32_i32$5;
    i64toi32_i32$2 = ($7 + 352 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $445 = i64toi32_i32$5;
    $445$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $7;
    i64toi32_i32$0 = HEAP32[($7 + 336 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7 + 340 | 0) >> 2] | 0;
    $447 = i64toi32_i32$0;
    $447$hi = i64toi32_i32$5;
    i64toi32_i32$2 = ($7 + 336 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $451 = i64toi32_i32$5;
    $451$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $441$hi;
    i64toi32_i32$5 = $445$hi;
    i64toi32_i32$2 = $447$hi;
    i64toi32_i32$1 = $451$hi;
    __multf3($7 + 320 | 0 | 0, $441 | 0, i64toi32_i32$0 | 0, $445 | 0, i64toi32_i32$5 | 0, $447 | 0, i64toi32_i32$2 | 0, $451 | 0, i64toi32_i32$1 | 0);
    __floatsitf($7 + 304 | 0 | 0, HEAP32[(($8 << 2 | 0) + 91224 | 0) >> 2] | 0 | 0);
    i64toi32_i32$5 = $7;
    i64toi32_i32$1 = HEAP32[($7 + 320 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7 + 324 | 0) >> 2] | 0;
    $461 = i64toi32_i32$1;
    $461$hi = i64toi32_i32$2;
    i64toi32_i32$5 = ($7 + 320 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $465 = i64toi32_i32$2;
    $465$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7;
    i64toi32_i32$1 = HEAP32[($7 + 304 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7 + 308 | 0) >> 2] | 0;
    $467 = i64toi32_i32$1;
    $467$hi = i64toi32_i32$2;
    i64toi32_i32$5 = ($7 + 304 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $471 = i64toi32_i32$2;
    $471$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $461$hi;
    i64toi32_i32$2 = $465$hi;
    i64toi32_i32$5 = $467$hi;
    i64toi32_i32$0 = $471$hi;
    __multf3($7 + 288 | 0 | 0, $461 | 0, i64toi32_i32$1 | 0, $465 | 0, i64toi32_i32$2 | 0, $467 | 0, i64toi32_i32$5 | 0, $471 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$2 = ($7 + 288 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $11 = i64toi32_i32$0;
    $11$hi = i64toi32_i32$5;
    i64toi32_i32$2 = $7;
    i64toi32_i32$5 = HEAP32[($7 + 288 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($7 + 292 | 0) >> 2] | 0;
    $16 = i64toi32_i32$5;
    $16$hi = i64toi32_i32$0;
    break label$10;
   }
   label$39 : while (1) {
    $2 = $17;
    $17 = $2 + -1 | 0;
    if (!(HEAP32[(($7 + 784 | 0) + ($17 << 2 | 0) | 0) >> 2] | 0)) {
     continue label$39
    }
    break label$39;
   };
   $18 = 0;
   label$40 : {
    label$41 : {
     $1 = ($8 | 0) % (9 | 0) | 0;
     if ($1) {
      break label$41
     }
     $15 = 0;
     break label$40;
    }
    $15 = 0;
    $6 = ($8 | 0) < (0 | 0) ? $1 + 9 | 0 : $1;
    label$42 : {
     label$43 : {
      if ($2) {
       break label$43
      }
      $2 = 0;
      break label$42;
     }
     $12 = HEAP32[(((8 - $6 | 0) << 2 | 0) + 91264 | 0) >> 2] | 0;
     $19 = (1e9 | 0) / ($12 | 0) | 0;
     $14 = 0;
     $1 = 0;
     $15 = 0;
     label$44 : while (1) {
      $17 = ($7 + 784 | 0) + ($1 << 2 | 0) | 0;
      $510 = $17;
      $17 = HEAP32[$17 >> 2] | 0;
      $13 = ($17 >>> 0) / ($12 >>> 0) | 0;
      $14 = $13 + $14 | 0;
      HEAP32[$510 >> 2] = $14;
      $14 = ($1 | 0) == ($15 | 0) & !$14 | 0;
      $15 = $14 ? ($15 + 1 | 0) & 2047 | 0 : $15;
      $8 = $14 ? $8 + -9 | 0 : $8;
      $14 = Math_imul($19, $17 - Math_imul($13, $12) | 0);
      $1 = $1 + 1 | 0;
      if (($1 | 0) != ($2 | 0)) {
       continue label$44
      }
      break label$44;
     };
     if (!$14) {
      break label$42
     }
     HEAP32[(($7 + 784 | 0) + ($2 << 2 | 0) | 0) >> 2] = $14;
     $2 = $2 + 1 | 0;
    }
    $8 = ($8 - $6 | 0) + 9 | 0;
   }
   label$45 : while (1) {
    $13 = ($7 + 784 | 0) + ($15 << 2 | 0) | 0;
    label$46 : {
     label$47 : while (1) {
      label$48 : {
       if (($8 | 0) < (36 | 0)) {
        break label$48
       }
       if (($8 | 0) != (36 | 0)) {
        break label$46
       }
       if ((HEAP32[$13 >> 2] | 0) >>> 0 >= 10384593 >>> 0) {
        break label$46
       }
      }
      $17 = $2 + 2047 | 0;
      $14 = 0;
      $12 = $2;
      label$49 : while (1) {
       $2 = $12;
       label$50 : {
        label$51 : {
         $1 = $17 & 2047 | 0;
         $12 = ($7 + 784 | 0) + ($1 << 2 | 0) | 0;
         i64toi32_i32$2 = $12;
         i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$5 = 0;
         i64toi32_i32$2 = i64toi32_i32$0;
         i64toi32_i32$0 = 0;
         i64toi32_i32$1 = 29;
         i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
          $180 = 0;
         } else {
          i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
          $180 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         }
         $588$hi = i64toi32_i32$0;
         i64toi32_i32$0 = 0;
         $590$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $588$hi;
         i64toi32_i32$5 = $180;
         i64toi32_i32$2 = $590$hi;
         i64toi32_i32$1 = $14;
         i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
         i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
         if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
         }
         $11 = i64toi32_i32$3;
         $11$hi = i64toi32_i32$4;
         i64toi32_i32$0 = i64toi32_i32$3;
         i64toi32_i32$5 = 0;
         i64toi32_i32$1 = 1000000001;
         if (i64toi32_i32$4 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0 | 0) | 0) {
          break label$51
         }
         $14 = 0;
         break label$50;
        }
        i64toi32_i32$0 = $11$hi;
        i64toi32_i32$4 = 0;
        i64toi32_i32$4 = __wasm_i64_udiv($11 | 0, i64toi32_i32$0 | 0, 1e9 | 0, i64toi32_i32$4 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $16 = i64toi32_i32$4;
        $16$hi = i64toi32_i32$0;
        i64toi32_i32$4 = 0;
        i64toi32_i32$4 = __wasm_i64_mul($16 | 0, i64toi32_i32$0 | 0, 1e9 | 0, i64toi32_i32$4 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $598 = i64toi32_i32$4;
        $598$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $11$hi;
        i64toi32_i32$1 = $11;
        i64toi32_i32$4 = $598$hi;
        i64toi32_i32$5 = $598;
        i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
        i64toi32_i32$3 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$4 | 0;
        i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
        $11 = i64toi32_i32$2;
        $11$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $16$hi;
        $14 = $16;
       }
       i64toi32_i32$3 = $11$hi;
       $17 = $11;
       HEAP32[$12 >> 2] = $11;
       $12 = ($1 | 0) != (($2 + -1 | 0) & 2047 | 0 | 0) ? $2 : ($1 | 0) == ($15 | 0) ? $2 : $11 ? $2 : $1;
       $17 = $1 + -1 | 0;
       if (($1 | 0) != ($15 | 0)) {
        continue label$49
       }
       break label$49;
      };
      $18 = $18 + -29 | 0;
      if (!$14) {
       continue label$47
      }
      break label$47;
     };
     label$52 : {
      $15 = ($15 + -1 | 0) & 2047 | 0;
      if (($15 | 0) != ($12 | 0)) {
       break label$52
      }
      $1 = ($7 + 784 | 0) + ((($12 + 2046 | 0) & 2047 | 0) << 2 | 0) | 0;
      $2 = ($12 + -1 | 0) & 2047 | 0;
      HEAP32[$1 >> 2] = HEAP32[$1 >> 2] | 0 | (HEAP32[(($7 + 784 | 0) + ($2 << 2 | 0) | 0) >> 2] | 0) | 0;
     }
     $8 = $8 + 9 | 0;
     HEAP32[(($7 + 784 | 0) + ($15 << 2 | 0) | 0) >> 2] = $14;
     continue label$45;
    }
    break label$45;
   };
   label$53 : {
    label$54 : while (1) {
     $9 = ($2 + 1 | 0) & 2047 | 0;
     $6 = ($7 + 784 | 0) + ((($2 + -1 | 0) & 2047 | 0) << 2 | 0) | 0;
     label$55 : while (1) {
      $17 = ($8 | 0) > (45 | 0) ? 9 : 1;
      label$56 : {
       label$57 : while (1) {
        $12 = $15;
        $1 = 0;
        label$58 : {
         label$59 : {
          label$60 : while (1) {
           $15 = ($1 + $12 | 0) & 2047 | 0;
           if (($15 | 0) == ($2 | 0)) {
            break label$59
           }
           $15 = HEAP32[(($7 + 784 | 0) + ($15 << 2 | 0) | 0) >> 2] | 0;
           $14 = HEAP32[(($1 << 2 | 0) + 91248 | 0) >> 2] | 0;
           if ($15 >>> 0 < $14 >>> 0) {
            break label$59
           }
           if ($15 >>> 0 > $14 >>> 0) {
            break label$58
           }
           $1 = $1 + 1 | 0;
           if (($1 | 0) != (4 | 0)) {
            continue label$60
           }
           break label$60;
          };
         }
         if (($8 | 0) != (36 | 0)) {
          break label$58
         }
         i64toi32_i32$3 = 0;
         $11 = 0;
         $11$hi = i64toi32_i32$3;
         $1 = 0;
         i64toi32_i32$3 = 0;
         $16 = 0;
         $16$hi = i64toi32_i32$3;
         label$61 : while (1) {
          label$62 : {
           $15 = ($1 + $12 | 0) & 2047 | 0;
           if (($15 | 0) != ($2 | 0)) {
            break label$62
           }
           $2 = ($2 + 1 | 0) & 2047 | 0;
           HEAP32[((($2 << 2 | 0) + ($7 + 784 | 0) | 0) + -4 | 0) >> 2] = 0;
          }
          __floatunsitf($7 + 768 | 0 | 0, HEAP32[(($7 + 784 | 0) + ($15 << 2 | 0) | 0) >> 2] | 0 | 0);
          i64toi32_i32$3 = $11$hi;
          i64toi32_i32$3 = $16$hi;
          i64toi32_i32$3 = $11$hi;
          i64toi32_i32$1 = $16$hi;
          i64toi32_i32$0 = 0;
          i64toi32_i32$5 = 1075633366;
          __multf3($7 + 752 | 0 | 0, $11 | 0, i64toi32_i32$3 | 0, $16 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0, 1342177280 | 0, i64toi32_i32$5 | 0);
          i64toi32_i32$1 = $7;
          i64toi32_i32$5 = HEAP32[($7 + 752 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[($7 + 756 | 0) >> 2] | 0;
          $739 = i64toi32_i32$5;
          $739$hi = i64toi32_i32$0;
          i64toi32_i32$1 = ($7 + 752 | 0) + 8 | 0;
          i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $743 = i64toi32_i32$0;
          $743$hi = i64toi32_i32$5;
          i64toi32_i32$1 = $7;
          i64toi32_i32$5 = HEAP32[($7 + 768 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[($7 + 772 | 0) >> 2] | 0;
          $745 = i64toi32_i32$5;
          $745$hi = i64toi32_i32$0;
          i64toi32_i32$1 = ($7 + 768 | 0) + 8 | 0;
          i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $749 = i64toi32_i32$0;
          $749$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $739$hi;
          i64toi32_i32$0 = $743$hi;
          i64toi32_i32$1 = $745$hi;
          i64toi32_i32$3 = $749$hi;
          __addtf3($7 + 736 | 0 | 0, $739 | 0, i64toi32_i32$5 | 0, $743 | 0, i64toi32_i32$0 | 0, $745 | 0, i64toi32_i32$1 | 0, $749 | 0, i64toi32_i32$3 | 0);
          i64toi32_i32$0 = ($7 + 736 | 0) + 8 | 0;
          i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
          $16 = i64toi32_i32$3;
          $16$hi = i64toi32_i32$1;
          i64toi32_i32$0 = $7;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 736 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 740 | 0) >> 2] | 0;
          $11 = i64toi32_i32$1;
          $11$hi = i64toi32_i32$3;
          $1 = $1 + 1 | 0;
          if (($1 | 0) != (4 | 0)) {
           continue label$61
          }
          break label$61;
         };
         __floatsitf($7 + 720 | 0 | 0, $5 | 0);
         i64toi32_i32$3 = $11$hi;
         i64toi32_i32$3 = $16$hi;
         i64toi32_i32$0 = $7;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 720 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 724 | 0) >> 2] | 0;
         $768 = i64toi32_i32$3;
         $768$hi = i64toi32_i32$1;
         i64toi32_i32$0 = (i64toi32_i32$0 + 720 | 0) + 8 | 0;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
         $772 = i64toi32_i32$1;
         $772$hi = i64toi32_i32$3;
         i64toi32_i32$3 = $11$hi;
         i64toi32_i32$1 = $16$hi;
         i64toi32_i32$0 = $768$hi;
         i64toi32_i32$5 = $772$hi;
         __multf3($7 + 704 | 0 | 0, $11 | 0, i64toi32_i32$3 | 0, $16 | 0, i64toi32_i32$1 | 0, $768 | 0, i64toi32_i32$0 | 0, $772 | 0, i64toi32_i32$5 | 0);
         i64toi32_i32$1 = ($7 + 704 | 0) + 8 | 0;
         i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
         $16 = i64toi32_i32$5;
         $16$hi = i64toi32_i32$0;
         i64toi32_i32$0 = 0;
         $11 = 0;
         $11$hi = i64toi32_i32$0;
         i64toi32_i32$1 = $7;
         i64toi32_i32$0 = HEAP32[($7 + 704 | 0) >> 2] | 0;
         i64toi32_i32$5 = HEAP32[($7 + 708 | 0) >> 2] | 0;
         $20 = i64toi32_i32$0;
         $20$hi = i64toi32_i32$5;
         $14 = $18 + 113 | 0;
         $1 = $14 - $4 | 0;
         $17 = ($1 | 0) < ($3 | 0);
         $15 = $17 ? (($1 | 0) > (0 | 0) ? $1 : 0) : $3;
         if (($15 | 0) <= (112 | 0)) {
          break label$56
         }
         i64toi32_i32$5 = 0;
         $21 = 0;
         $21$hi = i64toi32_i32$5;
         i64toi32_i32$5 = 0;
         $22 = 0;
         $22$hi = i64toi32_i32$5;
         i64toi32_i32$5 = 0;
         $23 = 0;
         $23$hi = i64toi32_i32$5;
         break label$53;
        }
        $18 = $17 + $18 | 0;
        $15 = $2;
        if (($12 | 0) == ($2 | 0)) {
         continue label$57
        }
        break label$57;
       };
       $13 = 1e9 >>> $17 | 0;
       $19 = (-1 << $17 | 0) ^ -1 | 0;
       $1 = 0;
       $15 = $12;
       label$63 : while (1) {
        $14 = ($7 + 784 | 0) + ($12 << 2 | 0) | 0;
        $814 = $14;
        $14 = HEAP32[$14 >> 2] | 0;
        $1 = ($14 >>> $17 | 0) + $1 | 0;
        HEAP32[$814 >> 2] = $1;
        $1 = ($12 | 0) == ($15 | 0) & !$1 | 0;
        $15 = $1 ? ($15 + 1 | 0) & 2047 | 0 : $15;
        $8 = $1 ? $8 + -9 | 0 : $8;
        $1 = Math_imul($14 & $19 | 0, $13);
        $12 = ($12 + 1 | 0) & 2047 | 0;
        if (($12 | 0) != ($2 | 0)) {
         continue label$63
        }
        break label$63;
       };
       if (!$1) {
        continue label$55
       }
       label$64 : {
        if (($9 | 0) == ($15 | 0)) {
         break label$64
        }
        HEAP32[(($7 + 784 | 0) + ($2 << 2 | 0) | 0) >> 2] = $1;
        $2 = $9;
        continue label$54;
       }
       HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 0 | 1 | 0;
       continue label$55;
      }
      break label$55;
     };
     break label$54;
    };
    __extenddftf2($7 + 656 | 0 | 0, +(+scalbn(+(1.0), 225 - $15 | 0 | 0)));
    i64toi32_i32$1 = $7;
    i64toi32_i32$5 = HEAP32[($7 + 656 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($7 + 660 | 0) >> 2] | 0;
    $875 = i64toi32_i32$5;
    $875$hi = i64toi32_i32$0;
    i64toi32_i32$1 = ($7 + 656 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $879 = i64toi32_i32$0;
    $879$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$5 = $16$hi;
    i64toi32_i32$5 = $875$hi;
    i64toi32_i32$0 = $879$hi;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$3 = $16$hi;
    copysignl($7 + 688 | 0 | 0, $875 | 0, i64toi32_i32$5 | 0, $879 | 0, i64toi32_i32$0 | 0, $20 | 0, i64toi32_i32$1 | 0, $16 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$0 = ($7 + 688 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $23 = i64toi32_i32$3;
    $23$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $7;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 688 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 692 | 0) >> 2] | 0;
    $22 = i64toi32_i32$1;
    $22$hi = i64toi32_i32$3;
    __extenddftf2(i64toi32_i32$0 + 640 | 0 | 0, +(+scalbn(+(1.0), 113 - $15 | 0 | 0)));
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$3 = $16$hi;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 640 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 644 | 0) >> 2] | 0;
    $898 = i64toi32_i32$3;
    $898$hi = i64toi32_i32$1;
    i64toi32_i32$0 = (i64toi32_i32$0 + 640 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $902 = i64toi32_i32$1;
    $902$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$0 = $898$hi;
    i64toi32_i32$5 = $902$hi;
    fmodl($7 + 672 | 0 | 0, $20 | 0, i64toi32_i32$3 | 0, $16 | 0, i64toi32_i32$1 | 0, $898 | 0, i64toi32_i32$0 | 0, $902 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$5 = i64toi32_i32$1;
    i64toi32_i32$1 = $7;
    i64toi32_i32$5 = HEAP32[($7 + 672 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($7 + 676 | 0) >> 2] | 0;
    $11 = i64toi32_i32$5;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$1 = ($7 + 672 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $21 = i64toi32_i32$0;
    $21$hi = i64toi32_i32$5;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $21$hi;
    __subtf3($7 + 624 | 0 | 0, $20 | 0, i64toi32_i32$5 | 0, $16 | 0, i64toi32_i32$0 | 0, $11 | 0, i64toi32_i32$1 | 0, $21 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = $22$hi;
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$0 = $7;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 624 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 628 | 0) >> 2] | 0;
    $920 = i64toi32_i32$3;
    $920$hi = i64toi32_i32$1;
    i64toi32_i32$0 = (i64toi32_i32$0 + 624 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $924 = i64toi32_i32$1;
    $924$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $22$hi;
    i64toi32_i32$1 = $23$hi;
    i64toi32_i32$0 = $920$hi;
    i64toi32_i32$5 = $924$hi;
    __addtf3($7 + 608 | 0 | 0, $22 | 0, i64toi32_i32$3 | 0, $23 | 0, i64toi32_i32$1 | 0, $920 | 0, i64toi32_i32$0 | 0, $924 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$1 = ($7 + 608 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $16 = i64toi32_i32$5;
    $16$hi = i64toi32_i32$0;
    i64toi32_i32$1 = $7;
    i64toi32_i32$0 = HEAP32[($7 + 608 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7 + 612 | 0) >> 2] | 0;
    $20 = i64toi32_i32$0;
    $20$hi = i64toi32_i32$5;
   }
   label$65 : {
    $8 = ($12 + 4 | 0) & 2047 | 0;
    if (($8 | 0) == ($2 | 0)) {
     break label$65
    }
    label$66 : {
     label$67 : {
      $8 = HEAP32[(($7 + 784 | 0) + ($8 << 2 | 0) | 0) >> 2] | 0;
      if ($8 >>> 0 > 499999999 >>> 0) {
       break label$67
      }
      label$68 : {
       if ($8) {
        break label$68
       }
       if ((($12 + 5 | 0) & 2047 | 0 | 0) == ($2 | 0)) {
        break label$66
       }
      }
      __extenddftf2($7 + 496 | 0 | 0, +(+($5 | 0) * .25));
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$5 = $21$hi;
      i64toi32_i32$1 = $7;
      i64toi32_i32$5 = HEAP32[($7 + 496 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($7 + 500 | 0) >> 2] | 0;
      $961 = i64toi32_i32$5;
      $961$hi = i64toi32_i32$0;
      i64toi32_i32$1 = ($7 + 496 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $965 = i64toi32_i32$0;
      $965$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$0 = $21$hi;
      i64toi32_i32$1 = $961$hi;
      i64toi32_i32$3 = $965$hi;
      __addtf3($7 + 480 | 0 | 0, $11 | 0, i64toi32_i32$5 | 0, $21 | 0, i64toi32_i32$0 | 0, $961 | 0, i64toi32_i32$1 | 0, $965 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$0 = ($7 + 480 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $21 = i64toi32_i32$3;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $7;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 480 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 484 | 0) >> 2] | 0;
      $11 = i64toi32_i32$1;
      $11$hi = i64toi32_i32$3;
      break label$66;
     }
     label$69 : {
      if (($8 | 0) == (5e8 | 0)) {
       break label$69
      }
      __extenddftf2($7 + 592 | 0 | 0, +(+($5 | 0) * .75));
      i64toi32_i32$3 = $11$hi;
      i64toi32_i32$3 = $21$hi;
      i64toi32_i32$0 = $7;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 592 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 596 | 0) >> 2] | 0;
      $984 = i64toi32_i32$3;
      $984$hi = i64toi32_i32$1;
      i64toi32_i32$0 = (i64toi32_i32$0 + 592 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $988 = i64toi32_i32$1;
      $988$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $11$hi;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$0 = $984$hi;
      i64toi32_i32$5 = $988$hi;
      __addtf3($7 + 576 | 0 | 0, $11 | 0, i64toi32_i32$3 | 0, $21 | 0, i64toi32_i32$1 | 0, $984 | 0, i64toi32_i32$0 | 0, $988 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$1 = ($7 + 576 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $21 = i64toi32_i32$5;
      $21$hi = i64toi32_i32$0;
      i64toi32_i32$1 = $7;
      i64toi32_i32$0 = HEAP32[($7 + 576 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[($7 + 580 | 0) >> 2] | 0;
      $11 = i64toi32_i32$0;
      $11$hi = i64toi32_i32$5;
      break label$66;
     }
     $24 = +($5 | 0);
     label$70 : {
      if ((($12 + 5 | 0) & 2047 | 0 | 0) != ($2 | 0)) {
       break label$70
      }
      __extenddftf2($7 + 528 | 0 | 0, +($24 * .5));
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$5 = $21$hi;
      i64toi32_i32$1 = $7;
      i64toi32_i32$5 = HEAP32[($7 + 528 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($7 + 532 | 0) >> 2] | 0;
      $1011 = i64toi32_i32$5;
      $1011$hi = i64toi32_i32$0;
      i64toi32_i32$1 = ($7 + 528 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $1015 = i64toi32_i32$0;
      $1015$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$0 = $21$hi;
      i64toi32_i32$1 = $1011$hi;
      i64toi32_i32$3 = $1015$hi;
      __addtf3($7 + 512 | 0 | 0, $11 | 0, i64toi32_i32$5 | 0, $21 | 0, i64toi32_i32$0 | 0, $1011 | 0, i64toi32_i32$1 | 0, $1015 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$0 = ($7 + 512 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $21 = i64toi32_i32$3;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $7;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 512 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 516 | 0) >> 2] | 0;
      $11 = i64toi32_i32$1;
      $11$hi = i64toi32_i32$3;
      break label$66;
     }
     __extenddftf2($7 + 560 | 0 | 0, +($24 * .75));
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$0 = $7;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 560 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 564 | 0) >> 2] | 0;
     $1031 = i64toi32_i32$3;
     $1031$hi = i64toi32_i32$1;
     i64toi32_i32$0 = (i64toi32_i32$0 + 560 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $1035 = i64toi32_i32$1;
     $1035$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$0 = $1031$hi;
     i64toi32_i32$5 = $1035$hi;
     __addtf3($7 + 544 | 0 | 0, $11 | 0, i64toi32_i32$3 | 0, $21 | 0, i64toi32_i32$1 | 0, $1031 | 0, i64toi32_i32$0 | 0, $1035 | 0, i64toi32_i32$5 | 0);
     i64toi32_i32$1 = ($7 + 544 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $21 = i64toi32_i32$5;
     $21$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $7;
     i64toi32_i32$0 = HEAP32[($7 + 544 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[($7 + 548 | 0) >> 2] | 0;
     $11 = i64toi32_i32$0;
     $11$hi = i64toi32_i32$5;
    }
    if (($15 | 0) > (111 | 0)) {
     break label$65
    }
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$5 = $21$hi;
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$0 = $21$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 1073676288;
    fmodl($7 + 464 | 0 | 0, $11 | 0, i64toi32_i32$5 | 0, $21 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$0 = $7;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 464 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 468 | 0) >> 2] | 0;
    $1049 = i64toi32_i32$3;
    $1049$hi = i64toi32_i32$1;
    i64toi32_i32$0 = (i64toi32_i32$0 + 464 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $1053 = i64toi32_i32$1;
    $1053$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $1049$hi;
    i64toi32_i32$1 = $1053$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 0;
    if (__letf2($1049 | 0, i64toi32_i32$3 | 0, $1053 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0) {
     break label$65
    }
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$5 = $21$hi;
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$0 = $21$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 1073676288;
    __addtf3($7 + 448 | 0 | 0, $11 | 0, i64toi32_i32$5 | 0, $21 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$0 = ($7 + 448 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $21 = i64toi32_i32$3;
    $21$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $7;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 448 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 452 | 0) >> 2] | 0;
    $11 = i64toi32_i32$1;
    $11$hi = i64toi32_i32$3;
   }
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$3 = $16$hi;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$3 = $21$hi;
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$1 = $16$hi;
   i64toi32_i32$0 = $11$hi;
   i64toi32_i32$5 = $21$hi;
   __addtf3($7 + 432 | 0 | 0, $20 | 0, i64toi32_i32$3 | 0, $16 | 0, i64toi32_i32$1 | 0, $11 | 0, i64toi32_i32$0 | 0, $21 | 0, i64toi32_i32$5 | 0);
   i64toi32_i32$1 = $7;
   i64toi32_i32$5 = HEAP32[($7 + 432 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($7 + 436 | 0) >> 2] | 0;
   $1074 = i64toi32_i32$5;
   $1074$hi = i64toi32_i32$0;
   i64toi32_i32$1 = ($7 + 432 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $1078 = i64toi32_i32$0;
   $1078$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $22$hi;
   i64toi32_i32$5 = $23$hi;
   i64toi32_i32$5 = $1074$hi;
   i64toi32_i32$0 = $1078$hi;
   i64toi32_i32$1 = $22$hi;
   i64toi32_i32$3 = $23$hi;
   __subtf3($7 + 416 | 0 | 0, $1074 | 0, i64toi32_i32$5 | 0, $1078 | 0, i64toi32_i32$0 | 0, $22 | 0, i64toi32_i32$1 | 0, $23 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$0 = ($7 + 416 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $16 = i64toi32_i32$3;
   $16$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $7;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 416 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 420 | 0) >> 2] | 0;
   $20 = i64toi32_i32$1;
   $20$hi = i64toi32_i32$3;
   label$71 : {
    if (($14 & 2147483647 | 0 | 0) <= ($10 + -2 | 0 | 0)) {
     break label$71
    }
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$3 = $16$hi;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$1 = $16$hi;
    fabsl($7 + 400 | 0 | 0, $20 | 0, i64toi32_i32$3 | 0, $16 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = $16$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 1073610752;
    __multf3($7 + 384 | 0 | 0, $20 | 0, i64toi32_i32$1 | 0, $16 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$3 = $7;
    i64toi32_i32$5 = HEAP32[($7 + 400 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($7 + 404 | 0) >> 2] | 0;
    $1101 = i64toi32_i32$5;
    $1101$hi = i64toi32_i32$0;
    i64toi32_i32$3 = ($7 + 400 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $1105 = i64toi32_i32$0;
    $1105$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1101$hi;
    i64toi32_i32$0 = $1105$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 1081081856;
    $2 = __getf2($1101 | 0, i64toi32_i32$5 | 0, $1105 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$0 = ($7 + 384 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $1110$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $16$hi;
    $2 = ($2 | 0) > (-1 | 0);
    i64toi32_i32$4 = $2;
    i64toi32_i32$3 = $1110$hi;
    $181 = i64toi32_i32$1;
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$5 = $2 ? $181 : $16;
    i64toi32_i32$0 = $2 ? i64toi32_i32$3 : i64toi32_i32$1;
    $16 = i64toi32_i32$5;
    $16$hi = i64toi32_i32$0;
    i64toi32_i32$4 = $7;
    i64toi32_i32$0 = HEAP32[($7 + 384 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7 + 388 | 0) >> 2] | 0;
    $1117$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$3 = $2;
    i64toi32_i32$5 = $1117$hi;
    $182 = i64toi32_i32$0;
    i64toi32_i32$0 = $20$hi;
    i64toi32_i32$1 = i64toi32_i32$3 ? $182 : $20;
    i64toi32_i32$4 = i64toi32_i32$3 ? i64toi32_i32$5 : i64toi32_i32$0;
    $20 = i64toi32_i32$1;
    $20$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $11$hi;
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$4 = $11$hi;
    i64toi32_i32$1 = $21$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 0;
    $14 = __letf2($11 | 0, $11$hi | 0, $21 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0;
    label$72 : {
     $18 = $18 + $2 | 0;
     if (($18 + 110 | 0 | 0) > ($10 | 0)) {
      break label$72
     }
     if (!(($2 ? $17 & ($15 | 0) != ($1 | 0) | 0 : $17) & ($14 | 0) != (0 | 0) | 0)) {
      break label$71
     }
    }
    (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   }
   i64toi32_i32$0 = $20$hi;
   i64toi32_i32$0 = $16$hi;
   i64toi32_i32$0 = $20$hi;
   i64toi32_i32$3 = $16$hi;
   scalbnl($7 + 368 | 0 | 0, $20 | 0, i64toi32_i32$0 | 0, $16 | 0, i64toi32_i32$3 | 0, $18 | 0);
   i64toi32_i32$1 = ($7 + 368 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $11 = i64toi32_i32$3;
   $11$hi = i64toi32_i32$0;
   i64toi32_i32$1 = $7;
   i64toi32_i32$0 = HEAP32[($7 + 368 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[($7 + 372 | 0) >> 2] | 0;
   $16 = i64toi32_i32$0;
   $16$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = $11$hi;
  i64toi32_i32$0 = $0;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $11;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $16$hi;
  HEAP32[i64toi32_i32$0 >> 2] = $16;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  __stack_pointer = $7 + 8976 | 0;
 }
 
 function scanexp($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, $3 = 0, $6$hi = 0, $5 = 0, $6 = 0, i64toi32_i32$3 = 0, $4 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $89$hi = 0, $91 = 0, $91$hi = 0, $140$hi = 0;
  label$1 : {
   label$2 : {
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if (($2 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    HEAP32[($0 + 4 | 0) >> 2] = $2 + 1 | 0;
    $3 = HEAPU8[$2 >> 0] | 0;
    break label$1;
   }
   $3 = __shgetc($0 | 0) | 0;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      switch ($3 + -43 | 0 | 0) {
      case 0:
      case 2:
       label$8 : {
        label$9 : {
         $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
         if (($2 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
          break label$9
         }
         HEAP32[($0 + 4 | 0) >> 2] = $2 + 1 | 0;
         $2 = HEAPU8[$2 >> 0] | 0;
         break label$8;
        }
        $2 = __shgetc($0 | 0) | 0;
       }
       $4 = ($3 | 0) == (45 | 0);
       $5 = $2 + -58 | 0;
       if (!$1) {
        break label$5
       }
       if ($5 >>> 0 > -11 >>> 0) {
        break label$5
       }
       i64toi32_i32$2 = $0;
       i64toi32_i32$0 = HEAP32[($0 + 112 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($0 + 116 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
        $18 = 1
       } else {
        if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
         if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $19 = 0
         } else {
          $19 = 1
         }
         $20 = $19;
        } else {
         $20 = 0
        }
        $18 = $20;
       }
       if ($18) {
        break label$4
       }
       HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) + -1 | 0;
       break label$4;
      default:
       break label$6;
      };
     }
     $5 = $3 + -58 | 0;
     $4 = 0;
     $2 = $3;
    }
    if ($5 >>> 0 < -10 >>> 0) {
     break label$4
    }
    i64toi32_i32$2 = 0;
    $6 = 0;
    $6$hi = i64toi32_i32$2;
    label$10 : {
     $5 = $2 + -48 | 0;
     if ($5 >>> 0 >= 10 >>> 0) {
      break label$10
     }
     $3 = 0;
     label$11 : while (1) {
      $3 = $2 + Math_imul($3, 10) | 0;
      label$12 : {
       label$13 : {
        $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        if (($2 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
         break label$13
        }
        HEAP32[($0 + 4 | 0) >> 2] = $2 + 1 | 0;
        $2 = HEAPU8[$2 >> 0] | 0;
        break label$12;
       }
       $2 = __shgetc($0 | 0) | 0;
      }
      $3 = $3 + -48 | 0;
      label$14 : {
       $5 = $2 + -48 | 0;
       if ($5 >>> 0 > 9 >>> 0) {
        break label$14
       }
       if (($3 | 0) < (214748364 | 0)) {
        continue label$11
       }
      }
      break label$11;
     };
     i64toi32_i32$1 = $3;
     i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
     $6 = i64toi32_i32$1;
     $6$hi = i64toi32_i32$2;
    }
    label$15 : {
     if ($5 >>> 0 >= 10 >>> 0) {
      break label$15
     }
     label$16 : while (1) {
      i64toi32_i32$2 = 0;
      $89$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $6$hi;
      i64toi32_i32$1 = 0;
      i64toi32_i32$1 = __wasm_i64_mul($6 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $91 = i64toi32_i32$1;
      $91$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $89$hi;
      i64toi32_i32$3 = $2;
      i64toi32_i32$1 = $91$hi;
      i64toi32_i32$0 = $91;
      i64toi32_i32$4 = $2 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $6 = i64toi32_i32$4;
      $6$hi = i64toi32_i32$5;
      label$17 : {
       label$18 : {
        $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        if (($2 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
         break label$18
        }
        HEAP32[($0 + 4 | 0) >> 2] = $2 + 1 | 0;
        $2 = HEAPU8[$2 >> 0] | 0;
        break label$17;
       }
       $2 = __shgetc($0 | 0) | 0;
      }
      i64toi32_i32$5 = $6$hi;
      i64toi32_i32$2 = $6;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -48;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $6 = i64toi32_i32$1;
      $6$hi = i64toi32_i32$4;
      $5 = $2 + -48 | 0;
      if ($5 >>> 0 > 9 >>> 0) {
       break label$15
      }
      i64toi32_i32$4 = $6$hi;
      i64toi32_i32$5 = $6;
      i64toi32_i32$2 = 21474836;
      i64toi32_i32$0 = 2061584302;
      if ((i64toi32_i32$4 | 0) < (i64toi32_i32$2 | 0)) {
       $21 = 1
      } else {
       if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$2 | 0)) {
        if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$0 >>> 0) {
         $22 = 0
        } else {
         $22 = 1
        }
        $23 = $22;
       } else {
        $23 = 0
       }
       $21 = $23;
      }
      if ($21) {
       continue label$16
      }
      break label$16;
     };
    }
    label$19 : {
     if ($5 >>> 0 >= 10 >>> 0) {
      break label$19
     }
     label$20 : while (1) {
      label$21 : {
       label$22 : {
        $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        if (($2 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
         break label$22
        }
        HEAP32[($0 + 4 | 0) >> 2] = $2 + 1 | 0;
        $2 = HEAPU8[$2 >> 0] | 0;
        break label$21;
       }
       $2 = __shgetc($0 | 0) | 0;
      }
      if (($2 + -48 | 0) >>> 0 < 10 >>> 0) {
       continue label$20
      }
      break label$20;
     };
    }
    label$23 : {
     i64toi32_i32$0 = $0;
     i64toi32_i32$5 = HEAP32[($0 + 112 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($0 + 116 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$4 | 0) < (i64toi32_i32$5 | 0)) {
      $24 = 1
     } else {
      if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$2 >>> 0) {
        $25 = 0
       } else {
        $25 = 1
       }
       $26 = $25;
      } else {
       $26 = 0
      }
      $24 = $26;
     }
     if ($24) {
      break label$23
     }
     HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$5 = $6;
    i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    i64toi32_i32$1 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
    $140$hi = i64toi32_i32$1;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$4 = $4;
    i64toi32_i32$1 = $140$hi;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$5 = i64toi32_i32$4 ? i64toi32_i32$3 : i64toi32_i32$5;
    i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$2;
    $6 = i64toi32_i32$5;
    $6$hi = i64toi32_i32$0;
    break label$3;
   }
   i64toi32_i32$0 = -2147483648;
   $6 = 0;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$4 = $0;
   i64toi32_i32$0 = HEAP32[($0 + 112 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[($0 + 116 | 0) >> 2] | 0;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = 0;
   if ((i64toi32_i32$5 | 0) < (i64toi32_i32$0 | 0)) {
    $27 = 1
   } else {
    if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$2 >>> 0) {
      $28 = 0
     } else {
      $28 = 1
     }
     $29 = $28;
    } else {
     $29 = 0
    }
    $27 = $29;
   }
   if ($27) {
    break label$3
   }
   HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) + -1 | 0;
   i64toi32_i32$4 = -2147483648;
   i64toi32_i32$5 = 0;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$4;
   return i64toi32_i32$5 | 0;
  }
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$4 = $6;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
  return i64toi32_i32$4 | 0;
 }
 
 function __syscall_ret($0) {
  $0 = $0 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if ($0 >>> 0 < -4095 >>> 0) {
    break label$1
   }
   (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 0 - $0 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $0 = -1;
  }
  return $0 | 0;
 }
 
 function isdigit($0) {
  $0 = $0 | 0;
  return ($0 + -48 | 0) >>> 0 < 10 >>> 0 | 0;
 }
 
 function strnlen($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = memchr($0 | 0, 0 | 0, $1 | 0) | 0;
  return ($2 ? $2 - $0 | 0 : $1) | 0;
 }
 
 function frexp($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $2 = 0, $10 = 0, $2$hi = 0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $2 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $2;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $10 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $10 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $3 = $10 & 2047 | 0;
   if (($3 | 0) == (2047 | 0)) {
    break label$1
   }
   label$2 : {
    if ($3) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($0 != 0.0) {
       break label$4
      }
      $3 = 0;
      break label$3;
     }
     $0 = +frexp(+($0 * 18446744073709551615.0), $1 | 0);
     $3 = (HEAP32[$1 >> 2] | 0) + -64 | 0;
    }
    HEAP32[$1 >> 2] = $3;
    return +$0;
   }
   HEAP32[$1 >> 2] = $3 + -1022 | 0;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2;
   i64toi32_i32$2 = -2146435073;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 1071644672;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0 = +wasm2js_scratch_load_f64();
  }
  return +$0;
 }
 
 function __vfprintf_internal($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, i64toi32_i32$0 = 0, $8 = 0, $6 = 0, $7 = 0;
  $5 = __stack_pointer - 208 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 204 | 0) >> 2] = $2;
  $6 = 0;
  memset($5 + 160 | 0 | 0, 0 | 0, 40 | 0) | 0;
  HEAP32[($5 + 200 | 0) >> 2] = HEAP32[($5 + 204 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((printf_core(0 | 0, $1 | 0, $5 + 200 | 0 | 0, $5 + 80 | 0 | 0, $5 + 160 | 0 | 0, $3 | 0, $4 | 0) | 0 | 0) >= (0 | 0)) {
     break label$2
    }
    $4 = -1;
    break label$1;
   }
   label$3 : {
    if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$3
    }
    $6 = __lockfile($0 | 0) | 0;
   }
   $7 = HEAP32[$0 >> 2] | 0;
   label$4 : {
    if ((HEAP32[($0 + 72 | 0) >> 2] | 0 | 0) > (0 | 0)) {
     break label$4
    }
    HEAP32[$0 >> 2] = $7 & -33 | 0;
   }
   label$5 : {
    label$6 : {
     label$7 : {
      label$8 : {
       if (HEAP32[($0 + 48 | 0) >> 2] | 0) {
        break label$8
       }
       HEAP32[($0 + 48 | 0) >> 2] = 80;
       HEAP32[($0 + 28 | 0) >> 2] = 0;
       i64toi32_i32$0 = 0;
       HEAP32[($0 + 16 | 0) >> 2] = 0;
       HEAP32[($0 + 20 | 0) >> 2] = i64toi32_i32$0;
       $8 = HEAP32[($0 + 44 | 0) >> 2] | 0;
       HEAP32[($0 + 44 | 0) >> 2] = $5;
       break label$7;
      }
      $8 = 0;
      if (HEAP32[($0 + 16 | 0) >> 2] | 0) {
       break label$6
      }
     }
     $2 = -1;
     if (__towrite($0 | 0) | 0) {
      break label$5
     }
    }
    $2 = printf_core($0 | 0, $1 | 0, $5 + 200 | 0 | 0, $5 + 80 | 0 | 0, $5 + 160 | 0 | 0, $3 | 0, $4 | 0) | 0;
   }
   $4 = $7 & 32 | 0;
   label$9 : {
    if (!$8) {
     break label$9
    }
    FUNCTION_TABLE[HEAP32[($0 + 36 | 0) >> 2] | 0 | 0]($0, 0, 0) | 0;
    HEAP32[($0 + 48 | 0) >> 2] = 0;
    HEAP32[($0 + 44 | 0) >> 2] = $8;
    HEAP32[($0 + 28 | 0) >> 2] = 0;
    $3 = HEAP32[($0 + 20 | 0) >> 2] | 0;
    i64toi32_i32$0 = 0;
    HEAP32[($0 + 16 | 0) >> 2] = 0;
    HEAP32[($0 + 20 | 0) >> 2] = i64toi32_i32$0;
    $2 = $3 ? $2 : -1;
   }
   $3 = HEAP32[$0 >> 2] | 0;
   HEAP32[$0 >> 2] = $3 | $4 | 0;
   $4 = $3 & 32 | 0 ? -1 : $2;
   if (!$6) {
    break label$1
   }
   __unlockfile($0 | 0);
  }
  __stack_pointer = $5 + 208 | 0;
  return $4 | 0;
 }
 
 function printf_core($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $12 = 0, $7 = 0, $15 = 0, $20 = 0, i64toi32_i32$1 = 0, $17 = 0, $18 = 0, $14 = 0, $13 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $11 = 0, $16 = 0, $19 = 0, $22 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $9 = 0, $24 = 0, $10 = 0, $25 = 0, $25$hi = 0, $21 = 0, $23 = 0, $33 = 0, $34 = 0, $35 = 0, $8 = 0, $272 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7 = __stack_pointer - 80 | 0;
  __stack_pointer = $7;
  HEAP32[($7 + 76 | 0) >> 2] = $1;
  $8 = $7 + 55 | 0;
  $9 = $7 + 56 | 0;
  $10 = 0;
  $11 = 0;
  $12 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : while (1) {
       $13 = $1;
       if (($12 | 0) > ($11 ^ 2147483647 | 0 | 0)) {
        break label$4
       }
       $11 = $12 + $11 | 0;
       $12 = $13;
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            $14 = HEAPU8[$12 >> 0] | 0;
            if (!$14) {
             break label$10
            }
            label$11 : while (1) {
             label$12 : {
              label$13 : {
               label$14 : {
                $14 = $14 & 255 | 0;
                if ($14) {
                 break label$14
                }
                $1 = $12;
                break label$13;
               }
               if (($14 | 0) != (37 | 0)) {
                break label$12
               }
               $14 = $12;
               label$15 : while (1) {
                label$16 : {
                 if ((HEAPU8[($14 + 1 | 0) >> 0] | 0 | 0) == (37 | 0)) {
                  break label$16
                 }
                 $1 = $14;
                 break label$13;
                }
                $12 = $12 + 1 | 0;
                $15 = HEAPU8[($14 + 2 | 0) >> 0] | 0;
                $1 = $14 + 2 | 0;
                $14 = $1;
                if (($15 | 0) == (37 | 0)) {
                 continue label$15
                }
                break label$15;
               };
              }
              $12 = $12 - $13 | 0;
              $14 = $11 ^ 2147483647 | 0;
              if (($12 | 0) > ($14 | 0)) {
               break label$4
              }
              label$17 : {
               if (!$0) {
                break label$17
               }
               out($0 | 0, $13 | 0, $12 | 0);
              }
              if ($12) {
               continue label$5
              }
              HEAP32[($7 + 76 | 0) >> 2] = $1;
              $12 = $1 + 1 | 0;
              $16 = -1;
              label$18 : {
               if (!(isdigit(HEAP8[($1 + 1 | 0) >> 0] | 0 | 0) | 0)) {
                break label$18
               }
               if ((HEAPU8[($1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                break label$18
               }
               $12 = $1 + 3 | 0;
               $16 = (HEAP8[($1 + 1 | 0) >> 0] | 0) + -48 | 0;
               $10 = 1;
              }
              HEAP32[($7 + 76 | 0) >> 2] = $12;
              $17 = 0;
              label$19 : {
               label$20 : {
                $18 = HEAP8[$12 >> 0] | 0;
                $1 = $18 + -32 | 0;
                if ($1 >>> 0 <= 31 >>> 0) {
                 break label$20
                }
                $15 = $12;
                break label$19;
               }
               $17 = 0;
               $15 = $12;
               $1 = 1 << $1 | 0;
               if (!($1 & 75913 | 0)) {
                break label$19
               }
               label$21 : while (1) {
                $15 = $12 + 1 | 0;
                HEAP32[($7 + 76 | 0) >> 2] = $15;
                $17 = $1 | $17 | 0;
                $18 = HEAP8[($12 + 1 | 0) >> 0] | 0;
                $1 = $18 + -32 | 0;
                if ($1 >>> 0 >= 32 >>> 0) {
                 break label$19
                }
                $12 = $15;
                $1 = 1 << $1 | 0;
                if ($1 & 75913 | 0) {
                 continue label$21
                }
                break label$21;
               };
              }
              label$22 : {
               label$23 : {
                if (($18 | 0) != (42 | 0)) {
                 break label$23
                }
                label$24 : {
                 label$25 : {
                  if (!(isdigit(HEAP8[($15 + 1 | 0) >> 0] | 0 | 0) | 0)) {
                   break label$25
                  }
                  if ((HEAPU8[($15 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                   break label$25
                  }
                  HEAP32[((((HEAP8[($15 + 1 | 0) >> 0] | 0) << 2 | 0) + $4 | 0) + -192 | 0) >> 2] = 10;
                  $18 = $15 + 3 | 0;
                  $19 = HEAP32[((((HEAP8[($15 + 1 | 0) >> 0] | 0) << 3 | 0) + $3 | 0) + -384 | 0) >> 2] | 0;
                  $10 = 1;
                  break label$24;
                 }
                 if ($10) {
                  break label$9
                 }
                 $18 = $15 + 1 | 0;
                 label$26 : {
                  if ($0) {
                   break label$26
                  }
                  HEAP32[($7 + 76 | 0) >> 2] = $18;
                  $10 = 0;
                  $19 = 0;
                  break label$22;
                 }
                 $12 = HEAP32[$2 >> 2] | 0;
                 HEAP32[$2 >> 2] = $12 + 4 | 0;
                 $19 = HEAP32[$12 >> 2] | 0;
                 $10 = 0;
                }
                HEAP32[($7 + 76 | 0) >> 2] = $18;
                if (($19 | 0) > (-1 | 0)) {
                 break label$22
                }
                $19 = 0 - $19 | 0;
                $17 = $17 | 8192 | 0;
                break label$22;
               }
               $19 = getint($7 + 76 | 0 | 0) | 0;
               if (($19 | 0) < (0 | 0)) {
                break label$4
               }
               $18 = HEAP32[($7 + 76 | 0) >> 2] | 0;
              }
              $12 = 0;
              $20 = -1;
              label$27 : {
               label$28 : {
                if ((HEAPU8[$18 >> 0] | 0 | 0) == (46 | 0)) {
                 break label$28
                }
                $1 = $18;
                $21 = 0;
                break label$27;
               }
               label$29 : {
                if ((HEAPU8[($18 + 1 | 0) >> 0] | 0 | 0) != (42 | 0)) {
                 break label$29
                }
                label$30 : {
                 label$31 : {
                  if (!(isdigit(HEAP8[($18 + 2 | 0) >> 0] | 0 | 0) | 0)) {
                   break label$31
                  }
                  if ((HEAPU8[($18 + 3 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                   break label$31
                  }
                  HEAP32[((((HEAP8[($18 + 2 | 0) >> 0] | 0) << 2 | 0) + $4 | 0) + -192 | 0) >> 2] = 10;
                  $1 = $18 + 4 | 0;
                  $20 = HEAP32[((((HEAP8[($18 + 2 | 0) >> 0] | 0) << 3 | 0) + $3 | 0) + -384 | 0) >> 2] | 0;
                  break label$30;
                 }
                 if ($10) {
                  break label$9
                 }
                 $1 = $18 + 2 | 0;
                 label$32 : {
                  if ($0) {
                   break label$32
                  }
                  $20 = 0;
                  break label$30;
                 }
                 $15 = HEAP32[$2 >> 2] | 0;
                 HEAP32[$2 >> 2] = $15 + 4 | 0;
                 $20 = HEAP32[$15 >> 2] | 0;
                }
                HEAP32[($7 + 76 | 0) >> 2] = $1;
                $21 = ($20 ^ -1 | 0) >>> 31 | 0;
                break label$27;
               }
               HEAP32[($7 + 76 | 0) >> 2] = $18 + 1 | 0;
               $21 = 1;
               $20 = getint($7 + 76 | 0 | 0) | 0;
               $1 = HEAP32[($7 + 76 | 0) >> 2] | 0;
              }
              label$33 : while (1) {
               $15 = $12;
               $22 = 28;
               $18 = $1;
               $12 = HEAP8[$18 >> 0] | 0;
               if (($12 + -123 | 0) >>> 0 < -58 >>> 0) {
                break label$3
               }
               $1 = $18 + 1 | 0;
               $12 = HEAPU8[(($12 + Math_imul($15, 58) | 0) + 91263 | 0) >> 0] | 0;
               if (($12 + -1 | 0) >>> 0 < 8 >>> 0) {
                continue label$33
               }
               break label$33;
              };
              HEAP32[($7 + 76 | 0) >> 2] = $1;
              label$34 : {
               label$35 : {
                label$36 : {
                 if (($12 | 0) == (27 | 0)) {
                  break label$36
                 }
                 if (!$12) {
                  break label$3
                 }
                 label$37 : {
                  if (($16 | 0) < (0 | 0)) {
                   break label$37
                  }
                  HEAP32[($4 + ($16 << 2 | 0) | 0) >> 2] = $12;
                  i64toi32_i32$2 = $3 + ($16 << 3 | 0) | 0;
                  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                  $272 = i64toi32_i32$0;
                  i64toi32_i32$0 = $7;
                  HEAP32[($7 + 64 | 0) >> 2] = $272;
                  HEAP32[($7 + 68 | 0) >> 2] = i64toi32_i32$1;
                  break label$35;
                 }
                 if (!$0) {
                  break label$6
                 }
                 pop_arg($7 + 64 | 0 | 0, $12 | 0, $2 | 0, $6 | 0);
                 break label$34;
                }
                if (($16 | 0) > (-1 | 0)) {
                 break label$3
                }
               }
               $12 = 0;
               if (!$0) {
                continue label$5
               }
              }
              $23 = $17 & -65537 | 0;
              $17 = $17 & 8192 | 0 ? $23 : $17;
              $16 = 0;
              $24 = 65599;
              $22 = $9;
              label$38 : {
               label$39 : {
                label$40 : {
                 label$41 : {
                  label$42 : {
                   label$43 : {
                    label$44 : {
                     label$45 : {
                      label$46 : {
                       label$47 : {
                        label$48 : {
                         label$49 : {
                          label$50 : {
                           label$51 : {
                            label$52 : {
                             label$53 : {
                              $12 = HEAP8[$18 >> 0] | 0;
                              $12 = $15 ? (($12 & 15 | 0 | 0) == (3 | 0) ? $12 & -33 | 0 : $12) : $12;
                              switch ($12 + -88 | 0 | 0) {
                              case 11:
                               break label$38;
                              case 9:
                              case 13:
                              case 14:
                              case 15:
                               break label$39;
                              case 27:
                               break label$44;
                              case 12:
                              case 17:
                               break label$47;
                              case 23:
                               break label$48;
                              case 0:
                              case 32:
                               break label$49;
                              case 24:
                               break label$50;
                              case 22:
                               break label$51;
                              case 29:
                               break label$52;
                              case 1:
                              case 2:
                              case 3:
                              case 4:
                              case 5:
                              case 6:
                              case 7:
                              case 8:
                              case 10:
                              case 16:
                              case 18:
                              case 19:
                              case 20:
                              case 21:
                              case 25:
                              case 26:
                              case 28:
                              case 30:
                              case 31:
                               break label$7;
                              default:
                               break label$53;
                              };
                             }
                             $22 = $9;
                             label$54 : {
                              switch ($12 + -65 | 0 | 0) {
                              case 0:
                              case 4:
                              case 5:
                              case 6:
                               break label$39;
                              case 2:
                               break label$42;
                              case 1:
                              case 3:
                               break label$7;
                              default:
                               break label$54;
                              };
                             }
                             if (($12 | 0) == (83 | 0)) {
                              break label$43
                             }
                             break label$8;
                            }
                            $16 = 0;
                            $24 = 65599;
                            i64toi32_i32$2 = $7;
                            i64toi32_i32$1 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                            i64toi32_i32$0 = HEAP32[($7 + 68 | 0) >> 2] | 0;
                            $25 = i64toi32_i32$1;
                            $25$hi = i64toi32_i32$0;
                            break label$46;
                           }
                           $12 = 0;
                           label$55 : {
                            switch ($15 & 255 | 0 | 0) {
                            case 0:
                             HEAP32[(HEAP32[($7 + 64 | 0) >> 2] | 0) >> 2] = $11;
                             continue label$5;
                            case 1:
                             HEAP32[(HEAP32[($7 + 64 | 0) >> 2] | 0) >> 2] = $11;
                             continue label$5;
                            case 2:
                             i64toi32_i32$1 = $11;
                             i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                             i64toi32_i32$1 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                             HEAP32[i64toi32_i32$1 >> 2] = $11;
                             HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                             continue label$5;
                            case 3:
                             HEAP16[(HEAP32[($7 + 64 | 0) >> 2] | 0) >> 1] = $11;
                             continue label$5;
                            case 4:
                             HEAP8[(HEAP32[($7 + 64 | 0) >> 2] | 0) >> 0] = $11;
                             continue label$5;
                            case 6:
                             HEAP32[(HEAP32[($7 + 64 | 0) >> 2] | 0) >> 2] = $11;
                             continue label$5;
                            case 7:
                             break label$55;
                            default:
                             continue label$5;
                            };
                           }
                           i64toi32_i32$1 = $11;
                           i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                           i64toi32_i32$1 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                           HEAP32[i64toi32_i32$1 >> 2] = $11;
                           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                           continue label$5;
                          }
                          $20 = $20 >>> 0 > 8 >>> 0 ? $20 : 8;
                          $17 = $17 | 8 | 0;
                          $12 = 120;
                         }
                         i64toi32_i32$2 = $7;
                         i64toi32_i32$0 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                         i64toi32_i32$1 = HEAP32[($7 + 68 | 0) >> 2] | 0;
                         $13 = fmt_x(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9 | 0, $12 & 32 | 0 | 0) | 0;
                         $16 = 0;
                         $24 = 65599;
                         i64toi32_i32$2 = $7;
                         i64toi32_i32$1 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                         i64toi32_i32$0 = HEAP32[($7 + 68 | 0) >> 2] | 0;
                         if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0)) {
                          break label$45
                         }
                         if (!($17 & 8 | 0)) {
                          break label$45
                         }
                         $24 = ($12 >>> 4 | 0) + 65599 | 0;
                         $16 = 2;
                         break label$45;
                        }
                        $16 = 0;
                        $24 = 65599;
                        i64toi32_i32$2 = $7;
                        i64toi32_i32$0 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                        i64toi32_i32$1 = HEAP32[($7 + 68 | 0) >> 2] | 0;
                        $13 = fmt_o(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9 | 0) | 0;
                        if (!($17 & 8 | 0)) {
                         break label$45
                        }
                        $12 = $9 - $13 | 0;
                        $20 = ($20 | 0) > ($12 | 0) ? $20 : $12 + 1 | 0;
                        break label$45;
                       }
                       label$62 : {
                        i64toi32_i32$2 = $7;
                        i64toi32_i32$1 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                        i64toi32_i32$0 = HEAP32[($7 + 68 | 0) >> 2] | 0;
                        $25 = i64toi32_i32$1;
                        $25$hi = i64toi32_i32$0;
                        i64toi32_i32$2 = i64toi32_i32$1;
                        i64toi32_i32$1 = -1;
                        i64toi32_i32$3 = -1;
                        if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
                         $33 = 1
                        } else {
                         if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
                          if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
                           $34 = 0
                          } else {
                           $34 = 1
                          }
                          $35 = $34;
                         } else {
                          $35 = 0
                         }
                         $33 = $35;
                        }
                        if ($33) {
                         break label$62
                        }
                        i64toi32_i32$2 = $25$hi;
                        i64toi32_i32$2 = 0;
                        i64toi32_i32$3 = 0;
                        i64toi32_i32$0 = $25$hi;
                        i64toi32_i32$1 = $25;
                        i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
                        i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
                        $25 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
                        $25$hi = i64toi32_i32$5;
                        i64toi32_i32$3 = $7;
                        HEAP32[($7 + 64 | 0) >> 2] = $25;
                        HEAP32[($7 + 68 | 0) >> 2] = i64toi32_i32$5;
                        $16 = 1;
                        $24 = 65599;
                        break label$46;
                       }
                       label$63 : {
                        if (!($17 & 2048 | 0)) {
                         break label$63
                        }
                        $16 = 1;
                        $24 = 65600;
                        break label$46;
                       }
                       $16 = $17 & 1 | 0;
                       $24 = $16 ? 65601 : 65599;
                      }
                      i64toi32_i32$5 = $25$hi;
                      $13 = fmt_u($25 | 0, i64toi32_i32$5 | 0, $9 | 0) | 0;
                     }
                     label$64 : {
                      if (!$21) {
                       break label$64
                      }
                      if (($20 | 0) < (0 | 0)) {
                       break label$4
                      }
                     }
                     $17 = $21 ? $17 & -65537 | 0 : $17;
                     label$65 : {
                      i64toi32_i32$2 = $7;
                      i64toi32_i32$5 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                      i64toi32_i32$3 = HEAP32[($7 + 68 | 0) >> 2] | 0;
                      $25 = i64toi32_i32$5;
                      $25$hi = i64toi32_i32$3;
                      i64toi32_i32$2 = i64toi32_i32$5;
                      i64toi32_i32$5 = 0;
                      i64toi32_i32$1 = 0;
                      if ((i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
                       break label$65
                      }
                      if ($20) {
                       break label$65
                      }
                      $13 = $9;
                      $22 = $13;
                      $20 = 0;
                      break label$7;
                     }
                     i64toi32_i32$2 = $25$hi;
                     $12 = ($9 - $13 | 0) + !($25 | i64toi32_i32$2 | 0) | 0;
                     $20 = ($20 | 0) > ($12 | 0) ? $20 : $12;
                     break label$8;
                    }
                    $12 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                    $13 = $12 ? $12 : 68188;
                    $12 = strnlen($13 | 0, ($20 >>> 0 < 2147483647 >>> 0 ? $20 : 2147483647) | 0) | 0;
                    $22 = $13 + $12 | 0;
                    label$66 : {
                     if (($20 | 0) <= (-1 | 0)) {
                      break label$66
                     }
                     $17 = $23;
                     $20 = $12;
                     break label$7;
                    }
                    $17 = $23;
                    $20 = $12;
                    if (HEAPU8[$22 >> 0] | 0) {
                     break label$4
                    }
                    break label$7;
                   }
                   label$67 : {
                    if (!$20) {
                     break label$67
                    }
                    $14 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                    break label$41;
                   }
                   $12 = 0;
                   pad($0 | 0, 32 | 0, $19 | 0, 0 | 0, $17 | 0);
                   break label$40;
                  }
                  HEAP32[($7 + 12 | 0) >> 2] = 0;
                  i64toi32_i32$1 = $7;
                  i64toi32_i32$2 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                  i64toi32_i32$3 = HEAP32[($7 + 68 | 0) >> 2] | 0;
                  HEAP32[($7 + 8 | 0) >> 2] = i64toi32_i32$2;
                  HEAP32[($7 + 64 | 0) >> 2] = $7 + 8 | 0;
                  $14 = $7 + 8 | 0;
                  $20 = -1;
                 }
                 $12 = 0;
                 label$68 : {
                  label$69 : while (1) {
                   $15 = HEAP32[$14 >> 2] | 0;
                   if (!$15) {
                    break label$68
                   }
                   label$70 : {
                    $15 = wctomb($7 + 4 | 0 | 0, $15 | 0) | 0;
                    $13 = ($15 | 0) < (0 | 0);
                    if ($13) {
                     break label$70
                    }
                    if ($15 >>> 0 > ($20 - $12 | 0) >>> 0) {
                     break label$70
                    }
                    $14 = $14 + 4 | 0;
                    $12 = $15 + $12 | 0;
                    if ($20 >>> 0 > $12 >>> 0) {
                     continue label$69
                    }
                    break label$68;
                   }
                   break label$69;
                  };
                  if ($13) {
                   break label$2
                  }
                 }
                 $22 = 61;
                 if (($12 | 0) < (0 | 0)) {
                  break label$3
                 }
                 pad($0 | 0, 32 | 0, $19 | 0, $12 | 0, $17 | 0);
                 label$71 : {
                  if ($12) {
                   break label$71
                  }
                  $12 = 0;
                  break label$40;
                 }
                 $15 = 0;
                 $14 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                 label$72 : while (1) {
                  $13 = HEAP32[$14 >> 2] | 0;
                  if (!$13) {
                   break label$40
                  }
                  $13 = wctomb($7 + 4 | 0 | 0, $13 | 0) | 0;
                  $15 = $13 + $15 | 0;
                  if ($15 >>> 0 > $12 >>> 0) {
                   break label$40
                  }
                  out($0 | 0, $7 + 4 | 0 | 0, $13 | 0);
                  $14 = $14 + 4 | 0;
                  if ($15 >>> 0 < $12 >>> 0) {
                   continue label$72
                  }
                  break label$72;
                 };
                }
                pad($0 | 0, 32 | 0, $19 | 0, $12 | 0, $17 ^ 8192 | 0 | 0);
                $12 = ($19 | 0) > ($12 | 0) ? $19 : $12;
                continue label$5;
               }
               label$73 : {
                if (!$21) {
                 break label$73
                }
                if (($20 | 0) < (0 | 0)) {
                 break label$4
                }
               }
               $22 = 61;
               $12 = FUNCTION_TABLE[$5 | 0]($0, +HEAPF64[($7 + 64 | 0) >> 3], $19, $20, $17, $12) | 0;
               if (($12 | 0) >= (0 | 0)) {
                continue label$5
               }
               break label$3;
              }
              i64toi32_i32$1 = $7;
              i64toi32_i32$3 = HEAP32[($7 + 64 | 0) >> 2] | 0;
              i64toi32_i32$2 = HEAP32[($7 + 68 | 0) >> 2] | 0;
              HEAP8[($7 + 55 | 0) >> 0] = i64toi32_i32$3;
              $20 = 1;
              $13 = $8;
              $22 = $9;
              $17 = $23;
              break label$7;
             }
             $14 = HEAPU8[($12 + 1 | 0) >> 0] | 0;
             $12 = $12 + 1 | 0;
             continue label$11;
            };
           }
           if ($0) {
            break label$1
           }
           if (!$10) {
            break label$6
           }
           $12 = 1;
           label$74 : {
            label$75 : while (1) {
             $14 = HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0;
             if (!$14) {
              break label$74
             }
             pop_arg($3 + ($12 << 3 | 0) | 0 | 0, $14 | 0, $2 | 0, $6 | 0);
             $11 = 1;
             $12 = $12 + 1 | 0;
             if (($12 | 0) != (10 | 0)) {
              continue label$75
             }
             break label$1;
            };
           }
           $11 = 1;
           if ($12 >>> 0 >= 10 >>> 0) {
            break label$1
           }
           label$76 : while (1) {
            if (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) {
             break label$9
            }
            $11 = 1;
            $12 = $12 + 1 | 0;
            if (($12 | 0) == (10 | 0)) {
             break label$1
            }
            continue label$76;
           };
          }
          $22 = 28;
          break label$3;
         }
         $22 = $9;
        }
        $18 = $22 - $13 | 0;
        $20 = ($20 | 0) > ($18 | 0) ? $20 : $18;
        if (($20 | 0) > ($16 ^ 2147483647 | 0 | 0)) {
         break label$4
        }
        $22 = 61;
        $15 = $16 + $20 | 0;
        $12 = ($19 | 0) > ($15 | 0) ? $19 : $15;
        if (($12 | 0) > ($14 | 0)) {
         break label$3
        }
        pad($0 | 0, 32 | 0, $12 | 0, $15 | 0, $17 | 0);
        out($0 | 0, $24 | 0, $16 | 0);
        pad($0 | 0, 48 | 0, $12 | 0, $15 | 0, $17 ^ 65536 | 0 | 0);
        pad($0 | 0, 48 | 0, $20 | 0, $18 | 0, 0 | 0);
        out($0 | 0, $13 | 0, $18 | 0);
        pad($0 | 0, 32 | 0, $12 | 0, $15 | 0, $17 ^ 8192 | 0 | 0);
        continue label$5;
       }
       break label$5;
      };
      $11 = 0;
      break label$1;
     }
     $22 = 61;
    }
    (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = $22), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   }
   $11 = -1;
  }
  __stack_pointer = $7 + 80 | 0;
  return $11 | 0;
 }
 
 function out($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  label$1 : {
   if ((HEAPU8[$0 >> 0] | 0) & 32 | 0) {
    break label$1
   }
   __fwritex($1 | 0, $2 | 0, $0 | 0) | 0;
  }
 }
 
 function getint($0) {
  $0 = $0 | 0;
  var $1 = 0, $3 = 0, $2 = 0;
  $1 = 0;
  label$1 : {
   if (isdigit(HEAP8[(HEAP32[$0 >> 2] | 0) >> 0] | 0 | 0) | 0) {
    break label$1
   }
   return 0 | 0;
  }
  label$2 : while (1) {
   $2 = HEAP32[$0 >> 2] | 0;
   $3 = -1;
   label$3 : {
    if ($1 >>> 0 > 214748364 >>> 0) {
     break label$3
    }
    $3 = (HEAP8[$2 >> 0] | 0) + -48 | 0;
    $1 = Math_imul($1, 10);
    $3 = ($3 | 0) > ($1 ^ 2147483647 | 0 | 0) ? -1 : $3 + $1 | 0;
   }
   HEAP32[$0 >> 2] = $2 + 1 | 0;
   $1 = $3;
   if (isdigit(HEAP8[($2 + 1 | 0) >> 0] | 0 | 0) | 0) {
    continue label$2
   }
   break label$2;
  };
  return $3 | 0;
 }
 
 function pop_arg($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $21 = 0, $29 = 0, $37 = 0, $45 = 0, $55 = 0, $63 = 0, $71 = 0, $79 = 0, $87 = 0, $97 = 0, $105 = 0, $115 = 0, $125 = 0, $133 = 0, $141 = 0;
  label$1 : {
   switch ($1 + -9 | 0 | 0) {
   case 0:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
    return;
   case 1:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $21 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $21;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 2:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$1 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$0 = 0;
    $29 = i64toi32_i32$1;
    i64toi32_i32$1 = $0;
    HEAP32[i64toi32_i32$1 >> 2] = $29;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 4:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $37 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $37;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 5:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$1 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$0 = 0;
    $45 = i64toi32_i32$1;
    i64toi32_i32$1 = $0;
    HEAP32[i64toi32_i32$1 >> 2] = $45;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 3:
    $1 = ((HEAP32[$2 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2 >> 2] = $1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    $55 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $55;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 6:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$1 = HEAP16[$1 >> 1] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $63 = i64toi32_i32$1;
    i64toi32_i32$1 = $0;
    HEAP32[i64toi32_i32$1 >> 2] = $63;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 7:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$0 = HEAPU16[$1 >> 1] | 0;
    i64toi32_i32$1 = 0;
    $71 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $71;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 8:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$1 = HEAP8[$1 >> 0] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $79 = i64toi32_i32$1;
    i64toi32_i32$1 = $0;
    HEAP32[i64toi32_i32$1 >> 2] = $79;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 9:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$0 = HEAPU8[$1 >> 0] | 0;
    i64toi32_i32$1 = 0;
    $87 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $87;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 10:
    $1 = ((HEAP32[$2 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2 >> 2] = $1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    $97 = i64toi32_i32$1;
    i64toi32_i32$1 = $0;
    HEAP32[i64toi32_i32$1 >> 2] = $97;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 11:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$1 = 0;
    $105 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $105;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 12:
    $1 = ((HEAP32[$2 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2 >> 2] = $1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    $115 = i64toi32_i32$1;
    i64toi32_i32$1 = $0;
    HEAP32[i64toi32_i32$1 >> 2] = $115;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 13:
    $1 = ((HEAP32[$2 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2 >> 2] = $1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    $125 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $125;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 14:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$1 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $133 = i64toi32_i32$1;
    i64toi32_i32$1 = $0;
    HEAP32[i64toi32_i32$1 >> 2] = $133;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 15:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$1 = 0;
    $141 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $141;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 16:
    $1 = ((HEAP32[$2 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2 >> 2] = $1 + 8 | 0;
    HEAPF64[$0 >> 3] = +HEAPF64[$1 >> 3];
    return;
   case 17:
    FUNCTION_TABLE[$3 | 0]($0, $2);
    break;
   default:
    break label$1;
   };
  }
 }
 
 function fmt_x($0, $0$hi, $1, $2) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $10 = 0, $3 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1 = $1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1 >> 0] = HEAPU8[(($0 & 15 | 0) + 91792 | 0) >> 0] | 0 | $2 | 0;
    i64toi32_i32$2 = $0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 15;
    $3 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$3 = $0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $10 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $10 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0 = $10;
    $0$hi = i64toi32_i32$0;
    if ($3) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1 | 0;
 }
 
 function fmt_o($0, $0$hi, $1) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $9 = 0, $2 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1 = $1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1 >> 0] = $0 & 7 | 0 | 48 | 0;
    i64toi32_i32$2 = $0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 7;
    $2 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$3 = $0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 3;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $9 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $9 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0 = $9;
    $0$hi = i64toi32_i32$0;
    if ($2) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1 | 0;
 }
 
 function fmt_u($0, $0$hi, $1) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3 = 0, i64toi32_i32$3 = 0, $2 = 0, i64toi32_i32$5 = 0, $2$hi = 0, $4 = 0, $16 = 0, $16$hi = 0, $5 = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$3 = 0;
    if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$2 = $0$hi;
    $2 = $0;
    $2$hi = i64toi32_i32$2;
    break label$1;
   }
   label$3 : while (1) {
    $1 = $1 + -1 | 0;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_udiv($0 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $2 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_mul($2 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $16 = i64toi32_i32$0;
    $16$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$3 = $0;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$1 = $16;
    i64toi32_i32$5 = ($0 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    HEAP8[$1 >> 0] = $0 - i64toi32_i32$1 | 0 | 48 | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = $0;
    i64toi32_i32$3 = 9;
    i64toi32_i32$1 = -1;
    $3 = $0$hi >>> 0 > i64toi32_i32$3 >>> 0 | (($0$hi | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$2 = $2$hi;
    $0 = $2;
    $0$hi = i64toi32_i32$2;
    if ($3) {
     continue label$3
    }
    break label$3;
   };
  }
  label$4 : {
   i64toi32_i32$2 = $2$hi;
   $3 = $2;
   if (!$3) {
    break label$4
   }
   label$5 : while (1) {
    $1 = $1 + -1 | 0;
    $4 = ($3 >>> 0) / (10 >>> 0) | 0;
    HEAP8[$1 >> 0] = $3 - Math_imul($4, 10) | 0 | 48 | 0;
    $5 = $3 >>> 0 > 9 >>> 0;
    $3 = $4;
    if ($5) {
     continue label$5
    }
    break label$5;
   };
  }
  return $1 | 0;
 }
 
 function pad($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 256 | 0;
  __stack_pointer = $5;
  label$1 : {
   if (($2 | 0) <= ($3 | 0)) {
    break label$1
   }
   if ($4 & 73728 | 0) {
    break label$1
   }
   $3 = $2 - $3 | 0;
   $2 = $3 >>> 0 < 256 >>> 0;
   memset($5 | 0, $1 & 255 | 0 | 0, ($2 ? $3 : 256) | 0) | 0;
   label$2 : {
    if ($2) {
     break label$2
    }
    label$3 : while (1) {
     out($0 | 0, $5 | 0, 256 | 0);
     $3 = $3 + -256 | 0;
     if ($3 >>> 0 > 255 >>> 0) {
      continue label$3
     }
     break label$3;
    };
   }
   out($0 | 0, $5 | 0, $3 | 0);
  }
  __stack_pointer = $5 + 256 | 0;
 }
 
 function vfprintf($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return __vfprintf_internal($0 | 0, $1 | 0, $2 | 0, 37 | 0, 38 | 0) | 0 | 0;
 }
 
 function fmt_fp($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $11 = 0, $12 = 0, $13 = 0, $19 = 0, $23 = 0, $6 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $16 = 0, i64toi32_i32$4 = 0, $24 = 0, $25 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $18 = 0, $21 = 0, $9 = 0, $26 = 0.0, $8 = 0, $14 = 0, $8$hi = 0, $15 = 0, $17 = 0, $10 = 0, $22 = 0, $7 = 0, $45 = 0, $46 = 0, $47 = 0, $20$hi = 0, $48 = 0, $20 = 0, $167 = 0, $169$hi = 0, $171$hi = 0, $173 = 0, $173$hi = 0, $175$hi = 0, $179 = 0, $179$hi = 0, $388 = 0.0, $852 = 0;
  $6 = __stack_pointer - 560 | 0;
  __stack_pointer = $6;
  $7 = 0;
  HEAP32[($6 + 44 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = __DOUBLE_BITS(+$1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $8 = i64toi32_i32$0;
    $8$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
     $45 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $46 = 0
      } else {
       $46 = 1
      }
      $47 = $46;
     } else {
      $47 = 0
     }
     $45 = $47;
    }
    if ($45) {
     break label$2
    }
    $9 = 1;
    $10 = 65609;
    $1 = -$1;
    i64toi32_i32$2 = __DOUBLE_BITS(+$1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $8 = i64toi32_i32$2;
    $8$hi = i64toi32_i32$1;
    break label$1;
   }
   label$3 : {
    if (!($4 & 2048 | 0)) {
     break label$3
    }
    $9 = 1;
    $10 = 65612;
    break label$1;
   }
   $9 = $4 & 1 | 0;
   $10 = $9 ? 65615 : 65610;
   $7 = !$9;
  }
  label$4 : {
   label$5 : {
    i64toi32_i32$1 = $8$hi;
    i64toi32_i32$3 = $8;
    i64toi32_i32$2 = 2146435072;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    i64toi32_i32$3 = 2146435072;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$5
    }
    $11 = $9 + 3 | 0;
    pad($0 | 0, 32 | 0, $2 | 0, $11 | 0, $4 & -65537 | 0 | 0);
    out($0 | 0, $10 | 0, $9 | 0);
    $12 = $5 & 32 | 0;
    out($0 | 0, ($1 != $1 ? ($12 ? 66372 : 67599) : $12 ? 66922 : 67620) | 0, 3 | 0);
    pad($0 | 0, 32 | 0, $2 | 0, $11 | 0, $4 ^ 8192 | 0 | 0);
    $13 = ($11 | 0) > ($2 | 0) ? $11 : $2;
    break label$4;
   }
   $14 = $6 + 16 | 0;
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       $1 = +frexp(+$1, $6 + 44 | 0 | 0);
       $1 = $1 + $1;
       if ($1 == 0.0) {
        break label$9
       }
       $11 = HEAP32[($6 + 44 | 0) >> 2] | 0;
       HEAP32[($6 + 44 | 0) >> 2] = $11 + -1 | 0;
       $15 = $5 | 32 | 0;
       if (($15 | 0) != (97 | 0)) {
        break label$8
       }
       break label$6;
      }
      $15 = $5 | 32 | 0;
      if (($15 | 0) == (97 | 0)) {
       break label$6
      }
      $16 = ($3 | 0) < (0 | 0) ? 6 : $3;
      $17 = HEAP32[($6 + 44 | 0) >> 2] | 0;
      break label$7;
     }
     $17 = $11 + -29 | 0;
     HEAP32[($6 + 44 | 0) >> 2] = $17;
     $16 = ($3 | 0) < (0 | 0) ? 6 : $3;
     $1 = $1 * 268435456.0;
    }
    $18 = ($6 + 48 | 0) + (($17 | 0) < (0 | 0) ? 0 : 288) | 0;
    $12 = $18;
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       if (!($1 < 4294967296.0 & $1 >= 0.0 | 0)) {
        break label$12
       }
       $11 = ~~$1 >>> 0;
       break label$11;
      }
      $11 = 0;
     }
     HEAP32[$12 >> 2] = $11;
     $12 = $12 + 4 | 0;
     $1 = ($1 - +($11 >>> 0)) * 1.0e9;
     if ($1 != 0.0) {
      continue label$10
     }
     break label$10;
    };
    label$13 : {
     label$14 : {
      if (($17 | 0) >= (1 | 0)) {
       break label$14
      }
      $3 = $17;
      $11 = $12;
      $19 = $18;
      break label$13;
     }
     $19 = $18;
     $3 = $17;
     label$15 : while (1) {
      $3 = ($3 | 0) < (29 | 0) ? $3 : 29;
      label$16 : {
       $11 = $12 + -4 | 0;
       if ($11 >>> 0 < $19 >>> 0) {
        break label$16
       }
       i64toi32_i32$1 = 0;
       $20 = $3;
       $20$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $8 = 0;
       $8$hi = i64toi32_i32$1;
       label$17 : while (1) {
        $167 = $11;
        i64toi32_i32$0 = $11;
        i64toi32_i32$1 = HEAP32[$11 >> 2] | 0;
        i64toi32_i32$2 = 0;
        $169$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $20$hi;
        i64toi32_i32$2 = $169$hi;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$1 = $20$hi;
        i64toi32_i32$3 = $20;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
         $48 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
         $48 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        }
        $171$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $8$hi;
        i64toi32_i32$2 = $8;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = -1;
        i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
        $173 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
        $173$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $171$hi;
        i64toi32_i32$1 = $48;
        i64toi32_i32$2 = $173$hi;
        i64toi32_i32$3 = $173;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $8 = i64toi32_i32$4;
        $8$hi = i64toi32_i32$5;
        $175$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_udiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $8 = i64toi32_i32$1;
        $8$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_mul($8 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $179 = i64toi32_i32$1;
        $179$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $175$hi;
        i64toi32_i32$0 = i64toi32_i32$4;
        i64toi32_i32$1 = $179$hi;
        i64toi32_i32$3 = $179;
        i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
        i64toi32_i32$4 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        HEAP32[$167 >> 2] = i64toi32_i32$2;
        $11 = $11 + -4 | 0;
        if ($11 >>> 0 >= $19 >>> 0) {
         continue label$17
        }
        break label$17;
       };
       i64toi32_i32$4 = $8$hi;
       $11 = $8;
       if (!$11) {
        break label$16
       }
       $19 = $19 + -4 | 0;
       HEAP32[$19 >> 2] = $11;
      }
      label$18 : {
       label$19 : while (1) {
        $11 = $12;
        if ($11 >>> 0 <= $19 >>> 0) {
         break label$18
        }
        $12 = $11 + -4 | 0;
        if (!(HEAP32[$12 >> 2] | 0)) {
         continue label$19
        }
        break label$19;
       };
      }
      $3 = (HEAP32[($6 + 44 | 0) >> 2] | 0) - $3 | 0;
      HEAP32[($6 + 44 | 0) >> 2] = $3;
      $12 = $11;
      if (($3 | 0) > (0 | 0)) {
       continue label$15
      }
      break label$15;
     };
    }
    label$20 : {
     if (($3 | 0) > (-1 | 0)) {
      break label$20
     }
     $21 = ((($16 + 25 | 0) >>> 0) / (9 >>> 0) | 0) + 1 | 0;
     $22 = ($15 | 0) == (102 | 0);
     label$21 : while (1) {
      $12 = 0 - $3 | 0;
      $23 = ($12 | 0) < (9 | 0) ? $12 : 9;
      label$22 : {
       label$23 : {
        if ($19 >>> 0 < $11 >>> 0) {
         break label$23
        }
        $12 = HEAP32[$19 >> 2] | 0;
        break label$22;
       }
       $24 = 1e9 >>> $23 | 0;
       $25 = (-1 << $23 | 0) ^ -1 | 0;
       $3 = 0;
       $12 = $19;
       label$24 : while (1) {
        $13 = HEAP32[$12 >> 2] | 0;
        HEAP32[$12 >> 2] = ($13 >>> $23 | 0) + $3 | 0;
        $3 = Math_imul($13 & $25 | 0, $24);
        $12 = $12 + 4 | 0;
        if ($12 >>> 0 < $11 >>> 0) {
         continue label$24
        }
        break label$24;
       };
       $12 = HEAP32[$19 >> 2] | 0;
       if (!$3) {
        break label$22
       }
       HEAP32[$11 >> 2] = $3;
       $11 = $11 + 4 | 0;
      }
      $3 = (HEAP32[($6 + 44 | 0) >> 2] | 0) + $23 | 0;
      HEAP32[($6 + 44 | 0) >> 2] = $3;
      $19 = $19 + (!$12 << 2 | 0) | 0;
      $12 = $22 ? $18 : $19;
      $11 = (($11 - $12 | 0) >> 2 | 0 | 0) > ($21 | 0) ? $12 + ($21 << 2 | 0) | 0 : $11;
      if (($3 | 0) < (0 | 0)) {
       continue label$21
      }
      break label$21;
     };
    }
    $3 = 0;
    label$25 : {
     if ($19 >>> 0 >= $11 >>> 0) {
      break label$25
     }
     $3 = Math_imul(($18 - $19 | 0) >> 2 | 0, 9);
     $12 = 10;
     $13 = HEAP32[$19 >> 2] | 0;
     if ($13 >>> 0 < 10 >>> 0) {
      break label$25
     }
     label$26 : while (1) {
      $3 = $3 + 1 | 0;
      $12 = Math_imul($12, 10);
      if ($13 >>> 0 >= $12 >>> 0) {
       continue label$26
      }
      break label$26;
     };
    }
    label$27 : {
     $12 = ($16 - (($15 | 0) == (102 | 0) ? 0 : $3) | 0) - (($16 | 0) != (0 | 0) & ($15 | 0) == (103 | 0) | 0) | 0;
     if (($12 | 0) >= (Math_imul(($11 - $18 | 0) >> 2 | 0, 9) + -9 | 0 | 0)) {
      break label$27
     }
     $13 = $12 + 9216 | 0;
     $24 = ($13 | 0) / (9 | 0) | 0;
     $23 = (($24 << 2 | 0) + (($6 + 48 | 0) + (($17 | 0) < (0 | 0) ? 4 : 292) | 0) | 0) + -4096 | 0;
     $12 = 10;
     label$28 : {
      $13 = $13 - Math_imul($24, 9) | 0;
      if (($13 | 0) > (7 | 0)) {
       break label$28
      }
      label$29 : while (1) {
       $12 = Math_imul($12, 10);
       $13 = $13 + 1 | 0;
       if (($13 | 0) != (8 | 0)) {
        continue label$29
       }
       break label$29;
      };
     }
     $25 = $23 + 4 | 0;
     label$30 : {
      label$31 : {
       $13 = HEAP32[$23 >> 2] | 0;
       $21 = ($13 >>> 0) / ($12 >>> 0) | 0;
       $24 = $13 - Math_imul($21, $12) | 0;
       if ($24) {
        break label$31
       }
       if (($25 | 0) == ($11 | 0)) {
        break label$30
       }
      }
      label$32 : {
       label$33 : {
        if ($21 & 1 | 0) {
         break label$33
        }
        $1 = 9007199254740992.0;
        if (($12 | 0) != (1e9 | 0)) {
         break label$32
        }
        if ($23 >>> 0 <= $19 >>> 0) {
         break label$32
        }
        if (!((HEAPU8[($23 + -4 | 0) >> 0] | 0) & 1 | 0)) {
         break label$32
        }
       }
       $1 = 9007199254740994.0;
      }
      $388 = ($25 | 0) == ($11 | 0) ? 1.0 : 1.5;
      $25 = $12 >>> 1 | 0;
      $26 = $24 >>> 0 < $25 >>> 0 ? .5 : ($24 | 0) == ($25 | 0) ? $388 : 1.5;
      label$34 : {
       if ($7) {
        break label$34
       }
       if ((HEAPU8[$10 >> 0] | 0 | 0) != (45 | 0)) {
        break label$34
       }
       $26 = -$26;
       $1 = -$1;
      }
      $13 = $13 - $24 | 0;
      HEAP32[$23 >> 2] = $13;
      if ($1 + $26 == $1) {
       break label$30
      }
      $12 = $13 + $12 | 0;
      HEAP32[$23 >> 2] = $12;
      label$35 : {
       if ($12 >>> 0 < 1e9 >>> 0) {
        break label$35
       }
       label$36 : while (1) {
        HEAP32[$23 >> 2] = 0;
        label$37 : {
         $23 = $23 + -4 | 0;
         if ($23 >>> 0 >= $19 >>> 0) {
          break label$37
         }
         $19 = $19 + -4 | 0;
         HEAP32[$19 >> 2] = 0;
        }
        $12 = (HEAP32[$23 >> 2] | 0) + 1 | 0;
        HEAP32[$23 >> 2] = $12;
        if ($12 >>> 0 > 999999999 >>> 0) {
         continue label$36
        }
        break label$36;
       };
      }
      $3 = Math_imul(($18 - $19 | 0) >> 2 | 0, 9);
      $12 = 10;
      $13 = HEAP32[$19 >> 2] | 0;
      if ($13 >>> 0 < 10 >>> 0) {
       break label$30
      }
      label$38 : while (1) {
       $3 = $3 + 1 | 0;
       $12 = Math_imul($12, 10);
       if ($13 >>> 0 >= $12 >>> 0) {
        continue label$38
       }
       break label$38;
      };
     }
     $12 = $23 + 4 | 0;
     $11 = $11 >>> 0 > $12 >>> 0 ? $12 : $11;
    }
    label$39 : {
     label$40 : while (1) {
      $12 = $11;
      $13 = $11 >>> 0 <= $19 >>> 0;
      if ($13) {
       break label$39
      }
      $11 = $12 + -4 | 0;
      if (!(HEAP32[$11 >> 2] | 0)) {
       continue label$40
      }
      break label$40;
     };
    }
    label$41 : {
     label$42 : {
      if (($15 | 0) == (103 | 0)) {
       break label$42
      }
      $23 = $4 & 8 | 0;
      break label$41;
     }
     $11 = $16 ? $16 : 1;
     $23 = ($11 | 0) > ($3 | 0) & ($3 | 0) > (-5 | 0) | 0;
     $16 = ($23 ? $3 ^ -1 | 0 : -1) + $11 | 0;
     $5 = ($23 ? -1 : -2) + $5 | 0;
     $23 = $4 & 8 | 0;
     if ($23) {
      break label$41
     }
     $11 = -9;
     label$43 : {
      if ($13) {
       break label$43
      }
      $23 = HEAP32[($12 + -4 | 0) >> 2] | 0;
      if (!$23) {
       break label$43
      }
      $13 = 10;
      $11 = 0;
      if (($23 >>> 0) % (10 >>> 0) | 0) {
       break label$43
      }
      label$44 : while (1) {
       $24 = $11;
       $11 = $11 + 1 | 0;
       $13 = Math_imul($13, 10);
       if (!(($23 >>> 0) % ($13 >>> 0) | 0)) {
        continue label$44
       }
       break label$44;
      };
      $11 = $24 ^ -1 | 0;
     }
     $13 = Math_imul(($12 - $18 | 0) >> 2 | 0, 9);
     label$45 : {
      if (($5 & -33 | 0 | 0) != (70 | 0)) {
       break label$45
      }
      $23 = 0;
      $11 = ($13 + $11 | 0) + -9 | 0;
      $11 = ($11 | 0) > (0 | 0) ? $11 : 0;
      $16 = ($16 | 0) < ($11 | 0) ? $16 : $11;
      break label$41;
     }
     $23 = 0;
     $11 = (($3 + $13 | 0) + $11 | 0) + -9 | 0;
     $11 = ($11 | 0) > (0 | 0) ? $11 : 0;
     $16 = ($16 | 0) < ($11 | 0) ? $16 : $11;
    }
    $13 = -1;
    $24 = $16 | $23 | 0;
    if (($16 | 0) > (($24 ? 2147483645 : 2147483646) | 0)) {
     break label$4
    }
    $25 = ($16 + (($24 | 0) != (0 | 0)) | 0) + 1 | 0;
    label$46 : {
     label$47 : {
      $22 = $5 & -33 | 0;
      if (($22 | 0) != (70 | 0)) {
       break label$47
      }
      if (($3 | 0) > ($25 ^ 2147483647 | 0 | 0)) {
       break label$4
      }
      $11 = ($3 | 0) > (0 | 0) ? $3 : 0;
      break label$46;
     }
     label$48 : {
      $11 = $3 >> 31 | 0;
      i64toi32_i32$4 = 0;
      $11 = fmt_u(($3 ^ $11 | 0) - $11 | 0 | 0, i64toi32_i32$4 | 0, $14 | 0) | 0;
      if (($14 - $11 | 0 | 0) > (1 | 0)) {
       break label$48
      }
      label$49 : while (1) {
       $11 = $11 + -1 | 0;
       HEAP8[$11 >> 0] = 48;
       if (($14 - $11 | 0 | 0) < (2 | 0)) {
        continue label$49
       }
       break label$49;
      };
     }
     $21 = $11 + -2 | 0;
     HEAP8[$21 >> 0] = $5;
     $13 = -1;
     HEAP8[($11 + -1 | 0) >> 0] = ($3 | 0) < (0 | 0) ? 45 : 43;
     $11 = $14 - $21 | 0;
     if (($11 | 0) > ($25 ^ 2147483647 | 0 | 0)) {
      break label$4
     }
    }
    $13 = -1;
    $11 = $11 + $25 | 0;
    if (($11 | 0) > ($9 ^ 2147483647 | 0 | 0)) {
     break label$4
    }
    $25 = $11 + $9 | 0;
    pad($0 | 0, 32 | 0, $2 | 0, $25 | 0, $4 | 0);
    out($0 | 0, $10 | 0, $9 | 0);
    pad($0 | 0, 48 | 0, $2 | 0, $25 | 0, $4 ^ 65536 | 0 | 0);
    label$50 : {
     label$51 : {
      label$52 : {
       label$53 : {
        if (($22 | 0) != (70 | 0)) {
         break label$53
        }
        $23 = $6 + 16 | 0 | 8 | 0;
        $3 = $6 + 16 | 0 | 9 | 0;
        $13 = $19 >>> 0 > $18 >>> 0 ? $18 : $19;
        $19 = $13;
        label$54 : while (1) {
         i64toi32_i32$5 = $19;
         i64toi32_i32$4 = HEAP32[$19 >> 2] | 0;
         i64toi32_i32$0 = 0;
         $11 = fmt_u(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $3 | 0) | 0;
         label$55 : {
          label$56 : {
           if (($19 | 0) == ($13 | 0)) {
            break label$56
           }
           if ($11 >>> 0 <= ($6 + 16 | 0) >>> 0) {
            break label$55
           }
           label$57 : while (1) {
            $11 = $11 + -1 | 0;
            HEAP8[$11 >> 0] = 48;
            if ($11 >>> 0 > ($6 + 16 | 0) >>> 0) {
             continue label$57
            }
            break label$55;
           };
          }
          if (($11 | 0) != ($3 | 0)) {
           break label$55
          }
          HEAP8[($6 + 24 | 0) >> 0] = 48;
          $11 = $23;
         }
         out($0 | 0, $11 | 0, $3 - $11 | 0 | 0);
         $19 = $19 + 4 | 0;
         if ($19 >>> 0 <= $18 >>> 0) {
          continue label$54
         }
         break label$54;
        };
        label$58 : {
         if (!$24) {
          break label$58
         }
         out($0 | 0, 68074 | 0, 1 | 0);
        }
        if ($19 >>> 0 >= $12 >>> 0) {
         break label$52
        }
        if (($16 | 0) < (1 | 0)) {
         break label$52
        }
        label$59 : while (1) {
         label$60 : {
          i64toi32_i32$5 = $19;
          i64toi32_i32$0 = HEAP32[$19 >> 2] | 0;
          i64toi32_i32$4 = 0;
          $11 = fmt_u(i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, $3 | 0) | 0;
          if ($11 >>> 0 <= ($6 + 16 | 0) >>> 0) {
           break label$60
          }
          label$61 : while (1) {
           $11 = $11 + -1 | 0;
           HEAP8[$11 >> 0] = 48;
           if ($11 >>> 0 > ($6 + 16 | 0) >>> 0) {
            continue label$61
           }
           break label$61;
          };
         }
         out($0 | 0, $11 | 0, (($16 | 0) < (9 | 0) ? $16 : 9) | 0);
         $11 = $16 + -9 | 0;
         $19 = $19 + 4 | 0;
         if ($19 >>> 0 >= $12 >>> 0) {
          break label$51
         }
         $13 = ($16 | 0) > (9 | 0);
         $16 = $11;
         if ($13) {
          continue label$59
         }
         break label$51;
        };
       }
       label$62 : {
        if (($16 | 0) < (0 | 0)) {
         break label$62
        }
        $24 = $12 >>> 0 > $19 >>> 0 ? $12 : $19 + 4 | 0;
        $18 = $6 + 16 | 0 | 8 | 0;
        $3 = $6 + 16 | 0 | 9 | 0;
        $12 = $19;
        label$63 : while (1) {
         label$64 : {
          i64toi32_i32$5 = $12;
          i64toi32_i32$4 = HEAP32[$12 >> 2] | 0;
          i64toi32_i32$0 = 0;
          $11 = fmt_u(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $3 | 0) | 0;
          if (($11 | 0) != ($3 | 0)) {
           break label$64
          }
          HEAP8[($6 + 24 | 0) >> 0] = 48;
          $11 = $18;
         }
         label$65 : {
          label$66 : {
           if (($12 | 0) == ($19 | 0)) {
            break label$66
           }
           if ($11 >>> 0 <= ($6 + 16 | 0) >>> 0) {
            break label$65
           }
           label$67 : while (1) {
            $11 = $11 + -1 | 0;
            HEAP8[$11 >> 0] = 48;
            if ($11 >>> 0 > ($6 + 16 | 0) >>> 0) {
             continue label$67
            }
            break label$65;
           };
          }
          out($0 | 0, $11 | 0, 1 | 0);
          $11 = $11 + 1 | 0;
          if (!($16 | $23 | 0)) {
           break label$65
          }
          out($0 | 0, 68074 | 0, 1 | 0);
         }
         $13 = $3 - $11 | 0;
         out($0 | 0, $11 | 0, (($16 | 0) < ($13 | 0) ? $16 : $13) | 0);
         $16 = $16 - $13 | 0;
         $12 = $12 + 4 | 0;
         if ($12 >>> 0 >= $24 >>> 0) {
          break label$62
         }
         if (($16 | 0) > (-1 | 0)) {
          continue label$63
         }
         break label$63;
        };
       }
       pad($0 | 0, 48 | 0, $16 + 18 | 0 | 0, 18 | 0, 0 | 0);
       out($0 | 0, $21 | 0, $14 - $21 | 0 | 0);
       break label$50;
      }
      $11 = $16;
     }
     pad($0 | 0, 48 | 0, $11 + 9 | 0 | 0, 9 | 0, 0 | 0);
    }
    pad($0 | 0, 32 | 0, $2 | 0, $25 | 0, $4 ^ 8192 | 0 | 0);
    $13 = ($25 | 0) > ($2 | 0) ? $25 : $2;
    break label$4;
   }
   $25 = $10 + ((($5 << 26 | 0) >> 31 | 0) & 9 | 0) | 0;
   label$68 : {
    if ($3 >>> 0 > 11 >>> 0) {
     break label$68
    }
    $11 = 12 - $3 | 0;
    $26 = 16.0;
    label$69 : while (1) {
     $26 = $26 * 16.0;
     $11 = $11 + -1 | 0;
     if ($11) {
      continue label$69
     }
     break label$69;
    };
    label$70 : {
     if ((HEAPU8[$25 >> 0] | 0 | 0) != (45 | 0)) {
      break label$70
     }
     $1 = -($26 + (-$1 - $26));
     break label$68;
    }
    $1 = $1 + $26 - $26;
   }
   label$71 : {
    $11 = HEAP32[($6 + 44 | 0) >> 2] | 0;
    $852 = $11;
    $11 = $11 >> 31 | 0;
    i64toi32_i32$0 = 0;
    $11 = fmt_u(($852 ^ $11 | 0) - $11 | 0 | 0, i64toi32_i32$0 | 0, $14 | 0) | 0;
    if (($11 | 0) != ($14 | 0)) {
     break label$71
    }
    HEAP8[($6 + 15 | 0) >> 0] = 48;
    $11 = $6 + 15 | 0;
   }
   $23 = $9 | 2 | 0;
   $19 = $5 & 32 | 0;
   $12 = HEAP32[($6 + 44 | 0) >> 2] | 0;
   $24 = $11 + -2 | 0;
   HEAP8[$24 >> 0] = $5 + 15 | 0;
   HEAP8[($11 + -1 | 0) >> 0] = ($12 | 0) < (0 | 0) ? 45 : 43;
   $13 = $4 & 8 | 0;
   $12 = $6 + 16 | 0;
   label$72 : while (1) {
    $11 = $12;
    label$73 : {
     label$74 : {
      if (!(Math_abs($1) < 2147483648.0)) {
       break label$74
      }
      $12 = ~~$1;
      break label$73;
     }
     $12 = -2147483648;
    }
    HEAP8[$11 >> 0] = HEAPU8[($12 + 91792 | 0) >> 0] | 0 | $19 | 0;
    $1 = ($1 - +($12 | 0)) * 16.0;
    label$75 : {
     $12 = $11 + 1 | 0;
     if (($12 - ($6 + 16 | 0) | 0 | 0) != (1 | 0)) {
      break label$75
     }
     label$76 : {
      if ($13) {
       break label$76
      }
      if (($3 | 0) > (0 | 0)) {
       break label$76
      }
      if ($1 == 0.0) {
       break label$75
      }
     }
     HEAP8[($11 + 1 | 0) >> 0] = 46;
     $12 = $11 + 2 | 0;
    }
    if ($1 != 0.0) {
     continue label$72
    }
    break label$72;
   };
   $13 = -1;
   $21 = $14 - $24 | 0;
   $11 = $23 + $21 | 0;
   if ((2147483645 - $11 | 0 | 0) < ($3 | 0)) {
    break label$4
   }
   label$77 : {
    label$78 : {
     if (!$3) {
      break label$78
     }
     $19 = $12 - ($6 + 16 | 0) | 0;
     if (($19 + -2 | 0 | 0) >= ($3 | 0)) {
      break label$78
     }
     $12 = $3 + 2 | 0;
     break label$77;
    }
    $19 = $12 - ($6 + 16 | 0) | 0;
    $12 = $19;
   }
   $11 = $11 + $12 | 0;
   pad($0 | 0, 32 | 0, $2 | 0, $11 | 0, $4 | 0);
   out($0 | 0, $25 | 0, $23 | 0);
   pad($0 | 0, 48 | 0, $2 | 0, $11 | 0, $4 ^ 65536 | 0 | 0);
   out($0 | 0, $6 + 16 | 0 | 0, $19 | 0);
   pad($0 | 0, 48 | 0, $12 - $19 | 0 | 0, 0 | 0, 0 | 0);
   out($0 | 0, $24 | 0, $21 | 0);
   pad($0 | 0, 32 | 0, $2 | 0, $11 | 0, $4 ^ 8192 | 0 | 0);
   $13 = ($11 | 0) > ($2 | 0) ? $11 : $2;
  }
  __stack_pointer = $6 + 560 | 0;
  return $13 | 0;
 }
 
 function pop_arg_long_double($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2 = 0, $12 = 0, $12$hi = 0, $15 = 0, $15$hi = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $2 = ((HEAP32[$1 >> 2] | 0) + 7 | 0) & -8 | 0;
  HEAP32[$1 >> 2] = $2 + 16 | 0;
  i64toi32_i32$2 = $2;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $12 = i64toi32_i32$0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $15 = i64toi32_i32$1;
  $15$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$1 = $15$hi;
  (wasm2js_i32$0 = $0, wasm2js_f64$0 = +__trunctfdf2($12 | 0, i64toi32_i32$0 | 0, $15 | 0, i64toi32_i32$1 | 0)), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
 }
 
 function __DOUBLE_BITS($0) {
  $0 = +$0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  wasm2js_scratch_store_f64(+$0);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function vfiprintf($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return __vfprintf_internal($0 | 0, $1 | 0, $2 | 0, 0 | 0, 0 | 0) | 0 | 0;
 }
 
 function vsnprintf($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4 = __stack_pointer - 160 | 0;
  __stack_pointer = $4;
  $5 = $1 ? $0 : $4 + 158 | 0;
  HEAP32[($4 + 144 | 0) >> 2] = $5;
  $0 = -1;
  $6 = $1 + -1 | 0;
  HEAP32[($4 + 148 | 0) >> 2] = $6 >>> 0 > $1 >>> 0 ? 0 : $6;
  $4 = memset($4 | 0, 0 | 0, 144 | 0) | 0;
  HEAP32[($4 + 76 | 0) >> 2] = -1;
  HEAP32[($4 + 36 | 0) >> 2] = 39;
  HEAP32[($4 + 80 | 0) >> 2] = -1;
  HEAP32[($4 + 44 | 0) >> 2] = $4 + 159 | 0;
  HEAP32[($4 + 84 | 0) >> 2] = $4 + 144 | 0;
  label$1 : {
   label$2 : {
    if (($1 | 0) > (-1 | 0)) {
     break label$2
    }
    (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 61), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    break label$1;
   }
   HEAP8[$5 >> 0] = 0;
   $0 = vfprintf($4 | 0, $2 | 0, $3 | 0) | 0;
  }
  __stack_pointer = $4 + 160 | 0;
  return $0 | 0;
 }
 
 function sn_write($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $5 = 0, $4 = 0, $7 = 0, $6 = 0;
  $3 = HEAP32[($0 + 84 | 0) >> 2] | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  label$1 : {
   $5 = HEAP32[($3 + 4 | 0) >> 2] | 0;
   $6 = HEAP32[($0 + 28 | 0) >> 2] | 0;
   $7 = (HEAP32[($0 + 20 | 0) >> 2] | 0) - $6 | 0;
   $7 = $5 >>> 0 < $7 >>> 0 ? $5 : $7;
   if (!$7) {
    break label$1
   }
   __memcpy($4 | 0, $6 | 0, $7 | 0) | 0;
   $4 = (HEAP32[$3 >> 2] | 0) + $7 | 0;
   HEAP32[$3 >> 2] = $4;
   $5 = (HEAP32[($3 + 4 | 0) >> 2] | 0) - $7 | 0;
   HEAP32[($3 + 4 | 0) >> 2] = $5;
  }
  label$2 : {
   $5 = $5 >>> 0 < $2 >>> 0 ? $5 : $2;
   if (!$5) {
    break label$2
   }
   __memcpy($4 | 0, $1 | 0, $5 | 0) | 0;
   $4 = (HEAP32[$3 >> 2] | 0) + $5 | 0;
   HEAP32[$3 >> 2] = $4;
   HEAP32[($3 + 4 | 0) >> 2] = (HEAP32[($3 + 4 | 0) >> 2] | 0) - $5 | 0;
  }
  HEAP8[$4 >> 0] = 0;
  $3 = HEAP32[($0 + 44 | 0) >> 2] | 0;
  HEAP32[($0 + 28 | 0) >> 2] = $3;
  HEAP32[($0 + 20 | 0) >> 2] = $3;
  return $2 | 0;
 }
 
 function __intscan($0, $1, $2, $3, $3$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $5 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, $7$hi = 0, $7 = 0, $10 = 0, $8$hi = 0, $9$hi = 0, $8 = 0, $9 = 0, $11$hi = 0, $6 = 0, $11 = 0, $4 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $12 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $193 = 0, $193$hi = 0, $250 = 0, $250$hi = 0, $417$hi = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($1 >>> 0 > 36 >>> 0) {
      break label$3
     }
     if (($1 | 0) != (1 | 0)) {
      break label$2
     }
    }
    (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 28), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    i64toi32_i32$0 = 0;
    $3 = 0;
    $3$hi = i64toi32_i32$0;
    break label$1;
   }
   label$4 : while (1) {
    label$5 : {
     label$6 : {
      $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      if (($5 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
       break label$6
      }
      HEAP32[($0 + 4 | 0) >> 2] = $5 + 1 | 0;
      $5 = HEAPU8[$5 >> 0] | 0;
      break label$5;
     }
     $5 = __shgetc($0 | 0) | 0;
    }
    if (isspace($5 | 0) | 0) {
     continue label$4
    }
    break label$4;
   };
   $6 = 0;
   label$7 : {
    label$8 : {
     switch ($5 + -43 | 0 | 0) {
     case 0:
     case 2:
      break label$8;
     default:
      break label$7;
     };
    }
    $6 = ($5 | 0) == (45 | 0) ? -1 : 0;
    label$9 : {
     $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     if (($5 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
      break label$9
     }
     HEAP32[($0 + 4 | 0) >> 2] = $5 + 1 | 0;
     $5 = HEAPU8[$5 >> 0] | 0;
     break label$7;
    }
    $5 = __shgetc($0 | 0) | 0;
   }
   label$10 : {
    label$11 : {
     label$12 : {
      label$13 : {
       label$14 : {
        if (($1 | 0) != (0 | 0) & ($1 | 0) != (16 | 0) | 0) {
         break label$14
        }
        if (($5 | 0) != (48 | 0)) {
         break label$14
        }
        label$15 : {
         label$16 : {
          $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
          if (($5 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
           break label$16
          }
          HEAP32[($0 + 4 | 0) >> 2] = $5 + 1 | 0;
          $5 = HEAPU8[$5 >> 0] | 0;
          break label$15;
         }
         $5 = __shgetc($0 | 0) | 0;
        }
        label$17 : {
         if (($5 & -33 | 0 | 0) != (88 | 0)) {
          break label$17
         }
         label$18 : {
          label$19 : {
           $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
           if (($5 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
            break label$19
           }
           HEAP32[($0 + 4 | 0) >> 2] = $5 + 1 | 0;
           $5 = HEAPU8[$5 >> 0] | 0;
           break label$18;
          }
          $5 = __shgetc($0 | 0) | 0;
         }
         $1 = 16;
         if ((HEAPU8[($5 + 91809 | 0) >> 0] | 0) >>> 0 < 16 >>> 0) {
          break label$12
         }
         i64toi32_i32$0 = 0;
         $3 = 0;
         $3$hi = i64toi32_i32$0;
         label$20 : {
          label$21 : {
           i64toi32_i32$2 = $0;
           i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
           i64toi32_i32$2 = i64toi32_i32$0;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = 0;
           if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
            $29 = 1
           } else {
            if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
             if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
              $30 = 0
             } else {
              $30 = 1
             }
             $31 = $30;
            } else {
             $31 = 0
            }
            $29 = $31;
           }
           if ($29) {
            break label$21
           }
           $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
           HEAP32[($0 + 4 | 0) >> 2] = $5 + -1 | 0;
           if (!$2) {
            break label$20
           }
           HEAP32[($0 + 4 | 0) >> 2] = $5 + -2 | 0;
           break label$1;
          }
          if ($2) {
           break label$1
          }
         }
         i64toi32_i32$2 = 0;
         $3 = 0;
         $3$hi = i64toi32_i32$2;
         i64toi32_i32$2 = 0;
         __shlim($0 | 0, 0 | 0, i64toi32_i32$2 | 0);
         break label$1;
        }
        if ($1) {
         break label$13
        }
        $1 = 8;
        break label$12;
       }
       $1 = $1 ? $1 : 10;
       if ($1 >>> 0 > (HEAPU8[($5 + 91809 | 0) >> 0] | 0) >>> 0) {
        break label$13
       }
       i64toi32_i32$2 = 0;
       $3 = 0;
       $3$hi = i64toi32_i32$2;
       label$22 : {
        i64toi32_i32$3 = $0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
        i64toi32_i32$3 = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 0;
        if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
         $32 = 1
        } else {
         if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
          if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
           $33 = 0
          } else {
           $33 = 1
          }
          $34 = $33;
         } else {
          $34 = 0
         }
         $32 = $34;
        }
        if ($32) {
         break label$22
        }
        HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) + -1 | 0;
       }
       i64toi32_i32$3 = 0;
       __shlim($0 | 0, 0 | 0, i64toi32_i32$3 | 0);
       (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 28), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$1;
      }
      if (($1 | 0) != (10 | 0)) {
       break label$12
      }
      i64toi32_i32$3 = 0;
      $7 = 0;
      $7$hi = i64toi32_i32$3;
      label$23 : {
       $2 = $5 + -48 | 0;
       if ($2 >>> 0 > 9 >>> 0) {
        break label$23
       }
       $1 = 0;
       label$24 : while (1) {
        $1 = Math_imul($1, 10);
        label$25 : {
         label$26 : {
          $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
          if (($5 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
           break label$26
          }
          HEAP32[($0 + 4 | 0) >> 2] = $5 + 1 | 0;
          $5 = HEAPU8[$5 >> 0] | 0;
          break label$25;
         }
         $5 = __shgetc($0 | 0) | 0;
        }
        $1 = $1 + $2 | 0;
        label$27 : {
         $2 = $5 + -48 | 0;
         if ($2 >>> 0 > 9 >>> 0) {
          break label$27
         }
         if ($1 >>> 0 < 429496729 >>> 0) {
          continue label$24
         }
        }
        break label$24;
       };
       i64toi32_i32$3 = 0;
       $7 = $1;
       $7$hi = i64toi32_i32$3;
      }
      label$28 : {
       if ($2 >>> 0 > 9 >>> 0) {
        break label$28
       }
       i64toi32_i32$3 = $7$hi;
       i64toi32_i32$1 = 0;
       i64toi32_i32$1 = __wasm_i64_mul($7 | 0, i64toi32_i32$3 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
       $8 = i64toi32_i32$1;
       $8$hi = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       $9 = $2;
       $9$hi = i64toi32_i32$3;
       label$29 : while (1) {
        label$30 : {
         label$31 : {
          $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
          if (($5 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
           break label$31
          }
          HEAP32[($0 + 4 | 0) >> 2] = $5 + 1 | 0;
          $5 = HEAPU8[$5 >> 0] | 0;
          break label$30;
         }
         $5 = __shgetc($0 | 0) | 0;
        }
        i64toi32_i32$3 = $8$hi;
        i64toi32_i32$3 = $9$hi;
        i64toi32_i32$3 = $8$hi;
        i64toi32_i32$0 = $8;
        i64toi32_i32$1 = $9$hi;
        i64toi32_i32$2 = $9;
        i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
        i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $7 = i64toi32_i32$4;
        $7$hi = i64toi32_i32$5;
        $2 = $5 + -48 | 0;
        if ($2 >>> 0 > 9 >>> 0) {
         break label$28
        }
        i64toi32_i32$5 = $7$hi;
        i64toi32_i32$3 = $7;
        i64toi32_i32$0 = 429496729;
        i64toi32_i32$2 = -1717986918;
        if (i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 >= i64toi32_i32$2 >>> 0 | 0) | 0) {
         break label$28
        }
        i64toi32_i32$3 = $7$hi;
        i64toi32_i32$5 = 0;
        i64toi32_i32$5 = __wasm_i64_mul($7 | 0, i64toi32_i32$3 | 0, 10 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
        $8 = i64toi32_i32$5;
        $8$hi = i64toi32_i32$3;
        i64toi32_i32$3 = 0;
        $9 = $2;
        $9$hi = i64toi32_i32$3;
        i64toi32_i32$2 = $2;
        i64toi32_i32$5 = -1;
        i64toi32_i32$0 = -1;
        i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
        $193 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
        $193$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $8$hi;
        i64toi32_i32$3 = $8;
        i64toi32_i32$2 = $193$hi;
        i64toi32_i32$0 = $193;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0 | 0) | 0) {
         continue label$29
        }
        break label$29;
       };
       $1 = 10;
       break label$11;
      }
      $1 = 10;
      if ($2 >>> 0 <= 9 >>> 0) {
       break label$11
      }
      break label$10;
     }
     label$32 : {
      if (!($1 & ($1 + -1 | 0) | 0)) {
       break label$32
      }
      i64toi32_i32$3 = 0;
      $7 = 0;
      $7$hi = i64toi32_i32$3;
      label$33 : {
       $10 = HEAPU8[($5 + 91809 | 0) >> 0] | 0;
       if ($1 >>> 0 <= $10 >>> 0) {
        break label$33
       }
       $2 = 0;
       label$34 : while (1) {
        $2 = Math_imul($2, $1);
        label$35 : {
         label$36 : {
          $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
          if (($5 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
           break label$36
          }
          HEAP32[($0 + 4 | 0) >> 2] = $5 + 1 | 0;
          $5 = HEAPU8[$5 >> 0] | 0;
          break label$35;
         }
         $5 = __shgetc($0 | 0) | 0;
        }
        $2 = $10 + $2 | 0;
        label$37 : {
         $10 = HEAPU8[($5 + 91809 | 0) >> 0] | 0;
         if ($1 >>> 0 <= $10 >>> 0) {
          break label$37
         }
         if ($2 >>> 0 < 119304647 >>> 0) {
          continue label$34
         }
        }
        break label$34;
       };
       i64toi32_i32$3 = 0;
       $7 = $2;
       $7$hi = i64toi32_i32$3;
      }
      if ($1 >>> 0 <= $10 >>> 0) {
       break label$11
      }
      i64toi32_i32$3 = 0;
      $8 = $1;
      $8$hi = i64toi32_i32$3;
      label$38 : while (1) {
       i64toi32_i32$3 = $7$hi;
       i64toi32_i32$3 = $8$hi;
       i64toi32_i32$3 = $7$hi;
       i64toi32_i32$5 = $8$hi;
       i64toi32_i32$5 = __wasm_i64_mul($7 | 0, i64toi32_i32$3 | 0, $8 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
       $9 = i64toi32_i32$5;
       $9$hi = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = $10;
       i64toi32_i32$5 = 0;
       i64toi32_i32$2 = 255;
       i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
       $11 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
       $11$hi = i64toi32_i32$5;
       i64toi32_i32$3 = $11;
       i64toi32_i32$0 = -1;
       i64toi32_i32$2 = -1;
       i64toi32_i32$0 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
       $250 = i64toi32_i32$3 ^ i64toi32_i32$2 | 0;
       $250$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$5 = $9;
       i64toi32_i32$3 = $250$hi;
       i64toi32_i32$2 = $250;
       if (i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
        break label$11
       }
       label$39 : {
        label$40 : {
         $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
         if (($5 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
          break label$40
         }
         HEAP32[($0 + 4 | 0) >> 2] = $5 + 1 | 0;
         $5 = HEAPU8[$5 >> 0] | 0;
         break label$39;
        }
        $5 = __shgetc($0 | 0) | 0;
       }
       i64toi32_i32$5 = $9$hi;
       i64toi32_i32$5 = $11$hi;
       i64toi32_i32$5 = $9$hi;
       i64toi32_i32$2 = $9;
       i64toi32_i32$0 = $11$hi;
       i64toi32_i32$3 = $11;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $7 = i64toi32_i32$1;
       $7$hi = i64toi32_i32$4;
       $10 = HEAPU8[($5 + 91809 | 0) >> 0] | 0;
       if ($1 >>> 0 <= $10 >>> 0) {
        break label$11
       }
       i64toi32_i32$4 = $8$hi;
       i64toi32_i32$4 = $7$hi;
       i64toi32_i32$4 = $8$hi;
       i64toi32_i32$2 = 0;
       i64toi32_i32$5 = $7$hi;
       i64toi32_i32$3 = 0;
       __multi3($4 | 0, $8 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0, $7 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
       i64toi32_i32$2 = $4;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$4 = 0;
       if ((i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | 0) {
        break label$11
       }
       continue label$38;
      };
     }
     $12 = HEAP8[(((Math_imul($1, 23) >>> 5 | 0) & 7 | 0) + 92065 | 0) >> 0] | 0;
     i64toi32_i32$2 = 0;
     $7 = 0;
     $7$hi = i64toi32_i32$2;
     label$41 : {
      $2 = HEAPU8[($5 + 91809 | 0) >> 0] | 0;
      if ($1 >>> 0 <= $2 >>> 0) {
       break label$41
      }
      $10 = 0;
      label$42 : while (1) {
       $10 = $10 << $12 | 0;
       label$43 : {
        label$44 : {
         $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
         if (($5 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
          break label$44
         }
         HEAP32[($0 + 4 | 0) >> 2] = $5 + 1 | 0;
         $5 = HEAPU8[$5 >> 0] | 0;
         break label$43;
        }
        $5 = __shgetc($0 | 0) | 0;
       }
       $10 = $2 | $10 | 0;
       label$45 : {
        $2 = HEAPU8[($5 + 91809 | 0) >> 0] | 0;
        if ($1 >>> 0 <= $2 >>> 0) {
         break label$45
        }
        if ($10 >>> 0 < 134217728 >>> 0) {
         continue label$42
        }
       }
       break label$42;
      };
      i64toi32_i32$2 = 0;
      $7 = $10;
      $7$hi = i64toi32_i32$2;
     }
     if ($1 >>> 0 <= $2 >>> 0) {
      break label$11
     }
     i64toi32_i32$2 = 0;
     $9 = $12;
     $9$hi = i64toi32_i32$2;
     i64toi32_i32$2 = -1;
     i64toi32_i32$4 = -1;
     i64toi32_i32$5 = $9$hi;
     i64toi32_i32$3 = $9;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $35 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      $35 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
     }
     $11 = $35;
     $11$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $7$hi;
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$2 = $11;
     i64toi32_i32$4 = $7$hi;
     i64toi32_i32$3 = $7;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
      break label$11
     }
     label$46 : while (1) {
      i64toi32_i32$2 = $7$hi;
      i64toi32_i32$2 = $9$hi;
      i64toi32_i32$2 = $7$hi;
      i64toi32_i32$3 = $7;
      i64toi32_i32$5 = $9$hi;
      i64toi32_i32$4 = $9;
      i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
       $36 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
       $36 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      }
      $7 = $36;
      $7$hi = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      i64toi32_i32$2 = $2;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = 255;
      i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
      $8 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
      $8$hi = i64toi32_i32$3;
      label$47 : {
       label$48 : {
        $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        if (($5 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
         break label$48
        }
        HEAP32[($0 + 4 | 0) >> 2] = $5 + 1 | 0;
        $5 = HEAPU8[$5 >> 0] | 0;
        break label$47;
       }
       $5 = __shgetc($0 | 0) | 0;
      }
      i64toi32_i32$3 = $7$hi;
      i64toi32_i32$3 = $8$hi;
      i64toi32_i32$3 = $7$hi;
      i64toi32_i32$5 = $7;
      i64toi32_i32$2 = $8$hi;
      i64toi32_i32$4 = $8;
      i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $7 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
      $7$hi = i64toi32_i32$2;
      $2 = HEAPU8[($5 + 91809 | 0) >> 0] | 0;
      if ($1 >>> 0 <= $2 >>> 0) {
       break label$11
      }
      i64toi32_i32$2 = $7$hi;
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$2 = $7$hi;
      i64toi32_i32$3 = $7;
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$4 = $11;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$4 >>> 0 | 0) | 0) {
       continue label$46
      }
      break label$46;
     };
    }
    if ($1 >>> 0 <= (HEAPU8[($5 + 91809 | 0) >> 0] | 0) >>> 0) {
     break label$10
    }
    label$49 : while (1) {
     label$50 : {
      label$51 : {
       $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       if (($5 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
        break label$51
       }
       HEAP32[($0 + 4 | 0) >> 2] = $5 + 1 | 0;
       $5 = HEAPU8[$5 >> 0] | 0;
       break label$50;
      }
      $5 = __shgetc($0 | 0) | 0;
     }
     if ($1 >>> 0 > (HEAPU8[($5 + 91809 | 0) >> 0] | 0) >>> 0) {
      continue label$49
     }
     break label$49;
    };
    (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$4 = $3;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    $6 = !(i64toi32_i32$4 & i64toi32_i32$5 | 0 | i64toi32_i32$2 | 0) ? $6 : 0;
    i64toi32_i32$2 = i64toi32_i32$3;
    i64toi32_i32$2 = i64toi32_i32$3;
    $7 = i64toi32_i32$4;
    $7$hi = i64toi32_i32$3;
   }
   label$52 : {
    i64toi32_i32$3 = $0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    if ((i64toi32_i32$4 | 0) < (i64toi32_i32$2 | 0)) {
     $37 = 1
    } else {
     if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$5 >>> 0) {
       $38 = 0
      } else {
       $38 = 1
      }
      $39 = $38;
     } else {
      $39 = 0
     }
     $37 = $39;
    }
    if ($37) {
     break label$52
    }
    HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) + -1 | 0;
   }
   label$53 : {
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$5 = $7;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$2 = $3;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$53
    }
    label$54 : {
     i64toi32_i32$5 = $3$hi;
     if ($3 & 1 | 0) {
      break label$54
     }
     if ($6) {
      break label$54
     }
     (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$2 = $3;
     i64toi32_i32$3 = -1;
     i64toi32_i32$4 = -1;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $3 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$5 = $7;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$4 = $3;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 <= i64toi32_i32$4 >>> 0 | 0) | 0) {
     break label$53
    }
    (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    break label$1;
   }
   i64toi32_i32$5 = $7$hi;
   i64toi32_i32$1 = $6;
   i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
   $3 = i64toi32_i32$1;
   $3$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $7$hi;
   i64toi32_i32$4 = $7;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3;
   i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
   $417$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $417$hi;
   i64toi32_i32$5 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
   i64toi32_i32$0 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) + i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
   $3 = i64toi32_i32$3;
   $3$hi = i64toi32_i32$0;
  }
  __stack_pointer = $4 + 16 | 0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$5 = $3;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$5 | 0;
 }
 
 function __syscall_getpid() {
  return 42 | 0;
 }
 
 function getpid() {
  return __syscall_getpid() | 0 | 0;
 }
 
 function __get_tp() {
  return 93864 | 0;
 }
 
 function init_pthread_self() {
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  HEAP32[(0 + 93960 | 0) >> 2] = 92788;
  (wasm2js_i32$0 = 0, wasm2js_i32$1 = getpid() | 0), HEAP32[(wasm2js_i32$0 + 93888 | 0) >> 2] = wasm2js_i32$1;
 }
 
 function mbrtowc($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $5 = 0, $4 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4 = $3 ? $3 : 93984;
  $3 = HEAP32[$4 >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($1) {
       break label$4
      }
      if ($3) {
       break label$3
      }
      return 0 | 0;
     }
     $5 = -2;
     if (!$2) {
      break label$2
     }
     label$5 : {
      label$6 : {
       if (!$3) {
        break label$6
       }
       $5 = $2;
       break label$5;
      }
      label$7 : {
       $5 = HEAPU8[$1 >> 0] | 0;
       $3 = $5 << 24 >> 24;
       if (($3 | 0) < (0 | 0)) {
        break label$7
       }
       label$8 : {
        if (!$0) {
         break label$8
        }
        HEAP32[$0 >> 2] = $5;
       }
       return ($3 | 0) != (0 | 0) | 0;
      }
      label$9 : {
       if (HEAP32[(HEAP32[((__get_tp() | 0) + 96 | 0) >> 2] | 0) >> 2] | 0) {
        break label$9
       }
       $5 = 1;
       if (!$0) {
        break label$2
       }
       HEAP32[$0 >> 2] = $3 & 57343 | 0;
       return 1 | 0;
      }
      $3 = $5 + -194 | 0;
      if ($3 >>> 0 > 50 >>> 0) {
       break label$3
      }
      $3 = HEAP32[(($3 << 2 | 0) + 92080 | 0) >> 2] | 0;
      $5 = $2 + -1 | 0;
      if (!$5) {
       break label$1
      }
      $1 = $1 + 1 | 0;
     }
     $6 = HEAPU8[$1 >> 0] | 0;
     $7 = $6 >>> 3 | 0;
     if (($7 + -16 | 0 | (($3 >> 26 | 0) + $7 | 0) | 0) >>> 0 > 7 >>> 0) {
      break label$3
     }
     label$10 : while (1) {
      $5 = $5 + -1 | 0;
      label$11 : {
       $3 = ($6 & 255 | 0) + -128 | 0 | ($3 << 6 | 0) | 0;
       if (($3 | 0) < (0 | 0)) {
        break label$11
       }
       HEAP32[$4 >> 2] = 0;
       label$12 : {
        if (!$0) {
         break label$12
        }
        HEAP32[$0 >> 2] = $3;
       }
       return $2 - $5 | 0 | 0;
      }
      if (!$5) {
       break label$1
      }
      $1 = $1 + 1 | 0;
      $6 = HEAPU8[$1 >> 0] | 0;
      if (($6 & 192 | 0 | 0) == (128 | 0)) {
       continue label$10
      }
      break label$10;
     };
    }
    HEAP32[$4 >> 2] = 0;
    (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 25), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $5 = -1;
   }
   return $5 | 0;
  }
  HEAP32[$4 >> 2] = $3;
  return -2 | 0;
 }
 
 function mbsinit($0) {
  $0 = $0 | 0;
  label$1 : {
   if ($0) {
    break label$1
   }
   return 1 | 0;
  }
  return !(HEAP32[$0 >> 2] | 0) | 0;
 }
 
 function vfscanf($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $12 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $6 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, $16 = 0, $3 = 0, $10 = 0, $15 = 0, $13 = 0, $5 = 0, $9$hi = 0, $14 = 0, $18$hi = 0, $17 = 0, $9 = 0, $11 = 0, $18 = 0, $20$hi = 0, $7 = 0, $20 = 0, $19 = 0, i64toi32_i32$6 = 0, $4 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $76$hi = 0, $78$hi = 0, $83 = 0, $83$hi = 0, $143$hi = 0, $145$hi = 0, $151 = 0, $151$hi = 0, $209 = 0, $219 = 0, $281$hi = 0, $283$hi = 0, $288 = 0, $288$hi = 0, $328 = 0, $328$hi = 0, $334 = 0, $334$hi = 0, $335$hi = 0, $434 = 0, $434$hi = 0, $440 = 0, $440$hi = 0, $441$hi = 0, $652 = 0, $652$hi = 0, $657 = 0, $657$hi = 0, $685$hi = 0, $687$hi = 0, $693 = 0, $693$hi = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_f64$0 = 0.0;
  $3 = __stack_pointer - 304 | 0;
  __stack_pointer = $3;
  $4 = 0;
  label$1 : {
   if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $4 = __lockfile($0 | 0) | 0;
  }
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (HEAP32[($0 + 4 | 0) >> 2] | 0) {
       break label$5
      }
      __toread($0 | 0) | 0;
      if (HEAP32[($0 + 4 | 0) >> 2] | 0) {
       break label$5
      }
      $5 = 0;
      break label$4;
     }
     label$6 : {
      $6 = HEAPU8[$1 >> 0] | 0;
      if ($6) {
       break label$6
      }
      $7 = 0;
      break label$2;
     }
     $8 = $3 + 16 | 0;
     i64toi32_i32$0 = 0;
     $9 = 0;
     $9$hi = i64toi32_i32$0;
     $7 = 0;
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : {
         label$11 : {
          label$12 : while (1) {
           label$13 : {
            label$14 : {
             if (!(isspace($6 & 255 | 0 | 0) | 0)) {
              break label$14
             }
             label$15 : while (1) {
              $6 = $1;
              $1 = $6 + 1 | 0;
              if (isspace(HEAPU8[($6 + 1 | 0) >> 0] | 0 | 0) | 0) {
               continue label$15
              }
              break label$15;
             };
             i64toi32_i32$0 = 0;
             __shlim($0 | 0, 0 | 0, i64toi32_i32$0 | 0);
             label$16 : while (1) {
              label$17 : {
               label$18 : {
                $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
                if (($1 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
                 break label$18
                }
                HEAP32[($0 + 4 | 0) >> 2] = $1 + 1 | 0;
                $1 = HEAPU8[$1 >> 0] | 0;
                break label$17;
               }
               $1 = __shgetc($0 | 0) | 0;
              }
              if (isspace($1 | 0) | 0) {
               continue label$16
              }
              break label$16;
             };
             $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
             label$19 : {
              i64toi32_i32$2 = $0;
              i64toi32_i32$0 = HEAP32[($0 + 112 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[($0 + 116 | 0) >> 2] | 0;
              i64toi32_i32$2 = i64toi32_i32$0;
              i64toi32_i32$0 = 0;
              i64toi32_i32$3 = 0;
              if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
               $63 = 1
              } else {
               if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
                if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
                 $64 = 0
                } else {
                 $64 = 1
                }
                $65 = $64;
               } else {
                $65 = 0
               }
               $63 = $65;
              }
              if ($63) {
               break label$19
              }
              $1 = $1 + -1 | 0;
              HEAP32[($0 + 4 | 0) >> 2] = $1;
             }
             i64toi32_i32$3 = $0;
             i64toi32_i32$2 = HEAP32[($0 + 120 | 0) >> 2] | 0;
             i64toi32_i32$1 = HEAP32[($0 + 124 | 0) >> 2] | 0;
             $76$hi = i64toi32_i32$1;
             i64toi32_i32$1 = $9$hi;
             i64toi32_i32$1 = $76$hi;
             i64toi32_i32$3 = i64toi32_i32$2;
             i64toi32_i32$2 = $9$hi;
             i64toi32_i32$0 = $9;
             i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
             i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
             if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
              i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
             }
             $78$hi = i64toi32_i32$5;
             i64toi32_i32$3 = $1 - (HEAP32[($0 + 44 | 0) >> 2] | 0) | 0;
             i64toi32_i32$5 = i64toi32_i32$3 >> 31 | 0;
             $83 = i64toi32_i32$3;
             $83$hi = i64toi32_i32$5;
             i64toi32_i32$5 = $78$hi;
             i64toi32_i32$1 = i64toi32_i32$4;
             i64toi32_i32$3 = $83$hi;
             i64toi32_i32$0 = $83;
             i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
             i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
             if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
              i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
             }
             $9 = i64toi32_i32$2;
             $9$hi = i64toi32_i32$4;
             break label$13;
            }
            label$20 : {
             label$21 : {
              label$22 : {
               label$23 : {
                if ((HEAPU8[$1 >> 0] | 0 | 0) != (37 | 0)) {
                 break label$23
                }
                $6 = HEAPU8[($1 + 1 | 0) >> 0] | 0;
                if (($6 | 0) == (42 | 0)) {
                 break label$22
                }
                if (($6 | 0) != (37 | 0)) {
                 break label$21
                }
               }
               i64toi32_i32$4 = 0;
               __shlim($0 | 0, 0 | 0, i64toi32_i32$4 | 0);
               label$24 : {
                label$25 : {
                 if ((HEAPU8[$1 >> 0] | 0 | 0) != (37 | 0)) {
                  break label$25
                 }
                 label$26 : while (1) {
                  label$27 : {
                   label$28 : {
                    $6 = HEAP32[($0 + 4 | 0) >> 2] | 0;
                    if (($6 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
                     break label$28
                    }
                    HEAP32[($0 + 4 | 0) >> 2] = $6 + 1 | 0;
                    $6 = HEAPU8[$6 >> 0] | 0;
                    break label$27;
                   }
                   $6 = __shgetc($0 | 0) | 0;
                  }
                  if (isspace($6 | 0) | 0) {
                   continue label$26
                  }
                  break label$26;
                 };
                 $1 = $1 + 1 | 0;
                 break label$24;
                }
                label$29 : {
                 $6 = HEAP32[($0 + 4 | 0) >> 2] | 0;
                 if (($6 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
                  break label$29
                 }
                 HEAP32[($0 + 4 | 0) >> 2] = $6 + 1 | 0;
                 $6 = HEAPU8[$6 >> 0] | 0;
                 break label$24;
                }
                $6 = __shgetc($0 | 0) | 0;
               }
               label$30 : {
                if (($6 | 0) == (HEAPU8[$1 >> 0] | 0 | 0)) {
                 break label$30
                }
                label$31 : {
                 i64toi32_i32$5 = $0;
                 i64toi32_i32$4 = HEAP32[($0 + 112 | 0) >> 2] | 0;
                 i64toi32_i32$1 = HEAP32[($0 + 116 | 0) >> 2] | 0;
                 i64toi32_i32$5 = i64toi32_i32$4;
                 i64toi32_i32$4 = 0;
                 i64toi32_i32$0 = 0;
                 if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
                  $66 = 1
                 } else {
                  if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
                   if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$0 >>> 0) {
                    $67 = 0
                   } else {
                    $67 = 1
                   }
                   $68 = $67;
                  } else {
                   $68 = 0
                  }
                  $66 = $68;
                 }
                 if ($66) {
                  break label$31
                 }
                 HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) + -1 | 0;
                }
                if (($6 | 0) > (-1 | 0)) {
                 break label$2
                }
                $5 = 0;
                if ($7) {
                 break label$2
                }
                break label$4;
               }
               i64toi32_i32$0 = $0;
               i64toi32_i32$5 = HEAP32[($0 + 120 | 0) >> 2] | 0;
               i64toi32_i32$1 = HEAP32[($0 + 124 | 0) >> 2] | 0;
               $143$hi = i64toi32_i32$1;
               i64toi32_i32$1 = $9$hi;
               i64toi32_i32$1 = $143$hi;
               i64toi32_i32$0 = i64toi32_i32$5;
               i64toi32_i32$5 = $9$hi;
               i64toi32_i32$4 = $9;
               i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
               i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
               if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
                i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
               }
               $145$hi = i64toi32_i32$2;
               i64toi32_i32$0 = (HEAP32[($0 + 4 | 0) >> 2] | 0) - (HEAP32[($0 + 44 | 0) >> 2] | 0) | 0;
               i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
               $151 = i64toi32_i32$0;
               $151$hi = i64toi32_i32$2;
               i64toi32_i32$2 = $145$hi;
               i64toi32_i32$1 = i64toi32_i32$3;
               i64toi32_i32$0 = $151$hi;
               i64toi32_i32$4 = $151;
               i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
               i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
               if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
                i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
               }
               $9 = i64toi32_i32$5;
               $9$hi = i64toi32_i32$3;
               $6 = $1;
               break label$13;
              }
              $6 = $1 + 2 | 0;
              $10 = 0;
              break label$20;
             }
             label$32 : {
              if (!(isdigit($6 | 0) | 0)) {
               break label$32
              }
              if ((HEAPU8[($1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
               break label$32
              }
              $6 = $1 + 3 | 0;
              $10 = arg_n($2 | 0, (HEAPU8[($1 + 1 | 0) >> 0] | 0) + -48 | 0 | 0) | 0;
              break label$20;
             }
             $6 = $1 + 1 | 0;
             $10 = HEAP32[$2 >> 2] | 0;
             $2 = $2 + 4 | 0;
            }
            $11 = 0;
            $1 = 0;
            label$33 : {
             if (!(isdigit(HEAPU8[$6 >> 0] | 0 | 0) | 0)) {
              break label$33
             }
             label$34 : while (1) {
              $1 = (Math_imul($1, 10) + (HEAPU8[$6 >> 0] | 0) | 0) + -48 | 0;
              $12 = HEAPU8[($6 + 1 | 0) >> 0] | 0;
              $6 = $6 + 1 | 0;
              if (isdigit($12 | 0) | 0) {
               continue label$34
              }
              break label$34;
             };
            }
            label$35 : {
             label$36 : {
              $13 = HEAPU8[$6 >> 0] | 0;
              if (($13 | 0) == (109 | 0)) {
               break label$36
              }
              $12 = $6;
              break label$35;
             }
             $12 = $6 + 1 | 0;
             $14 = 0;
             $11 = ($10 | 0) != (0 | 0);
             $13 = HEAPU8[($6 + 1 | 0) >> 0] | 0;
             $15 = 0;
            }
            $6 = $12 + 1 | 0;
            $16 = 3;
            $5 = $11;
            label$37 : {
             label$38 : {
              switch (($13 & 255 | 0) + -65 | 0 | 0) {
              case 39:
               $209 = $12 + 2 | 0;
               $12 = (HEAPU8[($12 + 1 | 0) >> 0] | 0 | 0) == (104 | 0);
               $6 = $12 ? $209 : $6;
               $16 = $12 ? -2 : -1;
               break label$37;
              case 43:
               $219 = $12 + 2 | 0;
               $12 = (HEAPU8[($12 + 1 | 0) >> 0] | 0 | 0) == (108 | 0);
               $6 = $12 ? $219 : $6;
               $16 = $12 ? 3 : 1;
               break label$37;
              case 51:
              case 57:
               $16 = 1;
               break label$37;
              case 11:
               $16 = 2;
               break label$37;
              case 41:
               break label$37;
              case 0:
              case 2:
              case 4:
              case 5:
              case 6:
              case 18:
              case 23:
              case 26:
              case 32:
              case 34:
              case 35:
              case 36:
              case 37:
              case 38:
              case 40:
              case 45:
              case 46:
              case 47:
              case 50:
              case 52:
              case 55:
               break label$38;
              default:
               break label$7;
              };
             }
             $16 = 0;
             $6 = $12;
            }
            $12 = HEAPU8[$6 >> 0] | 0;
            $13 = ($12 & 47 | 0 | 0) == (3 | 0);
            $5 = $13 ? 1 : $16;
            label$43 : {
             $17 = $13 ? $12 | 32 | 0 : $12;
             if (($17 | 0) == (91 | 0)) {
              break label$43
             }
             label$44 : {
              label$45 : {
               if (($17 | 0) == (110 | 0)) {
                break label$45
               }
               if (($17 | 0) != (99 | 0)) {
                break label$44
               }
               $1 = ($1 | 0) > (1 | 0) ? $1 : 1;
               break label$43;
              }
              i64toi32_i32$3 = $9$hi;
              store_int($10 | 0, $5 | 0, $9 | 0, i64toi32_i32$3 | 0);
              break label$13;
             }
             i64toi32_i32$3 = 0;
             __shlim($0 | 0, 0 | 0, i64toi32_i32$3 | 0);
             label$46 : while (1) {
              label$47 : {
               label$48 : {
                $12 = HEAP32[($0 + 4 | 0) >> 2] | 0;
                if (($12 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
                 break label$48
                }
                HEAP32[($0 + 4 | 0) >> 2] = $12 + 1 | 0;
                $12 = HEAPU8[$12 >> 0] | 0;
                break label$47;
               }
               $12 = __shgetc($0 | 0) | 0;
              }
              if (isspace($12 | 0) | 0) {
               continue label$46
              }
              break label$46;
             };
             $12 = HEAP32[($0 + 4 | 0) >> 2] | 0;
             label$49 : {
              i64toi32_i32$2 = $0;
              i64toi32_i32$3 = HEAP32[($0 + 112 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[($0 + 116 | 0) >> 2] | 0;
              i64toi32_i32$2 = i64toi32_i32$3;
              i64toi32_i32$3 = 0;
              i64toi32_i32$4 = 0;
              if ((i64toi32_i32$1 | 0) < (i64toi32_i32$3 | 0)) {
               $69 = 1
              } else {
               if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$3 | 0)) {
                if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$4 >>> 0) {
                 $70 = 0
                } else {
                 $70 = 1
                }
                $71 = $70;
               } else {
                $71 = 0
               }
               $69 = $71;
              }
              if ($69) {
               break label$49
              }
              $12 = $12 + -1 | 0;
              HEAP32[($0 + 4 | 0) >> 2] = $12;
             }
             i64toi32_i32$4 = $0;
             i64toi32_i32$2 = HEAP32[($0 + 120 | 0) >> 2] | 0;
             i64toi32_i32$1 = HEAP32[($0 + 124 | 0) >> 2] | 0;
             $281$hi = i64toi32_i32$1;
             i64toi32_i32$1 = $9$hi;
             i64toi32_i32$1 = $281$hi;
             i64toi32_i32$4 = i64toi32_i32$2;
             i64toi32_i32$2 = $9$hi;
             i64toi32_i32$3 = $9;
             i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
             i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
             if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
              i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
             }
             $283$hi = i64toi32_i32$5;
             i64toi32_i32$4 = $12 - (HEAP32[($0 + 44 | 0) >> 2] | 0) | 0;
             i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
             $288 = i64toi32_i32$4;
             $288$hi = i64toi32_i32$5;
             i64toi32_i32$5 = $283$hi;
             i64toi32_i32$1 = i64toi32_i32$0;
             i64toi32_i32$4 = $288$hi;
             i64toi32_i32$3 = $288;
             i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
             i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
             if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
              i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
             }
             $9 = i64toi32_i32$2;
             $9$hi = i64toi32_i32$0;
            }
            i64toi32_i32$1 = $1;
            i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
            $18 = i64toi32_i32$1;
            $18$hi = i64toi32_i32$0;
            __shlim($0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0);
            label$50 : {
             label$51 : {
              $12 = HEAP32[($0 + 4 | 0) >> 2] | 0;
              if (($12 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
               break label$51
              }
              HEAP32[($0 + 4 | 0) >> 2] = $12 + 1 | 0;
              break label$50;
             }
             if ((__shgetc($0 | 0) | 0 | 0) < (0 | 0)) {
              break label$8
             }
            }
            label$52 : {
             i64toi32_i32$5 = $0;
             i64toi32_i32$0 = HEAP32[($0 + 112 | 0) >> 2] | 0;
             i64toi32_i32$1 = HEAP32[($0 + 116 | 0) >> 2] | 0;
             i64toi32_i32$5 = i64toi32_i32$0;
             i64toi32_i32$0 = 0;
             i64toi32_i32$3 = 0;
             if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
              $72 = 1
             } else {
              if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
               if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
                $73 = 0
               } else {
                $73 = 1
               }
               $74 = $73;
              } else {
               $74 = 0
              }
              $72 = $74;
             }
             if ($72) {
              break label$52
             }
             HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) + -1 | 0;
            }
            $12 = 16;
            label$53 : {
             label$54 : {
              label$55 : {
               label$56 : {
                label$57 : {
                 switch ($17 + -88 | 0 | 0) {
                 default:
                  $1 = $17 + -65 | 0;
                  if ($1 >>> 0 > 6 >>> 0) {
                   break label$53
                  }
                  if (!((1 << $1 | 0) & 113 | 0)) {
                   break label$53
                  }
                 case 9:
                 case 13:
                 case 14:
                 case 15:
                  __floatscan($3 + 8 | 0 | 0, $0 | 0, $5 | 0, 0 | 0);
                  i64toi32_i32$3 = $0;
                  i64toi32_i32$5 = HEAP32[($0 + 120 | 0) >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[($0 + 124 | 0) >> 2] | 0;
                  $328 = i64toi32_i32$5;
                  $328$hi = i64toi32_i32$1;
                  i64toi32_i32$5 = (HEAP32[($0 + 4 | 0) >> 2] | 0) - (HEAP32[($0 + 44 | 0) >> 2] | 0) | 0;
                  i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
                  $334 = i64toi32_i32$5;
                  $334$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = 0;
                  i64toi32_i32$3 = 0;
                  i64toi32_i32$5 = $334$hi;
                  i64toi32_i32$0 = $334;
                  i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
                  i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0;
                  i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
                  i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
                  $335$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = $328$hi;
                  i64toi32_i32$1 = $328;
                  i64toi32_i32$3 = $335$hi;
                  i64toi32_i32$0 = i64toi32_i32$4;
                  if ((i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
                   break label$55
                  }
                  break label$9;
                 case 3:
                 case 11:
                 case 27:
                  label$63 : {
                   if (($17 | 16 | 0 | 0) != (115 | 0)) {
                    break label$63
                   }
                   memset($3 + 32 | 0 | 0, -1 | 0, 257 | 0) | 0;
                   HEAP8[($3 + 32 | 0) >> 0] = 0;
                   if (($17 | 0) != (115 | 0)) {
                    break label$54
                   }
                   HEAP8[($3 + 65 | 0) >> 0] = 0;
                   HEAP8[($3 + 46 | 0) >> 0] = 0;
                   $75 = 0;
                   HEAP16[($3 + 42 | 0) >> 1] = $75;
                   HEAP16[($3 + 44 | 0) >> 1] = $75 >>> 16 | 0;
                   break label$54;
                  }
                  $16 = HEAPU8[($6 + 1 | 0) >> 0] | 0;
                  $12 = ($16 | 0) == (94 | 0);
                  memset($3 + 32 | 0 | 0, $12 | 0, 257 | 0) | 0;
                  HEAP8[($3 + 32 | 0) >> 0] = 0;
                  $13 = $12 ? $6 + 2 | 0 : $6 + 1 | 0;
                  label$64 : {
                   label$65 : {
                    label$66 : {
                     label$67 : {
                      $6 = HEAPU8[($6 + ($12 ? 2 : 1) | 0) >> 0] | 0;
                      if (($6 | 0) == (45 | 0)) {
                       break label$67
                      }
                      if (($6 | 0) == (93 | 0)) {
                       break label$66
                      }
                      $16 = ($16 | 0) != (94 | 0);
                      $6 = $13;
                      break label$64;
                     }
                     $16 = ($16 | 0) != (94 | 0);
                     HEAP8[($3 + 78 | 0) >> 0] = $16;
                     break label$65;
                    }
                    $16 = ($16 | 0) != (94 | 0);
                    HEAP8[($3 + 126 | 0) >> 0] = $16;
                   }
                   $6 = $13 + 1 | 0;
                  }
                  label$68 : while (1) {
                   label$69 : {
                    label$70 : {
                     $12 = HEAPU8[$6 >> 0] | 0;
                     if (($12 | 0) == (45 | 0)) {
                      break label$70
                     }
                     if (!$12) {
                      break label$8
                     }
                     if (($12 | 0) == (93 | 0)) {
                      break label$54
                     }
                     break label$69;
                    }
                    $12 = 45;
                    $19 = HEAPU8[($6 + 1 | 0) >> 0] | 0;
                    if (!$19) {
                     break label$69
                    }
                    if (($19 | 0) == (93 | 0)) {
                     break label$69
                    }
                    $13 = $6 + 1 | 0;
                    label$71 : {
                     label$72 : {
                      $6 = HEAPU8[($6 + -1 | 0) >> 0] | 0;
                      if ($6 >>> 0 < $19 >>> 0) {
                       break label$72
                      }
                      $12 = $19;
                      break label$71;
                     }
                     label$73 : while (1) {
                      $6 = $6 + 1 | 0;
                      HEAP8[(($3 + 32 | 0) + $6 | 0) >> 0] = $16;
                      $12 = HEAPU8[$13 >> 0] | 0;
                      if ($6 >>> 0 < $12 >>> 0) {
                       continue label$73
                      }
                      break label$73;
                     };
                    }
                    $6 = $13;
                   }
                   HEAP8[(($12 + ($3 + 32 | 0) | 0) + 1 | 0) >> 0] = $16;
                   $6 = $6 + 1 | 0;
                   continue label$68;
                  };
                 case 23:
                  $12 = 8;
                  break label$56;
                 case 12:
                 case 29:
                  $12 = 10;
                  break label$56;
                 case 1:
                 case 2:
                 case 4:
                 case 5:
                 case 6:
                 case 7:
                 case 8:
                 case 10:
                 case 16:
                 case 18:
                 case 19:
                 case 20:
                 case 21:
                 case 22:
                 case 25:
                 case 26:
                 case 28:
                 case 30:
                 case 31:
                  break label$53;
                 case 0:
                 case 24:
                 case 32:
                  break label$56;
                 case 17:
                  break label$57;
                 };
                }
                $12 = 0;
               }
               i64toi32_i32$1 = -1;
               i64toi32_i32$1 = __intscan($0 | 0, $12 | 0, 0 | 0, -1 | 0, i64toi32_i32$1 | 0) | 0;
               i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
               $18 = i64toi32_i32$1;
               $18$hi = i64toi32_i32$2;
               i64toi32_i32$0 = $0;
               i64toi32_i32$2 = HEAP32[($0 + 120 | 0) >> 2] | 0;
               i64toi32_i32$1 = HEAP32[($0 + 124 | 0) >> 2] | 0;
               $434 = i64toi32_i32$2;
               $434$hi = i64toi32_i32$1;
               i64toi32_i32$2 = (HEAP32[($0 + 4 | 0) >> 2] | 0) - (HEAP32[($0 + 44 | 0) >> 2] | 0) | 0;
               i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
               $440 = i64toi32_i32$2;
               $440$hi = i64toi32_i32$1;
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               i64toi32_i32$2 = $440$hi;
               i64toi32_i32$3 = $440;
               i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
               i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
               i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
               i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
               $441$hi = i64toi32_i32$4;
               i64toi32_i32$4 = $434$hi;
               i64toi32_i32$1 = $434;
               i64toi32_i32$0 = $441$hi;
               i64toi32_i32$3 = i64toi32_i32$5;
               if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) | 0) {
                break label$9
               }
               label$74 : {
                if (($17 | 0) != (112 | 0)) {
                 break label$74
                }
                if (!$10) {
                 break label$74
                }
                i64toi32_i32$1 = $18$hi;
                HEAP32[$10 >> 2] = $18;
                break label$53;
               }
               i64toi32_i32$1 = $18$hi;
               store_int($10 | 0, $5 | 0, $18 | 0, i64toi32_i32$1 | 0);
               break label$53;
              }
              if (!$10) {
               break label$53
              }
              i64toi32_i32$3 = $8;
              i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
              i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
              $18 = i64toi32_i32$1;
              $18$hi = i64toi32_i32$4;
              i64toi32_i32$3 = $3;
              i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
              $20 = i64toi32_i32$4;
              $20$hi = i64toi32_i32$1;
              label$75 : {
               switch ($5 | 0) {
               case 0:
                i64toi32_i32$1 = $20$hi;
                i64toi32_i32$1 = $18$hi;
                i64toi32_i32$1 = $20$hi;
                i64toi32_i32$4 = $18$hi;
                (wasm2js_i32$0 = $10, wasm2js_f32$0 = Math_fround(__trunctfsf2($20 | 0, i64toi32_i32$1 | 0, $18 | 0, i64toi32_i32$4 | 0))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
                break label$53;
               case 1:
                i64toi32_i32$4 = $20$hi;
                i64toi32_i32$4 = $18$hi;
                i64toi32_i32$4 = $20$hi;
                i64toi32_i32$1 = $18$hi;
                (wasm2js_i32$0 = $10, wasm2js_f64$0 = +__trunctfdf2($20 | 0, i64toi32_i32$4 | 0, $18 | 0, i64toi32_i32$1 | 0)), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
                break label$53;
               case 2:
                break label$75;
               default:
                break label$53;
               };
              }
              i64toi32_i32$1 = $20$hi;
              i64toi32_i32$4 = $10;
              HEAP32[i64toi32_i32$4 >> 2] = $20;
              HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$1;
              i64toi32_i32$1 = $18$hi;
              HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $18;
              HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$1;
              break label$53;
             }
             $13 = ($17 | 0) != (99 | 0);
             $16 = $13 ? 31 : $1 + 1 | 0;
             label$78 : {
              label$79 : {
               if (($5 | 0) != (1 | 0)) {
                break label$79
               }
               $12 = $10;
               label$80 : {
                if (!$11) {
                 break label$80
                }
                $12 = malloc($16 << 2 | 0 | 0) | 0;
                if (!$12) {
                 break label$10
                }
               }
               i64toi32_i32$4 = $3;
               i64toi32_i32$1 = 0;
               HEAP32[(i64toi32_i32$4 + 296 | 0) >> 2] = 0;
               HEAP32[(i64toi32_i32$4 + 300 | 0) >> 2] = i64toi32_i32$1;
               $1 = 0;
               label$81 : while (1) {
                $15 = $12;
                label$82 : {
                 label$83 : while (1) {
                  label$84 : {
                   label$85 : {
                    $12 = HEAP32[($0 + 4 | 0) >> 2] | 0;
                    if (($12 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
                     break label$85
                    }
                    HEAP32[($0 + 4 | 0) >> 2] = $12 + 1 | 0;
                    $12 = HEAPU8[$12 >> 0] | 0;
                    break label$84;
                   }
                   $12 = __shgetc($0 | 0) | 0;
                  }
                  if (!(HEAPU8[(($12 + ($3 + 32 | 0) | 0) + 1 | 0) >> 0] | 0)) {
                   break label$82
                  }
                  HEAP8[($3 + 27 | 0) >> 0] = $12;
                  $12 = mbrtowc($3 + 28 | 0 | 0, $3 + 27 | 0 | 0, 1 | 0, $3 + 296 | 0 | 0) | 0;
                  if (($12 | 0) == (-2 | 0)) {
                   continue label$83
                  }
                  $14 = 0;
                  if (($12 | 0) == (-1 | 0)) {
                   break label$8
                  }
                  label$86 : {
                   if (!$15) {
                    break label$86
                   }
                   HEAP32[($15 + ($1 << 2 | 0) | 0) >> 2] = HEAP32[($3 + 28 | 0) >> 2] | 0;
                   $1 = $1 + 1 | 0;
                  }
                  if (!$11) {
                   continue label$83
                  }
                  if (($1 | 0) != ($16 | 0)) {
                   continue label$83
                  }
                  break label$83;
                 };
                 $5 = 1;
                 $16 = $16 << 1 | 0 | 1 | 0;
                 $12 = realloc($15 | 0, $16 << 2 | 0 | 0) | 0;
                 if ($12) {
                  continue label$81
                 }
                 break label$7;
                }
                break label$81;
               };
               $14 = 0;
               $16 = $15;
               if (!(mbsinit($3 + 296 | 0 | 0) | 0)) {
                break label$8
               }
               break label$78;
              }
              label$87 : {
               if (!$11) {
                break label$87
               }
               $1 = 0;
               $12 = malloc($16 | 0) | 0;
               if (!$12) {
                break label$10
               }
               label$88 : while (1) {
                $15 = $12;
                label$89 : while (1) {
                 label$90 : {
                  label$91 : {
                   $12 = HEAP32[($0 + 4 | 0) >> 2] | 0;
                   if (($12 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
                    break label$91
                   }
                   HEAP32[($0 + 4 | 0) >> 2] = $12 + 1 | 0;
                   $12 = HEAPU8[$12 >> 0] | 0;
                   break label$90;
                  }
                  $12 = __shgetc($0 | 0) | 0;
                 }
                 label$92 : {
                  if (HEAPU8[(($12 + ($3 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                   break label$92
                  }
                  $16 = 0;
                  $14 = $15;
                  break label$78;
                 }
                 HEAP8[($15 + $1 | 0) >> 0] = $12;
                 $1 = $1 + 1 | 0;
                 if (($1 | 0) != ($16 | 0)) {
                  continue label$89
                 }
                 break label$89;
                };
                $5 = 1;
                $16 = $16 << 1 | 0 | 1 | 0;
                $12 = realloc($15 | 0, $16 | 0) | 0;
                if ($12) {
                 continue label$88
                }
                break label$88;
               };
               $14 = $15;
               $15 = 0;
               break label$7;
              }
              $1 = 0;
              label$93 : {
               if (!$10) {
                break label$93
               }
               label$94 : while (1) {
                label$95 : {
                 label$96 : {
                  $12 = HEAP32[($0 + 4 | 0) >> 2] | 0;
                  if (($12 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
                   break label$96
                  }
                  HEAP32[($0 + 4 | 0) >> 2] = $12 + 1 | 0;
                  $12 = HEAPU8[$12 >> 0] | 0;
                  break label$95;
                 }
                 $12 = __shgetc($0 | 0) | 0;
                }
                label$97 : {
                 if (HEAPU8[(($12 + ($3 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                  break label$97
                 }
                 $16 = 0;
                 $15 = $10;
                 $14 = $10;
                 break label$78;
                }
                HEAP8[($10 + $1 | 0) >> 0] = $12;
                $1 = $1 + 1 | 0;
                continue label$94;
               };
              }
              label$98 : while (1) {
               label$99 : {
                label$100 : {
                 $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
                 if (($1 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
                  break label$100
                 }
                 HEAP32[($0 + 4 | 0) >> 2] = $1 + 1 | 0;
                 $1 = HEAPU8[$1 >> 0] | 0;
                 break label$99;
                }
                $1 = __shgetc($0 | 0) | 0;
               }
               if (HEAPU8[(($1 + ($3 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                continue label$98
               }
               break label$98;
              };
              $15 = 0;
              $14 = 0;
              $16 = 0;
              $1 = 0;
             }
             $12 = HEAP32[($0 + 4 | 0) >> 2] | 0;
             label$101 : {
              i64toi32_i32$3 = $0;
              i64toi32_i32$1 = HEAP32[($0 + 112 | 0) >> 2] | 0;
              i64toi32_i32$4 = HEAP32[($0 + 116 | 0) >> 2] | 0;
              i64toi32_i32$3 = i64toi32_i32$1;
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = 0;
              if ((i64toi32_i32$4 | 0) < (i64toi32_i32$1 | 0)) {
               $76 = 1
              } else {
               if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$1 | 0)) {
                if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
                 $77 = 0
                } else {
                 $77 = 1
                }
                $78 = $77;
               } else {
                $78 = 0
               }
               $76 = $78;
              }
              if ($76) {
               break label$101
              }
              $12 = $12 + -1 | 0;
              HEAP32[($0 + 4 | 0) >> 2] = $12;
             }
             i64toi32_i32$0 = $0;
             i64toi32_i32$3 = HEAP32[($0 + 120 | 0) >> 2] | 0;
             i64toi32_i32$4 = HEAP32[($0 + 124 | 0) >> 2] | 0;
             $652 = i64toi32_i32$3;
             $652$hi = i64toi32_i32$4;
             i64toi32_i32$3 = $12 - (HEAP32[($0 + 44 | 0) >> 2] | 0) | 0;
             i64toi32_i32$4 = i64toi32_i32$3 >> 31 | 0;
             $657 = i64toi32_i32$3;
             $657$hi = i64toi32_i32$4;
             i64toi32_i32$4 = $652$hi;
             i64toi32_i32$0 = $652;
             i64toi32_i32$3 = $657$hi;
             i64toi32_i32$1 = $657;
             i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
             i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
             if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
              i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
             }
             $20 = i64toi32_i32$2;
             $20$hi = i64toi32_i32$5;
             if (!(i64toi32_i32$2 | i64toi32_i32$5 | 0)) {
              break label$11
             }
             i64toi32_i32$5 = $20$hi;
             i64toi32_i32$5 = $18$hi;
             i64toi32_i32$5 = $20$hi;
             i64toi32_i32$4 = $20;
             i64toi32_i32$0 = $18$hi;
             i64toi32_i32$1 = $18;
             if (!($13 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) | 0) | 0)) {
              break label$11
             }
             label$102 : {
              if (!$11) {
               break label$102
              }
              HEAP32[$10 >> 2] = $15;
             }
             label$103 : {
              if (($17 | 0) == (99 | 0)) {
               break label$103
              }
              label$104 : {
               if (!$16) {
                break label$104
               }
               HEAP32[($16 + ($1 << 2 | 0) | 0) >> 2] = 0;
              }
              label$105 : {
               if ($14) {
                break label$105
               }
               $14 = 0;
               break label$103;
              }
              HEAP8[($14 + $1 | 0) >> 0] = 0;
             }
             $15 = $16;
            }
            i64toi32_i32$1 = $0;
            i64toi32_i32$4 = HEAP32[($0 + 120 | 0) >> 2] | 0;
            i64toi32_i32$5 = HEAP32[($0 + 124 | 0) >> 2] | 0;
            $685$hi = i64toi32_i32$5;
            i64toi32_i32$5 = $9$hi;
            i64toi32_i32$5 = $685$hi;
            i64toi32_i32$1 = i64toi32_i32$4;
            i64toi32_i32$4 = $9$hi;
            i64toi32_i32$0 = $9;
            i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
            i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
            if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
             i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
            }
            $687$hi = i64toi32_i32$2;
            i64toi32_i32$1 = (HEAP32[($0 + 4 | 0) >> 2] | 0) - (HEAP32[($0 + 44 | 0) >> 2] | 0) | 0;
            i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
            $693 = i64toi32_i32$1;
            $693$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $687$hi;
            i64toi32_i32$5 = i64toi32_i32$3;
            i64toi32_i32$1 = $693$hi;
            i64toi32_i32$0 = $693;
            i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
            i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
            if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
            }
            $9 = i64toi32_i32$4;
            $9$hi = i64toi32_i32$3;
            $7 = $7 + (($10 | 0) != (0 | 0)) | 0;
           }
           $1 = $6 + 1 | 0;
           $6 = HEAPU8[($6 + 1 | 0) >> 0] | 0;
           if ($6) {
            continue label$12
           }
           break label$2;
          };
         }
         $15 = $16;
         break label$9;
        }
        $5 = 1;
        $14 = 0;
        $15 = 0;
        break label$7;
       }
       $5 = $11;
       break label$3;
      }
      $5 = $11;
     }
     if ($7) {
      break label$3
     }
    }
    $7 = -1;
   }
   if (!$5) {
    break label$2
   }
   free($14 | 0);
   free($15 | 0);
  }
  label$106 : {
   if (!$4) {
    break label$106
   }
   __unlockfile($0 | 0);
  }
  __stack_pointer = $3 + 304 | 0;
  return $7 | 0;
 }
 
 function arg_n($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[($2 + 12 | 0) >> 2] = $0;
  $1 = $0 + ($1 >>> 0 > 1 >>> 0 ? ($1 << 2 | 0) + -4 | 0 : 0) | 0;
  HEAP32[($2 + 8 | 0) >> 2] = $1 + 4 | 0;
  return HEAP32[$1 >> 2] | 0 | 0;
 }
 
 function store_int($0, $1, $2, $2$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$0 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   label$2 : {
    switch ($1 + 2 | 0 | 0) {
    case 0:
     i64toi32_i32$0 = $2$hi;
     HEAP8[$0 >> 0] = $2;
     return;
    case 1:
     i64toi32_i32$0 = $2$hi;
     HEAP16[$0 >> 1] = $2;
     return;
    case 2:
    case 3:
     i64toi32_i32$0 = $2$hi;
     HEAP32[$0 >> 2] = $2;
     return;
    case 5:
     break label$2;
    default:
     break label$1;
    };
   }
   i64toi32_i32$0 = $2$hi;
   HEAP32[$0 >> 2] = $2;
   HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
 }
 
 function vsscanf($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 144 | 0;
  __stack_pointer = $3;
  $3 = memset($3 | 0, 0 | 0, 144 | 0) | 0;
  HEAP32[($3 + 76 | 0) >> 2] = -1;
  HEAP32[($3 + 44 | 0) >> 2] = $0;
  HEAP32[($3 + 32 | 0) >> 2] = 40;
  HEAP32[($3 + 84 | 0) >> 2] = $0;
  $0 = vfscanf($3 | 0, $1 | 0, $2 | 0) | 0;
  __stack_pointer = $3 + 144 | 0;
  return $0 | 0;
 }
 
 function string_read($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $5 = 0;
  $3 = HEAP32[($0 + 84 | 0) >> 2] | 0;
  $4 = $2 + 256 | 0;
  $5 = memchr($3 | 0, 0 | 0, $4 | 0) | 0;
  $4 = $5 ? $5 - $3 | 0 : $4;
  $2 = $4 >>> 0 < $2 >>> 0 ? $4 : $2;
  __memcpy($1 | 0, $3 | 0, $2 | 0) | 0;
  $4 = $3 + $4 | 0;
  HEAP32[($0 + 84 | 0) >> 2] = $4;
  HEAP32[($0 + 8 | 0) >> 2] = $4;
  HEAP32[($0 + 4 | 0) >> 2] = $3 + $2 | 0;
  return $2 | 0;
 }
 
 function __wasi_syscall_ret($0) {
  $0 = $0 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if ($0) {
    break label$1
   }
   return 0 | 0;
  }
  (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = $0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  return -1 | 0;
 }
 
 function wcrtomb($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = 1;
  label$1 : {
   label$2 : {
    if (!$0) {
     break label$2
    }
    if ($1 >>> 0 <= 127 >>> 0) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if (HEAP32[(HEAP32[((__get_tp() | 0) + 96 | 0) >> 2] | 0) >> 2] | 0) {
       break label$4
      }
      if (($1 & -128 | 0 | 0) == (57216 | 0)) {
       break label$1
      }
      (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 25), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      break label$3;
     }
     label$5 : {
      if ($1 >>> 0 > 2047 >>> 0) {
       break label$5
      }
      HEAP8[($0 + 1 | 0) >> 0] = $1 & 63 | 0 | 128 | 0;
      HEAP8[$0 >> 0] = $1 >>> 6 | 0 | 192 | 0;
      return 2 | 0;
     }
     label$6 : {
      label$7 : {
       if ($1 >>> 0 < 55296 >>> 0) {
        break label$7
       }
       if (($1 & -8192 | 0 | 0) != (57344 | 0)) {
        break label$6
       }
      }
      HEAP8[($0 + 2 | 0) >> 0] = $1 & 63 | 0 | 128 | 0;
      HEAP8[$0 >> 0] = $1 >>> 12 | 0 | 224 | 0;
      HEAP8[($0 + 1 | 0) >> 0] = ($1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      return 3 | 0;
     }
     label$8 : {
      if (($1 + -65536 | 0) >>> 0 > 1048575 >>> 0) {
       break label$8
      }
      HEAP8[($0 + 3 | 0) >> 0] = $1 & 63 | 0 | 128 | 0;
      HEAP8[$0 >> 0] = $1 >>> 18 | 0 | 240 | 0;
      HEAP8[($0 + 2 | 0) >> 0] = ($1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      HEAP8[($0 + 1 | 0) >> 0] = ($1 >>> 12 | 0) & 63 | 0 | 128 | 0;
      return 4 | 0;
     }
     (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 25), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    $3 = -1;
   }
   return $3 | 0;
  }
  HEAP8[$0 >> 0] = $1;
  return 1 | 0;
 }
 
 function wctomb($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  label$1 : {
   if ($0) {
    break label$1
   }
   return 0 | 0;
  }
  return wcrtomb($0 | 0, $1 | 0, 0 | 0) | 0 | 0;
 }
 
 function emscripten_get_heap_size() {
  return __wasm_memory_size() << 16 | 0 | 0;
 }
 
 function initialize_emmalloc_heap() {
  var $0 = 0, $1 = 0, $2 = 0;
  $0 = 0;
  label$1 : while (1) {
   $1 = $0 << 4 | 0;
   $2 = $1 + 94e3 | 0;
   HEAP32[($1 + 94004 | 0) >> 2] = $2;
   HEAP32[($1 + 94008 | 0) >> 2] = $2;
   $0 = $0 + 1 | 0;
   if (($0 | 0) != (64 | 0)) {
    continue label$1
   }
   break label$1;
  };
  claim_more_memory(48 | 0) | 0;
 }
 
 function claim_more_memory($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $2 = 0, $6 = 0, $16 = 0, $5 = 0, $186 = 0, $186$hi = 0, $188$hi = 0, $189$hi = 0, $190 = 0;
  label$1 : {
   $1 = sbrk($0 | 0) | 0;
   if (($1 | 0) == (-1 | 0)) {
    break label$1
   }
   $2 = $1 + $0 | 0;
   $3 = $2 + -16 | 0;
   HEAP32[($3 + 12 | 0) >> 2] = 16;
   HEAP32[$3 >> 2] = 16;
   $0 = 0;
   label$2 : {
    $4 = HEAP32[(0 + 95024 | 0) >> 2] | 0;
    if (!$4) {
     break label$2
    }
    $0 = HEAP32[($4 + 8 | 0) >> 2] | 0;
   }
   label$3 : {
    label$4 : {
     label$5 : {
      if (($1 | 0) != ($0 | 0)) {
       break label$5
      }
      $0 = $1 - ((HEAP32[($1 + -4 | 0) >> 2] | 0) & -2 | 0) | 0;
      $5 = HEAP32[($0 + -4 | 0) >> 2] | 0;
      HEAP32[($4 + 8 | 0) >> 2] = $2;
      $6 = -16;
      $0 = $0 - ($5 & -2 | 0) | 0;
      if (!((HEAPU8[(($0 + (HEAP32[$0 >> 2] | 0) | 0) + -4 | 0) >> 0] | 0) & 1 | 0)) {
       break label$4
      }
      $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      HEAP32[($4 + 8 | 0) >> 2] = HEAP32[($0 + 8 | 0) >> 2] | 0;
      HEAP32[((HEAP32[($0 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = $4;
      $3 = $3 - $0 | 0;
      HEAP32[$0 >> 2] = $3;
      HEAP32[((($3 & -4 | 0) + $0 | 0) + -4 | 0) >> 2] = $3 | 1 | 0;
      label$6 : {
       label$7 : {
        $3 = (HEAP32[$0 >> 2] | 0) + -8 | 0;
        if ($3 >>> 0 > 127 >>> 0) {
         break label$7
        }
        $3 = ($3 >>> 3 | 0) + -1 | 0;
        break label$6;
       }
       $4 = Math_clz32($3);
       label$8 : {
        if ($3 >>> 0 > 4095 >>> 0) {
         break label$8
        }
        $3 = ((($3 >>> (29 - $4 | 0) | 0) ^ 4 | 0) - ($4 << 2 | 0) | 0) + 110 | 0;
        break label$6;
       }
       $3 = ((($3 >>> (30 - $4 | 0) | 0) ^ 2 | 0) - ($4 << 1 | 0) | 0) + 71 | 0;
       $3 = $3 >>> 0 < 63 >>> 0 ? $3 : 63;
      }
      $4 = $3 << 4 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $4 + 94e3 | 0;
      $4 = $4 + 94008 | 0;
      HEAP32[($0 + 8 | 0) >> 2] = HEAP32[$4 >> 2] | 0;
      HEAP32[$4 >> 2] = $0;
      break label$3;
     }
     $6 = 16;
     HEAP32[($1 + 12 | 0) >> 2] = 16;
     HEAP32[$1 >> 2] = 16;
     HEAP32[($1 + 8 | 0) >> 2] = $2;
     HEAP32[($1 + 4 | 0) >> 2] = $4;
     HEAP32[(0 + 95024 | 0) >> 2] = $1;
    }
    $0 = $1 + $6 | 0;
    $3 = $3 - $0 | 0;
    HEAP32[$0 >> 2] = $3;
    HEAP32[((($3 & -4 | 0) + $0 | 0) + -4 | 0) >> 2] = $3 | 1 | 0;
    label$9 : {
     label$10 : {
      $3 = (HEAP32[$0 >> 2] | 0) + -8 | 0;
      if ($3 >>> 0 > 127 >>> 0) {
       break label$10
      }
      $3 = ($3 >>> 3 | 0) + -1 | 0;
      break label$9;
     }
     $4 = Math_clz32($3);
     label$11 : {
      if ($3 >>> 0 > 4095 >>> 0) {
       break label$11
      }
      $3 = ((($3 >>> (29 - $4 | 0) | 0) ^ 4 | 0) - ($4 << 2 | 0) | 0) + 110 | 0;
      break label$9;
     }
     $3 = ((($3 >>> (30 - $4 | 0) | 0) ^ 2 | 0) - ($4 << 1 | 0) | 0) + 71 | 0;
     $3 = $3 >>> 0 < 63 >>> 0 ? $3 : 63;
    }
    $4 = $3 << 4 | 0;
    HEAP32[($0 + 4 | 0) >> 2] = $4 + 94e3 | 0;
    $4 = $4 + 94008 | 0;
    HEAP32[($0 + 8 | 0) >> 2] = HEAP32[$4 >> 2] | 0;
    HEAP32[$4 >> 2] = $0;
   }
   HEAP32[((HEAP32[($0 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = $0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 95032 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 95036 | 0) >> 2] | 0;
   $186 = i64toi32_i32$0;
   $186$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   $188$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 1;
   i64toi32_i32$0 = $188$hi;
   i64toi32_i32$4 = $3 & 31 | 0;
   if (32 >>> 0 <= ($3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $16 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $16 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $189$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $186$hi;
   i64toi32_i32$1 = $186;
   i64toi32_i32$2 = $189$hi;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $190 = i64toi32_i32$1 | $16 | 0;
   i64toi32_i32$1 = 0;
   HEAP32[(i64toi32_i32$1 + 95032 | 0) >> 2] = $190;
   HEAP32[(i64toi32_i32$1 + 95036 | 0) >> 2] = i64toi32_i32$2;
  }
  return ($1 | 0) != (-1 | 0) | 0;
 }
 
 function emmalloc_memalign($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4 = 0, $3 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $7 = 0, $2 = 0, $6 = 0, $5$hi = 0, $6$hi = 0, $5 = 0, $8 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $60$hi = 0, $112 = 0, $112$hi = 0, $114$hi = 0, $115 = 0, $115$hi = 0, $116 = 0;
  $2 = 0;
  label$1 : {
   label$2 : {
    if ($0 & ($0 + -1 | 0) | 0) {
     break label$2
    }
    if ($1 >>> 0 > -57 >>> 0) {
     break label$2
    }
    label$3 : while (1) {
     $3 = $0 >>> 0 > 8 >>> 0;
     label$4 : {
      label$5 : {
       $1 = $1 >>> 0 > 8 >>> 0 ? ($1 + 3 | 0) & -4 | 0 : 8;
       if ($1 >>> 0 > 127 >>> 0) {
        break label$5
       }
       $4 = ($1 >>> 3 | 0) + -1 | 0;
       break label$4;
      }
      $4 = Math_clz32($1);
      label$6 : {
       if ($1 >>> 0 > 4095 >>> 0) {
        break label$6
       }
       $4 = ((($1 >>> (29 - $4 | 0) | 0) ^ 4 | 0) - ($4 << 2 | 0) | 0) + 110 | 0;
       break label$4;
      }
      $4 = ((($1 >>> (30 - $4 | 0) | 0) ^ 2 | 0) - ($4 << 1 | 0) | 0) + 71 | 0;
      $4 = $4 >>> 0 < 63 >>> 0 ? $4 : 63;
     }
     $0 = $3 ? $0 : 8;
     label$7 : {
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 95032 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 95036 | 0) >> 2] | 0;
      $5 = i64toi32_i32$0;
      $5$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      $60$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $5$hi;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$0 = $60$hi;
      i64toi32_i32$3 = $4;
      i64toi32_i32$4 = $4 & 31 | 0;
      if (32 >>> 0 <= ($4 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $23 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
       $23 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
      }
      $6 = $23;
      $6$hi = i64toi32_i32$0;
      if (!($6 | i64toi32_i32$0 | 0)) {
       break label$7
      }
      label$8 : while (1) {
       i64toi32_i32$0 = $6$hi;
       i64toi32_i32$0 = __wasm_ctz_i64($6 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $5 = i64toi32_i32$0;
       $5$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $6$hi;
       i64toi32_i32$1 = $6;
       i64toi32_i32$0 = $5$hi;
       i64toi32_i32$3 = $5;
       i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = 0;
        $24 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
        $24 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
       }
       $6 = $24;
       $6$hi = i64toi32_i32$0;
       label$9 : {
        label$10 : {
         i64toi32_i32$0 = $5$hi;
         $4 = $4 + $5 | 0;
         $7 = $4 << 4 | 0;
         $3 = HEAP32[($7 + 94008 | 0) >> 2] | 0;
         $8 = $7 + 94e3 | 0;
         if (($3 | 0) == ($8 | 0)) {
          break label$10
         }
         $2 = attempt_allocate($3 | 0, $0 | 0, $1 | 0) | 0;
         if ($2) {
          break label$2
         }
         $2 = HEAP32[($3 + 4 | 0) >> 2] | 0;
         HEAP32[($2 + 8 | 0) >> 2] = HEAP32[($3 + 8 | 0) >> 2] | 0;
         HEAP32[((HEAP32[($3 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = $2;
         HEAP32[($3 + 8 | 0) >> 2] = $8;
         $7 = $7 + 94004 | 0;
         HEAP32[($3 + 4 | 0) >> 2] = HEAP32[$7 >> 2] | 0;
         HEAP32[$7 >> 2] = $3;
         HEAP32[((HEAP32[($3 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] = $3;
         i64toi32_i32$0 = $6$hi;
         i64toi32_i32$2 = $6;
         i64toi32_i32$1 = 0;
         i64toi32_i32$3 = 1;
         i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = 0;
          $25 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
         } else {
          i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
          $25 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
         }
         $6 = $25;
         $6$hi = i64toi32_i32$1;
         $4 = $4 + 1 | 0;
         break label$9;
        }
        i64toi32_i32$0 = 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 95032 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 95036 | 0) >> 2] | 0;
        $112 = i64toi32_i32$1;
        $112$hi = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        $114$hi = i64toi32_i32$2;
        i64toi32_i32$2 = -1;
        i64toi32_i32$1 = $114$hi;
        i64toi32_i32$1 = __wasm_rotl_i64(-2 | 0, i64toi32_i32$2 | 0, $4 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $115 = i64toi32_i32$1;
        $115$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $112$hi;
        i64toi32_i32$0 = $112;
        i64toi32_i32$1 = $115$hi;
        i64toi32_i32$3 = $115;
        i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
        $116 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
        i64toi32_i32$0 = 0;
        HEAP32[(i64toi32_i32$0 + 95032 | 0) >> 2] = $116;
        HEAP32[(i64toi32_i32$0 + 95036 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$1 = $6$hi;
        i64toi32_i32$2 = $6;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 1;
        i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
        $6 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
        $6$hi = i64toi32_i32$0;
       }
       i64toi32_i32$0 = $6$hi;
       i64toi32_i32$1 = $6;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0) {
        continue label$8
       }
       break label$8;
      };
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 95032 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 95036 | 0) >> 2] | 0;
      $5 = i64toi32_i32$1;
      $5$hi = i64toi32_i32$0;
     }
     label$11 : {
      label$12 : {
       i64toi32_i32$0 = $5$hi;
       if (!($5 | i64toi32_i32$0 | 0)) {
        break label$12
       }
       i64toi32_i32$0 = $5$hi;
       i64toi32_i32$1 = $5;
       i64toi32_i32$2 = Math_clz32(i64toi32_i32$0);
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$2 | 0) == (32 | 0)) {
        $26 = Math_clz32(i64toi32_i32$1) + 32 | 0
       } else {
        $26 = i64toi32_i32$2
       }
       $8 = 63 - $26 | 0;
       $7 = $8 << 4 | 0;
       $3 = HEAP32[($7 + 94008 | 0) >> 2] | 0;
       label$13 : {
        i64toi32_i32$3 = $5$hi;
        i64toi32_i32$1 = $5;
        i64toi32_i32$0 = 0;
        i64toi32_i32$2 = 1073741824;
        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
         break label$13
        }
        $4 = 99;
        $7 = $7 + 94e3 | 0;
        if (($3 | 0) == ($7 | 0)) {
         break label$13
        }
        label$14 : while (1) {
         if (!$4) {
          break label$13
         }
         $2 = attempt_allocate($3 | 0, $0 | 0, $1 | 0) | 0;
         if ($2) {
          break label$2
         }
         $4 = $4 + -1 | 0;
         $3 = HEAP32[($3 + 8 | 0) >> 2] | 0;
         if (($3 | 0) != ($7 | 0)) {
          continue label$14
         }
         break label$14;
        };
        $3 = $7;
       }
       if (claim_more_memory($1 + 48 | 0 | 0) | 0) {
        break label$11
       }
       if (!$3) {
        break label$1
       }
       $4 = ($8 << 4 | 0) + 94e3 | 0;
       if (($3 | 0) == ($4 | 0)) {
        break label$1
       }
       label$15 : while (1) {
        $2 = attempt_allocate($3 | 0, $0 | 0, $1 | 0) | 0;
        if ($2) {
         break label$2
        }
        $3 = HEAP32[($3 + 8 | 0) >> 2] | 0;
        if (($3 | 0) != ($4 | 0)) {
         continue label$15
        }
        break label$1;
       };
      }
      if (!(claim_more_memory($1 + 48 | 0 | 0) | 0)) {
       break label$1
      }
     }
     $2 = 0;
     if ($0 & ($0 + -1 | 0) | 0) {
      break label$2
     }
     if ($1 >>> 0 <= -57 >>> 0) {
      continue label$3
     }
     break label$3;
    };
   }
   return $2 | 0;
  }
  return 0 | 0;
 }
 
 function attempt_allocate($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $15 = 0, $135 = 0, $135$hi = 0, $137$hi = 0, $138$hi = 0, $139 = 0;
  $3 = 0;
  label$1 : {
   $4 = $0 + 4 | 0;
   $5 = (($1 + $4 | 0) + -1 | 0) & (0 - $1 | 0) | 0;
   $1 = HEAP32[$0 >> 2] | 0;
   if (($5 + $2 | 0) >>> 0 > (($0 + $1 | 0) + -4 | 0) >>> 0) {
    break label$1
   }
   $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($3 + 8 | 0) >> 2] = HEAP32[($0 + 8 | 0) >> 2] | 0;
   HEAP32[((HEAP32[($0 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = $3;
   label$2 : {
    if (($4 | 0) == ($5 | 0)) {
     break label$2
    }
    $3 = $0 - ((HEAP32[($0 + -4 | 0) >> 2] | 0) & -2 | 0) | 0;
    $4 = $5 - $4 | 0;
    $5 = (HEAP32[$3 >> 2] | 0) + $4 | 0;
    HEAP32[$3 >> 2] = $5;
    HEAP32[((($5 & -4 | 0) + $3 | 0) + -4 | 0) >> 2] = $5;
    $0 = $0 + $4 | 0;
    $1 = $1 - $4 | 0;
    HEAP32[$0 >> 2] = $1;
   }
   label$3 : {
    label$4 : {
     if (($2 + 24 | 0) >>> 0 > $1 >>> 0) {
      break label$4
     }
     $3 = ($0 + $2 | 0) + 8 | 0;
     $1 = ($1 - $2 | 0) + -8 | 0;
     HEAP32[$3 >> 2] = $1;
     HEAP32[((($1 & -4 | 0) + $3 | 0) + -4 | 0) >> 2] = $1 | 1 | 0;
     label$5 : {
      label$6 : {
       $1 = (HEAP32[$3 >> 2] | 0) + -8 | 0;
       if ($1 >>> 0 > 127 >>> 0) {
        break label$6
       }
       $1 = ($1 >>> 3 | 0) + -1 | 0;
       break label$5;
      }
      $4 = Math_clz32($1);
      label$7 : {
       if ($1 >>> 0 > 4095 >>> 0) {
        break label$7
       }
       $1 = ((($1 >>> (29 - $4 | 0) | 0) ^ 4 | 0) - ($4 << 2 | 0) | 0) + 110 | 0;
       break label$5;
      }
      $1 = ((($1 >>> (30 - $4 | 0) | 0) ^ 2 | 0) - ($4 << 1 | 0) | 0) + 71 | 0;
      $1 = $1 >>> 0 < 63 >>> 0 ? $1 : 63;
     }
     $4 = $1 << 4 | 0;
     HEAP32[($3 + 4 | 0) >> 2] = $4 + 94e3 | 0;
     $4 = $4 + 94008 | 0;
     HEAP32[($3 + 8 | 0) >> 2] = HEAP32[$4 >> 2] | 0;
     HEAP32[$4 >> 2] = $3;
     HEAP32[((HEAP32[($3 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = $3;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 95032 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 95036 | 0) >> 2] | 0;
     $135 = i64toi32_i32$0;
     $135$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $137$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$0 = $137$hi;
     i64toi32_i32$4 = $1 & 31 | 0;
     if (32 >>> 0 <= ($1 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $15 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $15 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $138$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $135$hi;
     i64toi32_i32$1 = $135;
     i64toi32_i32$2 = $138$hi;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $139 = i64toi32_i32$1 | $15 | 0;
     i64toi32_i32$1 = 0;
     HEAP32[(i64toi32_i32$1 + 95032 | 0) >> 2] = $139;
     HEAP32[(i64toi32_i32$1 + 95036 | 0) >> 2] = i64toi32_i32$2;
     $2 = $2 + 8 | 0;
     HEAP32[$0 >> 2] = $2;
     HEAP32[((($2 & -4 | 0) + $0 | 0) + -4 | 0) >> 2] = $2;
     break label$3;
    }
    HEAP32[(($0 + $1 | 0) + -4 | 0) >> 2] = $1;
   }
   $3 = $0 + 4 | 0;
  }
  return $3 | 0;
 }
 
 function malloc($0) {
  $0 = $0 | 0;
  return emmalloc_memalign(8 | 0, $0 | 0) | 0 | 0;
 }
 
 function emmalloc_free($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $1 = 0, i64toi32_i32$0 = 0, $2 = 0, i64toi32_i32$4 = 0, $15 = 0, $16 = 0, $116 = 0, $116$hi = 0, $118$hi = 0, $119$hi = 0, $120 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   $1 = $0 + -4 | 0;
   $2 = HEAP32[$1 >> 2] | 0;
   $3 = $2;
   $4 = $1;
   label$2 : {
    $0 = HEAP32[($0 + -8 | 0) >> 2] | 0;
    $16 = $0;
    $0 = $0 & -2 | 0;
    if (($16 | 0) == ($0 | 0)) {
     break label$2
    }
    $4 = $1 - $0 | 0;
    $3 = HEAP32[($4 + 4 | 0) >> 2] | 0;
    HEAP32[($3 + 8 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
    HEAP32[((HEAP32[($4 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = $3;
    $3 = $0 + $2 | 0;
   }
   label$3 : {
    $0 = $1 + $2 | 0;
    $1 = HEAP32[$0 >> 2] | 0;
    if (($1 | 0) == (HEAP32[(($0 + $1 | 0) + -4 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($2 + 8 | 0) >> 2] = HEAP32[($0 + 8 | 0) >> 2] | 0;
    HEAP32[((HEAP32[($0 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = $2;
    $3 = $1 + $3 | 0;
   }
   HEAP32[$4 >> 2] = $3;
   HEAP32[((($3 & -4 | 0) + $4 | 0) + -4 | 0) >> 2] = $3 | 1 | 0;
   label$4 : {
    label$5 : {
     $3 = (HEAP32[$4 >> 2] | 0) + -8 | 0;
     if ($3 >>> 0 > 127 >>> 0) {
      break label$5
     }
     $3 = ($3 >>> 3 | 0) + -1 | 0;
     break label$4;
    }
    $0 = Math_clz32($3);
    label$6 : {
     if ($3 >>> 0 > 4095 >>> 0) {
      break label$6
     }
     $3 = ((($3 >>> (29 - $0 | 0) | 0) ^ 4 | 0) - ($0 << 2 | 0) | 0) + 110 | 0;
     break label$4;
    }
    $3 = ((($3 >>> (30 - $0 | 0) | 0) ^ 2 | 0) - ($0 << 1 | 0) | 0) + 71 | 0;
    $3 = $3 >>> 0 < 63 >>> 0 ? $3 : 63;
   }
   $0 = $3 << 4 | 0;
   HEAP32[($4 + 4 | 0) >> 2] = $0 + 94e3 | 0;
   $0 = $0 + 94008 | 0;
   HEAP32[($4 + 8 | 0) >> 2] = HEAP32[$0 >> 2] | 0;
   HEAP32[$0 >> 2] = $4;
   HEAP32[((HEAP32[($4 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = $4;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 95032 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 95036 | 0) >> 2] | 0;
   $116 = i64toi32_i32$0;
   $116$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   $118$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 1;
   i64toi32_i32$0 = $118$hi;
   i64toi32_i32$4 = $3 & 31 | 0;
   if (32 >>> 0 <= ($3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $15 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $15 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $119$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $116$hi;
   i64toi32_i32$1 = $116;
   i64toi32_i32$2 = $119$hi;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $120 = i64toi32_i32$1 | $15 | 0;
   i64toi32_i32$1 = 0;
   HEAP32[(i64toi32_i32$1 + 95032 | 0) >> 2] = $120;
   HEAP32[(i64toi32_i32$1 + 95036 | 0) >> 2] = i64toi32_i32$2;
  }
 }
 
 function free($0) {
  $0 = $0 | 0;
  emmalloc_free($0 | 0);
 }
 
 function emmalloc_aligned_realloc($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  label$1 : {
   if ($0) {
    break label$1
   }
   return emmalloc_memalign($1 | 0, $2 | 0) | 0 | 0;
  }
  label$2 : {
   if ($2) {
    break label$2
   }
   free($0 | 0);
   return 0 | 0;
  }
  $3 = 0;
  label$3 : {
   if ($2 >>> 0 > -57 >>> 0) {
    break label$3
   }
   label$4 : {
    $4 = $0 + -4 | 0;
    $2 = $2 >>> 0 > 8 >>> 0 ? ($2 + 3 | 0) & -4 | 0 : 8;
    if (!(acquire_and_attempt_region_resize($4 | 0, $2 + 8 | 0 | 0) | 0)) {
     break label$4
    }
    return $0 | 0;
   }
   $1 = emmalloc_memalign($1 | 0, $2 | 0) | 0;
   if (!$1) {
    break label$3
   }
   $3 = (HEAP32[$4 >> 2] | 0) + -8 | 0;
   __memcpy($1 | 0, $0 | 0, ($2 >>> 0 < $3 >>> 0 ? $2 : $3) | 0) | 0;
   free($0 | 0);
   $3 = $1;
  }
  return $3 | 0;
 }
 
 function acquire_and_attempt_region_resize($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, i64toi32_i32$1 = 0, $2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $6 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $5 = 0, $4 = 0, $22 = 0, $23 = 0, $98 = 0, $98$hi = 0, $100$hi = 0, $101$hi = 0, $102 = 0, $209 = 0, $209$hi = 0, $211$hi = 0, $212$hi = 0, $213 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $2 = HEAP32[$0 >> 2] | 0;
     $3 = $0 + $2 | 0;
     $4 = HEAP32[$3 >> 2] | 0;
     $5 = $3 + $4 | 0;
     if (($4 | 0) == (HEAP32[($5 + -4 | 0) >> 2] | 0 | 0)) {
      break label$3
     }
     label$4 : {
      $6 = $0 + $1 | 0;
      if (($6 + 16 | 0) >>> 0 > $5 >>> 0) {
       break label$4
      }
      $2 = HEAP32[($3 + 4 | 0) >> 2] | 0;
      HEAP32[($2 + 8 | 0) >> 2] = HEAP32[($3 + 8 | 0) >> 2] | 0;
      HEAP32[((HEAP32[($3 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = $2;
      $3 = $5 - $6 | 0;
      HEAP32[$6 >> 2] = $3;
      HEAP32[((($3 & -4 | 0) + $6 | 0) + -4 | 0) >> 2] = $3 | 1 | 0;
      label$5 : {
       label$6 : {
        $3 = (HEAP32[$6 >> 2] | 0) + -8 | 0;
        if ($3 >>> 0 > 127 >>> 0) {
         break label$6
        }
        $3 = ($3 >>> 3 | 0) + -1 | 0;
        break label$5;
       }
       $2 = Math_clz32($3);
       label$7 : {
        if ($3 >>> 0 > 4095 >>> 0) {
         break label$7
        }
        $3 = ((($3 >>> (29 - $2 | 0) | 0) ^ 4 | 0) - ($2 << 2 | 0) | 0) + 110 | 0;
        break label$5;
       }
       $3 = ((($3 >>> (30 - $2 | 0) | 0) ^ 2 | 0) - ($2 << 1 | 0) | 0) + 71 | 0;
       $3 = $3 >>> 0 < 63 >>> 0 ? $3 : 63;
      }
      $2 = $3 << 4 | 0;
      HEAP32[($6 + 4 | 0) >> 2] = $2 + 94e3 | 0;
      $2 = $2 + 94008 | 0;
      HEAP32[($6 + 8 | 0) >> 2] = HEAP32[$2 >> 2] | 0;
      HEAP32[$2 >> 2] = $6;
      HEAP32[((HEAP32[($6 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = $6;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 95032 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 95036 | 0) >> 2] | 0;
      $98 = i64toi32_i32$0;
      $98$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      $100$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 1;
      i64toi32_i32$0 = $100$hi;
      i64toi32_i32$3 = $3;
      i64toi32_i32$4 = $3 & 31 | 0;
      if (32 >>> 0 <= ($3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       $22 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
       $22 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      }
      $101$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $98$hi;
      i64toi32_i32$1 = $98;
      i64toi32_i32$2 = $101$hi;
      i64toi32_i32$3 = $22;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      $102 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
      i64toi32_i32$1 = 0;
      HEAP32[(i64toi32_i32$1 + 95032 | 0) >> 2] = $102;
      HEAP32[(i64toi32_i32$1 + 95036 | 0) >> 2] = i64toi32_i32$2;
      HEAP32[$0 >> 2] = $1;
      HEAP32[((($1 & -4 | 0) + $0 | 0) + -4 | 0) >> 2] = $1;
      return 1 | 0;
     }
     if ($6 >>> 0 > $5 >>> 0) {
      break label$2
     }
     $1 = HEAP32[($3 + 4 | 0) >> 2] | 0;
     HEAP32[($1 + 8 | 0) >> 2] = HEAP32[($3 + 8 | 0) >> 2] | 0;
     HEAP32[((HEAP32[($3 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = $1;
     $1 = $4 + $2 | 0;
     HEAP32[$0 >> 2] = $1;
     HEAP32[((($1 & -4 | 0) + $0 | 0) + -4 | 0) >> 2] = $1;
     return 1 | 0;
    }
    label$8 : {
     if (($1 + 16 | 0) >>> 0 > $2 >>> 0) {
      break label$8
     }
     HEAP32[$0 >> 2] = $1;
     HEAP32[((($1 & -4 | 0) + $0 | 0) + -4 | 0) >> 2] = $1;
     $0 = $0 + $1 | 0;
     $1 = $2 - $1 | 0;
     HEAP32[$0 >> 2] = $1;
     HEAP32[((($1 & -4 | 0) + $0 | 0) + -4 | 0) >> 2] = $1 | 1 | 0;
     label$9 : {
      label$10 : {
       $1 = (HEAP32[$0 >> 2] | 0) + -8 | 0;
       if ($1 >>> 0 > 127 >>> 0) {
        break label$10
       }
       $1 = ($1 >>> 3 | 0) + -1 | 0;
       break label$9;
      }
      $3 = Math_clz32($1);
      label$11 : {
       if ($1 >>> 0 > 4095 >>> 0) {
        break label$11
       }
       $1 = ((($1 >>> (29 - $3 | 0) | 0) ^ 4 | 0) - ($3 << 2 | 0) | 0) + 110 | 0;
       break label$9;
      }
      $1 = ((($1 >>> (30 - $3 | 0) | 0) ^ 2 | 0) - ($3 << 1 | 0) | 0) + 71 | 0;
      $1 = $1 >>> 0 < 63 >>> 0 ? $1 : 63;
     }
     $3 = $1 << 4 | 0;
     HEAP32[($0 + 4 | 0) >> 2] = $3 + 94e3 | 0;
     $3 = $3 + 94008 | 0;
     HEAP32[($0 + 8 | 0) >> 2] = HEAP32[$3 >> 2] | 0;
     HEAP32[$3 >> 2] = $0;
     HEAP32[((HEAP32[($0 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = $0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 95032 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 95036 | 0) >> 2] | 0;
     $209 = i64toi32_i32$2;
     $209$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $211$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$2 = $211$hi;
     i64toi32_i32$3 = $1;
     i64toi32_i32$4 = $1 & 31 | 0;
     if (32 >>> 0 <= ($1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $23 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $23 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     }
     $212$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $209$hi;
     i64toi32_i32$1 = $209;
     i64toi32_i32$0 = $212$hi;
     i64toi32_i32$3 = $23;
     i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     $213 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     i64toi32_i32$1 = 0;
     HEAP32[(i64toi32_i32$1 + 95032 | 0) >> 2] = $213;
     HEAP32[(i64toi32_i32$1 + 95036 | 0) >> 2] = i64toi32_i32$0;
     return 1 | 0;
    }
    $0 = 1;
    if ($2 >>> 0 >= $1 >>> 0) {
     break label$1
    }
   }
   $0 = 0;
  }
  return $0 | 0;
 }
 
 function realloc($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return emmalloc_aligned_realloc($0 | 0, 8 | 0, $1 | 0) | 0 | 0;
 }
 
 function sbrk($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1 = HEAP32[(0 + 92444 | 0) >> 2] | 0;
  $2 = ($0 + 7 | 0) & -8 | 0;
  $0 = $1 + $2 | 0;
  label$1 : {
   label$2 : {
    if (!$2) {
     break label$2
    }
    if ($0 >>> 0 <= $1 >>> 0) {
     break label$1
    }
   }
   label$3 : {
    if ($0 >>> 0 <= (emscripten_get_heap_size() | 0) >>> 0) {
     break label$3
    }
    if (!(emscripten_resize_heap($0 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[(0 + 92444 | 0) >> 2] = $0;
   return $1 | 0;
  }
  (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 48), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  return -1 | 0;
 }
 
 function __addtf3($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, $8$hi = 0, $8 = 0, $7 = 0, $6$hi = 0, $10 = 0, $5 = 0, $6 = 0, $12$hi = 0, $9$hi = 0, i64toi32_i32$6 = 0, $9 = 0, $11 = 0, $12 = 0, $135 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $20 = 0, $25 = 0, $30 = 0, $34 = 0, $40 = 0, $48 = 0, $50 = 0, $58 = 0, $58$hi = 0, $64 = 0, $64$hi = 0, $68 = 0, $68$hi = 0, $78 = 0, $78$hi = 0, $106 = 0, $109 = 0, $136 = 0, $137 = 0, $137$hi = 0, $138 = 0, $138$hi = 0, $145$hi = 0, $148$hi = 0, $168 = 0, $169 = 0, $169$hi = 0, $170 = 0, $170$hi = 0, $177$hi = 0, $180$hi = 0, $193 = 0, $193$hi = 0, $195$hi = 0, $199 = 0, $199$hi = 0, $201$hi = 0, $228 = 0, $228$hi = 0, $230 = 0, $230$hi = 0, $234 = 0, $234$hi = 0, $236 = 0, $237$hi = 0, $251 = 0, $251$hi = 0, $254 = 0, $254$hi = 0, $262$hi = 0, $265 = 0, $266$hi = 0, $271 = 0, $272 = 0, $272$hi = 0, $273 = 0, $273$hi = 0, $280$hi = 0, $283$hi = 0, $298 = 0, $298$hi = 0, $304 = 0, $305$hi = 0, $311 = 0, $311$hi = 0, $313$hi = 0, $314 = 0, $314$hi = 0, $316 = 0, $316$hi = 0, $343 = 0, $343$hi = 0, $345 = 0, $345$hi = 0, $349 = 0, $349$hi = 0, $351 = 0, $352$hi = 0, $358 = 0, $358$hi = 0, $360$hi = 0, $364 = 0, $364$hi = 0, $367 = 0, $367$hi = 0, $368$hi = 0, $375 = 0, $375$hi = 0, $379$hi = 0, $383 = 0, $384$hi = 0, $389 = 0, $389$hi = 0, $397 = 0, $398$hi = 0, $400 = 0, $400$hi = 0, $406 = 0, $407$hi = 0, $411 = 0, $412$hi = 0, $415 = 0, $415$hi = 0, $421 = 0, $422$hi = 0, $426 = 0, $427$hi = 0;
  $5 = __stack_pointer - 112 | 0;
  __stack_pointer = $5;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $6 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $1$hi;
     $7 = !($1 | i64toi32_i32$1 | 0);
     $20 = $7;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $8 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $8$hi = i64toi32_i32$2;
     i64toi32_i32$1 = $8;
     i64toi32_i32$0 = -2147418112;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$1 = -2147418112;
     i64toi32_i32$3 = 0;
     $25 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = $8$hi;
     if (!($8 | i64toi32_i32$2 | 0) ? $20 : $25) {
      break label$3
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$3 = $3;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = 0;
     $30 = (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$3 = $6$hi;
     i64toi32_i32$1 = $6;
     i64toi32_i32$2 = -2147418112;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $9 = i64toi32_i32$0;
     $9$hi = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$1 = -2147418112;
     i64toi32_i32$5 = 0;
     $34 = i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$4 = -2147418112;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) | 0 ? $30 : $34) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$5 = $8$hi;
     i64toi32_i32$1 = $8;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$4 = 0;
     $40 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$4 = $8;
     i64toi32_i32$5 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) | 0 ? $7 : $40) {
      break label$4
     }
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$3 = $2;
     i64toi32_i32$1 = 32768;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
     $4 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     $3 = $1;
     $3$hi = i64toi32_i32$1;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$1 = $3$hi;
     $48 = !($3 | i64toi32_i32$1 | 0);
     i64toi32_i32$1 = $6$hi;
     i64toi32_i32$4 = $6;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$5 = 0;
     $50 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$5 = $6;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) | 0 ? $48 : $50) {
      break label$5
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4;
     i64toi32_i32$4 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
     $4 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $4$hi = i64toi32_i32$4;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $8$hi;
     i64toi32_i32$5 = $8;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
     $58 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
     $58$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$4 = $1;
     i64toi32_i32$5 = $58$hi;
     i64toi32_i32$1 = $58;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break label$6
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$4 = $1;
     i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
     $64 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
     $64$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$4 = $2;
     i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
     i64toi32_i32$3 = -2147483648;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     $68 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
     $68$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $64$hi;
     i64toi32_i32$1 = $64;
     i64toi32_i32$5 = $68$hi;
     i64toi32_i32$4 = $68;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $7 = !(i64toi32_i32$1 | i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0);
     i64toi32_i32$2 = $7;
     i64toi32_i32$5 = 2147450880;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$4 = i64toi32_i32$2 ? 0 : $2;
     i64toi32_i32$3 = i64toi32_i32$2 ? i64toi32_i32$5 : i64toi32_i32$1;
     $4 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$1 = i64toi32_i32$5 ? 0 : $1;
     i64toi32_i32$2 = i64toi32_i32$5 ? i64toi32_i32$3 : i64toi32_i32$4;
     $3 = i64toi32_i32$1;
     $3$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$5 = $6;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $78 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
    $78$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3;
    i64toi32_i32$5 = $78$hi;
    i64toi32_i32$4 = $78;
    i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    if (!(i64toi32_i32$2 | i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0)) {
     break label$1
    }
    label$7 : {
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $8$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$1 = $1;
     i64toi32_i32$2 = $8$hi;
     i64toi32_i32$4 = $8;
     i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 0;
     if ((i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$7
     }
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $6$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$4 = $3;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$1 = $6;
     i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break label$1
     }
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $3;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$4 = $1;
     i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
     $3 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
     $3$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$5 = $4;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$4 = $2;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $4 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
     $4$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $6$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$4 = $6;
    i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    if (!!(i64toi32_i32$2 | i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0)) {
     break label$2
    }
    i64toi32_i32$5 = $1$hi;
    $3 = $1;
    $3$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $2$hi;
    $4 = $2;
    $4$hi = i64toi32_i32$5;
    break label$1;
   }
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$1 = $3;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$4 = $1;
   $106 = i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$1 = $8$hi;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$4 = $6;
   i64toi32_i32$5 = $8$hi;
   i64toi32_i32$2 = $8;
   $109 = i64toi32_i32$1 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$4 = i64toi32_i32$5;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$2 = $6;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$5 = $8;
   $10 = (i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) | 0 ? $106 : $109;
   i64toi32_i32$3 = $10;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$4 = $1$hi;
   i64toi32_i32$1 = i64toi32_i32$3 ? $3 : $1;
   i64toi32_i32$5 = i64toi32_i32$3 ? i64toi32_i32$2 : i64toi32_i32$4;
   $6 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$4 = i64toi32_i32$2 ? $4 : $2;
   i64toi32_i32$3 = i64toi32_i32$2 ? i64toi32_i32$5 : i64toi32_i32$1;
   $9 = i64toi32_i32$4;
   $9$hi = i64toi32_i32$3;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$1 = -1;
   i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
   $8 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   $8$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$4 = i64toi32_i32$5;
   i64toi32_i32$5 = $10;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$1 = i64toi32_i32$5 ? $2 : $4;
   i64toi32_i32$3 = i64toi32_i32$5 ? i64toi32_i32$4 : i64toi32_i32$2;
   $2 = i64toi32_i32$1;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 48;
   i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $135 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    $135 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
   }
   $11 = $135 & 32767 | 0;
   label$8 : {
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$3 = $9;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 48;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $139 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $139 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $7 = $139 & 32767 | 0;
    if ($7) {
     break label$8
    }
    $136 = $5 + 96 | 0;
    i64toi32_i32$5 = $6$hi;
    $137 = $6;
    $137$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $8$hi;
    $138 = $8;
    $138$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$5 = $8$hi;
    $7 = !($8 | i64toi32_i32$5 | 0);
    i64toi32_i32$4 = $7;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$3 = $8$hi;
    i64toi32_i32$2 = i64toi32_i32$4 ? $6 : $8;
    i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$5 : i64toi32_i32$3;
    i64toi32_i32$3 = Math_clz32(i64toi32_i32$1);
    i64toi32_i32$4 = 0;
    if ((i64toi32_i32$3 | 0) == (32 | 0)) {
     $140 = Math_clz32(i64toi32_i32$2) + 32 | 0
    } else {
     $140 = i64toi32_i32$3
    }
    $145$hi = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    $148$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $145$hi;
    i64toi32_i32$2 = $140;
    i64toi32_i32$1 = $148$hi;
    i64toi32_i32$3 = $7 << 6 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $7 = i64toi32_i32$5;
    i64toi32_i32$0 = $137$hi;
    i64toi32_i32$2 = $138$hi;
    __ashlti3($136 | 0, $137 | 0, i64toi32_i32$0 | 0, $138 | 0, i64toi32_i32$2 | 0, i64toi32_i32$5 + -15 | 0 | 0);
    $7 = 16 - i64toi32_i32$5 | 0;
    i64toi32_i32$4 = $5 + 104 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $8 = i64toi32_i32$2;
    $8$hi = i64toi32_i32$0;
    i64toi32_i32$4 = $5;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 96 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 100 | 0) >> 2] | 0;
    $6 = i64toi32_i32$0;
    $6$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $10;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$3 = i64toi32_i32$1 ? $1 : $3;
   i64toi32_i32$4 = i64toi32_i32$1 ? i64toi32_i32$2 : i64toi32_i32$0;
   $3 = i64toi32_i32$3;
   $3$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$1 = $2;
   i64toi32_i32$3 = 65535;
   i64toi32_i32$0 = -1;
   i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
   $4 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $4$hi = i64toi32_i32$3;
   label$9 : {
    if ($11) {
     break label$9
    }
    $168 = $5 + 80 | 0;
    i64toi32_i32$3 = $3$hi;
    $169 = $3;
    $169$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    $170 = $4;
    $170$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    $10 = !($4 | i64toi32_i32$3 | 0);
    i64toi32_i32$2 = $10;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = i64toi32_i32$2 ? $3 : $4;
    i64toi32_i32$4 = i64toi32_i32$2 ? i64toi32_i32$3 : i64toi32_i32$1;
    i64toi32_i32$1 = Math_clz32(i64toi32_i32$4);
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$1 | 0) == (32 | 0)) {
     $141 = Math_clz32(i64toi32_i32$0) + 32 | 0
    } else {
     $141 = i64toi32_i32$1
    }
    $177$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $180$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $177$hi;
    i64toi32_i32$0 = $141;
    i64toi32_i32$4 = $180$hi;
    i64toi32_i32$1 = $10 << 6 | 0;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $10 = i64toi32_i32$3;
    i64toi32_i32$5 = $169$hi;
    i64toi32_i32$0 = $170$hi;
    __ashlti3($168 | 0, $169 | 0, i64toi32_i32$5 | 0, $170 | 0, i64toi32_i32$0 | 0, i64toi32_i32$3 + -15 | 0 | 0);
    $11 = 16 - i64toi32_i32$3 | 0;
    i64toi32_i32$2 = $5 + 88 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $4 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$5;
    i64toi32_i32$2 = $5;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] | 0;
    $3 = i64toi32_i32$5;
    $3$hi = i64toi32_i32$0;
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = $4;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = 3;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $142 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $142 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $193 = $142;
   $193$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$0 = $3;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 61;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $143 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
    $143 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $195$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $193$hi;
   i64toi32_i32$5 = $193;
   i64toi32_i32$0 = $195$hi;
   i64toi32_i32$1 = $143;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   i64toi32_i32$5 = 524288;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
   $1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
   $1$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $8$hi;
   i64toi32_i32$0 = $8;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 3;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $144 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
    $144 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $199 = $144;
   $199$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $6$hi;
   i64toi32_i32$5 = $6;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 61;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $145 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $145 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
   }
   $201$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $199$hi;
   i64toi32_i32$2 = $199;
   i64toi32_i32$5 = $201$hi;
   i64toi32_i32$1 = $145;
   i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
   $4 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$0 = $3;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 3;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $146 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
    $146 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $8 = $146;
   $8$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $9$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $9$hi;
   i64toi32_i32$5 = $9;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
   $3 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
   $3$hi = i64toi32_i32$0;
   label$10 : {
    if (($7 | 0) == ($11 | 0)) {
     break label$10
    }
    label$11 : {
     $10 = $7 - $11 | 0;
     if ($10 >>> 0 <= 127 >>> 0) {
      break label$11
     }
     i64toi32_i32$0 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $8 = 1;
     $8$hi = i64toi32_i32$0;
     break label$10;
    }
    i64toi32_i32$0 = $8$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $8$hi;
    i64toi32_i32$5 = $1$hi;
    __ashlti3($5 + 64 | 0 | 0, $8 | 0, i64toi32_i32$0 | 0, $1 | 0, i64toi32_i32$5 | 0, 128 - $10 | 0 | 0);
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    __lshrti3($5 + 48 | 0 | 0, $8 | 0, i64toi32_i32$5 | 0, $1 | 0, i64toi32_i32$0 | 0, $10 | 0);
    i64toi32_i32$2 = $5;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
    $228 = i64toi32_i32$0;
    $228$hi = i64toi32_i32$5;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] | 0;
    $230 = i64toi32_i32$5;
    $230$hi = i64toi32_i32$0;
    i64toi32_i32$2 = (i64toi32_i32$2 + 64 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $234 = i64toi32_i32$0;
    $234$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $230$hi;
    i64toi32_i32$2 = $230;
    i64toi32_i32$0 = $234$hi;
    i64toi32_i32$1 = $234;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 0;
    $236 = (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$5 = 0;
    $237$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $228$hi;
    i64toi32_i32$1 = $228;
    i64toi32_i32$0 = $237$hi;
    i64toi32_i32$2 = $236;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $8 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $8$hi = i64toi32_i32$0;
    i64toi32_i32$5 = ($5 + 48 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $1 = i64toi32_i32$0;
    $1$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = $4;
   i64toi32_i32$0 = 524288;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $12 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
   $12$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$1 = $6;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 3;
   i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $147 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $147 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $6 = $147;
   $6$hi = i64toi32_i32$5;
   label$12 : {
    label$13 : {
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$0 = $3;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = -1;
     if ((i64toi32_i32$5 | 0) > (i64toi32_i32$1 | 0)) {
      $148 = 1
     } else {
      if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$1 | 0)) {
       if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$2 >>> 0) {
        $149 = 0
       } else {
        $149 = 1
       }
       $150 = $149;
      } else {
       $150 = 0
      }
      $148 = $150;
     }
     if ($148) {
      break label$13
     }
     i64toi32_i32$0 = 0;
     $3 = 0;
     $3$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $4 = 0;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $6$hi;
     i64toi32_i32$0 = $8$hi;
     i64toi32_i32$0 = $6$hi;
     i64toi32_i32$2 = $6;
     i64toi32_i32$5 = $8$hi;
     i64toi32_i32$1 = $8;
     i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
     $251 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
     $251$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$0 = $12;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$1 = $1;
     i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
     $254 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
     $254$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $251$hi;
     i64toi32_i32$5 = $251;
     i64toi32_i32$0 = $254$hi;
     i64toi32_i32$1 = $254;
     i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     if (!(i64toi32_i32$5 | i64toi32_i32$1 | 0 | i64toi32_i32$0 | 0)) {
      break label$1
     }
     i64toi32_i32$0 = $6$hi;
     i64toi32_i32$0 = $8$hi;
     i64toi32_i32$0 = $6$hi;
     i64toi32_i32$2 = $6;
     i64toi32_i32$5 = $8$hi;
     i64toi32_i32$1 = $8;
     i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
     i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0;
     i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
     $2 = i64toi32_i32$4;
     $2$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$0 = $12;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$1 = $1;
     i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
     $262$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $6$hi;
     i64toi32_i32$4 = $8$hi;
     i64toi32_i32$4 = $6$hi;
     i64toi32_i32$3 = $6;
     i64toi32_i32$0 = $8$hi;
     i64toi32_i32$1 = $8;
     $265 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $266$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $262$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$4 = $266$hi;
     i64toi32_i32$0 = $265;
     i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
     i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
     $4 = i64toi32_i32$2;
     $4$hi = i64toi32_i32$5;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$1 = 524287;
     i64toi32_i32$0 = -1;
     if (i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
      break label$12
     }
     $271 = $5 + 32 | 0;
     i64toi32_i32$3 = $2$hi;
     $272 = $2;
     $272$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     $273 = $4;
     $273$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $4$hi;
     $10 = !($4 | i64toi32_i32$3 | 0);
     i64toi32_i32$4 = $10;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$1 = i64toi32_i32$4 ? $2 : $4;
     i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$3 : i64toi32_i32$5;
     i64toi32_i32$5 = Math_clz32(i64toi32_i32$0);
     i64toi32_i32$4 = 0;
     if ((i64toi32_i32$5 | 0) == (32 | 0)) {
      $151 = Math_clz32(i64toi32_i32$1) + 32 | 0
     } else {
      $151 = i64toi32_i32$5
     }
     $280$hi = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     $283$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $280$hi;
     i64toi32_i32$1 = $151;
     i64toi32_i32$0 = $283$hi;
     i64toi32_i32$5 = $10 << 6 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $10 = i64toi32_i32$3 + -12 | 0;
     i64toi32_i32$2 = $272$hi;
     i64toi32_i32$1 = $273$hi;
     __ashlti3($271 | 0, $272 | 0, i64toi32_i32$2 | 0, $273 | 0, i64toi32_i32$1 | 0, $10 | 0);
     $7 = $7 - $10 | 0;
     i64toi32_i32$4 = $5 + 40 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $4 = i64toi32_i32$1;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$4 = $5;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 32 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 36 | 0) >> 2] | 0;
     $2 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$1;
     break label$12;
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $12$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$4 = $1;
    i64toi32_i32$2 = $12$hi;
    i64toi32_i32$5 = $12;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $298 = i64toi32_i32$0;
    $298$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $8$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $8$hi;
    i64toi32_i32$1 = $8;
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$5 = $6;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $2 = i64toi32_i32$2;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $8$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$1 = $8$hi;
    i64toi32_i32$5 = $8;
    $304 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
    i64toi32_i32$3 = 0;
    $305$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $298$hi;
    i64toi32_i32$5 = $298;
    i64toi32_i32$0 = $305$hi;
    i64toi32_i32$1 = $304;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $4 = i64toi32_i32$4;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$3 = i64toi32_i32$4;
    i64toi32_i32$5 = 1048576;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
    if (!(i64toi32_i32$4 & i64toi32_i32$1 | 0 | i64toi32_i32$5 | 0)) {
     break label$12
    }
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$2 = $2;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $152 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $152 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
    }
    $311 = $152;
    $311$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = $4;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 63;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     $153 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
     $153 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    }
    $313$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $311$hi;
    i64toi32_i32$3 = $311;
    i64toi32_i32$5 = $313$hi;
    i64toi32_i32$1 = $153;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    $314 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $314$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $8$hi;
    i64toi32_i32$2 = $8;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
    $316 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    $316$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $314$hi;
    i64toi32_i32$5 = $314;
    i64toi32_i32$2 = $316$hi;
    i64toi32_i32$1 = $316;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $2 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $2$hi = i64toi32_i32$2;
    $7 = $7 + 1 | 0;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$3 = $4;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $154 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $154 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $4 = $154;
    $4$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$2 = $9;
   i64toi32_i32$3 = -2147483648;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
   $8 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   $8$hi = i64toi32_i32$3;
   label$14 : {
    if (($7 | 0) < (32767 | 0)) {
     break label$14
    }
    i64toi32_i32$3 = $8$hi;
    i64toi32_i32$5 = $8;
    i64toi32_i32$2 = 2147418112;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $4 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $3 = 0;
    $3$hi = i64toi32_i32$2;
    break label$1;
   }
   $10 = 0;
   label$15 : {
    label$16 : {
     if (($7 | 0) <= (0 | 0)) {
      break label$16
     }
     $10 = $7;
     break label$15;
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$5 = $4$hi;
    __ashlti3($5 + 16 | 0 | 0, $2 | 0, i64toi32_i32$2 | 0, $4 | 0, i64toi32_i32$5 | 0, $7 + 127 | 0 | 0);
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = $4$hi;
    __lshrti3($5 | 0, $2 | 0, i64toi32_i32$5 | 0, $4 | 0, i64toi32_i32$2 | 0, 1 - $7 | 0 | 0);
    i64toi32_i32$3 = $5;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $343 = i64toi32_i32$2;
    $343$hi = i64toi32_i32$5;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] | 0;
    $345 = i64toi32_i32$5;
    $345$hi = i64toi32_i32$2;
    i64toi32_i32$3 = (i64toi32_i32$3 + 16 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $349 = i64toi32_i32$2;
    $349$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $345$hi;
    i64toi32_i32$3 = $345;
    i64toi32_i32$2 = $349$hi;
    i64toi32_i32$1 = $349;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 0;
    $351 = (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$5 = 0;
    $352$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $343$hi;
    i64toi32_i32$1 = $343;
    i64toi32_i32$2 = $352$hi;
    i64toi32_i32$3 = $351;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $2 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$5 = $5 + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $4 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$5 = $2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 3;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $155 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    $155 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
   }
   $358 = $155;
   $358$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$1 = $4;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 61;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    $156 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
    $156 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
   }
   $360$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $358$hi;
   i64toi32_i32$2 = $358;
   i64toi32_i32$1 = $360$hi;
   i64toi32_i32$3 = $156;
   i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $3$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = $10;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    $157 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
    $157 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
   }
   $364 = $157;
   $364$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$1 = $4;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 3;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = 0;
    $158 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    $158 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
   }
   i64toi32_i32$2 = $158;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
   $367 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   $367$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $364$hi;
   i64toi32_i32$5 = $364;
   i64toi32_i32$2 = $367$hi;
   i64toi32_i32$3 = $367;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $368$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $8$hi;
   i64toi32_i32$2 = $368$hi;
   i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   i64toi32_i32$5 = $8$hi;
   i64toi32_i32$3 = $8;
   i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $4 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   $7 = $2 & 7 | 0;
   label$17 : {
    label$18 : {
     label$19 : {
      switch (__fe_getround() | 0 | 0) {
      case 0:
       i64toi32_i32$5 = $4$hi;
       $375 = $4;
       $375$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$5 = 0;
       $379$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$2 = $3;
       i64toi32_i32$1 = $379$hi;
       i64toi32_i32$3 = $7 >>> 0 > 4 >>> 0;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $8 = i64toi32_i32$0;
       $8$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$4 = $8$hi;
       i64toi32_i32$5 = i64toi32_i32$0;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$3 = $3;
       $383 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$5 = 0;
       $384$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $375$hi;
       i64toi32_i32$3 = $375;
       i64toi32_i32$4 = $384$hi;
       i64toi32_i32$2 = $383;
       i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $4 = i64toi32_i32$1;
       $4$hi = i64toi32_i32$0;
       label$22 : {
        if (($7 | 0) == (4 | 0)) {
         break label$22
        }
        i64toi32_i32$0 = $8$hi;
        $3 = $8;
        $3$hi = i64toi32_i32$0;
        break label$18;
       }
       i64toi32_i32$0 = $4$hi;
       $389 = $4;
       $389$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $8$hi;
       i64toi32_i32$5 = $8;
       i64toi32_i32$3 = 0;
       i64toi32_i32$2 = 1;
       i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
       $1 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
       $1$hi = i64toi32_i32$3;
       i64toi32_i32$3 = i64toi32_i32$0;
       i64toi32_i32$3 = $1$hi;
       i64toi32_i32$0 = $1;
       i64toi32_i32$5 = $8$hi;
       i64toi32_i32$2 = $8;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $3 = i64toi32_i32$4;
       $3$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $1$hi;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$3 = i64toi32_i32$4;
       i64toi32_i32$0 = $1$hi;
       i64toi32_i32$2 = $1;
       $397 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
       i64toi32_i32$3 = 0;
       $398$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $389$hi;
       i64toi32_i32$2 = $389;
       i64toi32_i32$1 = $398$hi;
       i64toi32_i32$0 = $397;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $4 = i64toi32_i32$5;
       $4$hi = i64toi32_i32$4;
       break label$17;
      case 1:
       i64toi32_i32$4 = $4$hi;
       $400 = $4;
       $400$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$4 = $8$hi;
       i64toi32_i32$3 = $8;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 0;
       $406 = ((i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | 0) & ($7 | 0) != (0 | 0) | 0;
       i64toi32_i32$3 = 0;
       $407$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $3$hi;
       i64toi32_i32$0 = $3;
       i64toi32_i32$4 = $407$hi;
       i64toi32_i32$2 = $406;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $8 = i64toi32_i32$1;
       $8$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$5 = $8$hi;
       i64toi32_i32$3 = i64toi32_i32$1;
       i64toi32_i32$0 = $3$hi;
       i64toi32_i32$2 = $3;
       $411 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
       i64toi32_i32$3 = 0;
       $412$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $400$hi;
       i64toi32_i32$2 = $400;
       i64toi32_i32$5 = $412$hi;
       i64toi32_i32$0 = $411;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $4 = i64toi32_i32$4;
       $4$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $8$hi;
       $3 = $8;
       $3$hi = i64toi32_i32$1;
       break label$18;
      case 2:
       break label$19;
      default:
       break label$18;
      };
     }
     i64toi32_i32$1 = $4$hi;
     $415 = $4;
     $415$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $8$hi;
     $421 = !($8 | i64toi32_i32$1 | 0) & ($7 | 0) != (0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $422$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$3 = $3;
     i64toi32_i32$2 = $422$hi;
     i64toi32_i32$0 = $421;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $8 = i64toi32_i32$5;
     $8$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $8$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$0 = $3;
     $426 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $427$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $415$hi;
     i64toi32_i32$0 = $415;
     i64toi32_i32$4 = $427$hi;
     i64toi32_i32$3 = $426;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $4 = i64toi32_i32$2;
     $4$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $8$hi;
     $3 = $8;
     $3$hi = i64toi32_i32$5;
    }
    if (!$7) {
     break label$1
    }
   }
   __fe_raise_inexact() | 0;
  }
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $3;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $4$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $4;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$5;
  __stack_pointer = $5 + 112 | 0;
 }
 
 function __ashlti3($0, $1, $1$hi, $2, $2$hi, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $11$hi = 0, $18$hi = 0, $19 = 0, $19$hi = 0, $4 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $18 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $18 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $2 = $18;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3) {
    break label$1
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $20 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $20 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $19 = $20;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   $4 = $3;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $21 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $21 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $22 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $22 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $1 = $22;
   $1$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function __letf2($0, $0$hi, $1, $1$hi, $2, $2$hi, $3, $3$hi) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4 = 0, $5 = 0, $6 = 0, $5$hi = 0, $6$hi = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $8 = 0, $12 = 0, $17 = 0, $21 = 0, $27 = 0, $27$hi = 0, $30 = 0, $30$hi = 0, $40 = 0, $50 = 0, $50$hi = 0, $53 = 0, $53$hi = 0, $58 = 0, $68 = 0, $68$hi = 0, $71 = 0, $71$hi = 0;
  $4 = 1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8 : $12) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17 : $21) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36 = 0
      } else {
       $36 = 1
      }
      $37 = $36;
     } else {
      $37 = 0
     }
     $35 = $37;
    }
    if ($35) {
     break label$3
    }
    $4 = -1;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2;
    $40 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39 = 0
      } else {
       $39 = 1
      }
      $41 = $39;
     } else {
      $41 = 0
     }
     $38 = $41;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40 : $38) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   $4 = -1;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2;
   $58 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43 = 0
     } else {
      $43 = 1
     }
     $44 = $43;
    } else {
     $44 = 0
    }
    $42 = $44;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58 : $42) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4 | 0;
 }
 
 function __getf2($0, $0$hi, $1, $1$hi, $2, $2$hi, $3, $3$hi) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5 = 0, $6 = 0, $4 = 0, $5$hi = 0, $6$hi = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $8 = 0, $12 = 0, $17 = 0, $21 = 0, $27 = 0, $27$hi = 0, $30 = 0, $30$hi = 0, $40 = 0, $50 = 0, $50$hi = 0, $53 = 0, $53$hi = 0, $58 = 0, $68 = 0, $68$hi = 0, $71 = 0, $71$hi = 0;
  $4 = -1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8 : $12) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17 : $21) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36 = 0
      } else {
       $36 = 1
      }
      $37 = $36;
     } else {
      $37 = 0
     }
     $35 = $37;
    }
    if ($35) {
     break label$3
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2;
    $40 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39 = 0
      } else {
       $39 = 1
      }
      $41 = $39;
     } else {
      $41 = 0
     }
     $38 = $41;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40 : $38) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2;
   $58 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43 = 0
     } else {
      $43 = 1
     }
     $44 = $43;
    } else {
     $44 = 0
    }
    $42 = $44;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58 : $42) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4 | 0;
 }
 
 function __divtf3($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $5 = 0, i64toi32_i32$6 = 0, $12$hi = 0, $6$hi = 0, $12 = 0, $6 = 0, $16$hi = 0, $15$hi = 0, $8$hi = 0, $17$hi = 0, $21$hi = 0, $15 = 0, $7$hi = 0, $8 = 0, $9 = 0, $16 = 0, $7 = 0, $21 = 0, $14$hi = 0, $11 = 0, $17 = 0, $18$hi = 0, $14 = 0, $18 = 0, $22 = 0, $22$hi = 0, $24$hi = 0, $13 = 0, $19 = 0, $19$hi = 0, $322 = 0, $323 = 0, $10 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $341 = 0, $342 = 0, $344 = 0, $345 = 0, $20 = 0, $20$hi = 0, $346 = 0, $347 = 0, $348 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $355 = 0, $23 = 0, $23$hi = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $24 = 0, $360 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $368 = 0, $369 = 0, $371 = 0, $372 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $380 = 0, $381 = 0, $382 = 0, $51 = 0, $55 = 0, $62 = 0, $66 = 0, $75 = 0, $75$hi = 0, $80 = 0, $80$hi = 0, $88 = 0, $88$hi = 0, $110 = 0, $111 = 0, $111$hi = 0, $112 = 0, $112$hi = 0, $119$hi = 0, $122$hi = 0, $137 = 0, $138 = 0, $138$hi = 0, $139 = 0, $139$hi = 0, $146$hi = 0, $149$hi = 0, $164 = 0, $166 = 0, $166$hi = 0, $170$hi = 0, $181 = 0, $181$hi = 0, $182$hi = 0, $185 = 0, $188 = 0, $188$hi = 0, $193$hi = 0, $203 = 0, $203$hi = 0, $204$hi = 0, $206 = 0, $209 = 0, $209$hi = 0, $214$hi = 0, $224 = 0, $224$hi = 0, $225$hi = 0, $227 = 0, $230 = 0, $230$hi = 0, $235$hi = 0, $245 = 0, $245$hi = 0, $246$hi = 0, $248 = 0, $249 = 0, $249$hi = 0, $252 = 0, $252$hi = 0, $257$hi = 0, $262 = 0, $264$hi = 0, $267 = 0, $268 = 0, $268$hi = 0, $272 = 0, $272$hi = 0, $279 = 0, $279$hi = 0, $283 = 0, $284$hi = 0, $285$hi = 0, $287 = 0, $288$hi = 0, $289$hi = 0, $290$hi = 0, $294$hi = 0, $305 = 0, $305$hi = 0, $308 = 0, $308$hi = 0, $314$hi = 0, $315 = 0, $315$hi = 0, $321 = 0, $321$hi = 0, $330 = 0, $330$hi = 0, $335 = 0, $335$hi = 0, $340 = 0, $340$hi = 0, $342$hi = 0, $343 = 0, $343$hi = 0, $345$hi = 0, $346$hi = 0, $349 = 0, $350$hi = 0, $351$hi = 0, $354 = 0, $355$hi = 0, $361 = 0, $361$hi = 0, $366 = 0, $366$hi = 0, $367 = 0, $367$hi = 0, $370 = 0, $370$hi = 0, $373 = 0, $373$hi = 0, $375$hi = 0, $379 = 0, $379$hi = 0, $383 = 0, $384$hi = 0, $385$hi = 0, $388 = 0, $388$hi = 0, $389 = 0, $389$hi = 0, $396 = 0, $396$hi = 0, $402 = 0, $402$hi = 0, $404$hi = 0, $405 = 0, $405$hi = 0, $406 = 0, $406$hi = 0, $407 = 0, $407$hi = 0, $409$hi = 0, $413 = 0, $414$hi = 0, $415 = 0, $415$hi = 0, $416 = 0, $416$hi = 0, $425 = 0, $425$hi = 0, $429 = 0, $430 = 0, $430$hi = 0, $436 = 0, $436$hi = 0, $440 = 0, $441$hi = 0, $442$hi = 0, $446 = 0, $447$hi = 0, $448 = 0, $448$hi = 0, $449 = 0, $449$hi = 0, $456 = 0, $456$hi = 0, $461 = 0, $461$hi = 0, $466 = 0, $466$hi = 0, $469 = 0, $469$hi = 0, $472 = 0, $473$hi = 0, $476 = 0, $477$hi = 0, $478$hi = 0, $481 = 0, $482$hi = 0, $484$hi = 0, $485 = 0, $485$hi = 0, $489 = 0, $490$hi = 0, $491 = 0, $491$hi = 0, $492 = 0, $492$hi = 0, $493 = 0, $493$hi = 0, $500 = 0, $500$hi = 0, $503 = 0, $503$hi = 0, $506 = 0, $508$hi = 0, $509 = 0, $509$hi = 0, $514 = 0, $514$hi = 0, $515 = 0, $515$hi = 0, $517$hi = 0, $518$hi = 0, $520 = 0, $521$hi = 0, $522$hi = 0, $526 = 0, $527$hi = 0, $541$hi = 0, $545 = 0, $545$hi = 0, $546$hi = 0, $550 = 0, $551$hi = 0, $558 = 0, $560 = 0, $560$hi = 0, $562$hi = 0, $564 = 0, $564$hi = 0, $571$hi = 0, $575 = 0, $575$hi = 0, $576$hi = 0, $580 = 0, $581$hi = 0, $595 = 0, $595$hi = 0, $597$hi = 0, $601$hi = 0, $603 = 0, $603$hi = 0, $636 = 0, $636$hi = 0, $641 = 0, $641$hi = 0, $645$hi = 0, $646 = 0, $646$hi = 0, $647 = 0, $647$hi = 0, $650 = 0, $650$hi = 0, $654 = 0, $655$hi = 0, $667 = 0, $667$hi = 0, $668 = 0, $668$hi = 0, $676 = 0, $680 = 0, $681$hi = 0, $685 = 0, $689 = 0, $690$hi = 0, $694 = 0, $695$hi = 0, $697 = 0, $697$hi = 0, $700 = 0, $703 = 0, $703$hi = 0, $704 = 0, $711 = 0, $716 = 0, $717$hi = 0, $721 = 0, $722$hi = 0, $724 = 0, $724$hi = 0, $727 = 0, $730 = 0, $730$hi = 0, $731 = 0, $737 = 0, $742 = 0, $743$hi = 0, $747 = 0, $748$hi = 0, $749$hi = 0;
  $5 = __stack_pointer - 336 | 0;
  __stack_pointer = $5;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $6 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $7 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $7$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$1 = $4;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$3 = $2;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $8 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $8$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $322 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $322 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $9 = $322 & 32767 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $323 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $323 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $10 = $323 & 32767 | 0;
     if (($10 + -32767 | 0) >>> 0 < -32766 >>> 0) {
      break label$3
     }
     $11 = 0;
     if (($9 + -32767 | 0) >>> 0 > -32767 >>> 0) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$0 = $1$hi;
     $51 = !($1 | i64toi32_i32$0 | 0);
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2;
     i64toi32_i32$1 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
     $12 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     $12$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $12;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$3 = 0;
     $55 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$3 = $12;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $51 : $55) {
      break label$4
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $2;
     i64toi32_i32$0 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $8 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $8$hi = i64toi32_i32$0;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$0 = $3$hi;
     $62 = !($3 | i64toi32_i32$0 | 0);
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$3 = $4;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
     $2 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $2$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $2;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     $66 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$1 = $2;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0 ? $62 : $66) {
      break label$5
     }
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$3 = $4;
     i64toi32_i32$0 = 32768;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $8 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $8$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     $1 = $3;
     $1$hi = i64toi32_i32$0;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$1 = $12;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
     $75 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
     $75$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$0 = $1;
     i64toi32_i32$1 = $75$hi;
     i64toi32_i32$2 = $75;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$6
     }
     label$7 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
      $80 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
      $80$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3;
      i64toi32_i32$2 = $80$hi;
      i64toi32_i32$0 = $80;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      if (!!(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
       break label$7
      }
      i64toi32_i32$2 = 0;
      $1 = 0;
      $1$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 2147450880;
      $8 = 0;
      $8$hi = i64toi32_i32$2;
      break label$1;
     }
     i64toi32_i32$2 = $8$hi;
     i64toi32_i32$1 = $8;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     $8 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $8$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$3;
     break label$1;
    }
    label$8 : {
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $2;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
     $88 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $88$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$3 = $3;
     i64toi32_i32$2 = $88$hi;
     i64toi32_i32$0 = $88;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break label$8
     }
     i64toi32_i32$1 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$9 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$3 = $12;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$9
     }
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$3 = $3;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$0 = $2;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = !(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = 2147450880;
     i64toi32_i32$3 = $8$hi;
     i64toi32_i32$0 = i64toi32_i32$4 ? 0 : $8;
     i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$3;
     $8 = i64toi32_i32$0;
     $8$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$10 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$4 = $3;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$3 = $2;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break label$10
     }
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$3 = $8;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $8 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
     $8$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$0;
     break label$1;
    }
    $11 = 0;
    label$11 : {
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$1 = $12;
     i64toi32_i32$3 = 65535;
     i64toi32_i32$4 = -1;
     if (i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
      break label$11
     }
     $110 = $5 + 320 | 0;
     i64toi32_i32$1 = $1$hi;
     $111 = $1;
     $111$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $7$hi;
     $112 = $7;
     $112$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $7$hi;
     $11 = !($7 | i64toi32_i32$1 | 0);
     i64toi32_i32$2 = $11;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $7$hi;
     i64toi32_i32$3 = i64toi32_i32$2 ? $1 : $7;
     i64toi32_i32$4 = i64toi32_i32$2 ? i64toi32_i32$1 : i64toi32_i32$0;
     i64toi32_i32$0 = Math_clz32(i64toi32_i32$4);
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$0 | 0) == (32 | 0)) {
      $324 = Math_clz32(i64toi32_i32$3) + 32 | 0
     } else {
      $324 = i64toi32_i32$0
     }
     $119$hi = i64toi32_i32$2;
     i64toi32_i32$2 = 0;
     $122$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $119$hi;
     i64toi32_i32$3 = $324;
     i64toi32_i32$4 = $122$hi;
     i64toi32_i32$0 = $11 << 6 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $11 = i64toi32_i32$1;
     i64toi32_i32$5 = $111$hi;
     i64toi32_i32$3 = $112$hi;
     __ashlti3($110 | 0, $111 | 0, i64toi32_i32$5 | 0, $112 | 0, i64toi32_i32$3 | 0, i64toi32_i32$1 + -15 | 0 | 0);
     $11 = 16 - i64toi32_i32$1 | 0;
     i64toi32_i32$2 = $5 + 328 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $7 = i64toi32_i32$3;
     $7$hi = i64toi32_i32$5;
     i64toi32_i32$2 = $5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 320 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 324 | 0) >> 2] | 0;
     $1 = i64toi32_i32$5;
     $1$hi = i64toi32_i32$3;
    }
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$2 = $2;
    i64toi32_i32$5 = 65535;
    i64toi32_i32$0 = -1;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$2
    }
    $137 = $5 + 304 | 0;
    i64toi32_i32$2 = $3$hi;
    $138 = $3;
    $138$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $6$hi;
    $139 = $6;
    $139$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $6$hi;
    $13 = !($6 | i64toi32_i32$2 | 0);
    i64toi32_i32$4 = $13;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$5 = i64toi32_i32$4 ? $3 : $6;
    i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$3;
    i64toi32_i32$3 = Math_clz32(i64toi32_i32$0);
    i64toi32_i32$4 = 0;
    if ((i64toi32_i32$3 | 0) == (32 | 0)) {
     $325 = Math_clz32(i64toi32_i32$5) + 32 | 0
    } else {
     $325 = i64toi32_i32$3
    }
    $146$hi = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    $149$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $146$hi;
    i64toi32_i32$5 = $325;
    i64toi32_i32$0 = $149$hi;
    i64toi32_i32$3 = $13 << 6 | 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $13 = i64toi32_i32$2;
    i64toi32_i32$1 = $138$hi;
    i64toi32_i32$5 = $139$hi;
    __ashlti3($137 | 0, $138 | 0, i64toi32_i32$1 | 0, $139 | 0, i64toi32_i32$5 | 0, i64toi32_i32$2 + -15 | 0 | 0);
    $11 = (i64toi32_i32$2 + $11 | 0) + -16 | 0;
    i64toi32_i32$4 = $5 + 312 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $6 = i64toi32_i32$5;
    $6$hi = i64toi32_i32$1;
    i64toi32_i32$4 = $5;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 304 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 308 | 0) >> 2] | 0;
    $3 = i64toi32_i32$1;
    $3$hi = i64toi32_i32$5;
   }
   $164 = $5 + 288 | 0;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$4 = $3;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 49;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $326 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    $326 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $166 = $326;
   $166$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$5 = $6;
   i64toi32_i32$4 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $14 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $14$hi = i64toi32_i32$4;
   i64toi32_i32$1 = $14;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 15;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    $327 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
    $327 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
   }
   $170$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $166$hi;
   i64toi32_i32$4 = $166;
   i64toi32_i32$1 = $170$hi;
   i64toi32_i32$3 = $327;
   i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $2 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 1963258675;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$3 = $2;
   i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
   $4 = i64toi32_i32$0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$3 = 0;
   __multi3($164 | 0, $2 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$5 = ($5 + 288 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $181 = i64toi32_i32$3;
   $181$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = $181$hi;
   i64toi32_i32$2 = $181;
   i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
   i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
   $182$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $182$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$2 = 0;
   __multi3($5 + 272 | 0 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $4 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0);
   $185 = $5 + 256 | 0;
   i64toi32_i32$5 = $5;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 272 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 276 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 63;
   i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $328 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
    $328 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
   }
   $188 = $328;
   $188$hi = i64toi32_i32$2;
   i64toi32_i32$1 = ($5 + 272 | 0) + 8 | 0;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 1;
   i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
    $329 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
    $329 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
   }
   $193$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $188$hi;
   i64toi32_i32$5 = $188;
   i64toi32_i32$1 = $193$hi;
   i64toi32_i32$0 = $329;
   i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
   $4 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $4$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$0 = 0;
   __multi3($185 | 0, $4 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $2 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$5 = ($5 + 256 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $203 = i64toi32_i32$0;
   $203$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $203$hi;
   i64toi32_i32$1 = $203;
   i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0;
   i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
   $204$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $204$hi;
   i64toi32_i32$1 = 0;
   __multi3($5 + 240 | 0 | 0, $4 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
   $206 = $5 + 224 | 0;
   i64toi32_i32$5 = $5;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 240 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 244 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 63;
   i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $331 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    $331 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
   }
   $209 = $331;
   $209$hi = i64toi32_i32$1;
   i64toi32_i32$2 = ($5 + 240 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    $332 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
    $332 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
   }
   $214$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $209$hi;
   i64toi32_i32$5 = $209;
   i64toi32_i32$2 = $214$hi;
   i64toi32_i32$4 = $332;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$4 = 0;
   __multi3($206 | 0, $4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, $2 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0);
   i64toi32_i32$4 = i64toi32_i32$2;
   i64toi32_i32$5 = ($5 + 224 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $224 = i64toi32_i32$4;
   $224$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = $224$hi;
   i64toi32_i32$2 = $224;
   i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
   i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
   $225$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = $225$hi;
   i64toi32_i32$2 = 0;
   __multi3($5 + 208 | 0 | 0, $4 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0);
   $227 = $5 + 192 | 0;
   i64toi32_i32$5 = $5;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 208 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 212 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 63;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $333 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $333 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
   }
   $230 = $333;
   $230$hi = i64toi32_i32$2;
   i64toi32_i32$1 = ($5 + 208 | 0) + 8 | 0;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $334 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
    $334 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $235$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $230$hi;
   i64toi32_i32$5 = $230;
   i64toi32_i32$1 = $235$hi;
   i64toi32_i32$3 = $334;
   i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
   $4 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $4$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$3 = 0;
   __multi3($227 | 0, $4 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $2 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$5 = ($5 + 192 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $245 = i64toi32_i32$3;
   $245$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = $245$hi;
   i64toi32_i32$1 = $245;
   i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0;
   i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
   i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
   $246$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $246$hi;
   i64toi32_i32$1 = 0;
   __multi3($5 + 176 | 0 | 0, $4 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
   $248 = $5 + 160 | 0;
   i64toi32_i32$1 = $2$hi;
   $249 = $2;
   $249$hi = i64toi32_i32$1;
   i64toi32_i32$5 = $5;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 176 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 180 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 63;
   i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $336 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    $336 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
   }
   $252 = $336;
   $252$hi = i64toi32_i32$1;
   i64toi32_i32$2 = ($5 + 176 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 1;
   i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $337 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
    $337 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
   }
   $257$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $252$hi;
   i64toi32_i32$5 = $252;
   i64toi32_i32$2 = $257$hi;
   i64toi32_i32$0 = $337;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$0 = -1;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $4 = i64toi32_i32$3;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $249$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$0 = 0;
   __multi3($248 | 0, $249 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $262 = $5 + 144 | 0;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$1 = $3;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = 15;
   i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
    $338 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
    $338 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
   }
   $264$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $264$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$4 = 0;
   __multi3($262 | 0, $338 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, $4 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0);
   $267 = $5 + 112 | 0;
   i64toi32_i32$4 = i64toi32_i32$0;
   $268 = $4;
   $268$hi = i64toi32_i32$0;
   i64toi32_i32$1 = ($5 + 160 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $272 = i64toi32_i32$4;
   $272$hi = i64toi32_i32$0;
   i64toi32_i32$1 = $5;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 160 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 164 | 0) >> 2] | 0;
   $6 = i64toi32_i32$0;
   $6$hi = i64toi32_i32$4;
   i64toi32_i32$1 = (i64toi32_i32$1 + 144 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $279 = i64toi32_i32$4;
   $279$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$1 = $6;
   i64toi32_i32$4 = $279$hi;
   i64toi32_i32$2 = $279;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $2 = i64toi32_i32$5;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $6$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$2 = $6;
   $283 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$0 = 0;
   $284$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $272$hi;
   i64toi32_i32$2 = $272;
   i64toi32_i32$3 = $284$hi;
   i64toi32_i32$1 = $283;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $285$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$0 = $2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 1;
   $287 = i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$0 = 0;
   $288$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $285$hi;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$5 = $288$hi;
   i64toi32_i32$2 = $287;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $289$hi = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = $289$hi;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
   $290$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $268$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = $290$hi;
   i64toi32_i32$2 = 0;
   __multi3($267 | 0, $268 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0);
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 1;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$3 = $2;
   i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
   $294$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = $294$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = 0;
   __multi3($5 + 128 | 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$0 | 0, $4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   $9 = $11 + ($10 - $9 | 0) | 0;
   label$12 : {
    label$13 : {
     i64toi32_i32$0 = $5;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 112 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 116 | 0) >> 2] | 0;
     $15 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$2;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $339 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $339 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     }
     $16 = $339;
     $16$hi = i64toi32_i32$3;
     $305 = $16;
     $305$hi = i64toi32_i32$3;
     i64toi32_i32$2 = $5;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 128 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 132 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $341 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $341 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     $308 = $341;
     $308$hi = i64toi32_i32$3;
     i64toi32_i32$0 = ($5 + 128 | 0) + 8 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $17 = i64toi32_i32$3;
     $17$hi = i64toi32_i32$2;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $342 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $342 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     }
     $314$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $308$hi;
     i64toi32_i32$2 = $308;
     i64toi32_i32$0 = $314$hi;
     i64toi32_i32$5 = $342;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $315 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
     $315$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $305$hi;
     i64toi32_i32$3 = $305;
     i64toi32_i32$2 = $315$hi;
     i64toi32_i32$5 = $315;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $12 = i64toi32_i32$4;
     $12$hi = i64toi32_i32$1;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$3 = -1;
     i64toi32_i32$5 = -13927;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $18 = i64toi32_i32$2;
     $18$hi = i64toi32_i32$4;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $344 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      $344 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
     }
     $2 = $344;
     $2$hi = i64toi32_i32$0;
     $321 = $2;
     $321$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $7$hi;
     i64toi32_i32$4 = $7;
     i64toi32_i32$1 = 65536;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $19 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
     $19$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $19;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
      $345 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
      $345 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
     }
     $20 = $345;
     $20$hi = i64toi32_i32$4;
     i64toi32_i32$1 = $20;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $346 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      $346 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
     }
     $4 = $346;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $321$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = __wasm_i64_mul($321 | 0, i64toi32_i32$0 | 0, $4 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $21 = i64toi32_i32$1;
     $21$hi = i64toi32_i32$0;
     $330 = i64toi32_i32$1;
     $330$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$4 = $1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
      $347 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
      $347 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
     }
     $22 = $347;
     $22$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $22;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $348 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
      $348 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
     }
     $6 = $348;
     $6$hi = i64toi32_i32$4;
     $335 = $6;
     $335$hi = i64toi32_i32$4;
     i64toi32_i32$1 = ($5 + 112 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
      $350 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
      $350 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
     }
     $340 = $350;
     $340$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$0 = $15;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $351 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      $351 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
     }
     $342$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $340$hi;
     i64toi32_i32$4 = $340;
     i64toi32_i32$0 = $342$hi;
     i64toi32_i32$5 = $351;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $343 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
     $343$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$1 = $17;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $352 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      $352 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
     }
     $345$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $343$hi;
     i64toi32_i32$0 = $343;
     i64toi32_i32$1 = $345$hi;
     i64toi32_i32$5 = $352;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $346$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$4 = $12;
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$5 = $16;
     $349 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $350$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $346$hi;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$2 = $350$hi;
     i64toi32_i32$0 = $349;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $351$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$4 = $18;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$0 = $12;
     $354 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $355$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $351$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$3 = $355$hi;
     i64toi32_i32$5 = $354;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$0 = -1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $15 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $353 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      $353 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
     }
     $12 = $353;
     $12$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $335$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = __wasm_i64_mul($335 | 0, i64toi32_i32$4 | 0, $12 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $361 = i64toi32_i32$1;
     $361$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $330$hi;
     i64toi32_i32$2 = $330;
     i64toi32_i32$1 = $361$hi;
     i64toi32_i32$5 = $361;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $16 = i64toi32_i32$0;
     $16$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$5 = $21;
     i64toi32_i32$4 = 0;
     $366 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     $366$hi = i64toi32_i32$4;
     i64toi32_i32$4 = i64toi32_i32$3;
     $367 = i64toi32_i32$0;
     $367$hi = i64toi32_i32$3;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$5 = $15;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
     $15 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
     $15$hi = i64toi32_i32$3;
     $370 = $15;
     $370$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$4 = $1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 63;
     i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $355 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
      $355 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
     }
     $23 = $355;
     $23$hi = i64toi32_i32$5;
     $373 = $23;
     $373$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $7$hi;
     i64toi32_i32$3 = $7;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
      $356 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
      $356 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
     }
     $375$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $373$hi;
     i64toi32_i32$5 = $373;
     i64toi32_i32$3 = $375$hi;
     i64toi32_i32$2 = $356;
     i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
     $7 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
     $7$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $370$hi;
     i64toi32_i32$4 = $7$hi;
     i64toi32_i32$4 = __wasm_i64_mul($370 | 0, i64toi32_i32$5 | 0, $7 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $379 = i64toi32_i32$4;
     $379$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $367$hi;
     i64toi32_i32$3 = $367;
     i64toi32_i32$4 = $379$hi;
     i64toi32_i32$2 = $379;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $17 = i64toi32_i32$1;
     $17$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$2 = $16;
     $383 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $384$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $366$hi;
     i64toi32_i32$2 = $366;
     i64toi32_i32$0 = $384$hi;
     i64toi32_i32$3 = $383;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $385$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = __wasm_i64_mul($12 | 0, i64toi32_i32$1 | 0, $4 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $388 = i64toi32_i32$2;
     $388$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $385$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$2 = $388$hi;
     i64toi32_i32$3 = $388;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $389 = i64toi32_i32$0;
     $389$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = __wasm_i64_mul($15 | 0, i64toi32_i32$4 | 0, $4 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $21 = i64toi32_i32$5;
     $21$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $7$hi;
     i64toi32_i32$4 = $12$hi;
     i64toi32_i32$4 = $7$hi;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$5 = __wasm_i64_mul($7 | 0, i64toi32_i32$4 | 0, $12 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $396 = i64toi32_i32$5;
     $396$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $21$hi;
     i64toi32_i32$1 = $21;
     i64toi32_i32$5 = $396$hi;
     i64toi32_i32$3 = $396;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $16 = i64toi32_i32$2;
     $16$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $21$hi;
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$3 = $21;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
      $357 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
      $357 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     }
     $402 = $357;
     $402$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$4 = $16;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $358 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
      $358 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
     }
     $404$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $402$hi;
     i64toi32_i32$0 = $402;
     i64toi32_i32$4 = $404$hi;
     i64toi32_i32$1 = $358;
     i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
     $405 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $405$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $389$hi;
     i64toi32_i32$3 = $389;
     i64toi32_i32$0 = $405$hi;
     i64toi32_i32$1 = $405;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $406 = i64toi32_i32$5;
     $406$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $17$hi;
     $407 = $17;
     $407$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$4 = $16;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
      $359 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
      $359 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
     }
     $409$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $407$hi;
     i64toi32_i32$2 = $407;
     i64toi32_i32$4 = $409$hi;
     i64toi32_i32$1 = $359;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $16 = i64toi32_i32$0;
     $16$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$1 = $17;
     $413 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $414$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $406$hi;
     i64toi32_i32$1 = $406;
     i64toi32_i32$5 = $414$hi;
     i64toi32_i32$2 = $413;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $415 = i64toi32_i32$4;
     $415$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $16$hi;
     $416 = $16;
     $416$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$3 = $18;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
     $18 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
     $18$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$3 = $7$hi;
     i64toi32_i32$3 = __wasm_i64_mul($18 | 0, i64toi32_i32$1 | 0, $7 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $21 = i64toi32_i32$3;
     $21$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $6$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$3 = $6$hi;
     i64toi32_i32$3 = __wasm_i64_mul($2 | 0, i64toi32_i32$1 | 0, $6 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $425 = i64toi32_i32$3;
     $425$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$0 = $21;
     i64toi32_i32$3 = $425$hi;
     i64toi32_i32$2 = $425;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $17 = i64toi32_i32$5;
     $17$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $21$hi;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$0 = $21$hi;
     i64toi32_i32$2 = $21;
     $429 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $430 = $429;
     $430$hi = i64toi32_i32$1;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$1 = $15$hi;
     i64toi32_i32$1 = $22$hi;
     i64toi32_i32$2 = $22;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = -2;
     i64toi32_i32$4 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
     $21 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     $21$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$2 = __wasm_i64_mul($15 | 0, i64toi32_i32$4 | 0, $21 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $436 = i64toi32_i32$2;
     $436$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$2 = $436$hi;
     i64toi32_i32$0 = $436;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $24 = i64toi32_i32$3;
     $24$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$0 = $17;
     $440 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $441$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $430$hi;
     i64toi32_i32$0 = $430;
     i64toi32_i32$5 = $441$hi;
     i64toi32_i32$1 = $440;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $442$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $416$hi;
     i64toi32_i32$4 = $416;
     i64toi32_i32$0 = $442$hi;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $17 = i64toi32_i32$5;
     $17$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$4 = $16$hi;
     i64toi32_i32$1 = $16;
     $446 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $447$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $415$hi;
     i64toi32_i32$1 = $415;
     i64toi32_i32$2 = $447$hi;
     i64toi32_i32$4 = $446;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $448 = i64toi32_i32$0;
     $448$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     $449 = $17;
     $449$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = __wasm_i64_mul($18 | 0, i64toi32_i32$5 | 0, $4 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $16 = i64toi32_i32$1;
     $16$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $21$hi;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$5 = $21$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = __wasm_i64_mul($21 | 0, i64toi32_i32$5 | 0, $12 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $456 = i64toi32_i32$1;
     $456$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$3 = $16;
     i64toi32_i32$1 = $456$hi;
     i64toi32_i32$4 = $456;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $4 = i64toi32_i32$2;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $7$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$3 = $7$hi;
     i64toi32_i32$3 = __wasm_i64_mul($2 | 0, i64toi32_i32$0 | 0, $7 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $461 = i64toi32_i32$3;
     $461$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$3 = $461$hi;
     i64toi32_i32$4 = $461;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $12 = i64toi32_i32$1;
     $12$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$5 = $6$hi;
     i64toi32_i32$5 = __wasm_i64_mul($15 | 0, i64toi32_i32$2 | 0, $6 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $466 = i64toi32_i32$5;
     $466$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$5 = $466$hi;
     i64toi32_i32$4 = $466;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $15 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $360 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
      $360 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
     }
     $469 = $360;
     $469$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $4;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$4 = $16;
     $472 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $473$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$4 = $12;
     i64toi32_i32$2 = $4;
     $476 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $477$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $473$hi;
     i64toi32_i32$2 = $472;
     i64toi32_i32$1 = $477$hi;
     i64toi32_i32$0 = $476;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $478$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$4 = $15;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$0 = $12;
     $481 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $482$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $478$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$3 = $482$hi;
     i64toi32_i32$2 = $481;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
      $362 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
      $362 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
     }
     $484$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $469$hi;
     i64toi32_i32$5 = $469;
     i64toi32_i32$4 = $484$hi;
     i64toi32_i32$2 = $362;
     i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
     $485 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     $485$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $449$hi;
     i64toi32_i32$0 = $449;
     i64toi32_i32$5 = $485$hi;
     i64toi32_i32$2 = $485;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $4 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$2 = $17;
     $489 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $490$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $448$hi;
     i64toi32_i32$2 = $448;
     i64toi32_i32$1 = $490$hi;
     i64toi32_i32$0 = $489;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $491 = i64toi32_i32$5;
     $491$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     $492 = $4;
     $492$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $24$hi;
     $493 = $24;
     $493$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$2 = __wasm_i64_mul($2 | 0, i64toi32_i32$3 | 0, $21 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $2 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$3 = $6$hi;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$2 = __wasm_i64_mul($18 | 0, i64toi32_i32$3 | 0, $6 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $500 = i64toi32_i32$2;
     $500$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$4 = $2;
     i64toi32_i32$2 = $500$hi;
     i64toi32_i32$0 = $500;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $6 = i64toi32_i32$1;
     $6$hi = i64toi32_i32$5;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $363 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
      $363 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
     }
     $503 = $363;
     $503$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $6$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $6$hi;
     i64toi32_i32$5 = $6;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $2;
     $506 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = $506;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
      $364 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
      $364 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
     }
     $508$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $503$hi;
     i64toi32_i32$5 = $503;
     i64toi32_i32$0 = $508$hi;
     i64toi32_i32$3 = $364;
     i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
     $509 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $509$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $493$hi;
     i64toi32_i32$4 = $493;
     i64toi32_i32$5 = $509$hi;
     i64toi32_i32$3 = $509;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $2 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $24$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$4 = $24$hi;
     i64toi32_i32$3 = $24;
     i64toi32_i32$0 = 0;
     $514 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     $514$hi = i64toi32_i32$0;
     i64toi32_i32$0 = i64toi32_i32$1;
     $515 = i64toi32_i32$2;
     $515$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $15$hi;
     i64toi32_i32$3 = $15;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
      $365 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
      $365 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     }
     $517$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $515$hi;
     i64toi32_i32$0 = $515;
     i64toi32_i32$3 = $517$hi;
     i64toi32_i32$4 = $365;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $518$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $518$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$4 = $2;
     $520 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $521$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $514$hi;
     i64toi32_i32$4 = $514;
     i64toi32_i32$2 = $521$hi;
     i64toi32_i32$0 = $520;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $522$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $492$hi;
     i64toi32_i32$1 = $492;
     i64toi32_i32$4 = $522$hi;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $2 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$0 = $4;
     $526 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $527$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $491$hi;
     i64toi32_i32$0 = $491;
     i64toi32_i32$3 = $527$hi;
     i64toi32_i32$1 = $526;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $4 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$0 = 131071;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$13
     }
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$5 = $23$hi;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$1 = $20;
     i64toi32_i32$2 = $23$hi;
     i64toi32_i32$0 = $23;
     i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     $19 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $19$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$0 = $14$hi;
     __multi3($5 + 80 | 0 | 0, $2 | 0, i64toi32_i32$2 | 0, $4 | 0, i64toi32_i32$1 | 0, $3 | 0, i64toi32_i32$5 | 0, $14 | 0, i64toi32_i32$0 | 0);
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$1 = $1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 49;
     i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
      $368 = 0;
     } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
      $368 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
     }
     $541$hi = i64toi32_i32$5;
     i64toi32_i32$0 = ($5 + 80 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $545 = i64toi32_i32$5;
     $545$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $541$hi;
     i64toi32_i32$0 = $368;
     i64toi32_i32$5 = $545$hi;
     i64toi32_i32$2 = $545;
     i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
     $546$hi = i64toi32_i32$4;
     i64toi32_i32$1 = $5;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] | 0;
     $1 = i64toi32_i32$4;
     $1$hi = i64toi32_i32$0;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 0;
     $550 = (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$1 = 0;
     $551$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $546$hi;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$0 = $551$hi;
     i64toi32_i32$4 = $550;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
     $12 = i64toi32_i32$5;
     $12$hi = i64toi32_i32$3;
     $9 = $9 + 16382 | 0;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$4 = $1;
     i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
     $6 = i64toi32_i32$0;
     $6$hi = i64toi32_i32$5;
     break label$12;
    }
    $558 = $5 + 96 | 0;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$3 = $2;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $369 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $369 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
    }
    $560 = $369;
    $560$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$5 = $4;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
     $371 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
     $371 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
    }
    $562$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $560$hi;
    i64toi32_i32$1 = $560;
    i64toi32_i32$5 = $562$hi;
    i64toi32_i32$4 = $371;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $2 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
    $2$hi = i64toi32_i32$5;
    $564 = $2;
    $564$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$3 = $4;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $372 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $372 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
    }
    $4 = $372;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$1 = $564$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$4 = $14$hi;
    __multi3($558 | 0, $564 | 0, i64toi32_i32$1 | 0, $4 | 0, i64toi32_i32$3 | 0, $3 | 0, i64toi32_i32$5 | 0, $14 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
     $374 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
     $374 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    }
    $571$hi = i64toi32_i32$5;
    i64toi32_i32$4 = ($5 + 96 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $575 = i64toi32_i32$5;
    $575$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $571$hi;
    i64toi32_i32$4 = $374;
    i64toi32_i32$5 = $575$hi;
    i64toi32_i32$1 = $575;
    i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$1 | 0;
    i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0;
    i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
    $576$hi = i64toi32_i32$0;
    i64toi32_i32$3 = $5;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 96 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 100 | 0) >> 2] | 0;
    $6 = i64toi32_i32$0;
    $6$hi = i64toi32_i32$4;
    i64toi32_i32$3 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    $580 = (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$3 = 0;
    $581$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $576$hi;
    i64toi32_i32$1 = i64toi32_i32$2;
    i64toi32_i32$4 = $581$hi;
    i64toi32_i32$0 = $580;
    i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
    $12 = i64toi32_i32$5;
    $12$hi = i64toi32_i32$2;
    $9 = $9 + 16383 | 0;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = $6$hi;
    i64toi32_i32$0 = $6;
    i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    $6 = i64toi32_i32$4;
    $6$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    $22 = $1;
    $22$hi = i64toi32_i32$5;
   }
   label$14 : {
    if (($9 | 0) < (32767 | 0)) {
     break label$14
    }
    i64toi32_i32$5 = $8$hi;
    i64toi32_i32$2 = $8;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $8 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $8$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $1 = 0;
    $1$hi = i64toi32_i32$3;
    break label$1;
   }
   label$15 : {
    label$16 : {
     if (($9 | 0) < (1 | 0)) {
      break label$16
     }
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$5 = $12;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
      $375 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
      $375 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
     }
     $595 = $375;
     $595$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$3 = $6;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 63;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $376 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
      $376 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
     }
     $597$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $595$hi;
     i64toi32_i32$2 = $595;
     i64toi32_i32$3 = $597$hi;
     i64toi32_i32$0 = $376;
     i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $12 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     $12$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = $9;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 48;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
      $377 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
      $377 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
     }
     $601$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4;
     i64toi32_i32$5 = 65535;
     i64toi32_i32$0 = -1;
     i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
     $603 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $603$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $601$hi;
     i64toi32_i32$2 = $377;
     i64toi32_i32$3 = $603$hi;
     i64toi32_i32$0 = $603;
     i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $15 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     $15$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $6$hi;
     i64toi32_i32$5 = $6;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
      $378 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
      $378 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
     }
     $4 = $378;
     $4$hi = i64toi32_i32$2;
     break label$15;
    }
    label$17 : {
     if (($9 | 0) > (-113 | 0)) {
      break label$17
     }
     i64toi32_i32$2 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$5 = $4$hi;
    __lshrti3($5 + 64 | 0 | 0, $2 | 0, i64toi32_i32$2 | 0, $4 | 0, i64toi32_i32$5 | 0, 1 - $9 | 0 | 0);
    i64toi32_i32$5 = $22$hi;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$5 = $22$hi;
    i64toi32_i32$2 = $19$hi;
    __ashlti3($5 + 48 | 0 | 0, $22 | 0, i64toi32_i32$5 | 0, $19 | 0, i64toi32_i32$2 | 0, $9 + 112 | 0 | 0);
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $14$hi;
    i64toi32_i32$3 = $5;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $2 = i64toi32_i32$2;
    $2$hi = i64toi32_i32$5;
    i64toi32_i32$3 = (i64toi32_i32$3 + 64 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $15 = i64toi32_i32$5;
    $15$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$5 = $14$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $15$hi;
    __multi3($5 + 32 | 0 | 0, $3 | 0, i64toi32_i32$2 | 0, $14 | 0, i64toi32_i32$5 | 0, $2 | 0, i64toi32_i32$3 | 0, $15 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$5 = ($5 + 48 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $636 = i64toi32_i32$0;
    $636$hi = i64toi32_i32$3;
    i64toi32_i32$5 = ($5 + 32 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
     $380 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
     $380 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
    }
    $641 = $380;
    $641$hi = i64toi32_i32$3;
    i64toi32_i32$0 = $5;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
    $1 = i64toi32_i32$3;
    $1$hi = i64toi32_i32$5;
    i64toi32_i32$0 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $381 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     $381 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
    }
    $645$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $641$hi;
    i64toi32_i32$5 = $641;
    i64toi32_i32$0 = $645$hi;
    i64toi32_i32$2 = $381;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $646 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $646$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $636$hi;
    i64toi32_i32$3 = $636;
    i64toi32_i32$5 = $646$hi;
    i64toi32_i32$2 = $646;
    i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
    $647 = i64toi32_i32$1;
    $647$hi = i64toi32_i32$4;
    i64toi32_i32$0 = $5;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
    $4 = i64toi32_i32$4;
    $4$hi = i64toi32_i32$3;
    $650 = i64toi32_i32$4;
    $650$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$0 = $1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
     $382 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$5 | 0) | 0;
     $382 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
    }
    $1 = $382;
    $1$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $650$hi;
    i64toi32_i32$3 = $650;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1;
    $654 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$3 = 0;
    $655$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $647$hi;
    i64toi32_i32$2 = $647;
    i64toi32_i32$4 = $655$hi;
    i64toi32_i32$0 = $654;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    $12 = i64toi32_i32$5;
    $12$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$3 = $4;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$0 = $1;
    i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
    $4 = i64toi32_i32$4;
    $4$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   __multi3($5 + 16 | 0 | 0, $3 | 0, i64toi32_i32$5 | 0, $14 | 0, i64toi32_i32$3 | 0, 3 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$3;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 0;
   __multi3($5 | 0, $3 | 0, i64toi32_i32$0 | 0, $14 | 0, i64toi32_i32$1 | 0, 5 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0);
   i64toi32_i32$5 = $15$hi;
   $667 = $15;
   $667$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   $668 = $2;
   $668$hi = i64toi32_i32$5;
   i64toi32_i32$1 = $2;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = 1;
   i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
   $1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $1$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$5 = $1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$0 = $4;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $4 = i64toi32_i32$2;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$0 = $3;
   $676 = i64toi32_i32$4 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$3 = $12$hi;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$4 = $1$hi;
   i64toi32_i32$5 = $1;
   $680 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$0 = 0;
   $681$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $12$hi;
   i64toi32_i32$5 = $12;
   i64toi32_i32$3 = $681$hi;
   i64toi32_i32$4 = $680;
   i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$4 = $14;
   $685 = i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$5;
   i64toi32_i32$5 = $14;
   $689 = (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0 ? $676 : $685;
   i64toi32_i32$4 = 0;
   $690$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $668$hi;
   i64toi32_i32$5 = $668;
   i64toi32_i32$0 = $690$hi;
   i64toi32_i32$2 = $689;
   i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $3 = i64toi32_i32$3;
   $3$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$2 = $2;
   $694 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$4 = 0;
   $695$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $667$hi;
   i64toi32_i32$2 = $667;
   i64toi32_i32$1 = $695$hi;
   i64toi32_i32$5 = $694;
   i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $2 = i64toi32_i32$0;
   $2$hi = i64toi32_i32$3;
   $697 = i64toi32_i32$0;
   $697$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$2 = 2147418112;
   i64toi32_i32$5 = 0;
   $700 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$5 = $5;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] | 0;
   $703 = i64toi32_i32$4;
   $703$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$5 = $4;
   i64toi32_i32$4 = $703$hi;
   i64toi32_i32$2 = $703;
   $704 = i64toi32_i32$3 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$2 = ($5 + 16 | 0) + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $2 = i64toi32_i32$5;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $1;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$4 = $2;
   $711 = i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$2 = i64toi32_i32$5;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$4 = $1;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$5 = $2;
   $716 = $700 & ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) | 0 ? $704 : $711) | 0;
   i64toi32_i32$4 = 0;
   $717$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$5 = $3;
   i64toi32_i32$2 = $717$hi;
   i64toi32_i32$3 = $716;
   i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $2 = i64toi32_i32$1;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$3 = $3;
   $721 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$4 = 0;
   $722$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $697$hi;
   i64toi32_i32$3 = $697;
   i64toi32_i32$0 = $722$hi;
   i64toi32_i32$5 = $721;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $3 = i64toi32_i32$2;
   $3$hi = i64toi32_i32$1;
   $724 = i64toi32_i32$2;
   $724$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$4 = i64toi32_i32$2;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$5 = 0;
   $727 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$5 = $5;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $730 = i64toi32_i32$4;
   $730$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = $4;
   i64toi32_i32$4 = $730$hi;
   i64toi32_i32$3 = $730;
   $731 = i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$3 = $5 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   $4 = i64toi32_i32$5;
   $4$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$4 = $4;
   $737 = i64toi32_i32$1 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$4 = $1;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$5 = $4;
   $742 = $727 & ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $731 : $737) | 0;
   i64toi32_i32$4 = 0;
   $743$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$5 = $2;
   i64toi32_i32$3 = $743$hi;
   i64toi32_i32$1 = $742;
   i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1 = i64toi32_i32$0;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = $2;
   $747 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$4 = 0;
   $748$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $724$hi;
   i64toi32_i32$1 = $724;
   i64toi32_i32$2 = $748$hi;
   i64toi32_i32$5 = $747;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $749$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $8$hi;
   i64toi32_i32$0 = $749$hi;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$1 = $8$hi;
   i64toi32_i32$5 = $8;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $8 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $8$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$4 = $0;
  HEAP32[i64toi32_i32$4 >> 2] = $1;
  HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $8$hi;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $8;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$1;
  __stack_pointer = $5 + 336 | 0;
 }
 
 function __extenddftf2($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4 = 0, $4$hi = 0, $2 = 0, $3 = 0, $3$hi = 0, $5 = 0, $5$hi = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $6 = 0, $31 = 0, $32 = 0, $33 = 0, $33$hi = 0, $37 = 0, $50 = 0, $50$hi = 0, $54$hi = 0, $63 = 0, $63$hi = 0, $64 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    wasm2js_scratch_store_f64(+$1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $3 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $3;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $4 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $4;
    i64toi32_i32$2 = -1048576;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$0 = 2145386495;
    i64toi32_i32$3 = -1;
    if (i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$3 = $4;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 60;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
     $26 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
     $26 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    }
    $5 = $26;
    $5$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$1 = $4;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 4;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $27 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $27 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
    }
    i64toi32_i32$5 = $27;
    i64toi32_i32$1 = 1006632960;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $4 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$4;
    break label$1;
   }
   label$3 : {
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$3 = $4;
    i64toi32_i32$5 = 2146435072;
    i64toi32_i32$0 = 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$3
    }
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$0 = $3;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 60;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     $28 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
     $28 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    }
    $5 = $28;
    $5$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$3 = $3;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 4;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $29 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     $29 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    i64toi32_i32$4 = $29;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    $4 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$3 = $4$hi;
    if (!!($4 | i64toi32_i32$3 | 0)) {
     break label$4
    }
    i64toi32_i32$3 = 0;
    $5 = 0;
    $5$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $4 = 0;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   $32 = $2;
   i64toi32_i32$3 = $4$hi;
   $33 = $4;
   $33$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $3$hi;
   $37 = Math_clz32($3) + 32 | 0;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$0 = $4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = 0;
    $30 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    $30 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
   }
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$3 = $4;
   i64toi32_i32$0 = 1;
   i64toi32_i32$5 = 0;
   $6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0 ? $37 : Math_clz32($30);
   i64toi32_i32$3 = $33$hi;
   i64toi32_i32$4 = 0;
   __ashlti3($32 | 0, $33 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0, $6 + 49 | 0 | 0);
   i64toi32_i32$5 = $2 + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$4;
   i64toi32_i32$4 = 65536;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
   $50 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
   $50$hi = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = 15372 - $6 | 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = 48;
   i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
    $31 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $31 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
   }
   $54$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $50$hi;
   i64toi32_i32$4 = $50;
   i64toi32_i32$3 = $54$hi;
   i64toi32_i32$0 = $31;
   i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $4 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
   $4$hi = i64toi32_i32$3;
   i64toi32_i32$5 = $2;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $5 = i64toi32_i32$3;
   $5$hi = i64toi32_i32$4;
  }
  i64toi32_i32$4 = $5$hi;
  i64toi32_i32$3 = $0;
  HEAP32[i64toi32_i32$3 >> 2] = $5;
  HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$5 = $3;
  i64toi32_i32$3 = -2147483648;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $63 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
  $63$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $4$hi;
  i64toi32_i32$4 = $4;
  i64toi32_i32$5 = $63$hi;
  i64toi32_i32$0 = $63;
  i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
  $64 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
  i64toi32_i32$4 = $0;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $64;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$5;
  __stack_pointer = $2 + 16 | 0;
 }
 
 function __extendsftf2($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $4 = 0, i64toi32_i32$4 = 0, $2 = 0, $5 = 0, $5$hi = 0, $6 = 0, $6$hi = 0, $3 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $30 = 0, $38 = 0, $38$hi = 0, $42$hi = 0, $48 = 0, $49 = 0, $49$hi = 0, $53$hi = 0, $54 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    $3 = (wasm2js_scratch_store_f32($1), wasm2js_scratch_load_i32(2));
    $4 = $3 & 2147483647 | 0;
    if (($4 + -8388608 | 0) >>> 0 > 2130706431 >>> 0) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $4;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $24 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $24 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    i64toi32_i32$0 = $24;
    i64toi32_i32$2 = 1065353216;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $5 = i64toi32_i32$4;
    $5$hi = i64toi32_i32$5;
    i64toi32_i32$5 = 0;
    $6 = 0;
    $6$hi = i64toi32_i32$5;
    break label$1;
   }
   label$3 : {
    if ($4 >>> 0 < 2139095040 >>> 0) {
     break label$3
    }
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $3;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     $25 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
     $25 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    }
    i64toi32_i32$5 = $25;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $5 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $6 = 0;
    $6$hi = i64toi32_i32$1;
    break label$1;
   }
   label$4 : {
    if ($4) {
     break label$4
    }
    i64toi32_i32$1 = 0;
    $6 = 0;
    $6$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $5 = 0;
    $5$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = 0;
   $30 = $4;
   $4 = Math_clz32($4);
   i64toi32_i32$5 = 0;
   __ashlti3($2 | 0, $30 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $4 + 81 | 0 | 0);
   i64toi32_i32$0 = $2 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
   $38 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
   $38$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = 16265 - $4 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    $26 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
    $26 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
   }
   $42$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $38$hi;
   i64toi32_i32$5 = $38;
   i64toi32_i32$1 = $42$hi;
   i64toi32_i32$3 = $26;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $5 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $2;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $6 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$1 = $0;
  HEAP32[i64toi32_i32$1 >> 2] = $6;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
  $48 = i64toi32_i32$1;
  i64toi32_i32$5 = $5$hi;
  $49 = $5;
  $49$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$0 = $3 & -2147483648 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   $27 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
   $27 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
  }
  $53$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $49$hi;
  i64toi32_i32$5 = $49;
  i64toi32_i32$0 = $53$hi;
  i64toi32_i32$3 = $27;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  $54 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
  i64toi32_i32$5 = $48;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $54;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$0;
  __stack_pointer = $2 + 16 | 0;
 }
 
 function __floatsitf($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $5 = 0, i64toi32_i32$4 = 0, $2 = 0, $3 = 0, $3$hi = 0, $4 = 0, $4$hi = 0, $21 = 0, $22 = 0, $19 = 0, $27 = 0, $27$hi = 0, $31$hi = 0, $32 = 0, $32$hi = 0, $36$hi = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    if ($1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $3 = 0;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $4 = 0;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   $5 = $1 >> 31 | 0;
   $5 = ($1 ^ $5 | 0) - $5 | 0;
   i64toi32_i32$0 = 0;
   $19 = $5;
   $5 = Math_clz32($5);
   i64toi32_i32$1 = 0;
   __ashlti3($2 | 0, $19 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $5 + 81 | 0 | 0);
   i64toi32_i32$2 = $2 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $27 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $27$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $5 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $21 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $21 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $31$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $27$hi;
   i64toi32_i32$1 = $27;
   i64toi32_i32$0 = $31$hi;
   i64toi32_i32$3 = $21;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $32 = i64toi32_i32$4;
   $32$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $1 & -2147483648 | 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    $22 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
    $22 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
   }
   $36$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $32$hi;
   i64toi32_i32$5 = $32;
   i64toi32_i32$2 = $36$hi;
   i64toi32_i32$3 = $22;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $4 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $2;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $3 = i64toi32_i32$2;
   $3$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$2 = $0;
  HEAP32[i64toi32_i32$2 >> 2] = $3;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $4$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $4;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  __stack_pointer = $2 + 16 | 0;
 }
 
 function __floatunsitf($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $2 = 0, $3 = 0, $3$hi = 0, $4 = 0, $4$hi = 0, $17 = 0, $11 = 0, $19 = 0, $19$hi = 0, $23$hi = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    if ($1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $3 = 0;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $4 = 0;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = 0;
   $11 = $1;
   $1 = Math_clz32($1);
   i64toi32_i32$1 = 0;
   __ashlti3($2 | 0, $11 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $1 + 81 | 0 | 0);
   i64toi32_i32$2 = $2 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $19 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $19$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $1 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $17 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $17 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $23$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $19$hi;
   i64toi32_i32$1 = $19;
   i64toi32_i32$0 = $23$hi;
   i64toi32_i32$3 = $17;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $4 = i64toi32_i32$4;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$2 = $2;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $3 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$5 = $0;
  HEAP32[i64toi32_i32$5 >> 2] = $3;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $4;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
  __stack_pointer = $2 + 16 | 0;
 }
 
 function __fe_getround() {
  return 0 | 0;
 }
 
 function __fe_raise_inexact() {
  return 0 | 0;
 }
 
 function __lshrti3($0, $1, $1$hi, $2, $2$hi, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $11$hi = 0, $18$hi = 0, $19 = 0, $19$hi = 0, $4 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $18 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $18 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $1 = $18;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $2 = 0;
    $2$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $20 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $20 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $19 = $20;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = 0;
   $4 = $3;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $21 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $21 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $22 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $22 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2 = $22;
   $2$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function __multf3($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, $13$hi = 0, $5 = 0, $7$hi = 0, $7 = 0, $13 = 0, $8$hi = 0, $10 = 0, $18$hi = 0, $8 = 0, $16$hi = 0, $6$hi = 0, $12 = 0, $6 = 0, $18 = 0, $20$hi = 0, $16 = 0, $11 = 0, $17$hi = 0, $9 = 0, $9$hi = 0, $15$hi = 0, $17 = 0, $20 = 0, $15 = 0, $14 = 0, $19$hi = 0, $21$hi = 0, $22$hi = 0, $23$hi = 0, $24$hi = 0, $220 = 0, $221 = 0, $223 = 0, $224 = 0, $226 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $19 = 0, $233 = 0, $234 = 0, $235 = 0, $237 = 0, $21 = 0, $239 = 0, $22 = 0, $240 = 0, $24 = 0, $241 = 0, $242 = 0, $243 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $53 = 0, $57 = 0, $64 = 0, $68 = 0, $77 = 0, $77$hi = 0, $89 = 0, $89$hi = 0, $111 = 0, $112 = 0, $112$hi = 0, $113 = 0, $113$hi = 0, $120$hi = 0, $123$hi = 0, $140 = 0, $141 = 0, $141$hi = 0, $142 = 0, $142$hi = 0, $149$hi = 0, $152$hi = 0, $170 = 0, $170$hi = 0, $175 = 0, $175$hi = 0, $182 = 0, $182$hi = 0, $189 = 0, $189$hi = 0, $194 = 0, $194$hi = 0, $203 = 0, $203$hi = 0, $205 = 0, $205$hi = 0, $207 = 0, $207$hi = 0, $215 = 0, $215$hi = 0, $217 = 0, $217$hi = 0, $219 = 0, $219$hi = 0, $222 = 0, $224$hi = 0, $225 = 0, $225$hi = 0, $227 = 0, $227$hi = 0, $236 = 0, $236$hi = 0, $238 = 0, $238$hi = 0, $244 = 0, $244$hi = 0, $249 = 0, $249$hi = 0, $252$hi = 0, $23 = 0, $268 = 0, $268$hi = 0, $272 = 0, $273 = 0, $273$hi = 0, $277 = 0, $277$hi = 0, $281 = 0, $282$hi = 0, $283$hi = 0, $286 = 0, $286$hi = 0, $287 = 0, $287$hi = 0, $288 = 0, $288$hi = 0, $291 = 0, $292$hi = 0, $295 = 0, $296$hi = 0, $297$hi = 0, $301 = 0, $302$hi = 0, $303 = 0, $303$hi = 0, $310 = 0, $310$hi = 0, $314 = 0, $316 = 0, $316$hi = 0, $318$hi = 0, $319 = 0, $319$hi = 0, $320 = 0, $320$hi = 0, $321 = 0, $321$hi = 0, $323$hi = 0, $327 = 0, $328$hi = 0, $329 = 0, $329$hi = 0, $330 = 0, $330$hi = 0, $332 = 0, $332$hi = 0, $335 = 0, $336$hi = 0, $339 = 0, $340$hi = 0, $341$hi = 0, $344 = 0, $345$hi = 0, $347$hi = 0, $348 = 0, $348$hi = 0, $352 = 0, $353$hi = 0, $354 = 0, $354$hi = 0, $355 = 0, $355$hi = 0, $358 = 0, $359$hi = 0, $362 = 0, $363$hi = 0, $364$hi = 0, $368 = 0, $369$hi = 0, $379 = 0, $379$hi = 0, $381$hi = 0, $384 = 0, $384$hi = 0, $386$hi = 0, $390 = 0, $390$hi = 0, $392$hi = 0, $426 = 0, $426$hi = 0, $428 = 0, $428$hi = 0, $429 = 0, $429$hi = 0, $431 = 0, $431$hi = 0, $435 = 0, $435$hi = 0, $437 = 0, $438$hi = 0, $443 = 0, $443$hi = 0, $447 = 0, $447$hi = 0, $456$hi = 0, $458 = 0, $458$hi = 0, $464 = 0, $470 = 0, $470$hi = 0, $475 = 0, $476$hi = 0, $480 = 0, $480$hi = 0, $484 = 0, $484$hi = 0, $487 = 0, $487$hi = 0, $491 = 0, $492$hi = 0;
  $5 = __stack_pointer - 96 | 0;
  __stack_pointer = $5;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $6 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$1;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$0 = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$3 = $2;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $7 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  $7$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $8 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $8$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $8;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $220 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $220 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $9 = $220;
  $9$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$1 = $4;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $221 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $221 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  $10 = $221 & 32767 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $223 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $223 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     $11 = $223 & 32767 | 0;
     if (($11 + -32767 | 0) >>> 0 < -32766 >>> 0) {
      break label$3
     }
     $12 = 0;
     if (($10 + -32767 | 0) >>> 0 > -32767 >>> 0) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$1 = $1$hi;
     $53 = !($1 | i64toi32_i32$1 | 0);
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $13 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $13$hi = i64toi32_i32$2;
     i64toi32_i32$1 = $13;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$3 = 0;
     $57 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$3 = $13;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) | 0 ? $53 : $57) {
      break label$4
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $2;
     i64toi32_i32$1 = 32768;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $7 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $7$hi = i64toi32_i32$1;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$1 = $3$hi;
     $64 = !($3 | i64toi32_i32$1 | 0);
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$3 = $4;
     i64toi32_i32$0 = 2147483647;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
     $2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $2;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     $68 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$2 = $2;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0 ? $64 : $68) {
      break label$5
     }
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4;
     i64toi32_i32$1 = 32768;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $7 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $7$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $1 = $3;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$2 = $13;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     $77 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $77$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$1 = $1;
     i64toi32_i32$2 = $77$hi;
     i64toi32_i32$0 = $77;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$6
     }
     label$7 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$0 = $3;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$1 = $2;
      i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      if (!!(i64toi32_i32$0 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
       break label$7
      }
      i64toi32_i32$2 = 2147450880;
      $7 = 0;
      $7$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      $1 = 0;
      $1$hi = i64toi32_i32$2;
      break label$1;
     }
     i64toi32_i32$2 = $7$hi;
     i64toi32_i32$3 = $7;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     $7 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $7$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$0;
     break label$1;
    }
    label$8 : {
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
     $89 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
     $89$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$0 = $3;
     i64toi32_i32$2 = $89$hi;
     i64toi32_i32$1 = $89;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$8
     }
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$1 = $1;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$0 = $13;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $2 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $2$hi = i64toi32_i32$2;
     i64toi32_i32$2 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$2;
     label$9 : {
      i64toi32_i32$2 = $2$hi;
      if (!!($2 | i64toi32_i32$2 | 0)) {
       break label$9
      }
      i64toi32_i32$2 = 2147450880;
      $7 = 0;
      $7$hi = i64toi32_i32$2;
      break label$1;
     }
     i64toi32_i32$2 = $7$hi;
     i64toi32_i32$3 = $7;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $7 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $7$hi = i64toi32_i32$1;
     break label$1;
    }
    label$10 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$2 = $1;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$0 = $13;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | 0) {
      break label$10
     }
     i64toi32_i32$1 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$11 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$0 = $3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $2;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$11
     }
     i64toi32_i32$1 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    $12 = 0;
    label$12 : {
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$2 = $13;
     i64toi32_i32$3 = 65535;
     i64toi32_i32$0 = -1;
     if (i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
      break label$12
     }
     $111 = $5 + 80 | 0;
     i64toi32_i32$2 = $1$hi;
     $112 = $1;
     $112$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $8$hi;
     $113 = $8;
     $113$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $8$hi;
     $12 = !($8 | i64toi32_i32$2 | 0);
     i64toi32_i32$4 = $12;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$3 = i64toi32_i32$4 ? $1 : $8;
     i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$1;
     i64toi32_i32$1 = Math_clz32(i64toi32_i32$0);
     i64toi32_i32$4 = 0;
     if ((i64toi32_i32$1 | 0) == (32 | 0)) {
      $224 = Math_clz32(i64toi32_i32$3) + 32 | 0
     } else {
      $224 = i64toi32_i32$1
     }
     $120$hi = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     $123$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $120$hi;
     i64toi32_i32$3 = $224;
     i64toi32_i32$0 = $123$hi;
     i64toi32_i32$1 = $12 << 6 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $12 = i64toi32_i32$2;
     i64toi32_i32$5 = $112$hi;
     i64toi32_i32$3 = $113$hi;
     __ashlti3($111 | 0, $112 | 0, i64toi32_i32$5 | 0, $113 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 + -15 | 0 | 0);
     $12 = 16 - i64toi32_i32$2 | 0;
     i64toi32_i32$4 = $5 + 88 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $8 = i64toi32_i32$3;
     $8$hi = i64toi32_i32$5;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $226 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
      $226 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
     }
     $9 = $226;
     $9$hi = i64toi32_i32$3;
     i64toi32_i32$5 = $5;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 80 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 84 | 0) >> 2] | 0;
     $1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$4;
    }
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$5 = $2;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$1 = -1;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
     break label$2
    }
    $140 = $5 + 64 | 0;
    i64toi32_i32$5 = $3$hi;
    $141 = $3;
    $141$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $6$hi;
    $142 = $6;
    $142$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $6$hi;
    $14 = !($6 | i64toi32_i32$5 | 0);
    i64toi32_i32$0 = $14;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$3 = i64toi32_i32$0 ? $3 : $6;
    i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$4 = Math_clz32(i64toi32_i32$1);
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$4 | 0) == (32 | 0)) {
     $228 = Math_clz32(i64toi32_i32$3) + 32 | 0
    } else {
     $228 = i64toi32_i32$4
    }
    $149$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $152$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $149$hi;
    i64toi32_i32$3 = $228;
    i64toi32_i32$1 = $152$hi;
    i64toi32_i32$4 = $14 << 6 | 0;
    i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $14 = i64toi32_i32$5;
    i64toi32_i32$2 = $141$hi;
    i64toi32_i32$3 = $142$hi;
    __ashlti3($140 | 0, $141 | 0, i64toi32_i32$2 | 0, $142 | 0, i64toi32_i32$3 | 0, i64toi32_i32$5 + -15 | 0 | 0);
    $12 = ($12 - i64toi32_i32$5 | 0) + 16 | 0;
    i64toi32_i32$0 = $5 + 72 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $6 = i64toi32_i32$3;
    $6$hi = i64toi32_i32$2;
    i64toi32_i32$0 = $5;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
    $3 = i64toi32_i32$2;
    $3$hi = i64toi32_i32$3;
   }
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = 15;
   i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    $229 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
    $229 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
   }
   $13 = $229;
   $13$hi = i64toi32_i32$2;
   i64toi32_i32$3 = $13;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = -32768;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $2 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
   $2$hi = i64toi32_i32$0;
   $170 = $2;
   $170$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = 32;
   i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $230 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
    $230 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$1 | 0) | 0;
   }
   $4 = $230;
   $4$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $170$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = __wasm_i64_mul($170 | 0, i64toi32_i32$3 | 0, $4 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $15 = i64toi32_i32$2;
   $15$hi = i64toi32_i32$3;
   $175 = i64toi32_i32$2;
   $175$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $13$hi;
   i64toi32_i32$0 = $13;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = 32;
   i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $231 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    $231 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
   }
   $13 = $231;
   $13$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $13$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = __wasm_i64_mul($13 | 0, i64toi32_i32$0 | 0, $1 | 0, i64toi32_i32$3 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $182 = i64toi32_i32$3;
   $182$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $175$hi;
   i64toi32_i32$2 = $175;
   i64toi32_i32$3 = $182$hi;
   i64toi32_i32$4 = $182;
   i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $16 = i64toi32_i32$1;
   $16$hi = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = 32;
   i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $232 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
    $232 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $17 = $232;
   $17$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = __wasm_i64_mul($2 | 0, i64toi32_i32$2 | 0, $1 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $189 = i64toi32_i32$0;
   $189$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $17$hi;
   i64toi32_i32$5 = $17;
   i64toi32_i32$0 = $189$hi;
   i64toi32_i32$4 = $189;
   i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $18 = i64toi32_i32$3;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $17$hi;
   i64toi32_i32$1 = $18$hi;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$5 = $17$hi;
   i64toi32_i32$4 = $17;
   i64toi32_i32$2 = 0;
   $194 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   $194$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $8$hi;
   i64toi32_i32$4 = $8;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   $8 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
   $8$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$4 = $8$hi;
   i64toi32_i32$4 = __wasm_i64_mul($2 | 0, i64toi32_i32$1 | 0, $8 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $19 = i64toi32_i32$4;
   $19$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $13$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $13$hi;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$4 = __wasm_i64_mul($13 | 0, i64toi32_i32$1 | 0, $4 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $203 = i64toi32_i32$4;
   $203$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $19$hi;
   i64toi32_i32$2 = $19;
   i64toi32_i32$4 = $203$hi;
   i64toi32_i32$5 = $203;
   i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $17 = i64toi32_i32$0;
   $17$hi = i64toi32_i32$3;
   $205 = i64toi32_i32$0;
   $205$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$1 = $3;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 49;
   i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $233 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    $233 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   $207 = $233;
   $207$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $6$hi;
   i64toi32_i32$3 = $6;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 15;
   i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    $234 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $234 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
   }
   $20 = $234;
   $20$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $207$hi;
   i64toi32_i32$2 = $207;
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$5 = $20;
   i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $3 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = __wasm_i64_mul($3 | 0, i64toi32_i32$2 | 0, $1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $215 = i64toi32_i32$1;
   $215$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $205$hi;
   i64toi32_i32$3 = $205;
   i64toi32_i32$1 = $215$hi;
   i64toi32_i32$5 = $215;
   i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $6 = i64toi32_i32$4;
   $6$hi = i64toi32_i32$0;
   $217 = i64toi32_i32$4;
   $217$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $16$hi;
   i64toi32_i32$2 = $16;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $235 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
    $235 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$1 | 0) | 0;
   }
   $219 = $235;
   $219$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $16$hi;
   i64toi32_i32$3 = $15$hi;
   i64toi32_i32$3 = $16$hi;
   i64toi32_i32$0 = $16;
   i64toi32_i32$2 = $15$hi;
   i64toi32_i32$5 = $15;
   $222 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = $222;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = 32;
   i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
    $237 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
    $237 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
   }
   $224$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $219$hi;
   i64toi32_i32$0 = $219;
   i64toi32_i32$5 = $224$hi;
   i64toi32_i32$2 = $237;
   i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $225 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $225$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $217$hi;
   i64toi32_i32$3 = $217;
   i64toi32_i32$0 = $225$hi;
   i64toi32_i32$2 = $225;
   i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $15 = i64toi32_i32$1;
   $15$hi = i64toi32_i32$4;
   $227 = i64toi32_i32$1;
   $227$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$4 = $9$hi;
   i64toi32_i32$5 = $9;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = 65536;
   i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $16 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
   $16$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$5 = $16$hi;
   i64toi32_i32$5 = __wasm_i64_mul($2 | 0, i64toi32_i32$3 | 0, $16 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $21 = i64toi32_i32$5;
   $21$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $13$hi;
   i64toi32_i32$3 = $8$hi;
   i64toi32_i32$3 = $13$hi;
   i64toi32_i32$5 = $8$hi;
   i64toi32_i32$5 = __wasm_i64_mul($13 | 0, i64toi32_i32$3 | 0, $8 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $236 = i64toi32_i32$5;
   $236$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $21$hi;
   i64toi32_i32$4 = $21;
   i64toi32_i32$5 = $236$hi;
   i64toi32_i32$2 = $236;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $9 = i64toi32_i32$0;
   $9$hi = i64toi32_i32$1;
   $238 = i64toi32_i32$0;
   $238$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $20$hi;
   i64toi32_i32$3 = $20;
   i64toi32_i32$4 = 0;
   i64toi32_i32$2 = 32;
   i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = 0;
    $239 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
    $239 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$5 | 0) | 0;
   }
   i64toi32_i32$1 = $239;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = -2147483648;
   i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = __wasm_i64_mul($2 | 0, i64toi32_i32$3 | 0, $1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $244 = i64toi32_i32$1;
   $244$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $238$hi;
   i64toi32_i32$4 = $238;
   i64toi32_i32$1 = $244$hi;
   i64toi32_i32$2 = $244;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $20 = i64toi32_i32$5;
   $20$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$4 = __wasm_i64_mul($3 | 0, i64toi32_i32$0 | 0, $4 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $249 = i64toi32_i32$4;
   $249$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $20$hi;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$4 = $249$hi;
   i64toi32_i32$2 = $249;
   i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $22 = i64toi32_i32$1;
   $22$hi = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = 32;
   i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $240 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
    $240 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $252$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $227$hi;
   i64toi32_i32$5 = $227;
   i64toi32_i32$0 = $252$hi;
   i64toi32_i32$2 = $240;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $23 = i64toi32_i32$4;
   $23$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $194$hi;
   i64toi32_i32$3 = $194;
   i64toi32_i32$5 = $23$hi;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $1 = i64toi32_i32$0;
   $1$hi = i64toi32_i32$4;
   $10 = (($11 + $10 | 0) + $12 | 0) + -16383 | 0;
   label$13 : {
    label$14 : {
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = __wasm_i64_mul($2 | 0, i64toi32_i32$4 | 0, $4 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $24 = i64toi32_i32$3;
     $24$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$4 = $16$hi;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$3 = __wasm_i64_mul($13 | 0, i64toi32_i32$4 | 0, $16 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $268 = i64toi32_i32$3;
     $268$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $24$hi;
     i64toi32_i32$1 = $24;
     i64toi32_i32$3 = $268$hi;
     i64toi32_i32$2 = $268;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $4 = i64toi32_i32$5;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $24$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$1 = $24$hi;
     i64toi32_i32$2 = $24;
     $272 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $273 = $272;
     $273$hi = i64toi32_i32$4;
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $8$hi;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$0 = $8$hi;
     i64toi32_i32$0 = __wasm_i64_mul($3 | 0, i64toi32_i32$4 | 0, $8 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $277 = i64toi32_i32$0;
     $277$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$0 = $277$hi;
     i64toi32_i32$1 = $277;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $13 = i64toi32_i32$3;
     $13$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$1 = $4;
     $281 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $282$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $273$hi;
     i64toi32_i32$1 = $273;
     i64toi32_i32$5 = $282$hi;
     i64toi32_i32$2 = $281;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $283$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$1 = __wasm_i64_mul($2 | 0, i64toi32_i32$3 | 0, $16 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $286 = i64toi32_i32$1;
     $286$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $283$hi;
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$1 = $286$hi;
     i64toi32_i32$2 = $286;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $287 = i64toi32_i32$5;
     $287$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $13$hi;
     $288 = $13;
     $288$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$0 = $19$hi;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$3 = $17;
     i64toi32_i32$4 = $19$hi;
     i64toi32_i32$2 = $19;
     $291 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $292$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $6$hi;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$3 = $6$hi;
     i64toi32_i32$2 = $6;
     i64toi32_i32$4 = $17;
     $295 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $296$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $292$hi;
     i64toi32_i32$4 = $291;
     i64toi32_i32$3 = $296$hi;
     i64toi32_i32$0 = $295;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $297$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $288$hi;
     i64toi32_i32$2 = $288;
     i64toi32_i32$4 = $297$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $4 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$0 = $13;
     $301 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $302$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $287$hi;
     i64toi32_i32$0 = $287;
     i64toi32_i32$1 = $302$hi;
     i64toi32_i32$2 = $301;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $303 = i64toi32_i32$4;
     $303$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$0 = __wasm_i64_mul($3 | 0, i64toi32_i32$3 | 0, $16 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $3 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $8$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $8$hi;
     i64toi32_i32$0 = __wasm_i64_mul($2 | 0, i64toi32_i32$3 | 0, $8 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $310 = i64toi32_i32$0;
     $310$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$5 = $3;
     i64toi32_i32$0 = $310$hi;
     i64toi32_i32$2 = $310;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $2 = i64toi32_i32$1;
     $2$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$2 = $3;
     $314 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = $314;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
      $241 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
      $241 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     }
     $316 = $241;
     $316$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$3 = $2;
     i64toi32_i32$2 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $242 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
      $242 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
     }
     $318$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $316$hi;
     i64toi32_i32$4 = $316;
     i64toi32_i32$3 = $318$hi;
     i64toi32_i32$5 = $242;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     $319 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
     $319$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $303$hi;
     i64toi32_i32$2 = $303;
     i64toi32_i32$4 = $319$hi;
     i64toi32_i32$5 = $319;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $320 = i64toi32_i32$0;
     $320$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     $321 = $4;
     $321$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$3 = $2;
     i64toi32_i32$2 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $243 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $243 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     }
     $323$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $321$hi;
     i64toi32_i32$1 = $321;
     i64toi32_i32$3 = $323$hi;
     i64toi32_i32$5 = $243;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $2 = i64toi32_i32$4;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$5 = $4;
     $327 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $328$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $320$hi;
     i64toi32_i32$5 = $320;
     i64toi32_i32$0 = $328$hi;
     i64toi32_i32$1 = $327;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $329 = i64toi32_i32$3;
     $329$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     $330 = $2;
     $330$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$2 = $22;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $245 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
      $245 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
     }
     $332 = $245;
     $332$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $9$hi;
     i64toi32_i32$5 = $21$hi;
     i64toi32_i32$5 = $9$hi;
     i64toi32_i32$4 = $9;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$1 = $21;
     $335 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $336$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $20$hi;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$4 = $20$hi;
     i64toi32_i32$1 = $20;
     i64toi32_i32$2 = $9;
     $339 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $340$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $336$hi;
     i64toi32_i32$2 = $335;
     i64toi32_i32$4 = $340$hi;
     i64toi32_i32$5 = $339;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $341$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$3 = $20$hi;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$1 = $22;
     i64toi32_i32$2 = $20$hi;
     i64toi32_i32$5 = $20;
     $344 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $345$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $341$hi;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$3 = $345$hi;
     i64toi32_i32$2 = $344;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
      $246 = 0;
     } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
      $246 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
     }
     $347$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $332$hi;
     i64toi32_i32$0 = $332;
     i64toi32_i32$1 = $347$hi;
     i64toi32_i32$2 = $246;
     i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
     $348 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $348$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $330$hi;
     i64toi32_i32$5 = $330;
     i64toi32_i32$0 = $348$hi;
     i64toi32_i32$2 = $348;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $4 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$2 = $2;
     $352 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $353$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $329$hi;
     i64toi32_i32$2 = $329;
     i64toi32_i32$4 = $353$hi;
     i64toi32_i32$5 = $352;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $354 = i64toi32_i32$0;
     $354$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     $355 = $4;
     $355$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$3 = $6$hi;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$1 = $15;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$5 = $6;
     $358 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $359$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$5 = $23;
     i64toi32_i32$2 = $15;
     $362 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $363$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $359$hi;
     i64toi32_i32$2 = $358;
     i64toi32_i32$1 = $363$hi;
     i64toi32_i32$3 = $362;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $364$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $355$hi;
     i64toi32_i32$5 = $355;
     i64toi32_i32$2 = $364$hi;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $2 = i64toi32_i32$1;
     $2$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4;
     $368 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $369$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $354$hi;
     i64toi32_i32$3 = $354;
     i64toi32_i32$4 = $369$hi;
     i64toi32_i32$5 = $368;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $4 = i64toi32_i32$2;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$3 = 65536;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
     if (!(i64toi32_i32$0 & i64toi32_i32$5 | 0 | i64toi32_i32$3 | 0)) {
      break label$14
     }
     $10 = $10 + 1 | 0;
     break label$13;
    }
    i64toi32_i32$3 = $18$hi;
    i64toi32_i32$1 = $18;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 63;
    i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $247 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $247 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3 = $247;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$3 = $4;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $248 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $248 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    $379 = $248;
    $379$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 63;
    i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $250 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $250 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $381$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $379$hi;
    i64toi32_i32$1 = $379;
    i64toi32_i32$0 = $381$hi;
    i64toi32_i32$5 = $250;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $4 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$3 = $2;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $251 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $251 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    $384 = $251;
    $384$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 63;
    i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $252 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $252 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $386$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $384$hi;
    i64toi32_i32$1 = $384;
    i64toi32_i32$0 = $386$hi;
    i64toi32_i32$5 = $252;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $2 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $18$hi;
    i64toi32_i32$3 = $18;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $253 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $253 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    $18 = $253;
    $18$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    $390 = $3;
    $390$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $254 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $254 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $392$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $390$hi;
    i64toi32_i32$1 = $390;
    i64toi32_i32$0 = $392$hi;
    i64toi32_i32$5 = $254;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $1$hi = i64toi32_i32$0;
   }
   label$15 : {
    if (($10 | 0) < (32767 | 0)) {
     break label$15
    }
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$3 = $7;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $7 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $7$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   label$16 : {
    label$17 : {
     if (($10 | 0) > (0 | 0)) {
      break label$17
     }
     label$18 : {
      $11 = 1 - $10 | 0;
      if ($11 >>> 0 > 127 >>> 0) {
       break label$18
      }
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = $1$hi;
      $10 = $10 + 127 | 0;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$3 = $1$hi;
      __ashlti3($5 + 48 | 0 | 0, $18 | 0, i64toi32_i32$1 | 0, $1 | 0, i64toi32_i32$3 | 0, $10 | 0);
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$1 = $4$hi;
      __ashlti3($5 + 32 | 0 | 0, $2 | 0, i64toi32_i32$3 | 0, $4 | 0, i64toi32_i32$1 | 0, $10 | 0);
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$3 = $1$hi;
      __lshrti3($5 + 16 | 0 | 0, $18 | 0, i64toi32_i32$1 | 0, $1 | 0, i64toi32_i32$3 | 0, $11 | 0);
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$1 = $4$hi;
      __lshrti3($5 | 0, $2 | 0, i64toi32_i32$3 | 0, $4 | 0, i64toi32_i32$1 | 0, $11 | 0);
      i64toi32_i32$0 = $5;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
      $426 = i64toi32_i32$1;
      $426$hi = i64toi32_i32$3;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
      $428 = i64toi32_i32$3;
      $428$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $426$hi;
      i64toi32_i32$0 = $426;
      i64toi32_i32$3 = $428$hi;
      i64toi32_i32$5 = $428;
      i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
      $429 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
      $429$hi = i64toi32_i32$3;
      i64toi32_i32$1 = $5;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
      $431 = i64toi32_i32$3;
      $431$hi = i64toi32_i32$0;
      i64toi32_i32$1 = (i64toi32_i32$1 + 48 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $435 = i64toi32_i32$0;
      $435$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $431$hi;
      i64toi32_i32$1 = $431;
      i64toi32_i32$0 = $435$hi;
      i64toi32_i32$5 = $435;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 0;
      $437 = (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$3 = 0;
      $438$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $429$hi;
      i64toi32_i32$5 = $429;
      i64toi32_i32$0 = $438$hi;
      i64toi32_i32$1 = $437;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      $18 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
      $18$hi = i64toi32_i32$0;
      i64toi32_i32$3 = ($5 + 32 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $443 = i64toi32_i32$0;
      $443$hi = i64toi32_i32$5;
      i64toi32_i32$3 = ($5 + 16 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $447 = i64toi32_i32$5;
      $447$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $443$hi;
      i64toi32_i32$3 = $443;
      i64toi32_i32$5 = $447$hi;
      i64toi32_i32$1 = $447;
      i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
      $1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
      $1$hi = i64toi32_i32$5;
      i64toi32_i32$0 = $5 + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $4 = i64toi32_i32$5;
      $4$hi = i64toi32_i32$3;
      i64toi32_i32$0 = $5;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $2 = i64toi32_i32$3;
      $2$hi = i64toi32_i32$5;
      break label$16;
     }
     i64toi32_i32$5 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$5;
     break label$1;
    }
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $10;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $255 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
     $255 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $456$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = $4;
    i64toi32_i32$0 = 65535;
    i64toi32_i32$1 = -1;
    i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    $458 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
    $458$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $456$hi;
    i64toi32_i32$3 = $255;
    i64toi32_i32$5 = $458$hi;
    i64toi32_i32$1 = $458;
    i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
    $4 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $4$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = $7$hi;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$0 = $4;
   i64toi32_i32$3 = $7$hi;
   i64toi32_i32$1 = $7;
   i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $7 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $7$hi = i64toi32_i32$3;
   label$19 : {
    i64toi32_i32$3 = $18$hi;
    $464 = !($18 | i64toi32_i32$3 | 0);
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$5 = $1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$1 = -1;
    if ((i64toi32_i32$3 | 0) > (i64toi32_i32$0 | 0)) {
     $256 = 1
    } else {
     if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$1 >>> 0) {
       $257 = 0
      } else {
       $257 = 1
      }
      $258 = $257;
     } else {
      $258 = 0
     }
     $256 = $258;
    }
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$1 = $1;
    i64toi32_i32$3 = -2147483648;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) | 0 ? $464 : $256) {
     break label$19
    }
    i64toi32_i32$1 = $7$hi;
    $470 = $7;
    $470$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $1 = i64toi32_i32$4;
    $1$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$3 = $2;
    $475 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$1 = 0;
    $476$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $470$hi;
    i64toi32_i32$3 = $470;
    i64toi32_i32$2 = $476$hi;
    i64toi32_i32$0 = $475;
    i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $7 = i64toi32_i32$5;
    $7$hi = i64toi32_i32$4;
    break label$1;
   }
   label$20 : {
    i64toi32_i32$4 = $18$hi;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$1 = $1;
    i64toi32_i32$3 = -2147483648;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
    $480 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
    $480$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $18$hi;
    i64toi32_i32$4 = $18;
    i64toi32_i32$1 = $480$hi;
    i64toi32_i32$0 = $480;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) | 0) {
     break label$20
    }
    i64toi32_i32$3 = $2$hi;
    $1 = $2;
    $1$hi = i64toi32_i32$3;
    break label$1;
   }
   i64toi32_i32$3 = $7$hi;
   $484 = $7;
   $484$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $487 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   $487$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$0 = $487$hi;
   i64toi32_i32$4 = $487;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $1 = i64toi32_i32$2;
   $1$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$4 = $2;
   $491 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $492$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $484$hi;
   i64toi32_i32$4 = $484;
   i64toi32_i32$5 = $492$hi;
   i64toi32_i32$3 = $491;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $7 = i64toi32_i32$0;
   $7$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$4 = $0;
  HEAP32[i64toi32_i32$4 >> 2] = $1;
  HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $7$hi;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $7;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$2;
  __stack_pointer = $5 + 96 | 0;
 }
 
 function __multi3($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $53 = 0, $54 = 0, $6 = 0, $9 = 0, $9$hi = 0, $12 = 0, $12$hi = 0, $13 = 0, $13$hi = 0, $16 = 0, $16$hi = 0, $20 = 0, $20$hi = 0, $21 = 0, $21$hi = 0, $5 = 0, $5$hi = 0, $30$hi = 0, $33 = 0, $33$hi = 0, $36$hi = 0, $37 = 0, $37$hi = 0, $39 = 0, $39$hi = 0, $42 = 0, $42$hi = 0, $45$hi = 0, $47 = 0, $49$hi = 0, $51 = 0, $51$hi = 0, $52 = 0;
  $6 = $0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = __wasm_i64_mul($4 | 0, i64toi32_i32$0 | 0, $1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $9 = i64toi32_i32$1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$1 = __wasm_i64_mul($2 | 0, i64toi32_i32$0 | 0, $3 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $12 = i64toi32_i32$1;
  $12$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$2 = $9;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$3 = $12;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $13 = i64toi32_i32$4;
  $13$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $46 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
   $46 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
  }
  $2 = $46;
  $2$hi = i64toi32_i32$2;
  $16 = $2;
  $16$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$5 = $1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $48 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   $48 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
  }
  $4 = $48;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $16$hi;
  i64toi32_i32$5 = $4$hi;
  i64toi32_i32$5 = __wasm_i64_mul($16 | 0, i64toi32_i32$0 | 0, $4 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $20 = i64toi32_i32$5;
  $20$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $13$hi;
  i64toi32_i32$2 = $13;
  i64toi32_i32$5 = $20$hi;
  i64toi32_i32$3 = $20;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $21 = i64toi32_i32$1;
  $21$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$0 = $3;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
  $3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$4 = $1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $1$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$4 = __wasm_i64_mul($3 | 0, i64toi32_i32$0 | 0, $1 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5 = i64toi32_i32$4;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $49 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
   $49 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
  }
  $30$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = __wasm_i64_mul($3 | 0, i64toi32_i32$4 | 0, $4 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $33 = i64toi32_i32$2;
  $33$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $30$hi;
  i64toi32_i32$0 = $49;
  i64toi32_i32$2 = $33$hi;
  i64toi32_i32$3 = $33;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $3 = i64toi32_i32$5;
  $3$hi = i64toi32_i32$1;
  i64toi32_i32$4 = i64toi32_i32$5;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $50 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
   $50 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
  }
  $36$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$1 = $21;
  i64toi32_i32$4 = $36$hi;
  i64toi32_i32$3 = $50;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $37 = i64toi32_i32$2;
  $37$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
  $39 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $39$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = __wasm_i64_mul($2 | 0, i64toi32_i32$1 | 0, $1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $42 = i64toi32_i32$0;
  $42$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $39$hi;
  i64toi32_i32$5 = $39;
  i64toi32_i32$0 = $42$hi;
  i64toi32_i32$3 = $42;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $1 = i64toi32_i32$4;
  $1$hi = i64toi32_i32$2;
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$5 = 0;
   $53 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   $53 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
  }
  $45$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $37$hi;
  i64toi32_i32$2 = $37;
  i64toi32_i32$1 = $45$hi;
  i64toi32_i32$3 = $53;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  i64toi32_i32$2 = $6;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$4;
  $47 = $0;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$5 = $1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
   $54 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
   $54 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
  }
  $49$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$4 = $5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
  $51 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $51$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $49$hi;
  i64toi32_i32$2 = $54;
  i64toi32_i32$4 = $51$hi;
  i64toi32_i32$3 = $51;
  i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
  $52 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $47;
  HEAP32[i64toi32_i32$2 >> 2] = $52;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$4;
 }
 
 function __subtf3($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5 = 0, $14 = 0, $14$hi = 0, $20 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $14 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $14$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$3 = $14$hi;
  __addtf3($5 | 0, $1 | 0, i64toi32_i32$1 | 0, $2 | 0, i64toi32_i32$2 | 0, $3 | 0, i64toi32_i32$0 | 0, $14 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $5;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $4 = i64toi32_i32$3;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $20 = i64toi32_i32$0;
  i64toi32_i32$0 = $0;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $20;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $4$hi;
  HEAP32[i64toi32_i32$0 >> 2] = $4;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  __stack_pointer = $5 + 16 | 0;
 }
 
 function __trunctfdf2($0, $0$hi, $1, $1$hi) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $3 = 0, $3$hi = 0, $4$hi = 0, $4 = 0, $2 = 0, $5 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $12 = 0, $12$hi = 0, $14$hi = 0, $17 = 0, $17$hi = 0, $19$hi = 0, $33 = 0, $33$hi = 0, $36 = 0, $38 = 0, $43 = 0, $43$hi = 0, $45$hi = 0, $73 = 0, $73$hi = 0, $77$hi = 0, $80 = 0, $80$hi = 0, $82 = 0, $82$hi = 0, $86 = 0, $86$hi = 0, $88 = 0, $89$hi = 0, $98$hi = 0, $105 = 0, $105$hi = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $3$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $3;
    i64toi32_i32$2 = -1006698496;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $12 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $3;
    i64toi32_i32$0 = -1140785152;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$3 = $0;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 60;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $44 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $44 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $17 = $44;
    $17$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$5 = $1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     $45 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
     $45 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    }
    $19$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $17$hi;
    i64toi32_i32$4 = $17;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$1 = $45;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $3 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $3$hi = i64toi32_i32$5;
    label$3 : {
     i64toi32_i32$5 = $0$hi;
     i64toi32_i32$3 = $0;
     i64toi32_i32$4 = 268435455;
     i64toi32_i32$1 = -1;
     i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
     $0 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $0$hi = i64toi32_i32$4;
     i64toi32_i32$5 = $0;
     i64toi32_i32$3 = 134217728;
     i64toi32_i32$1 = 1;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$3
     }
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $3;
     i64toi32_i32$4 = 1073741824;
     i64toi32_i32$3 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $4 = i64toi32_i32$0;
     $4$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$5 = $3;
    i64toi32_i32$1 = 1073741824;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $4 = i64toi32_i32$4;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0;
    i64toi32_i32$5 = 134217728;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$5 | 0) | 0) {
     break label$1
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $33 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
    $33$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $4;
    i64toi32_i32$3 = $33$hi;
    i64toi32_i32$5 = $33;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $4 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$4;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$4 = $0$hi;
    $36 = !($0 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$0 = $3;
    i64toi32_i32$2 = 2147418112;
    i64toi32_i32$5 = 0;
    $38 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$4;
    i64toi32_i32$5 = $3;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) | 0 ? $36 : $38) {
     break label$4
    }
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$2 = $0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 60;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $46 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
     $46 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
    }
    $43 = $46;
    $43$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$5 = $1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 4;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
     $47 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
     $47 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
    }
    $45$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $43$hi;
    i64toi32_i32$0 = $43;
    i64toi32_i32$5 = $45$hi;
    i64toi32_i32$4 = $47;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
    i64toi32_i32$0 = 524287;
    i64toi32_i32$4 = -1;
    i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
    i64toi32_i32$2 = 2146959360;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $4$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = 2146435072;
   $4 = 0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$0 = $3;
   i64toi32_i32$5 = 1140785151;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   $4 = 0;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$4 = $3;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 48;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $48 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $48 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $5 = $48;
   if ($5 >>> 0 < 15249 >>> 0) {
    break label$1
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$5 = -1;
   i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
   i64toi32_i32$0 = 65536;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
   $3 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $3$hi;
   __ashlti3($2 + 16 | 0 | 0, $0 | 0, i64toi32_i32$0 | 0, $3 | 0, i64toi32_i32$2 | 0, $5 + -15233 | 0 | 0);
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = $3$hi;
   __lshrti3($2 | 0, $0 | 0, i64toi32_i32$2 | 0, $3 | 0, i64toi32_i32$0 | 0, 15361 - $5 | 0 | 0);
   i64toi32_i32$4 = $2;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $3 = i64toi32_i32$0;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 60;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $49 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    $49 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $73 = $49;
   $73$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $2 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 4;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $50 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $50 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
   }
   $77$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $73$hi;
   i64toi32_i32$4 = $73;
   i64toi32_i32$2 = $77$hi;
   i64toi32_i32$5 = $50;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $4 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$2;
   label$5 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3;
    i64toi32_i32$4 = 268435455;
    i64toi32_i32$5 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
    $80 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
    $80$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $2;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $82 = i64toi32_i32$4;
    $82$hi = i64toi32_i32$0;
    i64toi32_i32$2 = (i64toi32_i32$2 + 16 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $86 = i64toi32_i32$0;
    $86$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $82$hi;
    i64toi32_i32$2 = $82;
    i64toi32_i32$0 = $86$hi;
    i64toi32_i32$5 = $86;
    i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    $88 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$4 = 0;
    $89$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $80$hi;
    i64toi32_i32$5 = $80;
    i64toi32_i32$0 = $89$hi;
    i64toi32_i32$2 = $88;
    i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    $3 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$4 = $3;
    i64toi32_i32$5 = 134217728;
    i64toi32_i32$2 = 1;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$5
    }
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$2 = $4;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $4 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$4 = $3;
   i64toi32_i32$2 = 134217728;
   i64toi32_i32$5 = 0;
   if ((i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$5 = $4;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 1;
   i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
   $98$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$1 = $98$hi;
   i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$2 = $4;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $4 = i64toi32_i32$0;
   $4$hi = i64toi32_i32$3;
  }
  __stack_pointer = $2 + 32 | 0;
  i64toi32_i32$3 = $4$hi;
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$1 = $1;
  i64toi32_i32$4 = -2147483648;
  i64toi32_i32$2 = 0;
  i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
  $105 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $105$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$3 = $4;
  i64toi32_i32$1 = $105$hi;
  i64toi32_i32$2 = $105;
  i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$2 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
  return +(+wasm2js_scratch_load_f64());
 }
 
 function __trunctfsf2($0, $0$hi, $1, $1$hi) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, $3 = 0, $3$hi = 0, $5 = 0, $4 = 0, $2 = 0, i64toi32_i32$2 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $12 = 0, $12$hi = 0, $14$hi = 0, $20 = 0, $24 = 0, $34 = 0, $34$hi = 0, $42 = 0, $44 = 0, $81 = 0, $81$hi = 0, $83 = 0, $83$hi = 0, $87 = 0, $87$hi = 0, $89 = 0, $90$hi = 0, $93 = 0, $97 = 0, $105 = 0, $105$hi = 0, $114 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $3 = $1 & i64toi32_i32$3 | 0;
    $3$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $3;
    i64toi32_i32$2 = -1065418752;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $12 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $3;
    i64toi32_i32$0 = -1082064896;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 25;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $37 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $37 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $4 = $37;
    label$3 : {
     i64toi32_i32$4 = $0$hi;
     $20 = !($0 | i64toi32_i32$4 | 0);
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 33554431;
     i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
     $3 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
     $3$hi = i64toi32_i32$3;
     i64toi32_i32$4 = $3;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = 16777216;
     $24 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$1 = $3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 16777216;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) | 0 ? $20 : $24) {
      break label$3
     }
     $5 = $4 + 1073741825 | 0;
     break label$1;
    }
    $5 = $4 + 1073741824 | 0;
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$5 = $3;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 16777216;
    i64toi32_i32$4 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
    $34 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
    $34$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $0$hi;
    i64toi32_i32$1 = $0;
    i64toi32_i32$5 = $34$hi;
    i64toi32_i32$3 = $34;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | 0) {
     break label$1
    }
    $5 = $5 + ($4 & 1 | 0) | 0;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$4 = $0$hi;
    $42 = !($0 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$3 = $3;
    i64toi32_i32$5 = 2147418112;
    i64toi32_i32$1 = 0;
    $44 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$4;
    i64toi32_i32$1 = $3;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$5 = 0;
    if ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) | 0 ? $42 : $44) {
     break label$4
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$5 = $1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 25;
    i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $38 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
     $38 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
    }
    $5 = $38 & 4194303 | 0 | 2143289344 | 0;
    break label$1;
   }
   $5 = 2139095040;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$1 = $3;
   i64toi32_i32$5 = 1082064895;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$1
   }
   $5 = 0;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$4 = $3;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 48;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $39 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    $39 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $4 = $39;
   if ($4 >>> 0 < 16145 >>> 0) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$1 = $1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$5 = -1;
   i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
   $3 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $3$hi;
   __ashlti3($2 + 16 | 0 | 0, $0 | 0, i64toi32_i32$1 | 0, $3 | 0, i64toi32_i32$3 | 0, $4 + -16129 | 0 | 0);
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   __lshrti3($2 | 0, $0 | 0, i64toi32_i32$3 | 0, $3 | 0, i64toi32_i32$1 | 0, 16257 - $4 | 0 | 0);
   i64toi32_i32$4 = $2 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $3 = i64toi32_i32$1;
   $3$hi = i64toi32_i32$3;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 25;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $40 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
    $40 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $5 = $40;
   label$5 : {
    i64toi32_i32$3 = $2;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $81 = i64toi32_i32$1;
    $81$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] | 0;
    $83 = i64toi32_i32$4;
    $83$hi = i64toi32_i32$1;
    i64toi32_i32$3 = (i64toi32_i32$3 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $87 = i64toi32_i32$1;
    $87$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $83$hi;
    i64toi32_i32$3 = $83;
    i64toi32_i32$1 = $87$hi;
    i64toi32_i32$5 = $87;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 0;
    $89 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$4 = 0;
    $90$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $81$hi;
    i64toi32_i32$5 = $81;
    i64toi32_i32$1 = $90$hi;
    i64toi32_i32$3 = $89;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $0 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $0$hi = i64toi32_i32$1;
    $93 = !($0 | i64toi32_i32$1 | 0);
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$4 = $3;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 33554431;
    i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
    $3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
    $3$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $3;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 16777216;
    $97 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$5;
    i64toi32_i32$3 = $3;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 16777216;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) | 0 ? $93 : $97) {
     break label$5
    }
    $5 = $5 + 1 | 0;
    break label$1;
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$4 = $3;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 16777216;
   i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $105 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
   $105$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0;
   i64toi32_i32$4 = $105$hi;
   i64toi32_i32$5 = $105;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 0;
   if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | 0) {
    break label$1
   }
   $5 = ($5 & 1 | 0) + $5 | 0;
  }
  __stack_pointer = $2 + 32 | 0;
  $114 = $5;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$5 = $1;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $41 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
   $41 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
  }
  return Math_fround((wasm2js_scratch_store_i32(2, $114 | ($41 & -2147483648 | 0) | 0), wasm2js_scratch_load_f32()));
 }
 
 function operator_20new_28unsigned_20long_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = $0 ? $0 : 1;
  label$1 : {
   label$2 : while (1) {
    $0 = malloc($1 | 0) | 0;
    if ($0) {
     break label$1
    }
    label$3 : {
     $0 = std__get_new_handler_28_29() | 0;
     if (!$0) {
      break label$3
     }
     FUNCTION_TABLE[$0 | 0]();
     continue label$2;
    }
    break label$2;
   };
   abort();
   wasm2js_trap();
  }
  return $0 | 0;
 }
 
 function operator_20new_5b_5d_28unsigned_20long_29($0) {
  $0 = $0 | 0;
  return operator_20new_28unsigned_20long_29($0 | 0) | 0 | 0;
 }
 
 function operator_20delete_28void__29($0) {
  $0 = $0 | 0;
  free($0 | 0);
 }
 
 function void_20_28_std____2___28anonymous_20namespace_29____libcpp_atomic_load_5babi_v15006_5d_void_20_28__29_28_29__28void_20_28__20const__29_28_29_2c_20int_29_29_28_29($0) {
  $0 = $0 | 0;
  return HEAP32[$0 >> 2] | 0 | 0;
 }
 
 function std__get_new_handler_28_29() {
  return void_20_28_std____2___28anonymous_20namespace_29____libcpp_atomic_load_5babi_v15006_5d_void_20_28__29_28_29__28void_20_28__20const__29_28_29_2c_20int_29_29_28_29(95048 | 0) | 0 | 0;
 }
 
 function setTempRet0($0) {
  $0 = $0 | 0;
  tempRet0 = $0;
 }
 
 function getTempRet0() {
  return tempRet0 | 0;
 }
 
 function stackSave() {
  return __stack_pointer | 0;
 }
 
 function stackRestore($0) {
  $0 = $0 | 0;
  __stack_pointer = $0;
 }
 
 function stackAlloc($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = (__stack_pointer - $0 | 0) & -16 | 0;
  __stack_pointer = $1;
  return $1 | 0;
 }
 
 function emscripten_stack_get_current() {
  return __stack_pointer | 0;
 }
 
 function emscripten_stack_init() {
  __stack_base = 65536;
  __stack_end = (0 + 15 | 0) & -16 | 0;
 }
 
 function emscripten_stack_get_free() {
  return __stack_pointer - __stack_end | 0 | 0;
 }
 
 function emscripten_stack_get_base() {
  return __stack_base | 0;
 }
 
 function emscripten_stack_get_end() {
  return __stack_end | 0;
 }
 
 function dynCall_jiji(fptr, $0, $1, $1$hi, $2) {
  fptr = fptr | 0;
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = FUNCTION_TABLE[fptr | 0]($0, $1, i64toi32_i32$0, $2) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function legalstub$dynCall_jiji($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $17 = 0, $18 = 0, $6 = 0, $7 = 0, $9 = 0, $9$hi = 0, $12$hi = 0, $5 = 0, $5$hi = 0;
  $6 = $0;
  $7 = $1;
  i64toi32_i32$0 = 0;
  $9 = $2;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $17 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $17 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$0 = $9;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$3 = $17;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$2 = dynCall_jiji($6 | 0, $7 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5 = i64toi32_i32$2;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $18 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  setTempRet0($18 | 0);
  i64toi32_i32$2 = $5$hi;
  return $5 | 0;
 }
 
 function legalfunc$__wasi_fd_seek($0, $1, $1$hi, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $12 = 0, $4 = 0, $6 = 0, i64toi32_i32$2 = 0;
  $4 = $0;
  i64toi32_i32$0 = $1$hi;
  $6 = $1;
  i64toi32_i32$2 = $1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $12 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $12 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  return legalimport$__wasi_fd_seek($4 | 0, $6 | 0, $12 | 0, $2 | 0, $3 | 0) | 0 | 0;
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, var$2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, var$3 = 0, var$4 = 0, var$5 = 0, $21 = 0, $22 = 0, var$6 = 0, $24 = 0, $17 = 0, $18 = 0, $23 = 0, $29 = 0, $45 = 0, $56$hi = 0, $62$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  var$2 = var$1;
  var$4 = var$2 >>> 16 | 0;
  i64toi32_i32$0 = var$0$hi;
  var$3 = var$0;
  var$5 = var$3 >>> 16 | 0;
  $17 = Math_imul(var$4, var$5);
  $18 = var$2;
  i64toi32_i32$2 = var$3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $21 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $21 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $23 = $17 + Math_imul($18, $21) | 0;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$0 = var$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $22 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $22 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29 = $23 + Math_imul($22, var$3) | 0;
  var$2 = var$2 & 65535 | 0;
  var$3 = var$3 & 65535 | 0;
  var$6 = Math_imul(var$2, var$3);
  var$2 = (var$6 >>> 16 | 0) + Math_imul(var$2, var$5) | 0;
  $45 = $29 + (var$2 >>> 16 | 0) | 0;
  var$2 = (var$2 & 65535 | 0) + Math_imul(var$4, var$3) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $45 + (var$2 >>> 16 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $56$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $62$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $56$hi;
  i64toi32_i32$2 = $24;
  i64toi32_i32$1 = $62$hi;
  i64toi32_i32$3 = var$2 << 16 | 0 | (var$6 & 65535 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$3 = 0, var$4 = 0, var$5 = 0, var$5$hi = 0, var$6 = 0, var$6$hi = 0, i64toi32_i32$6 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, var$8$hi = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, var$7$hi = 0, $49 = 0, $63$hi = 0, $65 = 0, $65$hi = 0, $120$hi = 0, $129$hi = 0, $134$hi = 0, var$8 = 0, $140 = 0, $140$hi = 0, $142$hi = 0, $144 = 0, $144$hi = 0, $151 = 0, $151$hi = 0, $154$hi = 0, var$7 = 0, $165$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             i64toi32_i32$0 = var$0$hi;
             i64toi32_i32$2 = var$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$3 = 32;
             i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $37 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
             } else {
              i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              $37 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
             }
             var$2 = $37;
             if (var$2) {
              i64toi32_i32$1 = var$1$hi;
              var$3 = var$1;
              if (!var$3) {
               break label$11
              }
              i64toi32_i32$1 = var$1$hi;
              i64toi32_i32$0 = var$1;
              i64toi32_i32$2 = 0;
              i64toi32_i32$3 = 32;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
               i64toi32_i32$2 = 0;
               $38 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
              } else {
               i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
               $38 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
              }
              var$4 = $38;
              if (!var$4) {
               break label$9
              }
              var$2 = Math_clz32(var$4) - Math_clz32(var$2) | 0;
              if (var$2 >>> 0 <= 31 >>> 0) {
               break label$8
              }
              break label$2;
             }
             i64toi32_i32$2 = var$1$hi;
             i64toi32_i32$1 = var$1;
             i64toi32_i32$0 = 1;
             i64toi32_i32$3 = 0;
             if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
              break label$2
             }
             i64toi32_i32$1 = var$0$hi;
             var$2 = var$0;
             i64toi32_i32$1 = var$1$hi;
             var$3 = var$1;
             var$2 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
             i64toi32_i32$1 = 0;
             __wasm_intrinsics_temp_i64 = var$0 - Math_imul(var$2, var$3) | 0;
             __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
             i64toi32_i32$1 = 0;
             i64toi32_i32$2 = var$2;
             i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
             return i64toi32_i32$2 | 0;
            }
            i64toi32_i32$2 = var$1$hi;
            i64toi32_i32$3 = var$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$1 = 0;
             $39 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
             i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
             $39 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
            }
            var$3 = $39;
            i64toi32_i32$1 = var$0$hi;
            if (!var$0) {
             break label$7
            }
            if (!var$3) {
             break label$6
            }
            var$4 = var$3 + -1 | 0;
            if (var$4 & var$3 | 0) {
             break label$6
            }
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = var$4 & var$2 | 0;
            i64toi32_i32$3 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
             $40 = 0;
            } else {
             i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
             $40 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            }
            $63$hi = i64toi32_i32$3;
            i64toi32_i32$3 = var$0$hi;
            i64toi32_i32$1 = var$0;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = -1;
            i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
            $65 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
            $65$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $63$hi;
            i64toi32_i32$3 = $40;
            i64toi32_i32$1 = $65$hi;
            i64toi32_i32$0 = $65;
            i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
            __wasm_intrinsics_temp_i64 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
            __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = var$2 >>> ((__wasm_ctz_i32(var$3 | 0) | 0) & 31 | 0) | 0;
            i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
            return i64toi32_i32$3 | 0;
           }
          }
          var$4 = var$3 + -1 | 0;
          if (!(var$4 & var$3 | 0)) {
           break label$5
          }
          var$2 = (Math_clz32(var$3) + 33 | 0) - Math_clz32(var$2) | 0;
          var$3 = 0 - var$2 | 0;
          break label$3;
         }
         var$3 = 63 - var$2 | 0;
         var$2 = var$2 + 1 | 0;
         break label$3;
        }
        var$4 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = var$2 - Math_imul(var$4, var$3) | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 32;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $41 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $41 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        __wasm_intrinsics_temp_i64 = $41;
        __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = var$4;
        i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
        return i64toi32_i32$2 | 0;
       }
       var$2 = Math_clz32(var$3) - Math_clz32(var$2) | 0;
       if (var$2 >>> 0 < 31 >>> 0) {
        break label$4
       }
       break label$2;
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      __wasm_intrinsics_temp_i64 = var$4 & var$0 | 0;
      __wasm_intrinsics_temp_i64$hi = i64toi32_i32$2;
      if ((var$3 | 0) == (1 | 0)) {
       break label$1
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      $120$hi = i64toi32_i32$2;
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$3 = var$0;
      i64toi32_i32$1 = $120$hi;
      i64toi32_i32$0 = __wasm_ctz_i32(var$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $42 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $42 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$3 = $42;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
      return i64toi32_i32$3 | 0;
     }
     var$3 = 63 - var$2 | 0;
     var$2 = var$2 + 1 | 0;
    }
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$3 = 0;
    $129$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$2 = var$0;
    i64toi32_i32$1 = $129$hi;
    i64toi32_i32$0 = var$2 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $43 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $43 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    var$5 = $43;
    var$5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$1 = 0;
    $134$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$2 = $134$hi;
    i64toi32_i32$0 = var$3 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $44 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $44 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    var$0 = $44;
    var$0$hi = i64toi32_i32$2;
    label$13 : {
     if (var$2) {
      i64toi32_i32$2 = var$1$hi;
      i64toi32_i32$1 = var$1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -1;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      var$8 = i64toi32_i32$4;
      var$8$hi = i64toi32_i32$5;
      label$15 : while (1) {
       i64toi32_i32$5 = var$5$hi;
       i64toi32_i32$2 = var$5;
       i64toi32_i32$1 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        $45 = 0;
       } else {
        i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
        $45 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
       }
       $140 = $45;
       $140$hi = i64toi32_i32$1;
       i64toi32_i32$1 = var$0$hi;
       i64toi32_i32$5 = var$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 63;
       i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $46 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        $46 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
       }
       $142$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $140$hi;
       i64toi32_i32$1 = $140;
       i64toi32_i32$5 = $142$hi;
       i64toi32_i32$0 = $46;
       i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
       var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
       var$5$hi = i64toi32_i32$5;
       $144 = var$5;
       $144$hi = i64toi32_i32$5;
       i64toi32_i32$5 = var$8$hi;
       i64toi32_i32$5 = var$5$hi;
       i64toi32_i32$5 = var$8$hi;
       i64toi32_i32$2 = var$8;
       i64toi32_i32$1 = var$5$hi;
       i64toi32_i32$0 = var$5;
       i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
       i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
       i64toi32_i32$5 = i64toi32_i32$3;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 63;
       i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
        $47 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
        $47 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
       }
       var$6 = $47;
       var$6$hi = i64toi32_i32$2;
       i64toi32_i32$2 = var$1$hi;
       i64toi32_i32$2 = var$6$hi;
       i64toi32_i32$4 = var$6;
       i64toi32_i32$5 = var$1$hi;
       i64toi32_i32$0 = var$1;
       i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
       $151 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
       $151$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $144$hi;
       i64toi32_i32$2 = $144;
       i64toi32_i32$4 = $151$hi;
       i64toi32_i32$0 = $151;
       i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
       i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
       i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
       i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
       var$5 = i64toi32_i32$1;
       var$5$hi = i64toi32_i32$3;
       i64toi32_i32$3 = var$0$hi;
       i64toi32_i32$5 = var$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        $48 = 0;
       } else {
        i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
        $48 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
       }
       $154$hi = i64toi32_i32$2;
       i64toi32_i32$2 = var$7$hi;
       i64toi32_i32$2 = $154$hi;
       i64toi32_i32$3 = $48;
       i64toi32_i32$5 = var$7$hi;
       i64toi32_i32$0 = var$7;
       i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
       var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
       var$0$hi = i64toi32_i32$5;
       i64toi32_i32$5 = var$6$hi;
       i64toi32_i32$2 = var$6;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
       var$6 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
       var$6$hi = i64toi32_i32$3;
       var$7 = var$6;
       var$7$hi = i64toi32_i32$3;
       var$2 = var$2 + -1 | 0;
       if (var$2) {
        continue label$15
       }
       break label$15;
      };
      break label$13;
     }
    }
    i64toi32_i32$3 = var$5$hi;
    __wasm_intrinsics_temp_i64 = var$5;
    __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$5 = var$0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $49 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $49 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $165$hi = i64toi32_i32$2;
    i64toi32_i32$2 = var$6$hi;
    i64toi32_i32$2 = $165$hi;
    i64toi32_i32$3 = $49;
    i64toi32_i32$5 = var$6$hi;
    i64toi32_i32$0 = var$6;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$3 | 0;
   }
   i64toi32_i32$3 = var$0$hi;
   __wasm_intrinsics_temp_i64 = var$0;
   __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   var$0 = 0;
   var$0$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
  return i64toi32_i32$5 | 0;
 }
 
 function __wasm_ctz_i64(var$0, var$0$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $10 = 0, $5$hi = 0, $8$hi = 0;
  i64toi32_i32$0 = var$0$hi;
  if (!!(var$0 | i64toi32_i32$0 | 0)) {
   i64toi32_i32$0 = var$0$hi;
   i64toi32_i32$2 = var$0;
   i64toi32_i32$1 = -1;
   i64toi32_i32$3 = -1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $5$hi = i64toi32_i32$5;
   i64toi32_i32$5 = var$0$hi;
   i64toi32_i32$5 = $5$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$2 = var$0$hi;
   i64toi32_i32$3 = var$0;
   i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
   i64toi32_i32$3 = Math_clz32(i64toi32_i32$2);
   i64toi32_i32$5 = 0;
   if ((i64toi32_i32$3 | 0) == (32 | 0)) {
    $10 = Math_clz32(i64toi32_i32$0) + 32 | 0
   } else {
    $10 = i64toi32_i32$3
   }
   $8$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = 63;
   i64toi32_i32$2 = $8$hi;
   i64toi32_i32$3 = $10;
   i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
   i64toi32_i32$4 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$4;
   return i64toi32_i32$0 | 0;
  }
  i64toi32_i32$0 = 0;
  i64toi32_i32$4 = 64;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$4 | 0;
 }
 
 function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_rotl_i64(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, var$2$hi = 0, var$2 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $6$hi = 0, $8$hi = 0, $10 = 0, $10$hi = 0, $15$hi = 0, $17$hi = 0, $19$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$2 = var$1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  var$2 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  var$2$hi = i64toi32_i32$1;
  i64toi32_i32$1 = -1;
  i64toi32_i32$0 = -1;
  i64toi32_i32$2 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $19 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $19 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6$hi = i64toi32_i32$2;
  i64toi32_i32$2 = var$0$hi;
  i64toi32_i32$2 = $6$hi;
  i64toi32_i32$1 = $19;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $8$hi = i64toi32_i32$0;
  i64toi32_i32$0 = var$2$hi;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $20 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $20 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $10 = $20;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = var$1$hi;
  i64toi32_i32$3 = var$1;
  i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
  i64toi32_i32$5 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
  var$1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  var$1$hi = i64toi32_i32$0;
  i64toi32_i32$0 = -1;
  i64toi32_i32$5 = -1;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$3 = var$1;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
   $21 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
   $21 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
  }
  $15$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$1 = $15$hi;
  i64toi32_i32$0 = $21;
  i64toi32_i32$5 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
  $17$hi = i64toi32_i32$5;
  i64toi32_i32$5 = var$1$hi;
  i64toi32_i32$5 = $17$hi;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$3 = var$1;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $22 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
   $22 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
  }
  $19$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $10$hi;
  i64toi32_i32$5 = $10;
  i64toi32_i32$1 = $19$hi;
  i64toi32_i32$3 = $22;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$5 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$5 | 0;
 }
 
 function __wasm_ctz_i32(var$0) {
  var$0 = var$0 | 0;
  if (var$0) {
   return 31 - Math_clz32((var$0 + -1 | 0) ^ var$0 | 0) | 0 | 0
  }
  return 32 | 0;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 bufferView = HEAPU8;
 initActiveSegments(imports);
 var FUNCTION_TABLE = Table([null, SetPlatformImeDataFn_DefaultImpl_28ImGuiViewport__2c_20ImGuiPlatformImeData__29, SetClipboardTextFn_DefaultImpl_28void__2c_20char_20const__29, GetClipboardTextFn_DefaultImpl_28void__29, WindowSettingsHandler_WriteAll_28ImGuiContext__2c_20ImGuiSettingsHandler__2c_20ImGuiTextBuffer__29, WindowSettingsHandler_ApplyAll_28ImGuiContext__2c_20ImGuiSettingsHandler__29, WindowSettingsHandler_ReadLine_28ImGuiContext__2c_20ImGuiSettingsHandler__2c_20void__2c_20char_20const__29, WindowSettingsHandler_ReadOpen_28ImGuiContext__2c_20ImGuiSettingsHandler__2c_20char_20const__29, WindowSettingsHandler_ClearAll_28ImGuiContext__2c_20ImGuiSettingsHandler__29, ImGui__DockSettingsHandler_WriteAll_28ImGuiContext__2c_20ImGuiSettingsHandler__2c_20ImGuiTextBuffer__29, ImGui__DockSettingsHandler_ApplyAll_28ImGuiContext__2c_20ImGuiSettingsHandler__29, ImGui__DockSettingsHandler_ReadLine_28ImGuiContext__2c_20ImGuiSettingsHandler__2c_20void__2c_20char_20const__29, ImGui__DockSettingsHandler_ReadOpen_28ImGuiContext__2c_20ImGuiSettingsHandler__2c_20char_20const__29, ImGui__DockSettingsHandler_ClearAll_28ImGuiContext__2c_20ImGuiSettingsHandler__29, DockNodeComparerDepthMostFirst_28void_20const__2c_20void_20const__29, TabItemComparerByDockOrder_28void_20const__2c_20void_20const__29, ChildWindowComparer_28void_20const__2c_20void_20const__29, MallocWrapper_28unsigned_20long_2c_20void__29, FreeWrapper_28void__2c_20void__29, ImFontAtlasBuildWithStbTruetype_28ImFontAtlas__29, rect_height_compare_28void_20const__2c_20void_20const__29, rect_original_order_28void_20const__2c_20void_20const__29, TableSettingsHandler_WriteAll_28ImGuiContext__2c_20ImGuiSettingsHandler__2c_20ImGuiTextBuffer__29, TableSettingsHandler_ReadLine_28ImGuiContext__2c_20ImGuiSettingsHandler__2c_20void__2c_20char_20const__29, TableSettingsHandler_ApplyAll_28ImGuiContext__2c_20ImGuiSettingsHandler__29, TableSettingsHandler_ReadOpen_28ImGuiContext__2c_20ImGuiSettingsHandler__2c_20char_20const__29, TableSettingsHandler_ClearAll_28ImGuiContext__2c_20ImGuiSettingsHandler__29, ShrinkWidthItemComparer_28void_20const__2c_20void_20const__29, TabItemComparerByBeginOrder_28void_20const__2c_20void_20const__29, TabItemComparerBySection_28void_20const__2c_20void_20const__29, __stdio_seek, __stdio_write, __stdio_read, __stdio_close, wrapper_cmp, __emscripten_stdout_close, __emscripten_stdout_seek, fmt_fp, pop_arg_long_double, sn_write, string_read]);
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 function __wasm_memory_grow(pagesToAdd) {
  pagesToAdd = pagesToAdd | 0;
  var oldPages = __wasm_memory_size() | 0;
  var newPages = oldPages + pagesToAdd | 0;
  if ((oldPages < newPages) && (newPages < 65536)) {
   var newBuffer = new ArrayBuffer(Math_imul(newPages, 65536));
   var newHEAP8 = new Int8Array(newBuffer);
   newHEAP8.set(HEAP8);
   HEAP8 = new Int8Array(newBuffer);
   HEAP16 = new Int16Array(newBuffer);
   HEAP32 = new Int32Array(newBuffer);
   HEAPU8 = new Uint8Array(newBuffer);
   HEAPU16 = new Uint16Array(newBuffer);
   HEAPU32 = new Uint32Array(newBuffer);
   HEAPF32 = new Float32Array(newBuffer);
   HEAPF64 = new Float64Array(newBuffer);
   buffer = newBuffer;
   memory.buffer = buffer;
   bufferView = HEAPU8;
  }
  return oldPages;
 }
 
 return {
  "__wasm_call_ctors": __wasm_call_ctors, 
  "emscripten_bind_VoidPtr___destroy___0": emscripten_bind_VoidPtr___destroy___0, 
  "emscripten_bind_BoolArray_BoolArray_1": emscripten_bind_BoolArray_BoolArray_1, 
  "emscripten_bind_BoolArray_resize_1": emscripten_bind_BoolArray_resize_1, 
  "emscripten_bind_BoolArray_getValue_1": emscripten_bind_BoolArray_getValue_1, 
  "emscripten_bind_BoolArray_setValue_2": emscripten_bind_BoolArray_setValue_2, 
  "emscripten_bind_BoolArray_getPointer_0": emscripten_bind_BoolArray_getPointer_0, 
  "emscripten_bind_BoolArray_get_size_0": emscripten_bind_BoolArray_get_size_0, 
  "emscripten_bind_BoolArray_set_size_1": emscripten_bind_BoolArray_set_size_1, 
  "emscripten_bind_BoolArray___destroy___0": emscripten_bind_BoolArray___destroy___0, 
  "emscripten_bind_IntArray_IntArray_1": emscripten_bind_IntArray_IntArray_1, 
  "emscripten_bind_IntArray_resize_1": emscripten_bind_IntArray_resize_1, 
  "emscripten_bind_IntArray_getValue_1": emscripten_bind_IntArray_getValue_1, 
  "emscripten_bind_IntArray_setValue_2": emscripten_bind_IntArray_setValue_2, 
  "emscripten_bind_IntArray_getPointer_0": emscripten_bind_IntArray_getPointer_0, 
  "emscripten_bind_IntArray_get_size_0": emscripten_bind_IntArray_get_size_0, 
  "emscripten_bind_IntArray_set_size_1": emscripten_bind_IntArray_set_size_1, 
  "emscripten_bind_IntArray___destroy___0": emscripten_bind_IntArray___destroy___0, 
  "emscripten_bind_FloatArray_FloatArray_1": emscripten_bind_FloatArray_FloatArray_1, 
  "emscripten_bind_FloatArray_resize_1": emscripten_bind_FloatArray_resize_1, 
  "emscripten_bind_FloatArray_getValue_1": emscripten_bind_FloatArray_getValue_1, 
  "emscripten_bind_FloatArray_setValue_2": emscripten_bind_FloatArray_setValue_2, 
  "emscripten_bind_FloatArray_getPointer_0": emscripten_bind_FloatArray_getPointer_0, 
  "emscripten_bind_FloatArray_get_size_0": emscripten_bind_FloatArray_get_size_0, 
  "emscripten_bind_FloatArray_set_size_1": emscripten_bind_FloatArray_set_size_1, 
  "emscripten_bind_FloatArray___destroy___0": emscripten_bind_FloatArray___destroy___0, 
  "emscripten_bind_DoubleArray_DoubleArray_1": emscripten_bind_DoubleArray_DoubleArray_1, 
  "emscripten_bind_DoubleArray_resize_1": emscripten_bind_DoubleArray_resize_1, 
  "emscripten_bind_DoubleArray_getValue_1": emscripten_bind_DoubleArray_getValue_1, 
  "emscripten_bind_DoubleArray_setValue_2": emscripten_bind_DoubleArray_setValue_2, 
  "emscripten_bind_DoubleArray_getPointer_0": emscripten_bind_DoubleArray_getPointer_0, 
  "emscripten_bind_DoubleArray_get_size_0": emscripten_bind_DoubleArray_get_size_0, 
  "emscripten_bind_DoubleArray_set_size_1": emscripten_bind_DoubleArray_set_size_1, 
  "emscripten_bind_DoubleArray___destroy___0": emscripten_bind_DoubleArray___destroy___0, 
  "emscripten_bind_CharArray_CharArray_1": emscripten_bind_CharArray_CharArray_1, 
  "emscripten_bind_CharArray_resize_1": emscripten_bind_CharArray_resize_1, 
  "emscripten_bind_CharArray_getValue_1": emscripten_bind_CharArray_getValue_1, 
  "emscripten_bind_CharArray_setValue_2": emscripten_bind_CharArray_setValue_2, 
  "emscripten_bind_CharArray_getPointer_0": emscripten_bind_CharArray_getPointer_0, 
  "emscripten_bind_CharArray_get_size_0": emscripten_bind_CharArray_get_size_0, 
  "emscripten_bind_CharArray_set_size_1": emscripten_bind_CharArray_set_size_1, 
  "emscripten_bind_CharArray___destroy___0": emscripten_bind_CharArray___destroy___0, 
  "emscripten_bind_ImHelper_memcpyIdx_3": emscripten_bind_ImHelper_memcpyIdx_3, 
  "emscripten_bind_ImHelper_memcpyVtx_3": emscripten_bind_ImHelper_memcpyVtx_3, 
  "emscripten_bind_ImHelper_memcpyFont_5": emscripten_bind_ImHelper_memcpyFont_5, 
  "emscripten_bind_ImHelper_getTextureId_1": emscripten_bind_ImHelper_getTextureId_1, 
  "emscripten_bind_ImHelper_setIniFilename_2": emscripten_bind_ImHelper_setIniFilename_2, 
  "emscripten_bind_ImHelper_removeIniFilename_1": emscripten_bind_ImHelper_removeIniFilename_1, 
  "emscripten_bind_ImHelper___destroy___0": emscripten_bind_ImHelper___destroy___0, 
  "emscripten_bind_Im_CreateContext_0": emscripten_bind_Im_CreateContext_0, 
  "emscripten_bind_Im_Begin_1": emscripten_bind_Im_Begin_1, 
  "emscripten_bind_Im_End_0": emscripten_bind_Im_End_0, 
  "emscripten_bind_Im_Render_0": emscripten_bind_Im_Render_0, 
  "emscripten_bind_Im_NewFrame_0": emscripten_bind_Im_NewFrame_0, 
  "emscripten_bind_Im_GetDrawData_0": emscripten_bind_Im_GetDrawData_0, 
  "emscripten_bind_Im_GetIO_0": emscripten_bind_Im_GetIO_0, 
  "emscripten_bind_Im_SetNextWindowSize_1": emscripten_bind_Im_SetNextWindowSize_1, 
  "emscripten_bind_Im_SetNextWindowSize_2": emscripten_bind_Im_SetNextWindowSize_2, 
  "emscripten_bind_Im_ShowDemoWindow_0": emscripten_bind_Im_ShowDemoWindow_0, 
  "emscripten_bind_Im_ShowDemoWindow_1": emscripten_bind_Im_ShowDemoWindow_1, 
  "emscripten_bind_Im_Checkbox_2": emscripten_bind_Im_Checkbox_2, 
  "emscripten_bind_ImVec2_ImVec2_0": emscripten_bind_ImVec2_ImVec2_0, 
  "emscripten_bind_ImVec2_ImVec2_2": emscripten_bind_ImVec2_ImVec2_2, 
  "emscripten_bind_ImVec2_get_x_0": emscripten_bind_ImVec2_get_x_0, 
  "emscripten_bind_ImVec2_set_x_1": emscripten_bind_ImVec2_set_x_1, 
  "emscripten_bind_ImVec2_get_y_0": emscripten_bind_ImVec2_get_y_0, 
  "emscripten_bind_ImVec2_set_y_1": emscripten_bind_ImVec2_set_y_1, 
  "emscripten_bind_ImVec2___destroy___0": emscripten_bind_ImVec2___destroy___0, 
  "emscripten_bind_ImVec4_ImVec4_0": emscripten_bind_ImVec4_ImVec4_0, 
  "emscripten_bind_ImVec4_ImVec4_4": emscripten_bind_ImVec4_ImVec4_4, 
  "emscripten_bind_ImVec4_get_x_0": emscripten_bind_ImVec4_get_x_0, 
  "emscripten_bind_ImVec4_set_x_1": emscripten_bind_ImVec4_set_x_1, 
  "emscripten_bind_ImVec4_get_y_0": emscripten_bind_ImVec4_get_y_0, 
  "emscripten_bind_ImVec4_set_y_1": emscripten_bind_ImVec4_set_y_1, 
  "emscripten_bind_ImVec4_get_z_0": emscripten_bind_ImVec4_get_z_0, 
  "emscripten_bind_ImVec4_set_z_1": emscripten_bind_ImVec4_set_z_1, 
  "emscripten_bind_ImVec4_get_w_0": emscripten_bind_ImVec4_get_w_0, 
  "emscripten_bind_ImVec4_set_w_1": emscripten_bind_ImVec4_set_w_1, 
  "emscripten_bind_ImVec4___destroy___0": emscripten_bind_ImVec4___destroy___0, 
  "emscripten_bind_VecCmdBuffer_size_0": emscripten_bind_VecCmdBuffer_size_0, 
  "emscripten_bind_VecCmdBuffer_get_Data_0": emscripten_bind_VecCmdBuffer_get_Data_0, 
  "emscripten_bind_VecCmdBuffer_set_Data_1": emscripten_bind_VecCmdBuffer_set_Data_1, 
  "emscripten_bind_VecCmdBuffer___destroy___0": emscripten_bind_VecCmdBuffer___destroy___0, 
  "emscripten_bind_VecIdxBuffer_size_0": emscripten_bind_VecIdxBuffer_size_0, 
  "emscripten_bind_VecIdxBuffer_get_Data_1": emscripten_bind_VecIdxBuffer_get_Data_1, 
  "emscripten_bind_VecIdxBuffer_set_Data_2": emscripten_bind_VecIdxBuffer_set_Data_2, 
  "emscripten_bind_VecIdxBuffer___destroy___0": emscripten_bind_VecIdxBuffer___destroy___0, 
  "emscripten_bind_VecVtxBuffer_size_0": emscripten_bind_VecVtxBuffer_size_0, 
  "emscripten_bind_VecVtxBuffer_get_Data_0": emscripten_bind_VecVtxBuffer_get_Data_0, 
  "emscripten_bind_VecVtxBuffer_set_Data_1": emscripten_bind_VecVtxBuffer_set_Data_1, 
  "emscripten_bind_VecVtxBuffer___destroy___0": emscripten_bind_VecVtxBuffer___destroy___0, 
  "emscripten_bind_ImDrawCmd_get_ClipRect_0": emscripten_bind_ImDrawCmd_get_ClipRect_0, 
  "emscripten_bind_ImDrawCmd_set_ClipRect_1": emscripten_bind_ImDrawCmd_set_ClipRect_1, 
  "emscripten_bind_ImDrawCmd_get_VtxOffset_0": emscripten_bind_ImDrawCmd_get_VtxOffset_0, 
  "emscripten_bind_ImDrawCmd_set_VtxOffset_1": emscripten_bind_ImDrawCmd_set_VtxOffset_1, 
  "emscripten_bind_ImDrawCmd_get_IdxOffset_0": emscripten_bind_ImDrawCmd_get_IdxOffset_0, 
  "emscripten_bind_ImDrawCmd_set_IdxOffset_1": emscripten_bind_ImDrawCmd_set_IdxOffset_1, 
  "emscripten_bind_ImDrawCmd_get_ElemCount_0": emscripten_bind_ImDrawCmd_get_ElemCount_0, 
  "emscripten_bind_ImDrawCmd_set_ElemCount_1": emscripten_bind_ImDrawCmd_set_ElemCount_1, 
  "emscripten_bind_ImDrawCmd_get_TextureId_0": emscripten_bind_ImDrawCmd_get_TextureId_0, 
  "emscripten_bind_ImDrawCmd_set_TextureId_1": emscripten_bind_ImDrawCmd_set_TextureId_1, 
  "emscripten_bind_ImDrawCmd___destroy___0": emscripten_bind_ImDrawCmd___destroy___0, 
  "emscripten_bind_ImDrawVert_get_pos_0": emscripten_bind_ImDrawVert_get_pos_0, 
  "emscripten_bind_ImDrawVert_set_pos_1": emscripten_bind_ImDrawVert_set_pos_1, 
  "emscripten_bind_ImDrawVert_get_uv_0": emscripten_bind_ImDrawVert_get_uv_0, 
  "emscripten_bind_ImDrawVert_set_uv_1": emscripten_bind_ImDrawVert_set_uv_1, 
  "emscripten_bind_ImDrawVert_get_col_0": emscripten_bind_ImDrawVert_get_col_0, 
  "emscripten_bind_ImDrawVert_set_col_1": emscripten_bind_ImDrawVert_set_col_1, 
  "emscripten_bind_ImDrawVert___destroy___0": emscripten_bind_ImDrawVert___destroy___0, 
  "emscripten_bind_ImDrawData_get_CmdListsCount_0": emscripten_bind_ImDrawData_get_CmdListsCount_0, 
  "emscripten_bind_ImDrawData_set_CmdListsCount_1": emscripten_bind_ImDrawData_set_CmdListsCount_1, 
  "emscripten_bind_ImDrawData_get_TotalIdxCount_0": emscripten_bind_ImDrawData_get_TotalIdxCount_0, 
  "emscripten_bind_ImDrawData_set_TotalIdxCount_1": emscripten_bind_ImDrawData_set_TotalIdxCount_1, 
  "emscripten_bind_ImDrawData_get_TotalVtxCount_0": emscripten_bind_ImDrawData_get_TotalVtxCount_0, 
  "emscripten_bind_ImDrawData_set_TotalVtxCount_1": emscripten_bind_ImDrawData_set_TotalVtxCount_1, 
  "emscripten_bind_ImDrawData_get_CmdLists_1": emscripten_bind_ImDrawData_get_CmdLists_1, 
  "emscripten_bind_ImDrawData_set_CmdLists_2": emscripten_bind_ImDrawData_set_CmdLists_2, 
  "emscripten_bind_ImDrawData_get_DisplayPos_0": emscripten_bind_ImDrawData_get_DisplayPos_0, 
  "emscripten_bind_ImDrawData_set_DisplayPos_1": emscripten_bind_ImDrawData_set_DisplayPos_1, 
  "emscripten_bind_ImDrawData_get_DisplaySize_0": emscripten_bind_ImDrawData_get_DisplaySize_0, 
  "emscripten_bind_ImDrawData_set_DisplaySize_1": emscripten_bind_ImDrawData_set_DisplaySize_1, 
  "emscripten_bind_ImDrawData_get_FramebufferScale_0": emscripten_bind_ImDrawData_get_FramebufferScale_0, 
  "emscripten_bind_ImDrawData_set_FramebufferScale_1": emscripten_bind_ImDrawData_set_FramebufferScale_1, 
  "emscripten_bind_ImDrawData___destroy___0": emscripten_bind_ImDrawData___destroy___0, 
  "emscripten_bind_ImDrawList_get_CmdBuffer_0": emscripten_bind_ImDrawList_get_CmdBuffer_0, 
  "emscripten_bind_ImDrawList_set_CmdBuffer_1": emscripten_bind_ImDrawList_set_CmdBuffer_1, 
  "emscripten_bind_ImDrawList_get_IdxBuffer_0": emscripten_bind_ImDrawList_get_IdxBuffer_0, 
  "emscripten_bind_ImDrawList_set_IdxBuffer_1": emscripten_bind_ImDrawList_set_IdxBuffer_1, 
  "emscripten_bind_ImDrawList_get_VtxBuffer_0": emscripten_bind_ImDrawList_get_VtxBuffer_0, 
  "emscripten_bind_ImDrawList_set_VtxBuffer_1": emscripten_bind_ImDrawList_set_VtxBuffer_1, 
  "emscripten_bind_ImDrawList___destroy___0": emscripten_bind_ImDrawList___destroy___0, 
  "emscripten_bind_ImGuiIO_AddMouseWheelEvent_2": emscripten_bind_ImGuiIO_AddMouseWheelEvent_2, 
  "emscripten_bind_ImGuiIO_AddMouseButtonEvent_2": emscripten_bind_ImGuiIO_AddMouseButtonEvent_2, 
  "emscripten_bind_ImGuiIO_AddMousePosEvent_2": emscripten_bind_ImGuiIO_AddMousePosEvent_2, 
  "emscripten_bind_ImGuiIO_AddKeyEvent_2": emscripten_bind_ImGuiIO_AddKeyEvent_2, 
  "emscripten_bind_ImGuiIO_AddInputCharacter_1": emscripten_bind_ImGuiIO_AddInputCharacter_1, 
  "emscripten_bind_ImGuiIO_get_WantCaptureMouse_0": emscripten_bind_ImGuiIO_get_WantCaptureMouse_0, 
  "emscripten_bind_ImGuiIO_set_WantCaptureMouse_1": emscripten_bind_ImGuiIO_set_WantCaptureMouse_1, 
  "emscripten_bind_ImGuiIO_get_DisplaySize_0": emscripten_bind_ImGuiIO_get_DisplaySize_0, 
  "emscripten_bind_ImGuiIO_set_DisplaySize_1": emscripten_bind_ImGuiIO_set_DisplaySize_1, 
  "emscripten_bind_ImGuiIO_get_DisplayFramebufferScale_0": emscripten_bind_ImGuiIO_get_DisplayFramebufferScale_0, 
  "emscripten_bind_ImGuiIO_set_DisplayFramebufferScale_1": emscripten_bind_ImGuiIO_set_DisplayFramebufferScale_1, 
  "emscripten_bind_ImGuiIO_get_DeltaTime_0": emscripten_bind_ImGuiIO_get_DeltaTime_0, 
  "emscripten_bind_ImGuiIO_set_DeltaTime_1": emscripten_bind_ImGuiIO_set_DeltaTime_1, 
  "emscripten_bind_ImGuiIO_get_Fonts_0": emscripten_bind_ImGuiIO_get_Fonts_0, 
  "emscripten_bind_ImGuiIO_set_Fonts_1": emscripten_bind_ImGuiIO_set_Fonts_1, 
  "emscripten_bind_ImGuiIO___destroy___0": emscripten_bind_ImGuiIO___destroy___0, 
  "emscripten_bind_ImFontAtlas_get_TexID_0": emscripten_bind_ImFontAtlas_get_TexID_0, 
  "emscripten_bind_ImFontAtlas_set_TexID_1": emscripten_bind_ImFontAtlas_set_TexID_1, 
  "emscripten_bind_ImFontAtlas___destroy___0": emscripten_bind_ImFontAtlas___destroy___0, 
  "emscripten_enum_ImGuiKey_ImGuiKey_None": emscripten_enum_ImGuiKey_ImGuiKey_None, 
  "__em_lib_deps_webidl_binder": {
   get value() {
    return global$4;
   }, 
   set value(_global$4) {
    global$4 = _global$4;
   }
  }, 
  "__em_js__array_bounds_check_error": {
   get value() {
    return global$5;
   }, 
   set value(_global$5) {
    global$5 = _global$5;
   }
  }, 
  "__indirect_function_table": FUNCTION_TABLE, 
  "fflush": fflush, 
  "malloc": malloc, 
  "free": free, 
  "__errno_location": __errno_location, 
  "setTempRet0": setTempRet0, 
  "getTempRet0": getTempRet0, 
  "emscripten_stack_init": emscripten_stack_init, 
  "emscripten_stack_get_free": emscripten_stack_get_free, 
  "emscripten_stack_get_base": emscripten_stack_get_base, 
  "emscripten_stack_get_end": emscripten_stack_get_end, 
  "stackSave": stackSave, 
  "stackRestore": stackRestore, 
  "stackAlloc": stackAlloc, 
  "emscripten_stack_get_current": emscripten_stack_get_current, 
  "__start_em_lib_deps": {
   get value() {
    return global$6;
   }, 
   set value(_global$6) {
    global$6 = _global$6;
   }
  }, 
  "__stop_em_lib_deps": {
   get value() {
    return global$7;
   }, 
   set value(_global$7) {
    global$7 = _global$7;
   }
  }, 
  "__start_em_js": {
   get value() {
    return global$8;
   }, 
   set value(_global$8) {
    global$8 = _global$8;
   }
  }, 
  "__stop_em_js": {
   get value() {
    return global$9;
   }, 
   set value(_global$9) {
    global$9 = _global$9;
   }
  }, 
  "dynCall_jiji": legalstub$dynCall_jiji
 };
}

  return asmFunc(info);
}

)(info);
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        var module = new WebAssembly.Module(binary);
        ok({
          'instance': new WebAssembly.Instance(module, info)
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return { catch: function() {} };
      }
    };
  },

  RuntimeError: Error
};

// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];

// end include: wasm2js.js
if (typeof WebAssembly != 'object') {
  abort('no native wasm support detected');
}

// Wasm globals

var wasmMemory;

//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed' + (text ? ': ' + text : ''));
  }
}

// We used to include malloc/free by default in the past. Show a helpful error in
// builds with assertions.

// include: runtime_strings.js
// runtime_strings.js: String related runtime functions that are part of both
// MINIMAL_RUNTIME and regular runtime.

var UTF8Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * Given a pointer 'idx' to a null-terminated UTF8-encoded string in the given
 * array that contains uint8 values, returns a copy of that string as a
 * Javascript String object.
 * heapOrArray is either a regular array, or a JavaScript typed array view.
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(heapOrArray, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on
  // null terminator by itself.  Also, use the length info to avoid running tiny
  // strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation,
  // so that undefined means Infinity)
  while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {
    return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));
  }
  var str = '';
  // If building with TextDecoder, we have already computed the string length
  // above, so test loop end condition against that
  while (idx < endPtr) {
    // For UTF8 byte structure, see:
    // http://en.wikipedia.org/wiki/UTF-8#Description
    // https://www.ietf.org/rfc/rfc2279.txt
    // https://tools.ietf.org/html/rfc3629
    var u0 = heapOrArray[idx++];
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    var u1 = heapOrArray[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    var u2 = heapOrArray[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte ' + ptrToString(u0) + ' encountered when deserializing a UTF-8 string in wasm memory to a JS string!');
      u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heapOrArray[idx++] & 63);
    }

    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
  return str;
}

/**
 * Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the
 * emscripten HEAP, returns a copy of that string as a Javascript String object.
 *
 * @param {number} ptr
 * @param {number=} maxBytesToRead - An optional length that specifies the
 *   maximum number of bytes to read. You can omit this parameter to scan the
 *   string until the first \0 byte. If maxBytesToRead is passed, and the string
 *   at [ptr, ptr+maxBytesToReadr[ contains a null byte in the middle, then the
 *   string will cut short at that byte index (i.e. maxBytesToRead will not
 *   produce a string of exact length [ptr, ptr+maxBytesToRead[) N.B. mixing
 *   frequent uses of UTF8ToString() with and without maxBytesToRead may throw
 *   JS JIT optimizations off, so it is worth to consider consistently using one
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

/**
 * Copies the given Javascript String object 'str' to the given byte array at
 * address 'outIdx', encoded in UTF8 form and null-terminated. The copy will
 * require at most str.length*4+1 bytes of space in the HEAP.  Use the function
 * lengthBytesUTF8 to compute the exact number of bytes (excluding null
 * terminator) that this function will write.
 *
 * @param {string} str - The Javascript string to copy.
 * @param {ArrayBufferView|Array<number>} heap - The array to copy to. Each
 *                                               index in this array is assumed
 *                                               to be one 8-byte element.
 * @param {number} outIdx - The starting offset in the array to begin the copying.
 * @param {number} maxBytesToWrite - The maximum number of bytes this function
 *                                   can write to the array.  This count should
 *                                   include the null terminator, i.e. if
 *                                   maxBytesToWrite=1, only the null terminator
 *                                   will be written and nothing else.
 *                                   maxBytesToWrite=0 does not write any bytes
 *                                   to the output, not even the null
 *                                   terminator.
 * @return {number} The number of bytes written, EXCLUDING the null terminator.
 */
function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
  // Parameter maxBytesToWrite is not optional. Negative values, 0, null,
  // undefined and false each don't write out any bytes.
  if (!(maxBytesToWrite > 0))
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code
    // unit, not a Unicode code point of the character! So decode
    // UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description
    // and https://www.ietf.org/rfc/rfc2279.txt
    // and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 0xC0 | (u >> 6);
      heap[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 0xE0 | (u >> 12);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u > 0x10FFFF) warnOnce('Invalid Unicode code point ' + ptrToString(u) + ' encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF).');
      heap[outIdx++] = 0xF0 | (u >> 18);
      heap[outIdx++] = 0x80 | ((u >> 12) & 63);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
}

/**
 * Copies the given Javascript String object 'str' to the emscripten HEAP at
 * address 'outPtr', null-terminated and encoded in UTF8 form. The copy will
 * require at most str.length*4+1 bytes of space in the HEAP.
 * Use the function lengthBytesUTF8 to compute the exact number of bytes
 * (excluding null terminator) that this function will write.
 *
 * @return {number} The number of bytes written, EXCLUDING the null terminator.
 */
function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

/**
 * Returns the number of bytes the given Javascript string takes if encoded as a
 * UTF8 byte array, EXCLUDING the null terminator byte.
 *
 * @param {string} str - JavaScript string to operator on
 * @return {number} Length, in bytes, of the UTF8 encoded string.
 */
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code
    // unit, not a Unicode code point of the character! So decode
    // UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var c = str.charCodeAt(i); // possibly a lead surrogate
    if (c <= 0x7F) {
      len++;
    } else if (c <= 0x7FF) {
      len += 2;
    } else if (c >= 0xD800 && c <= 0xDFFF) {
      len += 4; ++i;
    } else {
      len += 3;
    }
  }
  return len;
}

// end include: runtime_strings.js
// Memory management

var HEAP,
/** @type {!Int8Array} */
  HEAP8,
/** @type {!Uint8Array} */
  HEAPU8,
/** @type {!Int16Array} */
  HEAP16,
/** @type {!Uint16Array} */
  HEAPU16,
/** @type {!Int32Array} */
  HEAP32,
/** @type {!Uint32Array} */
  HEAPU32,
/** @type {!Float32Array} */
  HEAPF32,
/** @type {!Float64Array} */
  HEAPF64;

function updateMemoryViews() {
  var b = wasmMemory.buffer;
  Module['HEAP8'] = HEAP8 = new Int8Array(b);
  Module['HEAP16'] = HEAP16 = new Int16Array(b);
  Module['HEAP32'] = HEAP32 = new Int32Array(b);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(b);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(b);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(b);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(b);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(b);
}

assert(!Module['STACK_SIZE'], 'STACK_SIZE can no longer be set at runtime.  Use -sSTACK_SIZE at link time')

assert(typeof Int32Array != 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray != undefined && Int32Array.prototype.set != undefined,
       'JS engine does not provide full typed array support');

// In non-standalone/normal mode, we create the memory here.
// include: runtime_init_memory.js
// Create the wasm memory. (Note: this only applies if IMPORTED_MEMORY is defined)

var INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 67108864;legacyModuleProp('INITIAL_MEMORY', 'INITIAL_MEMORY');

assert(INITIAL_MEMORY >= 65536, 'INITIAL_MEMORY should be larger than STACK_SIZE, was ' + INITIAL_MEMORY + '! (STACK_SIZE=' + 65536 + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_MEMORY / 65536,
      // In theory we should not need to emit the maximum if we want "unlimited"
      // or 4GB of memory, but VMs error on that atm, see
      // https://github.com/emscripten-core/emscripten/issues/14130
      // And in the pthreads case we definitely need to emit a maximum. So
      // always emit one.
      'maximum': 2147483648 / 65536
    });
  }

updateMemoryViews();

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_MEMORY = wasmMemory.buffer.byteLength;
assert(INITIAL_MEMORY % 65536 === 0);

// end include: runtime_init_memory.js

// include: runtime_init_table.js
// In regular non-RELOCATABLE mode the table is exported
// from the wasm module and this will be assigned once
// the exports are available.
var wasmTable;

// end include: runtime_init_table.js
// include: runtime_stack_check.js
// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  var max = _emscripten_stack_get_end();
  assert((max & 3) == 0);
  // If the stack ends at address zero we write our cookies 4 bytes into the
  // stack.  This prevents interference with the (separate) address-zero check
  // below.
  if (max == 0) {
    max += 4;
  }
  // The stack grow downwards towards _emscripten_stack_get_end.
  // We write cookies to the final two words in the stack and detect if they are
  // ever overwritten.
  HEAPU32[((max)>>2)] = 0x2135467;
  HEAPU32[(((max)+(4))>>2)] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  HEAPU32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  if (ABORT) return;
  var max = _emscripten_stack_get_end();
  // See writeStackCookie().
  if (max == 0) {
    max += 4;
  }
  var cookie1 = HEAPU32[((max)>>2)];
  var cookie2 = HEAPU32[(((max)+(4))>>2)];
  if (cookie1 != 0x2135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten at ' + ptrToString(max) + ', expected hex dwords 0x89BACDFE and 0x2135467, but received ' + ptrToString(cookie2) + ' ' + ptrToString(cookie1));
  }
  // Also test the global address 0 for integrity.
  if (HEAPU32[0] !== 0x63736d65 /* 'emsc' */) {
    abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
  }
}

// end include: runtime_stack_check.js
// include: runtime_assertions.js
// Endianness check
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)';
})();

// end include: runtime_assertions.js
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;

function keepRuntimeAlive() {
  return noExitRuntime;
}

function preRun() {
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  assert(!runtimeInitialized);
  runtimeInitialized = true;

  checkStackCookie();

  
  callRuntimeCallbacks(__ATINIT__);
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// include: runtime_math.js
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

// end include: runtime_math.js
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval != 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

/** @param {string|number=} what */
function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what = 'Aborted(' + what + ')';
  // TODO(sbc): Should we remove printing and leave it up to whoever
  // catches the exception?
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  // FIXME This approach does not work in Wasm EH because it currently does not assume
  // all RuntimeErrors are from traps; it decides whether a RuntimeError is from
  // a trap or not based on a hidden field within the object. So at the moment
  // we don't have a way of throwing a wasm trap from JS. TODO Make a JS API that
  // allows this in the wasm spec.

  // Suppress closure compiler warning here. Closure compiler's builtin extern
  // defintion for WebAssembly.RuntimeError claims it takes no arguments even
  // though it can.
  // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure gets fixed.
  /** @suppress {checkTypes} */
  var e = new WebAssembly.RuntimeError(what);

  readyPromiseReject(e);
  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

// include: memoryprofiler.js
// end include: memoryprofiler.js
// show errors on likely calls to FS when it was not included
var FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with -sFORCE_FILESYSTEM');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;

// include: URIUtils.js
// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  // Prefix of data URIs emitted by SINGLE_FILE and related options.
  return filename.startsWith(dataURIPrefix);
}

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return filename.startsWith('file://');
}

// end include: URIUtils.js
/** @param {boolean=} fixedasm */
function createExportWrapper(name, fixedasm) {
  return function() {
    var displayName = name;
    var asm = fixedasm;
    if (!fixedasm) {
      asm = Module['asm'];
    }
    assert(runtimeInitialized, 'native function `' + displayName + '` called before runtime initialization');
    if (!asm[name]) {
      assert(asm[name], 'exported native function `' + displayName + '` not found');
    }
    return asm[name].apply(null, arguments);
  };
}

var wasmBinaryFile;
  wasmBinaryFile = '<<< WASM_BINARY_FILE >>>';
  if (!isDataURI(wasmBinaryFile)) {
    wasmBinaryFile = locateFile(wasmBinaryFile);
  }

function getBinary(file) {
  try {
    if (file == wasmBinaryFile && wasmBinary) {
      return new Uint8Array(wasmBinary);
    }
    var binary = tryParseAsDataURI(file);
    if (binary) {
      return binary;
    }
    if (readBinary) {
      return readBinary(file);
    }
    throw "both async and sync fetching of the wasm failed";
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // If we don't have the binary yet, try to to load it asynchronously.
  // Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.
  // See https://github.com/github/fetch/pull/92#issuecomment-140665932
  // Cordova or Electron apps are typically loaded from a file:// url.
  // So use fetch if it is available and the url is not a file, otherwise fall back to XHR.
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
    if (typeof fetch == 'function'
      && !isFileURI(wasmBinaryFile)
    ) {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
        if (!response['ok']) {
          throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
        }
        return response['arrayBuffer']();
      }).catch(function () {
          return getBinary(wasmBinaryFile);
      });
    }
    else {
      if (readAsync) {
        // fetch is not available or url is file => try XHR (readAsync uses XHR internally)
        return new Promise(function(resolve, reject) {
          readAsync(wasmBinaryFile, function(response) { resolve(new Uint8Array(/** @type{!ArrayBuffer} */(response))) }, reject)
        });
      }
    }
  }

  // Otherwise, getBinary should be able to get it synchronously
  return Promise.resolve().then(function() { return getBinary(wasmBinaryFile); });
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': wasmImports,
    'wasi_snapshot_preview1': wasmImports,
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;

    Module['asm'] = exports;

    wasmTable = Module['asm']['__indirect_function_table'];
    assert(wasmTable, "table not found in wasm exports");

    addOnInit(Module['asm']['__wasm_call_ctors']);

    removeRunDependency('wasm-instantiate');

  }
  // wait for the pthread pool (if any)
  addRunDependency('wasm-instantiate');

  // Prefer streaming instantiation if available.
  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiationResult(result) {
    // 'result' is a ResultObject object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(result['instance']);
  }

  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(function (instance) {
      return instance;
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);

      // Warn on some common problems.
      if (isFileURI(wasmBinaryFile)) {
        err('warning: Loading from a file URI (' + wasmBinaryFile + ') is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing');
      }
      abort(reason);
    });
  }

  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming == 'function' &&
        !isDataURI(wasmBinaryFile) &&
        // Don't use streaming for file:// delivered objects in a webview, fetch them synchronously.
        !isFileURI(wasmBinaryFile) &&
        // Avoid instantiateStreaming() on Node.js environment for now, as while
        // Node.js v18.1.0 implements it, it does not have a full fetch()
        // implementation yet.
        //
        // Reference:
        //   https://github.com/emscripten-core/emscripten/pull/16917
        !ENVIRONMENT_IS_NODE &&
        typeof fetch == 'function') {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
        // Suppress closure warning here since the upstream definition for
        // instantiateStreaming only allows Promise<Repsponse> rather than
        // an actual Response.
        // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure is fixed.
        /** @suppress {checkTypes} */
        var result = WebAssembly.instantiateStreaming(response, info);

        return result.then(
          receiveInstantiationResult,
          function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            return instantiateArrayBuffer(receiveInstantiationResult);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiationResult);
    }
  }

  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  // Also pthreads and wasm workers initialize the wasm instance through this path.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
        // If instantiation fails, reject the module ready promise.
        readyPromiseReject(e);
    }
  }

  // If instantiation fails, reject the module ready promise.
  instantiateAsync().catch(readyPromiseReject);
  return {}; // no exports yet; we'll fill them in later
}

// Globals used by JS i64 conversions (see makeSetValue)
var tempDouble;
var tempI64;

// include: runtime_debug.js
function legacyModuleProp(prop, newName) {
  if (!Object.getOwnPropertyDescriptor(Module, prop)) {
    Object.defineProperty(Module, prop, {
      configurable: true,
      get: function() {
        abort('Module.' + prop + ' has been replaced with plain ' + newName + ' (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)');
      }
    });
  }
}

function ignoredModuleProp(prop) {
  if (Object.getOwnPropertyDescriptor(Module, prop)) {
    abort('`Module.' + prop + '` was supplied but `' + prop + '` not included in INCOMING_MODULE_JS_API');
  }
}

// forcing the filesystem exports a few things by default
function isExportedByForceFilesystem(name) {
  return name === 'FS_createPath' ||
         name === 'FS_createDataFile' ||
         name === 'FS_createPreloadedFile' ||
         name === 'FS_unlink' ||
         name === 'addRunDependency' ||
         // The old FS has some functionality that WasmFS lacks.
         name === 'FS_createLazyFile' ||
         name === 'FS_createDevice' ||
         name === 'removeRunDependency';
}

function missingGlobal(sym, msg) {
  if (typeof globalThis !== 'undefined') {
    Object.defineProperty(globalThis, sym, {
      configurable: true,
      get: function() {
        warnOnce('`' + sym + '` is not longer defined by emscripten. ' + msg);
        return undefined;
      }
    });
  }
}

missingGlobal('buffer', 'Please use HEAP8.buffer or wasmMemory.buffer');

function missingLibrarySymbol(sym) {
  if (typeof globalThis !== 'undefined' && !Object.getOwnPropertyDescriptor(globalThis, sym)) {
    Object.defineProperty(globalThis, sym, {
      configurable: true,
      get: function() {
        // Can't `abort()` here because it would break code that does runtime
        // checks.  e.g. `if (typeof SDL === 'undefined')`.
        var msg = '`' + sym + '` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line';
        // DEFAULT_LIBRARY_FUNCS_TO_INCLUDE requires the name as it appears in
        // library.js, which means $name for a JS name with no prefix, or name
        // for a JS name like _name.
        var librarySymbol = sym;
        if (!librarySymbol.startsWith('_')) {
          librarySymbol = '$' + sym;
        }
        msg += " (e.g. -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE=" + librarySymbol + ")";
        if (isExportedByForceFilesystem(sym)) {
          msg += '. Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you';
        }
        warnOnce(msg);
        return undefined;
      }
    });
  }
  // Any symbol that is not included from the JS libary is also (by definttion)
  // not exported on the Module object.
  unexportedRuntimeSymbol(sym);
}

function unexportedRuntimeSymbol(sym) {
  if (!Object.getOwnPropertyDescriptor(Module, sym)) {
    Object.defineProperty(Module, sym, {
      configurable: true,
      get: function() {
        var msg = "'" + sym + "' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)";
        if (isExportedByForceFilesystem(sym)) {
          msg += '. Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you';
        }
        abort(msg);
      }
    });
  }
}

// end include: runtime_debug.js
// === Body ===

function array_bounds_check_error(idx,size) { throw 'Array index ' + idx + ' out of bounds: [0,' + size + ')'; }



// end include: preamble.js

  /** @constructor */
  function ExitStatus(status) {
      this.name = 'ExitStatus';
      this.message = 'Program terminated with exit(' + status + ')';
      this.status = status;
    }

  function callRuntimeCallbacks(callbacks) {
      while (callbacks.length > 0) {
        // Pass the module as the first argument.
        callbacks.shift()(Module);
      }
    }

  
    /**
     * @param {number} ptr
     * @param {string} type
     */
  function getValue(ptr, type = 'i8') {
      if (type.endsWith('*')) type = '*';
      switch (type) {
        case 'i1': return HEAP8[((ptr)>>0)];
        case 'i8': return HEAP8[((ptr)>>0)];
        case 'i16': return HEAP16[((ptr)>>1)];
        case 'i32': return HEAP32[((ptr)>>2)];
        case 'i64': return HEAP32[((ptr)>>2)];
        case 'float': return HEAPF32[((ptr)>>2)];
        case 'double': return HEAPF64[((ptr)>>3)];
        case '*': return HEAPU32[((ptr)>>2)];
        default: abort('invalid type for getValue: ' + type);
      }
      return null;
    }

  function intArrayToString(array) {
    var ret = [];
    for (var i = 0; i < array.length; i++) {
      var chr = array[i];
      if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
        chr &= 0xFF;
      }
      ret.push(String.fromCharCode(chr));
    }
    return ret.join('');
  }

  function ptrToString(ptr) {
      assert(typeof ptr === 'number');
      return '0x' + ptr.toString(16).padStart(8, '0');
    }

  
    /**
     * @param {number} ptr
     * @param {number} value
     * @param {string} type
     */
  function setValue(ptr, value, type = 'i8') {
      if (type.endsWith('*')) type = '*';
      switch (type) {
        case 'i1': HEAP8[((ptr)>>0)] = value; break;
        case 'i8': HEAP8[((ptr)>>0)] = value; break;
        case 'i16': HEAP16[((ptr)>>1)] = value; break;
        case 'i32': HEAP32[((ptr)>>2)] = value; break;
        case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)] = tempI64[0],HEAP32[(((ptr)+(4))>>2)] = tempI64[1]); break;
        case 'float': HEAPF32[((ptr)>>2)] = value; break;
        case 'double': HEAPF64[((ptr)>>3)] = value; break;
        case '*': HEAPU32[((ptr)>>2)] = value; break;
        default: abort('invalid type for setValue: ' + type);
      }
    }

  function warnOnce(text) {
      if (!warnOnce.shown) warnOnce.shown = {};
      if (!warnOnce.shown[text]) {
        warnOnce.shown[text] = 1;
        if (ENVIRONMENT_IS_NODE) text = 'warning: ' + text;
        err(text);
      }
    }

  function setErrNo(value) {
      HEAP32[((___errno_location())>>2)] = value;
      return value;
    }
  
  var SYSCALLS = {varargs:undefined,get:function() {
        assert(SYSCALLS.varargs != undefined);
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      }};
  function ___syscall_fcntl64(fd, cmd, varargs) {
  SYSCALLS.varargs = varargs;
  
      return 0;
    }

  function ___syscall_ioctl(fd, op, varargs) {
  SYSCALLS.varargs = varargs;
  
      return 0;
    }

  function ___syscall_openat(dirfd, path, flags, varargs) {
  SYSCALLS.varargs = varargs;
  
  abort('it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM');
  }

  function _abort() {
      abort('native code called abort()');
    }

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }

  function getHeapMax() {
      // Stay one Wasm page short of 4GB: while e.g. Chrome is able to allocate
      // full 4GB Wasm memories, the size will wrap back to 0 bytes in Wasm side
      // for any code that deals with heap sizes, which would require special
      // casing all heap size related code to treat 0 specially.
      return 2147483648;
    }
  
  function emscripten_realloc_buffer(size) {
      var b = wasmMemory.buffer;
      try {
        // round size grow request up to wasm page size (fixed 64KB per spec)
        wasmMemory.grow((size - b.byteLength + 65535) >>> 16); // .grow() takes a delta compared to the previous size
        updateMemoryViews();
        return 1 /*success*/;
      } catch(e) {
        err('emscripten_realloc_buffer: Attempted to grow heap from ' + b.byteLength  + ' bytes to ' + size + ' bytes, but got error: ' + e);
      }
      // implicit 0 return to save code size (caller will cast "undefined" into 0
      // anyhow)
    }
  function _emscripten_resize_heap(requestedSize) {
      var oldSize = HEAPU8.length;
      requestedSize = requestedSize >>> 0;
      // With multithreaded builds, races can happen (another thread might increase the size
      // in between), so return a failure, and let the caller retry.
      assert(requestedSize > oldSize);
  
      // Memory resize rules:
      // 1.  Always increase heap size to at least the requested size, rounded up
      //     to next page multiple.
      // 2a. If MEMORY_GROWTH_LINEAR_STEP == -1, excessively resize the heap
      //     geometrically: increase the heap size according to
      //     MEMORY_GROWTH_GEOMETRIC_STEP factor (default +20%), At most
      //     overreserve by MEMORY_GROWTH_GEOMETRIC_CAP bytes (default 96MB).
      // 2b. If MEMORY_GROWTH_LINEAR_STEP != -1, excessively resize the heap
      //     linearly: increase the heap size by at least
      //     MEMORY_GROWTH_LINEAR_STEP bytes.
      // 3.  Max size for the heap is capped at 2048MB-WASM_PAGE_SIZE, or by
      //     MAXIMUM_MEMORY, or by ASAN limit, depending on which is smallest
      // 4.  If we were unable to allocate as much memory, it may be due to
      //     over-eager decision to excessively reserve due to (3) above.
      //     Hence if an allocation fails, cut down on the amount of excess
      //     growth, in an attempt to succeed to perform a smaller allocation.
  
      // A limit is set for how much we can grow. We should not exceed that
      // (the wasm binary specifies it, so if we tried, we'd fail anyhow).
      var maxHeapSize = getHeapMax();
      if (requestedSize > maxHeapSize) {
        err('Cannot enlarge memory, asked to go up to ' + requestedSize + ' bytes, but the limit is ' + maxHeapSize + ' bytes!');
        return false;
      }
  
      let alignUp = (x, multiple) => x + (multiple - x % multiple) % multiple;
  
      // Loop through potential heap size increases. If we attempt a too eager
      // reservation that fails, cut down on the attempted size and reserve a
      // smaller bump instead. (max 3 times, chosen somewhat arbitrarily)
      for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {
        var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown); // ensure geometric growth
        // but limit overreserving (default to capping at +96MB overgrowth at most)
        overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296 );
  
        var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));
  
        var replacement = emscripten_realloc_buffer(newSize);
        if (replacement) {
          err('Warning: Enlarging memory arrays, this is not fast! ' + [oldSize, newSize]);
  
          return true;
        }
      }
      err('Failed to grow the heap from ' + oldSize + ' bytes to ' + newSize + ' bytes, not enough memory!');
      return false;
    }

  function _fd_close(fd) {
      abort('fd_close called without SYSCALLS_REQUIRE_FILESYSTEM');
    }

  function _fd_read(fd, iov, iovcnt, pnum) {
      abort('fd_read called without SYSCALLS_REQUIRE_FILESYSTEM');
    }

  function convertI32PairToI53Checked(lo, hi) {
      assert(lo == (lo >>> 0) || lo == (lo|0)); // lo should either be a i32 or a u32
      assert(hi === (hi|0));                    // hi should be a i32
      return ((hi + 0x200000) >>> 0 < 0x400001 - !!lo) ? (lo >>> 0) + hi * 4294967296 : NaN;
    }
  
  
  
  
  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {
      return 70;
    }

  var printCharBuffers = [null,[],[]];
  function printChar(stream, curr) {
      var buffer = printCharBuffers[stream];
      assert(buffer);
      if (curr === 0 || curr === 10) {
        (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));
        buffer.length = 0;
      } else {
        buffer.push(curr);
      }
    }
  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      _fflush(0);
      if (printCharBuffers[1].length) printChar(1, 10);
      if (printCharBuffers[2].length) printChar(2, 10);
    }
  
  
  function _fd_write(fd, iov, iovcnt, pnum) {
      // hack to support printf in SYSCALLS_REQUIRE_FILESYSTEM=0
      var num = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAPU32[((iov)>>2)];
        var len = HEAPU32[(((iov)+(4))>>2)];
        iov += 8;
        for (var j = 0; j < len; j++) {
          printChar(fd, HEAPU8[ptr+j]);
        }
        num += len;
      }
      HEAPU32[((pnum)>>2)] = num;
      return 0;
    }

  /** @type {function(string, boolean=, number=)} */
  function intArrayFromString(stringy, dontAddNull, length) {
    var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
    var u8array = new Array(len);
    var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
    if (dontAddNull) u8array.length = numBytesWritten;
    return u8array;
  }
// include: base64Utils.js
// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {string} input The string to decode.
 */
var decodeBase64 = typeof atob == 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE == 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf = Buffer.from(s, 'base64');
    return new Uint8Array(buf['buffer'], buf['byteOffset'], buf['byteLength']);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


// end include: base64Utils.js
function checkIncomingModuleAPI() {
  ignoredModuleProp('fetchSettings');
}
var wasmImports = {
  "__syscall_fcntl64": ___syscall_fcntl64,
  "__syscall_ioctl": ___syscall_ioctl,
  "__syscall_openat": ___syscall_openat,
  "abort": _abort,
  "emscripten_memcpy_big": _emscripten_memcpy_big,
  "emscripten_resize_heap": _emscripten_resize_heap,
  "fd_close": _fd_close,
  "fd_read": _fd_read,
  "fd_seek": _fd_seek,
  "fd_write": _fd_write,
  "memory": wasmMemory
};
var asm = createWasm();
/** @type {function(...*):?} */
var ___wasm_call_ctors = createExportWrapper("__wasm_call_ctors");
/** @type {function(...*):?} */
var _emscripten_bind_VoidPtr___destroy___0 = Module["_emscripten_bind_VoidPtr___destroy___0"] = createExportWrapper("emscripten_bind_VoidPtr___destroy___0");
/** @type {function(...*):?} */
var _emscripten_bind_BoolArray_BoolArray_1 = Module["_emscripten_bind_BoolArray_BoolArray_1"] = createExportWrapper("emscripten_bind_BoolArray_BoolArray_1");
/** @type {function(...*):?} */
var _emscripten_bind_BoolArray_resize_1 = Module["_emscripten_bind_BoolArray_resize_1"] = createExportWrapper("emscripten_bind_BoolArray_resize_1");
/** @type {function(...*):?} */
var _emscripten_bind_BoolArray_getValue_1 = Module["_emscripten_bind_BoolArray_getValue_1"] = createExportWrapper("emscripten_bind_BoolArray_getValue_1");
/** @type {function(...*):?} */
var _emscripten_bind_BoolArray_setValue_2 = Module["_emscripten_bind_BoolArray_setValue_2"] = createExportWrapper("emscripten_bind_BoolArray_setValue_2");
/** @type {function(...*):?} */
var _emscripten_bind_BoolArray_getPointer_0 = Module["_emscripten_bind_BoolArray_getPointer_0"] = createExportWrapper("emscripten_bind_BoolArray_getPointer_0");
/** @type {function(...*):?} */
var _emscripten_bind_BoolArray_get_size_0 = Module["_emscripten_bind_BoolArray_get_size_0"] = createExportWrapper("emscripten_bind_BoolArray_get_size_0");
/** @type {function(...*):?} */
var _emscripten_bind_BoolArray_set_size_1 = Module["_emscripten_bind_BoolArray_set_size_1"] = createExportWrapper("emscripten_bind_BoolArray_set_size_1");
/** @type {function(...*):?} */
var _emscripten_bind_BoolArray___destroy___0 = Module["_emscripten_bind_BoolArray___destroy___0"] = createExportWrapper("emscripten_bind_BoolArray___destroy___0");
/** @type {function(...*):?} */
var _emscripten_bind_IntArray_IntArray_1 = Module["_emscripten_bind_IntArray_IntArray_1"] = createExportWrapper("emscripten_bind_IntArray_IntArray_1");
/** @type {function(...*):?} */
var _emscripten_bind_IntArray_resize_1 = Module["_emscripten_bind_IntArray_resize_1"] = createExportWrapper("emscripten_bind_IntArray_resize_1");
/** @type {function(...*):?} */
var _emscripten_bind_IntArray_getValue_1 = Module["_emscripten_bind_IntArray_getValue_1"] = createExportWrapper("emscripten_bind_IntArray_getValue_1");
/** @type {function(...*):?} */
var _emscripten_bind_IntArray_setValue_2 = Module["_emscripten_bind_IntArray_setValue_2"] = createExportWrapper("emscripten_bind_IntArray_setValue_2");
/** @type {function(...*):?} */
var _emscripten_bind_IntArray_getPointer_0 = Module["_emscripten_bind_IntArray_getPointer_0"] = createExportWrapper("emscripten_bind_IntArray_getPointer_0");
/** @type {function(...*):?} */
var _emscripten_bind_IntArray_get_size_0 = Module["_emscripten_bind_IntArray_get_size_0"] = createExportWrapper("emscripten_bind_IntArray_get_size_0");
/** @type {function(...*):?} */
var _emscripten_bind_IntArray_set_size_1 = Module["_emscripten_bind_IntArray_set_size_1"] = createExportWrapper("emscripten_bind_IntArray_set_size_1");
/** @type {function(...*):?} */
var _emscripten_bind_IntArray___destroy___0 = Module["_emscripten_bind_IntArray___destroy___0"] = createExportWrapper("emscripten_bind_IntArray___destroy___0");
/** @type {function(...*):?} */
var _emscripten_bind_FloatArray_FloatArray_1 = Module["_emscripten_bind_FloatArray_FloatArray_1"] = createExportWrapper("emscripten_bind_FloatArray_FloatArray_1");
/** @type {function(...*):?} */
var _emscripten_bind_FloatArray_resize_1 = Module["_emscripten_bind_FloatArray_resize_1"] = createExportWrapper("emscripten_bind_FloatArray_resize_1");
/** @type {function(...*):?} */
var _emscripten_bind_FloatArray_getValue_1 = Module["_emscripten_bind_FloatArray_getValue_1"] = createExportWrapper("emscripten_bind_FloatArray_getValue_1");
/** @type {function(...*):?} */
var _emscripten_bind_FloatArray_setValue_2 = Module["_emscripten_bind_FloatArray_setValue_2"] = createExportWrapper("emscripten_bind_FloatArray_setValue_2");
/** @type {function(...*):?} */
var _emscripten_bind_FloatArray_getPointer_0 = Module["_emscripten_bind_FloatArray_getPointer_0"] = createExportWrapper("emscripten_bind_FloatArray_getPointer_0");
/** @type {function(...*):?} */
var _emscripten_bind_FloatArray_get_size_0 = Module["_emscripten_bind_FloatArray_get_size_0"] = createExportWrapper("emscripten_bind_FloatArray_get_size_0");
/** @type {function(...*):?} */
var _emscripten_bind_FloatArray_set_size_1 = Module["_emscripten_bind_FloatArray_set_size_1"] = createExportWrapper("emscripten_bind_FloatArray_set_size_1");
/** @type {function(...*):?} */
var _emscripten_bind_FloatArray___destroy___0 = Module["_emscripten_bind_FloatArray___destroy___0"] = createExportWrapper("emscripten_bind_FloatArray___destroy___0");
/** @type {function(...*):?} */
var _emscripten_bind_DoubleArray_DoubleArray_1 = Module["_emscripten_bind_DoubleArray_DoubleArray_1"] = createExportWrapper("emscripten_bind_DoubleArray_DoubleArray_1");
/** @type {function(...*):?} */
var _emscripten_bind_DoubleArray_resize_1 = Module["_emscripten_bind_DoubleArray_resize_1"] = createExportWrapper("emscripten_bind_DoubleArray_resize_1");
/** @type {function(...*):?} */
var _emscripten_bind_DoubleArray_getValue_1 = Module["_emscripten_bind_DoubleArray_getValue_1"] = createExportWrapper("emscripten_bind_DoubleArray_getValue_1");
/** @type {function(...*):?} */
var _emscripten_bind_DoubleArray_setValue_2 = Module["_emscripten_bind_DoubleArray_setValue_2"] = createExportWrapper("emscripten_bind_DoubleArray_setValue_2");
/** @type {function(...*):?} */
var _emscripten_bind_DoubleArray_getPointer_0 = Module["_emscripten_bind_DoubleArray_getPointer_0"] = createExportWrapper("emscripten_bind_DoubleArray_getPointer_0");
/** @type {function(...*):?} */
var _emscripten_bind_DoubleArray_get_size_0 = Module["_emscripten_bind_DoubleArray_get_size_0"] = createExportWrapper("emscripten_bind_DoubleArray_get_size_0");
/** @type {function(...*):?} */
var _emscripten_bind_DoubleArray_set_size_1 = Module["_emscripten_bind_DoubleArray_set_size_1"] = createExportWrapper("emscripten_bind_DoubleArray_set_size_1");
/** @type {function(...*):?} */
var _emscripten_bind_DoubleArray___destroy___0 = Module["_emscripten_bind_DoubleArray___destroy___0"] = createExportWrapper("emscripten_bind_DoubleArray___destroy___0");
/** @type {function(...*):?} */
var _emscripten_bind_CharArray_CharArray_1 = Module["_emscripten_bind_CharArray_CharArray_1"] = createExportWrapper("emscripten_bind_CharArray_CharArray_1");
/** @type {function(...*):?} */
var _emscripten_bind_CharArray_resize_1 = Module["_emscripten_bind_CharArray_resize_1"] = createExportWrapper("emscripten_bind_CharArray_resize_1");
/** @type {function(...*):?} */
var _emscripten_bind_CharArray_getValue_1 = Module["_emscripten_bind_CharArray_getValue_1"] = createExportWrapper("emscripten_bind_CharArray_getValue_1");
/** @type {function(...*):?} */
var _emscripten_bind_CharArray_setValue_2 = Module["_emscripten_bind_CharArray_setValue_2"] = createExportWrapper("emscripten_bind_CharArray_setValue_2");
/** @type {function(...*):?} */
var _emscripten_bind_CharArray_getPointer_0 = Module["_emscripten_bind_CharArray_getPointer_0"] = createExportWrapper("emscripten_bind_CharArray_getPointer_0");
/** @type {function(...*):?} */
var _emscripten_bind_CharArray_get_size_0 = Module["_emscripten_bind_CharArray_get_size_0"] = createExportWrapper("emscripten_bind_CharArray_get_size_0");
/** @type {function(...*):?} */
var _emscripten_bind_CharArray_set_size_1 = Module["_emscripten_bind_CharArray_set_size_1"] = createExportWrapper("emscripten_bind_CharArray_set_size_1");
/** @type {function(...*):?} */
var _emscripten_bind_CharArray___destroy___0 = Module["_emscripten_bind_CharArray___destroy___0"] = createExportWrapper("emscripten_bind_CharArray___destroy___0");
/** @type {function(...*):?} */
var _emscripten_bind_ImHelper_memcpyIdx_3 = Module["_emscripten_bind_ImHelper_memcpyIdx_3"] = createExportWrapper("emscripten_bind_ImHelper_memcpyIdx_3");
/** @type {function(...*):?} */
var _emscripten_bind_ImHelper_memcpyVtx_3 = Module["_emscripten_bind_ImHelper_memcpyVtx_3"] = createExportWrapper("emscripten_bind_ImHelper_memcpyVtx_3");
/** @type {function(...*):?} */
var _emscripten_bind_ImHelper_memcpyFont_5 = Module["_emscripten_bind_ImHelper_memcpyFont_5"] = createExportWrapper("emscripten_bind_ImHelper_memcpyFont_5");
/** @type {function(...*):?} */
var _emscripten_bind_ImHelper_getTextureId_1 = Module["_emscripten_bind_ImHelper_getTextureId_1"] = createExportWrapper("emscripten_bind_ImHelper_getTextureId_1");
/** @type {function(...*):?} */
var _emscripten_bind_ImHelper_setIniFilename_2 = Module["_emscripten_bind_ImHelper_setIniFilename_2"] = createExportWrapper("emscripten_bind_ImHelper_setIniFilename_2");
/** @type {function(...*):?} */
var _emscripten_bind_ImHelper_removeIniFilename_1 = Module["_emscripten_bind_ImHelper_removeIniFilename_1"] = createExportWrapper("emscripten_bind_ImHelper_removeIniFilename_1");
/** @type {function(...*):?} */
var _emscripten_bind_ImHelper___destroy___0 = Module["_emscripten_bind_ImHelper___destroy___0"] = createExportWrapper("emscripten_bind_ImHelper___destroy___0");
/** @type {function(...*):?} */
var _emscripten_bind_Im_CreateContext_0 = Module["_emscripten_bind_Im_CreateContext_0"] = createExportWrapper("emscripten_bind_Im_CreateContext_0");
/** @type {function(...*):?} */
var _emscripten_bind_Im_Begin_1 = Module["_emscripten_bind_Im_Begin_1"] = createExportWrapper("emscripten_bind_Im_Begin_1");
/** @type {function(...*):?} */
var _emscripten_bind_Im_End_0 = Module["_emscripten_bind_Im_End_0"] = createExportWrapper("emscripten_bind_Im_End_0");
/** @type {function(...*):?} */
var _emscripten_bind_Im_Render_0 = Module["_emscripten_bind_Im_Render_0"] = createExportWrapper("emscripten_bind_Im_Render_0");
/** @type {function(...*):?} */
var _emscripten_bind_Im_NewFrame_0 = Module["_emscripten_bind_Im_NewFrame_0"] = createExportWrapper("emscripten_bind_Im_NewFrame_0");
/** @type {function(...*):?} */
var _emscripten_bind_Im_GetDrawData_0 = Module["_emscripten_bind_Im_GetDrawData_0"] = createExportWrapper("emscripten_bind_Im_GetDrawData_0");
/** @type {function(...*):?} */
var _emscripten_bind_Im_GetIO_0 = Module["_emscripten_bind_Im_GetIO_0"] = createExportWrapper("emscripten_bind_Im_GetIO_0");
/** @type {function(...*):?} */
var _emscripten_bind_Im_SetNextWindowSize_1 = Module["_emscripten_bind_Im_SetNextWindowSize_1"] = createExportWrapper("emscripten_bind_Im_SetNextWindowSize_1");
/** @type {function(...*):?} */
var _emscripten_bind_Im_SetNextWindowSize_2 = Module["_emscripten_bind_Im_SetNextWindowSize_2"] = createExportWrapper("emscripten_bind_Im_SetNextWindowSize_2");
/** @type {function(...*):?} */
var _emscripten_bind_Im_ShowDemoWindow_0 = Module["_emscripten_bind_Im_ShowDemoWindow_0"] = createExportWrapper("emscripten_bind_Im_ShowDemoWindow_0");
/** @type {function(...*):?} */
var _emscripten_bind_Im_ShowDemoWindow_1 = Module["_emscripten_bind_Im_ShowDemoWindow_1"] = createExportWrapper("emscripten_bind_Im_ShowDemoWindow_1");
/** @type {function(...*):?} */
var _emscripten_bind_Im_Checkbox_2 = Module["_emscripten_bind_Im_Checkbox_2"] = createExportWrapper("emscripten_bind_Im_Checkbox_2");
/** @type {function(...*):?} */
var _emscripten_bind_ImVec2_ImVec2_0 = Module["_emscripten_bind_ImVec2_ImVec2_0"] = createExportWrapper("emscripten_bind_ImVec2_ImVec2_0");
/** @type {function(...*):?} */
var _emscripten_bind_ImVec2_ImVec2_2 = Module["_emscripten_bind_ImVec2_ImVec2_2"] = createExportWrapper("emscripten_bind_ImVec2_ImVec2_2");
/** @type {function(...*):?} */
var _emscripten_bind_ImVec2_get_x_0 = Module["_emscripten_bind_ImVec2_get_x_0"] = createExportWrapper("emscripten_bind_ImVec2_get_x_0");
/** @type {function(...*):?} */
var _emscripten_bind_ImVec2_set_x_1 = Module["_emscripten_bind_ImVec2_set_x_1"] = createExportWrapper("emscripten_bind_ImVec2_set_x_1");
/** @type {function(...*):?} */
var _emscripten_bind_ImVec2_get_y_0 = Module["_emscripten_bind_ImVec2_get_y_0"] = createExportWrapper("emscripten_bind_ImVec2_get_y_0");
/** @type {function(...*):?} */
var _emscripten_bind_ImVec2_set_y_1 = Module["_emscripten_bind_ImVec2_set_y_1"] = createExportWrapper("emscripten_bind_ImVec2_set_y_1");
/** @type {function(...*):?} */
var _emscripten_bind_ImVec2___destroy___0 = Module["_emscripten_bind_ImVec2___destroy___0"] = createExportWrapper("emscripten_bind_ImVec2___destroy___0");
/** @type {function(...*):?} */
var _emscripten_bind_ImVec4_ImVec4_0 = Module["_emscripten_bind_ImVec4_ImVec4_0"] = createExportWrapper("emscripten_bind_ImVec4_ImVec4_0");
/** @type {function(...*):?} */
var _emscripten_bind_ImVec4_ImVec4_4 = Module["_emscripten_bind_ImVec4_ImVec4_4"] = createExportWrapper("emscripten_bind_ImVec4_ImVec4_4");
/** @type {function(...*):?} */
var _emscripten_bind_ImVec4_get_x_0 = Module["_emscripten_bind_ImVec4_get_x_0"] = createExportWrapper("emscripten_bind_ImVec4_get_x_0");
/** @type {function(...*):?} */
var _emscripten_bind_ImVec4_set_x_1 = Module["_emscripten_bind_ImVec4_set_x_1"] = createExportWrapper("emscripten_bind_ImVec4_set_x_1");
/** @type {function(...*):?} */
var _emscripten_bind_ImVec4_get_y_0 = Module["_emscripten_bind_ImVec4_get_y_0"] = createExportWrapper("emscripten_bind_ImVec4_get_y_0");
/** @type {function(...*):?} */
var _emscripten_bind_ImVec4_set_y_1 = Module["_emscripten_bind_ImVec4_set_y_1"] = createExportWrapper("emscripten_bind_ImVec4_set_y_1");
/** @type {function(...*):?} */
var _emscripten_bind_ImVec4_get_z_0 = Module["_emscripten_bind_ImVec4_get_z_0"] = createExportWrapper("emscripten_bind_ImVec4_get_z_0");
/** @type {function(...*):?} */
var _emscripten_bind_ImVec4_set_z_1 = Module["_emscripten_bind_ImVec4_set_z_1"] = createExportWrapper("emscripten_bind_ImVec4_set_z_1");
/** @type {function(...*):?} */
var _emscripten_bind_ImVec4_get_w_0 = Module["_emscripten_bind_ImVec4_get_w_0"] = createExportWrapper("emscripten_bind_ImVec4_get_w_0");
/** @type {function(...*):?} */
var _emscripten_bind_ImVec4_set_w_1 = Module["_emscripten_bind_ImVec4_set_w_1"] = createExportWrapper("emscripten_bind_ImVec4_set_w_1");
/** @type {function(...*):?} */
var _emscripten_bind_ImVec4___destroy___0 = Module["_emscripten_bind_ImVec4___destroy___0"] = createExportWrapper("emscripten_bind_ImVec4___destroy___0");
/** @type {function(...*):?} */
var _emscripten_bind_VecCmdBuffer_size_0 = Module["_emscripten_bind_VecCmdBuffer_size_0"] = createExportWrapper("emscripten_bind_VecCmdBuffer_size_0");
/** @type {function(...*):?} */
var _emscripten_bind_VecCmdBuffer_get_Data_0 = Module["_emscripten_bind_VecCmdBuffer_get_Data_0"] = createExportWrapper("emscripten_bind_VecCmdBuffer_get_Data_0");
/** @type {function(...*):?} */
var _emscripten_bind_VecCmdBuffer_set_Data_1 = Module["_emscripten_bind_VecCmdBuffer_set_Data_1"] = createExportWrapper("emscripten_bind_VecCmdBuffer_set_Data_1");
/** @type {function(...*):?} */
var _emscripten_bind_VecCmdBuffer___destroy___0 = Module["_emscripten_bind_VecCmdBuffer___destroy___0"] = createExportWrapper("emscripten_bind_VecCmdBuffer___destroy___0");
/** @type {function(...*):?} */
var _emscripten_bind_VecIdxBuffer_size_0 = Module["_emscripten_bind_VecIdxBuffer_size_0"] = createExportWrapper("emscripten_bind_VecIdxBuffer_size_0");
/** @type {function(...*):?} */
var _emscripten_bind_VecIdxBuffer_get_Data_1 = Module["_emscripten_bind_VecIdxBuffer_get_Data_1"] = createExportWrapper("emscripten_bind_VecIdxBuffer_get_Data_1");
/** @type {function(...*):?} */
var _emscripten_bind_VecIdxBuffer_set_Data_2 = Module["_emscripten_bind_VecIdxBuffer_set_Data_2"] = createExportWrapper("emscripten_bind_VecIdxBuffer_set_Data_2");
/** @type {function(...*):?} */
var _emscripten_bind_VecIdxBuffer___destroy___0 = Module["_emscripten_bind_VecIdxBuffer___destroy___0"] = createExportWrapper("emscripten_bind_VecIdxBuffer___destroy___0");
/** @type {function(...*):?} */
var _emscripten_bind_VecVtxBuffer_size_0 = Module["_emscripten_bind_VecVtxBuffer_size_0"] = createExportWrapper("emscripten_bind_VecVtxBuffer_size_0");
/** @type {function(...*):?} */
var _emscripten_bind_VecVtxBuffer_get_Data_0 = Module["_emscripten_bind_VecVtxBuffer_get_Data_0"] = createExportWrapper("emscripten_bind_VecVtxBuffer_get_Data_0");
/** @type {function(...*):?} */
var _emscripten_bind_VecVtxBuffer_set_Data_1 = Module["_emscripten_bind_VecVtxBuffer_set_Data_1"] = createExportWrapper("emscripten_bind_VecVtxBuffer_set_Data_1");
/** @type {function(...*):?} */
var _emscripten_bind_VecVtxBuffer___destroy___0 = Module["_emscripten_bind_VecVtxBuffer___destroy___0"] = createExportWrapper("emscripten_bind_VecVtxBuffer___destroy___0");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawCmd_get_ClipRect_0 = Module["_emscripten_bind_ImDrawCmd_get_ClipRect_0"] = createExportWrapper("emscripten_bind_ImDrawCmd_get_ClipRect_0");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawCmd_set_ClipRect_1 = Module["_emscripten_bind_ImDrawCmd_set_ClipRect_1"] = createExportWrapper("emscripten_bind_ImDrawCmd_set_ClipRect_1");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawCmd_get_VtxOffset_0 = Module["_emscripten_bind_ImDrawCmd_get_VtxOffset_0"] = createExportWrapper("emscripten_bind_ImDrawCmd_get_VtxOffset_0");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawCmd_set_VtxOffset_1 = Module["_emscripten_bind_ImDrawCmd_set_VtxOffset_1"] = createExportWrapper("emscripten_bind_ImDrawCmd_set_VtxOffset_1");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawCmd_get_IdxOffset_0 = Module["_emscripten_bind_ImDrawCmd_get_IdxOffset_0"] = createExportWrapper("emscripten_bind_ImDrawCmd_get_IdxOffset_0");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawCmd_set_IdxOffset_1 = Module["_emscripten_bind_ImDrawCmd_set_IdxOffset_1"] = createExportWrapper("emscripten_bind_ImDrawCmd_set_IdxOffset_1");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawCmd_get_ElemCount_0 = Module["_emscripten_bind_ImDrawCmd_get_ElemCount_0"] = createExportWrapper("emscripten_bind_ImDrawCmd_get_ElemCount_0");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawCmd_set_ElemCount_1 = Module["_emscripten_bind_ImDrawCmd_set_ElemCount_1"] = createExportWrapper("emscripten_bind_ImDrawCmd_set_ElemCount_1");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawCmd_get_TextureId_0 = Module["_emscripten_bind_ImDrawCmd_get_TextureId_0"] = createExportWrapper("emscripten_bind_ImDrawCmd_get_TextureId_0");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawCmd_set_TextureId_1 = Module["_emscripten_bind_ImDrawCmd_set_TextureId_1"] = createExportWrapper("emscripten_bind_ImDrawCmd_set_TextureId_1");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawCmd___destroy___0 = Module["_emscripten_bind_ImDrawCmd___destroy___0"] = createExportWrapper("emscripten_bind_ImDrawCmd___destroy___0");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawVert_get_pos_0 = Module["_emscripten_bind_ImDrawVert_get_pos_0"] = createExportWrapper("emscripten_bind_ImDrawVert_get_pos_0");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawVert_set_pos_1 = Module["_emscripten_bind_ImDrawVert_set_pos_1"] = createExportWrapper("emscripten_bind_ImDrawVert_set_pos_1");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawVert_get_uv_0 = Module["_emscripten_bind_ImDrawVert_get_uv_0"] = createExportWrapper("emscripten_bind_ImDrawVert_get_uv_0");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawVert_set_uv_1 = Module["_emscripten_bind_ImDrawVert_set_uv_1"] = createExportWrapper("emscripten_bind_ImDrawVert_set_uv_1");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawVert_get_col_0 = Module["_emscripten_bind_ImDrawVert_get_col_0"] = createExportWrapper("emscripten_bind_ImDrawVert_get_col_0");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawVert_set_col_1 = Module["_emscripten_bind_ImDrawVert_set_col_1"] = createExportWrapper("emscripten_bind_ImDrawVert_set_col_1");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawVert___destroy___0 = Module["_emscripten_bind_ImDrawVert___destroy___0"] = createExportWrapper("emscripten_bind_ImDrawVert___destroy___0");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawData_get_CmdListsCount_0 = Module["_emscripten_bind_ImDrawData_get_CmdListsCount_0"] = createExportWrapper("emscripten_bind_ImDrawData_get_CmdListsCount_0");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawData_set_CmdListsCount_1 = Module["_emscripten_bind_ImDrawData_set_CmdListsCount_1"] = createExportWrapper("emscripten_bind_ImDrawData_set_CmdListsCount_1");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawData_get_TotalIdxCount_0 = Module["_emscripten_bind_ImDrawData_get_TotalIdxCount_0"] = createExportWrapper("emscripten_bind_ImDrawData_get_TotalIdxCount_0");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawData_set_TotalIdxCount_1 = Module["_emscripten_bind_ImDrawData_set_TotalIdxCount_1"] = createExportWrapper("emscripten_bind_ImDrawData_set_TotalIdxCount_1");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawData_get_TotalVtxCount_0 = Module["_emscripten_bind_ImDrawData_get_TotalVtxCount_0"] = createExportWrapper("emscripten_bind_ImDrawData_get_TotalVtxCount_0");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawData_set_TotalVtxCount_1 = Module["_emscripten_bind_ImDrawData_set_TotalVtxCount_1"] = createExportWrapper("emscripten_bind_ImDrawData_set_TotalVtxCount_1");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawData_get_CmdLists_1 = Module["_emscripten_bind_ImDrawData_get_CmdLists_1"] = createExportWrapper("emscripten_bind_ImDrawData_get_CmdLists_1");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawData_set_CmdLists_2 = Module["_emscripten_bind_ImDrawData_set_CmdLists_2"] = createExportWrapper("emscripten_bind_ImDrawData_set_CmdLists_2");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawData_get_DisplayPos_0 = Module["_emscripten_bind_ImDrawData_get_DisplayPos_0"] = createExportWrapper("emscripten_bind_ImDrawData_get_DisplayPos_0");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawData_set_DisplayPos_1 = Module["_emscripten_bind_ImDrawData_set_DisplayPos_1"] = createExportWrapper("emscripten_bind_ImDrawData_set_DisplayPos_1");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawData_get_DisplaySize_0 = Module["_emscripten_bind_ImDrawData_get_DisplaySize_0"] = createExportWrapper("emscripten_bind_ImDrawData_get_DisplaySize_0");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawData_set_DisplaySize_1 = Module["_emscripten_bind_ImDrawData_set_DisplaySize_1"] = createExportWrapper("emscripten_bind_ImDrawData_set_DisplaySize_1");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawData_get_FramebufferScale_0 = Module["_emscripten_bind_ImDrawData_get_FramebufferScale_0"] = createExportWrapper("emscripten_bind_ImDrawData_get_FramebufferScale_0");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawData_set_FramebufferScale_1 = Module["_emscripten_bind_ImDrawData_set_FramebufferScale_1"] = createExportWrapper("emscripten_bind_ImDrawData_set_FramebufferScale_1");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawData___destroy___0 = Module["_emscripten_bind_ImDrawData___destroy___0"] = createExportWrapper("emscripten_bind_ImDrawData___destroy___0");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawList_get_CmdBuffer_0 = Module["_emscripten_bind_ImDrawList_get_CmdBuffer_0"] = createExportWrapper("emscripten_bind_ImDrawList_get_CmdBuffer_0");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawList_set_CmdBuffer_1 = Module["_emscripten_bind_ImDrawList_set_CmdBuffer_1"] = createExportWrapper("emscripten_bind_ImDrawList_set_CmdBuffer_1");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawList_get_IdxBuffer_0 = Module["_emscripten_bind_ImDrawList_get_IdxBuffer_0"] = createExportWrapper("emscripten_bind_ImDrawList_get_IdxBuffer_0");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawList_set_IdxBuffer_1 = Module["_emscripten_bind_ImDrawList_set_IdxBuffer_1"] = createExportWrapper("emscripten_bind_ImDrawList_set_IdxBuffer_1");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawList_get_VtxBuffer_0 = Module["_emscripten_bind_ImDrawList_get_VtxBuffer_0"] = createExportWrapper("emscripten_bind_ImDrawList_get_VtxBuffer_0");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawList_set_VtxBuffer_1 = Module["_emscripten_bind_ImDrawList_set_VtxBuffer_1"] = createExportWrapper("emscripten_bind_ImDrawList_set_VtxBuffer_1");
/** @type {function(...*):?} */
var _emscripten_bind_ImDrawList___destroy___0 = Module["_emscripten_bind_ImDrawList___destroy___0"] = createExportWrapper("emscripten_bind_ImDrawList___destroy___0");
/** @type {function(...*):?} */
var _emscripten_bind_ImGuiIO_AddMouseWheelEvent_2 = Module["_emscripten_bind_ImGuiIO_AddMouseWheelEvent_2"] = createExportWrapper("emscripten_bind_ImGuiIO_AddMouseWheelEvent_2");
/** @type {function(...*):?} */
var _emscripten_bind_ImGuiIO_AddMouseButtonEvent_2 = Module["_emscripten_bind_ImGuiIO_AddMouseButtonEvent_2"] = createExportWrapper("emscripten_bind_ImGuiIO_AddMouseButtonEvent_2");
/** @type {function(...*):?} */
var _emscripten_bind_ImGuiIO_AddMousePosEvent_2 = Module["_emscripten_bind_ImGuiIO_AddMousePosEvent_2"] = createExportWrapper("emscripten_bind_ImGuiIO_AddMousePosEvent_2");
/** @type {function(...*):?} */
var _emscripten_bind_ImGuiIO_AddKeyEvent_2 = Module["_emscripten_bind_ImGuiIO_AddKeyEvent_2"] = createExportWrapper("emscripten_bind_ImGuiIO_AddKeyEvent_2");
/** @type {function(...*):?} */
var _emscripten_bind_ImGuiIO_AddInputCharacter_1 = Module["_emscripten_bind_ImGuiIO_AddInputCharacter_1"] = createExportWrapper("emscripten_bind_ImGuiIO_AddInputCharacter_1");
/** @type {function(...*):?} */
var _emscripten_bind_ImGuiIO_get_WantCaptureMouse_0 = Module["_emscripten_bind_ImGuiIO_get_WantCaptureMouse_0"] = createExportWrapper("emscripten_bind_ImGuiIO_get_WantCaptureMouse_0");
/** @type {function(...*):?} */
var _emscripten_bind_ImGuiIO_set_WantCaptureMouse_1 = Module["_emscripten_bind_ImGuiIO_set_WantCaptureMouse_1"] = createExportWrapper("emscripten_bind_ImGuiIO_set_WantCaptureMouse_1");
/** @type {function(...*):?} */
var _emscripten_bind_ImGuiIO_get_DisplaySize_0 = Module["_emscripten_bind_ImGuiIO_get_DisplaySize_0"] = createExportWrapper("emscripten_bind_ImGuiIO_get_DisplaySize_0");
/** @type {function(...*):?} */
var _emscripten_bind_ImGuiIO_set_DisplaySize_1 = Module["_emscripten_bind_ImGuiIO_set_DisplaySize_1"] = createExportWrapper("emscripten_bind_ImGuiIO_set_DisplaySize_1");
/** @type {function(...*):?} */
var _emscripten_bind_ImGuiIO_get_DisplayFramebufferScale_0 = Module["_emscripten_bind_ImGuiIO_get_DisplayFramebufferScale_0"] = createExportWrapper("emscripten_bind_ImGuiIO_get_DisplayFramebufferScale_0");
/** @type {function(...*):?} */
var _emscripten_bind_ImGuiIO_set_DisplayFramebufferScale_1 = Module["_emscripten_bind_ImGuiIO_set_DisplayFramebufferScale_1"] = createExportWrapper("emscripten_bind_ImGuiIO_set_DisplayFramebufferScale_1");
/** @type {function(...*):?} */
var _emscripten_bind_ImGuiIO_get_DeltaTime_0 = Module["_emscripten_bind_ImGuiIO_get_DeltaTime_0"] = createExportWrapper("emscripten_bind_ImGuiIO_get_DeltaTime_0");
/** @type {function(...*):?} */
var _emscripten_bind_ImGuiIO_set_DeltaTime_1 = Module["_emscripten_bind_ImGuiIO_set_DeltaTime_1"] = createExportWrapper("emscripten_bind_ImGuiIO_set_DeltaTime_1");
/** @type {function(...*):?} */
var _emscripten_bind_ImGuiIO_get_Fonts_0 = Module["_emscripten_bind_ImGuiIO_get_Fonts_0"] = createExportWrapper("emscripten_bind_ImGuiIO_get_Fonts_0");
/** @type {function(...*):?} */
var _emscripten_bind_ImGuiIO_set_Fonts_1 = Module["_emscripten_bind_ImGuiIO_set_Fonts_1"] = createExportWrapper("emscripten_bind_ImGuiIO_set_Fonts_1");
/** @type {function(...*):?} */
var _emscripten_bind_ImGuiIO___destroy___0 = Module["_emscripten_bind_ImGuiIO___destroy___0"] = createExportWrapper("emscripten_bind_ImGuiIO___destroy___0");
/** @type {function(...*):?} */
var _emscripten_bind_ImFontAtlas_get_TexID_0 = Module["_emscripten_bind_ImFontAtlas_get_TexID_0"] = createExportWrapper("emscripten_bind_ImFontAtlas_get_TexID_0");
/** @type {function(...*):?} */
var _emscripten_bind_ImFontAtlas_set_TexID_1 = Module["_emscripten_bind_ImFontAtlas_set_TexID_1"] = createExportWrapper("emscripten_bind_ImFontAtlas_set_TexID_1");
/** @type {function(...*):?} */
var _emscripten_bind_ImFontAtlas___destroy___0 = Module["_emscripten_bind_ImFontAtlas___destroy___0"] = createExportWrapper("emscripten_bind_ImFontAtlas___destroy___0");
/** @type {function(...*):?} */
var _emscripten_enum_ImGuiKey_ImGuiKey_None = Module["_emscripten_enum_ImGuiKey_ImGuiKey_None"] = createExportWrapper("emscripten_enum_ImGuiKey_ImGuiKey_None");
/** @type {function(...*):?} */
var _fflush = Module["_fflush"] = createExportWrapper("fflush");
/** @type {function(...*):?} */
var _malloc = Module["_malloc"] = createExportWrapper("malloc");
/** @type {function(...*):?} */
var _free = Module["_free"] = createExportWrapper("free");
/** @type {function(...*):?} */
var ___errno_location = createExportWrapper("__errno_location");
/** @type {function(...*):?} */
var setTempRet0 = createExportWrapper("setTempRet0");
/** @type {function(...*):?} */
var getTempRet0 = createExportWrapper("getTempRet0");
/** @type {function(...*):?} */
var _emscripten_stack_init = function() {
  return (_emscripten_stack_init = Module["asm"]["emscripten_stack_init"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_free = function() {
  return (_emscripten_stack_get_free = Module["asm"]["emscripten_stack_get_free"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_base = function() {
  return (_emscripten_stack_get_base = Module["asm"]["emscripten_stack_get_base"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_end = function() {
  return (_emscripten_stack_get_end = Module["asm"]["emscripten_stack_get_end"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var stackSave = createExportWrapper("stackSave");
/** @type {function(...*):?} */
var stackRestore = createExportWrapper("stackRestore");
/** @type {function(...*):?} */
var stackAlloc = createExportWrapper("stackAlloc");
/** @type {function(...*):?} */
var _emscripten_stack_get_current = function() {
  return (_emscripten_stack_get_current = Module["asm"]["emscripten_stack_get_current"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var dynCall_jiji = Module["dynCall_jiji"] = createExportWrapper("dynCall_jiji");
var ___start_em_js = Module['___start_em_js'] = 92616;
var ___stop_em_js = Module['___stop_em_js'] = 92714;

// include: postamble.js
// === Auto-generated postamble setup entry stuff ===

Module["UTF8ToString"] = UTF8ToString;
var missingLibrarySymbols = [
  'zeroMemory',
  'stringToNewUTF8',
  'exitJS',
  'inetPton4',
  'inetNtop4',
  'inetPton6',
  'inetNtop6',
  'readSockaddr',
  'writeSockaddr',
  'getHostByName',
  'getRandomDevice',
  'traverseStack',
  'convertPCtoSourceLocation',
  'readEmAsmArgs',
  'jstoi_q',
  'jstoi_s',
  'getExecutableName',
  'listenOnce',
  'autoResumeAudioContext',
  'dynCallLegacy',
  'getDynCaller',
  'dynCall',
  'handleException',
  'runtimeKeepalivePush',
  'runtimeKeepalivePop',
  'callUserCallback',
  'maybeExit',
  'safeSetTimeout',
  'asmjsMangle',
  'asyncLoad',
  'alignMemory',
  'mmapAlloc',
  'handleAllocator',
  'getNativeTypeSize',
  'STACK_SIZE',
  'STACK_ALIGN',
  'POINTER_SIZE',
  'ASSERTIONS',
  'writeI53ToI64',
  'writeI53ToI64Clamped',
  'writeI53ToI64Signaling',
  'writeI53ToU64Clamped',
  'writeI53ToU64Signaling',
  'readI53FromI64',
  'readI53FromU64',
  'convertI32PairToI53',
  'convertU32PairToI53',
  'getCFunc',
  'ccall',
  'cwrap',
  'uleb128Encode',
  'sigToWasmTypes',
  'generateFuncType',
  'convertJsFunctionToWasm',
  'getEmptyTableSlot',
  'updateTableMap',
  'getFunctionAddress',
  'addFunction',
  'removeFunction',
  'reallyNegative',
  'unSign',
  'strLen',
  'reSign',
  'formatString',
  'AsciiToString',
  'stringToAscii',
  'UTF16ToString',
  'stringToUTF16',
  'lengthBytesUTF16',
  'UTF32ToString',
  'stringToUTF32',
  'lengthBytesUTF32',
  'allocateUTF8',
  'allocateUTF8OnStack',
  'writeStringToMemory',
  'writeArrayToMemory',
  'writeAsciiToMemory',
  'getSocketFromFD',
  'getSocketAddress',
  'registerKeyEventCallback',
  'maybeCStringToJsString',
  'findEventTarget',
  'findCanvasEventTarget',
  'getBoundingClientRect',
  'fillMouseEventData',
  'registerMouseEventCallback',
  'registerWheelEventCallback',
  'registerUiEventCallback',
  'registerFocusEventCallback',
  'fillDeviceOrientationEventData',
  'registerDeviceOrientationEventCallback',
  'fillDeviceMotionEventData',
  'registerDeviceMotionEventCallback',
  'screenOrientation',
  'fillOrientationChangeEventData',
  'registerOrientationChangeEventCallback',
  'fillFullscreenChangeEventData',
  'registerFullscreenChangeEventCallback',
  'JSEvents_requestFullscreen',
  'JSEvents_resizeCanvasForFullscreen',
  'registerRestoreOldStyle',
  'hideEverythingExceptGivenElement',
  'restoreHiddenElements',
  'setLetterbox',
  'softFullscreenResizeWebGLRenderTarget',
  'doRequestFullscreen',
  'fillPointerlockChangeEventData',
  'registerPointerlockChangeEventCallback',
  'registerPointerlockErrorEventCallback',
  'requestPointerLock',
  'fillVisibilityChangeEventData',
  'registerVisibilityChangeEventCallback',
  'registerTouchEventCallback',
  'fillGamepadEventData',
  'registerGamepadEventCallback',
  'registerBeforeUnloadEventCallback',
  'fillBatteryEventData',
  'battery',
  'registerBatteryEventCallback',
  'setCanvasElementSize',
  'getCanvasElementSize',
  'demangle',
  'demangleAll',
  'jsStackTrace',
  'stackTrace',
  'getEnvStrings',
  'checkWasiClock',
  'createDyncallWrapper',
  'setImmediateWrapped',
  'clearImmediateWrapped',
  'polyfillSetImmediate',
  'newNativePromise',
  'getPromise',
  'ExceptionInfo',
  'exception_addRef',
  'exception_decRef',
  'setMainLoop',
  'heapObjectForWebGLType',
  'heapAccessShiftForWebGLHeap',
  'emscriptenWebGLGet',
  'computeUnpackAlignedImageSize',
  'emscriptenWebGLGetTexPixelData',
  'emscriptenWebGLGetUniform',
  'webglGetUniformLocation',
  'webglPrepareUniformLocationsBeforeFirstUse',
  'webglGetLeftBracePos',
  'emscriptenWebGLGetVertexAttrib',
  'writeGLArray',
  'SDL_unicode',
  'SDL_ttfContext',
  'SDL_audio',
  'GLFW_Window',
  'runAndAbortIfError',
  'ALLOC_NORMAL',
  'ALLOC_STACK',
  'allocate',
];
missingLibrarySymbols.forEach(missingLibrarySymbol)

var unexportedSymbols = [
  'run',
  'UTF8ArrayToString',
  'stringToUTF8Array',
  'stringToUTF8',
  'lengthBytesUTF8',
  'addOnPreRun',
  'addOnInit',
  'addOnPreMain',
  'addOnExit',
  'addOnPostRun',
  'addRunDependency',
  'removeRunDependency',
  'FS_createFolder',
  'FS_createPath',
  'FS_createDataFile',
  'FS_createPreloadedFile',
  'FS_createLazyFile',
  'FS_createLink',
  'FS_createDevice',
  'FS_unlink',
  'out',
  'err',
  'callMain',
  'abort',
  'keepRuntimeAlive',
  'wasmMemory',
  'stackAlloc',
  'stackSave',
  'stackRestore',
  'getTempRet0',
  'setTempRet0',
  'writeStackCookie',
  'checkStackCookie',
  'intArrayFromBase64',
  'tryParseAsDataURI',
  'ptrToString',
  'getHeapMax',
  'emscripten_realloc_buffer',
  'ENV',
  'ERRNO_CODES',
  'ERRNO_MESSAGES',
  'setErrNo',
  'DNS',
  'Protocols',
  'Sockets',
  'timers',
  'warnOnce',
  'UNWIND_CACHE',
  'readEmAsmArgsArray',
  'convertI32PairToI53Checked',
  'freeTableIndexes',
  'functionsInTableMap',
  'setValue',
  'getValue',
  'PATH',
  'PATH_FS',
  'intArrayFromString',
  'intArrayToString',
  'UTF16Decoder',
  'SYSCALLS',
  'JSEvents',
  'specialHTMLTargets',
  'currentFullscreenStrategy',
  'restoreOldWindowedStyle',
  'ExitStatus',
  'flush_NO_FILESYSTEM',
  'dlopenMissingError',
  'promiseMap',
  'uncaughtExceptionCount',
  'exceptionLast',
  'exceptionCaught',
  'Browser',
  'wget',
  'tempFixedLengthArray',
  'miniTempWebGLFloatBuffers',
  'GL',
  'AL',
  'SDL',
  'SDL_gfx',
  'GLUT',
  'EGL',
  'GLFW',
  'GLEW',
  'IDBStore',
];
unexportedSymbols.forEach(unexportedRuntimeSymbol);



var calledRun;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function stackCheckInit() {
  // This is normally called automatically during __wasm_call_ctors but need to
  // get these values before even running any of the ctors so we call it redundantly
  // here.
  _emscripten_stack_init();
  // TODO(sbc): Move writeStackCookie to native to to avoid this.
  writeStackCookie();
}

/** @type {function(Array=)} */
function run() {

  if (runDependencies > 0) {
    return;
  }

    stackCheckInit();

  preRun();

  // a preRun added a dependency, run will be called later
  if (runDependencies > 0) {
    return;
  }

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    readyPromiseResolve(Module);
    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var oldOut = out;
  var oldErr = err;
  var has = false;
  out = err = (x) => {
    has = true;
  }
  try { // it doesn't matter if it fails
    flush_NO_FILESYSTEM();
  } catch(e) {}
  out = oldOut;
  err = oldErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
    warnOnce('(this may also be due to not including full filesystem support - try building with -sFORCE_FILESYSTEM)');
  }
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

run();


// end include: postamble.js
// include: D:\Dev\Projects\java\jDear-imgui\imgui\imgui-cpp\imgui-cpp\build\emscripten\glue.js

// Bindings utilities

/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
function WrapperObject() {
}
WrapperObject.prototype = Object.create(WrapperObject.prototype);
WrapperObject.prototype.constructor = WrapperObject;
WrapperObject.prototype.__class__ = WrapperObject;
WrapperObject.__cache__ = {};
Module['WrapperObject'] = WrapperObject;

/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant)
    @param {*=} __class__ */
function getCache(__class__) {
  return (__class__ || WrapperObject).__cache__;
}
Module['getCache'] = getCache;

/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant)
    @param {*=} __class__ */
function wrapPointer(ptr, __class__) {
  var cache = getCache(__class__);
  var ret = cache[ptr];
  if (ret) return ret;
  ret = Object.create((__class__ || WrapperObject).prototype);
  ret.ptr = ptr;
  return cache[ptr] = ret;
}
Module['wrapPointer'] = wrapPointer;

/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
function castObject(obj, __class__) {
  return wrapPointer(obj.ptr, __class__);
}
Module['castObject'] = castObject;

Module['NULL'] = wrapPointer(0);

/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
function destroy(obj) {
  if (!obj['__destroy__']) throw 'Error: Cannot destroy object. (Did you create it yourself?)';
  obj['__destroy__']();
  // Remove from cache, so the object can be GC'd and refs added onto it released
  delete getCache(obj.__class__)[obj.ptr];
}
Module['destroy'] = destroy;

/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
function compare(obj1, obj2) {
  return obj1.ptr === obj2.ptr;
}
Module['compare'] = compare;

/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
function getPointer(obj) {
  return obj.ptr;
}
Module['getPointer'] = getPointer;

/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
function getClass(obj) {
  return obj.__class__;
}
Module['getClass'] = getClass;

// Converts big (string or array) values into a C-style storage, in temporary space

/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
var ensureCache = {
  buffer: 0,  // the main buffer of temporary storage
  size: 0,   // the size of buffer
  pos: 0,    // the next free offset in buffer
  temps: [], // extra allocations
  needed: 0, // the total size we need next time

  prepare: function() {
    if (ensureCache.needed) {
      // clear the temps
      for (var i = 0; i < ensureCache.temps.length; i++) {
        Module['_free'](ensureCache.temps[i]);
      }
      ensureCache.temps.length = 0;
      // prepare to allocate a bigger buffer
      Module['_free'](ensureCache.buffer);
      ensureCache.buffer = 0;
      ensureCache.size += ensureCache.needed;
      // clean up
      ensureCache.needed = 0;
    }
    if (!ensureCache.buffer) { // happens first time, or when we need to grow
      ensureCache.size += 128; // heuristic, avoid many small grow events
      ensureCache.buffer = Module['_malloc'](ensureCache.size);
      assert(ensureCache.buffer);
    }
    ensureCache.pos = 0;
  },
  alloc: function(array, view) {
    assert(ensureCache.buffer);
    var bytes = view.BYTES_PER_ELEMENT;
    var len = array.length * bytes;
    len = (len + 7) & -8; // keep things aligned to 8 byte boundaries
    var ret;
    if (ensureCache.pos + len >= ensureCache.size) {
      // we failed to allocate in the buffer, ensureCache time around :(
      assert(len > 0); // null terminator, at least
      ensureCache.needed += len;
      ret = Module['_malloc'](len);
      ensureCache.temps.push(ret);
    } else {
      // we can allocate in the buffer
      ret = ensureCache.buffer + ensureCache.pos;
      ensureCache.pos += len;
    }
    return ret;
  },
  copy: function(array, view, offset) {
    offset >>>= 0;
    var bytes = view.BYTES_PER_ELEMENT;
    switch (bytes) {
      case 2: offset >>>= 1; break;
      case 4: offset >>>= 2; break;
      case 8: offset >>>= 3; break;
    }
    for (var i = 0; i < array.length; i++) {
      view[offset + i] = array[i];
    }
  },
};

/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
function ensureString(value) {
  if (typeof value === 'string') {
    var intArray = intArrayFromString(value);
    var offset = ensureCache.alloc(intArray, HEAP8);
    ensureCache.copy(intArray, HEAP8, offset);
    return offset;
  }
  return value;
}
/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
function ensureInt8(value) {
  if (typeof value === 'object') {
    var offset = ensureCache.alloc(value, HEAP8);
    ensureCache.copy(value, HEAP8, offset);
    return offset;
  }
  return value;
}
/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
function ensureInt16(value) {
  if (typeof value === 'object') {
    var offset = ensureCache.alloc(value, HEAP16);
    ensureCache.copy(value, HEAP16, offset);
    return offset;
  }
  return value;
}
/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
function ensureInt32(value) {
  if (typeof value === 'object') {
    var offset = ensureCache.alloc(value, HEAP32);
    ensureCache.copy(value, HEAP32, offset);
    return offset;
  }
  return value;
}
/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
function ensureFloat32(value) {
  if (typeof value === 'object') {
    var offset = ensureCache.alloc(value, HEAPF32);
    ensureCache.copy(value, HEAPF32, offset);
    return offset;
  }
  return value;
}
/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
function ensureFloat64(value) {
  if (typeof value === 'object') {
    var offset = ensureCache.alloc(value, HEAPF64);
    ensureCache.copy(value, HEAPF64, offset);
    return offset;
  }
  return value;
}

// VoidPtr
/** @suppress {undefinedVars, duplicate} @this{Object} */function VoidPtr() { throw "cannot construct a VoidPtr, no constructor in IDL" }
VoidPtr.prototype = Object.create(WrapperObject.prototype);
VoidPtr.prototype.constructor = VoidPtr;
VoidPtr.prototype.__class__ = VoidPtr;
VoidPtr.__cache__ = {};
Module['VoidPtr'] = VoidPtr;

  VoidPtr.prototype['__destroy__'] = VoidPtr.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_VoidPtr___destroy___0(self);
};
// BoolArray
/** @suppress {undefinedVars, duplicate} @this{Object} */function BoolArray(size) {
  if (size && typeof size === 'object') size = size.ptr;
  this.ptr = _emscripten_bind_BoolArray_BoolArray_1(size);
  getCache(BoolArray)[this.ptr] = this;
};;
BoolArray.prototype = Object.create(WrapperObject.prototype);
BoolArray.prototype.constructor = BoolArray;
BoolArray.prototype.__class__ = BoolArray;
BoolArray.__cache__ = {};
Module['BoolArray'] = BoolArray;

BoolArray.prototype['resize'] = BoolArray.prototype.resize = /** @suppress {undefinedVars, duplicate} @this{Object} */function(size) {
  var self = this.ptr;
  if (size && typeof size === 'object') size = size.ptr;
  _emscripten_bind_BoolArray_resize_1(self, size);
};;

BoolArray.prototype['getValue'] = BoolArray.prototype.getValue = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  return !!(_emscripten_bind_BoolArray_getValue_1(self, index));
};;

BoolArray.prototype['setValue'] = BoolArray.prototype.setValue = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index, value) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  if (value && typeof value === 'object') value = value.ptr;
  _emscripten_bind_BoolArray_setValue_2(self, index, value);
};;

BoolArray.prototype['getPointer'] = BoolArray.prototype.getPointer = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_BoolArray_getPointer_0(self);
};;

  BoolArray.prototype['get_size'] = BoolArray.prototype.get_size = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_BoolArray_get_size_0(self);
};
    BoolArray.prototype['set_size'] = BoolArray.prototype.set_size = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_BoolArray_set_size_1(self, arg0);
};
    Object.defineProperty(BoolArray.prototype, 'size', { get: BoolArray.prototype.get_size, set: BoolArray.prototype.set_size });
  BoolArray.prototype['__destroy__'] = BoolArray.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_BoolArray___destroy___0(self);
};
// IntArray
/** @suppress {undefinedVars, duplicate} @this{Object} */function IntArray(size) {
  if (size && typeof size === 'object') size = size.ptr;
  this.ptr = _emscripten_bind_IntArray_IntArray_1(size);
  getCache(IntArray)[this.ptr] = this;
};;
IntArray.prototype = Object.create(WrapperObject.prototype);
IntArray.prototype.constructor = IntArray;
IntArray.prototype.__class__ = IntArray;
IntArray.__cache__ = {};
Module['IntArray'] = IntArray;

IntArray.prototype['resize'] = IntArray.prototype.resize = /** @suppress {undefinedVars, duplicate} @this{Object} */function(size) {
  var self = this.ptr;
  if (size && typeof size === 'object') size = size.ptr;
  _emscripten_bind_IntArray_resize_1(self, size);
};;

IntArray.prototype['getValue'] = IntArray.prototype.getValue = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  return _emscripten_bind_IntArray_getValue_1(self, index);
};;

IntArray.prototype['setValue'] = IntArray.prototype.setValue = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index, value) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  if (value && typeof value === 'object') value = value.ptr;
  _emscripten_bind_IntArray_setValue_2(self, index, value);
};;

IntArray.prototype['getPointer'] = IntArray.prototype.getPointer = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_IntArray_getPointer_0(self);
};;

  IntArray.prototype['get_size'] = IntArray.prototype.get_size = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_IntArray_get_size_0(self);
};
    IntArray.prototype['set_size'] = IntArray.prototype.set_size = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_IntArray_set_size_1(self, arg0);
};
    Object.defineProperty(IntArray.prototype, 'size', { get: IntArray.prototype.get_size, set: IntArray.prototype.set_size });
  IntArray.prototype['__destroy__'] = IntArray.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_IntArray___destroy___0(self);
};
// FloatArray
/** @suppress {undefinedVars, duplicate} @this{Object} */function FloatArray(size) {
  if (size && typeof size === 'object') size = size.ptr;
  this.ptr = _emscripten_bind_FloatArray_FloatArray_1(size);
  getCache(FloatArray)[this.ptr] = this;
};;
FloatArray.prototype = Object.create(WrapperObject.prototype);
FloatArray.prototype.constructor = FloatArray;
FloatArray.prototype.__class__ = FloatArray;
FloatArray.__cache__ = {};
Module['FloatArray'] = FloatArray;

FloatArray.prototype['resize'] = FloatArray.prototype.resize = /** @suppress {undefinedVars, duplicate} @this{Object} */function(size) {
  var self = this.ptr;
  if (size && typeof size === 'object') size = size.ptr;
  _emscripten_bind_FloatArray_resize_1(self, size);
};;

FloatArray.prototype['getValue'] = FloatArray.prototype.getValue = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  return _emscripten_bind_FloatArray_getValue_1(self, index);
};;

FloatArray.prototype['setValue'] = FloatArray.prototype.setValue = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index, value) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  if (value && typeof value === 'object') value = value.ptr;
  _emscripten_bind_FloatArray_setValue_2(self, index, value);
};;

FloatArray.prototype['getPointer'] = FloatArray.prototype.getPointer = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_FloatArray_getPointer_0(self);
};;

  FloatArray.prototype['get_size'] = FloatArray.prototype.get_size = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_FloatArray_get_size_0(self);
};
    FloatArray.prototype['set_size'] = FloatArray.prototype.set_size = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_FloatArray_set_size_1(self, arg0);
};
    Object.defineProperty(FloatArray.prototype, 'size', { get: FloatArray.prototype.get_size, set: FloatArray.prototype.set_size });
  FloatArray.prototype['__destroy__'] = FloatArray.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_FloatArray___destroy___0(self);
};
// DoubleArray
/** @suppress {undefinedVars, duplicate} @this{Object} */function DoubleArray(size) {
  if (size && typeof size === 'object') size = size.ptr;
  this.ptr = _emscripten_bind_DoubleArray_DoubleArray_1(size);
  getCache(DoubleArray)[this.ptr] = this;
};;
DoubleArray.prototype = Object.create(WrapperObject.prototype);
DoubleArray.prototype.constructor = DoubleArray;
DoubleArray.prototype.__class__ = DoubleArray;
DoubleArray.__cache__ = {};
Module['DoubleArray'] = DoubleArray;

DoubleArray.prototype['resize'] = DoubleArray.prototype.resize = /** @suppress {undefinedVars, duplicate} @this{Object} */function(size) {
  var self = this.ptr;
  if (size && typeof size === 'object') size = size.ptr;
  _emscripten_bind_DoubleArray_resize_1(self, size);
};;

DoubleArray.prototype['getValue'] = DoubleArray.prototype.getValue = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  return _emscripten_bind_DoubleArray_getValue_1(self, index);
};;

DoubleArray.prototype['setValue'] = DoubleArray.prototype.setValue = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index, value) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  if (value && typeof value === 'object') value = value.ptr;
  _emscripten_bind_DoubleArray_setValue_2(self, index, value);
};;

DoubleArray.prototype['getPointer'] = DoubleArray.prototype.getPointer = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_DoubleArray_getPointer_0(self);
};;

  DoubleArray.prototype['get_size'] = DoubleArray.prototype.get_size = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_DoubleArray_get_size_0(self);
};
    DoubleArray.prototype['set_size'] = DoubleArray.prototype.set_size = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_DoubleArray_set_size_1(self, arg0);
};
    Object.defineProperty(DoubleArray.prototype, 'size', { get: DoubleArray.prototype.get_size, set: DoubleArray.prototype.set_size });
  DoubleArray.prototype['__destroy__'] = DoubleArray.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_DoubleArray___destroy___0(self);
};
// CharArray
/** @suppress {undefinedVars, duplicate} @this{Object} */function CharArray(size) {
  if (size && typeof size === 'object') size = size.ptr;
  this.ptr = _emscripten_bind_CharArray_CharArray_1(size);
  getCache(CharArray)[this.ptr] = this;
};;
CharArray.prototype = Object.create(WrapperObject.prototype);
CharArray.prototype.constructor = CharArray;
CharArray.prototype.__class__ = CharArray;
CharArray.__cache__ = {};
Module['CharArray'] = CharArray;

CharArray.prototype['resize'] = CharArray.prototype.resize = /** @suppress {undefinedVars, duplicate} @this{Object} */function(size) {
  var self = this.ptr;
  if (size && typeof size === 'object') size = size.ptr;
  _emscripten_bind_CharArray_resize_1(self, size);
};;

CharArray.prototype['getValue'] = CharArray.prototype.getValue = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  return _emscripten_bind_CharArray_getValue_1(self, index);
};;

CharArray.prototype['setValue'] = CharArray.prototype.setValue = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index, value) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  if (value && typeof value === 'object') value = value.ptr;
  _emscripten_bind_CharArray_setValue_2(self, index, value);
};;

CharArray.prototype['getPointer'] = CharArray.prototype.getPointer = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_CharArray_getPointer_0(self);
};;

  CharArray.prototype['get_size'] = CharArray.prototype.get_size = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_CharArray_get_size_0(self);
};
    CharArray.prototype['set_size'] = CharArray.prototype.set_size = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_CharArray_set_size_1(self, arg0);
};
    Object.defineProperty(CharArray.prototype, 'size', { get: CharArray.prototype.get_size, set: CharArray.prototype.set_size });
  CharArray.prototype['__destroy__'] = CharArray.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_CharArray___destroy___0(self);
};
// ImHelper
/** @suppress {undefinedVars, duplicate} @this{Object} */function ImHelper() { throw "cannot construct a ImHelper, no constructor in IDL" }
ImHelper.prototype = Object.create(WrapperObject.prototype);
ImHelper.prototype.constructor = ImHelper;
ImHelper.prototype.__class__ = ImHelper;
ImHelper.__cache__ = {};
Module['ImHelper'] = ImHelper;

ImHelper.prototype['memcpyIdx'] = ImHelper.prototype.memcpyIdx = /** @suppress {undefinedVars, duplicate} @this{Object} */function(destination, drawList, num) {
  var self = this.ptr;
  if (destination && typeof destination === 'object') destination = destination.ptr;
  if (drawList && typeof drawList === 'object') drawList = drawList.ptr;
  if (num && typeof num === 'object') num = num.ptr;
  _emscripten_bind_ImHelper_memcpyIdx_3(self, destination, drawList, num);
};;

ImHelper.prototype['memcpyVtx'] = ImHelper.prototype.memcpyVtx = /** @suppress {undefinedVars, duplicate} @this{Object} */function(destination, drawList, num) {
  var self = this.ptr;
  if (destination && typeof destination === 'object') destination = destination.ptr;
  if (drawList && typeof drawList === 'object') drawList = drawList.ptr;
  if (num && typeof num === 'object') num = num.ptr;
  _emscripten_bind_ImHelper_memcpyVtx_3(self, destination, drawList, num);
};;

ImHelper.prototype['memcpyFont'] = ImHelper.prototype.memcpyFont = /** @suppress {undefinedVars, duplicate} @this{Object} */function(io, pixelBuffer, widthData, heightData, bytesPerPixel) {
  var self = this.ptr;
  ensureCache.prepare();
  if (io && typeof io === 'object') io = io.ptr;
  if (pixelBuffer && typeof pixelBuffer === 'object') pixelBuffer = pixelBuffer.ptr;
  if (typeof widthData == 'object') { widthData = ensureInt32(widthData); }
  if (typeof heightData == 'object') { heightData = ensureInt32(heightData); }
  if (typeof bytesPerPixel == 'object') { bytesPerPixel = ensureInt32(bytesPerPixel); }
  _emscripten_bind_ImHelper_memcpyFont_5(self, io, pixelBuffer, widthData, heightData, bytesPerPixel);
};;

ImHelper.prototype['getTextureId'] = ImHelper.prototype.getTextureId = /** @suppress {undefinedVars, duplicate} @this{Object} */function(imDrawCmd) {
  var self = this.ptr;
  if (imDrawCmd && typeof imDrawCmd === 'object') imDrawCmd = imDrawCmd.ptr;
  return _emscripten_bind_ImHelper_getTextureId_1(self, imDrawCmd);
};;

ImHelper.prototype['setIniFilename'] = ImHelper.prototype.setIniFilename = /** @suppress {undefinedVars, duplicate} @this{Object} */function(io, fileName) {
  var self = this.ptr;
  ensureCache.prepare();
  if (io && typeof io === 'object') io = io.ptr;
  if (typeof fileName == 'object') { fileName = ensureInt8(fileName); }
  _emscripten_bind_ImHelper_setIniFilename_2(self, io, fileName);
};;

ImHelper.prototype['removeIniFilename'] = ImHelper.prototype.removeIniFilename = /** @suppress {undefinedVars, duplicate} @this{Object} */function(io) {
  var self = this.ptr;
  if (io && typeof io === 'object') io = io.ptr;
  _emscripten_bind_ImHelper_removeIniFilename_1(self, io);
};;

  ImHelper.prototype['__destroy__'] = ImHelper.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_ImHelper___destroy___0(self);
};
// Im
/** @suppress {undefinedVars, duplicate} @this{Object} */function Im() { throw "cannot construct a Im, no constructor in IDL" }
Im.prototype = Object.create(WrapperObject.prototype);
Im.prototype.constructor = Im;
Im.prototype.__class__ = Im;
Im.__cache__ = {};
Module['Im'] = Im;

Im.prototype['CreateContext'] = Im.prototype.CreateContext = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_Im_CreateContext_0(self), ImGuiContext);
};;

Im.prototype['Begin'] = Im.prototype.Begin = /** @suppress {undefinedVars, duplicate} @this{Object} */function(name) {
  var self = this.ptr;
  ensureCache.prepare();
  if (name && typeof name === 'object') name = name.ptr;
  else name = ensureString(name);
  return !!(_emscripten_bind_Im_Begin_1(self, name));
};;

Im.prototype['End'] = Im.prototype.End = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_Im_End_0(self);
};;

Im.prototype['Render'] = Im.prototype.Render = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_Im_Render_0(self);
};;

Im.prototype['NewFrame'] = Im.prototype.NewFrame = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_Im_NewFrame_0(self);
};;

Im.prototype['GetDrawData'] = Im.prototype.GetDrawData = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_Im_GetDrawData_0(self), ImDrawData);
};;

Im.prototype['GetIO'] = Im.prototype.GetIO = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_Im_GetIO_0(self), ImGuiIO);
};;

Im.prototype['SetNextWindowSize'] = Im.prototype.SetNextWindowSize = /** @suppress {undefinedVars, duplicate} @this{Object} */function(size, cond) {
  var self = this.ptr;
  if (size && typeof size === 'object') size = size.ptr;
  if (cond && typeof cond === 'object') cond = cond.ptr;
  if (cond === undefined) { _emscripten_bind_Im_SetNextWindowSize_1(self, size);  return }
  _emscripten_bind_Im_SetNextWindowSize_2(self, size, cond);
};;

Im.prototype['ShowDemoWindow'] = Im.prototype.ShowDemoWindow = /** @suppress {undefinedVars, duplicate} @this{Object} */function(p_open) {
  var self = this.ptr;
  ensureCache.prepare();
  if (p_open === undefined) { _emscripten_bind_Im_ShowDemoWindow_0(self);  return }
  _emscripten_bind_Im_ShowDemoWindow_1(self, p_open);
};;

Im.prototype['Checkbox'] = Im.prototype.Checkbox = /** @suppress {undefinedVars, duplicate} @this{Object} */function(label, v) {
  var self = this.ptr;
  ensureCache.prepare();
  if (label && typeof label === 'object') label = label.ptr;
  else label = ensureString(label);
  return !!(_emscripten_bind_Im_Checkbox_2(self, label, v));
};;

// ImVec2
/** @suppress {undefinedVars, duplicate} @this{Object} */function ImVec2(x, y) {
  if (x && typeof x === 'object') x = x.ptr;
  if (y && typeof y === 'object') y = y.ptr;
  if (x === undefined) { this.ptr = _emscripten_bind_ImVec2_ImVec2_0(); getCache(ImVec2)[this.ptr] = this;return }
  if (y === undefined) { this.ptr = _emscripten_bind_ImVec2_ImVec2_1(x); getCache(ImVec2)[this.ptr] = this;return }
  this.ptr = _emscripten_bind_ImVec2_ImVec2_2(x, y);
  getCache(ImVec2)[this.ptr] = this;
};;
ImVec2.prototype = Object.create(WrapperObject.prototype);
ImVec2.prototype.constructor = ImVec2;
ImVec2.prototype.__class__ = ImVec2;
ImVec2.__cache__ = {};
Module['ImVec2'] = ImVec2;

  ImVec2.prototype['get_x'] = ImVec2.prototype.get_x = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_ImVec2_get_x_0(self);
};
    ImVec2.prototype['set_x'] = ImVec2.prototype.set_x = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_ImVec2_set_x_1(self, arg0);
};
    Object.defineProperty(ImVec2.prototype, 'x', { get: ImVec2.prototype.get_x, set: ImVec2.prototype.set_x });
  ImVec2.prototype['get_y'] = ImVec2.prototype.get_y = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_ImVec2_get_y_0(self);
};
    ImVec2.prototype['set_y'] = ImVec2.prototype.set_y = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_ImVec2_set_y_1(self, arg0);
};
    Object.defineProperty(ImVec2.prototype, 'y', { get: ImVec2.prototype.get_y, set: ImVec2.prototype.set_y });
  ImVec2.prototype['__destroy__'] = ImVec2.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_ImVec2___destroy___0(self);
};
// ImVec4
/** @suppress {undefinedVars, duplicate} @this{Object} */function ImVec4(x, y, z, w) {
  if (x && typeof x === 'object') x = x.ptr;
  if (y && typeof y === 'object') y = y.ptr;
  if (z && typeof z === 'object') z = z.ptr;
  if (w && typeof w === 'object') w = w.ptr;
  if (x === undefined) { this.ptr = _emscripten_bind_ImVec4_ImVec4_0(); getCache(ImVec4)[this.ptr] = this;return }
  if (y === undefined) { this.ptr = _emscripten_bind_ImVec4_ImVec4_1(x); getCache(ImVec4)[this.ptr] = this;return }
  if (z === undefined) { this.ptr = _emscripten_bind_ImVec4_ImVec4_2(x, y); getCache(ImVec4)[this.ptr] = this;return }
  if (w === undefined) { this.ptr = _emscripten_bind_ImVec4_ImVec4_3(x, y, z); getCache(ImVec4)[this.ptr] = this;return }
  this.ptr = _emscripten_bind_ImVec4_ImVec4_4(x, y, z, w);
  getCache(ImVec4)[this.ptr] = this;
};;
ImVec4.prototype = Object.create(WrapperObject.prototype);
ImVec4.prototype.constructor = ImVec4;
ImVec4.prototype.__class__ = ImVec4;
ImVec4.__cache__ = {};
Module['ImVec4'] = ImVec4;

  ImVec4.prototype['get_x'] = ImVec4.prototype.get_x = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_ImVec4_get_x_0(self);
};
    ImVec4.prototype['set_x'] = ImVec4.prototype.set_x = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_ImVec4_set_x_1(self, arg0);
};
    Object.defineProperty(ImVec4.prototype, 'x', { get: ImVec4.prototype.get_x, set: ImVec4.prototype.set_x });
  ImVec4.prototype['get_y'] = ImVec4.prototype.get_y = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_ImVec4_get_y_0(self);
};
    ImVec4.prototype['set_y'] = ImVec4.prototype.set_y = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_ImVec4_set_y_1(self, arg0);
};
    Object.defineProperty(ImVec4.prototype, 'y', { get: ImVec4.prototype.get_y, set: ImVec4.prototype.set_y });
  ImVec4.prototype['get_z'] = ImVec4.prototype.get_z = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_ImVec4_get_z_0(self);
};
    ImVec4.prototype['set_z'] = ImVec4.prototype.set_z = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_ImVec4_set_z_1(self, arg0);
};
    Object.defineProperty(ImVec4.prototype, 'z', { get: ImVec4.prototype.get_z, set: ImVec4.prototype.set_z });
  ImVec4.prototype['get_w'] = ImVec4.prototype.get_w = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_ImVec4_get_w_0(self);
};
    ImVec4.prototype['set_w'] = ImVec4.prototype.set_w = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_ImVec4_set_w_1(self, arg0);
};
    Object.defineProperty(ImVec4.prototype, 'w', { get: ImVec4.prototype.get_w, set: ImVec4.prototype.set_w });
  ImVec4.prototype['__destroy__'] = ImVec4.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_ImVec4___destroy___0(self);
};
// VecCmdBuffer
/** @suppress {undefinedVars, duplicate} @this{Object} */function VecCmdBuffer() { throw "cannot construct a VecCmdBuffer, no constructor in IDL" }
VecCmdBuffer.prototype = Object.create(WrapperObject.prototype);
VecCmdBuffer.prototype.constructor = VecCmdBuffer;
VecCmdBuffer.prototype.__class__ = VecCmdBuffer;
VecCmdBuffer.__cache__ = {};
Module['VecCmdBuffer'] = VecCmdBuffer;

VecCmdBuffer.prototype['size'] = VecCmdBuffer.prototype.size = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_VecCmdBuffer_size_0(self);
};;

  VecCmdBuffer.prototype['get_Data'] = VecCmdBuffer.prototype.get_Data = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_VecCmdBuffer_get_Data_0(self), ImDrawCmd);
};
    VecCmdBuffer.prototype['set_Data'] = VecCmdBuffer.prototype.set_Data = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_VecCmdBuffer_set_Data_1(self, arg0);
};
    Object.defineProperty(VecCmdBuffer.prototype, 'Data', { get: VecCmdBuffer.prototype.get_Data, set: VecCmdBuffer.prototype.set_Data });
  VecCmdBuffer.prototype['__destroy__'] = VecCmdBuffer.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_VecCmdBuffer___destroy___0(self);
};
// VecIdxBuffer
/** @suppress {undefinedVars, duplicate} @this{Object} */function VecIdxBuffer() { throw "cannot construct a VecIdxBuffer, no constructor in IDL" }
VecIdxBuffer.prototype = Object.create(WrapperObject.prototype);
VecIdxBuffer.prototype.constructor = VecIdxBuffer;
VecIdxBuffer.prototype.__class__ = VecIdxBuffer;
VecIdxBuffer.__cache__ = {};
Module['VecIdxBuffer'] = VecIdxBuffer;

VecIdxBuffer.prototype['size'] = VecIdxBuffer.prototype.size = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_VecIdxBuffer_size_0(self);
};;

  VecIdxBuffer.prototype['get_Data'] = VecIdxBuffer.prototype.get_Data = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  return _emscripten_bind_VecIdxBuffer_get_Data_1(self, arg0);
};
    VecIdxBuffer.prototype['set_Data'] = VecIdxBuffer.prototype.set_Data = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0, arg1) {
  var self = this.ptr;
  ensureCache.prepare();
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  _emscripten_bind_VecIdxBuffer_set_Data_2(self, arg0, arg1);
};
    Object.defineProperty(VecIdxBuffer.prototype, 'Data', { get: VecIdxBuffer.prototype.get_Data, set: VecIdxBuffer.prototype.set_Data });
  VecIdxBuffer.prototype['__destroy__'] = VecIdxBuffer.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_VecIdxBuffer___destroy___0(self);
};
// VecVtxBuffer
/** @suppress {undefinedVars, duplicate} @this{Object} */function VecVtxBuffer() { throw "cannot construct a VecVtxBuffer, no constructor in IDL" }
VecVtxBuffer.prototype = Object.create(WrapperObject.prototype);
VecVtxBuffer.prototype.constructor = VecVtxBuffer;
VecVtxBuffer.prototype.__class__ = VecVtxBuffer;
VecVtxBuffer.__cache__ = {};
Module['VecVtxBuffer'] = VecVtxBuffer;

VecVtxBuffer.prototype['size'] = VecVtxBuffer.prototype.size = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_VecVtxBuffer_size_0(self);
};;

  VecVtxBuffer.prototype['get_Data'] = VecVtxBuffer.prototype.get_Data = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_VecVtxBuffer_get_Data_0(self), ImDrawVert);
};
    VecVtxBuffer.prototype['set_Data'] = VecVtxBuffer.prototype.set_Data = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_VecVtxBuffer_set_Data_1(self, arg0);
};
    Object.defineProperty(VecVtxBuffer.prototype, 'Data', { get: VecVtxBuffer.prototype.get_Data, set: VecVtxBuffer.prototype.set_Data });
  VecVtxBuffer.prototype['__destroy__'] = VecVtxBuffer.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_VecVtxBuffer___destroy___0(self);
};
// ImDrawCmd
/** @suppress {undefinedVars, duplicate} @this{Object} */function ImDrawCmd() { throw "cannot construct a ImDrawCmd, no constructor in IDL" }
ImDrawCmd.prototype = Object.create(WrapperObject.prototype);
ImDrawCmd.prototype.constructor = ImDrawCmd;
ImDrawCmd.prototype.__class__ = ImDrawCmd;
ImDrawCmd.__cache__ = {};
Module['ImDrawCmd'] = ImDrawCmd;

  ImDrawCmd.prototype['get_ClipRect'] = ImDrawCmd.prototype.get_ClipRect = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_ImDrawCmd_get_ClipRect_0(self), ImVec4);
};
    ImDrawCmd.prototype['set_ClipRect'] = ImDrawCmd.prototype.set_ClipRect = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_ImDrawCmd_set_ClipRect_1(self, arg0);
};
    Object.defineProperty(ImDrawCmd.prototype, 'ClipRect', { get: ImDrawCmd.prototype.get_ClipRect, set: ImDrawCmd.prototype.set_ClipRect });
  ImDrawCmd.prototype['get_VtxOffset'] = ImDrawCmd.prototype.get_VtxOffset = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_ImDrawCmd_get_VtxOffset_0(self);
};
    ImDrawCmd.prototype['set_VtxOffset'] = ImDrawCmd.prototype.set_VtxOffset = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_ImDrawCmd_set_VtxOffset_1(self, arg0);
};
    Object.defineProperty(ImDrawCmd.prototype, 'VtxOffset', { get: ImDrawCmd.prototype.get_VtxOffset, set: ImDrawCmd.prototype.set_VtxOffset });
  ImDrawCmd.prototype['get_IdxOffset'] = ImDrawCmd.prototype.get_IdxOffset = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_ImDrawCmd_get_IdxOffset_0(self);
};
    ImDrawCmd.prototype['set_IdxOffset'] = ImDrawCmd.prototype.set_IdxOffset = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_ImDrawCmd_set_IdxOffset_1(self, arg0);
};
    Object.defineProperty(ImDrawCmd.prototype, 'IdxOffset', { get: ImDrawCmd.prototype.get_IdxOffset, set: ImDrawCmd.prototype.set_IdxOffset });
  ImDrawCmd.prototype['get_ElemCount'] = ImDrawCmd.prototype.get_ElemCount = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_ImDrawCmd_get_ElemCount_0(self);
};
    ImDrawCmd.prototype['set_ElemCount'] = ImDrawCmd.prototype.set_ElemCount = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_ImDrawCmd_set_ElemCount_1(self, arg0);
};
    Object.defineProperty(ImDrawCmd.prototype, 'ElemCount', { get: ImDrawCmd.prototype.get_ElemCount, set: ImDrawCmd.prototype.set_ElemCount });
  ImDrawCmd.prototype['get_TextureId'] = ImDrawCmd.prototype.get_TextureId = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_ImDrawCmd_get_TextureId_0(self);
};
    ImDrawCmd.prototype['set_TextureId'] = ImDrawCmd.prototype.set_TextureId = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_ImDrawCmd_set_TextureId_1(self, arg0);
};
    Object.defineProperty(ImDrawCmd.prototype, 'TextureId', { get: ImDrawCmd.prototype.get_TextureId, set: ImDrawCmd.prototype.set_TextureId });
  ImDrawCmd.prototype['__destroy__'] = ImDrawCmd.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_ImDrawCmd___destroy___0(self);
};
// ImDrawVert
/** @suppress {undefinedVars, duplicate} @this{Object} */function ImDrawVert() { throw "cannot construct a ImDrawVert, no constructor in IDL" }
ImDrawVert.prototype = Object.create(WrapperObject.prototype);
ImDrawVert.prototype.constructor = ImDrawVert;
ImDrawVert.prototype.__class__ = ImDrawVert;
ImDrawVert.__cache__ = {};
Module['ImDrawVert'] = ImDrawVert;

  ImDrawVert.prototype['get_pos'] = ImDrawVert.prototype.get_pos = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_ImDrawVert_get_pos_0(self), ImVec2);
};
    ImDrawVert.prototype['set_pos'] = ImDrawVert.prototype.set_pos = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_ImDrawVert_set_pos_1(self, arg0);
};
    Object.defineProperty(ImDrawVert.prototype, 'pos', { get: ImDrawVert.prototype.get_pos, set: ImDrawVert.prototype.set_pos });
  ImDrawVert.prototype['get_uv'] = ImDrawVert.prototype.get_uv = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_ImDrawVert_get_uv_0(self), ImVec2);
};
    ImDrawVert.prototype['set_uv'] = ImDrawVert.prototype.set_uv = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_ImDrawVert_set_uv_1(self, arg0);
};
    Object.defineProperty(ImDrawVert.prototype, 'uv', { get: ImDrawVert.prototype.get_uv, set: ImDrawVert.prototype.set_uv });
  ImDrawVert.prototype['get_col'] = ImDrawVert.prototype.get_col = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_ImDrawVert_get_col_0(self);
};
    ImDrawVert.prototype['set_col'] = ImDrawVert.prototype.set_col = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_ImDrawVert_set_col_1(self, arg0);
};
    Object.defineProperty(ImDrawVert.prototype, 'col', { get: ImDrawVert.prototype.get_col, set: ImDrawVert.prototype.set_col });
  ImDrawVert.prototype['__destroy__'] = ImDrawVert.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_ImDrawVert___destroy___0(self);
};
// ImDrawData
/** @suppress {undefinedVars, duplicate} @this{Object} */function ImDrawData() { throw "cannot construct a ImDrawData, no constructor in IDL" }
ImDrawData.prototype = Object.create(WrapperObject.prototype);
ImDrawData.prototype.constructor = ImDrawData;
ImDrawData.prototype.__class__ = ImDrawData;
ImDrawData.__cache__ = {};
Module['ImDrawData'] = ImDrawData;

  ImDrawData.prototype['get_CmdListsCount'] = ImDrawData.prototype.get_CmdListsCount = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_ImDrawData_get_CmdListsCount_0(self);
};
    ImDrawData.prototype['set_CmdListsCount'] = ImDrawData.prototype.set_CmdListsCount = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_ImDrawData_set_CmdListsCount_1(self, arg0);
};
    Object.defineProperty(ImDrawData.prototype, 'CmdListsCount', { get: ImDrawData.prototype.get_CmdListsCount, set: ImDrawData.prototype.set_CmdListsCount });
  ImDrawData.prototype['get_TotalIdxCount'] = ImDrawData.prototype.get_TotalIdxCount = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_ImDrawData_get_TotalIdxCount_0(self);
};
    ImDrawData.prototype['set_TotalIdxCount'] = ImDrawData.prototype.set_TotalIdxCount = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_ImDrawData_set_TotalIdxCount_1(self, arg0);
};
    Object.defineProperty(ImDrawData.prototype, 'TotalIdxCount', { get: ImDrawData.prototype.get_TotalIdxCount, set: ImDrawData.prototype.set_TotalIdxCount });
  ImDrawData.prototype['get_TotalVtxCount'] = ImDrawData.prototype.get_TotalVtxCount = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_ImDrawData_get_TotalVtxCount_0(self);
};
    ImDrawData.prototype['set_TotalVtxCount'] = ImDrawData.prototype.set_TotalVtxCount = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_ImDrawData_set_TotalVtxCount_1(self, arg0);
};
    Object.defineProperty(ImDrawData.prototype, 'TotalVtxCount', { get: ImDrawData.prototype.get_TotalVtxCount, set: ImDrawData.prototype.set_TotalVtxCount });
  ImDrawData.prototype['get_CmdLists'] = ImDrawData.prototype.get_CmdLists = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  return wrapPointer(_emscripten_bind_ImDrawData_get_CmdLists_1(self, arg0), ImDrawList);
};
    ImDrawData.prototype['set_CmdLists'] = ImDrawData.prototype.set_CmdLists = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0, arg1) {
  var self = this.ptr;
  ensureCache.prepare();
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  _emscripten_bind_ImDrawData_set_CmdLists_2(self, arg0, arg1);
};
    Object.defineProperty(ImDrawData.prototype, 'CmdLists', { get: ImDrawData.prototype.get_CmdLists, set: ImDrawData.prototype.set_CmdLists });
  ImDrawData.prototype['get_DisplayPos'] = ImDrawData.prototype.get_DisplayPos = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_ImDrawData_get_DisplayPos_0(self), ImVec2);
};
    ImDrawData.prototype['set_DisplayPos'] = ImDrawData.prototype.set_DisplayPos = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_ImDrawData_set_DisplayPos_1(self, arg0);
};
    Object.defineProperty(ImDrawData.prototype, 'DisplayPos', { get: ImDrawData.prototype.get_DisplayPos, set: ImDrawData.prototype.set_DisplayPos });
  ImDrawData.prototype['get_DisplaySize'] = ImDrawData.prototype.get_DisplaySize = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_ImDrawData_get_DisplaySize_0(self), ImVec2);
};
    ImDrawData.prototype['set_DisplaySize'] = ImDrawData.prototype.set_DisplaySize = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_ImDrawData_set_DisplaySize_1(self, arg0);
};
    Object.defineProperty(ImDrawData.prototype, 'DisplaySize', { get: ImDrawData.prototype.get_DisplaySize, set: ImDrawData.prototype.set_DisplaySize });
  ImDrawData.prototype['get_FramebufferScale'] = ImDrawData.prototype.get_FramebufferScale = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_ImDrawData_get_FramebufferScale_0(self), ImVec2);
};
    ImDrawData.prototype['set_FramebufferScale'] = ImDrawData.prototype.set_FramebufferScale = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_ImDrawData_set_FramebufferScale_1(self, arg0);
};
    Object.defineProperty(ImDrawData.prototype, 'FramebufferScale', { get: ImDrawData.prototype.get_FramebufferScale, set: ImDrawData.prototype.set_FramebufferScale });
  ImDrawData.prototype['__destroy__'] = ImDrawData.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_ImDrawData___destroy___0(self);
};
// ImDrawList
/** @suppress {undefinedVars, duplicate} @this{Object} */function ImDrawList() { throw "cannot construct a ImDrawList, no constructor in IDL" }
ImDrawList.prototype = Object.create(WrapperObject.prototype);
ImDrawList.prototype.constructor = ImDrawList;
ImDrawList.prototype.__class__ = ImDrawList;
ImDrawList.__cache__ = {};
Module['ImDrawList'] = ImDrawList;

  ImDrawList.prototype['get_CmdBuffer'] = ImDrawList.prototype.get_CmdBuffer = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_ImDrawList_get_CmdBuffer_0(self), VecCmdBuffer);
};
    ImDrawList.prototype['set_CmdBuffer'] = ImDrawList.prototype.set_CmdBuffer = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_ImDrawList_set_CmdBuffer_1(self, arg0);
};
    Object.defineProperty(ImDrawList.prototype, 'CmdBuffer', { get: ImDrawList.prototype.get_CmdBuffer, set: ImDrawList.prototype.set_CmdBuffer });
  ImDrawList.prototype['get_IdxBuffer'] = ImDrawList.prototype.get_IdxBuffer = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_ImDrawList_get_IdxBuffer_0(self), VecIdxBuffer);
};
    ImDrawList.prototype['set_IdxBuffer'] = ImDrawList.prototype.set_IdxBuffer = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_ImDrawList_set_IdxBuffer_1(self, arg0);
};
    Object.defineProperty(ImDrawList.prototype, 'IdxBuffer', { get: ImDrawList.prototype.get_IdxBuffer, set: ImDrawList.prototype.set_IdxBuffer });
  ImDrawList.prototype['get_VtxBuffer'] = ImDrawList.prototype.get_VtxBuffer = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_ImDrawList_get_VtxBuffer_0(self), VecVtxBuffer);
};
    ImDrawList.prototype['set_VtxBuffer'] = ImDrawList.prototype.set_VtxBuffer = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_ImDrawList_set_VtxBuffer_1(self, arg0);
};
    Object.defineProperty(ImDrawList.prototype, 'VtxBuffer', { get: ImDrawList.prototype.get_VtxBuffer, set: ImDrawList.prototype.set_VtxBuffer });
  ImDrawList.prototype['__destroy__'] = ImDrawList.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_ImDrawList___destroy___0(self);
};
// ImGuiIO
/** @suppress {undefinedVars, duplicate} @this{Object} */function ImGuiIO() { throw "cannot construct a ImGuiIO, no constructor in IDL" }
ImGuiIO.prototype = Object.create(WrapperObject.prototype);
ImGuiIO.prototype.constructor = ImGuiIO;
ImGuiIO.prototype.__class__ = ImGuiIO;
ImGuiIO.__cache__ = {};
Module['ImGuiIO'] = ImGuiIO;

ImGuiIO.prototype['AddMouseWheelEvent'] = ImGuiIO.prototype.AddMouseWheelEvent = /** @suppress {undefinedVars, duplicate} @this{Object} */function(wheel_x, wheel_y) {
  var self = this.ptr;
  if (wheel_x && typeof wheel_x === 'object') wheel_x = wheel_x.ptr;
  if (wheel_y && typeof wheel_y === 'object') wheel_y = wheel_y.ptr;
  _emscripten_bind_ImGuiIO_AddMouseWheelEvent_2(self, wheel_x, wheel_y);
};;

ImGuiIO.prototype['AddMouseButtonEvent'] = ImGuiIO.prototype.AddMouseButtonEvent = /** @suppress {undefinedVars, duplicate} @this{Object} */function(button, down) {
  var self = this.ptr;
  if (button && typeof button === 'object') button = button.ptr;
  if (down && typeof down === 'object') down = down.ptr;
  _emscripten_bind_ImGuiIO_AddMouseButtonEvent_2(self, button, down);
};;

ImGuiIO.prototype['AddMousePosEvent'] = ImGuiIO.prototype.AddMousePosEvent = /** @suppress {undefinedVars, duplicate} @this{Object} */function(x, y) {
  var self = this.ptr;
  if (x && typeof x === 'object') x = x.ptr;
  if (y && typeof y === 'object') y = y.ptr;
  _emscripten_bind_ImGuiIO_AddMousePosEvent_2(self, x, y);
};;

ImGuiIO.prototype['AddKeyEvent'] = ImGuiIO.prototype.AddKeyEvent = /** @suppress {undefinedVars, duplicate} @this{Object} */function(key, down) {
  var self = this.ptr;
  if (key && typeof key === 'object') key = key.ptr;
  if (down && typeof down === 'object') down = down.ptr;
  _emscripten_bind_ImGuiIO_AddKeyEvent_2(self, key, down);
};;

ImGuiIO.prototype['AddInputCharacter'] = ImGuiIO.prototype.AddInputCharacter = /** @suppress {undefinedVars, duplicate} @this{Object} */function(c) {
  var self = this.ptr;
  if (c && typeof c === 'object') c = c.ptr;
  _emscripten_bind_ImGuiIO_AddInputCharacter_1(self, c);
};;

  ImGuiIO.prototype['get_WantCaptureMouse'] = ImGuiIO.prototype.get_WantCaptureMouse = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return !!(_emscripten_bind_ImGuiIO_get_WantCaptureMouse_0(self));
};
    ImGuiIO.prototype['set_WantCaptureMouse'] = ImGuiIO.prototype.set_WantCaptureMouse = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_ImGuiIO_set_WantCaptureMouse_1(self, arg0);
};
    Object.defineProperty(ImGuiIO.prototype, 'WantCaptureMouse', { get: ImGuiIO.prototype.get_WantCaptureMouse, set: ImGuiIO.prototype.set_WantCaptureMouse });
  ImGuiIO.prototype['get_DisplaySize'] = ImGuiIO.prototype.get_DisplaySize = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_ImGuiIO_get_DisplaySize_0(self), ImVec2);
};
    ImGuiIO.prototype['set_DisplaySize'] = ImGuiIO.prototype.set_DisplaySize = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_ImGuiIO_set_DisplaySize_1(self, arg0);
};
    Object.defineProperty(ImGuiIO.prototype, 'DisplaySize', { get: ImGuiIO.prototype.get_DisplaySize, set: ImGuiIO.prototype.set_DisplaySize });
  ImGuiIO.prototype['get_DisplayFramebufferScale'] = ImGuiIO.prototype.get_DisplayFramebufferScale = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_ImGuiIO_get_DisplayFramebufferScale_0(self), ImVec2);
};
    ImGuiIO.prototype['set_DisplayFramebufferScale'] = ImGuiIO.prototype.set_DisplayFramebufferScale = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_ImGuiIO_set_DisplayFramebufferScale_1(self, arg0);
};
    Object.defineProperty(ImGuiIO.prototype, 'DisplayFramebufferScale', { get: ImGuiIO.prototype.get_DisplayFramebufferScale, set: ImGuiIO.prototype.set_DisplayFramebufferScale });
  ImGuiIO.prototype['get_DeltaTime'] = ImGuiIO.prototype.get_DeltaTime = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_ImGuiIO_get_DeltaTime_0(self);
};
    ImGuiIO.prototype['set_DeltaTime'] = ImGuiIO.prototype.set_DeltaTime = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_ImGuiIO_set_DeltaTime_1(self, arg0);
};
    Object.defineProperty(ImGuiIO.prototype, 'DeltaTime', { get: ImGuiIO.prototype.get_DeltaTime, set: ImGuiIO.prototype.set_DeltaTime });
  ImGuiIO.prototype['get_Fonts'] = ImGuiIO.prototype.get_Fonts = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_ImGuiIO_get_Fonts_0(self), ImFontAtlas);
};
    ImGuiIO.prototype['set_Fonts'] = ImGuiIO.prototype.set_Fonts = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_ImGuiIO_set_Fonts_1(self, arg0);
};
    Object.defineProperty(ImGuiIO.prototype, 'Fonts', { get: ImGuiIO.prototype.get_Fonts, set: ImGuiIO.prototype.set_Fonts });
  ImGuiIO.prototype['__destroy__'] = ImGuiIO.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_ImGuiIO___destroy___0(self);
};
// ImFontAtlas
/** @suppress {undefinedVars, duplicate} @this{Object} */function ImFontAtlas() { throw "cannot construct a ImFontAtlas, no constructor in IDL" }
ImFontAtlas.prototype = Object.create(WrapperObject.prototype);
ImFontAtlas.prototype.constructor = ImFontAtlas;
ImFontAtlas.prototype.__class__ = ImFontAtlas;
ImFontAtlas.__cache__ = {};
Module['ImFontAtlas'] = ImFontAtlas;

  ImFontAtlas.prototype['get_TexID'] = ImFontAtlas.prototype.get_TexID = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _emscripten_bind_ImFontAtlas_get_TexID_0(self);
};
    ImFontAtlas.prototype['set_TexID'] = ImFontAtlas.prototype.set_TexID = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_ImFontAtlas_set_TexID_1(self, arg0);
};
    Object.defineProperty(ImFontAtlas.prototype, 'TexID', { get: ImFontAtlas.prototype.get_TexID, set: ImFontAtlas.prototype.set_TexID });
  ImFontAtlas.prototype['__destroy__'] = ImFontAtlas.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _emscripten_bind_ImFontAtlas___destroy___0(self);
};
// ImGuiContext
/** @suppress {undefinedVars, duplicate} @this{Object} */function ImGuiContext() { throw "cannot construct a ImGuiContext, no constructor in IDL" }
ImGuiContext.prototype = Object.create(WrapperObject.prototype);
ImGuiContext.prototype.constructor = ImGuiContext;
ImGuiContext.prototype.__class__ = ImGuiContext;
ImGuiContext.__cache__ = {};
Module['ImGuiContext'] = ImGuiContext;

(function() {
  function setupEnums() {
    

    // ImGuiKey

    Module['ImGuiKey_None'] = _emscripten_enum_ImGuiKey_ImGuiKey_None();

  }
  if (runtimeInitialized) setupEnums();
  else addOnInit(setupEnums);
})();


// end include: D:\Dev\Projects\java\jDear-imgui\imgui\imgui-cpp\imgui-cpp\build\emscripten\glue.js


  return ImGui.ready
}
);
})();
if (typeof exports === 'object' && typeof module === 'object')
  module.exports = ImGui;
else if (typeof define === 'function' && define['amd'])
  define([], function() { return ImGui; });
else if (typeof exports === 'object')
  exports["ImGui"] = ImGui;
async function asyncCall() {
	window.ImGui = await ImGui();
}

asyncCall();