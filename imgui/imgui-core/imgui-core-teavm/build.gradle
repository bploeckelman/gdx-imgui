plugins {
    id 'java'
}

group = project.libGroup

def module_name = "core-teavm"

configurations {
    includeDep
    implementation.extendsFrom includeDep
}

dependencies {
    implementation "com.github.xpenatan.gdx-teavm:backend-web:1.0.0-SNAPSHOT"
    implementation "com.github.xpenatan.gdx-teavm:backend-teavm:1.0.0-SNAPSHOT"
    implementation "com.badlogicgames.gdx:gdx:$project.gdxVersion"
    includeDep "com.github.xpenatan.jParser:jParser-loader:$project.jParserVersion"
}

clean.doFirst {
    def srcPath = projectDir.toString() + "/src/main/java"
    if(new File(srcPath).exists()) {
        project.delete(files(srcPath))
    }
}

task fromClasses(type: Jar) {
    from(sourceSets.main.output) {
    }
}

task javadocJar(type: Jar) {
    archiveClassifier.set("javadoc")
    from javadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

javadoc {
    options.encoding = 'UTF-8'
    options.addStringOption('Xdoclint:none', '-quiet')
}

artifacts {
    archives javadocJar, sourcesJar
}

publishing {
    publications {
        imguiClasses(MavenPublication) {
            version project.jDearImguiVersion
            project.version = project.jDearImguiVersion
            artifactId module_name
            artifact fromClasses

            pom {
                withXml {
                    def dependencies = asNode().appendNode('dependencies')
                    configurations.includeDep.allDependencies.each {
                        def dependencyNode = dependencies.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}