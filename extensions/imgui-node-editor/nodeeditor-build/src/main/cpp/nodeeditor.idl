
interface NodeEditor {
    static void SetCurrentEditor(EditorContext ctx);
    static EditorContext GetCurrentEditor();
    static EditorContext CreateEditor([Const] optional Config config);
    static void DestroyEditor(EditorContext ctx);
    [Const, Ref] static Config GetConfig(optional EditorContext ctx);

    [Ref] static Style GetStyle();
    [Const, Value] static IDLString GetStyleColorName(StyleColor colorIndex);

    static void PushStyleColor(StyleColor colorIndex, [Const, Ref] ImVec4 color);
    static void PopStyleColor(optional long count);
//
    static void PushStyleVar_1(StyleVar varIndex, float value);
    static void PushStyleVar_2(StyleVar varIndex, [Const, Ref] ImVec2 value);
    static void PushStyleVar_3(StyleVar varIndex, [Const, Ref] ImVec4 value);
    static void PopStyleVar(optional long count);

    static void Begin([Const] DOMString id, [Const, Ref] optional ImVec2 size);
    static void End();

//    static void BeginNode([Value] NodeId id);
//    static void BeginPin([Value] PinId id, PinKind kind);
    static void PinRect([Const, Ref] ImVec2 a, [Const, Ref] ImVec2 b);
    static void PinPivotRect([Const, Ref] ImVec2 a, [Const, Ref] ImVec2 b);
    static void PinPivotSize([Const, Ref] ImVec2 size);
    static void PinPivotScale([Const, Ref] ImVec2 scale);
    static void PinPivotAlignment([Const, Ref] ImVec2 alignment);
    static void EndPin();
    static void Group([Const, Ref] ImVec2 size);
    static void EndNode();
//
//    static boolean BeginGroupHint([Value] NodeId nodeId);
    [Value] static ImVec2 GetGroupMin();
    [Value] static ImVec2 GetGroupMax();
    static ImDrawList GetHintForegroundDrawList();
    static ImDrawList GetHintBackgroundDrawList();
    static void EndGroupHint();
//
//    static ImDrawList GetNodeBackgroundDrawList([Value] NodeId nodeId);
//
//    static boolean Link(LinkId id, PinId startPinId, PinId endPinId, [Const, Ref] optional ImVec4 color, optional float thickness);
//
//    static void Flow(LinkId linkId, optional FlowDirection direction);
//
    static boolean BeginCreate([Const, Ref] optional ImVec4 color, optional float thickness);
//    static boolean QueryNewLink(PinId startId, PinId endId);
//    static boolean QueryNewLink(PinId startId, PinId endId, [Const, Ref] ImVec4 color, optional float thickness);
//    static boolean QueryNewNode(PinId pinId);
//    static boolean QueryNewNode(PinId pinId, [Const, Ref] ImVec4 color, optional float thickness);
    static boolean AcceptNewItem();
    static boolean AcceptNewItem([Const, Ref] ImVec4 color, optional float thickness);
    static void RejectNewItem();
    static void RejectNewItem([Const, Ref] ImVec4 color, optional float thickness);
    static void EndCreate();

    static boolean BeginDelete();
//    static boolean QueryDeletedLink(LinkId linkId, optional PinId startId, optional PinId endId);
//    static boolean QueryDeletedNode(NodeId nodeId);
    static boolean AcceptDeletedItem(optional boolean deleteDependencies);
    static void RejectDeletedItem();
    static void EndDelete();
//
//    static void SetNodePosition([Value] NodeId nodeId, [Const, Ref] ImVec2 editorPosition);
//    static void SetGroupSize([Value] NodeId nodeId, [Const, Ref] ImVec2 size);
//    [Value] static ImVec2 GetNodePosition([Value] NodeId nodeId);
//    [Value] static ImVec2 GetNodeSize([Value] NodeId nodeId);
//    static void CenterNodeOnScreen([Value] NodeId nodeId);
//    static void SetNodeZPosition([Value] NodeId nodeId, float z);
//    static float GetNodeZPosition([Value] NodeId nodeId);

//    static void RestoreNodeState([Value] NodeId nodeId);

    static void Suspend();
    static void Resume();
    static boolean IsSuspended();

    static boolean IsActive();
//
    static boolean HasSelectionChanged();
    static long  GetSelectedObjectCount();
//    static long  GetSelectedNodes(NodeId nodes, long size);
//    static long  GetSelectedLinks(LinkId links, long size);
//    static boolean IsNodeSelected([Value] NodeId nodeId);
//    static boolean IsLinkSelected([Value] LinkId linkId);
    static void ClearSelection();
//    static void SelectNode([Value] NodeId nodeId, optional boolean append);
//    static void SelectLink([Value] LinkId linkId, optional boolean append);
//    static void DeselectNode([Value] NodeId nodeId);
//    static void DeselectLink([Value] LinkId linkId);
//
//    static boolean DeleteNode([Value] NodeId nodeId);
//    static boolean DeleteLink([Value] LinkId linkId);
//
//    static boolean HasAnyLinks([Value] NodeId nodeId);
//    static boolean HasAnyLinks([Value] PinId pinId);
//    static long BreakLinks([Value] NodeId nodeId);
//    static long BreakLinks([Value] PinId pinId);
//
    static void NavigateToContent(optional float duration);
    static void NavigateToSelection(optional boolean zoomIn, optional float duration);
//
//    static boolean ShowNodeContextMenu(NodeId nodeId);
//    static boolean ShowPinContextMenu(PinId pinId);
//    static boolean ShowLinkContextMenu(LinkId linkId);
    static boolean ShowBackgroundContextMenu();
//
//    static void EnableShortcuts(boolean enable);
    static boolean AreShortcutsEnabled();
//
    static boolean BeginShortcut();
    static boolean AcceptCut();
    static boolean AcceptCopy();
    static boolean AcceptPaste();
    static boolean AcceptDuplicate();
    static boolean AcceptCreateNode();
    static long  GetActionContextSize();
//    static long  GetActionContextNodes(NodeId nodes, long size);
//    static long  GetActionContextLinks(LinkId links, long size);
    static void EndShortcut();
//
    static float GetCurrentZoom();
//
//    [Value] static NodeId GetHoveredNode();
//    [Value] static PinId GetHoveredPin();
//    [Value] static LinkId GetHoveredLink();
//    [Value] static NodeId GetDoubleClickedNode();
//    [Value] static PinId GetDoubleClickedPin();
//    [Value] static LinkId GetDoubleClickedLink();
    static boolean IsBackgroundClicked();
    static boolean IsBackgroundDoubleClicked();
//    static ImGuiMouseButton GetBackgroundClickButtonIndex();
//    static ImGuiMouseButton GetBackgroundDoubleClickButtonIndex();
//
//    static boolean GetLinkPins([Value] LinkId linkId, PinId startPinId, PinId endPinId);
//
//    static boolean PinHadAnyLinks(PinId pinId);
//
    [Value] static ImVec2 GetScreenSize();
    [Value] static ImVec2 ScreenToCanvas([Const, Ref] ImVec2 pos);
    [Value] static ImVec2 CanvasToScreen([Const, Ref] ImVec2 pos);

    static long GetNodeCount();
//    static long GetOrderedNodeIds(NodeId nodes, long size);
};

interface Style {

};

interface EditorContext {

};

interface Config {
};

interface NodeId {
};

interface PinId {
};

enum PinKind {
// [-NAMESPACE]
    "PinKind::Input",
    "PinKind::Output"
};

enum FlowDirection {
// [-NAMESPACE]
    "FlowDirection::Forward",
    "FlowDirection::Backward"
};

enum CanvasSizeMode {
// [-NAMESPACE]
    "CanvasSizeMode::FitVerticalView",
    "CanvasSizeMode::FitHorizontalView",
    "CanvasSizeMode::CenterOnly",
};

enum StyleColor {
    "StyleColor_Bg",
    "StyleColor_Grid",
    "StyleColor_NodeBg",
    "StyleColor_NodeBorder",
    "StyleColor_HovNodeBorder",
    "StyleColor_SelNodeBorder",
    "StyleColor_NodeSelRect",
    "StyleColor_NodeSelRectBorder",
    "StyleColor_HovLinkBorder",
    "StyleColor_SelLinkBorder",
    "StyleColor_HighlightLinkBorder",
    "StyleColor_LinkSelRect",
    "StyleColor_LinkSelRectBorder",
    "StyleColor_PinRect",
    "StyleColor_PinRectBorder",
    "StyleColor_Flow",
    "StyleColor_FlowMarker",
    "StyleColor_GroupBg",
    "StyleColor_GroupBorder",
    "StyleColor_Count"
};

enum StyleVar {
    "StyleVar_NodePadding",
    "StyleVar_NodeRounding",
    "StyleVar_NodeBorderWidth",
    "StyleVar_HoveredNodeBorderWidth",
    "StyleVar_SelectedNodeBorderWidth",
    "StyleVar_PinRounding",
    "StyleVar_PinBorderWidth",
    "StyleVar_LinkStrength",
    "StyleVar_SourceDirection",
    "StyleVar_TargetDirection",
    "StyleVar_ScrollDuration",
    "StyleVar_FlowMarkerDistance",
    "StyleVar_FlowSpeed",
    "StyleVar_FlowDuration",
    "StyleVar_PivotAlignment",
    "StyleVar_PivotSize",
    "StyleVar_PivotScale",
    "StyleVar_PinCorners",
    "StyleVar_PinRadius",
    "StyleVar_PinArrowSize",
    "StyleVar_PinArrowWidth",
    "StyleVar_GroupRounding",
    "StyleVar_GroupBorderWidth",
    "StyleVar_HighlightConnectedLinks",
    "StyleVar_SnapLinkToPinDir",
    "StyleVar_HoveredNodeBorderOffset",
    "StyleVar_SelectedNodeBorderOffset",
    "StyleVar_Count"
};