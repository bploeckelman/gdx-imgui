
interface ImLayout {
    static readonly attribute long WRAP_PARENT;
    static readonly attribute long MATCH_PARENT;

    // Debug
    static void DrawBoundingBox_1(float x1, float y1, float x2, float y2, long r, long g, long b, optional long a, optional boolean clipping);
    static void DrawBoundingBox_2([Const, Ref] ImVec2 min, [Const, Ref] ImVec2 max, long r, long g, long b, optional long a, optional boolean clipping);
    static void DrawBoundingBox_3([Const, Ref] ImRect rect, long r, long g, long b, optional long a, optional boolean clipping);
    static void ShowLayoutDebug();
    static void ShowLayoutDebugClipping();

    // Layout
    static void BeginLayout([Const]DOMString id, float sizeX, float sizeY);
    static void BeginLayout([Const]DOMString id, float sizeX, float sizeY, [Ref] ImGuiLayoutOptions options);
    static ImGuiLayout GetCurrentLayout();
    static void EndLayout();

    // Align view
    static void BeginAlign([Const]DOMString id, float sizeX, float sizeY, optional float alignX, optional float alignY, optional float offsetX, optional float offsetY);
    static void AlignLayout(optional float alignX, optional float alignY, optional float offsetX, optional float offsetY);
    static void EndAlign();

    // Custom Collapse Layout
    static boolean BeginCollapseLayout([Const]DOMString id, [Const]DOMString title, float sizeX, float sizeY);
    static boolean BeginCollapseLayout([Const]DOMString id, [Const]DOMString title, float sizeX, float sizeY, [Ref] ImGuiCollapseLayoutOptions option);
    static void BeginCollapseLayout_2([Const]DOMString id, boolean[] isOpen, [Const]DOMString title, float sizeX, float sizeY);
    static void BeginCollapseLayout_2([Const]DOMString id, boolean[] isOpen, [Const]DOMString title, float sizeX, float sizeY, [Ref] ImGuiCollapseLayoutOptions option);
    static void EndCollapseFrameLayout();
    static void EndCollapseLayout();
    static boolean BeginCollapseLayoutEx([Const]DOMString id, [Const]DOMString title, float sizeX, float sizeY);
    static boolean BeginCollapseLayoutEx([Const]DOMString id, [Const]DOMString title, float sizeX, float sizeY, [Ref] ImGuiCollapseLayoutOptions option);
    static boolean BeginCollapseLayoutEx_2(long id, [Const]DOMString title, float sizeX, float sizeY);
    static boolean BeginCollapseLayoutEx_2(long id, [Const]DOMString title, float sizeX, float sizeY, [Ref] ImGuiCollapseLayoutOptions option);
    static void BeginCollapseLayoutEx_3([Const]DOMString id, boolean[] isOpen, [Const]DOMString title, float sizeX, float sizeY);
    static void BeginCollapseLayoutEx_3([Const]DOMString id, boolean[] isOpen, [Const]DOMString title, float sizeX, float sizeY, [Ref] ImGuiCollapseLayoutOptions option);

    // Calculate content size
    static void BeginBoundingBox();
    [Ref] static ImRect EndBoundingBox();

    static float GetTableContentHeight();

    // Tree
    static void BeginTree([Const]DOMString treeIdStr);
    static void EndTree();
    static void BeginTreeLayout(float height, boolean isLeaf);
    static void BeginTreeLayout(float height, boolean isLeaf, boolean isOpen);
    static boolean EndTreeLayout();
    static float GetTreeHeight(float padding);
};

interface ImGuiLayoutOptions {
    void ImGuiLayoutOptions();
    attribute boolean clipping;
    attribute float paddingLeft;
    attribute float paddingRight;
    attribute float paddingTop;
    attribute float paddingBottom;
};

interface ImGuiCollapseLayoutOptions {
    void ImGuiCollapseLayoutOptions();
    attribute unsigned long arrowColor;
    attribute unsigned long arrowBackgroundHoveredColor;
    attribute unsigned long arrowBackgroundClickedColor;
    attribute unsigned long frameColor;
    attribute unsigned long borderColor;
    attribute long borderRound;
    attribute long roundingCorners;
    attribute boolean openDefault;
};
ImGuiCollapseLayoutOptions implements ImGuiLayoutOptions;

interface ImGuiLayout {
    [Value]attribute ImVec2 position;
    [Value]attribute ImVec2 size;

    [Value] ImVec2 getAbsoluteSize();
    [Value] ImVec2 getAbsoluteSizePadding();
    [Value] ImVec2 getContentSize();
    [Value] ImVec2 getContentSizePadding();
    [Value] ImVec2 getPositionPadding();
};